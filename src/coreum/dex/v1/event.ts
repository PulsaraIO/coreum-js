// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: coreum-protos/dex/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "coreum.dex.v1";

/** EventOrderPlaced is emitted when a new order is placed and new sequence is generated for it. */
export interface EventOrderPlaced {
  /** creator is order creator address. */
  creator: string;
  /** id is unique order ID. */
  id: string;
  /** sequence is unique order sequence. */
  sequence: number;
}

/** EventOrderReduced is emitted when the order is reduced during the matching. */
export interface EventOrderReduced {
  /** creator is order creator address. */
  creator: string;
  /** id is unique order ID. */
  id: string;
  /** sequence is unique order sequence. */
  sequence: number;
  /** sent_coin is coin sent during matching. */
  sentCoin: string;
  /** received_coin is coin received during matching. */
  receivedCoin: string;
}

/** EventOrderCreated is emitted when the limit order is saved to the order book. */
export interface EventOrderCreated {
  /** creator is order creator address. */
  creator: string;
  /** id is unique order ID. */
  id: string;
  /** sequence is unique order sequence. */
  sequence: number;
  /** remaining_base_quantity - is remaining quantity of base denom which user wants to sell or buy. */
  remainingBaseQuantity: string;
  /** remaining_spendable_balance - is balance up to which user wants to spend to execute the order. */
  remainingSpendableBalance: string;
}

/** EventOrderClosed is emitted when the order is closed during matching or manually, and removed from the order book. */
export interface EventOrderClosed {
  /** creator is order creator address. */
  creator: string;
  /** id is unique order ID. */
  id: string;
  /** sequence is unique order sequence. */
  sequence: number;
  /** remaining_base_quantity - is remaining quantity of base denom which user wants to sell or buy. */
  remainingBaseQuantity: string;
  /** remaining_spendable_balance - is balance up to which user wants to spend to execute the order. */
  remainingSpendableBalance: string;
}

function createBaseEventOrderPlaced(): EventOrderPlaced {
  return { creator: "", id: "", sequence: 0 };
}

export const EventOrderPlaced: MessageFns<EventOrderPlaced> = {
  encode(message: EventOrderPlaced, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.sequence !== 0) {
      writer.uint32(24).uint64(message.sequence);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventOrderPlaced {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventOrderPlaced();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sequence = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventOrderPlaced {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      sequence: isSet(object.sequence) ? globalThis.Number(object.sequence) : 0,
    };
  },

  toJSON(message: EventOrderPlaced): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.sequence !== 0) {
      obj.sequence = Math.round(message.sequence);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventOrderPlaced>, I>>(base?: I): EventOrderPlaced {
    return EventOrderPlaced.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventOrderPlaced>, I>>(object: I): EventOrderPlaced {
    const message = createBaseEventOrderPlaced();
    message.creator = object.creator ?? "";
    message.id = object.id ?? "";
    message.sequence = object.sequence ?? 0;
    return message;
  },
};

function createBaseEventOrderReduced(): EventOrderReduced {
  return { creator: "", id: "", sequence: 0, sentCoin: "", receivedCoin: "" };
}

export const EventOrderReduced: MessageFns<EventOrderReduced> = {
  encode(message: EventOrderReduced, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.sequence !== 0) {
      writer.uint32(24).uint64(message.sequence);
    }
    if (message.sentCoin !== "") {
      writer.uint32(34).string(message.sentCoin);
    }
    if (message.receivedCoin !== "") {
      writer.uint32(42).string(message.receivedCoin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventOrderReduced {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventOrderReduced();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sequence = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sentCoin = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.receivedCoin = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventOrderReduced {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      sequence: isSet(object.sequence) ? globalThis.Number(object.sequence) : 0,
      sentCoin: isSet(object.sentCoin) ? globalThis.String(object.sentCoin) : "",
      receivedCoin: isSet(object.receivedCoin) ? globalThis.String(object.receivedCoin) : "",
    };
  },

  toJSON(message: EventOrderReduced): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.sequence !== 0) {
      obj.sequence = Math.round(message.sequence);
    }
    if (message.sentCoin !== "") {
      obj.sentCoin = message.sentCoin;
    }
    if (message.receivedCoin !== "") {
      obj.receivedCoin = message.receivedCoin;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventOrderReduced>, I>>(base?: I): EventOrderReduced {
    return EventOrderReduced.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventOrderReduced>, I>>(object: I): EventOrderReduced {
    const message = createBaseEventOrderReduced();
    message.creator = object.creator ?? "";
    message.id = object.id ?? "";
    message.sequence = object.sequence ?? 0;
    message.sentCoin = object.sentCoin ?? "";
    message.receivedCoin = object.receivedCoin ?? "";
    return message;
  },
};

function createBaseEventOrderCreated(): EventOrderCreated {
  return { creator: "", id: "", sequence: 0, remainingBaseQuantity: "", remainingSpendableBalance: "" };
}

export const EventOrderCreated: MessageFns<EventOrderCreated> = {
  encode(message: EventOrderCreated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.sequence !== 0) {
      writer.uint32(24).uint64(message.sequence);
    }
    if (message.remainingBaseQuantity !== "") {
      writer.uint32(34).string(message.remainingBaseQuantity);
    }
    if (message.remainingSpendableBalance !== "") {
      writer.uint32(42).string(message.remainingSpendableBalance);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventOrderCreated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventOrderCreated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sequence = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.remainingBaseQuantity = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.remainingSpendableBalance = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventOrderCreated {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      sequence: isSet(object.sequence) ? globalThis.Number(object.sequence) : 0,
      remainingBaseQuantity: isSet(object.remainingBaseQuantity) ? globalThis.String(object.remainingBaseQuantity) : "",
      remainingSpendableBalance: isSet(object.remainingSpendableBalance)
        ? globalThis.String(object.remainingSpendableBalance)
        : "",
    };
  },

  toJSON(message: EventOrderCreated): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.sequence !== 0) {
      obj.sequence = Math.round(message.sequence);
    }
    if (message.remainingBaseQuantity !== "") {
      obj.remainingBaseQuantity = message.remainingBaseQuantity;
    }
    if (message.remainingSpendableBalance !== "") {
      obj.remainingSpendableBalance = message.remainingSpendableBalance;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventOrderCreated>, I>>(base?: I): EventOrderCreated {
    return EventOrderCreated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventOrderCreated>, I>>(object: I): EventOrderCreated {
    const message = createBaseEventOrderCreated();
    message.creator = object.creator ?? "";
    message.id = object.id ?? "";
    message.sequence = object.sequence ?? 0;
    message.remainingBaseQuantity = object.remainingBaseQuantity ?? "";
    message.remainingSpendableBalance = object.remainingSpendableBalance ?? "";
    return message;
  },
};

function createBaseEventOrderClosed(): EventOrderClosed {
  return { creator: "", id: "", sequence: 0, remainingBaseQuantity: "", remainingSpendableBalance: "" };
}

export const EventOrderClosed: MessageFns<EventOrderClosed> = {
  encode(message: EventOrderClosed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.sequence !== 0) {
      writer.uint32(24).uint64(message.sequence);
    }
    if (message.remainingBaseQuantity !== "") {
      writer.uint32(34).string(message.remainingBaseQuantity);
    }
    if (message.remainingSpendableBalance !== "") {
      writer.uint32(42).string(message.remainingSpendableBalance);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventOrderClosed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventOrderClosed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sequence = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.remainingBaseQuantity = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.remainingSpendableBalance = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventOrderClosed {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      sequence: isSet(object.sequence) ? globalThis.Number(object.sequence) : 0,
      remainingBaseQuantity: isSet(object.remainingBaseQuantity) ? globalThis.String(object.remainingBaseQuantity) : "",
      remainingSpendableBalance: isSet(object.remainingSpendableBalance)
        ? globalThis.String(object.remainingSpendableBalance)
        : "",
    };
  },

  toJSON(message: EventOrderClosed): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.sequence !== 0) {
      obj.sequence = Math.round(message.sequence);
    }
    if (message.remainingBaseQuantity !== "") {
      obj.remainingBaseQuantity = message.remainingBaseQuantity;
    }
    if (message.remainingSpendableBalance !== "") {
      obj.remainingSpendableBalance = message.remainingSpendableBalance;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventOrderClosed>, I>>(base?: I): EventOrderClosed {
    return EventOrderClosed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventOrderClosed>, I>>(object: I): EventOrderClosed {
    const message = createBaseEventOrderClosed();
    message.creator = object.creator ?? "";
    message.id = object.id ?? "";
    message.sequence = object.sequence ?? 0;
    message.remainingBaseQuantity = object.remainingBaseQuantity ?? "";
    message.remainingSpendableBalance = object.remainingSpendableBalance ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
