"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: coreum-protos/ft/authz.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.BurnAuthorization = exports.MintAuthorization = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const coin_1 = require("../../../../cosmos/base/coin");
exports.protobufPackage = "coreum.asset.ft.v1";
function createBaseMintAuthorization() {
    return { mintLimit: [] };
}
exports.MintAuthorization = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.mintLimit) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMintAuthorization();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.mintLimit.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            mintLimit: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.mintLimit)
                ? object.mintLimit.map((e) => coin_1.Coin.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.mintLimit) === null || _a === void 0 ? void 0 : _a.length) {
            obj.mintLimit = message.mintLimit.map((e) => coin_1.Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MintAuthorization.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMintAuthorization();
        message.mintLimit = ((_a = object.mintLimit) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
};
function createBaseBurnAuthorization() {
    return { burnLimit: [] };
}
exports.BurnAuthorization = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.burnLimit) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBurnAuthorization();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.burnLimit.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            burnLimit: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.burnLimit)
                ? object.burnLimit.map((e) => coin_1.Coin.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.burnLimit) === null || _a === void 0 ? void 0 : _a.length) {
            obj.burnLimit = message.burnLimit.map((e) => coin_1.Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.BurnAuthorization.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBurnAuthorization();
        message.burnLimit = ((_a = object.burnLimit) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
};
