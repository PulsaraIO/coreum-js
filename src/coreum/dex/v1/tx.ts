// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: coreum-protos/dex/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  GoodTil,
  OrderType,
  orderTypeFromJSON,
  orderTypeToJSON,
  Side,
  sideFromJSON,
  sideToJSON,
  TimeInForce,
  timeInForceFromJSON,
  timeInForceToJSON,
} from "./order";
import { Params } from "./params";

export const protobufPackage = "coreum.dex.v1";

export interface MsgUpdateParams {
  authority: string;
  params: Params | undefined;
}

/** MsgPlaceOrder defines message to place an order on orderbook. */
export interface MsgPlaceOrder {
  /** sender is order creator address. */
  sender: string;
  /** type is order type. */
  type: OrderType;
  /** id is unique order ID. */
  id: string;
  /** base_denom is base order denom. */
  baseDenom: string;
  /** quote_denom is quote order denom */
  quoteDenom: string;
  /** price is value of one unit of the base_denom expressed in terms of the quote_denom. */
  price: string;
  /** quantity is amount of the base base_denom being traded. */
  quantity: string;
  /** side is order side. */
  side: Side;
  /** good_til is order good til */
  goodTil:
    | GoodTil
    | undefined;
  /** time_in_force is order time in force */
  timeInForce: TimeInForce;
}

/** MsgCancelOrder defines message to cancel the order in the orderbook. */
export interface MsgCancelOrder {
  /** sender is order creator address. */
  sender: string;
  /** id is unique order ID. */
  id: string;
}

/** MsgCancelOrdersByDenom defines message to cancel all orders by denom and account. */
export interface MsgCancelOrdersByDenom {
  /** sender is order creator address. */
  sender: string;
  /** account is order creator address. */
  account: string;
  /** denom is orders denom. */
  denom: string;
}

export interface EmptyResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgPlaceOrder(): MsgPlaceOrder {
  return {
    sender: "",
    type: 0,
    id: "",
    baseDenom: "",
    quoteDenom: "",
    price: "",
    quantity: "",
    side: 0,
    goodTil: undefined,
    timeInForce: 0,
  };
}

export const MsgPlaceOrder: MessageFns<MsgPlaceOrder> = {
  encode(message: MsgPlaceOrder, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    if (message.baseDenom !== "") {
      writer.uint32(34).string(message.baseDenom);
    }
    if (message.quoteDenom !== "") {
      writer.uint32(42).string(message.quoteDenom);
    }
    if (message.price !== "") {
      writer.uint32(50).string(message.price);
    }
    if (message.quantity !== "") {
      writer.uint32(58).string(message.quantity);
    }
    if (message.side !== 0) {
      writer.uint32(64).int32(message.side);
    }
    if (message.goodTil !== undefined) {
      GoodTil.encode(message.goodTil, writer.uint32(74).fork()).join();
    }
    if (message.timeInForce !== 0) {
      writer.uint32(80).int32(message.timeInForce);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgPlaceOrder {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPlaceOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.baseDenom = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.quoteDenom = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.price = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.quantity = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.side = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.goodTil = GoodTil.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.timeInForce = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgPlaceOrder {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      type: isSet(object.type) ? orderTypeFromJSON(object.type) : 0,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      baseDenom: isSet(object.baseDenom) ? globalThis.String(object.baseDenom) : "",
      quoteDenom: isSet(object.quoteDenom) ? globalThis.String(object.quoteDenom) : "",
      price: isSet(object.price) ? globalThis.String(object.price) : "",
      quantity: isSet(object.quantity) ? globalThis.String(object.quantity) : "",
      side: isSet(object.side) ? sideFromJSON(object.side) : 0,
      goodTil: isSet(object.goodTil) ? GoodTil.fromJSON(object.goodTil) : undefined,
      timeInForce: isSet(object.timeInForce) ? timeInForceFromJSON(object.timeInForce) : 0,
    };
  },

  toJSON(message: MsgPlaceOrder): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.type !== 0) {
      obj.type = orderTypeToJSON(message.type);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.baseDenom !== "") {
      obj.baseDenom = message.baseDenom;
    }
    if (message.quoteDenom !== "") {
      obj.quoteDenom = message.quoteDenom;
    }
    if (message.price !== "") {
      obj.price = message.price;
    }
    if (message.quantity !== "") {
      obj.quantity = message.quantity;
    }
    if (message.side !== 0) {
      obj.side = sideToJSON(message.side);
    }
    if (message.goodTil !== undefined) {
      obj.goodTil = GoodTil.toJSON(message.goodTil);
    }
    if (message.timeInForce !== 0) {
      obj.timeInForce = timeInForceToJSON(message.timeInForce);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgPlaceOrder>, I>>(base?: I): MsgPlaceOrder {
    return MsgPlaceOrder.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgPlaceOrder>, I>>(object: I): MsgPlaceOrder {
    const message = createBaseMsgPlaceOrder();
    message.sender = object.sender ?? "";
    message.type = object.type ?? 0;
    message.id = object.id ?? "";
    message.baseDenom = object.baseDenom ?? "";
    message.quoteDenom = object.quoteDenom ?? "";
    message.price = object.price ?? "";
    message.quantity = object.quantity ?? "";
    message.side = object.side ?? 0;
    message.goodTil = (object.goodTil !== undefined && object.goodTil !== null)
      ? GoodTil.fromPartial(object.goodTil)
      : undefined;
    message.timeInForce = object.timeInForce ?? 0;
    return message;
  },
};

function createBaseMsgCancelOrder(): MsgCancelOrder {
  return { sender: "", id: "" };
}

export const MsgCancelOrder: MessageFns<MsgCancelOrder> = {
  encode(message: MsgCancelOrder, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCancelOrder {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCancelOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCancelOrder {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: MsgCancelOrder): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCancelOrder>, I>>(base?: I): MsgCancelOrder {
    return MsgCancelOrder.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCancelOrder>, I>>(object: I): MsgCancelOrder {
    const message = createBaseMsgCancelOrder();
    message.sender = object.sender ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseMsgCancelOrdersByDenom(): MsgCancelOrdersByDenom {
  return { sender: "", account: "", denom: "" };
}

export const MsgCancelOrdersByDenom: MessageFns<MsgCancelOrdersByDenom> = {
  encode(message: MsgCancelOrdersByDenom, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.account !== "") {
      writer.uint32(18).string(message.account);
    }
    if (message.denom !== "") {
      writer.uint32(26).string(message.denom);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCancelOrdersByDenom {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCancelOrdersByDenom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCancelOrdersByDenom {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
    };
  },

  toJSON(message: MsgCancelOrdersByDenom): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCancelOrdersByDenom>, I>>(base?: I): MsgCancelOrdersByDenom {
    return MsgCancelOrdersByDenom.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCancelOrdersByDenom>, I>>(object: I): MsgCancelOrdersByDenom {
    const message = createBaseMsgCancelOrdersByDenom();
    message.sender = object.sender ?? "";
    message.account = object.account ?? "";
    message.denom = object.denom ?? "";
    return message;
  },
};

function createBaseEmptyResponse(): EmptyResponse {
  return {};
}

export const EmptyResponse: MessageFns<EmptyResponse> = {
  encode(_: EmptyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmptyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmptyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EmptyResponse {
    return {};
  },

  toJSON(_: EmptyResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<EmptyResponse>, I>>(base?: I): EmptyResponse {
    return EmptyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EmptyResponse>, I>>(_: I): EmptyResponse {
    const message = createBaseEmptyResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams is a governance operation to modify the parameters of the module.
   * NOTE: all parameters must be provided.
   */
  UpdateParams(request: MsgUpdateParams): Promise<EmptyResponse>;
  /** PlaceOrder place an order on orderbook. */
  PlaceOrder(request: MsgPlaceOrder): Promise<EmptyResponse>;
  /** CancelOrder cancels an order in the orderbook. */
  CancelOrder(request: MsgCancelOrder): Promise<EmptyResponse>;
  /** CancelOrdersByDenom cancels all orders by denom and account. */
  CancelOrdersByDenom(request: MsgCancelOrdersByDenom): Promise<EmptyResponse>;
}

export const MsgServiceName = "coreum.dex.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.PlaceOrder = this.PlaceOrder.bind(this);
    this.CancelOrder = this.CancelOrder.bind(this);
    this.CancelOrdersByDenom = this.CancelOrdersByDenom.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<EmptyResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }

  PlaceOrder(request: MsgPlaceOrder): Promise<EmptyResponse> {
    const data = MsgPlaceOrder.encode(request).finish();
    const promise = this.rpc.request(this.service, "PlaceOrder", data);
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }

  CancelOrder(request: MsgCancelOrder): Promise<EmptyResponse> {
    const data = MsgCancelOrder.encode(request).finish();
    const promise = this.rpc.request(this.service, "CancelOrder", data);
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }

  CancelOrdersByDenom(request: MsgCancelOrdersByDenom): Promise<EmptyResponse> {
    const data = MsgCancelOrdersByDenom.encode(request).finish();
    const promise = this.rpc.request(this.service, "CancelOrdersByDenom", data);
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
