"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: coreum-protos/dex/tx.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgServiceName = exports.EmptyResponse = exports.MsgCancelOrdersByDenom = exports.MsgCancelOrder = exports.MsgPlaceOrder = exports.MsgUpdateParams = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const order_1 = require("./order");
const params_1 = require("./params");
exports.protobufPackage = "coreum.dex.v1";
function createBaseMsgUpdateParams() {
    return { authority: "", params: undefined };
}
exports.MsgUpdateParams = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.params !== undefined) {
            obj.params = params_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgUpdateParams();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.params = (object.params !== undefined && object.params !== null)
            ? params_1.Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseMsgPlaceOrder() {
    return {
        sender: "",
        type: 0,
        id: "",
        baseDenom: "",
        quoteDenom: "",
        price: "",
        quantity: "",
        side: 0,
        goodTil: undefined,
        timeInForce: 0,
    };
}
exports.MsgPlaceOrder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.type !== 0) {
            writer.uint32(16).int32(message.type);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        if (message.baseDenom !== "") {
            writer.uint32(34).string(message.baseDenom);
        }
        if (message.quoteDenom !== "") {
            writer.uint32(42).string(message.quoteDenom);
        }
        if (message.price !== "") {
            writer.uint32(50).string(message.price);
        }
        if (message.quantity !== "") {
            writer.uint32(58).string(message.quantity);
        }
        if (message.side !== 0) {
            writer.uint32(64).int32(message.side);
        }
        if (message.goodTil !== undefined) {
            order_1.GoodTil.encode(message.goodTil, writer.uint32(74).fork()).join();
        }
        if (message.timeInForce !== 0) {
            writer.uint32(80).int32(message.timeInForce);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgPlaceOrder();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.baseDenom = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.quoteDenom = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.price = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.quantity = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.side = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.goodTil = order_1.GoodTil.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.timeInForce = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            type: isSet(object.type) ? (0, order_1.orderTypeFromJSON)(object.type) : 0,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            baseDenom: isSet(object.baseDenom) ? globalThis.String(object.baseDenom) : "",
            quoteDenom: isSet(object.quoteDenom) ? globalThis.String(object.quoteDenom) : "",
            price: isSet(object.price) ? globalThis.String(object.price) : "",
            quantity: isSet(object.quantity) ? globalThis.String(object.quantity) : "",
            side: isSet(object.side) ? (0, order_1.sideFromJSON)(object.side) : 0,
            goodTil: isSet(object.goodTil) ? order_1.GoodTil.fromJSON(object.goodTil) : undefined,
            timeInForce: isSet(object.timeInForce) ? (0, order_1.timeInForceFromJSON)(object.timeInForce) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.type !== 0) {
            obj.type = (0, order_1.orderTypeToJSON)(message.type);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.baseDenom !== "") {
            obj.baseDenom = message.baseDenom;
        }
        if (message.quoteDenom !== "") {
            obj.quoteDenom = message.quoteDenom;
        }
        if (message.price !== "") {
            obj.price = message.price;
        }
        if (message.quantity !== "") {
            obj.quantity = message.quantity;
        }
        if (message.side !== 0) {
            obj.side = (0, order_1.sideToJSON)(message.side);
        }
        if (message.goodTil !== undefined) {
            obj.goodTil = order_1.GoodTil.toJSON(message.goodTil);
        }
        if (message.timeInForce !== 0) {
            obj.timeInForce = (0, order_1.timeInForceToJSON)(message.timeInForce);
        }
        return obj;
    },
    create(base) {
        return exports.MsgPlaceOrder.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseMsgPlaceOrder();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : 0;
        message.id = (_c = object.id) !== null && _c !== void 0 ? _c : "";
        message.baseDenom = (_d = object.baseDenom) !== null && _d !== void 0 ? _d : "";
        message.quoteDenom = (_e = object.quoteDenom) !== null && _e !== void 0 ? _e : "";
        message.price = (_f = object.price) !== null && _f !== void 0 ? _f : "";
        message.quantity = (_g = object.quantity) !== null && _g !== void 0 ? _g : "";
        message.side = (_h = object.side) !== null && _h !== void 0 ? _h : 0;
        message.goodTil = (object.goodTil !== undefined && object.goodTil !== null)
            ? order_1.GoodTil.fromPartial(object.goodTil)
            : undefined;
        message.timeInForce = (_j = object.timeInForce) !== null && _j !== void 0 ? _j : 0;
        return message;
    },
};
function createBaseMsgCancelOrder() {
    return { sender: "", id: "" };
}
exports.MsgCancelOrder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCancelOrder();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.MsgCancelOrder.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgCancelOrder();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgCancelOrdersByDenom() {
    return { sender: "", account: "", denom: "" };
}
exports.MsgCancelOrdersByDenom = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.account !== "") {
            writer.uint32(18).string(message.account);
        }
        if (message.denom !== "") {
            writer.uint32(26).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCancelOrdersByDenom();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            account: isSet(object.account) ? globalThis.String(object.account) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.account !== "") {
            obj.account = message.account;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return exports.MsgCancelOrdersByDenom.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgCancelOrdersByDenom();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.account = (_b = object.account) !== null && _b !== void 0 ? _b : "";
        message.denom = (_c = object.denom) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseEmptyResponse() {
    return {};
}
exports.EmptyResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEmptyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.EmptyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseEmptyResponse();
        return message;
    },
};
exports.MsgServiceName = "coreum.dex.v1.Msg";
class MsgClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.MsgServiceName;
        this.rpc = rpc;
        this.UpdateParams = this.UpdateParams.bind(this);
        this.PlaceOrder = this.PlaceOrder.bind(this);
        this.CancelOrder = this.CancelOrder.bind(this);
        this.CancelOrdersByDenom = this.CancelOrdersByDenom.bind(this);
    }
    UpdateParams(request) {
        const data = exports.MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateParams", data);
        return promise.then((data) => exports.EmptyResponse.decode(new wire_1.BinaryReader(data)));
    }
    PlaceOrder(request) {
        const data = exports.MsgPlaceOrder.encode(request).finish();
        const promise = this.rpc.request(this.service, "PlaceOrder", data);
        return promise.then((data) => exports.EmptyResponse.decode(new wire_1.BinaryReader(data)));
    }
    CancelOrder(request) {
        const data = exports.MsgCancelOrder.encode(request).finish();
        const promise = this.rpc.request(this.service, "CancelOrder", data);
        return promise.then((data) => exports.EmptyResponse.decode(new wire_1.BinaryReader(data)));
    }
    CancelOrdersByDenom(request) {
        const data = exports.MsgCancelOrdersByDenom.encode(request).finish();
        const promise = this.rpc.request(this.service, "CancelOrdersByDenom", data);
        return promise.then((data) => exports.EmptyResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
