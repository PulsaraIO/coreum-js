"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: coreum-protos/ft/event.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventDEXSettingsChanged = exports.EventAdminCleared = exports.EventAdminTransferred = exports.EventDEXExpectedToReceiveAmountChanged = exports.EventDEXLockedAmountChanged = exports.EventWhitelistedAmountChanged = exports.EventAmountClawedBack = exports.EventFrozenAmountChanged = exports.EventIssued = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const token_1 = require("./token");
exports.protobufPackage = "coreum.asset.ft.v1";
function createBaseEventIssued() {
    return {
        denom: "",
        issuer: "",
        symbol: "",
        subunit: "",
        precision: 0,
        initialAmount: "",
        description: "",
        features: [],
        burnRate: "",
        sendCommissionRate: "",
        uri: "",
        uriHash: "",
        admin: "",
        dexSettings: undefined,
    };
}
exports.EventIssued = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.issuer !== "") {
            writer.uint32(18).string(message.issuer);
        }
        if (message.symbol !== "") {
            writer.uint32(26).string(message.symbol);
        }
        if (message.subunit !== "") {
            writer.uint32(34).string(message.subunit);
        }
        if (message.precision !== 0) {
            writer.uint32(40).uint32(message.precision);
        }
        if (message.initialAmount !== "") {
            writer.uint32(50).string(message.initialAmount);
        }
        if (message.description !== "") {
            writer.uint32(58).string(message.description);
        }
        writer.uint32(66).fork();
        for (const v of message.features) {
            writer.int32(v);
        }
        writer.join();
        if (message.burnRate !== "") {
            writer.uint32(74).string(message.burnRate);
        }
        if (message.sendCommissionRate !== "") {
            writer.uint32(82).string(message.sendCommissionRate);
        }
        if (message.uri !== "") {
            writer.uint32(90).string(message.uri);
        }
        if (message.uriHash !== "") {
            writer.uint32(98).string(message.uriHash);
        }
        if (message.admin !== "") {
            writer.uint32(106).string(message.admin);
        }
        if (message.dexSettings !== undefined) {
            token_1.DEXSettings.encode(message.dexSettings, writer.uint32(114).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventIssued();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.symbol = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.subunit = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.precision = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.initialAmount = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 8: {
                    if (tag === 64) {
                        message.features.push(reader.int32());
                        continue;
                    }
                    if (tag === 66) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.features.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.burnRate = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.sendCommissionRate = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.uri = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.uriHash = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.admin = reader.string();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.dexSettings = token_1.DEXSettings.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
            subunit: isSet(object.subunit) ? globalThis.String(object.subunit) : "",
            precision: isSet(object.precision)
                ? globalThis.Number(object.precision)
                : 0,
            initialAmount: isSet(object.initialAmount)
                ? globalThis.String(object.initialAmount)
                : "",
            description: isSet(object.description)
                ? globalThis.String(object.description)
                : "",
            features: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.features)
                ? object.features.map((e) => (0, token_1.featureFromJSON)(e))
                : [],
            burnRate: isSet(object.burnRate)
                ? globalThis.String(object.burnRate)
                : "",
            sendCommissionRate: isSet(object.sendCommissionRate)
                ? globalThis.String(object.sendCommissionRate)
                : "",
            uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
            uriHash: isSet(object.uriHash) ? globalThis.String(object.uriHash) : "",
            admin: isSet(object.admin) ? globalThis.String(object.admin) : "",
            dexSettings: isSet(object.dexSettings)
                ? token_1.DEXSettings.fromJSON(object.dexSettings)
                : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.symbol !== "") {
            obj.symbol = message.symbol;
        }
        if (message.subunit !== "") {
            obj.subunit = message.subunit;
        }
        if (message.precision !== 0) {
            obj.precision = Math.round(message.precision);
        }
        if (message.initialAmount !== "") {
            obj.initialAmount = message.initialAmount;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if ((_a = message.features) === null || _a === void 0 ? void 0 : _a.length) {
            obj.features = message.features.map((e) => (0, token_1.featureToJSON)(e));
        }
        if (message.burnRate !== "") {
            obj.burnRate = message.burnRate;
        }
        if (message.sendCommissionRate !== "") {
            obj.sendCommissionRate = message.sendCommissionRate;
        }
        if (message.uri !== "") {
            obj.uri = message.uri;
        }
        if (message.uriHash !== "") {
            obj.uriHash = message.uriHash;
        }
        if (message.admin !== "") {
            obj.admin = message.admin;
        }
        if (message.dexSettings !== undefined) {
            obj.dexSettings = token_1.DEXSettings.toJSON(message.dexSettings);
        }
        return obj;
    },
    create(base) {
        return exports.EventIssued.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseEventIssued();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : "";
        message.issuer = (_b = object.issuer) !== null && _b !== void 0 ? _b : "";
        message.symbol = (_c = object.symbol) !== null && _c !== void 0 ? _c : "";
        message.subunit = (_d = object.subunit) !== null && _d !== void 0 ? _d : "";
        message.precision = (_e = object.precision) !== null && _e !== void 0 ? _e : 0;
        message.initialAmount = (_f = object.initialAmount) !== null && _f !== void 0 ? _f : "";
        message.description = (_g = object.description) !== null && _g !== void 0 ? _g : "";
        message.features = ((_h = object.features) === null || _h === void 0 ? void 0 : _h.map((e) => e)) || [];
        message.burnRate = (_j = object.burnRate) !== null && _j !== void 0 ? _j : "";
        message.sendCommissionRate = (_k = object.sendCommissionRate) !== null && _k !== void 0 ? _k : "";
        message.uri = (_l = object.uri) !== null && _l !== void 0 ? _l : "";
        message.uriHash = (_m = object.uriHash) !== null && _m !== void 0 ? _m : "";
        message.admin = (_o = object.admin) !== null && _o !== void 0 ? _o : "";
        message.dexSettings =
            object.dexSettings !== undefined && object.dexSettings !== null
                ? token_1.DEXSettings.fromPartial(object.dexSettings)
                : undefined;
        return message;
    },
};
function createBaseEventFrozenAmountChanged() {
    return { account: "", denom: "", previousAmount: "", currentAmount: "" };
}
exports.EventFrozenAmountChanged = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.previousAmount !== "") {
            writer.uint32(26).string(message.previousAmount);
        }
        if (message.currentAmount !== "") {
            writer.uint32(34).string(message.currentAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventFrozenAmountChanged();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.previousAmount = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.currentAmount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: isSet(object.account) ? globalThis.String(object.account) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            previousAmount: isSet(object.previousAmount)
                ? globalThis.String(object.previousAmount)
                : "",
            currentAmount: isSet(object.currentAmount)
                ? globalThis.String(object.currentAmount)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.account !== "") {
            obj.account = message.account;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.previousAmount !== "") {
            obj.previousAmount = message.previousAmount;
        }
        if (message.currentAmount !== "") {
            obj.currentAmount = message.currentAmount;
        }
        return obj;
    },
    create(base) {
        return exports.EventFrozenAmountChanged.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseEventFrozenAmountChanged();
        message.account = (_a = object.account) !== null && _a !== void 0 ? _a : "";
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : "";
        message.previousAmount = (_c = object.previousAmount) !== null && _c !== void 0 ? _c : "";
        message.currentAmount = (_d = object.currentAmount) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseEventAmountClawedBack() {
    return { account: "", denom: "", amount: "" };
}
exports.EventAmountClawedBack = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.amount !== "") {
            writer.uint32(26).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventAmountClawedBack();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: isSet(object.account) ? globalThis.String(object.account) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.account !== "") {
            obj.account = message.account;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return exports.EventAmountClawedBack.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseEventAmountClawedBack();
        message.account = (_a = object.account) !== null && _a !== void 0 ? _a : "";
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : "";
        message.amount = (_c = object.amount) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseEventWhitelistedAmountChanged() {
    return { account: "", denom: "", previousAmount: "", currentAmount: "" };
}
exports.EventWhitelistedAmountChanged = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.previousAmount !== "") {
            writer.uint32(26).string(message.previousAmount);
        }
        if (message.currentAmount !== "") {
            writer.uint32(34).string(message.currentAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventWhitelistedAmountChanged();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.previousAmount = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.currentAmount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: isSet(object.account) ? globalThis.String(object.account) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            previousAmount: isSet(object.previousAmount)
                ? globalThis.String(object.previousAmount)
                : "",
            currentAmount: isSet(object.currentAmount)
                ? globalThis.String(object.currentAmount)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.account !== "") {
            obj.account = message.account;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.previousAmount !== "") {
            obj.previousAmount = message.previousAmount;
        }
        if (message.currentAmount !== "") {
            obj.currentAmount = message.currentAmount;
        }
        return obj;
    },
    create(base) {
        return exports.EventWhitelistedAmountChanged.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseEventWhitelistedAmountChanged();
        message.account = (_a = object.account) !== null && _a !== void 0 ? _a : "";
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : "";
        message.previousAmount = (_c = object.previousAmount) !== null && _c !== void 0 ? _c : "";
        message.currentAmount = (_d = object.currentAmount) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseEventDEXLockedAmountChanged() {
    return { account: "", denom: "", previousAmount: "", currentAmount: "" };
}
exports.EventDEXLockedAmountChanged = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.previousAmount !== "") {
            writer.uint32(26).string(message.previousAmount);
        }
        if (message.currentAmount !== "") {
            writer.uint32(34).string(message.currentAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventDEXLockedAmountChanged();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.previousAmount = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.currentAmount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: isSet(object.account) ? globalThis.String(object.account) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            previousAmount: isSet(object.previousAmount)
                ? globalThis.String(object.previousAmount)
                : "",
            currentAmount: isSet(object.currentAmount)
                ? globalThis.String(object.currentAmount)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.account !== "") {
            obj.account = message.account;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.previousAmount !== "") {
            obj.previousAmount = message.previousAmount;
        }
        if (message.currentAmount !== "") {
            obj.currentAmount = message.currentAmount;
        }
        return obj;
    },
    create(base) {
        return exports.EventDEXLockedAmountChanged.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseEventDEXLockedAmountChanged();
        message.account = (_a = object.account) !== null && _a !== void 0 ? _a : "";
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : "";
        message.previousAmount = (_c = object.previousAmount) !== null && _c !== void 0 ? _c : "";
        message.currentAmount = (_d = object.currentAmount) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseEventDEXExpectedToReceiveAmountChanged() {
    return { account: "", denom: "", previousAmount: "", currentAmount: "" };
}
exports.EventDEXExpectedToReceiveAmountChanged = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.previousAmount !== "") {
            writer.uint32(26).string(message.previousAmount);
        }
        if (message.currentAmount !== "") {
            writer.uint32(34).string(message.currentAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventDEXExpectedToReceiveAmountChanged();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.previousAmount = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.currentAmount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: isSet(object.account) ? globalThis.String(object.account) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            previousAmount: isSet(object.previousAmount)
                ? globalThis.String(object.previousAmount)
                : "",
            currentAmount: isSet(object.currentAmount)
                ? globalThis.String(object.currentAmount)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.account !== "") {
            obj.account = message.account;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.previousAmount !== "") {
            obj.previousAmount = message.previousAmount;
        }
        if (message.currentAmount !== "") {
            obj.currentAmount = message.currentAmount;
        }
        return obj;
    },
    create(base) {
        return exports.EventDEXExpectedToReceiveAmountChanged.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseEventDEXExpectedToReceiveAmountChanged();
        message.account = (_a = object.account) !== null && _a !== void 0 ? _a : "";
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : "";
        message.previousAmount = (_c = object.previousAmount) !== null && _c !== void 0 ? _c : "";
        message.currentAmount = (_d = object.currentAmount) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseEventAdminTransferred() {
    return { denom: "", previousAdmin: "", currentAdmin: "" };
}
exports.EventAdminTransferred = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.previousAdmin !== "") {
            writer.uint32(18).string(message.previousAdmin);
        }
        if (message.currentAdmin !== "") {
            writer.uint32(26).string(message.currentAdmin);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventAdminTransferred();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.previousAdmin = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.currentAdmin = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            previousAdmin: isSet(object.previousAdmin)
                ? globalThis.String(object.previousAdmin)
                : "",
            currentAdmin: isSet(object.currentAdmin)
                ? globalThis.String(object.currentAdmin)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.previousAdmin !== "") {
            obj.previousAdmin = message.previousAdmin;
        }
        if (message.currentAdmin !== "") {
            obj.currentAdmin = message.currentAdmin;
        }
        return obj;
    },
    create(base) {
        return exports.EventAdminTransferred.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseEventAdminTransferred();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : "";
        message.previousAdmin = (_b = object.previousAdmin) !== null && _b !== void 0 ? _b : "";
        message.currentAdmin = (_c = object.currentAdmin) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseEventAdminCleared() {
    return { denom: "", previousAdmin: "" };
}
exports.EventAdminCleared = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.previousAdmin !== "") {
            writer.uint32(18).string(message.previousAdmin);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventAdminCleared();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.previousAdmin = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            previousAdmin: isSet(object.previousAdmin)
                ? globalThis.String(object.previousAdmin)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.previousAdmin !== "") {
            obj.previousAdmin = message.previousAdmin;
        }
        return obj;
    },
    create(base) {
        return exports.EventAdminCleared.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventAdminCleared();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : "";
        message.previousAdmin = (_b = object.previousAdmin) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseEventDEXSettingsChanged() {
    return { previousSettings: undefined, newSettings: undefined };
}
exports.EventDEXSettingsChanged = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.previousSettings !== undefined) {
            token_1.DEXSettings.encode(message.previousSettings, writer.uint32(10).fork()).join();
        }
        if (message.newSettings !== undefined) {
            token_1.DEXSettings.encode(message.newSettings, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventDEXSettingsChanged();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.previousSettings = token_1.DEXSettings.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.newSettings = token_1.DEXSettings.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            previousSettings: isSet(object.previousSettings)
                ? token_1.DEXSettings.fromJSON(object.previousSettings)
                : undefined,
            newSettings: isSet(object.newSettings)
                ? token_1.DEXSettings.fromJSON(object.newSettings)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.previousSettings !== undefined) {
            obj.previousSettings = token_1.DEXSettings.toJSON(message.previousSettings);
        }
        if (message.newSettings !== undefined) {
            obj.newSettings = token_1.DEXSettings.toJSON(message.newSettings);
        }
        return obj;
    },
    create(base) {
        return exports.EventDEXSettingsChanged.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseEventDEXSettingsChanged();
        message.previousSettings =
            object.previousSettings !== undefined && object.previousSettings !== null
                ? token_1.DEXSettings.fromPartial(object.previousSettings)
                : undefined;
        message.newSettings =
            object.newSettings !== undefined && object.newSettings !== null
                ? token_1.DEXSettings.fromPartial(object.newSettings)
                : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
