// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: coreum-protos/nft/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ClassFeature, classFeatureFromJSON, classFeatureToJSON } from "./nft";

export const protobufPackage = "coreum.asset.nft.v1";

/** EventClassIssued is emitted on MsgIssueClass. */
export interface EventClassIssued {
  id: string;
  issuer: string;
  symbol: string;
  name: string;
  description: string;
  uri: string;
  uriHash: string;
  features: ClassFeature[];
  royaltyRate: string;
}

export interface EventFrozen {
  classId: string;
  id: string;
  owner: string;
}

export interface EventUnfrozen {
  classId: string;
  id: string;
  owner: string;
}

export interface EventClassFrozen {
  classId: string;
  account: string;
}

export interface EventClassUnfrozen {
  classId: string;
  account: string;
}

export interface EventAddedToWhitelist {
  classId: string;
  id: string;
  account: string;
}

export interface EventRemovedFromWhitelist {
  classId: string;
  id: string;
  account: string;
}

export interface EventAddedToClassWhitelist {
  classId: string;
  account: string;
}

export interface EventRemovedFromClassWhitelist {
  classId: string;
  account: string;
}

function createBaseEventClassIssued(): EventClassIssued {
  return {
    id: "",
    issuer: "",
    symbol: "",
    name: "",
    description: "",
    uri: "",
    uriHash: "",
    features: [],
    royaltyRate: "",
  };
}

export const EventClassIssued: MessageFns<EventClassIssued> = {
  encode(
    message: EventClassIssued,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    if (message.symbol !== "") {
      writer.uint32(26).string(message.symbol);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.uri !== "") {
      writer.uint32(50).string(message.uri);
    }
    if (message.uriHash !== "") {
      writer.uint32(58).string(message.uriHash);
    }
    writer.uint32(66).fork();
    for (const v of message.features) {
      writer.int32(v);
    }
    writer.join();
    if (message.royaltyRate !== "") {
      writer.uint32(74).string(message.royaltyRate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventClassIssued {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventClassIssued();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.symbol = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.uriHash = reader.string();
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.features.push(reader.int32() as any);

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.features.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.royaltyRate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventClassIssued {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      uriHash: isSet(object.uriHash) ? globalThis.String(object.uriHash) : "",
      features: globalThis.Array.isArray(object?.features)
        ? object.features.map((e: any) => classFeatureFromJSON(e))
        : [],
      royaltyRate: isSet(object.royaltyRate)
        ? globalThis.String(object.royaltyRate)
        : "",
    };
  },

  toJSON(message: EventClassIssued): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.uriHash !== "") {
      obj.uriHash = message.uriHash;
    }
    if (message.features?.length) {
      obj.features = message.features.map((e) => classFeatureToJSON(e));
    }
    if (message.royaltyRate !== "") {
      obj.royaltyRate = message.royaltyRate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventClassIssued>, I>>(
    base?: I
  ): EventClassIssued {
    return EventClassIssued.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventClassIssued>, I>>(
    object: I
  ): EventClassIssued {
    const message = createBaseEventClassIssued();
    message.id = object.id ?? "";
    message.issuer = object.issuer ?? "";
    message.symbol = object.symbol ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.uri = object.uri ?? "";
    message.uriHash = object.uriHash ?? "";
    message.features = object.features?.map((e) => e) || [];
    message.royaltyRate = object.royaltyRate ?? "";
    return message;
  },
};

function createBaseEventFrozen(): EventFrozen {
  return { classId: "", id: "", owner: "" };
}

export const EventFrozen: MessageFns<EventFrozen> = {
  encode(
    message: EventFrozen,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.classId !== "") {
      writer.uint32(10).string(message.classId);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventFrozen {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventFrozen();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.classId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventFrozen {
    return {
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: EventFrozen): unknown {
    const obj: any = {};
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventFrozen>, I>>(base?: I): EventFrozen {
    return EventFrozen.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventFrozen>, I>>(
    object: I
  ): EventFrozen {
    const message = createBaseEventFrozen();
    message.classId = object.classId ?? "";
    message.id = object.id ?? "";
    message.owner = object.owner ?? "";
    return message;
  },
};

function createBaseEventUnfrozen(): EventUnfrozen {
  return { classId: "", id: "", owner: "" };
}

export const EventUnfrozen: MessageFns<EventUnfrozen> = {
  encode(
    message: EventUnfrozen,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.classId !== "") {
      writer.uint32(10).string(message.classId);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventUnfrozen {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventUnfrozen();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.classId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventUnfrozen {
    return {
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: EventUnfrozen): unknown {
    const obj: any = {};
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventUnfrozen>, I>>(
    base?: I
  ): EventUnfrozen {
    return EventUnfrozen.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventUnfrozen>, I>>(
    object: I
  ): EventUnfrozen {
    const message = createBaseEventUnfrozen();
    message.classId = object.classId ?? "";
    message.id = object.id ?? "";
    message.owner = object.owner ?? "";
    return message;
  },
};

function createBaseEventClassFrozen(): EventClassFrozen {
  return { classId: "", account: "" };
}

export const EventClassFrozen: MessageFns<EventClassFrozen> = {
  encode(
    message: EventClassFrozen,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.classId !== "") {
      writer.uint32(10).string(message.classId);
    }
    if (message.account !== "") {
      writer.uint32(26).string(message.account);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventClassFrozen {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventClassFrozen();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.classId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.account = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventClassFrozen {
    return {
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
    };
  },

  toJSON(message: EventClassFrozen): unknown {
    const obj: any = {};
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventClassFrozen>, I>>(
    base?: I
  ): EventClassFrozen {
    return EventClassFrozen.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventClassFrozen>, I>>(
    object: I
  ): EventClassFrozen {
    const message = createBaseEventClassFrozen();
    message.classId = object.classId ?? "";
    message.account = object.account ?? "";
    return message;
  },
};

function createBaseEventClassUnfrozen(): EventClassUnfrozen {
  return { classId: "", account: "" };
}

export const EventClassUnfrozen: MessageFns<EventClassUnfrozen> = {
  encode(
    message: EventClassUnfrozen,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.classId !== "") {
      writer.uint32(10).string(message.classId);
    }
    if (message.account !== "") {
      writer.uint32(26).string(message.account);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): EventClassUnfrozen {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventClassUnfrozen();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.classId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.account = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventClassUnfrozen {
    return {
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
    };
  },

  toJSON(message: EventClassUnfrozen): unknown {
    const obj: any = {};
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventClassUnfrozen>, I>>(
    base?: I
  ): EventClassUnfrozen {
    return EventClassUnfrozen.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventClassUnfrozen>, I>>(
    object: I
  ): EventClassUnfrozen {
    const message = createBaseEventClassUnfrozen();
    message.classId = object.classId ?? "";
    message.account = object.account ?? "";
    return message;
  },
};

function createBaseEventAddedToWhitelist(): EventAddedToWhitelist {
  return { classId: "", id: "", account: "" };
}

export const EventAddedToWhitelist: MessageFns<EventAddedToWhitelist> = {
  encode(
    message: EventAddedToWhitelist,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.classId !== "") {
      writer.uint32(10).string(message.classId);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.account !== "") {
      writer.uint32(26).string(message.account);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): EventAddedToWhitelist {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAddedToWhitelist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.classId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.account = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAddedToWhitelist {
    return {
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
    };
  },

  toJSON(message: EventAddedToWhitelist): unknown {
    const obj: any = {};
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAddedToWhitelist>, I>>(
    base?: I
  ): EventAddedToWhitelist {
    return EventAddedToWhitelist.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAddedToWhitelist>, I>>(
    object: I
  ): EventAddedToWhitelist {
    const message = createBaseEventAddedToWhitelist();
    message.classId = object.classId ?? "";
    message.id = object.id ?? "";
    message.account = object.account ?? "";
    return message;
  },
};

function createBaseEventRemovedFromWhitelist(): EventRemovedFromWhitelist {
  return { classId: "", id: "", account: "" };
}

export const EventRemovedFromWhitelist: MessageFns<EventRemovedFromWhitelist> =
  {
    encode(
      message: EventRemovedFromWhitelist,
      writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
      if (message.classId !== "") {
        writer.uint32(10).string(message.classId);
      }
      if (message.id !== "") {
        writer.uint32(18).string(message.id);
      }
      if (message.account !== "") {
        writer.uint32(26).string(message.account);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number
    ): EventRemovedFromWhitelist {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseEventRemovedFromWhitelist();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.classId = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.id = reader.string();
            continue;
          }
          case 3: {
            if (tag !== 26) {
              break;
            }

            message.account = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): EventRemovedFromWhitelist {
      return {
        classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
        id: isSet(object.id) ? globalThis.String(object.id) : "",
        account: isSet(object.account) ? globalThis.String(object.account) : "",
      };
    },

    toJSON(message: EventRemovedFromWhitelist): unknown {
      const obj: any = {};
      if (message.classId !== "") {
        obj.classId = message.classId;
      }
      if (message.id !== "") {
        obj.id = message.id;
      }
      if (message.account !== "") {
        obj.account = message.account;
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<EventRemovedFromWhitelist>, I>>(
      base?: I
    ): EventRemovedFromWhitelist {
      return EventRemovedFromWhitelist.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<EventRemovedFromWhitelist>, I>>(
      object: I
    ): EventRemovedFromWhitelist {
      const message = createBaseEventRemovedFromWhitelist();
      message.classId = object.classId ?? "";
      message.id = object.id ?? "";
      message.account = object.account ?? "";
      return message;
    },
  };

function createBaseEventAddedToClassWhitelist(): EventAddedToClassWhitelist {
  return { classId: "", account: "" };
}

export const EventAddedToClassWhitelist: MessageFns<EventAddedToClassWhitelist> =
  {
    encode(
      message: EventAddedToClassWhitelist,
      writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
      if (message.classId !== "") {
        writer.uint32(10).string(message.classId);
      }
      if (message.account !== "") {
        writer.uint32(18).string(message.account);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number
    ): EventAddedToClassWhitelist {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseEventAddedToClassWhitelist();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.classId = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.account = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): EventAddedToClassWhitelist {
      return {
        classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
        account: isSet(object.account) ? globalThis.String(object.account) : "",
      };
    },

    toJSON(message: EventAddedToClassWhitelist): unknown {
      const obj: any = {};
      if (message.classId !== "") {
        obj.classId = message.classId;
      }
      if (message.account !== "") {
        obj.account = message.account;
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<EventAddedToClassWhitelist>, I>>(
      base?: I
    ): EventAddedToClassWhitelist {
      return EventAddedToClassWhitelist.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<EventAddedToClassWhitelist>, I>>(
      object: I
    ): EventAddedToClassWhitelist {
      const message = createBaseEventAddedToClassWhitelist();
      message.classId = object.classId ?? "";
      message.account = object.account ?? "";
      return message;
    },
  };

function createBaseEventRemovedFromClassWhitelist(): EventRemovedFromClassWhitelist {
  return { classId: "", account: "" };
}

export const EventRemovedFromClassWhitelist: MessageFns<EventRemovedFromClassWhitelist> =
  {
    encode(
      message: EventRemovedFromClassWhitelist,
      writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
      if (message.classId !== "") {
        writer.uint32(10).string(message.classId);
      }
      if (message.account !== "") {
        writer.uint32(18).string(message.account);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number
    ): EventRemovedFromClassWhitelist {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseEventRemovedFromClassWhitelist();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.classId = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.account = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): EventRemovedFromClassWhitelist {
      return {
        classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
        account: isSet(object.account) ? globalThis.String(object.account) : "",
      };
    },

    toJSON(message: EventRemovedFromClassWhitelist): unknown {
      const obj: any = {};
      if (message.classId !== "") {
        obj.classId = message.classId;
      }
      if (message.account !== "") {
        obj.account = message.account;
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<EventRemovedFromClassWhitelist>, I>>(
      base?: I
    ): EventRemovedFromClassWhitelist {
      return EventRemovedFromClassWhitelist.fromPartial(base ?? ({} as any));
    },
    fromPartial<
      I extends Exact<DeepPartial<EventRemovedFromClassWhitelist>, I>
    >(object: I): EventRemovedFromClassWhitelist {
      const message = createBaseEventRemovedFromClassWhitelist();
      message.classId = object.classId ?? "";
      message.account = object.account ?? "";
      return message;
    },
  };

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
