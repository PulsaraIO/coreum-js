import require$$0$2 from 'fs';
import require$$1 from 'path';
import require$$1$2 from 'http';
import require$$2 from 'https';
import require$$7 from 'url';
import require$$0$5 from 'stream';
import require$$4 from 'assert';
import require$$0$4 from 'tty';
import require$$1$1 from 'util';
import require$$0$3 from 'os';
import require$$8 from 'zlib';
import require$$0$7 from 'events';
import require$$3 from 'net';
import require$$4$1 from 'tls';
import require$$5 from 'crypto';
import require$$0$6 from 'buffer';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var build$b = {};

var accounts = {};

var build$a = {};

var decimal = {};

var bn$1 = {exports: {}};

(function (module) {
	(function (module, exports) {

	  // Utils
	  function assert (val, msg) {
	    if (!val) throw new Error(msg || 'Assertion failed');
	  }

	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits (ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  }

	  // BN

	  function BN (number, base, endian) {
	    if (BN.isBN(number)) {
	      return number;
	    }

	    this.negative = 0;
	    this.words = null;
	    this.length = 0;

	    // Reduction context
	    this.red = null;

	    if (number !== null) {
	      if (base === 'le' || base === 'be') {
	        endian = base;
	        base = 10;
	      }

	      this._init(number || 0, base || 10, endian || 'be');
	    }
	  }
	  if (typeof module === 'object') {
	    module.exports = BN;
	  } else {
	    exports.BN = BN;
	  }

	  BN.BN = BN;
	  BN.wordSize = 26;

	  var Buffer;
	  try {
	    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
	      Buffer = window.Buffer;
	    } else {
	      Buffer = require('buffer').Buffer;
	    }
	  } catch (e) {
	  }

	  BN.isBN = function isBN (num) {
	    if (num instanceof BN) {
	      return true;
	    }

	    return num !== null && typeof num === 'object' &&
	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };

	  BN.max = function max (left, right) {
	    if (left.cmp(right) > 0) return left;
	    return right;
	  };

	  BN.min = function min (left, right) {
	    if (left.cmp(right) < 0) return left;
	    return right;
	  };

	  BN.prototype._init = function init (number, base, endian) {
	    if (typeof number === 'number') {
	      return this._initNumber(number, base, endian);
	    }

	    if (typeof number === 'object') {
	      return this._initArray(number, base, endian);
	    }

	    if (base === 'hex') {
	      base = 16;
	    }
	    assert(base === (base | 0) && base >= 2 && base <= 36);

	    number = number.toString().replace(/\s+/g, '');
	    var start = 0;
	    if (number[0] === '-') {
	      start++;
	      this.negative = 1;
	    }

	    if (start < number.length) {
	      if (base === 16) {
	        this._parseHex(number, start, endian);
	      } else {
	        this._parseBase(number, base, start);
	        if (endian === 'le') {
	          this._initArray(this.toArray(), base, endian);
	        }
	      }
	    }
	  };

	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
	    if (number < 0) {
	      this.negative = 1;
	      number = -number;
	    }
	    if (number < 0x4000000) {
	      this.words = [number & 0x3ffffff];
	      this.length = 1;
	    } else if (number < 0x10000000000000) {
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff
	      ];
	      this.length = 2;
	    } else {
	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff,
	        1
	      ];
	      this.length = 3;
	    }

	    if (endian !== 'le') return;

	    // Reverse the bytes
	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initArray = function _initArray (number, base, endian) {
	    // Perhaps a Uint8Array
	    assert(typeof number.length === 'number');
	    if (number.length <= 0) {
	      this.words = [0];
	      this.length = 1;
	      return this;
	    }

	    this.length = Math.ceil(number.length / 3);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    var off = 0;
	    if (endian === 'be') {
	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    } else if (endian === 'le') {
	      for (i = 0, j = 0; i < number.length; i += 3) {
	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    }
	    return this._strip();
	  };

	  function parseHex4Bits (string, index) {
	    var c = string.charCodeAt(index);
	    // '0' - '9'
	    if (c >= 48 && c <= 57) {
	      return c - 48;
	    // 'A' - 'F'
	    } else if (c >= 65 && c <= 70) {
	      return c - 55;
	    // 'a' - 'f'
	    } else if (c >= 97 && c <= 102) {
	      return c - 87;
	    } else {
	      assert(false, 'Invalid character in ' + string);
	    }
	  }

	  function parseHexByte (string, lowerBound, index) {
	    var r = parseHex4Bits(string, index);
	    if (index - 1 >= lowerBound) {
	      r |= parseHex4Bits(string, index - 1) << 4;
	    }
	    return r;
	  }

	  BN.prototype._parseHex = function _parseHex (number, start, endian) {
	    // Create possibly bigger array to ensure that it fits the number
	    this.length = Math.ceil((number.length - start) / 6);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    // 24-bits chunks
	    var off = 0;
	    var j = 0;

	    var w;
	    if (endian === 'be') {
	      for (i = number.length - 1; i >= start; i -= 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    } else {
	      var parseLength = number.length - start;
	      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    }

	    this._strip();
	  };

	  function parseBase (str, start, end, mul) {
	    var r = 0;
	    var b = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r *= mul;

	      // 'a'
	      if (c >= 49) {
	        b = c - 49 + 0xa;

	      // 'A'
	      } else if (c >= 17) {
	        b = c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        b = c;
	      }
	      assert(c >= 0 && b < mul, 'Invalid character');
	      r += b;
	    }
	    return r;
	  }

	  BN.prototype._parseBase = function _parseBase (number, base, start) {
	    // Initialize as zero
	    this.words = [0];
	    this.length = 1;

	    // Find length of limb in base
	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
	      limbLen++;
	    }
	    limbLen--;
	    limbPow = (limbPow / base) | 0;

	    var total = number.length - start;
	    var mod = total % limbLen;
	    var end = Math.min(total, total - mod) + start;

	    var word = 0;
	    for (var i = start; i < end; i += limbLen) {
	      word = parseBase(number, i, i + limbLen, base);

	      this.imuln(limbPow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    if (mod !== 0) {
	      var pow = 1;
	      word = parseBase(number, i, number.length, base);

	      for (i = 0; i < mod; i++) {
	        pow *= base;
	      }

	      this.imuln(pow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    this._strip();
	  };

	  BN.prototype.copy = function copy (dest) {
	    dest.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      dest.words[i] = this.words[i];
	    }
	    dest.length = this.length;
	    dest.negative = this.negative;
	    dest.red = this.red;
	  };

	  function move (dest, src) {
	    dest.words = src.words;
	    dest.length = src.length;
	    dest.negative = src.negative;
	    dest.red = src.red;
	  }

	  BN.prototype._move = function _move (dest) {
	    move(dest, this);
	  };

	  BN.prototype.clone = function clone () {
	    var r = new BN(null);
	    this.copy(r);
	    return r;
	  };

	  BN.prototype._expand = function _expand (size) {
	    while (this.length < size) {
	      this.words[this.length++] = 0;
	    }
	    return this;
	  };

	  // Remove leading `0` from `this`
	  BN.prototype._strip = function strip () {
	    while (this.length > 1 && this.words[this.length - 1] === 0) {
	      this.length--;
	    }
	    return this._normSign();
	  };

	  BN.prototype._normSign = function _normSign () {
	    // -0 = 0
	    if (this.length === 1 && this.words[0] === 0) {
	      this.negative = 0;
	    }
	    return this;
	  };

	  // Check Symbol.for because not everywhere where Symbol defined
	  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
	  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
	    try {
	      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
	    } catch (e) {
	      BN.prototype.inspect = inspect;
	    }
	  } else {
	    BN.prototype.inspect = inspect;
	  }

	  function inspect () {
	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  }

	  /*

	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];

	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
	    zeros[i] = s;
	    s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
	    var groupSize = 0;
	    var groupBase = 1;
	    while (groupBase < (1 << BN.wordSize) / base) {
	      groupBase *= base;
	      groupSize += 1;
	    }
	    groupSizes[base] = groupSize;
	    groupBases[base] = groupBase;
	  }

	  */

	  var zeros = [
	    '',
	    '0',
	    '00',
	    '000',
	    '0000',
	    '00000',
	    '000000',
	    '0000000',
	    '00000000',
	    '000000000',
	    '0000000000',
	    '00000000000',
	    '000000000000',
	    '0000000000000',
	    '00000000000000',
	    '000000000000000',
	    '0000000000000000',
	    '00000000000000000',
	    '000000000000000000',
	    '0000000000000000000',
	    '00000000000000000000',
	    '000000000000000000000',
	    '0000000000000000000000',
	    '00000000000000000000000',
	    '000000000000000000000000',
	    '0000000000000000000000000'
	  ];

	  var groupSizes = [
	    0, 0,
	    25, 16, 12, 11, 10, 9, 8,
	    8, 7, 7, 7, 7, 6, 6,
	    6, 6, 6, 6, 6, 5, 5,
	    5, 5, 5, 5, 5, 5, 5,
	    5, 5, 5, 5, 5, 5, 5
	  ];

	  var groupBases = [
	    0, 0,
	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	  ];

	  BN.prototype.toString = function toString (base, padding) {
	    base = base || 10;
	    padding = padding | 0 || 1;

	    var out;
	    if (base === 16 || base === 'hex') {
	      out = '';
	      var off = 0;
	      var carry = 0;
	      for (var i = 0; i < this.length; i++) {
	        var w = this.words[i];
	        var word = (((w << off) | carry) & 0xffffff).toString(16);
	        carry = (w >>> (24 - off)) & 0xffffff;
	        off += 2;
	        if (off >= 26) {
	          off -= 26;
	          i--;
	        }
	        if (carry !== 0 || i !== this.length - 1) {
	          out = zeros[6 - word.length] + word + out;
	        } else {
	          out = word + out;
	        }
	      }
	      if (carry !== 0) {
	        out = carry.toString(16) + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    if (base === (base | 0) && base >= 2 && base <= 36) {
	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	      var groupSize = groupSizes[base];
	      // var groupBase = Math.pow(base, groupSize);
	      var groupBase = groupBases[base];
	      out = '';
	      var c = this.clone();
	      c.negative = 0;
	      while (!c.isZero()) {
	        var r = c.modrn(groupBase).toString(base);
	        c = c.idivn(groupBase);

	        if (!c.isZero()) {
	          out = zeros[groupSize - r.length] + r + out;
	        } else {
	          out = r + out;
	        }
	      }
	      if (this.isZero()) {
	        out = '0' + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    assert(false, 'Base should be between 2 and 36');
	  };

	  BN.prototype.toNumber = function toNumber () {
	    var ret = this.words[0];
	    if (this.length === 2) {
	      ret += this.words[1] * 0x4000000;
	    } else if (this.length === 3 && this.words[2] === 0x01) {
	      // NOTE: at this stage it is known that the top bit is set
	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
	    } else if (this.length > 2) {
	      assert(false, 'Number can only safely store up to 53 bits');
	    }
	    return (this.negative !== 0) ? -ret : ret;
	  };

	  BN.prototype.toJSON = function toJSON () {
	    return this.toString(16, 2);
	  };

	  if (Buffer) {
	    BN.prototype.toBuffer = function toBuffer (endian, length) {
	      return this.toArrayLike(Buffer, endian, length);
	    };
	  }

	  BN.prototype.toArray = function toArray (endian, length) {
	    return this.toArrayLike(Array, endian, length);
	  };

	  var allocate = function allocate (ArrayType, size) {
	    if (ArrayType.allocUnsafe) {
	      return ArrayType.allocUnsafe(size);
	    }
	    return new ArrayType(size);
	  };

	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
	    this._strip();

	    var byteLength = this.byteLength();
	    var reqLength = length || Math.max(1, byteLength);
	    assert(byteLength <= reqLength, 'byte array longer than desired length');
	    assert(reqLength > 0, 'Requested array length <= 0');

	    var res = allocate(ArrayType, reqLength);
	    var postfix = endian === 'le' ? 'LE' : 'BE';
	    this['_toArrayLike' + postfix](res, byteLength);
	    return res;
	  };

	  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
	    var position = 0;
	    var carry = 0;

	    for (var i = 0, shift = 0; i < this.length; i++) {
	      var word = (this.words[i] << shift) | carry;

	      res[position++] = word & 0xff;
	      if (position < res.length) {
	        res[position++] = (word >> 8) & 0xff;
	      }
	      if (position < res.length) {
	        res[position++] = (word >> 16) & 0xff;
	      }

	      if (shift === 6) {
	        if (position < res.length) {
	          res[position++] = (word >> 24) & 0xff;
	        }
	        carry = 0;
	        shift = 0;
	      } else {
	        carry = word >>> 24;
	        shift += 2;
	      }
	    }

	    if (position < res.length) {
	      res[position++] = carry;

	      while (position < res.length) {
	        res[position++] = 0;
	      }
	    }
	  };

	  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
	    var position = res.length - 1;
	    var carry = 0;

	    for (var i = 0, shift = 0; i < this.length; i++) {
	      var word = (this.words[i] << shift) | carry;

	      res[position--] = word & 0xff;
	      if (position >= 0) {
	        res[position--] = (word >> 8) & 0xff;
	      }
	      if (position >= 0) {
	        res[position--] = (word >> 16) & 0xff;
	      }

	      if (shift === 6) {
	        if (position >= 0) {
	          res[position--] = (word >> 24) & 0xff;
	        }
	        carry = 0;
	        shift = 0;
	      } else {
	        carry = word >>> 24;
	        shift += 2;
	      }
	    }

	    if (position >= 0) {
	      res[position--] = carry;

	      while (position >= 0) {
	        res[position--] = 0;
	      }
	    }
	  };

	  if (Math.clz32) {
	    BN.prototype._countBits = function _countBits (w) {
	      return 32 - Math.clz32(w);
	    };
	  } else {
	    BN.prototype._countBits = function _countBits (w) {
	      var t = w;
	      var r = 0;
	      if (t >= 0x1000) {
	        r += 13;
	        t >>>= 13;
	      }
	      if (t >= 0x40) {
	        r += 7;
	        t >>>= 7;
	      }
	      if (t >= 0x8) {
	        r += 4;
	        t >>>= 4;
	      }
	      if (t >= 0x02) {
	        r += 2;
	        t >>>= 2;
	      }
	      return r + t;
	    };
	  }

	  BN.prototype._zeroBits = function _zeroBits (w) {
	    // Short-cut
	    if (w === 0) return 26;

	    var t = w;
	    var r = 0;
	    if ((t & 0x1fff) === 0) {
	      r += 13;
	      t >>>= 13;
	    }
	    if ((t & 0x7f) === 0) {
	      r += 7;
	      t >>>= 7;
	    }
	    if ((t & 0xf) === 0) {
	      r += 4;
	      t >>>= 4;
	    }
	    if ((t & 0x3) === 0) {
	      r += 2;
	      t >>>= 2;
	    }
	    if ((t & 0x1) === 0) {
	      r++;
	    }
	    return r;
	  };

	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength () {
	    var w = this.words[this.length - 1];
	    var hi = this._countBits(w);
	    return (this.length - 1) * 26 + hi;
	  };

	  function toBitArray (num) {
	    var w = new Array(num.bitLength());

	    for (var bit = 0; bit < w.length; bit++) {
	      var off = (bit / 26) | 0;
	      var wbit = bit % 26;

	      w[bit] = (num.words[off] >>> wbit) & 0x01;
	    }

	    return w;
	  }

	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits () {
	    if (this.isZero()) return 0;

	    var r = 0;
	    for (var i = 0; i < this.length; i++) {
	      var b = this._zeroBits(this.words[i]);
	      r += b;
	      if (b !== 26) break;
	    }
	    return r;
	  };

	  BN.prototype.byteLength = function byteLength () {
	    return Math.ceil(this.bitLength() / 8);
	  };

	  BN.prototype.toTwos = function toTwos (width) {
	    if (this.negative !== 0) {
	      return this.abs().inotn(width).iaddn(1);
	    }
	    return this.clone();
	  };

	  BN.prototype.fromTwos = function fromTwos (width) {
	    if (this.testn(width - 1)) {
	      return this.notn(width).iaddn(1).ineg();
	    }
	    return this.clone();
	  };

	  BN.prototype.isNeg = function isNeg () {
	    return this.negative !== 0;
	  };

	  // Return negative clone of `this`
	  BN.prototype.neg = function neg () {
	    return this.clone().ineg();
	  };

	  BN.prototype.ineg = function ineg () {
	    if (!this.isZero()) {
	      this.negative ^= 1;
	    }

	    return this;
	  };

	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor (num) {
	    while (this.length < num.length) {
	      this.words[this.length++] = 0;
	    }

	    for (var i = 0; i < num.length; i++) {
	      this.words[i] = this.words[i] | num.words[i];
	    }

	    return this._strip();
	  };

	  BN.prototype.ior = function ior (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuor(num);
	  };

	  // Or `num` with `this`
	  BN.prototype.or = function or (num) {
	    if (this.length > num.length) return this.clone().ior(num);
	    return num.clone().ior(this);
	  };

	  BN.prototype.uor = function uor (num) {
	    if (this.length > num.length) return this.clone().iuor(num);
	    return num.clone().iuor(this);
	  };

	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand (num) {
	    // b = min-length(num, this)
	    var b;
	    if (this.length > num.length) {
	      b = num;
	    } else {
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = this.words[i] & num.words[i];
	    }

	    this.length = b.length;

	    return this._strip();
	  };

	  BN.prototype.iand = function iand (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuand(num);
	  };

	  // And `num` with `this`
	  BN.prototype.and = function and (num) {
	    if (this.length > num.length) return this.clone().iand(num);
	    return num.clone().iand(this);
	  };

	  BN.prototype.uand = function uand (num) {
	    if (this.length > num.length) return this.clone().iuand(num);
	    return num.clone().iuand(this);
	  };

	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor (num) {
	    // a.length > b.length
	    var a;
	    var b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = a.words[i] ^ b.words[i];
	    }

	    if (this !== a) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = a.length;

	    return this._strip();
	  };

	  BN.prototype.ixor = function ixor (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuxor(num);
	  };

	  // Xor `num` with `this`
	  BN.prototype.xor = function xor (num) {
	    if (this.length > num.length) return this.clone().ixor(num);
	    return num.clone().ixor(this);
	  };

	  BN.prototype.uxor = function uxor (num) {
	    if (this.length > num.length) return this.clone().iuxor(num);
	    return num.clone().iuxor(this);
	  };

	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn (width) {
	    assert(typeof width === 'number' && width >= 0);

	    var bytesNeeded = Math.ceil(width / 26) | 0;
	    var bitsLeft = width % 26;

	    // Extend the buffer with leading zeroes
	    this._expand(bytesNeeded);

	    if (bitsLeft > 0) {
	      bytesNeeded--;
	    }

	    // Handle complete words
	    for (var i = 0; i < bytesNeeded; i++) {
	      this.words[i] = ~this.words[i] & 0x3ffffff;
	    }

	    // Handle the residue
	    if (bitsLeft > 0) {
	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
	    }

	    // And remove leading zeroes
	    return this._strip();
	  };

	  BN.prototype.notn = function notn (width) {
	    return this.clone().inotn(width);
	  };

	  // Set `bit` of `this`
	  BN.prototype.setn = function setn (bit, val) {
	    assert(typeof bit === 'number' && bit >= 0);

	    var off = (bit / 26) | 0;
	    var wbit = bit % 26;

	    this._expand(off + 1);

	    if (val) {
	      this.words[off] = this.words[off] | (1 << wbit);
	    } else {
	      this.words[off] = this.words[off] & ~(1 << wbit);
	    }

	    return this._strip();
	  };

	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd (num) {
	    var r;

	    // negative + positive
	    if (this.negative !== 0 && num.negative === 0) {
	      this.negative = 0;
	      r = this.isub(num);
	      this.negative ^= 1;
	      return this._normSign();

	    // positive + negative
	    } else if (this.negative === 0 && num.negative !== 0) {
	      num.negative = 0;
	      r = this.isub(num);
	      num.negative = 1;
	      return r._normSign();
	    }

	    // a.length > b.length
	    var a, b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }

	    this.length = a.length;
	    if (carry !== 0) {
	      this.words[this.length] = carry;
	      this.length++;
	    // Copy the rest of the words
	    } else if (a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    return this;
	  };

	  // Add `num` to `this`
	  BN.prototype.add = function add (num) {
	    var res;
	    if (num.negative !== 0 && this.negative === 0) {
	      num.negative = 0;
	      res = this.sub(num);
	      num.negative ^= 1;
	      return res;
	    } else if (num.negative === 0 && this.negative !== 0) {
	      this.negative = 0;
	      res = num.sub(this);
	      this.negative = 1;
	      return res;
	    }

	    if (this.length > num.length) return this.clone().iadd(num);

	    return num.clone().iadd(this);
	  };

	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub (num) {
	    // this - (-num) = this + num
	    if (num.negative !== 0) {
	      num.negative = 0;
	      var r = this.iadd(num);
	      num.negative = 1;
	      return r._normSign();

	    // -this - num = -(this + num)
	    } else if (this.negative !== 0) {
	      this.negative = 0;
	      this.iadd(num);
	      this.negative = 1;
	      return this._normSign();
	    }

	    // At this point both numbers are positive
	    var cmp = this.cmp(num);

	    // Optimization - zeroify
	    if (cmp === 0) {
	      this.negative = 0;
	      this.length = 1;
	      this.words[0] = 0;
	      return this;
	    }

	    // a > b
	    var a, b;
	    if (cmp > 0) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }

	    // Copy rest of the words
	    if (carry === 0 && i < a.length && a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = Math.max(this.length, i);

	    if (a !== this) {
	      this.negative = 1;
	    }

	    return this._strip();
	  };

	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub (num) {
	    return this.clone().isub(num);
	  };

	  function smallMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    var len = (self.length + num.length) | 0;
	    out.length = len;
	    len = (len - 1) | 0;

	    // Peel one iteration (compiler can't do it, because of code complexity)
	    var a = self.words[0] | 0;
	    var b = num.words[0] | 0;
	    var r = a * b;

	    var lo = r & 0x3ffffff;
	    var carry = (r / 0x4000000) | 0;
	    out.words[0] = lo;

	    for (var k = 1; k < len; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = carry >>> 26;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = (k - j) | 0;
	        a = self.words[i] | 0;
	        b = num.words[j] | 0;
	        r = a * b + rword;
	        ncarry += (r / 0x4000000) | 0;
	        rword = r & 0x3ffffff;
	      }
	      out.words[k] = rword | 0;
	      carry = ncarry | 0;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry | 0;
	    } else {
	      out.length--;
	    }

	    return out._strip();
	  }

	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo (self, num, out) {
	    var a = self.words;
	    var b = num.words;
	    var o = out.words;
	    var c = 0;
	    var lo;
	    var mid;
	    var hi;
	    var a0 = a[0] | 0;
	    var al0 = a0 & 0x1fff;
	    var ah0 = a0 >>> 13;
	    var a1 = a[1] | 0;
	    var al1 = a1 & 0x1fff;
	    var ah1 = a1 >>> 13;
	    var a2 = a[2] | 0;
	    var al2 = a2 & 0x1fff;
	    var ah2 = a2 >>> 13;
	    var a3 = a[3] | 0;
	    var al3 = a3 & 0x1fff;
	    var ah3 = a3 >>> 13;
	    var a4 = a[4] | 0;
	    var al4 = a4 & 0x1fff;
	    var ah4 = a4 >>> 13;
	    var a5 = a[5] | 0;
	    var al5 = a5 & 0x1fff;
	    var ah5 = a5 >>> 13;
	    var a6 = a[6] | 0;
	    var al6 = a6 & 0x1fff;
	    var ah6 = a6 >>> 13;
	    var a7 = a[7] | 0;
	    var al7 = a7 & 0x1fff;
	    var ah7 = a7 >>> 13;
	    var a8 = a[8] | 0;
	    var al8 = a8 & 0x1fff;
	    var ah8 = a8 >>> 13;
	    var a9 = a[9] | 0;
	    var al9 = a9 & 0x1fff;
	    var ah9 = a9 >>> 13;
	    var b0 = b[0] | 0;
	    var bl0 = b0 & 0x1fff;
	    var bh0 = b0 >>> 13;
	    var b1 = b[1] | 0;
	    var bl1 = b1 & 0x1fff;
	    var bh1 = b1 >>> 13;
	    var b2 = b[2] | 0;
	    var bl2 = b2 & 0x1fff;
	    var bh2 = b2 >>> 13;
	    var b3 = b[3] | 0;
	    var bl3 = b3 & 0x1fff;
	    var bh3 = b3 >>> 13;
	    var b4 = b[4] | 0;
	    var bl4 = b4 & 0x1fff;
	    var bh4 = b4 >>> 13;
	    var b5 = b[5] | 0;
	    var bl5 = b5 & 0x1fff;
	    var bh5 = b5 >>> 13;
	    var b6 = b[6] | 0;
	    var bl6 = b6 & 0x1fff;
	    var bh6 = b6 >>> 13;
	    var b7 = b[7] | 0;
	    var bl7 = b7 & 0x1fff;
	    var bh7 = b7 >>> 13;
	    var b8 = b[8] | 0;
	    var bl8 = b8 & 0x1fff;
	    var bh8 = b8 >>> 13;
	    var b9 = b[9] | 0;
	    var bl9 = b9 & 0x1fff;
	    var bh9 = b9 >>> 13;

	    out.negative = self.negative ^ num.negative;
	    out.length = 19;
	    /* k = 0 */
	    lo = Math.imul(al0, bl0);
	    mid = Math.imul(al0, bh0);
	    mid = (mid + Math.imul(ah0, bl0)) | 0;
	    hi = Math.imul(ah0, bh0);
	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
	    w0 &= 0x3ffffff;
	    /* k = 1 */
	    lo = Math.imul(al1, bl0);
	    mid = Math.imul(al1, bh0);
	    mid = (mid + Math.imul(ah1, bl0)) | 0;
	    hi = Math.imul(ah1, bh0);
	    lo = (lo + Math.imul(al0, bl1)) | 0;
	    mid = (mid + Math.imul(al0, bh1)) | 0;
	    mid = (mid + Math.imul(ah0, bl1)) | 0;
	    hi = (hi + Math.imul(ah0, bh1)) | 0;
	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
	    w1 &= 0x3ffffff;
	    /* k = 2 */
	    lo = Math.imul(al2, bl0);
	    mid = Math.imul(al2, bh0);
	    mid = (mid + Math.imul(ah2, bl0)) | 0;
	    hi = Math.imul(ah2, bh0);
	    lo = (lo + Math.imul(al1, bl1)) | 0;
	    mid = (mid + Math.imul(al1, bh1)) | 0;
	    mid = (mid + Math.imul(ah1, bl1)) | 0;
	    hi = (hi + Math.imul(ah1, bh1)) | 0;
	    lo = (lo + Math.imul(al0, bl2)) | 0;
	    mid = (mid + Math.imul(al0, bh2)) | 0;
	    mid = (mid + Math.imul(ah0, bl2)) | 0;
	    hi = (hi + Math.imul(ah0, bh2)) | 0;
	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
	    w2 &= 0x3ffffff;
	    /* k = 3 */
	    lo = Math.imul(al3, bl0);
	    mid = Math.imul(al3, bh0);
	    mid = (mid + Math.imul(ah3, bl0)) | 0;
	    hi = Math.imul(ah3, bh0);
	    lo = (lo + Math.imul(al2, bl1)) | 0;
	    mid = (mid + Math.imul(al2, bh1)) | 0;
	    mid = (mid + Math.imul(ah2, bl1)) | 0;
	    hi = (hi + Math.imul(ah2, bh1)) | 0;
	    lo = (lo + Math.imul(al1, bl2)) | 0;
	    mid = (mid + Math.imul(al1, bh2)) | 0;
	    mid = (mid + Math.imul(ah1, bl2)) | 0;
	    hi = (hi + Math.imul(ah1, bh2)) | 0;
	    lo = (lo + Math.imul(al0, bl3)) | 0;
	    mid = (mid + Math.imul(al0, bh3)) | 0;
	    mid = (mid + Math.imul(ah0, bl3)) | 0;
	    hi = (hi + Math.imul(ah0, bh3)) | 0;
	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
	    w3 &= 0x3ffffff;
	    /* k = 4 */
	    lo = Math.imul(al4, bl0);
	    mid = Math.imul(al4, bh0);
	    mid = (mid + Math.imul(ah4, bl0)) | 0;
	    hi = Math.imul(ah4, bh0);
	    lo = (lo + Math.imul(al3, bl1)) | 0;
	    mid = (mid + Math.imul(al3, bh1)) | 0;
	    mid = (mid + Math.imul(ah3, bl1)) | 0;
	    hi = (hi + Math.imul(ah3, bh1)) | 0;
	    lo = (lo + Math.imul(al2, bl2)) | 0;
	    mid = (mid + Math.imul(al2, bh2)) | 0;
	    mid = (mid + Math.imul(ah2, bl2)) | 0;
	    hi = (hi + Math.imul(ah2, bh2)) | 0;
	    lo = (lo + Math.imul(al1, bl3)) | 0;
	    mid = (mid + Math.imul(al1, bh3)) | 0;
	    mid = (mid + Math.imul(ah1, bl3)) | 0;
	    hi = (hi + Math.imul(ah1, bh3)) | 0;
	    lo = (lo + Math.imul(al0, bl4)) | 0;
	    mid = (mid + Math.imul(al0, bh4)) | 0;
	    mid = (mid + Math.imul(ah0, bl4)) | 0;
	    hi = (hi + Math.imul(ah0, bh4)) | 0;
	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
	    w4 &= 0x3ffffff;
	    /* k = 5 */
	    lo = Math.imul(al5, bl0);
	    mid = Math.imul(al5, bh0);
	    mid = (mid + Math.imul(ah5, bl0)) | 0;
	    hi = Math.imul(ah5, bh0);
	    lo = (lo + Math.imul(al4, bl1)) | 0;
	    mid = (mid + Math.imul(al4, bh1)) | 0;
	    mid = (mid + Math.imul(ah4, bl1)) | 0;
	    hi = (hi + Math.imul(ah4, bh1)) | 0;
	    lo = (lo + Math.imul(al3, bl2)) | 0;
	    mid = (mid + Math.imul(al3, bh2)) | 0;
	    mid = (mid + Math.imul(ah3, bl2)) | 0;
	    hi = (hi + Math.imul(ah3, bh2)) | 0;
	    lo = (lo + Math.imul(al2, bl3)) | 0;
	    mid = (mid + Math.imul(al2, bh3)) | 0;
	    mid = (mid + Math.imul(ah2, bl3)) | 0;
	    hi = (hi + Math.imul(ah2, bh3)) | 0;
	    lo = (lo + Math.imul(al1, bl4)) | 0;
	    mid = (mid + Math.imul(al1, bh4)) | 0;
	    mid = (mid + Math.imul(ah1, bl4)) | 0;
	    hi = (hi + Math.imul(ah1, bh4)) | 0;
	    lo = (lo + Math.imul(al0, bl5)) | 0;
	    mid = (mid + Math.imul(al0, bh5)) | 0;
	    mid = (mid + Math.imul(ah0, bl5)) | 0;
	    hi = (hi + Math.imul(ah0, bh5)) | 0;
	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
	    w5 &= 0x3ffffff;
	    /* k = 6 */
	    lo = Math.imul(al6, bl0);
	    mid = Math.imul(al6, bh0);
	    mid = (mid + Math.imul(ah6, bl0)) | 0;
	    hi = Math.imul(ah6, bh0);
	    lo = (lo + Math.imul(al5, bl1)) | 0;
	    mid = (mid + Math.imul(al5, bh1)) | 0;
	    mid = (mid + Math.imul(ah5, bl1)) | 0;
	    hi = (hi + Math.imul(ah5, bh1)) | 0;
	    lo = (lo + Math.imul(al4, bl2)) | 0;
	    mid = (mid + Math.imul(al4, bh2)) | 0;
	    mid = (mid + Math.imul(ah4, bl2)) | 0;
	    hi = (hi + Math.imul(ah4, bh2)) | 0;
	    lo = (lo + Math.imul(al3, bl3)) | 0;
	    mid = (mid + Math.imul(al3, bh3)) | 0;
	    mid = (mid + Math.imul(ah3, bl3)) | 0;
	    hi = (hi + Math.imul(ah3, bh3)) | 0;
	    lo = (lo + Math.imul(al2, bl4)) | 0;
	    mid = (mid + Math.imul(al2, bh4)) | 0;
	    mid = (mid + Math.imul(ah2, bl4)) | 0;
	    hi = (hi + Math.imul(ah2, bh4)) | 0;
	    lo = (lo + Math.imul(al1, bl5)) | 0;
	    mid = (mid + Math.imul(al1, bh5)) | 0;
	    mid = (mid + Math.imul(ah1, bl5)) | 0;
	    hi = (hi + Math.imul(ah1, bh5)) | 0;
	    lo = (lo + Math.imul(al0, bl6)) | 0;
	    mid = (mid + Math.imul(al0, bh6)) | 0;
	    mid = (mid + Math.imul(ah0, bl6)) | 0;
	    hi = (hi + Math.imul(ah0, bh6)) | 0;
	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
	    w6 &= 0x3ffffff;
	    /* k = 7 */
	    lo = Math.imul(al7, bl0);
	    mid = Math.imul(al7, bh0);
	    mid = (mid + Math.imul(ah7, bl0)) | 0;
	    hi = Math.imul(ah7, bh0);
	    lo = (lo + Math.imul(al6, bl1)) | 0;
	    mid = (mid + Math.imul(al6, bh1)) | 0;
	    mid = (mid + Math.imul(ah6, bl1)) | 0;
	    hi = (hi + Math.imul(ah6, bh1)) | 0;
	    lo = (lo + Math.imul(al5, bl2)) | 0;
	    mid = (mid + Math.imul(al5, bh2)) | 0;
	    mid = (mid + Math.imul(ah5, bl2)) | 0;
	    hi = (hi + Math.imul(ah5, bh2)) | 0;
	    lo = (lo + Math.imul(al4, bl3)) | 0;
	    mid = (mid + Math.imul(al4, bh3)) | 0;
	    mid = (mid + Math.imul(ah4, bl3)) | 0;
	    hi = (hi + Math.imul(ah4, bh3)) | 0;
	    lo = (lo + Math.imul(al3, bl4)) | 0;
	    mid = (mid + Math.imul(al3, bh4)) | 0;
	    mid = (mid + Math.imul(ah3, bl4)) | 0;
	    hi = (hi + Math.imul(ah3, bh4)) | 0;
	    lo = (lo + Math.imul(al2, bl5)) | 0;
	    mid = (mid + Math.imul(al2, bh5)) | 0;
	    mid = (mid + Math.imul(ah2, bl5)) | 0;
	    hi = (hi + Math.imul(ah2, bh5)) | 0;
	    lo = (lo + Math.imul(al1, bl6)) | 0;
	    mid = (mid + Math.imul(al1, bh6)) | 0;
	    mid = (mid + Math.imul(ah1, bl6)) | 0;
	    hi = (hi + Math.imul(ah1, bh6)) | 0;
	    lo = (lo + Math.imul(al0, bl7)) | 0;
	    mid = (mid + Math.imul(al0, bh7)) | 0;
	    mid = (mid + Math.imul(ah0, bl7)) | 0;
	    hi = (hi + Math.imul(ah0, bh7)) | 0;
	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
	    w7 &= 0x3ffffff;
	    /* k = 8 */
	    lo = Math.imul(al8, bl0);
	    mid = Math.imul(al8, bh0);
	    mid = (mid + Math.imul(ah8, bl0)) | 0;
	    hi = Math.imul(ah8, bh0);
	    lo = (lo + Math.imul(al7, bl1)) | 0;
	    mid = (mid + Math.imul(al7, bh1)) | 0;
	    mid = (mid + Math.imul(ah7, bl1)) | 0;
	    hi = (hi + Math.imul(ah7, bh1)) | 0;
	    lo = (lo + Math.imul(al6, bl2)) | 0;
	    mid = (mid + Math.imul(al6, bh2)) | 0;
	    mid = (mid + Math.imul(ah6, bl2)) | 0;
	    hi = (hi + Math.imul(ah6, bh2)) | 0;
	    lo = (lo + Math.imul(al5, bl3)) | 0;
	    mid = (mid + Math.imul(al5, bh3)) | 0;
	    mid = (mid + Math.imul(ah5, bl3)) | 0;
	    hi = (hi + Math.imul(ah5, bh3)) | 0;
	    lo = (lo + Math.imul(al4, bl4)) | 0;
	    mid = (mid + Math.imul(al4, bh4)) | 0;
	    mid = (mid + Math.imul(ah4, bl4)) | 0;
	    hi = (hi + Math.imul(ah4, bh4)) | 0;
	    lo = (lo + Math.imul(al3, bl5)) | 0;
	    mid = (mid + Math.imul(al3, bh5)) | 0;
	    mid = (mid + Math.imul(ah3, bl5)) | 0;
	    hi = (hi + Math.imul(ah3, bh5)) | 0;
	    lo = (lo + Math.imul(al2, bl6)) | 0;
	    mid = (mid + Math.imul(al2, bh6)) | 0;
	    mid = (mid + Math.imul(ah2, bl6)) | 0;
	    hi = (hi + Math.imul(ah2, bh6)) | 0;
	    lo = (lo + Math.imul(al1, bl7)) | 0;
	    mid = (mid + Math.imul(al1, bh7)) | 0;
	    mid = (mid + Math.imul(ah1, bl7)) | 0;
	    hi = (hi + Math.imul(ah1, bh7)) | 0;
	    lo = (lo + Math.imul(al0, bl8)) | 0;
	    mid = (mid + Math.imul(al0, bh8)) | 0;
	    mid = (mid + Math.imul(ah0, bl8)) | 0;
	    hi = (hi + Math.imul(ah0, bh8)) | 0;
	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
	    w8 &= 0x3ffffff;
	    /* k = 9 */
	    lo = Math.imul(al9, bl0);
	    mid = Math.imul(al9, bh0);
	    mid = (mid + Math.imul(ah9, bl0)) | 0;
	    hi = Math.imul(ah9, bh0);
	    lo = (lo + Math.imul(al8, bl1)) | 0;
	    mid = (mid + Math.imul(al8, bh1)) | 0;
	    mid = (mid + Math.imul(ah8, bl1)) | 0;
	    hi = (hi + Math.imul(ah8, bh1)) | 0;
	    lo = (lo + Math.imul(al7, bl2)) | 0;
	    mid = (mid + Math.imul(al7, bh2)) | 0;
	    mid = (mid + Math.imul(ah7, bl2)) | 0;
	    hi = (hi + Math.imul(ah7, bh2)) | 0;
	    lo = (lo + Math.imul(al6, bl3)) | 0;
	    mid = (mid + Math.imul(al6, bh3)) | 0;
	    mid = (mid + Math.imul(ah6, bl3)) | 0;
	    hi = (hi + Math.imul(ah6, bh3)) | 0;
	    lo = (lo + Math.imul(al5, bl4)) | 0;
	    mid = (mid + Math.imul(al5, bh4)) | 0;
	    mid = (mid + Math.imul(ah5, bl4)) | 0;
	    hi = (hi + Math.imul(ah5, bh4)) | 0;
	    lo = (lo + Math.imul(al4, bl5)) | 0;
	    mid = (mid + Math.imul(al4, bh5)) | 0;
	    mid = (mid + Math.imul(ah4, bl5)) | 0;
	    hi = (hi + Math.imul(ah4, bh5)) | 0;
	    lo = (lo + Math.imul(al3, bl6)) | 0;
	    mid = (mid + Math.imul(al3, bh6)) | 0;
	    mid = (mid + Math.imul(ah3, bl6)) | 0;
	    hi = (hi + Math.imul(ah3, bh6)) | 0;
	    lo = (lo + Math.imul(al2, bl7)) | 0;
	    mid = (mid + Math.imul(al2, bh7)) | 0;
	    mid = (mid + Math.imul(ah2, bl7)) | 0;
	    hi = (hi + Math.imul(ah2, bh7)) | 0;
	    lo = (lo + Math.imul(al1, bl8)) | 0;
	    mid = (mid + Math.imul(al1, bh8)) | 0;
	    mid = (mid + Math.imul(ah1, bl8)) | 0;
	    hi = (hi + Math.imul(ah1, bh8)) | 0;
	    lo = (lo + Math.imul(al0, bl9)) | 0;
	    mid = (mid + Math.imul(al0, bh9)) | 0;
	    mid = (mid + Math.imul(ah0, bl9)) | 0;
	    hi = (hi + Math.imul(ah0, bh9)) | 0;
	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
	    w9 &= 0x3ffffff;
	    /* k = 10 */
	    lo = Math.imul(al9, bl1);
	    mid = Math.imul(al9, bh1);
	    mid = (mid + Math.imul(ah9, bl1)) | 0;
	    hi = Math.imul(ah9, bh1);
	    lo = (lo + Math.imul(al8, bl2)) | 0;
	    mid = (mid + Math.imul(al8, bh2)) | 0;
	    mid = (mid + Math.imul(ah8, bl2)) | 0;
	    hi = (hi + Math.imul(ah8, bh2)) | 0;
	    lo = (lo + Math.imul(al7, bl3)) | 0;
	    mid = (mid + Math.imul(al7, bh3)) | 0;
	    mid = (mid + Math.imul(ah7, bl3)) | 0;
	    hi = (hi + Math.imul(ah7, bh3)) | 0;
	    lo = (lo + Math.imul(al6, bl4)) | 0;
	    mid = (mid + Math.imul(al6, bh4)) | 0;
	    mid = (mid + Math.imul(ah6, bl4)) | 0;
	    hi = (hi + Math.imul(ah6, bh4)) | 0;
	    lo = (lo + Math.imul(al5, bl5)) | 0;
	    mid = (mid + Math.imul(al5, bh5)) | 0;
	    mid = (mid + Math.imul(ah5, bl5)) | 0;
	    hi = (hi + Math.imul(ah5, bh5)) | 0;
	    lo = (lo + Math.imul(al4, bl6)) | 0;
	    mid = (mid + Math.imul(al4, bh6)) | 0;
	    mid = (mid + Math.imul(ah4, bl6)) | 0;
	    hi = (hi + Math.imul(ah4, bh6)) | 0;
	    lo = (lo + Math.imul(al3, bl7)) | 0;
	    mid = (mid + Math.imul(al3, bh7)) | 0;
	    mid = (mid + Math.imul(ah3, bl7)) | 0;
	    hi = (hi + Math.imul(ah3, bh7)) | 0;
	    lo = (lo + Math.imul(al2, bl8)) | 0;
	    mid = (mid + Math.imul(al2, bh8)) | 0;
	    mid = (mid + Math.imul(ah2, bl8)) | 0;
	    hi = (hi + Math.imul(ah2, bh8)) | 0;
	    lo = (lo + Math.imul(al1, bl9)) | 0;
	    mid = (mid + Math.imul(al1, bh9)) | 0;
	    mid = (mid + Math.imul(ah1, bl9)) | 0;
	    hi = (hi + Math.imul(ah1, bh9)) | 0;
	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
	    w10 &= 0x3ffffff;
	    /* k = 11 */
	    lo = Math.imul(al9, bl2);
	    mid = Math.imul(al9, bh2);
	    mid = (mid + Math.imul(ah9, bl2)) | 0;
	    hi = Math.imul(ah9, bh2);
	    lo = (lo + Math.imul(al8, bl3)) | 0;
	    mid = (mid + Math.imul(al8, bh3)) | 0;
	    mid = (mid + Math.imul(ah8, bl3)) | 0;
	    hi = (hi + Math.imul(ah8, bh3)) | 0;
	    lo = (lo + Math.imul(al7, bl4)) | 0;
	    mid = (mid + Math.imul(al7, bh4)) | 0;
	    mid = (mid + Math.imul(ah7, bl4)) | 0;
	    hi = (hi + Math.imul(ah7, bh4)) | 0;
	    lo = (lo + Math.imul(al6, bl5)) | 0;
	    mid = (mid + Math.imul(al6, bh5)) | 0;
	    mid = (mid + Math.imul(ah6, bl5)) | 0;
	    hi = (hi + Math.imul(ah6, bh5)) | 0;
	    lo = (lo + Math.imul(al5, bl6)) | 0;
	    mid = (mid + Math.imul(al5, bh6)) | 0;
	    mid = (mid + Math.imul(ah5, bl6)) | 0;
	    hi = (hi + Math.imul(ah5, bh6)) | 0;
	    lo = (lo + Math.imul(al4, bl7)) | 0;
	    mid = (mid + Math.imul(al4, bh7)) | 0;
	    mid = (mid + Math.imul(ah4, bl7)) | 0;
	    hi = (hi + Math.imul(ah4, bh7)) | 0;
	    lo = (lo + Math.imul(al3, bl8)) | 0;
	    mid = (mid + Math.imul(al3, bh8)) | 0;
	    mid = (mid + Math.imul(ah3, bl8)) | 0;
	    hi = (hi + Math.imul(ah3, bh8)) | 0;
	    lo = (lo + Math.imul(al2, bl9)) | 0;
	    mid = (mid + Math.imul(al2, bh9)) | 0;
	    mid = (mid + Math.imul(ah2, bl9)) | 0;
	    hi = (hi + Math.imul(ah2, bh9)) | 0;
	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
	    w11 &= 0x3ffffff;
	    /* k = 12 */
	    lo = Math.imul(al9, bl3);
	    mid = Math.imul(al9, bh3);
	    mid = (mid + Math.imul(ah9, bl3)) | 0;
	    hi = Math.imul(ah9, bh3);
	    lo = (lo + Math.imul(al8, bl4)) | 0;
	    mid = (mid + Math.imul(al8, bh4)) | 0;
	    mid = (mid + Math.imul(ah8, bl4)) | 0;
	    hi = (hi + Math.imul(ah8, bh4)) | 0;
	    lo = (lo + Math.imul(al7, bl5)) | 0;
	    mid = (mid + Math.imul(al7, bh5)) | 0;
	    mid = (mid + Math.imul(ah7, bl5)) | 0;
	    hi = (hi + Math.imul(ah7, bh5)) | 0;
	    lo = (lo + Math.imul(al6, bl6)) | 0;
	    mid = (mid + Math.imul(al6, bh6)) | 0;
	    mid = (mid + Math.imul(ah6, bl6)) | 0;
	    hi = (hi + Math.imul(ah6, bh6)) | 0;
	    lo = (lo + Math.imul(al5, bl7)) | 0;
	    mid = (mid + Math.imul(al5, bh7)) | 0;
	    mid = (mid + Math.imul(ah5, bl7)) | 0;
	    hi = (hi + Math.imul(ah5, bh7)) | 0;
	    lo = (lo + Math.imul(al4, bl8)) | 0;
	    mid = (mid + Math.imul(al4, bh8)) | 0;
	    mid = (mid + Math.imul(ah4, bl8)) | 0;
	    hi = (hi + Math.imul(ah4, bh8)) | 0;
	    lo = (lo + Math.imul(al3, bl9)) | 0;
	    mid = (mid + Math.imul(al3, bh9)) | 0;
	    mid = (mid + Math.imul(ah3, bl9)) | 0;
	    hi = (hi + Math.imul(ah3, bh9)) | 0;
	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
	    w12 &= 0x3ffffff;
	    /* k = 13 */
	    lo = Math.imul(al9, bl4);
	    mid = Math.imul(al9, bh4);
	    mid = (mid + Math.imul(ah9, bl4)) | 0;
	    hi = Math.imul(ah9, bh4);
	    lo = (lo + Math.imul(al8, bl5)) | 0;
	    mid = (mid + Math.imul(al8, bh5)) | 0;
	    mid = (mid + Math.imul(ah8, bl5)) | 0;
	    hi = (hi + Math.imul(ah8, bh5)) | 0;
	    lo = (lo + Math.imul(al7, bl6)) | 0;
	    mid = (mid + Math.imul(al7, bh6)) | 0;
	    mid = (mid + Math.imul(ah7, bl6)) | 0;
	    hi = (hi + Math.imul(ah7, bh6)) | 0;
	    lo = (lo + Math.imul(al6, bl7)) | 0;
	    mid = (mid + Math.imul(al6, bh7)) | 0;
	    mid = (mid + Math.imul(ah6, bl7)) | 0;
	    hi = (hi + Math.imul(ah6, bh7)) | 0;
	    lo = (lo + Math.imul(al5, bl8)) | 0;
	    mid = (mid + Math.imul(al5, bh8)) | 0;
	    mid = (mid + Math.imul(ah5, bl8)) | 0;
	    hi = (hi + Math.imul(ah5, bh8)) | 0;
	    lo = (lo + Math.imul(al4, bl9)) | 0;
	    mid = (mid + Math.imul(al4, bh9)) | 0;
	    mid = (mid + Math.imul(ah4, bl9)) | 0;
	    hi = (hi + Math.imul(ah4, bh9)) | 0;
	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
	    w13 &= 0x3ffffff;
	    /* k = 14 */
	    lo = Math.imul(al9, bl5);
	    mid = Math.imul(al9, bh5);
	    mid = (mid + Math.imul(ah9, bl5)) | 0;
	    hi = Math.imul(ah9, bh5);
	    lo = (lo + Math.imul(al8, bl6)) | 0;
	    mid = (mid + Math.imul(al8, bh6)) | 0;
	    mid = (mid + Math.imul(ah8, bl6)) | 0;
	    hi = (hi + Math.imul(ah8, bh6)) | 0;
	    lo = (lo + Math.imul(al7, bl7)) | 0;
	    mid = (mid + Math.imul(al7, bh7)) | 0;
	    mid = (mid + Math.imul(ah7, bl7)) | 0;
	    hi = (hi + Math.imul(ah7, bh7)) | 0;
	    lo = (lo + Math.imul(al6, bl8)) | 0;
	    mid = (mid + Math.imul(al6, bh8)) | 0;
	    mid = (mid + Math.imul(ah6, bl8)) | 0;
	    hi = (hi + Math.imul(ah6, bh8)) | 0;
	    lo = (lo + Math.imul(al5, bl9)) | 0;
	    mid = (mid + Math.imul(al5, bh9)) | 0;
	    mid = (mid + Math.imul(ah5, bl9)) | 0;
	    hi = (hi + Math.imul(ah5, bh9)) | 0;
	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
	    w14 &= 0x3ffffff;
	    /* k = 15 */
	    lo = Math.imul(al9, bl6);
	    mid = Math.imul(al9, bh6);
	    mid = (mid + Math.imul(ah9, bl6)) | 0;
	    hi = Math.imul(ah9, bh6);
	    lo = (lo + Math.imul(al8, bl7)) | 0;
	    mid = (mid + Math.imul(al8, bh7)) | 0;
	    mid = (mid + Math.imul(ah8, bl7)) | 0;
	    hi = (hi + Math.imul(ah8, bh7)) | 0;
	    lo = (lo + Math.imul(al7, bl8)) | 0;
	    mid = (mid + Math.imul(al7, bh8)) | 0;
	    mid = (mid + Math.imul(ah7, bl8)) | 0;
	    hi = (hi + Math.imul(ah7, bh8)) | 0;
	    lo = (lo + Math.imul(al6, bl9)) | 0;
	    mid = (mid + Math.imul(al6, bh9)) | 0;
	    mid = (mid + Math.imul(ah6, bl9)) | 0;
	    hi = (hi + Math.imul(ah6, bh9)) | 0;
	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
	    w15 &= 0x3ffffff;
	    /* k = 16 */
	    lo = Math.imul(al9, bl7);
	    mid = Math.imul(al9, bh7);
	    mid = (mid + Math.imul(ah9, bl7)) | 0;
	    hi = Math.imul(ah9, bh7);
	    lo = (lo + Math.imul(al8, bl8)) | 0;
	    mid = (mid + Math.imul(al8, bh8)) | 0;
	    mid = (mid + Math.imul(ah8, bl8)) | 0;
	    hi = (hi + Math.imul(ah8, bh8)) | 0;
	    lo = (lo + Math.imul(al7, bl9)) | 0;
	    mid = (mid + Math.imul(al7, bh9)) | 0;
	    mid = (mid + Math.imul(ah7, bl9)) | 0;
	    hi = (hi + Math.imul(ah7, bh9)) | 0;
	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
	    w16 &= 0x3ffffff;
	    /* k = 17 */
	    lo = Math.imul(al9, bl8);
	    mid = Math.imul(al9, bh8);
	    mid = (mid + Math.imul(ah9, bl8)) | 0;
	    hi = Math.imul(ah9, bh8);
	    lo = (lo + Math.imul(al8, bl9)) | 0;
	    mid = (mid + Math.imul(al8, bh9)) | 0;
	    mid = (mid + Math.imul(ah8, bl9)) | 0;
	    hi = (hi + Math.imul(ah8, bh9)) | 0;
	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
	    w17 &= 0x3ffffff;
	    /* k = 18 */
	    lo = Math.imul(al9, bl9);
	    mid = Math.imul(al9, bh9);
	    mid = (mid + Math.imul(ah9, bl9)) | 0;
	    hi = Math.imul(ah9, bh9);
	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
	    w18 &= 0x3ffffff;
	    o[0] = w0;
	    o[1] = w1;
	    o[2] = w2;
	    o[3] = w3;
	    o[4] = w4;
	    o[5] = w5;
	    o[6] = w6;
	    o[7] = w7;
	    o[8] = w8;
	    o[9] = w9;
	    o[10] = w10;
	    o[11] = w11;
	    o[12] = w12;
	    o[13] = w13;
	    o[14] = w14;
	    o[15] = w15;
	    o[16] = w16;
	    o[17] = w17;
	    o[18] = w18;
	    if (c !== 0) {
	      o[19] = c;
	      out.length++;
	    }
	    return out;
	  };

	  // Polyfill comb
	  if (!Math.imul) {
	    comb10MulTo = smallMulTo;
	  }

	  function bigMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    out.length = self.length + num.length;

	    var carry = 0;
	    var hncarry = 0;
	    for (var k = 0; k < out.length - 1; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = hncarry;
	      hncarry = 0;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j;
	        var a = self.words[i] | 0;
	        var b = num.words[j] | 0;
	        var r = a * b;

	        var lo = r & 0x3ffffff;
	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	        lo = (lo + rword) | 0;
	        rword = lo & 0x3ffffff;
	        ncarry = (ncarry + (lo >>> 26)) | 0;

	        hncarry += ncarry >>> 26;
	        ncarry &= 0x3ffffff;
	      }
	      out.words[k] = rword;
	      carry = ncarry;
	      ncarry = hncarry;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry;
	    } else {
	      out.length--;
	    }

	    return out._strip();
	  }

	  function jumboMulTo (self, num, out) {
	    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
	    // var fftm = new FFTM();
	    // return fftm.mulp(self, num, out);
	    return bigMulTo(self, num, out);
	  }

	  BN.prototype.mulTo = function mulTo (num, out) {
	    var res;
	    var len = this.length + num.length;
	    if (this.length === 10 && num.length === 10) {
	      res = comb10MulTo(this, num, out);
	    } else if (len < 63) {
	      res = smallMulTo(this, num, out);
	    } else if (len < 1024) {
	      res = bigMulTo(this, num, out);
	    } else {
	      res = jumboMulTo(this, num, out);
	    }

	    return res;
	  };

	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return this.mulTo(num, out);
	  };

	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return jumboMulTo(this, num, out);
	  };

	  // In-place Multiplication
	  BN.prototype.imul = function imul (num) {
	    return this.clone().mulTo(num, this);
	  };

	  BN.prototype.imuln = function imuln (num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;

	    assert(typeof num === 'number');
	    assert(num < 0x4000000);

	    // Carry
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = (this.words[i] | 0) * num;
	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
	      carry >>= 26;
	      carry += (w / 0x4000000) | 0;
	      // NOTE: lo is 27bit maximum
	      carry += lo >>> 26;
	      this.words[i] = lo & 0x3ffffff;
	    }

	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }

	    return isNegNum ? this.ineg() : this;
	  };

	  BN.prototype.muln = function muln (num) {
	    return this.clone().imuln(num);
	  };

	  // `this` * `this`
	  BN.prototype.sqr = function sqr () {
	    return this.mul(this);
	  };

	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr () {
	    return this.imul(this.clone());
	  };

	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow (num) {
	    var w = toBitArray(num);
	    if (w.length === 0) return new BN(1);

	    // Skip leading zeroes
	    var res = this;
	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
	      if (w[i] !== 0) break;
	    }

	    if (++i < w.length) {
	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
	        if (w[i] === 0) continue;

	        res = res.mul(q);
	      }
	    }

	    return res;
	  };

	  // Shift-left in-place
	  BN.prototype.iushln = function iushln (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
	    var i;

	    if (r !== 0) {
	      var carry = 0;

	      for (i = 0; i < this.length; i++) {
	        var newCarry = this.words[i] & carryMask;
	        var c = ((this.words[i] | 0) - newCarry) << r;
	        this.words[i] = c | carry;
	        carry = newCarry >>> (26 - r);
	      }

	      if (carry) {
	        this.words[i] = carry;
	        this.length++;
	      }
	    }

	    if (s !== 0) {
	      for (i = this.length - 1; i >= 0; i--) {
	        this.words[i + s] = this.words[i];
	      }

	      for (i = 0; i < s; i++) {
	        this.words[i] = 0;
	      }

	      this.length += s;
	    }

	    return this._strip();
	  };

	  BN.prototype.ishln = function ishln (bits) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushln(bits);
	  };

	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var h;
	    if (hint) {
	      h = (hint - (hint % 26)) / 26;
	    } else {
	      h = 0;
	    }

	    var r = bits % 26;
	    var s = Math.min((bits - r) / 26, this.length);
	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	    var maskedWords = extended;

	    h -= s;
	    h = Math.max(0, h);

	    // Extended mode, copy masked part
	    if (maskedWords) {
	      for (var i = 0; i < s; i++) {
	        maskedWords.words[i] = this.words[i];
	      }
	      maskedWords.length = s;
	    }

	    if (s === 0) ; else if (this.length > s) {
	      this.length -= s;
	      for (i = 0; i < this.length; i++) {
	        this.words[i] = this.words[i + s];
	      }
	    } else {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    var carry = 0;
	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
	      var word = this.words[i] | 0;
	      this.words[i] = (carry << (26 - r)) | (word >>> r);
	      carry = word & mask;
	    }

	    // Push carried bits as a mask
	    if (maskedWords && carry !== 0) {
	      maskedWords.words[maskedWords.length++] = carry;
	    }

	    if (this.length === 0) {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    return this._strip();
	  };

	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushrn(bits, hint, extended);
	  };

	  // Shift-left
	  BN.prototype.shln = function shln (bits) {
	    return this.clone().ishln(bits);
	  };

	  BN.prototype.ushln = function ushln (bits) {
	    return this.clone().iushln(bits);
	  };

	  // Shift-right
	  BN.prototype.shrn = function shrn (bits) {
	    return this.clone().ishrn(bits);
	  };

	  BN.prototype.ushrn = function ushrn (bits) {
	    return this.clone().iushrn(bits);
	  };

	  // Test if n bit is set
	  BN.prototype.testn = function testn (bit) {
	    assert(typeof bit === 'number' && bit >= 0);
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) return false;

	    // Check bit and return
	    var w = this.words[s];

	    return !!(w & q);
	  };

	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;

	    assert(this.negative === 0, 'imaskn works only with positive numbers');

	    if (this.length <= s) {
	      return this;
	    }

	    if (r !== 0) {
	      s++;
	    }
	    this.length = Math.min(s, this.length);

	    if (r !== 0) {
	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	      this.words[this.length - 1] &= mask;
	    }

	    return this._strip();
	  };

	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn (bits) {
	    return this.clone().imaskn(bits);
	  };

	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.isubn(-num);

	    // Possible sign change
	    if (this.negative !== 0) {
	      if (this.length === 1 && (this.words[0] | 0) <= num) {
	        this.words[0] = num - (this.words[0] | 0);
	        this.negative = 0;
	        return this;
	      }

	      this.negative = 0;
	      this.isubn(num);
	      this.negative = 1;
	      return this;
	    }

	    // Add without checks
	    return this._iaddn(num);
	  };

	  BN.prototype._iaddn = function _iaddn (num) {
	    this.words[0] += num;

	    // Carry
	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	      this.words[i] -= 0x4000000;
	      if (i === this.length - 1) {
	        this.words[i + 1] = 1;
	      } else {
	        this.words[i + 1]++;
	      }
	    }
	    this.length = Math.max(this.length, i + 1);

	    return this;
	  };

	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.iaddn(-num);

	    if (this.negative !== 0) {
	      this.negative = 0;
	      this.iaddn(num);
	      this.negative = 1;
	      return this;
	    }

	    this.words[0] -= num;

	    if (this.length === 1 && this.words[0] < 0) {
	      this.words[0] = -this.words[0];
	      this.negative = 1;
	    } else {
	      // Carry
	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	        this.words[i] += 0x4000000;
	        this.words[i + 1] -= 1;
	      }
	    }

	    return this._strip();
	  };

	  BN.prototype.addn = function addn (num) {
	    return this.clone().iaddn(num);
	  };

	  BN.prototype.subn = function subn (num) {
	    return this.clone().isubn(num);
	  };

	  BN.prototype.iabs = function iabs () {
	    this.negative = 0;

	    return this;
	  };

	  BN.prototype.abs = function abs () {
	    return this.clone().iabs();
	  };

	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
	    var len = num.length + shift;
	    var i;

	    this._expand(len);

	    var w;
	    var carry = 0;
	    for (i = 0; i < num.length; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      var right = (num.words[i] | 0) * mul;
	      w -= right & 0x3ffffff;
	      carry = (w >> 26) - ((right / 0x4000000) | 0);
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    for (; i < this.length - shift; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      carry = w >> 26;
	      this.words[i + shift] = w & 0x3ffffff;
	    }

	    if (carry === 0) return this._strip();

	    // Subtraction overflow
	    assert(carry === -1);
	    carry = 0;
	    for (i = 0; i < this.length; i++) {
	      w = -(this.words[i] | 0) + carry;
	      carry = w >> 26;
	      this.words[i] = w & 0x3ffffff;
	    }
	    this.negative = 1;

	    return this._strip();
	  };

	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
	    var shift = this.length - num.length;

	    var a = this.clone();
	    var b = num;

	    // Normalize
	    var bhi = b.words[b.length - 1] | 0;
	    var bhiBits = this._countBits(bhi);
	    shift = 26 - bhiBits;
	    if (shift !== 0) {
	      b = b.ushln(shift);
	      a.iushln(shift);
	      bhi = b.words[b.length - 1] | 0;
	    }

	    // Initialize quotient
	    var m = a.length - b.length;
	    var q;

	    if (mode !== 'mod') {
	      q = new BN(null);
	      q.length = m + 1;
	      q.words = new Array(q.length);
	      for (var i = 0; i < q.length; i++) {
	        q.words[i] = 0;
	      }
	    }

	    var diff = a.clone()._ishlnsubmul(b, 1, m);
	    if (diff.negative === 0) {
	      a = diff;
	      if (q) {
	        q.words[m] = 1;
	      }
	    }

	    for (var j = m - 1; j >= 0; j--) {
	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
	        (a.words[b.length + j - 1] | 0);

	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
	      // (0x7ffffff)
	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

	      a._ishlnsubmul(b, qj, j);
	      while (a.negative !== 0) {
	        qj--;
	        a.negative = 0;
	        a._ishlnsubmul(b, 1, j);
	        if (!a.isZero()) {
	          a.negative ^= 1;
	        }
	      }
	      if (q) {
	        q.words[j] = qj;
	      }
	    }
	    if (q) {
	      q._strip();
	    }
	    a._strip();

	    // Denormalize
	    if (mode !== 'div' && shift !== 0) {
	      a.iushrn(shift);
	    }

	    return {
	      div: q || null,
	      mod: a
	    };
	  };

	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod (num, mode, positive) {
	    assert(!num.isZero());

	    if (this.isZero()) {
	      return {
	        div: new BN(0),
	        mod: new BN(0)
	      };
	    }

	    var div, mod, res;
	    if (this.negative !== 0 && num.negative === 0) {
	      res = this.neg().divmod(num, mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.iadd(num);
	        }
	      }

	      return {
	        div: div,
	        mod: mod
	      };
	    }

	    if (this.negative === 0 && num.negative !== 0) {
	      res = this.divmod(num.neg(), mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      return {
	        div: div,
	        mod: res.mod
	      };
	    }

	    if ((this.negative & num.negative) !== 0) {
	      res = this.neg().divmod(num.neg(), mode);

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.isub(num);
	        }
	      }

	      return {
	        div: res.div,
	        mod: mod
	      };
	    }

	    // Both numbers are positive at this point

	    // Strip both numbers to approximate shift value
	    if (num.length > this.length || this.cmp(num) < 0) {
	      return {
	        div: new BN(0),
	        mod: this
	      };
	    }

	    // Very short reduction
	    if (num.length === 1) {
	      if (mode === 'div') {
	        return {
	          div: this.divn(num.words[0]),
	          mod: null
	        };
	      }

	      if (mode === 'mod') {
	        return {
	          div: null,
	          mod: new BN(this.modrn(num.words[0]))
	        };
	      }

	      return {
	        div: this.divn(num.words[0]),
	        mod: new BN(this.modrn(num.words[0]))
	      };
	    }

	    return this._wordDiv(num, mode);
	  };

	  // Find `this` / `num`
	  BN.prototype.div = function div (num) {
	    return this.divmod(num, 'div', false).div;
	  };

	  // Find `this` % `num`
	  BN.prototype.mod = function mod (num) {
	    return this.divmod(num, 'mod', false).mod;
	  };

	  BN.prototype.umod = function umod (num) {
	    return this.divmod(num, 'mod', true).mod;
	  };

	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound (num) {
	    var dm = this.divmod(num);

	    // Fast case - exact division
	    if (dm.mod.isZero()) return dm.div;

	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

	    var half = num.ushrn(1);
	    var r2 = num.andln(1);
	    var cmp = mod.cmp(half);

	    // Round down
	    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

	    // Round up
	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };

	  BN.prototype.modrn = function modrn (num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;

	    assert(num <= 0x3ffffff);
	    var p = (1 << 26) % num;

	    var acc = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      acc = (p * acc + (this.words[i] | 0)) % num;
	    }

	    return isNegNum ? -acc : acc;
	  };

	  // WARNING: DEPRECATED
	  BN.prototype.modn = function modn (num) {
	    return this.modrn(num);
	  };

	  // In-place division by number
	  BN.prototype.idivn = function idivn (num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;

	    assert(num <= 0x3ffffff);

	    var carry = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var w = (this.words[i] | 0) + carry * 0x4000000;
	      this.words[i] = (w / num) | 0;
	      carry = w % num;
	    }

	    this._strip();
	    return isNegNum ? this.ineg() : this;
	  };

	  BN.prototype.divn = function divn (num) {
	    return this.clone().idivn(num);
	  };

	  BN.prototype.egcd = function egcd (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var x = this;
	    var y = p.clone();

	    if (x.negative !== 0) {
	      x = x.umod(p);
	    } else {
	      x = x.clone();
	    }

	    // A * x + B * y = x
	    var A = new BN(1);
	    var B = new BN(0);

	    // C * x + D * y = y
	    var C = new BN(0);
	    var D = new BN(1);

	    var g = 0;

	    while (x.isEven() && y.isEven()) {
	      x.iushrn(1);
	      y.iushrn(1);
	      ++g;
	    }

	    var yp = y.clone();
	    var xp = x.clone();

	    while (!x.isZero()) {
	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        x.iushrn(i);
	        while (i-- > 0) {
	          if (A.isOdd() || B.isOdd()) {
	            A.iadd(yp);
	            B.isub(xp);
	          }

	          A.iushrn(1);
	          B.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        y.iushrn(j);
	        while (j-- > 0) {
	          if (C.isOdd() || D.isOdd()) {
	            C.iadd(yp);
	            D.isub(xp);
	          }

	          C.iushrn(1);
	          D.iushrn(1);
	        }
	      }

	      if (x.cmp(y) >= 0) {
	        x.isub(y);
	        A.isub(C);
	        B.isub(D);
	      } else {
	        y.isub(x);
	        C.isub(A);
	        D.isub(B);
	      }
	    }

	    return {
	      a: C,
	      b: D,
	      gcd: y.iushln(g)
	    };
	  };

	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var a = this;
	    var b = p.clone();

	    if (a.negative !== 0) {
	      a = a.umod(p);
	    } else {
	      a = a.clone();
	    }

	    var x1 = new BN(1);
	    var x2 = new BN(0);

	    var delta = b.clone();

	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        a.iushrn(i);
	        while (i-- > 0) {
	          if (x1.isOdd()) {
	            x1.iadd(delta);
	          }

	          x1.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        b.iushrn(j);
	        while (j-- > 0) {
	          if (x2.isOdd()) {
	            x2.iadd(delta);
	          }

	          x2.iushrn(1);
	        }
	      }

	      if (a.cmp(b) >= 0) {
	        a.isub(b);
	        x1.isub(x2);
	      } else {
	        b.isub(a);
	        x2.isub(x1);
	      }
	    }

	    var res;
	    if (a.cmpn(1) === 0) {
	      res = x1;
	    } else {
	      res = x2;
	    }

	    if (res.cmpn(0) < 0) {
	      res.iadd(p);
	    }

	    return res;
	  };

	  BN.prototype.gcd = function gcd (num) {
	    if (this.isZero()) return num.abs();
	    if (num.isZero()) return this.abs();

	    var a = this.clone();
	    var b = num.clone();
	    a.negative = 0;
	    b.negative = 0;

	    // Remove common factor of two
	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	      a.iushrn(1);
	      b.iushrn(1);
	    }

	    do {
	      while (a.isEven()) {
	        a.iushrn(1);
	      }
	      while (b.isEven()) {
	        b.iushrn(1);
	      }

	      var r = a.cmp(b);
	      if (r < 0) {
	        // Swap `a` and `b` to make `a` always bigger than `b`
	        var t = a;
	        a = b;
	        b = t;
	      } else if (r === 0 || b.cmpn(1) === 0) {
	        break;
	      }

	      a.isub(b);
	    } while (true);

	    return b.iushln(shift);
	  };

	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm (num) {
	    return this.egcd(num).a.umod(num);
	  };

	  BN.prototype.isEven = function isEven () {
	    return (this.words[0] & 1) === 0;
	  };

	  BN.prototype.isOdd = function isOdd () {
	    return (this.words[0] & 1) === 1;
	  };

	  // And first word and num
	  BN.prototype.andln = function andln (num) {
	    return this.words[0] & num;
	  };

	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn (bit) {
	    assert(typeof bit === 'number');
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) {
	      this._expand(s + 1);
	      this.words[s] |= q;
	      return this;
	    }

	    // Add bit and propagate, if needed
	    var carry = q;
	    for (var i = s; carry !== 0 && i < this.length; i++) {
	      var w = this.words[i] | 0;
	      w += carry;
	      carry = w >>> 26;
	      w &= 0x3ffffff;
	      this.words[i] = w;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return this;
	  };

	  BN.prototype.isZero = function isZero () {
	    return this.length === 1 && this.words[0] === 0;
	  };

	  BN.prototype.cmpn = function cmpn (num) {
	    var negative = num < 0;

	    if (this.negative !== 0 && !negative) return -1;
	    if (this.negative === 0 && negative) return 1;

	    this._strip();

	    var res;
	    if (this.length > 1) {
	      res = 1;
	    } else {
	      if (negative) {
	        num = -num;
	      }

	      assert(num <= 0x3ffffff, 'Number is too big');

	      var w = this.words[0] | 0;
	      res = w === num ? 0 : w < num ? -1 : 1;
	    }
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp (num) {
	    if (this.negative !== 0 && num.negative === 0) return -1;
	    if (this.negative === 0 && num.negative !== 0) return 1;

	    var res = this.ucmp(num);
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp (num) {
	    // At this point both numbers have the same sign
	    if (this.length > num.length) return 1;
	    if (this.length < num.length) return -1;

	    var res = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var a = this.words[i] | 0;
	      var b = num.words[i] | 0;

	      if (a === b) continue;
	      if (a < b) {
	        res = -1;
	      } else if (a > b) {
	        res = 1;
	      }
	      break;
	    }
	    return res;
	  };

	  BN.prototype.gtn = function gtn (num) {
	    return this.cmpn(num) === 1;
	  };

	  BN.prototype.gt = function gt (num) {
	    return this.cmp(num) === 1;
	  };

	  BN.prototype.gten = function gten (num) {
	    return this.cmpn(num) >= 0;
	  };

	  BN.prototype.gte = function gte (num) {
	    return this.cmp(num) >= 0;
	  };

	  BN.prototype.ltn = function ltn (num) {
	    return this.cmpn(num) === -1;
	  };

	  BN.prototype.lt = function lt (num) {
	    return this.cmp(num) === -1;
	  };

	  BN.prototype.lten = function lten (num) {
	    return this.cmpn(num) <= 0;
	  };

	  BN.prototype.lte = function lte (num) {
	    return this.cmp(num) <= 0;
	  };

	  BN.prototype.eqn = function eqn (num) {
	    return this.cmpn(num) === 0;
	  };

	  BN.prototype.eq = function eq (num) {
	    return this.cmp(num) === 0;
	  };

	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red (num) {
	    return new Red(num);
	  };

	  BN.prototype.toRed = function toRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    assert(this.negative === 0, 'red works only with positives');
	    return ctx.convertTo(this)._forceRed(ctx);
	  };

	  BN.prototype.fromRed = function fromRed () {
	    assert(this.red, 'fromRed works only with numbers in reduction context');
	    return this.red.convertFrom(this);
	  };

	  BN.prototype._forceRed = function _forceRed (ctx) {
	    this.red = ctx;
	    return this;
	  };

	  BN.prototype.forceRed = function forceRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    return this._forceRed(ctx);
	  };

	  BN.prototype.redAdd = function redAdd (num) {
	    assert(this.red, 'redAdd works only with red numbers');
	    return this.red.add(this, num);
	  };

	  BN.prototype.redIAdd = function redIAdd (num) {
	    assert(this.red, 'redIAdd works only with red numbers');
	    return this.red.iadd(this, num);
	  };

	  BN.prototype.redSub = function redSub (num) {
	    assert(this.red, 'redSub works only with red numbers');
	    return this.red.sub(this, num);
	  };

	  BN.prototype.redISub = function redISub (num) {
	    assert(this.red, 'redISub works only with red numbers');
	    return this.red.isub(this, num);
	  };

	  BN.prototype.redShl = function redShl (num) {
	    assert(this.red, 'redShl works only with red numbers');
	    return this.red.shl(this, num);
	  };

	  BN.prototype.redMul = function redMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.mul(this, num);
	  };

	  BN.prototype.redIMul = function redIMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.imul(this, num);
	  };

	  BN.prototype.redSqr = function redSqr () {
	    assert(this.red, 'redSqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqr(this);
	  };

	  BN.prototype.redISqr = function redISqr () {
	    assert(this.red, 'redISqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.isqr(this);
	  };

	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt () {
	    assert(this.red, 'redSqrt works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqrt(this);
	  };

	  BN.prototype.redInvm = function redInvm () {
	    assert(this.red, 'redInvm works only with red numbers');
	    this.red._verify1(this);
	    return this.red.invm(this);
	  };

	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg () {
	    assert(this.red, 'redNeg works only with red numbers');
	    this.red._verify1(this);
	    return this.red.neg(this);
	  };

	  BN.prototype.redPow = function redPow (num) {
	    assert(this.red && !num.red, 'redPow(normalNum)');
	    this.red._verify1(this);
	    return this.red.pow(this, num);
	  };

	  // Prime numbers with efficient reduction
	  var primes = {
	    k256: null,
	    p224: null,
	    p192: null,
	    p25519: null
	  };

	  // Pseudo-Mersenne prime
	  function MPrime (name, p) {
	    // P = 2 ^ N - K
	    this.name = name;
	    this.p = new BN(p, 16);
	    this.n = this.p.bitLength();
	    this.k = new BN(1).iushln(this.n).isub(this.p);

	    this.tmp = this._tmp();
	  }

	  MPrime.prototype._tmp = function _tmp () {
	    var tmp = new BN(null);
	    tmp.words = new Array(Math.ceil(this.n / 13));
	    return tmp;
	  };

	  MPrime.prototype.ireduce = function ireduce (num) {
	    // Assumes that `num` is less than `P^2`
	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	    var r = num;
	    var rlen;

	    do {
	      this.split(r, this.tmp);
	      r = this.imulK(r);
	      r = r.iadd(this.tmp);
	      rlen = r.bitLength();
	    } while (rlen > this.n);

	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
	    if (cmp === 0) {
	      r.words[0] = 0;
	      r.length = 1;
	    } else if (cmp > 0) {
	      r.isub(this.p);
	    } else {
	      if (r.strip !== undefined) {
	        // r is a BN v4 instance
	        r.strip();
	      } else {
	        // r is a BN v5 instance
	        r._strip();
	      }
	    }

	    return r;
	  };

	  MPrime.prototype.split = function split (input, out) {
	    input.iushrn(this.n, 0, out);
	  };

	  MPrime.prototype.imulK = function imulK (num) {
	    return num.imul(this.k);
	  };

	  function K256 () {
	    MPrime.call(
	      this,
	      'k256',
	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);

	  K256.prototype.split = function split (input, output) {
	    // 256 = 9 * 26 + 22
	    var mask = 0x3fffff;

	    var outLen = Math.min(input.length, 9);
	    for (var i = 0; i < outLen; i++) {
	      output.words[i] = input.words[i];
	    }
	    output.length = outLen;

	    if (input.length <= 9) {
	      input.words[0] = 0;
	      input.length = 1;
	      return;
	    }

	    // Shift by 9 limbs
	    var prev = input.words[9];
	    output.words[output.length++] = prev & mask;

	    for (i = 10; i < input.length; i++) {
	      var next = input.words[i] | 0;
	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
	      prev = next;
	    }
	    prev >>>= 22;
	    input.words[i - 10] = prev;
	    if (prev === 0 && input.length > 10) {
	      input.length -= 10;
	    } else {
	      input.length -= 9;
	    }
	  };

	  K256.prototype.imulK = function imulK (num) {
	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	    num.words[num.length] = 0;
	    num.words[num.length + 1] = 0;
	    num.length += 2;

	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
	    var lo = 0;
	    for (var i = 0; i < num.length; i++) {
	      var w = num.words[i] | 0;
	      lo += w * 0x3d1;
	      num.words[i] = lo & 0x3ffffff;
	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
	    }

	    // Fast length reduction
	    if (num.words[num.length - 1] === 0) {
	      num.length--;
	      if (num.words[num.length - 1] === 0) {
	        num.length--;
	      }
	    }
	    return num;
	  };

	  function P224 () {
	    MPrime.call(
	      this,
	      'p224',
	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);

	  function P192 () {
	    MPrime.call(
	      this,
	      'p192',
	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);

	  function P25519 () {
	    // 2 ^ 255 - 19
	    MPrime.call(
	      this,
	      '25519',
	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);

	  P25519.prototype.imulK = function imulK (num) {
	    // K = 0x13
	    var carry = 0;
	    for (var i = 0; i < num.length; i++) {
	      var hi = (num.words[i] | 0) * 0x13 + carry;
	      var lo = hi & 0x3ffffff;
	      hi >>>= 26;

	      num.words[i] = lo;
	      carry = hi;
	    }
	    if (carry !== 0) {
	      num.words[num.length++] = carry;
	    }
	    return num;
	  };

	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime (name) {
	    // Cached version of prime
	    if (primes[name]) return primes[name];

	    var prime;
	    if (name === 'k256') {
	      prime = new K256();
	    } else if (name === 'p224') {
	      prime = new P224();
	    } else if (name === 'p192') {
	      prime = new P192();
	    } else if (name === 'p25519') {
	      prime = new P25519();
	    } else {
	      throw new Error('Unknown prime ' + name);
	    }
	    primes[name] = prime;

	    return prime;
	  };

	  //
	  // Base reduction engine
	  //
	  function Red (m) {
	    if (typeof m === 'string') {
	      var prime = BN._prime(m);
	      this.m = prime.p;
	      this.prime = prime;
	    } else {
	      assert(m.gtn(1), 'modulus must be greater than 1');
	      this.m = m;
	      this.prime = null;
	    }
	  }

	  Red.prototype._verify1 = function _verify1 (a) {
	    assert(a.negative === 0, 'red works only with positives');
	    assert(a.red, 'red works only with red numbers');
	  };

	  Red.prototype._verify2 = function _verify2 (a, b) {
	    assert((a.negative | b.negative) === 0, 'red works only with positives');
	    assert(a.red && a.red === b.red,
	      'red works only with red numbers');
	  };

	  Red.prototype.imod = function imod (a) {
	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

	    move(a, a.umod(this.m)._forceRed(this));
	    return a;
	  };

	  Red.prototype.neg = function neg (a) {
	    if (a.isZero()) {
	      return a.clone();
	    }

	    return this.m.sub(a)._forceRed(this);
	  };

	  Red.prototype.add = function add (a, b) {
	    this._verify2(a, b);

	    var res = a.add(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.iadd = function iadd (a, b) {
	    this._verify2(a, b);

	    var res = a.iadd(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res;
	  };

	  Red.prototype.sub = function sub (a, b) {
	    this._verify2(a, b);

	    var res = a.sub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.isub = function isub (a, b) {
	    this._verify2(a, b);

	    var res = a.isub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res;
	  };

	  Red.prototype.shl = function shl (a, num) {
	    this._verify1(a);
	    return this.imod(a.ushln(num));
	  };

	  Red.prototype.imul = function imul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.imul(b));
	  };

	  Red.prototype.mul = function mul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.mul(b));
	  };

	  Red.prototype.isqr = function isqr (a) {
	    return this.imul(a, a.clone());
	  };

	  Red.prototype.sqr = function sqr (a) {
	    return this.mul(a, a);
	  };

	  Red.prototype.sqrt = function sqrt (a) {
	    if (a.isZero()) return a.clone();

	    var mod3 = this.m.andln(3);
	    assert(mod3 % 2 === 1);

	    // Fast case
	    if (mod3 === 3) {
	      var pow = this.m.add(new BN(1)).iushrn(2);
	      return this.pow(a, pow);
	    }

	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	    //
	    // Find Q and S, that Q * 2 ^ S = (P - 1)
	    var q = this.m.subn(1);
	    var s = 0;
	    while (!q.isZero() && q.andln(1) === 0) {
	      s++;
	      q.iushrn(1);
	    }
	    assert(!q.isZero());

	    var one = new BN(1).toRed(this);
	    var nOne = one.redNeg();

	    // Find quadratic non-residue
	    // NOTE: Max is such because of generalized Riemann hypothesis.
	    var lpow = this.m.subn(1).iushrn(1);
	    var z = this.m.bitLength();
	    z = new BN(2 * z * z).toRed(this);

	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
	      z.redIAdd(nOne);
	    }

	    var c = this.pow(z, q);
	    var r = this.pow(a, q.addn(1).iushrn(1));
	    var t = this.pow(a, q);
	    var m = s;
	    while (t.cmp(one) !== 0) {
	      var tmp = t;
	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
	        tmp = tmp.redSqr();
	      }
	      assert(i < m);
	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

	      r = r.redMul(b);
	      c = b.redSqr();
	      t = t.redMul(c);
	      m = i;
	    }

	    return r;
	  };

	  Red.prototype.invm = function invm (a) {
	    var inv = a._invmp(this.m);
	    if (inv.negative !== 0) {
	      inv.negative = 0;
	      return this.imod(inv).redNeg();
	    } else {
	      return this.imod(inv);
	    }
	  };

	  Red.prototype.pow = function pow (a, num) {
	    if (num.isZero()) return new BN(1).toRed(this);
	    if (num.cmpn(1) === 0) return a.clone();

	    var windowSize = 4;
	    var wnd = new Array(1 << windowSize);
	    wnd[0] = new BN(1).toRed(this);
	    wnd[1] = a;
	    for (var i = 2; i < wnd.length; i++) {
	      wnd[i] = this.mul(wnd[i - 1], a);
	    }

	    var res = wnd[0];
	    var current = 0;
	    var currentLen = 0;
	    var start = num.bitLength() % 26;
	    if (start === 0) {
	      start = 26;
	    }

	    for (i = num.length - 1; i >= 0; i--) {
	      var word = num.words[i];
	      for (var j = start - 1; j >= 0; j--) {
	        var bit = (word >> j) & 1;
	        if (res !== wnd[0]) {
	          res = this.sqr(res);
	        }

	        if (bit === 0 && current === 0) {
	          currentLen = 0;
	          continue;
	        }

	        current <<= 1;
	        current |= bit;
	        currentLen++;
	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

	        res = this.mul(res, wnd[current]);
	        currentLen = 0;
	        current = 0;
	      }
	      start = 26;
	    }

	    return res;
	  };

	  Red.prototype.convertTo = function convertTo (num) {
	    var r = num.umod(this.m);

	    return r === num ? r.clone() : r;
	  };

	  Red.prototype.convertFrom = function convertFrom (num) {
	    var res = num.clone();
	    res.red = null;
	    return res;
	  };

	  //
	  // Montgomery method engine
	  //

	  BN.mont = function mont (num) {
	    return new Mont(num);
	  };

	  function Mont (m) {
	    Red.call(this, m);

	    this.shift = this.m.bitLength();
	    if (this.shift % 26 !== 0) {
	      this.shift += 26 - (this.shift % 26);
	    }

	    this.r = new BN(1).iushln(this.shift);
	    this.r2 = this.imod(this.r.sqr());
	    this.rinv = this.r._invmp(this.m);

	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
	    this.minv = this.minv.umod(this.r);
	    this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);

	  Mont.prototype.convertTo = function convertTo (num) {
	    return this.imod(num.ushln(this.shift));
	  };

	  Mont.prototype.convertFrom = function convertFrom (num) {
	    var r = this.imod(num.mul(this.rinv));
	    r.red = null;
	    return r;
	  };

	  Mont.prototype.imul = function imul (a, b) {
	    if (a.isZero() || b.isZero()) {
	      a.words[0] = 0;
	      a.length = 1;
	      return a;
	    }

	    var t = a.imul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;

	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.mul = function mul (a, b) {
	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

	    var t = a.mul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.invm = function invm (a) {
	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	    var res = this.imod(a._invmp(this.m).mul(this.r2));
	    return res._forceRed(this);
	  };
	})(module, commonjsGlobal); 
} (bn$1));

var bnExports$1 = bn$1.exports;

var __importDefault$g = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(decimal, "__esModule", { value: true });
decimal.Decimal = void 0;
const bn_js_1$2 = __importDefault$g(bnExports$1);
// Too large values lead to massive memory usage. Limit to something sensible.
// The largest value we need is 18 (Ether).
const maxFractionalDigits = 100;
/**
 * A type for arbitrary precision, non-negative decimals.
 *
 * Instances of this class are immutable.
 */
class Decimal {
    constructor(atomics, fractionalDigits) {
        if (!atomics.match(/^[0-9]+$/)) {
            throw new Error("Invalid string format. Only non-negative integers in decimal representation supported.");
        }
        this.data = {
            atomics: new bn_js_1$2.default(atomics),
            fractionalDigits: fractionalDigits,
        };
    }
    static fromUserInput(input, fractionalDigits) {
        Decimal.verifyFractionalDigits(fractionalDigits);
        const badCharacter = input.match(/[^0-9.]/);
        if (badCharacter) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            throw new Error(`Invalid character at position ${badCharacter.index + 1}`);
        }
        let whole;
        let fractional;
        if (input === "") {
            whole = "0";
            fractional = "";
        }
        else if (input.search(/\./) === -1) {
            // integer format, no separator
            whole = input;
            fractional = "";
        }
        else {
            const parts = input.split(".");
            switch (parts.length) {
                case 0:
                case 1:
                    throw new Error("Fewer than two elements in split result. This must not happen here.");
                case 2:
                    if (!parts[1])
                        throw new Error("Fractional part missing");
                    whole = parts[0];
                    fractional = parts[1].replace(/0+$/, "");
                    break;
                default:
                    throw new Error("More than one separator found");
            }
        }
        if (fractional.length > fractionalDigits) {
            throw new Error("Got more fractional digits than supported");
        }
        const quantity = `${whole}${fractional.padEnd(fractionalDigits, "0")}`;
        return new Decimal(quantity, fractionalDigits);
    }
    static fromAtomics(atomics, fractionalDigits) {
        Decimal.verifyFractionalDigits(fractionalDigits);
        return new Decimal(atomics, fractionalDigits);
    }
    /**
     * Creates a Decimal with value 0.0 and the given number of fractial digits.
     *
     * Fractional digits are not relevant for the value but needed to be able
     * to perform arithmetic operations with other decimals.
     */
    static zero(fractionalDigits) {
        Decimal.verifyFractionalDigits(fractionalDigits);
        return new Decimal("0", fractionalDigits);
    }
    /**
     * Creates a Decimal with value 1.0 and the given number of fractial digits.
     *
     * Fractional digits are not relevant for the value but needed to be able
     * to perform arithmetic operations with other decimals.
     */
    static one(fractionalDigits) {
        Decimal.verifyFractionalDigits(fractionalDigits);
        return new Decimal("1" + "0".repeat(fractionalDigits), fractionalDigits);
    }
    static verifyFractionalDigits(fractionalDigits) {
        if (!Number.isInteger(fractionalDigits))
            throw new Error("Fractional digits is not an integer");
        if (fractionalDigits < 0)
            throw new Error("Fractional digits must not be negative");
        if (fractionalDigits > maxFractionalDigits) {
            throw new Error(`Fractional digits must not exceed ${maxFractionalDigits}`);
        }
    }
    static compare(a, b) {
        if (a.fractionalDigits !== b.fractionalDigits)
            throw new Error("Fractional digits do not match");
        return a.data.atomics.cmp(new bn_js_1$2.default(b.atomics));
    }
    get atomics() {
        return this.data.atomics.toString();
    }
    get fractionalDigits() {
        return this.data.fractionalDigits;
    }
    /** Creates a new instance with the same value */
    clone() {
        return new Decimal(this.atomics, this.fractionalDigits);
    }
    /** Returns the greatest decimal <= this which has no fractional part (rounding down) */
    floor() {
        const factor = new bn_js_1$2.default(10).pow(new bn_js_1$2.default(this.data.fractionalDigits));
        const whole = this.data.atomics.div(factor);
        const fractional = this.data.atomics.mod(factor);
        if (fractional.isZero()) {
            return this.clone();
        }
        else {
            return Decimal.fromAtomics(whole.mul(factor).toString(), this.fractionalDigits);
        }
    }
    /** Returns the smallest decimal >= this which has no fractional part (rounding up) */
    ceil() {
        const factor = new bn_js_1$2.default(10).pow(new bn_js_1$2.default(this.data.fractionalDigits));
        const whole = this.data.atomics.div(factor);
        const fractional = this.data.atomics.mod(factor);
        if (fractional.isZero()) {
            return this.clone();
        }
        else {
            return Decimal.fromAtomics(whole.addn(1).mul(factor).toString(), this.fractionalDigits);
        }
    }
    toString() {
        const factor = new bn_js_1$2.default(10).pow(new bn_js_1$2.default(this.data.fractionalDigits));
        const whole = this.data.atomics.div(factor);
        const fractional = this.data.atomics.mod(factor);
        if (fractional.isZero()) {
            return whole.toString();
        }
        else {
            const fullFractionalPart = fractional.toString().padStart(this.data.fractionalDigits, "0");
            const trimmedFractionalPart = fullFractionalPart.replace(/0+$/, "");
            return `${whole.toString()}.${trimmedFractionalPart}`;
        }
    }
    /**
     * Returns an approximation as a float type. Only use this if no
     * exact calculation is required.
     */
    toFloatApproximation() {
        const out = Number(this.toString());
        if (Number.isNaN(out))
            throw new Error("Conversion to number failed");
        return out;
    }
    /**
     * a.plus(b) returns a+b.
     *
     * Both values need to have the same fractional digits.
     */
    plus(b) {
        if (this.fractionalDigits !== b.fractionalDigits)
            throw new Error("Fractional digits do not match");
        const sum = this.data.atomics.add(new bn_js_1$2.default(b.atomics));
        return new Decimal(sum.toString(), this.fractionalDigits);
    }
    /**
     * a.minus(b) returns a-b.
     *
     * Both values need to have the same fractional digits.
     * The resulting difference needs to be non-negative.
     */
    minus(b) {
        if (this.fractionalDigits !== b.fractionalDigits)
            throw new Error("Fractional digits do not match");
        const difference = this.data.atomics.sub(new bn_js_1$2.default(b.atomics));
        if (difference.ltn(0))
            throw new Error("Difference must not be negative");
        return new Decimal(difference.toString(), this.fractionalDigits);
    }
    /**
     * a.multiply(b) returns a*b.
     *
     * We only allow multiplication by unsigned integers to avoid rounding errors.
     */
    multiply(b) {
        const product = this.data.atomics.mul(new bn_js_1$2.default(b.toString()));
        return new Decimal(product.toString(), this.fractionalDigits);
    }
    equals(b) {
        return Decimal.compare(this, b) === 0;
    }
    isLessThan(b) {
        return Decimal.compare(this, b) < 0;
    }
    isLessThanOrEqual(b) {
        return Decimal.compare(this, b) <= 0;
    }
    isGreaterThan(b) {
        return Decimal.compare(this, b) > 0;
    }
    isGreaterThanOrEqual(b) {
        return Decimal.compare(this, b) >= 0;
    }
}
decimal.Decimal = Decimal;

var integers = {};

var __importDefault$f = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(integers, "__esModule", { value: true });
integers.Uint64 = integers.Uint53 = integers.Int53 = integers.Uint32 = void 0;
/* eslint-disable no-bitwise */
const bn_js_1$1 = __importDefault$f(bnExports$1);
const uint64MaxValue = new bn_js_1$1.default("18446744073709551615", 10, "be");
class Uint32 {
    constructor(input) {
        if (Number.isNaN(input)) {
            throw new Error("Input is not a number");
        }
        if (!Number.isInteger(input)) {
            throw new Error("Input is not an integer");
        }
        if (input < 0 || input > 4294967295) {
            throw new Error("Input not in uint32 range: " + input.toString());
        }
        this.data = input;
    }
    /** @deprecated use Uint32.fromBytes */
    static fromBigEndianBytes(bytes) {
        return Uint32.fromBytes(bytes);
    }
    /**
     * Creates a Uint32 from a fixed length byte array.
     *
     * @param bytes a list of exactly 4 bytes
     * @param endianess defaults to big endian
     */
    static fromBytes(bytes, endianess = "be") {
        if (bytes.length !== 4) {
            throw new Error("Invalid input length. Expected 4 bytes.");
        }
        for (let i = 0; i < bytes.length; ++i) {
            if (!Number.isInteger(bytes[i]) || bytes[i] > 255 || bytes[i] < 0) {
                throw new Error("Invalid value in byte. Found: " + bytes[i]);
            }
        }
        const beBytes = endianess === "be" ? bytes : Array.from(bytes).reverse();
        // Use mulitiplication instead of shifting since bitwise operators are defined
        // on SIGNED int32 in JavaScript and we don't want to risk surprises
        return new Uint32(beBytes[0] * 2 ** 24 + beBytes[1] * 2 ** 16 + beBytes[2] * 2 ** 8 + beBytes[3]);
    }
    static fromString(str) {
        if (!str.match(/^[0-9]+$/)) {
            throw new Error("Invalid string format");
        }
        return new Uint32(Number.parseInt(str, 10));
    }
    toBytesBigEndian() {
        // Use division instead of shifting since bitwise operators are defined
        // on SIGNED int32 in JavaScript and we don't want to risk surprises
        return new Uint8Array([
            Math.floor(this.data / 2 ** 24) & 0xff,
            Math.floor(this.data / 2 ** 16) & 0xff,
            Math.floor(this.data / 2 ** 8) & 0xff,
            Math.floor(this.data / 2 ** 0) & 0xff,
        ]);
    }
    toBytesLittleEndian() {
        // Use division instead of shifting since bitwise operators are defined
        // on SIGNED int32 in JavaScript and we don't want to risk surprises
        return new Uint8Array([
            Math.floor(this.data / 2 ** 0) & 0xff,
            Math.floor(this.data / 2 ** 8) & 0xff,
            Math.floor(this.data / 2 ** 16) & 0xff,
            Math.floor(this.data / 2 ** 24) & 0xff,
        ]);
    }
    toNumber() {
        return this.data;
    }
    toBigInt() {
        return BigInt(this.toNumber());
    }
    toString() {
        return this.data.toString();
    }
}
integers.Uint32 = Uint32;
class Int53 {
    constructor(input) {
        if (Number.isNaN(input)) {
            throw new Error("Input is not a number");
        }
        if (!Number.isInteger(input)) {
            throw new Error("Input is not an integer");
        }
        if (input < Number.MIN_SAFE_INTEGER || input > Number.MAX_SAFE_INTEGER) {
            throw new Error("Input not in int53 range: " + input.toString());
        }
        this.data = input;
    }
    static fromString(str) {
        if (!str.match(/^-?[0-9]+$/)) {
            throw new Error("Invalid string format");
        }
        return new Int53(Number.parseInt(str, 10));
    }
    toNumber() {
        return this.data;
    }
    toBigInt() {
        return BigInt(this.toNumber());
    }
    toString() {
        return this.data.toString();
    }
}
integers.Int53 = Int53;
class Uint53 {
    constructor(input) {
        const signed = new Int53(input);
        if (signed.toNumber() < 0) {
            throw new Error("Input is negative");
        }
        this.data = signed;
    }
    static fromString(str) {
        const signed = Int53.fromString(str);
        return new Uint53(signed.toNumber());
    }
    toNumber() {
        return this.data.toNumber();
    }
    toBigInt() {
        return BigInt(this.toNumber());
    }
    toString() {
        return this.data.toString();
    }
}
integers.Uint53 = Uint53;
class Uint64 {
    constructor(data) {
        if (data.isNeg()) {
            throw new Error("Input is negative");
        }
        if (data.gt(uint64MaxValue)) {
            throw new Error("Input exceeds uint64 range");
        }
        this.data = data;
    }
    /** @deprecated use Uint64.fromBytes */
    static fromBytesBigEndian(bytes) {
        return Uint64.fromBytes(bytes);
    }
    /**
     * Creates a Uint64 from a fixed length byte array.
     *
     * @param bytes a list of exactly 8 bytes
     * @param endianess defaults to big endian
     */
    static fromBytes(bytes, endianess = "be") {
        if (bytes.length !== 8) {
            throw new Error("Invalid input length. Expected 8 bytes.");
        }
        for (let i = 0; i < bytes.length; ++i) {
            if (!Number.isInteger(bytes[i]) || bytes[i] > 255 || bytes[i] < 0) {
                throw new Error("Invalid value in byte. Found: " + bytes[i]);
            }
        }
        const beBytes = endianess === "be" ? Array.from(bytes) : Array.from(bytes).reverse();
        return new Uint64(new bn_js_1$1.default(beBytes));
    }
    static fromString(str) {
        if (!str.match(/^[0-9]+$/)) {
            throw new Error("Invalid string format");
        }
        return new Uint64(new bn_js_1$1.default(str, 10, "be"));
    }
    static fromNumber(input) {
        if (Number.isNaN(input)) {
            throw new Error("Input is not a number");
        }
        if (!Number.isInteger(input)) {
            throw new Error("Input is not an integer");
        }
        let bigint;
        try {
            bigint = new bn_js_1$1.default(input);
        }
        catch {
            throw new Error("Input is not a safe integer");
        }
        return new Uint64(bigint);
    }
    toBytesBigEndian() {
        return Uint8Array.from(this.data.toArray("be", 8));
    }
    toBytesLittleEndian() {
        return Uint8Array.from(this.data.toArray("le", 8));
    }
    toString() {
        return this.data.toString(10);
    }
    toBigInt() {
        return BigInt(this.toString());
    }
    toNumber() {
        return this.data.toNumber();
    }
}
integers.Uint64 = Uint64;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Uint64 = exports.Uint53 = exports.Uint32 = exports.Int53 = exports.Decimal = void 0;
	var decimal_1 = decimal;
	Object.defineProperty(exports, "Decimal", { enumerable: true, get: function () { return decimal_1.Decimal; } });
	var integers_1 = integers;
	Object.defineProperty(exports, "Int53", { enumerable: true, get: function () { return integers_1.Int53; } });
	Object.defineProperty(exports, "Uint32", { enumerable: true, get: function () { return integers_1.Uint32; } });
	Object.defineProperty(exports, "Uint53", { enumerable: true, get: function () { return integers_1.Uint53; } });
	Object.defineProperty(exports, "Uint64", { enumerable: true, get: function () { return integers_1.Uint64; } });
	
} (build$a));

var build$9 = {};

var coins$2 = {};

Object.defineProperty(coins$2, "__esModule", { value: true });
coins$2.parseCoins = void 0;
/**
 * Takes a coins list like "819966000ucosm,700000000ustake" and parses it.
 *
 * This is a Stargate ready version of parseCoins from @cosmjs/amino.
 * It supports more denoms.
 */
function parseCoins$1(input) {
    return input
        .replace(/\s/g, "")
        .split(",")
        .filter(Boolean)
        .map((part) => {
        // Denom regex from Stargate (https://github.com/cosmos/cosmos-sdk/blob/v0.42.7/types/coin.go#L599-L601)
        const match = part.match(/^([0-9]+)([a-zA-Z][a-zA-Z0-9/]{2,127})$/);
        if (!match)
            throw new Error("Got an invalid coin string");
        return {
            amount: match[1].replace(/^0+/, "") || "0",
            denom: match[2],
        };
    });
}
coins$2.parseCoins = parseCoins$1;

var decode$1 = {};

var tx$e = {};

var any = {};

var indexMinimal = {};

var minimal$1 = {};

var aspromise;
var hasRequiredAspromise;

function requireAspromise () {
	if (hasRequiredAspromise) return aspromise;
	hasRequiredAspromise = 1;
	aspromise = asPromise;

	/**
	 * Callback as used by {@link util.asPromise}.
	 * @typedef asPromiseCallback
	 * @type {function}
	 * @param {Error|null} error Error, if any
	 * @param {...*} params Additional arguments
	 * @returns {undefined}
	 */

	/**
	 * Returns a promise from a node-style callback function.
	 * @memberof util
	 * @param {asPromiseCallback} fn Function to call
	 * @param {*} ctx Function context
	 * @param {...*} params Function arguments
	 * @returns {Promise<*>} Promisified function
	 */
	function asPromise(fn, ctx/*, varargs */) {
	    var params  = new Array(arguments.length - 1),
	        offset  = 0,
	        index   = 2,
	        pending = true;
	    while (index < arguments.length)
	        params[offset++] = arguments[index++];
	    return new Promise(function executor(resolve, reject) {
	        params[offset] = function callback(err/*, varargs */) {
	            if (pending) {
	                pending = false;
	                if (err)
	                    reject(err);
	                else {
	                    var params = new Array(arguments.length - 1),
	                        offset = 0;
	                    while (offset < params.length)
	                        params[offset++] = arguments[offset];
	                    resolve.apply(null, params);
	                }
	            }
	        };
	        try {
	            fn.apply(ctx || null, params);
	        } catch (err) {
	            if (pending) {
	                pending = false;
	                reject(err);
	            }
	        }
	    });
	}
	return aspromise;
}

var base64$2 = {};

var hasRequiredBase64;

function requireBase64 () {
	if (hasRequiredBase64) return base64$2;
	hasRequiredBase64 = 1;
	(function (exports) {

		/**
		 * A minimal base64 implementation for number arrays.
		 * @memberof util
		 * @namespace
		 */
		var base64 = exports;

		/**
		 * Calculates the byte length of a base64 encoded string.
		 * @param {string} string Base64 encoded string
		 * @returns {number} Byte length
		 */
		base64.length = function length(string) {
		    var p = string.length;
		    if (!p)
		        return 0;
		    var n = 0;
		    while (--p % 4 > 1 && string.charAt(p) === "=")
		        ++n;
		    return Math.ceil(string.length * 3) / 4 - n;
		};

		// Base64 encoding table
		var b64 = new Array(64);

		// Base64 decoding table
		var s64 = new Array(123);

		// 65..90, 97..122, 48..57, 43, 47
		for (var i = 0; i < 64;)
		    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

		/**
		 * Encodes a buffer to a base64 encoded string.
		 * @param {Uint8Array} buffer Source buffer
		 * @param {number} start Source start
		 * @param {number} end Source end
		 * @returns {string} Base64 encoded string
		 */
		base64.encode = function encode(buffer, start, end) {
		    var parts = null,
		        chunk = [];
		    var i = 0, // output index
		        j = 0, // goto index
		        t;     // temporary
		    while (start < end) {
		        var b = buffer[start++];
		        switch (j) {
		            case 0:
		                chunk[i++] = b64[b >> 2];
		                t = (b & 3) << 4;
		                j = 1;
		                break;
		            case 1:
		                chunk[i++] = b64[t | b >> 4];
		                t = (b & 15) << 2;
		                j = 2;
		                break;
		            case 2:
		                chunk[i++] = b64[t | b >> 6];
		                chunk[i++] = b64[b & 63];
		                j = 0;
		                break;
		        }
		        if (i > 8191) {
		            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
		            i = 0;
		        }
		    }
		    if (j) {
		        chunk[i++] = b64[t];
		        chunk[i++] = 61;
		        if (j === 1)
		            chunk[i++] = 61;
		    }
		    if (parts) {
		        if (i)
		            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
		        return parts.join("");
		    }
		    return String.fromCharCode.apply(String, chunk.slice(0, i));
		};

		var invalidEncoding = "invalid encoding";

		/**
		 * Decodes a base64 encoded string to a buffer.
		 * @param {string} string Source string
		 * @param {Uint8Array} buffer Destination buffer
		 * @param {number} offset Destination offset
		 * @returns {number} Number of bytes written
		 * @throws {Error} If encoding is invalid
		 */
		base64.decode = function decode(string, buffer, offset) {
		    var start = offset;
		    var j = 0, // goto index
		        t;     // temporary
		    for (var i = 0; i < string.length;) {
		        var c = string.charCodeAt(i++);
		        if (c === 61 && j > 1)
		            break;
		        if ((c = s64[c]) === undefined)
		            throw Error(invalidEncoding);
		        switch (j) {
		            case 0:
		                t = c;
		                j = 1;
		                break;
		            case 1:
		                buffer[offset++] = t << 2 | (c & 48) >> 4;
		                t = c;
		                j = 2;
		                break;
		            case 2:
		                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
		                t = c;
		                j = 3;
		                break;
		            case 3:
		                buffer[offset++] = (t & 3) << 6 | c;
		                j = 0;
		                break;
		        }
		    }
		    if (j === 1)
		        throw Error(invalidEncoding);
		    return offset - start;
		};

		/**
		 * Tests if the specified string appears to be base64 encoded.
		 * @param {string} string String to test
		 * @returns {boolean} `true` if probably base64 encoded, otherwise false
		 */
		base64.test = function test(string) {
		    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
		}; 
	} (base64$2));
	return base64$2;
}

var eventemitter;
var hasRequiredEventemitter;

function requireEventemitter () {
	if (hasRequiredEventemitter) return eventemitter;
	hasRequiredEventemitter = 1;
	eventemitter = EventEmitter;

	/**
	 * Constructs a new event emitter instance.
	 * @classdesc A minimal event emitter.
	 * @memberof util
	 * @constructor
	 */
	function EventEmitter() {

	    /**
	     * Registered listeners.
	     * @type {Object.<string,*>}
	     * @private
	     */
	    this._listeners = {};
	}

	/**
	 * Registers an event listener.
	 * @param {string} evt Event name
	 * @param {function} fn Listener
	 * @param {*} [ctx] Listener context
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter.prototype.on = function on(evt, fn, ctx) {
	    (this._listeners[evt] || (this._listeners[evt] = [])).push({
	        fn  : fn,
	        ctx : ctx || this
	    });
	    return this;
	};

	/**
	 * Removes an event listener or any matching listeners if arguments are omitted.
	 * @param {string} [evt] Event name. Removes all listeners if omitted.
	 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter.prototype.off = function off(evt, fn) {
	    if (evt === undefined)
	        this._listeners = {};
	    else {
	        if (fn === undefined)
	            this._listeners[evt] = [];
	        else {
	            var listeners = this._listeners[evt];
	            for (var i = 0; i < listeners.length;)
	                if (listeners[i].fn === fn)
	                    listeners.splice(i, 1);
	                else
	                    ++i;
	        }
	    }
	    return this;
	};

	/**
	 * Emits an event by calling its listeners with the specified arguments.
	 * @param {string} evt Event name
	 * @param {...*} args Arguments
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter.prototype.emit = function emit(evt) {
	    var listeners = this._listeners[evt];
	    if (listeners) {
	        var args = [],
	            i = 1;
	        for (; i < arguments.length;)
	            args.push(arguments[i++]);
	        for (i = 0; i < listeners.length;)
	            listeners[i].fn.apply(listeners[i++].ctx, args);
	    }
	    return this;
	};
	return eventemitter;
}

var float;
var hasRequiredFloat;

function requireFloat () {
	if (hasRequiredFloat) return float;
	hasRequiredFloat = 1;

	float = factory(factory);

	/**
	 * Reads / writes floats / doubles from / to buffers.
	 * @name util.float
	 * @namespace
	 */

	/**
	 * Writes a 32 bit float to a buffer using little endian byte order.
	 * @name util.float.writeFloatLE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Writes a 32 bit float to a buffer using big endian byte order.
	 * @name util.float.writeFloatBE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Reads a 32 bit float from a buffer using little endian byte order.
	 * @name util.float.readFloatLE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Reads a 32 bit float from a buffer using big endian byte order.
	 * @name util.float.readFloatBE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Writes a 64 bit double to a buffer using little endian byte order.
	 * @name util.float.writeDoubleLE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Writes a 64 bit double to a buffer using big endian byte order.
	 * @name util.float.writeDoubleBE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Reads a 64 bit double from a buffer using little endian byte order.
	 * @name util.float.readDoubleLE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Reads a 64 bit double from a buffer using big endian byte order.
	 * @name util.float.readDoubleBE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	// Factory function for the purpose of node-based testing in modified global environments
	function factory(exports) {

	    // float: typed array
	    if (typeof Float32Array !== "undefined") (function() {

	        var f32 = new Float32Array([ -0 ]),
	            f8b = new Uint8Array(f32.buffer),
	            le  = f8b[3] === 128;

	        function writeFloat_f32_cpy(val, buf, pos) {
	            f32[0] = val;
	            buf[pos    ] = f8b[0];
	            buf[pos + 1] = f8b[1];
	            buf[pos + 2] = f8b[2];
	            buf[pos + 3] = f8b[3];
	        }

	        function writeFloat_f32_rev(val, buf, pos) {
	            f32[0] = val;
	            buf[pos    ] = f8b[3];
	            buf[pos + 1] = f8b[2];
	            buf[pos + 2] = f8b[1];
	            buf[pos + 3] = f8b[0];
	        }

	        /* istanbul ignore next */
	        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
	        /* istanbul ignore next */
	        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

	        function readFloat_f32_cpy(buf, pos) {
	            f8b[0] = buf[pos    ];
	            f8b[1] = buf[pos + 1];
	            f8b[2] = buf[pos + 2];
	            f8b[3] = buf[pos + 3];
	            return f32[0];
	        }

	        function readFloat_f32_rev(buf, pos) {
	            f8b[3] = buf[pos    ];
	            f8b[2] = buf[pos + 1];
	            f8b[1] = buf[pos + 2];
	            f8b[0] = buf[pos + 3];
	            return f32[0];
	        }

	        /* istanbul ignore next */
	        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
	        /* istanbul ignore next */
	        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

	    // float: ieee754
	    })(); else (function() {

	        function writeFloat_ieee754(writeUint, val, buf, pos) {
	            var sign = val < 0 ? 1 : 0;
	            if (sign)
	                val = -val;
	            if (val === 0)
	                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
	            else if (isNaN(val))
	                writeUint(2143289344, buf, pos);
	            else if (val > 3.4028234663852886e+38) // +-Infinity
	                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
	            else if (val < 1.1754943508222875e-38) // denormal
	                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
	            else {
	                var exponent = Math.floor(Math.log(val) / Math.LN2),
	                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
	                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
	            }
	        }

	        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
	        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

	        function readFloat_ieee754(readUint, buf, pos) {
	            var uint = readUint(buf, pos),
	                sign = (uint >> 31) * 2 + 1,
	                exponent = uint >>> 23 & 255,
	                mantissa = uint & 8388607;
	            return exponent === 255
	                ? mantissa
	                ? NaN
	                : sign * Infinity
	                : exponent === 0 // denormal
	                ? sign * 1.401298464324817e-45 * mantissa
	                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
	        }

	        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
	        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

	    })();

	    // double: typed array
	    if (typeof Float64Array !== "undefined") (function() {

	        var f64 = new Float64Array([-0]),
	            f8b = new Uint8Array(f64.buffer),
	            le  = f8b[7] === 128;

	        function writeDouble_f64_cpy(val, buf, pos) {
	            f64[0] = val;
	            buf[pos    ] = f8b[0];
	            buf[pos + 1] = f8b[1];
	            buf[pos + 2] = f8b[2];
	            buf[pos + 3] = f8b[3];
	            buf[pos + 4] = f8b[4];
	            buf[pos + 5] = f8b[5];
	            buf[pos + 6] = f8b[6];
	            buf[pos + 7] = f8b[7];
	        }

	        function writeDouble_f64_rev(val, buf, pos) {
	            f64[0] = val;
	            buf[pos    ] = f8b[7];
	            buf[pos + 1] = f8b[6];
	            buf[pos + 2] = f8b[5];
	            buf[pos + 3] = f8b[4];
	            buf[pos + 4] = f8b[3];
	            buf[pos + 5] = f8b[2];
	            buf[pos + 6] = f8b[1];
	            buf[pos + 7] = f8b[0];
	        }

	        /* istanbul ignore next */
	        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
	        /* istanbul ignore next */
	        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

	        function readDouble_f64_cpy(buf, pos) {
	            f8b[0] = buf[pos    ];
	            f8b[1] = buf[pos + 1];
	            f8b[2] = buf[pos + 2];
	            f8b[3] = buf[pos + 3];
	            f8b[4] = buf[pos + 4];
	            f8b[5] = buf[pos + 5];
	            f8b[6] = buf[pos + 6];
	            f8b[7] = buf[pos + 7];
	            return f64[0];
	        }

	        function readDouble_f64_rev(buf, pos) {
	            f8b[7] = buf[pos    ];
	            f8b[6] = buf[pos + 1];
	            f8b[5] = buf[pos + 2];
	            f8b[4] = buf[pos + 3];
	            f8b[3] = buf[pos + 4];
	            f8b[2] = buf[pos + 5];
	            f8b[1] = buf[pos + 6];
	            f8b[0] = buf[pos + 7];
	            return f64[0];
	        }

	        /* istanbul ignore next */
	        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
	        /* istanbul ignore next */
	        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

	    // double: ieee754
	    })(); else (function() {

	        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
	            var sign = val < 0 ? 1 : 0;
	            if (sign)
	                val = -val;
	            if (val === 0) {
	                writeUint(0, buf, pos + off0);
	                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
	            } else if (isNaN(val)) {
	                writeUint(0, buf, pos + off0);
	                writeUint(2146959360, buf, pos + off1);
	            } else if (val > 1.7976931348623157e+308) { // +-Infinity
	                writeUint(0, buf, pos + off0);
	                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
	            } else {
	                var mantissa;
	                if (val < 2.2250738585072014e-308) { // denormal
	                    mantissa = val / 5e-324;
	                    writeUint(mantissa >>> 0, buf, pos + off0);
	                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
	                } else {
	                    var exponent = Math.floor(Math.log(val) / Math.LN2);
	                    if (exponent === 1024)
	                        exponent = 1023;
	                    mantissa = val * Math.pow(2, -exponent);
	                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
	                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
	                }
	            }
	        }

	        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
	        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

	        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
	            var lo = readUint(buf, pos + off0),
	                hi = readUint(buf, pos + off1);
	            var sign = (hi >> 31) * 2 + 1,
	                exponent = hi >>> 20 & 2047,
	                mantissa = 4294967296 * (hi & 1048575) + lo;
	            return exponent === 2047
	                ? mantissa
	                ? NaN
	                : sign * Infinity
	                : exponent === 0 // denormal
	                ? sign * 5e-324 * mantissa
	                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
	        }

	        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
	        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

	    })();

	    return exports;
	}

	// uint helpers

	function writeUintLE(val, buf, pos) {
	    buf[pos    ] =  val        & 255;
	    buf[pos + 1] =  val >>> 8  & 255;
	    buf[pos + 2] =  val >>> 16 & 255;
	    buf[pos + 3] =  val >>> 24;
	}

	function writeUintBE(val, buf, pos) {
	    buf[pos    ] =  val >>> 24;
	    buf[pos + 1] =  val >>> 16 & 255;
	    buf[pos + 2] =  val >>> 8  & 255;
	    buf[pos + 3] =  val        & 255;
	}

	function readUintLE(buf, pos) {
	    return (buf[pos    ]
	          | buf[pos + 1] << 8
	          | buf[pos + 2] << 16
	          | buf[pos + 3] << 24) >>> 0;
	}

	function readUintBE(buf, pos) {
	    return (buf[pos    ] << 24
	          | buf[pos + 1] << 16
	          | buf[pos + 2] << 8
	          | buf[pos + 3]) >>> 0;
	}
	return float;
}

var inquire_1;
var hasRequiredInquire;

function requireInquire () {
	if (hasRequiredInquire) return inquire_1;
	hasRequiredInquire = 1;
	inquire_1 = inquire;

	/**
	 * Requires a module only if available.
	 * @memberof util
	 * @param {string} moduleName Module to require
	 * @returns {?Object} Required module if available and not empty, otherwise `null`
	 */
	function inquire(moduleName) {
	    try {
	        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
	        if (mod && (mod.length || Object.keys(mod).length))
	            return mod;
	    } catch (e) {} // eslint-disable-line no-empty
	    return null;
	}
	return inquire_1;
}

var utf8$3 = {};

var hasRequiredUtf8;

function requireUtf8 () {
	if (hasRequiredUtf8) return utf8$3;
	hasRequiredUtf8 = 1;
	(function (exports) {

		/**
		 * A minimal UTF8 implementation for number arrays.
		 * @memberof util
		 * @namespace
		 */
		var utf8 = exports;

		/**
		 * Calculates the UTF8 byte length of a string.
		 * @param {string} string String
		 * @returns {number} Byte length
		 */
		utf8.length = function utf8_length(string) {
		    var len = 0,
		        c = 0;
		    for (var i = 0; i < string.length; ++i) {
		        c = string.charCodeAt(i);
		        if (c < 128)
		            len += 1;
		        else if (c < 2048)
		            len += 2;
		        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
		            ++i;
		            len += 4;
		        } else
		            len += 3;
		    }
		    return len;
		};

		/**
		 * Reads UTF8 bytes as a string.
		 * @param {Uint8Array} buffer Source buffer
		 * @param {number} start Source start
		 * @param {number} end Source end
		 * @returns {string} String read
		 */
		utf8.read = function utf8_read(buffer, start, end) {
		    var len = end - start;
		    if (len < 1)
		        return "";
		    var parts = null,
		        chunk = [],
		        i = 0, // char offset
		        t;     // temporary
		    while (start < end) {
		        t = buffer[start++];
		        if (t < 128)
		            chunk[i++] = t;
		        else if (t > 191 && t < 224)
		            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
		        else if (t > 239 && t < 365) {
		            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
		            chunk[i++] = 0xD800 + (t >> 10);
		            chunk[i++] = 0xDC00 + (t & 1023);
		        } else
		            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
		        if (i > 8191) {
		            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
		            i = 0;
		        }
		    }
		    if (parts) {
		        if (i)
		            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
		        return parts.join("");
		    }
		    return String.fromCharCode.apply(String, chunk.slice(0, i));
		};

		/**
		 * Writes a string as UTF8 bytes.
		 * @param {string} string Source string
		 * @param {Uint8Array} buffer Destination buffer
		 * @param {number} offset Destination offset
		 * @returns {number} Bytes written
		 */
		utf8.write = function utf8_write(string, buffer, offset) {
		    var start = offset,
		        c1, // character 1
		        c2; // character 2
		    for (var i = 0; i < string.length; ++i) {
		        c1 = string.charCodeAt(i);
		        if (c1 < 128) {
		            buffer[offset++] = c1;
		        } else if (c1 < 2048) {
		            buffer[offset++] = c1 >> 6       | 192;
		            buffer[offset++] = c1       & 63 | 128;
		        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
		            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
		            ++i;
		            buffer[offset++] = c1 >> 18      | 240;
		            buffer[offset++] = c1 >> 12 & 63 | 128;
		            buffer[offset++] = c1 >> 6  & 63 | 128;
		            buffer[offset++] = c1       & 63 | 128;
		        } else {
		            buffer[offset++] = c1 >> 12      | 224;
		            buffer[offset++] = c1 >> 6  & 63 | 128;
		            buffer[offset++] = c1       & 63 | 128;
		        }
		    }
		    return offset - start;
		}; 
	} (utf8$3));
	return utf8$3;
}

var pool_1;
var hasRequiredPool;

function requirePool () {
	if (hasRequiredPool) return pool_1;
	hasRequiredPool = 1;
	pool_1 = pool;

	/**
	 * An allocator as used by {@link util.pool}.
	 * @typedef PoolAllocator
	 * @type {function}
	 * @param {number} size Buffer size
	 * @returns {Uint8Array} Buffer
	 */

	/**
	 * A slicer as used by {@link util.pool}.
	 * @typedef PoolSlicer
	 * @type {function}
	 * @param {number} start Start offset
	 * @param {number} end End offset
	 * @returns {Uint8Array} Buffer slice
	 * @this {Uint8Array}
	 */

	/**
	 * A general purpose buffer pool.
	 * @memberof util
	 * @function
	 * @param {PoolAllocator} alloc Allocator
	 * @param {PoolSlicer} slice Slicer
	 * @param {number} [size=8192] Slab size
	 * @returns {PoolAllocator} Pooled allocator
	 */
	function pool(alloc, slice, size) {
	    var SIZE   = size || 8192;
	    var MAX    = SIZE >>> 1;
	    var slab   = null;
	    var offset = SIZE;
	    return function pool_alloc(size) {
	        if (size < 1 || size > MAX)
	            return alloc(size);
	        if (offset + size > SIZE) {
	            slab = alloc(SIZE);
	            offset = 0;
	        }
	        var buf = slice.call(slab, offset, offset += size);
	        if (offset & 7) // align to 32 bit
	            offset = (offset | 7) + 1;
	        return buf;
	    };
	}
	return pool_1;
}

var longbits;
var hasRequiredLongbits;

function requireLongbits () {
	if (hasRequiredLongbits) return longbits;
	hasRequiredLongbits = 1;
	longbits = LongBits;

	var util = requireMinimal();

	/**
	 * Constructs new long bits.
	 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
	 * @memberof util
	 * @constructor
	 * @param {number} lo Low 32 bits, unsigned
	 * @param {number} hi High 32 bits, unsigned
	 */
	function LongBits(lo, hi) {

	    // note that the casts below are theoretically unnecessary as of today, but older statically
	    // generated converter code might still call the ctor with signed 32bits. kept for compat.

	    /**
	     * Low bits.
	     * @type {number}
	     */
	    this.lo = lo >>> 0;

	    /**
	     * High bits.
	     * @type {number}
	     */
	    this.hi = hi >>> 0;
	}

	/**
	 * Zero bits.
	 * @memberof util.LongBits
	 * @type {util.LongBits}
	 */
	var zero = LongBits.zero = new LongBits(0, 0);

	zero.toNumber = function() { return 0; };
	zero.zzEncode = zero.zzDecode = function() { return this; };
	zero.length = function() { return 1; };

	/**
	 * Zero hash.
	 * @memberof util.LongBits
	 * @type {string}
	 */
	var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

	/**
	 * Constructs new long bits from the specified number.
	 * @param {number} value Value
	 * @returns {util.LongBits} Instance
	 */
	LongBits.fromNumber = function fromNumber(value) {
	    if (value === 0)
	        return zero;
	    var sign = value < 0;
	    if (sign)
	        value = -value;
	    var lo = value >>> 0,
	        hi = (value - lo) / 4294967296 >>> 0;
	    if (sign) {
	        hi = ~hi >>> 0;
	        lo = ~lo >>> 0;
	        if (++lo > 4294967295) {
	            lo = 0;
	            if (++hi > 4294967295)
	                hi = 0;
	        }
	    }
	    return new LongBits(lo, hi);
	};

	/**
	 * Constructs new long bits from a number, long or string.
	 * @param {Long|number|string} value Value
	 * @returns {util.LongBits} Instance
	 */
	LongBits.from = function from(value) {
	    if (typeof value === "number")
	        return LongBits.fromNumber(value);
	    if (util.isString(value)) {
	        /* istanbul ignore else */
	        if (util.Long)
	            value = util.Long.fromString(value);
	        else
	            return LongBits.fromNumber(parseInt(value, 10));
	    }
	    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
	};

	/**
	 * Converts this long bits to a possibly unsafe JavaScript number.
	 * @param {boolean} [unsigned=false] Whether unsigned or not
	 * @returns {number} Possibly unsafe number
	 */
	LongBits.prototype.toNumber = function toNumber(unsigned) {
	    if (!unsigned && this.hi >>> 31) {
	        var lo = ~this.lo + 1 >>> 0,
	            hi = ~this.hi     >>> 0;
	        if (!lo)
	            hi = hi + 1 >>> 0;
	        return -(lo + hi * 4294967296);
	    }
	    return this.lo + this.hi * 4294967296;
	};

	/**
	 * Converts this long bits to a long.
	 * @param {boolean} [unsigned=false] Whether unsigned or not
	 * @returns {Long} Long
	 */
	LongBits.prototype.toLong = function toLong(unsigned) {
	    return util.Long
	        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
	        /* istanbul ignore next */
	        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
	};

	var charCodeAt = String.prototype.charCodeAt;

	/**
	 * Constructs new long bits from the specified 8 characters long hash.
	 * @param {string} hash Hash
	 * @returns {util.LongBits} Bits
	 */
	LongBits.fromHash = function fromHash(hash) {
	    if (hash === zeroHash)
	        return zero;
	    return new LongBits(
	        ( charCodeAt.call(hash, 0)
	        | charCodeAt.call(hash, 1) << 8
	        | charCodeAt.call(hash, 2) << 16
	        | charCodeAt.call(hash, 3) << 24) >>> 0
	    ,
	        ( charCodeAt.call(hash, 4)
	        | charCodeAt.call(hash, 5) << 8
	        | charCodeAt.call(hash, 6) << 16
	        | charCodeAt.call(hash, 7) << 24) >>> 0
	    );
	};

	/**
	 * Converts this long bits to a 8 characters long hash.
	 * @returns {string} Hash
	 */
	LongBits.prototype.toHash = function toHash() {
	    return String.fromCharCode(
	        this.lo        & 255,
	        this.lo >>> 8  & 255,
	        this.lo >>> 16 & 255,
	        this.lo >>> 24      ,
	        this.hi        & 255,
	        this.hi >>> 8  & 255,
	        this.hi >>> 16 & 255,
	        this.hi >>> 24
	    );
	};

	/**
	 * Zig-zag encodes this long bits.
	 * @returns {util.LongBits} `this`
	 */
	LongBits.prototype.zzEncode = function zzEncode() {
	    var mask =   this.hi >> 31;
	    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
	    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
	    return this;
	};

	/**
	 * Zig-zag decodes this long bits.
	 * @returns {util.LongBits} `this`
	 */
	LongBits.prototype.zzDecode = function zzDecode() {
	    var mask = -(this.lo & 1);
	    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
	    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
	    return this;
	};

	/**
	 * Calculates the length of this longbits when encoded as a varint.
	 * @returns {number} Length
	 */
	LongBits.prototype.length = function length() {
	    var part0 =  this.lo,
	        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
	        part2 =  this.hi >>> 24;
	    return part2 === 0
	         ? part1 === 0
	           ? part0 < 16384
	             ? part0 < 128 ? 1 : 2
	             : part0 < 2097152 ? 3 : 4
	           : part1 < 16384
	             ? part1 < 128 ? 5 : 6
	             : part1 < 2097152 ? 7 : 8
	         : part2 < 128 ? 9 : 10;
	};
	return longbits;
}

var hasRequiredMinimal;

function requireMinimal () {
	if (hasRequiredMinimal) return minimal$1;
	hasRequiredMinimal = 1;
	(function (exports) {
		var util = exports;

		// used to return a Promise where callback is omitted
		util.asPromise = requireAspromise();

		// converts to / from base64 encoded strings
		util.base64 = requireBase64();

		// base class of rpc.Service
		util.EventEmitter = requireEventemitter();

		// float handling accross browsers
		util.float = requireFloat();

		// requires modules optionally and hides the call from bundlers
		util.inquire = requireInquire();

		// converts to / from utf8 encoded strings
		util.utf8 = requireUtf8();

		// provides a node-like buffer pool in the browser
		util.pool = requirePool();

		// utility to work with the low and high bits of a 64 bit value
		util.LongBits = requireLongbits();

		/**
		 * Whether running within node or not.
		 * @memberof util
		 * @type {boolean}
		 */
		util.isNode = Boolean(typeof commonjsGlobal !== "undefined"
		                   && commonjsGlobal
		                   && commonjsGlobal.process
		                   && commonjsGlobal.process.versions
		                   && commonjsGlobal.process.versions.node);

		/**
		 * Global object reference.
		 * @memberof util
		 * @type {Object}
		 */
		util.global = util.isNode && commonjsGlobal
		           || typeof window !== "undefined" && window
		           || typeof self   !== "undefined" && self
		           || commonjsGlobal; // eslint-disable-line no-invalid-this

		/**
		 * An immuable empty array.
		 * @memberof util
		 * @type {Array.<*>}
		 * @const
		 */
		util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

		/**
		 * An immutable empty object.
		 * @type {Object}
		 * @const
		 */
		util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

		/**
		 * Tests if the specified value is an integer.
		 * @function
		 * @param {*} value Value to test
		 * @returns {boolean} `true` if the value is an integer
		 */
		util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
		    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
		};

		/**
		 * Tests if the specified value is a string.
		 * @param {*} value Value to test
		 * @returns {boolean} `true` if the value is a string
		 */
		util.isString = function isString(value) {
		    return typeof value === "string" || value instanceof String;
		};

		/**
		 * Tests if the specified value is a non-null object.
		 * @param {*} value Value to test
		 * @returns {boolean} `true` if the value is a non-null object
		 */
		util.isObject = function isObject(value) {
		    return value && typeof value === "object";
		};

		/**
		 * Checks if a property on a message is considered to be present.
		 * This is an alias of {@link util.isSet}.
		 * @function
		 * @param {Object} obj Plain object or message instance
		 * @param {string} prop Property name
		 * @returns {boolean} `true` if considered to be present, otherwise `false`
		 */
		util.isset =

		/**
		 * Checks if a property on a message is considered to be present.
		 * @param {Object} obj Plain object or message instance
		 * @param {string} prop Property name
		 * @returns {boolean} `true` if considered to be present, otherwise `false`
		 */
		util.isSet = function isSet(obj, prop) {
		    var value = obj[prop];
		    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
		        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
		    return false;
		};

		/**
		 * Any compatible Buffer instance.
		 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
		 * @interface Buffer
		 * @extends Uint8Array
		 */

		/**
		 * Node's Buffer class if available.
		 * @type {Constructor<Buffer>}
		 */
		util.Buffer = (function() {
		    try {
		        var Buffer = util.inquire("buffer").Buffer;
		        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
		        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
		    } catch (e) {
		        /* istanbul ignore next */
		        return null;
		    }
		})();

		// Internal alias of or polyfull for Buffer.from.
		util._Buffer_from = null;

		// Internal alias of or polyfill for Buffer.allocUnsafe.
		util._Buffer_allocUnsafe = null;

		/**
		 * Creates a new buffer of whatever type supported by the environment.
		 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
		 * @returns {Uint8Array|Buffer} Buffer
		 */
		util.newBuffer = function newBuffer(sizeOrArray) {
		    /* istanbul ignore next */
		    return typeof sizeOrArray === "number"
		        ? util.Buffer
		            ? util._Buffer_allocUnsafe(sizeOrArray)
		            : new util.Array(sizeOrArray)
		        : util.Buffer
		            ? util._Buffer_from(sizeOrArray)
		            : typeof Uint8Array === "undefined"
		                ? sizeOrArray
		                : new Uint8Array(sizeOrArray);
		};

		/**
		 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
		 * @type {Constructor<Uint8Array>}
		 */
		util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

		/**
		 * Any compatible Long instance.
		 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
		 * @interface Long
		 * @property {number} low Low bits
		 * @property {number} high High bits
		 * @property {boolean} unsigned Whether unsigned or not
		 */

		/**
		 * Long.js's Long class if available.
		 * @type {Constructor<Long>}
		 */
		util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
		         || /* istanbul ignore next */ util.global.Long
		         || util.inquire("long");

		/**
		 * Regular expression used to verify 2 bit (`bool`) map keys.
		 * @type {RegExp}
		 * @const
		 */
		util.key2Re = /^true|false|0|1$/;

		/**
		 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
		 * @type {RegExp}
		 * @const
		 */
		util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

		/**
		 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
		 * @type {RegExp}
		 * @const
		 */
		util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

		/**
		 * Converts a number or long to an 8 characters long hash string.
		 * @param {Long|number} value Value to convert
		 * @returns {string} Hash
		 */
		util.longToHash = function longToHash(value) {
		    return value
		        ? util.LongBits.from(value).toHash()
		        : util.LongBits.zeroHash;
		};

		/**
		 * Converts an 8 characters long hash string to a long or number.
		 * @param {string} hash Hash
		 * @param {boolean} [unsigned=false] Whether unsigned or not
		 * @returns {Long|number} Original value
		 */
		util.longFromHash = function longFromHash(hash, unsigned) {
		    var bits = util.LongBits.fromHash(hash);
		    if (util.Long)
		        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
		    return bits.toNumber(Boolean(unsigned));
		};

		/**
		 * Merges the properties of the source object into the destination object.
		 * @memberof util
		 * @param {Object.<string,*>} dst Destination object
		 * @param {Object.<string,*>} src Source object
		 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
		 * @returns {Object.<string,*>} Destination object
		 */
		function merge(dst, src, ifNotSet) { // used by converters
		    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
		        if (dst[keys[i]] === undefined || !ifNotSet)
		            dst[keys[i]] = src[keys[i]];
		    return dst;
		}

		util.merge = merge;

		/**
		 * Converts the first character of a string to lower case.
		 * @param {string} str String to convert
		 * @returns {string} Converted string
		 */
		util.lcFirst = function lcFirst(str) {
		    return str.charAt(0).toLowerCase() + str.substring(1);
		};

		/**
		 * Creates a custom error constructor.
		 * @memberof util
		 * @param {string} name Error name
		 * @returns {Constructor<Error>} Custom error constructor
		 */
		function newError(name) {

		    function CustomError(message, properties) {

		        if (!(this instanceof CustomError))
		            return new CustomError(message, properties);

		        // Error.call(this, message);
		        // ^ just returns a new error instance because the ctor can be called as a function

		        Object.defineProperty(this, "message", { get: function() { return message; } });

		        /* istanbul ignore next */
		        if (Error.captureStackTrace) // node
		            Error.captureStackTrace(this, CustomError);
		        else
		            Object.defineProperty(this, "stack", { value: new Error().stack || "" });

		        if (properties)
		            merge(this, properties);
		    }

		    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

		    Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

		    CustomError.prototype.toString = function toString() {
		        return this.name + ": " + this.message;
		    };

		    return CustomError;
		}

		util.newError = newError;

		/**
		 * Constructs a new protocol error.
		 * @classdesc Error subclass indicating a protocol specifc error.
		 * @memberof util
		 * @extends Error
		 * @template T extends Message<T>
		 * @constructor
		 * @param {string} message Error message
		 * @param {Object.<string,*>} [properties] Additional properties
		 * @example
		 * try {
		 *     MyMessage.decode(someBuffer); // throws if required fields are missing
		 * } catch (e) {
		 *     if (e instanceof ProtocolError && e.instance)
		 *         console.log("decoded so far: " + JSON.stringify(e.instance));
		 * }
		 */
		util.ProtocolError = newError("ProtocolError");

		/**
		 * So far decoded message instance.
		 * @name util.ProtocolError#instance
		 * @type {Message<T>}
		 */

		/**
		 * A OneOf getter as returned by {@link util.oneOfGetter}.
		 * @typedef OneOfGetter
		 * @type {function}
		 * @returns {string|undefined} Set field name, if any
		 */

		/**
		 * Builds a getter for a oneof's present field name.
		 * @param {string[]} fieldNames Field names
		 * @returns {OneOfGetter} Unbound getter
		 */
		util.oneOfGetter = function getOneOf(fieldNames) {
		    var fieldMap = {};
		    for (var i = 0; i < fieldNames.length; ++i)
		        fieldMap[fieldNames[i]] = 1;

		    /**
		     * @returns {string|undefined} Set field name, if any
		     * @this Object
		     * @ignore
		     */
		    return function() { // eslint-disable-line consistent-return
		        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
		            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
		                return keys[i];
		    };
		};

		/**
		 * A OneOf setter as returned by {@link util.oneOfSetter}.
		 * @typedef OneOfSetter
		 * @type {function}
		 * @param {string|undefined} value Field name
		 * @returns {undefined}
		 */

		/**
		 * Builds a setter for a oneof's present field name.
		 * @param {string[]} fieldNames Field names
		 * @returns {OneOfSetter} Unbound setter
		 */
		util.oneOfSetter = function setOneOf(fieldNames) {

		    /**
		     * @param {string} name Field name
		     * @returns {undefined}
		     * @this Object
		     * @ignore
		     */
		    return function(name) {
		        for (var i = 0; i < fieldNames.length; ++i)
		            if (fieldNames[i] !== name)
		                delete this[fieldNames[i]];
		    };
		};

		/**
		 * Default conversion options used for {@link Message#toJSON} implementations.
		 *
		 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
		 *
		 * - Longs become strings
		 * - Enums become string keys
		 * - Bytes become base64 encoded strings
		 * - (Sub-)Messages become plain objects
		 * - Maps become plain objects with all string keys
		 * - Repeated fields become arrays
		 * - NaN and Infinity for float and double fields become strings
		 *
		 * @type {IConversionOptions}
		 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
		 */
		util.toJSONOptions = {
		    longs: String,
		    enums: String,
		    bytes: String,
		    json: true
		};

		// Sets up buffer utility according to the environment (called in index-minimal)
		util._configure = function() {
		    var Buffer = util.Buffer;
		    /* istanbul ignore if */
		    if (!Buffer) {
		        util._Buffer_from = util._Buffer_allocUnsafe = null;
		        return;
		    }
		    // because node 4.x buffers are incompatible & immutable
		    // see: https://github.com/dcodeIO/protobuf.js/pull/665
		    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
		        /* istanbul ignore next */
		        function Buffer_from(value, encoding) {
		            return new Buffer(value, encoding);
		        };
		    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
		        /* istanbul ignore next */
		        function Buffer_allocUnsafe(size) {
		            return new Buffer(size);
		        };
		}; 
	} (minimal$1));
	return minimal$1;
}

var writer = Writer$1;

var util$5      = requireMinimal();

var BufferWriter$1; // cyclic

var LongBits$1  = util$5.LongBits,
    base64$1    = util$5.base64,
    utf8$2      = util$5.utf8;

/**
 * Constructs a new writer operation instance.
 * @classdesc Scheduled writer operation.
 * @constructor
 * @param {function(*, Uint8Array, number)} fn Function to call
 * @param {number} len Value byte length
 * @param {*} val Value to write
 * @ignore
 */
function Op(fn, len, val) {

    /**
     * Function to call.
     * @type {function(Uint8Array, number, *)}
     */
    this.fn = fn;

    /**
     * Value byte length.
     * @type {number}
     */
    this.len = len;

    /**
     * Next operation.
     * @type {Writer.Op|undefined}
     */
    this.next = undefined;

    /**
     * Value to write.
     * @type {*}
     */
    this.val = val; // type varies
}

/* istanbul ignore next */
function noop$1() {} // eslint-disable-line no-empty-function

/**
 * Constructs a new writer state instance.
 * @classdesc Copied writer state.
 * @memberof Writer
 * @constructor
 * @param {Writer} writer Writer to copy state from
 * @ignore
 */
function State(writer) {

    /**
     * Current head.
     * @type {Writer.Op}
     */
    this.head = writer.head;

    /**
     * Current tail.
     * @type {Writer.Op}
     */
    this.tail = writer.tail;

    /**
     * Current buffer length.
     * @type {number}
     */
    this.len = writer.len;

    /**
     * Next state.
     * @type {State|null}
     */
    this.next = writer.states;
}

/**
 * Constructs a new writer instance.
 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 */
function Writer$1() {

    /**
     * Current length.
     * @type {number}
     */
    this.len = 0;

    /**
     * Operations head.
     * @type {Object}
     */
    this.head = new Op(noop$1, 0, 0);

    /**
     * Operations tail
     * @type {Object}
     */
    this.tail = this.head;

    /**
     * Linked forked states.
     * @type {Object|null}
     */
    this.states = null;

    // When a value is written, the writer calculates its byte length and puts it into a linked
    // list of operations to perform when finish() is called. This both allows us to allocate
    // buffers of the exact required size and reduces the amount of work we have to do compared
    // to first calculating over objects and then encoding over objects. In our case, the encoding
    // part is just a linked list walk calling operations with already prepared values.
}

var create$1 = function create() {
    return util$5.Buffer
        ? function create_buffer_setup() {
            return (Writer$1.create = function create_buffer() {
                return new BufferWriter$1();
            })();
        }
        /* istanbul ignore next */
        : function create_array() {
            return new Writer$1();
        };
};

/**
 * Creates a new writer.
 * @function
 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
 */
Writer$1.create = create$1();

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */
Writer$1.alloc = function alloc(size) {
    return new util$5.Array(size);
};

// Use Uint8Array buffer pool in the browser, just like node does with buffers
/* istanbul ignore else */
if (util$5.Array !== Array)
    Writer$1.alloc = util$5.pool(Writer$1.alloc, util$5.Array.prototype.subarray);

/**
 * Pushes a new operation to the queue.
 * @param {function(Uint8Array, number, *)} fn Function to call
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @returns {Writer} `this`
 * @private
 */
Writer$1.prototype._push = function push(fn, len, val) {
    this.tail = this.tail.next = new Op(fn, len, val);
    this.len += len;
    return this;
};

function writeByte(val, buf, pos) {
    buf[pos] = val & 255;
}

function writeVarint32(val, buf, pos) {
    while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
    }
    buf[pos] = val;
}

/**
 * Constructs a new varint writer operation instance.
 * @classdesc Scheduled varint writer operation.
 * @extends Op
 * @constructor
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @ignore
 */
function VarintOp(len, val) {
    this.len = len;
    this.next = undefined;
    this.val = val;
}

VarintOp.prototype = Object.create(Op.prototype);
VarintOp.prototype.fn = writeVarint32;

/**
 * Writes an unsigned 32 bit value as a varint.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer$1.prototype.uint32 = function write_uint32(value) {
    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
    // uint32 is by far the most frequently used operation and benefits significantly from this.
    this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0)
                < 128       ? 1
        : value < 16384     ? 2
        : value < 2097152   ? 3
        : value < 268435456 ? 4
        :                     5,
    value)).len;
    return this;
};

/**
 * Writes a signed 32 bit value as a varint.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer$1.prototype.int32 = function write_int32(value) {
    return value < 0
        ? this._push(writeVarint64, 10, LongBits$1.fromNumber(value)) // 10 bytes per spec
        : this.uint32(value);
};

/**
 * Writes a 32 bit value as a varint, zig-zag encoded.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer$1.prototype.sint32 = function write_sint32(value) {
    return this.uint32((value << 1 ^ value >> 31) >>> 0);
};

function writeVarint64(val, buf, pos) {
    while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
    }
    while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
    }
    buf[pos++] = val.lo;
}

/**
 * Writes an unsigned 64 bit value as a varint.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer$1.prototype.uint64 = function write_uint64(value) {
    var bits = LongBits$1.from(value);
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a signed 64 bit value as a varint.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer$1.prototype.int64 = Writer$1.prototype.uint64;

/**
 * Writes a signed 64 bit value as a varint, zig-zag encoded.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer$1.prototype.sint64 = function write_sint64(value) {
    var bits = LongBits$1.from(value).zzEncode();
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a boolish value as a varint.
 * @param {boolean} value Value to write
 * @returns {Writer} `this`
 */
Writer$1.prototype.bool = function write_bool(value) {
    return this._push(writeByte, 1, value ? 1 : 0);
};

function writeFixed32(val, buf, pos) {
    buf[pos    ] =  val         & 255;
    buf[pos + 1] =  val >>> 8   & 255;
    buf[pos + 2] =  val >>> 16  & 255;
    buf[pos + 3] =  val >>> 24;
}

/**
 * Writes an unsigned 32 bit value as fixed 32 bits.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer$1.prototype.fixed32 = function write_fixed32(value) {
    return this._push(writeFixed32, 4, value >>> 0);
};

/**
 * Writes a signed 32 bit value as fixed 32 bits.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer$1.prototype.sfixed32 = Writer$1.prototype.fixed32;

/**
 * Writes an unsigned 64 bit value as fixed 64 bits.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer$1.prototype.fixed64 = function write_fixed64(value) {
    var bits = LongBits$1.from(value);
    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
};

/**
 * Writes a signed 64 bit value as fixed 64 bits.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer$1.prototype.sfixed64 = Writer$1.prototype.fixed64;

/**
 * Writes a float (32 bit).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer$1.prototype.float = function write_float(value) {
    return this._push(util$5.float.writeFloatLE, 4, value);
};

/**
 * Writes a double (64 bit float).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer$1.prototype.double = function write_double(value) {
    return this._push(util$5.float.writeDoubleLE, 8, value);
};

var writeBytes = util$5.Array.prototype.set
    ? function writeBytes_set(val, buf, pos) {
        buf.set(val, pos); // also works for plain array values
    }
    /* istanbul ignore next */
    : function writeBytes_for(val, buf, pos) {
        for (var i = 0; i < val.length; ++i)
            buf[pos + i] = val[i];
    };

/**
 * Writes a sequence of bytes.
 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
 * @returns {Writer} `this`
 */
Writer$1.prototype.bytes = function write_bytes(value) {
    var len = value.length >>> 0;
    if (!len)
        return this._push(writeByte, 1, 0);
    if (util$5.isString(value)) {
        var buf = Writer$1.alloc(len = base64$1.length(value));
        base64$1.decode(value, buf, 0);
        value = buf;
    }
    return this.uint32(len)._push(writeBytes, len, value);
};

/**
 * Writes a string.
 * @param {string} value Value to write
 * @returns {Writer} `this`
 */
Writer$1.prototype.string = function write_string(value) {
    var len = utf8$2.length(value);
    return len
        ? this.uint32(len)._push(utf8$2.write, len, value)
        : this._push(writeByte, 1, 0);
};

/**
 * Forks this writer's state by pushing it to a stack.
 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
 * @returns {Writer} `this`
 */
Writer$1.prototype.fork = function fork() {
    this.states = new State(this);
    this.head = this.tail = new Op(noop$1, 0, 0);
    this.len = 0;
    return this;
};

/**
 * Resets this instance to the last state.
 * @returns {Writer} `this`
 */
Writer$1.prototype.reset = function reset() {
    if (this.states) {
        this.head   = this.states.head;
        this.tail   = this.states.tail;
        this.len    = this.states.len;
        this.states = this.states.next;
    } else {
        this.head = this.tail = new Op(noop$1, 0, 0);
        this.len  = 0;
    }
    return this;
};

/**
 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
 * @returns {Writer} `this`
 */
Writer$1.prototype.ldelim = function ldelim() {
    var head = this.head,
        tail = this.tail,
        len  = this.len;
    this.reset().uint32(len);
    if (len) {
        this.tail.next = head.next; // skip noop
        this.tail = tail;
        this.len += len;
    }
    return this;
};

/**
 * Finishes the write operation.
 * @returns {Uint8Array} Finished buffer
 */
Writer$1.prototype.finish = function finish() {
    var head = this.head.next, // skip noop
        buf  = this.constructor.alloc(this.len),
        pos  = 0;
    while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
    }
    // this.head = this.tail = null;
    return buf;
};

Writer$1._configure = function(BufferWriter_) {
    BufferWriter$1 = BufferWriter_;
    Writer$1.create = create$1();
    BufferWriter$1._configure();
};

var writer_buffer = BufferWriter;

// extends Writer
var Writer = writer;
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

var util$4 = requireMinimal();

/**
 * Constructs a new buffer writer instance.
 * @classdesc Wire format writer using node buffers.
 * @extends Writer
 * @constructor
 */
function BufferWriter() {
    Writer.call(this);
}

BufferWriter._configure = function () {
    /**
     * Allocates a buffer of the specified size.
     * @function
     * @param {number} size Buffer size
     * @returns {Buffer} Buffer
     */
    BufferWriter.alloc = util$4._Buffer_allocUnsafe;

    BufferWriter.writeBytesBuffer = util$4.Buffer && util$4.Buffer.prototype instanceof Uint8Array && util$4.Buffer.prototype.set.name === "set"
        ? function writeBytesBuffer_set(val, buf, pos) {
          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
          // also works for plain array values
        }
        /* istanbul ignore next */
        : function writeBytesBuffer_copy(val, buf, pos) {
          if (val.copy) // Buffer values
            val.copy(buf, pos, 0, val.length);
          else for (var i = 0; i < val.length;) // plain array values
            buf[pos++] = val[i++];
        };
};


/**
 * @override
 */
BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
    if (util$4.isString(value))
        value = util$4._Buffer_from(value, "base64");
    var len = value.length >>> 0;
    this.uint32(len);
    if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
    return this;
};

function writeStringBuffer(val, buf, pos) {
    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
        util$4.utf8.write(val, buf, pos);
    else if (buf.utf8Write)
        buf.utf8Write(val, pos);
    else
        buf.write(val, pos);
}

/**
 * @override
 */
BufferWriter.prototype.string = function write_string_buffer(value) {
    var len = util$4.Buffer.byteLength(value);
    this.uint32(len);
    if (len)
        this._push(writeStringBuffer, len, value);
    return this;
};


/**
 * Finishes the write operation.
 * @name BufferWriter#finish
 * @function
 * @returns {Buffer} Finished buffer
 */

BufferWriter._configure();

var reader = Reader$1;

var util$3      = requireMinimal();

var BufferReader$1; // cyclic

var LongBits  = util$3.LongBits,
    utf8$1      = util$3.utf8;

/* istanbul ignore next */
function indexOutOfRange(reader, writeLength) {
    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
}

/**
 * Constructs a new reader instance using the specified buffer.
 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 * @param {Uint8Array} buffer Buffer to read from
 */
function Reader$1(buffer) {

    /**
     * Read buffer.
     * @type {Uint8Array}
     */
    this.buf = buffer;

    /**
     * Read buffer position.
     * @type {number}
     */
    this.pos = 0;

    /**
     * Read buffer length.
     * @type {number}
     */
    this.len = buffer.length;
}

var create_array = typeof Uint8Array !== "undefined"
    ? function create_typed_array(buffer) {
        if (buffer instanceof Uint8Array || Array.isArray(buffer))
            return new Reader$1(buffer);
        throw Error("illegal buffer");
    }
    /* istanbul ignore next */
    : function create_array(buffer) {
        if (Array.isArray(buffer))
            return new Reader$1(buffer);
        throw Error("illegal buffer");
    };

var create = function create() {
    return util$3.Buffer
        ? function create_buffer_setup(buffer) {
            return (Reader$1.create = function create_buffer(buffer) {
                return util$3.Buffer.isBuffer(buffer)
                    ? new BufferReader$1(buffer)
                    /* istanbul ignore next */
                    : create_array(buffer);
            })(buffer);
        }
        /* istanbul ignore next */
        : create_array;
};

/**
 * Creates a new reader using the specified buffer.
 * @function
 * @param {Uint8Array|Buffer} buffer Buffer to read from
 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
 * @throws {Error} If `buffer` is not a valid buffer
 */
Reader$1.create = create();

Reader$1.prototype._slice = util$3.Array.prototype.subarray || /* istanbul ignore next */ util$3.Array.prototype.slice;

/**
 * Reads a varint as an unsigned 32 bit value.
 * @function
 * @returns {number} Value read
 */
Reader$1.prototype.uint32 = (function read_uint32_setup() {
    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
    return function read_uint32() {
        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

        /* istanbul ignore if */
        if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
        }
        return value;
    };
})();

/**
 * Reads a varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader$1.prototype.int32 = function read_int32() {
    return this.uint32() | 0;
};

/**
 * Reads a zig-zag encoded varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader$1.prototype.sint32 = function read_sint32() {
    var value = this.uint32();
    return value >>> 1 ^ -(value & 1) | 0;
};

/* eslint-disable no-invalid-this */

function readLongVarint() {
    // tends to deopt with local vars for octet etc.
    var bits = new LongBits(0, 0);
    var i = 0;
    if (this.len - this.pos > 4) { // fast route (lo)
        for (; i < 4; ++i) {
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 5th
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
        if (this.buf[this.pos++] < 128)
            return bits;
        i = 0;
    } else {
        for (; i < 3; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 1st..3th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 4th
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
    }
    if (this.len - this.pos > 4) { // fast route (hi)
        for (; i < 5; ++i) {
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    } else {
        for (; i < 5; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    }
    /* istanbul ignore next */
    throw Error("invalid varint encoding");
}

/* eslint-enable no-invalid-this */

/**
 * Reads a varint as a signed 64 bit value.
 * @name Reader#int64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as an unsigned 64 bit value.
 * @name Reader#uint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a zig-zag encoded varint as a signed 64 bit value.
 * @name Reader#sint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as a boolean.
 * @returns {boolean} Value read
 */
Reader$1.prototype.bool = function read_bool() {
    return this.uint32() !== 0;
};

function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
    return (buf[end - 4]
          | buf[end - 3] << 8
          | buf[end - 2] << 16
          | buf[end - 1] << 24) >>> 0;
}

/**
 * Reads fixed 32 bits as an unsigned 32 bit integer.
 * @returns {number} Value read
 */
Reader$1.prototype.fixed32 = function read_fixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4);
};

/**
 * Reads fixed 32 bits as a signed 32 bit integer.
 * @returns {number} Value read
 */
Reader$1.prototype.sfixed32 = function read_sfixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4) | 0;
};

/* eslint-disable no-invalid-this */

function readFixed64(/* this: Reader */) {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);

    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}

/* eslint-enable no-invalid-this */

/**
 * Reads fixed 64 bits.
 * @name Reader#fixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads zig-zag encoded fixed 64 bits.
 * @name Reader#sfixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a float (32 bit) as a number.
 * @function
 * @returns {number} Value read
 */
Reader$1.prototype.float = function read_float() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util$3.float.readFloatLE(this.buf, this.pos);
    this.pos += 4;
    return value;
};

/**
 * Reads a double (64 bit float) as a number.
 * @function
 * @returns {number} Value read
 */
Reader$1.prototype.double = function read_double() {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util$3.float.readDoubleLE(this.buf, this.pos);
    this.pos += 8;
    return value;
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @returns {Uint8Array} Value read
 */
Reader$1.prototype.bytes = function read_bytes() {
    var length = this.uint32(),
        start  = this.pos,
        end    = this.pos + length;

    /* istanbul ignore if */
    if (end > this.len)
        throw indexOutOfRange(this, length);

    this.pos += length;
    if (Array.isArray(this.buf)) // plain array
        return this.buf.slice(start, end);
    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
        ? new this.buf.constructor(0)
        : this._slice.call(this.buf, start, end);
};

/**
 * Reads a string preceeded by its byte length as a varint.
 * @returns {string} Value read
 */
Reader$1.prototype.string = function read_string() {
    var bytes = this.bytes();
    return utf8$1.read(bytes, 0, bytes.length);
};

/**
 * Skips the specified number of bytes if specified, otherwise skips a varint.
 * @param {number} [length] Length if known, otherwise a varint is assumed
 * @returns {Reader} `this`
 */
Reader$1.prototype.skip = function skip(length) {
    if (typeof length === "number") {
        /* istanbul ignore if */
        if (this.pos + length > this.len)
            throw indexOutOfRange(this, length);
        this.pos += length;
    } else {
        do {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
    }
    return this;
};

/**
 * Skips the next element of the specified wire type.
 * @param {number} wireType Wire type received
 * @returns {Reader} `this`
 */
Reader$1.prototype.skipType = function(wireType) {
    switch (wireType) {
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            while ((wireType = this.uint32() & 7) !== 4) {
                this.skipType(wireType);
            }
            break;
        case 5:
            this.skip(4);
            break;

        /* istanbul ignore next */
        default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
    }
    return this;
};

Reader$1._configure = function(BufferReader_) {
    BufferReader$1 = BufferReader_;
    Reader$1.create = create();
    BufferReader$1._configure();

    var fn = util$3.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
    util$3.merge(Reader$1.prototype, {

        int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
        },

        uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
        },

        sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
        },

        fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
        },

        sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
        }

    });
};

var reader_buffer = BufferReader;

// extends Reader
var Reader = reader;
(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

var util$2 = requireMinimal();

/**
 * Constructs a new buffer reader instance.
 * @classdesc Wire format reader using node buffers.
 * @extends Reader
 * @constructor
 * @param {Buffer} buffer Buffer to read from
 */
function BufferReader(buffer) {
    Reader.call(this, buffer);

    /**
     * Read buffer.
     * @name BufferReader#buf
     * @type {Buffer}
     */
}

BufferReader._configure = function () {
    /* istanbul ignore else */
    if (util$2.Buffer)
        BufferReader.prototype._slice = util$2.Buffer.prototype.slice;
};


/**
 * @override
 */
BufferReader.prototype.string = function read_string_buffer() {
    var len = this.uint32(); // modifies pos
    return this.buf.utf8Slice
        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
        : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @name BufferReader#bytes
 * @function
 * @returns {Buffer} Value read
 */

BufferReader._configure();

var rpc = {};

var service$1 = Service;

var util$1 = requireMinimal();

// Extends EventEmitter
(Service.prototype = Object.create(util$1.EventEmitter.prototype)).constructor = Service;

/**
 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
 *
 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
 * @typedef rpc.ServiceMethodCallback
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {TRes} [response] Response message
 * @returns {undefined}
 */

/**
 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
 * @typedef rpc.ServiceMethod
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
 */

/**
 * Constructs a new RPC service instance.
 * @classdesc An RPC service as returned by {@link Service#create}.
 * @exports rpc.Service
 * @extends util.EventEmitter
 * @constructor
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 */
function Service(rpcImpl, requestDelimited, responseDelimited) {

    if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");

    util$1.EventEmitter.call(this);

    /**
     * RPC implementation. Becomes `null` once the service is ended.
     * @type {RPCImpl|null}
     */
    this.rpcImpl = rpcImpl;

    /**
     * Whether requests are length-delimited.
     * @type {boolean}
     */
    this.requestDelimited = Boolean(requestDelimited);

    /**
     * Whether responses are length-delimited.
     * @type {boolean}
     */
    this.responseDelimited = Boolean(responseDelimited);
}

/**
 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
 * @param {Constructor<TReq>} requestCtor Request constructor
 * @param {Constructor<TRes>} responseCtor Response constructor
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
 * @returns {undefined}
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 */
Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

    if (!request)
        throw TypeError("request must be specified");

    var self = this;
    if (!callback)
        return util$1.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

    if (!self.rpcImpl) {
        setTimeout(function() { callback(Error("already ended")); }, 0);
        return undefined;
    }

    try {
        return self.rpcImpl(
            method,
            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
            function rpcCallback(err, response) {

                if (err) {
                    self.emit("error", err, method);
                    return callback(err);
                }

                if (response === null) {
                    self.end(/* endedByRPC */ true);
                    return undefined;
                }

                if (!(response instanceof responseCtor)) {
                    try {
                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                    } catch (err) {
                        self.emit("error", err, method);
                        return callback(err);
                    }
                }

                self.emit("data", response, method);
                return callback(null, response);
            }
        );
    } catch (err) {
        self.emit("error", err, method);
        setTimeout(function() { callback(err); }, 0);
        return undefined;
    }
};

/**
 * Ends this service and emits the `end` event.
 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
 * @returns {rpc.Service} `this`
 */
Service.prototype.end = function end(endedByRPC) {
    if (this.rpcImpl) {
        if (!endedByRPC) // signal end to rpcImpl
            this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
    }
    return this;
};

(function (exports) {

	/**
	 * Streaming RPC helpers.
	 * @namespace
	 */
	var rpc = exports;

	/**
	 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
	 * @typedef RPCImpl
	 * @type {function}
	 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
	 * @param {Uint8Array} requestData Request data
	 * @param {RPCImplCallback} callback Callback function
	 * @returns {undefined}
	 * @example
	 * function rpcImpl(method, requestData, callback) {
	 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
	 *         throw Error("no such method");
	 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
	 *         callback(err, responseData);
	 *     });
	 * }
	 */

	/**
	 * Node-style callback as used by {@link RPCImpl}.
	 * @typedef RPCImplCallback
	 * @type {function}
	 * @param {Error|null} error Error, if any, otherwise `null`
	 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
	 * @returns {undefined}
	 */

	rpc.Service = service$1; 
} (rpc));

var roots = {};

(function (exports) {
	var protobuf = exports;

	/**
	 * Build type, one of `"full"`, `"light"` or `"minimal"`.
	 * @name build
	 * @type {string}
	 * @const
	 */
	protobuf.build = "minimal";

	// Serialization
	protobuf.Writer       = writer;
	protobuf.BufferWriter = writer_buffer;
	protobuf.Reader       = reader;
	protobuf.BufferReader = reader_buffer;

	// Utility
	protobuf.util         = requireMinimal();
	protobuf.rpc          = rpc;
	protobuf.roots        = roots;
	protobuf.configure    = configure;

	/* istanbul ignore next */
	/**
	 * Reconfigures the library according to the environment.
	 * @returns {undefined}
	 */
	function configure() {
	    protobuf.util._configure();
	    protobuf.Writer._configure(protobuf.BufferWriter);
	    protobuf.Reader._configure(protobuf.BufferReader);
	}

	// Set up buffer utility according to the environment
	configure(); 
} (indexMinimal));

var minimal = indexMinimal;

var _m0$i = /*@__PURE__*/getDefaultExportFromCjs(minimal);

var helpers = {};

var long = Long;

/**
 * wasm optimizations, to do native i64 multiplication and divide
 */
var wasm = null;

try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
  ])), {}).exports;
} catch (e) {
  // no wasm support :(
}

/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */
function Long(low, high, unsigned) {

    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */
    this.low = low | 0;

    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */
    this.high = high | 0;

    /**
     * Whether unsigned or not.
     * @type {boolean}
     */
    this.unsigned = !!unsigned;
}

// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */
Long.prototype.__isLong__;

Object.defineProperty(Long.prototype, "__isLong__", { value: true });

/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */
function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
}

/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */
Long.isLong = isLong;

/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */
var INT_CACHE = {};

/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */
var UINT_CACHE = {};

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = (0 <= value && value < 256)) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache)
            UINT_CACHE[value] = obj;
        return obj;
    } else {
        value |= 0;
        if (cache = (-128 <= value && value < 128)) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache)
            INT_CACHE[value] = obj;
        return obj;
    }
}

/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromInt = fromInt;

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromNumber(value, unsigned) {
    if (isNaN(value))
        return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0)
            return UZERO;
        if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
    } else {
        if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
    }
    if (value < 0)
        return fromNumber(-value, unsigned).neg();
    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
}

/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromNumber = fromNumber;

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
}

/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromBits = fromBits;

/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */
var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */
function fromString(str, unsigned, radix) {
    if (str.length === 0)
        throw Error('empty string');
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
        return ZERO;
    if (typeof unsigned === 'number') {
        // For goog.math.long compatibility
        radix = unsigned,
        unsigned = false;
    } else {
        unsigned = !! unsigned;
    }
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');

    var p;
    if ((p = str.indexOf('-')) > 0)
        throw Error('interior hyphen');
    else if (p === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));

    var result = ZERO;
    for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i),
            value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
        } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
        }
    }
    result.unsigned = unsigned;
    return result;
}

/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */
Long.fromString = fromString;

/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromValue(val, unsigned) {
    if (typeof val === 'number')
        return fromNumber(val, unsigned);
    if (typeof val === 'string')
        return fromString(val, unsigned);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}

/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */
Long.fromValue = fromValue;

// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_16_DBL = 1 << 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_24_DBL = 1 << 24;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

/**
 * @type {!Long}
 * @const
 * @inner
 */
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

/**
 * @type {!Long}
 * @inner
 */
var ZERO = fromInt(0);

/**
 * Signed zero.
 * @type {!Long}
 */
Long.ZERO = ZERO;

/**
 * @type {!Long}
 * @inner
 */
var UZERO = fromInt(0, true);

/**
 * Unsigned zero.
 * @type {!Long}
 */
Long.UZERO = UZERO;

/**
 * @type {!Long}
 * @inner
 */
var ONE = fromInt(1);

/**
 * Signed one.
 * @type {!Long}
 */
Long.ONE = ONE;

/**
 * @type {!Long}
 * @inner
 */
var UONE = fromInt(1, true);

/**
 * Unsigned one.
 * @type {!Long}
 */
Long.UONE = UONE;

/**
 * @type {!Long}
 * @inner
 */
var NEG_ONE = fromInt(-1);

/**
 * Signed negative one.
 * @type {!Long}
 */
Long.NEG_ONE = NEG_ONE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

/**
 * Maximum signed value.
 * @type {!Long}
 */
Long.MAX_VALUE = MAX_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

/**
 * Maximum unsigned value.
 * @type {!Long}
 */
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MIN_VALUE = fromBits(0, 0x80000000|0, false);

/**
 * Minimum signed value.
 * @type {!Long}
 */
Long.MIN_VALUE = MIN_VALUE;

/**
 * @alias Long.prototype
 * @inner
 */
var LongPrototype = Long.prototype;

/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number}
 */
LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
};

/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number}
 */
LongPrototype.toNumber = function toNumber() {
    if (this.unsigned)
        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};

/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */
LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');
    if (this.isZero())
        return '0';
    if (this.isNegative()) { // Unsigned Longs are never negative
        if (this.eq(MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix),
                div = this.div(radixLong),
                rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
        } else
            return '-' + this.neg().toString(radix);
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
        rem = this;
    var result = '';
    while (true) {
        var remDiv = rem.div(radixToPower),
            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
            digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero())
            return digits + result;
        else {
            while (digits.length < 6)
                digits = '0' + digits;
            result = '' + digits + result;
        }
    }
};

/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number} Signed high bits
 */
LongPrototype.getHighBits = function getHighBits() {
    return this.high;
};

/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number} Unsigned high bits
 */
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
};

/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number} Signed low bits
 */
LongPrototype.getLowBits = function getLowBits() {
    return this.low;
};

/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number} Unsigned low bits
 */
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
};

/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number}
 */
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) // Unsigned Longs are never negative
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
    for (var bit = 31; bit > 0; bit--)
        if ((val & (1 << bit)) != 0)
            break;
    return this.high != 0 ? bit + 33 : bit + 1;
};

/**
 * Tests if this Long's value equals zero.
 * @returns {boolean}
 */
LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
};

/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */
LongPrototype.eqz = LongPrototype.isZero;

/**
 * Tests if this Long's value is negative.
 * @returns {boolean}
 */
LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
};

/**
 * Tests if this Long's value is positive.
 * @returns {boolean}
 */
LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
};

/**
 * Tests if this Long's value is odd.
 * @returns {boolean}
 */
LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
};

/**
 * Tests if this Long's value is even.
 * @returns {boolean}
 */
LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
};

/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.equals = function equals(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
        return false;
    return this.high === other.high && this.low === other.low;
};

/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.eq = LongPrototype.equals;

/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(/* validates */ other);
};

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.neq = LongPrototype.notEquals;

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ne = LongPrototype.notEquals;

/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThan = function lessThan(other) {
    return this.comp(/* validates */ other) < 0;
};

/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lt = LongPrototype.lessThan;

/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(/* validates */ other) <= 0;
};

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lte = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.le = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(/* validates */ other) > 0;
};

/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gt = LongPrototype.greaterThan;

/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(/* validates */ other) >= 0;
};

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gte = LongPrototype.greaterThanOrEqual;

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ge = LongPrototype.greaterThanOrEqual;

/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.compare = function compare(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.eq(other))
        return 0;
    var thisNeg = this.isNegative(),
        otherNeg = other.isNegative();
    if (thisNeg && !otherNeg)
        return -1;
    if (!thisNeg && otherNeg)
        return 1;
    // At this point the sign bits are the same
    if (!this.unsigned)
        return this.sub(other).isNegative() ? -1 : 1;
    // Both are positive if at least one is unsigned
    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
};

/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.comp = LongPrototype.compare;

/**
 * Negates this Long's value.
 * @returns {!Long} Negated Long
 */
LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE))
        return MIN_VALUE;
    return this.not().add(ONE);
};

/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */
LongPrototype.neg = LongPrototype.negate;

/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */
LongPrototype.add = function add(addend) {
    if (!isLong(addend))
        addend = fromValue(addend);

    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend))
        subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
};

/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.sub = LongPrototype.subtract;

/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero())
        return ZERO;
    if (!isLong(multiplier))
        multiplier = fromValue(multiplier);

    // use wasm support if present
    if (wasm) {
        var low = wasm.mul(this.low,
                           this.high,
                           multiplier.low,
                           multiplier.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (multiplier.isZero())
        return ZERO;
    if (this.eq(MIN_VALUE))
        return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE))
        return this.isOdd() ? MIN_VALUE : ZERO;

    if (this.isNegative()) {
        if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
        else
            return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative())
        return this.mul(multiplier.neg()).neg();

    // If both longs are small, use float multiplication
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.mul = LongPrototype.multiply;

/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);
    if (divisor.isZero())
        throw Error('division by zero');

    // use wasm support if present
    if (wasm) {
        // guard against signed division overflow: the largest
        // negative number / -1 would be 1 larger than the largest
        // positive number, due to two's complement.
        if (!this.unsigned &&
            this.high === -0x80000000 &&
            divisor.low === -1 && divisor.high === -1) {
            // be consistent with non-wasm code path
            return this;
        }
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (this.isZero())
        return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.eq(MIN_VALUE))
                return ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO)) {
                    return divisor.isNegative() ? ONE : NEG_ONE;
                } else {
                    rem = this.sub(divisor.mul(approx));
                    res = approx.add(rem.div(divisor));
                    return res;
                }
            }
        } else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative())
                return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
        } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
        res = ZERO;
    } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
        if (divisor.gt(this))
            return UZERO;
        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
            return UONE;
        res = UZERO;
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = this;
    while (rem.gte(divisor)) {
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

        // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
            approxRes = fromNumber(approx),
            approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
        }

        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero())
            approxRes = ONE;

        res = res.add(approxRes);
        rem = rem.sub(approxRem);
    }
    return res;
};

/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.div = LongPrototype.divide;

/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);

    // use wasm support if present
    if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    return this.sub(this.div(divisor).mul(divisor));
};

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.mod = LongPrototype.modulo;

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.rem = LongPrototype.modulo;

/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long}
 */
LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
};

/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.and = function and(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};

/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.or = function or(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};

/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.xor = function xor(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
    else
        return fromBits(0, this.low << (numBits - 32), this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shl = LongPrototype.shiftLeft;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
    else
        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
};

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr = LongPrototype.shiftRight;

/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0)
        return this;
    else {
        var high = this.high;
        if (numBits < 32) {
            var low = this.low;
            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
        } else if (numBits === 32)
            return fromBits(high, 0, this.unsigned);
        else
            return fromBits(high >>> (numBits - 32), 0, this.unsigned);
    }
};

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shru = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

/**
 * Converts this Long to signed.
 * @returns {!Long} Signed long
 */
LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned)
        return this;
    return fromBits(this.low, this.high, false);
};

/**
 * Converts this Long to unsigned.
 * @returns {!Long} Unsigned long
 */
LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned)
        return this;
    return fromBits(this.low, this.high, true);
};

/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>} Byte representation
 */
LongPrototype.toBytes = function toBytes(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
};

/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>} Little endian byte representation
 */
LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high,
        lo = this.low;
    return [
        lo        & 0xff,
        lo >>>  8 & 0xff,
        lo >>> 16 & 0xff,
        lo >>> 24       ,
        hi        & 0xff,
        hi >>>  8 & 0xff,
        hi >>> 16 & 0xff,
        hi >>> 24
    ];
};

/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>} Big endian byte representation
 */
LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high,
        lo = this.low;
    return [
        hi >>> 24       ,
        hi >>> 16 & 0xff,
        hi >>>  8 & 0xff,
        hi        & 0xff,
        lo >>> 24       ,
        lo >>> 16 & 0xff,
        lo >>>  8 & 0xff,
        lo        & 0xff
    ];
};

/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */
Long.fromBytes = function fromBytes(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};

/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long(
        bytes[0]       |
        bytes[1] <<  8 |
        bytes[2] << 16 |
        bytes[3] << 24,
        bytes[4]       |
        bytes[5] <<  8 |
        bytes[6] << 16 |
        bytes[7] << 24,
        unsigned
    );
};

/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long(
        bytes[4] << 24 |
        bytes[5] << 16 |
        bytes[6] <<  8 |
        bytes[7],
        bytes[0] << 24 |
        bytes[1] << 16 |
        bytes[2] <<  8 |
        bytes[3],
        unsigned
    );
};

var Long$1 = /*@__PURE__*/getDefaultExportFromCjs(long);

/* eslint-disable */
/**
 * This file and any referenced files were automatically generated by @osmonauts/telescope@0.88.2
 * DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain
 * and run the transpile command or yarn proto command to regenerate this bundle.
 */
var __createBinding$o = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$o = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$o = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$o(result, mod, k);
    __setModuleDefault$o(result, mod);
    return result;
};
var __importDefault$e = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(helpers, "__esModule", { value: true });
helpers.fromJsonTimestamp = helpers.fromTimestamp = helpers.toTimestamp = helpers.setPaginationParams = helpers.isObject = helpers.isSet = helpers.fromDuration = helpers.toDuration = helpers.omitDefault = helpers.base64FromBytes = helpers.bytesFromBase64 = helpers.Long = void 0;
const _m0$h = __importStar$o(minimal);
const long_1$a = __importDefault$e(long);
helpers.Long = long_1$a.default;
// @ts-ignore
if (_m0$h.util.Long !== long_1$a.default) {
    _m0$h.util.Long = long_1$a.default;
    _m0$h.configure();
}
var globalThis$1 = (() => {
    if (typeof globalThis$1 !== "undefined")
        return globalThis$1;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof commonjsGlobal !== "undefined")
        return commonjsGlobal;
    throw "Unable to locate global object";
})();
const atob$1 = globalThis$1.atob || ((b64) => globalThis$1.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64$2(b64) {
    const bin = atob$1(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
helpers.bytesFromBase64 = bytesFromBase64$2;
const btoa$1 = globalThis$1.btoa || ((bin) => globalThis$1.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes$2(arr) {
    const bin = [];
    arr.forEach((byte) => {
        bin.push(String.fromCharCode(byte));
    });
    return btoa$1(bin.join(""));
}
helpers.base64FromBytes = base64FromBytes$2;
function omitDefault$1(input) {
    if (typeof input === "string") {
        return input === "" ? undefined : input;
    }
    if (typeof input === "number") {
        return input === 0 ? undefined : input;
    }
    if (long_1$a.default.isLong(input)) {
        return input.isZero() ? undefined : input;
    }
    throw new Error(`Got unsupported type ${typeof input}`);
}
helpers.omitDefault = omitDefault$1;
function toDuration(duration) {
    return {
        seconds: long_1$a.default.fromNumber(Math.floor(parseInt(duration) / 1000000000)),
        nanos: parseInt(duration) % 1000000000,
    };
}
helpers.toDuration = toDuration;
function fromDuration(duration) {
    return (parseInt(duration.seconds.toString()) * 1000000000 + duration.nanos).toString();
}
helpers.fromDuration = fromDuration;
function isSet$g(value) {
    return value !== null && value !== undefined;
}
helpers.isSet = isSet$g;
function isObject$1(value) {
    return typeof value === "object" && value !== null;
}
helpers.isObject = isObject$1;
const setPaginationParams = (options, pagination) => {
    if (!pagination) {
        return options;
    }
    if (typeof pagination?.countTotal !== "undefined") {
        options.params["pagination.count_total"] = pagination.countTotal;
    }
    if (typeof pagination?.key !== "undefined") {
        // String to Uint8Array
        // let uint8arr = new Uint8Array(Buffer.from(data,'base64'));
        // Uint8Array to String
        options.params["pagination.key"] = Buffer.from(pagination.key).toString("base64");
    }
    if (typeof pagination?.limit !== "undefined") {
        options.params["pagination.limit"] = pagination.limit.toString();
    }
    if (typeof pagination?.offset !== "undefined") {
        options.params["pagination.offset"] = pagination.offset.toString();
    }
    if (typeof pagination?.reverse !== "undefined") {
        options.params["pagination.reverse"] = pagination.reverse;
    }
    return options;
};
helpers.setPaginationParams = setPaginationParams;
function toTimestamp(date) {
    const seconds = numberToLong(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return {
        seconds,
        nanos,
    };
}
helpers.toTimestamp = toTimestamp;
function fromTimestamp(t) {
    let millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
helpers.fromTimestamp = fromTimestamp;
const timestampFromJSON = (object) => {
    return {
        seconds: isSet$g(object.seconds) ? long_1$a.default.fromValue(object.seconds) : long_1$a.default.ZERO,
        nanos: isSet$g(object.nanos) ? Number(object.nanos) : 0,
    };
};
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return toTimestamp(o);
    }
    else if (typeof o === "string") {
        return toTimestamp(new Date(o));
    }
    else {
        return timestampFromJSON(o);
    }
}
helpers.fromJsonTimestamp = fromJsonTimestamp;
function numberToLong(number) {
    return long_1$a.default.fromNumber(number);
}

var __createBinding$n = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$n = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$n = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$n(result, mod, k);
    __setModuleDefault$n(result, mod);
    return result;
};
Object.defineProperty(any, "__esModule", { value: true });
any.Any = any.protobufPackage = void 0;
/* eslint-disable */
const _m0$g = __importStar$n(minimal);
const helpers_1$g = helpers;
any.protobufPackage = "google.protobuf";
function createBaseAny$1() {
    return {
        typeUrl: "",
        value: new Uint8Array(),
    };
}
any.Any = {
    encode(message, writer = _m0$g.Writer.create()) {
        if (message.typeUrl !== "") {
            writer.uint32(10).string(message.typeUrl);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$g.Reader ? input : new _m0$g.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAny$1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.typeUrl = reader.string();
                    break;
                case 2:
                    message.value = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            typeUrl: (0, helpers_1$g.isSet)(object.typeUrl) ? String(object.typeUrl) : "",
            value: (0, helpers_1$g.isSet)(object.value) ? (0, helpers_1$g.bytesFromBase64)(object.value) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.typeUrl !== undefined && (obj.typeUrl = message.typeUrl);
        message.value !== undefined &&
            (obj.value = (0, helpers_1$g.base64FromBytes)(message.value !== undefined ? message.value : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseAny$1();
        message.typeUrl = object.typeUrl ?? "";
        message.value = object.value ?? new Uint8Array();
        return message;
    },
};

var signing$1 = {};

var multisig$1 = {};

var __createBinding$m = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$m = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$m = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$m(result, mod, k);
    __setModuleDefault$m(result, mod);
    return result;
};
Object.defineProperty(multisig$1, "__esModule", { value: true });
multisig$1.CompactBitArray = multisig$1.MultiSignature = multisig$1.protobufPackage = void 0;
/* eslint-disable */
const _m0$f = __importStar$m(minimal);
const helpers_1$f = helpers;
multisig$1.protobufPackage = "cosmos.crypto.multisig.v1beta1";
function createBaseMultiSignature() {
    return {
        signatures: [],
    };
}
multisig$1.MultiSignature = {
    encode(message, writer = _m0$f.Writer.create()) {
        for (const v of message.signatures) {
            writer.uint32(10).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$f.Reader ? input : new _m0$f.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultiSignature();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.signatures.push(reader.bytes());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            signatures: Array.isArray(object?.signatures)
                ? object.signatures.map((e) => (0, helpers_1$f.bytesFromBase64)(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.signatures) {
            obj.signatures = message.signatures.map((e) => (0, helpers_1$f.base64FromBytes)(e !== undefined ? e : new Uint8Array()));
        }
        else {
            obj.signatures = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMultiSignature();
        message.signatures = object.signatures?.map((e) => e) || [];
        return message;
    },
};
function createBaseCompactBitArray() {
    return {
        extraBitsStored: 0,
        elems: new Uint8Array(),
    };
}
multisig$1.CompactBitArray = {
    encode(message, writer = _m0$f.Writer.create()) {
        if (message.extraBitsStored !== 0) {
            writer.uint32(8).uint32(message.extraBitsStored);
        }
        if (message.elems.length !== 0) {
            writer.uint32(18).bytes(message.elems);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$f.Reader ? input : new _m0$f.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCompactBitArray();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.extraBitsStored = reader.uint32();
                    break;
                case 2:
                    message.elems = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            extraBitsStored: (0, helpers_1$f.isSet)(object.extraBitsStored) ? Number(object.extraBitsStored) : 0,
            elems: (0, helpers_1$f.isSet)(object.elems) ? (0, helpers_1$f.bytesFromBase64)(object.elems) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.extraBitsStored !== undefined && (obj.extraBitsStored = Math.round(message.extraBitsStored));
        message.elems !== undefined &&
            (obj.elems = (0, helpers_1$f.base64FromBytes)(message.elems !== undefined ? message.elems : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCompactBitArray();
        message.extraBitsStored = object.extraBitsStored ?? 0;
        message.elems = object.elems ?? new Uint8Array();
        return message;
    },
};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SignatureDescriptor_Data_Multi = exports.SignatureDescriptor_Data_Single = exports.SignatureDescriptor_Data = exports.SignatureDescriptor = exports.SignatureDescriptors = exports.signModeToJSON = exports.signModeFromJSON = exports.SignMode = exports.protobufPackage = void 0;
	/* eslint-disable */
	const multisig_1 = multisig$1;
	const any_1 = any;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.tx.signing.v1beta1";
	/** SignMode represents a signing mode with its own security guarantees. */
	var SignMode;
	(function (SignMode) {
	    /**
	     * SIGN_MODE_UNSPECIFIED - SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
	     * rejected
	     */
	    SignMode[SignMode["SIGN_MODE_UNSPECIFIED"] = 0] = "SIGN_MODE_UNSPECIFIED";
	    /**
	     * SIGN_MODE_DIRECT - SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
	     * verified with raw bytes from Tx
	     */
	    SignMode[SignMode["SIGN_MODE_DIRECT"] = 1] = "SIGN_MODE_DIRECT";
	    /**
	     * SIGN_MODE_TEXTUAL - SIGN_MODE_TEXTUAL is a future signing mode that will verify some
	     * human-readable textual representation on top of the binary representation
	     * from SIGN_MODE_DIRECT
	     */
	    SignMode[SignMode["SIGN_MODE_TEXTUAL"] = 2] = "SIGN_MODE_TEXTUAL";
	    /**
	     * SIGN_MODE_LEGACY_AMINO_JSON - SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
	     * Amino JSON and will be removed in the future
	     */
	    SignMode[SignMode["SIGN_MODE_LEGACY_AMINO_JSON"] = 127] = "SIGN_MODE_LEGACY_AMINO_JSON";
	    /**
	     * SIGN_MODE_EIP_191 - SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
	     * SDK. Ref: https://eips.ethereum.org/EIPS/eip-191
	     *
	     * Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,
	     * but is not implemented on the SDK by default. To enable EIP-191, you need
	     * to pass a custom `TxConfig` that has an implementation of
	     * `SignModeHandler` for EIP-191. The SDK may decide to fully support
	     * EIP-191 in the future.
	     *
	     * Since: cosmos-sdk 0.45.2
	     */
	    SignMode[SignMode["SIGN_MODE_EIP_191"] = 191] = "SIGN_MODE_EIP_191";
	    SignMode[SignMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
	})(SignMode = exports.SignMode || (exports.SignMode = {}));
	function signModeFromJSON(object) {
	    switch (object) {
	        case 0:
	        case "SIGN_MODE_UNSPECIFIED":
	            return SignMode.SIGN_MODE_UNSPECIFIED;
	        case 1:
	        case "SIGN_MODE_DIRECT":
	            return SignMode.SIGN_MODE_DIRECT;
	        case 2:
	        case "SIGN_MODE_TEXTUAL":
	            return SignMode.SIGN_MODE_TEXTUAL;
	        case 127:
	        case "SIGN_MODE_LEGACY_AMINO_JSON":
	            return SignMode.SIGN_MODE_LEGACY_AMINO_JSON;
	        case 191:
	        case "SIGN_MODE_EIP_191":
	            return SignMode.SIGN_MODE_EIP_191;
	        case -1:
	        case "UNRECOGNIZED":
	        default:
	            return SignMode.UNRECOGNIZED;
	    }
	}
	exports.signModeFromJSON = signModeFromJSON;
	function signModeToJSON(object) {
	    switch (object) {
	        case SignMode.SIGN_MODE_UNSPECIFIED:
	            return "SIGN_MODE_UNSPECIFIED";
	        case SignMode.SIGN_MODE_DIRECT:
	            return "SIGN_MODE_DIRECT";
	        case SignMode.SIGN_MODE_TEXTUAL:
	            return "SIGN_MODE_TEXTUAL";
	        case SignMode.SIGN_MODE_LEGACY_AMINO_JSON:
	            return "SIGN_MODE_LEGACY_AMINO_JSON";
	        case SignMode.SIGN_MODE_EIP_191:
	            return "SIGN_MODE_EIP_191";
	        case SignMode.UNRECOGNIZED:
	        default:
	            return "UNRECOGNIZED";
	    }
	}
	exports.signModeToJSON = signModeToJSON;
	function createBaseSignatureDescriptors() {
	    return {
	        signatures: [],
	    };
	}
	exports.SignatureDescriptors = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.signatures) {
	            exports.SignatureDescriptor.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseSignatureDescriptors();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.signatures.push(exports.SignatureDescriptor.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            signatures: Array.isArray(object?.signatures)
	                ? object.signatures.map((e) => exports.SignatureDescriptor.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.signatures) {
	            obj.signatures = message.signatures.map((e) => (e ? exports.SignatureDescriptor.toJSON(e) : undefined));
	        }
	        else {
	            obj.signatures = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseSignatureDescriptors();
	        message.signatures = object.signatures?.map((e) => exports.SignatureDescriptor.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseSignatureDescriptor() {
	    return {
	        publicKey: undefined,
	        data: undefined,
	        sequence: helpers_1.Long.UZERO,
	    };
	}
	exports.SignatureDescriptor = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.publicKey !== undefined) {
	            any_1.Any.encode(message.publicKey, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.data !== undefined) {
	            exports.SignatureDescriptor_Data.encode(message.data, writer.uint32(18).fork()).ldelim();
	        }
	        if (!message.sequence.isZero()) {
	            writer.uint32(24).uint64(message.sequence);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseSignatureDescriptor();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.publicKey = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.data = exports.SignatureDescriptor_Data.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.sequence = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            publicKey: (0, helpers_1.isSet)(object.publicKey) ? any_1.Any.fromJSON(object.publicKey) : undefined,
	            data: (0, helpers_1.isSet)(object.data) ? exports.SignatureDescriptor_Data.fromJSON(object.data) : undefined,
	            sequence: (0, helpers_1.isSet)(object.sequence) ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.publicKey !== undefined &&
	            (obj.publicKey = message.publicKey ? any_1.Any.toJSON(message.publicKey) : undefined);
	        message.data !== undefined &&
	            (obj.data = message.data ? exports.SignatureDescriptor_Data.toJSON(message.data) : undefined);
	        message.sequence !== undefined && (obj.sequence = (message.sequence || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseSignatureDescriptor();
	        message.publicKey =
	            object.publicKey !== undefined && object.publicKey !== null
	                ? any_1.Any.fromPartial(object.publicKey)
	                : undefined;
	        message.data =
	            object.data !== undefined && object.data !== null
	                ? exports.SignatureDescriptor_Data.fromPartial(object.data)
	                : undefined;
	        message.sequence =
	            object.sequence !== undefined && object.sequence !== null
	                ? helpers_1.Long.fromValue(object.sequence)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseSignatureDescriptor_Data() {
	    return {
	        single: undefined,
	        multi: undefined,
	    };
	}
	exports.SignatureDescriptor_Data = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.single !== undefined) {
	            exports.SignatureDescriptor_Data_Single.encode(message.single, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.multi !== undefined) {
	            exports.SignatureDescriptor_Data_Multi.encode(message.multi, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseSignatureDescriptor_Data();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.single = exports.SignatureDescriptor_Data_Single.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.multi = exports.SignatureDescriptor_Data_Multi.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            single: (0, helpers_1.isSet)(object.single) ? exports.SignatureDescriptor_Data_Single.fromJSON(object.single) : undefined,
	            multi: (0, helpers_1.isSet)(object.multi) ? exports.SignatureDescriptor_Data_Multi.fromJSON(object.multi) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.single !== undefined &&
	            (obj.single = message.single ? exports.SignatureDescriptor_Data_Single.toJSON(message.single) : undefined);
	        message.multi !== undefined &&
	            (obj.multi = message.multi ? exports.SignatureDescriptor_Data_Multi.toJSON(message.multi) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseSignatureDescriptor_Data();
	        message.single =
	            object.single !== undefined && object.single !== null
	                ? exports.SignatureDescriptor_Data_Single.fromPartial(object.single)
	                : undefined;
	        message.multi =
	            object.multi !== undefined && object.multi !== null
	                ? exports.SignatureDescriptor_Data_Multi.fromPartial(object.multi)
	                : undefined;
	        return message;
	    },
	};
	function createBaseSignatureDescriptor_Data_Single() {
	    return {
	        mode: 0,
	        signature: new Uint8Array(),
	    };
	}
	exports.SignatureDescriptor_Data_Single = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.mode !== 0) {
	            writer.uint32(8).int32(message.mode);
	        }
	        if (message.signature.length !== 0) {
	            writer.uint32(18).bytes(message.signature);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseSignatureDescriptor_Data_Single();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.mode = reader.int32();
	                    break;
	                case 2:
	                    message.signature = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            mode: (0, helpers_1.isSet)(object.mode) ? signModeFromJSON(object.mode) : 0,
	            signature: (0, helpers_1.isSet)(object.signature) ? (0, helpers_1.bytesFromBase64)(object.signature) : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.mode !== undefined && (obj.mode = signModeToJSON(message.mode));
	        message.signature !== undefined &&
	            (obj.signature = (0, helpers_1.base64FromBytes)(message.signature !== undefined ? message.signature : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseSignatureDescriptor_Data_Single();
	        message.mode = object.mode ?? 0;
	        message.signature = object.signature ?? new Uint8Array();
	        return message;
	    },
	};
	function createBaseSignatureDescriptor_Data_Multi() {
	    return {
	        bitarray: undefined,
	        signatures: [],
	    };
	}
	exports.SignatureDescriptor_Data_Multi = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.bitarray !== undefined) {
	            multisig_1.CompactBitArray.encode(message.bitarray, writer.uint32(10).fork()).ldelim();
	        }
	        for (const v of message.signatures) {
	            exports.SignatureDescriptor_Data.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseSignatureDescriptor_Data_Multi();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.bitarray = multisig_1.CompactBitArray.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.signatures.push(exports.SignatureDescriptor_Data.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            bitarray: (0, helpers_1.isSet)(object.bitarray) ? multisig_1.CompactBitArray.fromJSON(object.bitarray) : undefined,
	            signatures: Array.isArray(object?.signatures)
	                ? object.signatures.map((e) => exports.SignatureDescriptor_Data.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.bitarray !== undefined &&
	            (obj.bitarray = message.bitarray ? multisig_1.CompactBitArray.toJSON(message.bitarray) : undefined);
	        if (message.signatures) {
	            obj.signatures = message.signatures.map((e) => (e ? exports.SignatureDescriptor_Data.toJSON(e) : undefined));
	        }
	        else {
	            obj.signatures = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseSignatureDescriptor_Data_Multi();
	        message.bitarray =
	            object.bitarray !== undefined && object.bitarray !== null
	                ? multisig_1.CompactBitArray.fromPartial(object.bitarray)
	                : undefined;
	        message.signatures = object.signatures?.map((e) => exports.SignatureDescriptor_Data.fromPartial(e)) || [];
	        return message;
	    },
	};
	
} (signing$1));

var coin$1 = {};

var __createBinding$l = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$l = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$l = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$l(result, mod, k);
    __setModuleDefault$l(result, mod);
    return result;
};
Object.defineProperty(coin$1, "__esModule", { value: true });
coin$1.DecProto = coin$1.IntProto = coin$1.DecCoin = coin$1.Coin = coin$1.protobufPackage = void 0;
/* eslint-disable */
const _m0$e = __importStar$l(minimal);
const helpers_1$e = helpers;
coin$1.protobufPackage = "cosmos.base.v1beta1";
function createBaseCoin$1() {
    return {
        denom: "",
        amount: "",
    };
}
coin$1.Coin = {
    encode(message, writer = _m0$e.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.amount !== "") {
            writer.uint32(18).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$e.Reader ? input : new _m0$e.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCoin$1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.amount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: (0, helpers_1$e.isSet)(object.denom) ? String(object.denom) : "",
            amount: (0, helpers_1$e.isSet)(object.amount) ? String(object.amount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.amount !== undefined && (obj.amount = message.amount);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCoin$1();
        message.denom = object.denom ?? "";
        message.amount = object.amount ?? "";
        return message;
    },
};
function createBaseDecCoin$1() {
    return {
        denom: "",
        amount: "",
    };
}
coin$1.DecCoin = {
    encode(message, writer = _m0$e.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.amount !== "") {
            writer.uint32(18).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$e.Reader ? input : new _m0$e.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDecCoin$1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.amount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: (0, helpers_1$e.isSet)(object.denom) ? String(object.denom) : "",
            amount: (0, helpers_1$e.isSet)(object.amount) ? String(object.amount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.amount !== undefined && (obj.amount = message.amount);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDecCoin$1();
        message.denom = object.denom ?? "";
        message.amount = object.amount ?? "";
        return message;
    },
};
function createBaseIntProto() {
    return {
        int: "",
    };
}
coin$1.IntProto = {
    encode(message, writer = _m0$e.Writer.create()) {
        if (message.int !== "") {
            writer.uint32(10).string(message.int);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$e.Reader ? input : new _m0$e.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIntProto();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.int = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            int: (0, helpers_1$e.isSet)(object.int) ? String(object.int) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.int !== undefined && (obj.int = message.int);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseIntProto();
        message.int = object.int ?? "";
        return message;
    },
};
function createBaseDecProto() {
    return {
        dec: "",
    };
}
coin$1.DecProto = {
    encode(message, writer = _m0$e.Writer.create()) {
        if (message.dec !== "") {
            writer.uint32(10).string(message.dec);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$e.Reader ? input : new _m0$e.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDecProto();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.dec = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            dec: (0, helpers_1$e.isSet)(object.dec) ? String(object.dec) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.dec !== undefined && (obj.dec = message.dec);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDecProto();
        message.dec = object.dec ?? "";
        return message;
    },
};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Fee = exports.ModeInfo_Multi = exports.ModeInfo_Single = exports.ModeInfo = exports.SignerInfo = exports.AuthInfo = exports.TxBody = exports.SignDoc = exports.TxRaw = exports.Tx = exports.protobufPackage = void 0;
	/* eslint-disable */
	const any_1 = any;
	const signing_1 = signing$1;
	const multisig_1 = multisig$1;
	const coin_1 = coin$1;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.tx.v1beta1";
	function createBaseTx() {
	    return {
	        body: undefined,
	        authInfo: undefined,
	        signatures: [],
	    };
	}
	exports.Tx = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.body !== undefined) {
	            exports.TxBody.encode(message.body, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.authInfo !== undefined) {
	            exports.AuthInfo.encode(message.authInfo, writer.uint32(18).fork()).ldelim();
	        }
	        for (const v of message.signatures) {
	            writer.uint32(26).bytes(v);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseTx();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.body = exports.TxBody.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.authInfo = exports.AuthInfo.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.signatures.push(reader.bytes());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            body: (0, helpers_1.isSet)(object.body) ? exports.TxBody.fromJSON(object.body) : undefined,
	            authInfo: (0, helpers_1.isSet)(object.authInfo) ? exports.AuthInfo.fromJSON(object.authInfo) : undefined,
	            signatures: Array.isArray(object?.signatures)
	                ? object.signatures.map((e) => (0, helpers_1.bytesFromBase64)(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.body !== undefined && (obj.body = message.body ? exports.TxBody.toJSON(message.body) : undefined);
	        message.authInfo !== undefined &&
	            (obj.authInfo = message.authInfo ? exports.AuthInfo.toJSON(message.authInfo) : undefined);
	        if (message.signatures) {
	            obj.signatures = message.signatures.map((e) => (0, helpers_1.base64FromBytes)(e !== undefined ? e : new Uint8Array()));
	        }
	        else {
	            obj.signatures = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseTx();
	        message.body =
	            object.body !== undefined && object.body !== null ? exports.TxBody.fromPartial(object.body) : undefined;
	        message.authInfo =
	            object.authInfo !== undefined && object.authInfo !== null
	                ? exports.AuthInfo.fromPartial(object.authInfo)
	                : undefined;
	        message.signatures = object.signatures?.map((e) => e) || [];
	        return message;
	    },
	};
	function createBaseTxRaw() {
	    return {
	        bodyBytes: new Uint8Array(),
	        authInfoBytes: new Uint8Array(),
	        signatures: [],
	    };
	}
	exports.TxRaw = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.bodyBytes.length !== 0) {
	            writer.uint32(10).bytes(message.bodyBytes);
	        }
	        if (message.authInfoBytes.length !== 0) {
	            writer.uint32(18).bytes(message.authInfoBytes);
	        }
	        for (const v of message.signatures) {
	            writer.uint32(26).bytes(v);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseTxRaw();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.bodyBytes = reader.bytes();
	                    break;
	                case 2:
	                    message.authInfoBytes = reader.bytes();
	                    break;
	                case 3:
	                    message.signatures.push(reader.bytes());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            bodyBytes: (0, helpers_1.isSet)(object.bodyBytes) ? (0, helpers_1.bytesFromBase64)(object.bodyBytes) : new Uint8Array(),
	            authInfoBytes: (0, helpers_1.isSet)(object.authInfoBytes) ? (0, helpers_1.bytesFromBase64)(object.authInfoBytes) : new Uint8Array(),
	            signatures: Array.isArray(object?.signatures)
	                ? object.signatures.map((e) => (0, helpers_1.bytesFromBase64)(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.bodyBytes !== undefined &&
	            (obj.bodyBytes = (0, helpers_1.base64FromBytes)(message.bodyBytes !== undefined ? message.bodyBytes : new Uint8Array()));
	        message.authInfoBytes !== undefined &&
	            (obj.authInfoBytes = (0, helpers_1.base64FromBytes)(message.authInfoBytes !== undefined ? message.authInfoBytes : new Uint8Array()));
	        if (message.signatures) {
	            obj.signatures = message.signatures.map((e) => (0, helpers_1.base64FromBytes)(e !== undefined ? e : new Uint8Array()));
	        }
	        else {
	            obj.signatures = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseTxRaw();
	        message.bodyBytes = object.bodyBytes ?? new Uint8Array();
	        message.authInfoBytes = object.authInfoBytes ?? new Uint8Array();
	        message.signatures = object.signatures?.map((e) => e) || [];
	        return message;
	    },
	};
	function createBaseSignDoc() {
	    return {
	        bodyBytes: new Uint8Array(),
	        authInfoBytes: new Uint8Array(),
	        chainId: "",
	        accountNumber: helpers_1.Long.UZERO,
	    };
	}
	exports.SignDoc = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.bodyBytes.length !== 0) {
	            writer.uint32(10).bytes(message.bodyBytes);
	        }
	        if (message.authInfoBytes.length !== 0) {
	            writer.uint32(18).bytes(message.authInfoBytes);
	        }
	        if (message.chainId !== "") {
	            writer.uint32(26).string(message.chainId);
	        }
	        if (!message.accountNumber.isZero()) {
	            writer.uint32(32).uint64(message.accountNumber);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseSignDoc();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.bodyBytes = reader.bytes();
	                    break;
	                case 2:
	                    message.authInfoBytes = reader.bytes();
	                    break;
	                case 3:
	                    message.chainId = reader.string();
	                    break;
	                case 4:
	                    message.accountNumber = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            bodyBytes: (0, helpers_1.isSet)(object.bodyBytes) ? (0, helpers_1.bytesFromBase64)(object.bodyBytes) : new Uint8Array(),
	            authInfoBytes: (0, helpers_1.isSet)(object.authInfoBytes) ? (0, helpers_1.bytesFromBase64)(object.authInfoBytes) : new Uint8Array(),
	            chainId: (0, helpers_1.isSet)(object.chainId) ? String(object.chainId) : "",
	            accountNumber: (0, helpers_1.isSet)(object.accountNumber) ? helpers_1.Long.fromValue(object.accountNumber) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.bodyBytes !== undefined &&
	            (obj.bodyBytes = (0, helpers_1.base64FromBytes)(message.bodyBytes !== undefined ? message.bodyBytes : new Uint8Array()));
	        message.authInfoBytes !== undefined &&
	            (obj.authInfoBytes = (0, helpers_1.base64FromBytes)(message.authInfoBytes !== undefined ? message.authInfoBytes : new Uint8Array()));
	        message.chainId !== undefined && (obj.chainId = message.chainId);
	        message.accountNumber !== undefined &&
	            (obj.accountNumber = (message.accountNumber || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseSignDoc();
	        message.bodyBytes = object.bodyBytes ?? new Uint8Array();
	        message.authInfoBytes = object.authInfoBytes ?? new Uint8Array();
	        message.chainId = object.chainId ?? "";
	        message.accountNumber =
	            object.accountNumber !== undefined && object.accountNumber !== null
	                ? helpers_1.Long.fromValue(object.accountNumber)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseTxBody() {
	    return {
	        messages: [],
	        memo: "",
	        timeoutHeight: helpers_1.Long.UZERO,
	        extensionOptions: [],
	        nonCriticalExtensionOptions: [],
	    };
	}
	exports.TxBody = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.messages) {
	            any_1.Any.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.memo !== "") {
	            writer.uint32(18).string(message.memo);
	        }
	        if (!message.timeoutHeight.isZero()) {
	            writer.uint32(24).uint64(message.timeoutHeight);
	        }
	        for (const v of message.extensionOptions) {
	            any_1.Any.encode(v, writer.uint32(8186).fork()).ldelim();
	        }
	        for (const v of message.nonCriticalExtensionOptions) {
	            any_1.Any.encode(v, writer.uint32(16378).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseTxBody();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.messages.push(any_1.Any.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.memo = reader.string();
	                    break;
	                case 3:
	                    message.timeoutHeight = reader.uint64();
	                    break;
	                case 1023:
	                    message.extensionOptions.push(any_1.Any.decode(reader, reader.uint32()));
	                    break;
	                case 2047:
	                    message.nonCriticalExtensionOptions.push(any_1.Any.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            messages: Array.isArray(object?.messages) ? object.messages.map((e) => any_1.Any.fromJSON(e)) : [],
	            memo: (0, helpers_1.isSet)(object.memo) ? String(object.memo) : "",
	            timeoutHeight: (0, helpers_1.isSet)(object.timeoutHeight) ? helpers_1.Long.fromValue(object.timeoutHeight) : helpers_1.Long.UZERO,
	            extensionOptions: Array.isArray(object?.extensionOptions)
	                ? object.extensionOptions.map((e) => any_1.Any.fromJSON(e))
	                : [],
	            nonCriticalExtensionOptions: Array.isArray(object?.nonCriticalExtensionOptions)
	                ? object.nonCriticalExtensionOptions.map((e) => any_1.Any.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.messages) {
	            obj.messages = message.messages.map((e) => (e ? any_1.Any.toJSON(e) : undefined));
	        }
	        else {
	            obj.messages = [];
	        }
	        message.memo !== undefined && (obj.memo = message.memo);
	        message.timeoutHeight !== undefined &&
	            (obj.timeoutHeight = (message.timeoutHeight || helpers_1.Long.UZERO).toString());
	        if (message.extensionOptions) {
	            obj.extensionOptions = message.extensionOptions.map((e) => (e ? any_1.Any.toJSON(e) : undefined));
	        }
	        else {
	            obj.extensionOptions = [];
	        }
	        if (message.nonCriticalExtensionOptions) {
	            obj.nonCriticalExtensionOptions = message.nonCriticalExtensionOptions.map((e) => e ? any_1.Any.toJSON(e) : undefined);
	        }
	        else {
	            obj.nonCriticalExtensionOptions = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseTxBody();
	        message.messages = object.messages?.map((e) => any_1.Any.fromPartial(e)) || [];
	        message.memo = object.memo ?? "";
	        message.timeoutHeight =
	            object.timeoutHeight !== undefined && object.timeoutHeight !== null
	                ? helpers_1.Long.fromValue(object.timeoutHeight)
	                : helpers_1.Long.UZERO;
	        message.extensionOptions = object.extensionOptions?.map((e) => any_1.Any.fromPartial(e)) || [];
	        message.nonCriticalExtensionOptions =
	            object.nonCriticalExtensionOptions?.map((e) => any_1.Any.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseAuthInfo() {
	    return {
	        signerInfos: [],
	        fee: undefined,
	    };
	}
	exports.AuthInfo = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.signerInfos) {
	            exports.SignerInfo.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.fee !== undefined) {
	            exports.Fee.encode(message.fee, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseAuthInfo();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.signerInfos.push(exports.SignerInfo.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.fee = exports.Fee.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            signerInfos: Array.isArray(object?.signerInfos)
	                ? object.signerInfos.map((e) => exports.SignerInfo.fromJSON(e))
	                : [],
	            fee: (0, helpers_1.isSet)(object.fee) ? exports.Fee.fromJSON(object.fee) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.signerInfos) {
	            obj.signerInfos = message.signerInfos.map((e) => (e ? exports.SignerInfo.toJSON(e) : undefined));
	        }
	        else {
	            obj.signerInfos = [];
	        }
	        message.fee !== undefined && (obj.fee = message.fee ? exports.Fee.toJSON(message.fee) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseAuthInfo();
	        message.signerInfos = object.signerInfos?.map((e) => exports.SignerInfo.fromPartial(e)) || [];
	        message.fee = object.fee !== undefined && object.fee !== null ? exports.Fee.fromPartial(object.fee) : undefined;
	        return message;
	    },
	};
	function createBaseSignerInfo() {
	    return {
	        publicKey: undefined,
	        modeInfo: undefined,
	        sequence: helpers_1.Long.UZERO,
	    };
	}
	exports.SignerInfo = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.publicKey !== undefined) {
	            any_1.Any.encode(message.publicKey, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.modeInfo !== undefined) {
	            exports.ModeInfo.encode(message.modeInfo, writer.uint32(18).fork()).ldelim();
	        }
	        if (!message.sequence.isZero()) {
	            writer.uint32(24).uint64(message.sequence);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseSignerInfo();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.publicKey = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.modeInfo = exports.ModeInfo.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.sequence = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            publicKey: (0, helpers_1.isSet)(object.publicKey) ? any_1.Any.fromJSON(object.publicKey) : undefined,
	            modeInfo: (0, helpers_1.isSet)(object.modeInfo) ? exports.ModeInfo.fromJSON(object.modeInfo) : undefined,
	            sequence: (0, helpers_1.isSet)(object.sequence) ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.publicKey !== undefined &&
	            (obj.publicKey = message.publicKey ? any_1.Any.toJSON(message.publicKey) : undefined);
	        message.modeInfo !== undefined &&
	            (obj.modeInfo = message.modeInfo ? exports.ModeInfo.toJSON(message.modeInfo) : undefined);
	        message.sequence !== undefined && (obj.sequence = (message.sequence || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseSignerInfo();
	        message.publicKey =
	            object.publicKey !== undefined && object.publicKey !== null
	                ? any_1.Any.fromPartial(object.publicKey)
	                : undefined;
	        message.modeInfo =
	            object.modeInfo !== undefined && object.modeInfo !== null
	                ? exports.ModeInfo.fromPartial(object.modeInfo)
	                : undefined;
	        message.sequence =
	            object.sequence !== undefined && object.sequence !== null
	                ? helpers_1.Long.fromValue(object.sequence)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseModeInfo() {
	    return {
	        single: undefined,
	        multi: undefined,
	    };
	}
	exports.ModeInfo = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.single !== undefined) {
	            exports.ModeInfo_Single.encode(message.single, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.multi !== undefined) {
	            exports.ModeInfo_Multi.encode(message.multi, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseModeInfo();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.single = exports.ModeInfo_Single.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.multi = exports.ModeInfo_Multi.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            single: (0, helpers_1.isSet)(object.single) ? exports.ModeInfo_Single.fromJSON(object.single) : undefined,
	            multi: (0, helpers_1.isSet)(object.multi) ? exports.ModeInfo_Multi.fromJSON(object.multi) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.single !== undefined &&
	            (obj.single = message.single ? exports.ModeInfo_Single.toJSON(message.single) : undefined);
	        message.multi !== undefined &&
	            (obj.multi = message.multi ? exports.ModeInfo_Multi.toJSON(message.multi) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseModeInfo();
	        message.single =
	            object.single !== undefined && object.single !== null
	                ? exports.ModeInfo_Single.fromPartial(object.single)
	                : undefined;
	        message.multi =
	            object.multi !== undefined && object.multi !== null
	                ? exports.ModeInfo_Multi.fromPartial(object.multi)
	                : undefined;
	        return message;
	    },
	};
	function createBaseModeInfo_Single() {
	    return {
	        mode: 0,
	    };
	}
	exports.ModeInfo_Single = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.mode !== 0) {
	            writer.uint32(8).int32(message.mode);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseModeInfo_Single();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.mode = reader.int32();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            mode: (0, helpers_1.isSet)(object.mode) ? (0, signing_1.signModeFromJSON)(object.mode) : 0,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.mode !== undefined && (obj.mode = (0, signing_1.signModeToJSON)(message.mode));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseModeInfo_Single();
	        message.mode = object.mode ?? 0;
	        return message;
	    },
	};
	function createBaseModeInfo_Multi() {
	    return {
	        bitarray: undefined,
	        modeInfos: [],
	    };
	}
	exports.ModeInfo_Multi = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.bitarray !== undefined) {
	            multisig_1.CompactBitArray.encode(message.bitarray, writer.uint32(10).fork()).ldelim();
	        }
	        for (const v of message.modeInfos) {
	            exports.ModeInfo.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseModeInfo_Multi();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.bitarray = multisig_1.CompactBitArray.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.modeInfos.push(exports.ModeInfo.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            bitarray: (0, helpers_1.isSet)(object.bitarray) ? multisig_1.CompactBitArray.fromJSON(object.bitarray) : undefined,
	            modeInfos: Array.isArray(object?.modeInfos)
	                ? object.modeInfos.map((e) => exports.ModeInfo.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.bitarray !== undefined &&
	            (obj.bitarray = message.bitarray ? multisig_1.CompactBitArray.toJSON(message.bitarray) : undefined);
	        if (message.modeInfos) {
	            obj.modeInfos = message.modeInfos.map((e) => (e ? exports.ModeInfo.toJSON(e) : undefined));
	        }
	        else {
	            obj.modeInfos = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseModeInfo_Multi();
	        message.bitarray =
	            object.bitarray !== undefined && object.bitarray !== null
	                ? multisig_1.CompactBitArray.fromPartial(object.bitarray)
	                : undefined;
	        message.modeInfos = object.modeInfos?.map((e) => exports.ModeInfo.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseFee() {
	    return {
	        amount: [],
	        gasLimit: helpers_1.Long.UZERO,
	        payer: "",
	        granter: "",
	    };
	}
	exports.Fee = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.amount) {
	            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (!message.gasLimit.isZero()) {
	            writer.uint32(16).uint64(message.gasLimit);
	        }
	        if (message.payer !== "") {
	            writer.uint32(26).string(message.payer);
	        }
	        if (message.granter !== "") {
	            writer.uint32(34).string(message.granter);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseFee();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.gasLimit = reader.uint64();
	                    break;
	                case 3:
	                    message.payer = reader.string();
	                    break;
	                case 4:
	                    message.granter = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            amount: Array.isArray(object?.amount) ? object.amount.map((e) => coin_1.Coin.fromJSON(e)) : [],
	            gasLimit: (0, helpers_1.isSet)(object.gasLimit) ? helpers_1.Long.fromValue(object.gasLimit) : helpers_1.Long.UZERO,
	            payer: (0, helpers_1.isSet)(object.payer) ? String(object.payer) : "",
	            granter: (0, helpers_1.isSet)(object.granter) ? String(object.granter) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.amount) {
	            obj.amount = message.amount.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.amount = [];
	        }
	        message.gasLimit !== undefined && (obj.gasLimit = (message.gasLimit || helpers_1.Long.UZERO).toString());
	        message.payer !== undefined && (obj.payer = message.payer);
	        message.granter !== undefined && (obj.granter = message.granter);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseFee();
	        message.amount = object.amount?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        message.gasLimit =
	            object.gasLimit !== undefined && object.gasLimit !== null
	                ? helpers_1.Long.fromValue(object.gasLimit)
	                : helpers_1.Long.UZERO;
	        message.payer = object.payer ?? "";
	        message.granter = object.granter ?? "";
	        return message;
	    },
	};
	
} (tx$e));

Object.defineProperty(decode$1, "__esModule", { value: true });
decode$1.decodeTxRaw = void 0;
const tx_1$d = tx$e;
/**
 * Takes a serialized TxRaw (the bytes stored in Tendermint) and decodes it into something usable.
 */
function decodeTxRaw(tx) {
    const txRaw = tx_1$d.TxRaw.decode(tx);
    return {
        authInfo: tx_1$d.AuthInfo.decode(txRaw.authInfoBytes),
        body: tx_1$d.TxBody.decode(txRaw.bodyBytes),
        signatures: txRaw.signatures,
    };
}
decode$1.decodeTxRaw = decodeTxRaw;

var directsecp256k1hdwallet = {};

var build$8 = {};

var addresses$1 = {};

var build$7 = {};

var bip39 = {};

var build$6 = {};

var ascii = {};

Object.defineProperty(ascii, "__esModule", { value: true });
ascii.fromAscii = ascii.toAscii = void 0;
function toAscii(input) {
    const toNums = (str) => str.split("").map((x) => {
        const charCode = x.charCodeAt(0);
        // 0x00–0x1F control characters
        // 0x20–0x7E printable characters
        // 0x7F delete character
        // 0x80–0xFF out of 7 bit ascii range
        if (charCode < 0x20 || charCode > 0x7e) {
            throw new Error("Cannot encode character that is out of printable ASCII range: " + charCode);
        }
        return charCode;
    });
    return Uint8Array.from(toNums(input));
}
ascii.toAscii = toAscii;
function fromAscii(data) {
    const fromNums = (listOfNumbers) => listOfNumbers.map((x) => {
        // 0x00–0x1F control characters
        // 0x20–0x7E printable characters
        // 0x7F delete character
        // 0x80–0xFF out of 7 bit ascii range
        if (x < 0x20 || x > 0x7e) {
            throw new Error("Cannot decode character that is out of printable ASCII range: " + x);
        }
        return String.fromCharCode(x);
    });
    return fromNums(Array.from(data)).join("");
}
ascii.fromAscii = fromAscii;

var base64 = {};

var base64Js = {};

base64Js.byteLength = byteLength;
base64Js.toByteArray = toByteArray;
base64Js.fromByteArray = fromByteArray;

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens (b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4);

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

  var curByte = 0;

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen;

  var i;
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = (tmp >> 16) & 0xFF;
    arr[curByte++] = (tmp >> 8) & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4);
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2);
    arr[curByte++] = (tmp >> 8) & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    );
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    );
  }

  return parts.join('')
}

var __createBinding$k = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$k = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$k = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$k(result, mod, k);
    __setModuleDefault$k(result, mod);
    return result;
};
Object.defineProperty(base64, "__esModule", { value: true });
base64.fromBase64 = base64.toBase64 = void 0;
const base64js = __importStar$k(base64Js);
function toBase64(data) {
    return base64js.fromByteArray(data);
}
base64.toBase64 = toBase64;
function fromBase64(base64String) {
    if (!base64String.match(/^[a-zA-Z0-9+/]*={0,2}$/)) {
        throw new Error("Invalid base64 string format");
    }
    return base64js.toByteArray(base64String);
}
base64.fromBase64 = fromBase64;

var bech32$3 = {};

var ALPHABET$1 = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';

// pre-compute lookup table
var ALPHABET_MAP$1 = {};
for (var z = 0; z < ALPHABET$1.length; z++) {
  var x = ALPHABET$1.charAt(z);

  if (ALPHABET_MAP$1[x] !== undefined) throw new TypeError(x + ' is ambiguous')
  ALPHABET_MAP$1[x] = z;
}

function polymodStep$1 (pre) {
  var b = pre >> 25;
  return ((pre & 0x1FFFFFF) << 5) ^
    (-((b >> 0) & 1) & 0x3b6a57b2) ^
    (-((b >> 1) & 1) & 0x26508e6d) ^
    (-((b >> 2) & 1) & 0x1ea119fa) ^
    (-((b >> 3) & 1) & 0x3d4233dd) ^
    (-((b >> 4) & 1) & 0x2a1462b3)
}

function prefixChk$1 (prefix) {
  var chk = 1;
  for (var i = 0; i < prefix.length; ++i) {
    var c = prefix.charCodeAt(i);
    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'

    chk = polymodStep$1(chk) ^ (c >> 5);
  }
  chk = polymodStep$1(chk);

  for (i = 0; i < prefix.length; ++i) {
    var v = prefix.charCodeAt(i);
    chk = polymodStep$1(chk) ^ (v & 0x1f);
  }
  return chk
}

function encode$1 (prefix, words, LIMIT) {
  LIMIT = LIMIT || 90;
  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')

  prefix = prefix.toLowerCase();

  // determine chk mod
  var chk = prefixChk$1(prefix);
  if (typeof chk === 'string') throw new Error(chk)

  var result = prefix + '1';
  for (var i = 0; i < words.length; ++i) {
    var x = words[i];
    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')

    chk = polymodStep$1(chk) ^ x;
    result += ALPHABET$1.charAt(x);
  }

  for (i = 0; i < 6; ++i) {
    chk = polymodStep$1(chk);
  }
  chk ^= 1;

  for (i = 0; i < 6; ++i) {
    var v = (chk >> ((5 - i) * 5)) & 0x1f;
    result += ALPHABET$1.charAt(v);
  }

  return result
}

function __decode (str, LIMIT) {
  LIMIT = LIMIT || 90;
  if (str.length < 8) return str + ' too short'
  if (str.length > LIMIT) return 'Exceeds length limit'

  // don't allow mixed case
  var lowered = str.toLowerCase();
  var uppered = str.toUpperCase();
  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str
  str = lowered;

  var split = str.lastIndexOf('1');
  if (split === -1) return 'No separator character for ' + str
  if (split === 0) return 'Missing prefix for ' + str

  var prefix = str.slice(0, split);
  var wordChars = str.slice(split + 1);
  if (wordChars.length < 6) return 'Data too short'

  var chk = prefixChk$1(prefix);
  if (typeof chk === 'string') return chk

  var words = [];
  for (var i = 0; i < wordChars.length; ++i) {
    var c = wordChars.charAt(i);
    var v = ALPHABET_MAP$1[c];
    if (v === undefined) return 'Unknown character ' + c
    chk = polymodStep$1(chk) ^ v;

    // not in the checksum?
    if (i + 6 >= wordChars.length) continue
    words.push(v);
  }

  if (chk !== 1) return 'Invalid checksum for ' + str
  return { prefix: prefix, words: words }
}

function decodeUnsafe () {
  var res = __decode.apply(null, arguments);
  if (typeof res === 'object') return res
}

function decode (str) {
  var res = __decode.apply(null, arguments);
  if (typeof res === 'object') return res

  throw new Error(res)
}

function convert$1 (data, inBits, outBits, pad) {
  var value = 0;
  var bits = 0;
  var maxV = (1 << outBits) - 1;

  var result = [];
  for (var i = 0; i < data.length; ++i) {
    value = (value << inBits) | data[i];
    bits += inBits;

    while (bits >= outBits) {
      bits -= outBits;
      result.push((value >> bits) & maxV);
    }
  }

  if (pad) {
    if (bits > 0) {
      result.push((value << (outBits - bits)) & maxV);
    }
  } else {
    if (bits >= inBits) return 'Excess padding'
    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'
  }

  return result
}

function toWordsUnsafe (bytes) {
  var res = convert$1(bytes, 8, 5, true);
  if (Array.isArray(res)) return res
}

function toWords$1 (bytes) {
  var res = convert$1(bytes, 8, 5, true);
  if (Array.isArray(res)) return res

  throw new Error(res)
}

function fromWordsUnsafe$1 (words) {
  var res = convert$1(words, 5, 8, false);
  if (Array.isArray(res)) return res
}

function fromWords$1 (words) {
  var res = convert$1(words, 5, 8, false);
  if (Array.isArray(res)) return res

  throw new Error(res)
}

var bech32$2 = {
  decodeUnsafe: decodeUnsafe,
  decode: decode,
  encode: encode$1,
  toWordsUnsafe: toWordsUnsafe,
  toWords: toWords$1,
  fromWordsUnsafe: fromWordsUnsafe$1,
  fromWords: fromWords$1
};

var __createBinding$j = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$j = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$j = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$j(result, mod, k);
    __setModuleDefault$j(result, mod);
    return result;
};
Object.defineProperty(bech32$3, "__esModule", { value: true });
bech32$3.normalizeBech32 = bech32$3.fromBech32 = bech32$3.toBech32 = void 0;
const bech32$1 = __importStar$j(bech32$2);
function toBech32(prefix, data, limit) {
    const address = bech32$1.encode(prefix, bech32$1.toWords(data), limit);
    return address;
}
bech32$3.toBech32 = toBech32;
function fromBech32(address, limit = Infinity) {
    const decodedAddress = bech32$1.decode(address, limit);
    return {
        prefix: decodedAddress.prefix,
        data: new Uint8Array(bech32$1.fromWords(decodedAddress.words)),
    };
}
bech32$3.fromBech32 = fromBech32;
/**
 * Takes a bech32 address and returns a normalized (i.e. lower case) representation of it.
 *
 * The input is validated along the way, which makes this significantly safer than
 * using `address.toLowerCase()`.
 */
function normalizeBech32(address) {
    const { prefix, data } = fromBech32(address);
    return toBech32(prefix, data);
}
bech32$3.normalizeBech32 = normalizeBech32;

var hex = {};

Object.defineProperty(hex, "__esModule", { value: true });
hex.fromHex = hex.toHex = void 0;
function toHex$1(data) {
    let out = "";
    for (const byte of data) {
        out += ("0" + byte.toString(16)).slice(-2);
    }
    return out;
}
hex.toHex = toHex$1;
function fromHex(hexstring) {
    if (hexstring.length % 2 !== 0) {
        throw new Error("hex string length must be a multiple of 2");
    }
    const out = new Uint8Array(hexstring.length / 2);
    for (let i = 0; i < out.length; i++) {
        const j = 2 * i;
        const hexByteAsString = hexstring.slice(j, j + 2);
        if (!hexByteAsString.match(/[0-9a-f]{2}/i)) {
            throw new Error("hex string contains invalid characters");
        }
        out[i] = parseInt(hexByteAsString, 16);
    }
    return out;
}
hex.fromHex = fromHex;

var rfc3339 = {};

Object.defineProperty(rfc3339, "__esModule", { value: true });
rfc3339.toRfc3339 = rfc3339.fromRfc3339 = void 0;
const rfc3339Matcher = /^(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})(\.\d{1,9})?((?:[+-]\d{2}:\d{2})|Z)$/;
function padded(integer, length = 2) {
    return integer.toString().padStart(length, "0");
}
function fromRfc3339(str) {
    const matches = rfc3339Matcher.exec(str);
    if (!matches) {
        throw new Error("Date string is not in RFC3339 format");
    }
    const year = +matches[1];
    const month = +matches[2];
    const day = +matches[3];
    const hour = +matches[4];
    const minute = +matches[5];
    const second = +matches[6];
    // fractional seconds match either undefined or a string like ".1", ".123456789"
    const milliSeconds = matches[7] ? Math.floor(+matches[7] * 1000) : 0;
    let tzOffsetSign;
    let tzOffsetHours;
    let tzOffsetMinutes;
    // if timezone is undefined, it must be Z or nothing (otherwise the group would have captured).
    if (matches[8] === "Z") {
        tzOffsetSign = 1;
        tzOffsetHours = 0;
        tzOffsetMinutes = 0;
    }
    else {
        tzOffsetSign = matches[8].substring(0, 1) === "-" ? -1 : 1;
        tzOffsetHours = +matches[8].substring(1, 3);
        tzOffsetMinutes = +matches[8].substring(4, 6);
    }
    const tzOffset = tzOffsetSign * (tzOffsetHours * 60 + tzOffsetMinutes) * 60; // seconds
    const timestamp = Date.UTC(year, month - 1, day, hour, minute, second, milliSeconds) - tzOffset * 1000;
    return new Date(timestamp);
}
rfc3339.fromRfc3339 = fromRfc3339;
function toRfc3339(date) {
    const year = date.getUTCFullYear();
    const month = padded(date.getUTCMonth() + 1);
    const day = padded(date.getUTCDate());
    const hour = padded(date.getUTCHours());
    const minute = padded(date.getUTCMinutes());
    const second = padded(date.getUTCSeconds());
    const ms = padded(date.getUTCMilliseconds(), 3);
    return `${year}-${month}-${day}T${hour}:${minute}:${second}.${ms}Z`;
}
rfc3339.toRfc3339 = toRfc3339;

var utf8 = {};

Object.defineProperty(utf8, "__esModule", { value: true });
utf8.fromUtf8 = utf8.toUtf8 = void 0;
function toUtf8(str) {
    return new TextEncoder().encode(str);
}
utf8.toUtf8 = toUtf8;
/**
 * Takes UTF-8 data and decodes it to a string.
 *
 * In lossy mode, the replacement character � is used to substitude invalid
 * encodings. By default lossy mode is off and invalid data will lead to exceptions.
 */
function fromUtf8(data, lossy = false) {
    const fatal = !lossy;
    return new TextDecoder("utf-8", { fatal }).decode(data);
}
utf8.fromUtf8 = fromUtf8;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.toUtf8 = exports.fromUtf8 = exports.toRfc3339 = exports.fromRfc3339 = exports.toHex = exports.fromHex = exports.toBech32 = exports.normalizeBech32 = exports.fromBech32 = exports.toBase64 = exports.fromBase64 = exports.toAscii = exports.fromAscii = void 0;
	var ascii_1 = ascii;
	Object.defineProperty(exports, "fromAscii", { enumerable: true, get: function () { return ascii_1.fromAscii; } });
	Object.defineProperty(exports, "toAscii", { enumerable: true, get: function () { return ascii_1.toAscii; } });
	var base64_1 = base64;
	Object.defineProperty(exports, "fromBase64", { enumerable: true, get: function () { return base64_1.fromBase64; } });
	Object.defineProperty(exports, "toBase64", { enumerable: true, get: function () { return base64_1.toBase64; } });
	var bech32_1 = bech32$3;
	Object.defineProperty(exports, "fromBech32", { enumerable: true, get: function () { return bech32_1.fromBech32; } });
	Object.defineProperty(exports, "normalizeBech32", { enumerable: true, get: function () { return bech32_1.normalizeBech32; } });
	Object.defineProperty(exports, "toBech32", { enumerable: true, get: function () { return bech32_1.toBech32; } });
	var hex_1 = hex;
	Object.defineProperty(exports, "fromHex", { enumerable: true, get: function () { return hex_1.fromHex; } });
	Object.defineProperty(exports, "toHex", { enumerable: true, get: function () { return hex_1.toHex; } });
	var rfc3339_1 = rfc3339;
	Object.defineProperty(exports, "fromRfc3339", { enumerable: true, get: function () { return rfc3339_1.fromRfc3339; } });
	Object.defineProperty(exports, "toRfc3339", { enumerable: true, get: function () { return rfc3339_1.toRfc3339; } });
	var utf8_1 = utf8;
	Object.defineProperty(exports, "fromUtf8", { enumerable: true, get: function () { return utf8_1.fromUtf8; } });
	Object.defineProperty(exports, "toUtf8", { enumerable: true, get: function () { return utf8_1.toUtf8; } });
	
} (build$6));

var pbkdf2$2 = {};

var build$5 = {};

var arrays = {};

Object.defineProperty(arrays, "__esModule", { value: true });
arrays.arrayContentStartsWith = arrays.arrayContentEquals = void 0;
/**
 * Compares the content of two arrays-like objects for equality.
 *
 * Equality is defined as having equal length and element values, where element equality means `===` returning `true`.
 *
 * This allows you to compare the content of a Buffer, Uint8Array or number[], ignoring the specific type.
 * As a consequence, this returns different results than Jasmine's `toEqual`, which ensures elements have the same type.
 */
function arrayContentEquals(a, b) {
    if (a.length !== b.length)
        return false;
    for (let i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
            return false;
    }
    return true;
}
arrays.arrayContentEquals = arrayContentEquals;
/**
 * Checks if `a` starts with the contents of `b`.
 *
 * This requires equality of the element values, where element equality means `===` returning `true`.
 *
 * This allows you to compare the content of a Buffer, Uint8Array or number[], ignoring the specific type.
 * As a consequence, this returns different results than Jasmine's `toEqual`, which ensures elements have the same type.
 */
function arrayContentStartsWith(a, b) {
    if (a.length < b.length)
        return false;
    for (let i = 0; i < b.length; ++i) {
        if (a[i] !== b[i])
            return false;
    }
    return true;
}
arrays.arrayContentStartsWith = arrayContentStartsWith;

var assert$i = {};

Object.defineProperty(assert$i, "__esModule", { value: true });
assert$i.assertDefinedAndNotNull = assert$i.assertDefined = assert$i.assert = void 0;
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function assert$h(condition, msg) {
    if (!condition) {
        throw new Error(msg || "condition is not truthy");
    }
}
assert$i.assert = assert$h;
function assertDefined(value, msg) {
    if (value === undefined) {
        throw new Error(msg ?? "value is undefined");
    }
}
assert$i.assertDefined = assertDefined;
function assertDefinedAndNotNull(value, msg) {
    if (value === undefined || value === null) {
        throw new Error(msg ?? "value is undefined or null");
    }
}
assert$i.assertDefinedAndNotNull = assertDefinedAndNotNull;

var sleep$1 = {};

Object.defineProperty(sleep$1, "__esModule", { value: true });
sleep$1.sleep = void 0;
async function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
sleep$1.sleep = sleep;

var typechecks = {};

Object.defineProperty(typechecks, "__esModule", { value: true });
typechecks.isDefined = typechecks.isUint8Array = typechecks.isNonNullObject = void 0;
/**
 * Checks if data is a non-null object (i.e. matches the TypeScript object type).
 *
 * Note: this returns true for arrays, which are objects in JavaScript
 * even though array and object are different types in JSON.
 *
 * @see https://www.typescriptlang.org/docs/handbook/basic-types.html#object
 */
// eslint-disable-next-line @typescript-eslint/ban-types
function isNonNullObject(data) {
    return typeof data === "object" && data !== null;
}
typechecks.isNonNullObject = isNonNullObject;
/**
 * Checks if data is an Uint8Array. Note: Buffer is treated as not a Uint8Array
 */
function isUint8Array(data) {
    if (!isNonNullObject(data))
        return false;
    // Avoid instanceof check which is unreliable in some JS environments
    // https://medium.com/@simonwarta/limitations-of-the-instanceof-operator-f4bcdbe7a400
    // Use check that was discussed in https://github.com/crypto-browserify/pbkdf2/pull/81
    if (Object.prototype.toString.call(data) !== "[object Uint8Array]")
        return false;
    if (typeof Buffer !== "undefined" && typeof Buffer.isBuffer !== "undefined") {
        // Buffer.isBuffer is available at runtime
        if (Buffer.isBuffer(data))
            return false;
    }
    return true;
}
typechecks.isUint8Array = isUint8Array;
/**
 * Checks if input is not undefined in a TypeScript-friendly way.
 *
 * This is convenient to use in e.g. `Array.filter` as it will convert
 * the type of a `Array<Foo | undefined>` to `Array<Foo>`.
 */
function isDefined(value) {
    return value !== undefined;
}
typechecks.isDefined = isDefined;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isUint8Array = exports.isNonNullObject = exports.isDefined = exports.sleep = exports.assertDefinedAndNotNull = exports.assertDefined = exports.assert = exports.arrayContentStartsWith = exports.arrayContentEquals = void 0;
	var arrays_1 = arrays;
	Object.defineProperty(exports, "arrayContentEquals", { enumerable: true, get: function () { return arrays_1.arrayContentEquals; } });
	Object.defineProperty(exports, "arrayContentStartsWith", { enumerable: true, get: function () { return arrays_1.arrayContentStartsWith; } });
	var assert_1 = assert$i;
	Object.defineProperty(exports, "assert", { enumerable: true, get: function () { return assert_1.assert; } });
	Object.defineProperty(exports, "assertDefined", { enumerable: true, get: function () { return assert_1.assertDefined; } });
	Object.defineProperty(exports, "assertDefinedAndNotNull", { enumerable: true, get: function () { return assert_1.assertDefinedAndNotNull; } });
	var sleep_1 = sleep$1;
	Object.defineProperty(exports, "sleep", { enumerable: true, get: function () { return sleep_1.sleep; } });
	var typechecks_1 = typechecks;
	Object.defineProperty(exports, "isDefined", { enumerable: true, get: function () { return typechecks_1.isDefined; } });
	Object.defineProperty(exports, "isNonNullObject", { enumerable: true, get: function () { return typechecks_1.isNonNullObject; } });
	Object.defineProperty(exports, "isUint8Array", { enumerable: true, get: function () { return typechecks_1.isUint8Array; } });
	
} (build$5));

var pbkdf2$1 = {};

var _assert = {};

Object.defineProperty(_assert, "__esModule", { value: true });
_assert.output = _assert.exists = _assert.hash = _assert.bytes = _assert.bool = _assert.number = void 0;
function number(n) {
    if (!Number.isSafeInteger(n) || n < 0)
        throw new Error(`Wrong positive integer: ${n}`);
}
_assert.number = number;
function bool(b) {
    if (typeof b !== 'boolean')
        throw new Error(`Expected boolean, not ${b}`);
}
_assert.bool = bool;
function bytes(b, ...lengths) {
    if (!(b instanceof Uint8Array))
        throw new TypeError('Expected Uint8Array');
    if (lengths.length > 0 && !lengths.includes(b.length))
        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}
_assert.bytes = bytes;
function hash$3(hash) {
    if (typeof hash !== 'function' || typeof hash.create !== 'function')
        throw new Error('Hash should be wrapped by utils.wrapConstructor');
    number(hash.outputLen);
    number(hash.blockLen);
}
_assert.hash = hash$3;
function exists(instance, checkFinished = true) {
    if (instance.destroyed)
        throw new Error('Hash instance has been destroyed');
    if (checkFinished && instance.finished)
        throw new Error('Hash#digest() has already been called');
}
_assert.exists = exists;
function output(out, instance) {
    bytes(out);
    const min = instance.outputLen;
    if (out.length < min) {
        throw new Error(`digestInto() expects output buffer of length at least ${min}`);
    }
}
_assert.output = output;
const assert$g = {
    number,
    bool,
    bytes,
    hash: hash$3,
    exists,
    output,
};
_assert.default = assert$g;

var hmac$2 = {};

var utils$z = {};

var crypto$2 = {};

Object.defineProperty(crypto$2, "__esModule", { value: true });
crypto$2.crypto = void 0;
crypto$2.crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;

(function (exports) {
	/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;
	// We use `globalThis.crypto`, but node.js versions earlier than v19 don't
	// declare it in global scope. For node.js, package.json#exports field mapping
	// rewrites import from `crypto` to `cryptoNode`, which imports native module.
	// Makes the utils un-importable in browsers without a bundler.
	// Once node.js 18 is deprecated, we can just drop the import.
	const crypto_1 = crypto$2;
	// Cast array to different type
	const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
	exports.u8 = u8;
	const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
	exports.u32 = u32;
	// Cast array to view
	const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
	exports.createView = createView;
	// The rotate right (circular right shift) operation for uint32
	const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);
	exports.rotr = rotr;
	// big-endian hardware is rare. Just in case someone still decides to run hashes:
	// early-throw an error because we don't support BE yet.
	exports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;
	if (!exports.isLE)
	    throw new Error('Non little-endian hardware is not supported');
	const hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));
	/**
	 * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef])) // 'deadbeef'
	 */
	function bytesToHex(uint8a) {
	    // pre-caching improves the speed 6x
	    if (!(uint8a instanceof Uint8Array))
	        throw new Error('Uint8Array expected');
	    let hex = '';
	    for (let i = 0; i < uint8a.length; i++) {
	        hex += hexes[uint8a[i]];
	    }
	    return hex;
	}
	exports.bytesToHex = bytesToHex;
	/**
	 * @example hexToBytes('deadbeef') // Uint8Array.from([0xde, 0xad, 0xbe, 0xef])
	 */
	function hexToBytes(hex) {
	    if (typeof hex !== 'string') {
	        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);
	    }
	    if (hex.length % 2)
	        throw new Error('hexToBytes: received invalid unpadded hex');
	    const array = new Uint8Array(hex.length / 2);
	    for (let i = 0; i < array.length; i++) {
	        const j = i * 2;
	        const hexByte = hex.slice(j, j + 2);
	        const byte = Number.parseInt(hexByte, 16);
	        if (Number.isNaN(byte) || byte < 0)
	            throw new Error('Invalid byte sequence');
	        array[i] = byte;
	    }
	    return array;
	}
	exports.hexToBytes = hexToBytes;
	// There is no setImmediate in browser and setTimeout is slow.
	// call of async fn will return Promise, which will be fullfiled only on
	// next scheduler queue processing step and this is exactly what we need.
	const nextTick = async () => { };
	exports.nextTick = nextTick;
	// Returns control to thread each 'tick' ms to avoid blocking
	async function asyncLoop(iters, tick, cb) {
	    let ts = Date.now();
	    for (let i = 0; i < iters; i++) {
	        cb(i);
	        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
	        const diff = Date.now() - ts;
	        if (diff >= 0 && diff < tick)
	            continue;
	        await (0, exports.nextTick)();
	        ts += diff;
	    }
	}
	exports.asyncLoop = asyncLoop;
	function utf8ToBytes(str) {
	    if (typeof str !== 'string') {
	        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);
	    }
	    return new TextEncoder().encode(str);
	}
	exports.utf8ToBytes = utf8ToBytes;
	function toBytes(data) {
	    if (typeof data === 'string')
	        data = utf8ToBytes(data);
	    if (!(data instanceof Uint8Array))
	        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);
	    return data;
	}
	exports.toBytes = toBytes;
	/**
	 * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`
	 * @example concatBytes(buf1, buf2)
	 */
	function concatBytes(...arrays) {
	    if (!arrays.every((a) => a instanceof Uint8Array))
	        throw new Error('Uint8Array list expected');
	    if (arrays.length === 1)
	        return arrays[0];
	    const length = arrays.reduce((a, arr) => a + arr.length, 0);
	    const result = new Uint8Array(length);
	    for (let i = 0, pad = 0; i < arrays.length; i++) {
	        const arr = arrays[i];
	        result.set(arr, pad);
	        pad += arr.length;
	    }
	    return result;
	}
	exports.concatBytes = concatBytes;
	// For runtime check if class implements interface
	class Hash {
	    // Safe version that clones internal state
	    clone() {
	        return this._cloneInto();
	    }
	}
	exports.Hash = Hash;
	// Check if object doens't have custom constructor (like Uint8Array/Array)
	const isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;
	function checkOpts(defaults, opts) {
	    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))
	        throw new TypeError('Options should be object or undefined');
	    const merged = Object.assign(defaults, opts);
	    return merged;
	}
	exports.checkOpts = checkOpts;
	function wrapConstructor(hashConstructor) {
	    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();
	    const tmp = hashConstructor();
	    hashC.outputLen = tmp.outputLen;
	    hashC.blockLen = tmp.blockLen;
	    hashC.create = () => hashConstructor();
	    return hashC;
	}
	exports.wrapConstructor = wrapConstructor;
	function wrapConstructorWithOpts(hashCons) {
	    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
	    const tmp = hashCons({});
	    hashC.outputLen = tmp.outputLen;
	    hashC.blockLen = tmp.blockLen;
	    hashC.create = (opts) => hashCons(opts);
	    return hashC;
	}
	exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
	/**
	 * Secure PRNG. Uses `globalThis.crypto` or node.js crypto module.
	 */
	function randomBytes(bytesLength = 32) {
	    if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === 'function') {
	        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
	    }
	    throw new Error('crypto.getRandomValues must be defined');
	}
	exports.randomBytes = randomBytes;
	
} (utils$z));

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.hmac = void 0;
	const _assert_js_1 = _assert;
	const utils_js_1 = utils$z;
	// HMAC (RFC 2104)
	class HMAC extends utils_js_1.Hash {
	    constructor(hash, _key) {
	        super();
	        this.finished = false;
	        this.destroyed = false;
	        _assert_js_1.default.hash(hash);
	        const key = (0, utils_js_1.toBytes)(_key);
	        this.iHash = hash.create();
	        if (typeof this.iHash.update !== 'function')
	            throw new TypeError('Expected instance of class which extends utils.Hash');
	        this.blockLen = this.iHash.blockLen;
	        this.outputLen = this.iHash.outputLen;
	        const blockLen = this.blockLen;
	        const pad = new Uint8Array(blockLen);
	        // blockLen can be bigger than outputLen
	        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
	        for (let i = 0; i < pad.length; i++)
	            pad[i] ^= 0x36;
	        this.iHash.update(pad);
	        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
	        this.oHash = hash.create();
	        // Undo internal XOR && apply outer XOR
	        for (let i = 0; i < pad.length; i++)
	            pad[i] ^= 0x36 ^ 0x5c;
	        this.oHash.update(pad);
	        pad.fill(0);
	    }
	    update(buf) {
	        _assert_js_1.default.exists(this);
	        this.iHash.update(buf);
	        return this;
	    }
	    digestInto(out) {
	        _assert_js_1.default.exists(this);
	        _assert_js_1.default.bytes(out, this.outputLen);
	        this.finished = true;
	        this.iHash.digestInto(out);
	        this.oHash.update(out);
	        this.oHash.digestInto(out);
	        this.destroy();
	    }
	    digest() {
	        const out = new Uint8Array(this.oHash.outputLen);
	        this.digestInto(out);
	        return out;
	    }
	    _cloneInto(to) {
	        // Create new instance without calling constructor since key already in state and we don't know it.
	        to || (to = Object.create(Object.getPrototypeOf(this), {}));
	        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
	        to = to;
	        to.finished = finished;
	        to.destroyed = destroyed;
	        to.blockLen = blockLen;
	        to.outputLen = outputLen;
	        to.oHash = oHash._cloneInto(to.oHash);
	        to.iHash = iHash._cloneInto(to.iHash);
	        return to;
	    }
	    destroy() {
	        this.destroyed = true;
	        this.oHash.destroy();
	        this.iHash.destroy();
	    }
	}
	/**
	 * HMAC: RFC2104 message authentication code.
	 * @param hash - function that would be used e.g. sha256
	 * @param key - message key
	 * @param message - message data
	 */
	const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
	exports.hmac = hmac;
	exports.hmac.create = (hash, key) => new HMAC(hash, key);
	
} (hmac$2));

Object.defineProperty(pbkdf2$1, "__esModule", { value: true });
pbkdf2$1.pbkdf2Async = pbkdf2$1.pbkdf2 = void 0;
const _assert_js_1$2 = _assert;
const hmac_js_1 = hmac$2;
const utils_js_1$5 = utils$z;
// Common prologue and epilogue for sync/async functions
function pbkdf2Init(hash, _password, _salt, _opts) {
    _assert_js_1$2.default.hash(hash);
    const opts = (0, utils_js_1$5.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);
    const { c, dkLen, asyncTick } = opts;
    _assert_js_1$2.default.number(c);
    _assert_js_1$2.default.number(dkLen);
    _assert_js_1$2.default.number(asyncTick);
    if (c < 1)
        throw new Error('PBKDF2: iterations (c) should be >= 1');
    const password = (0, utils_js_1$5.toBytes)(_password);
    const salt = (0, utils_js_1$5.toBytes)(_salt);
    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);
    const DK = new Uint8Array(dkLen);
    // U1 = PRF(Password, Salt + INT_32_BE(i))
    const PRF = hmac_js_1.hmac.create(hash, password);
    const PRFSalt = PRF._cloneInto().update(salt);
    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
}
function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
    PRF.destroy();
    PRFSalt.destroy();
    if (prfW)
        prfW.destroy();
    u.fill(0);
    return DK;
}
/**
 * PBKDF2-HMAC: RFC 2898 key derivation function
 * @param hash - hash function that would be used e.g. sha256
 * @param password - password from which a derived key is generated
 * @param salt - cryptographic salt
 * @param opts - {c, dkLen} where c is work factor and dkLen is output message size
 */
function pbkdf2(hash, password, salt, opts) {
    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
    let prfW; // Working copy
    const arr = new Uint8Array(4);
    const view = (0, utils_js_1$5.createView)(arr);
    const u = new Uint8Array(PRF.outputLen);
    // DK = T1 + T2 + ⋯ + Tdklen/hlen
    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        // Ti = F(Password, Salt, c, i)
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
        // U1 = PRF(Password, Salt + INT_32_BE(i))
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        for (let ui = 1; ui < c; ui++) {
            // Uc = PRF(Password, Uc−1)
            PRF._cloneInto(prfW).update(u).digestInto(u);
            for (let i = 0; i < Ti.length; i++)
                Ti[i] ^= u[i];
        }
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}
pbkdf2$1.pbkdf2 = pbkdf2;
async function pbkdf2Async(hash, password, salt, opts) {
    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
    let prfW; // Working copy
    const arr = new Uint8Array(4);
    const view = (0, utils_js_1$5.createView)(arr);
    const u = new Uint8Array(PRF.outputLen);
    // DK = T1 + T2 + ⋯ + Tdklen/hlen
    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        // Ti = F(Password, Salt, c, i)
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
        // U1 = PRF(Password, Salt + INT_32_BE(i))
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        await (0, utils_js_1$5.asyncLoop)(c - 1, asyncTick, (i) => {
            // Uc = PRF(Password, Uc−1)
            PRF._cloneInto(prfW).update(u).digestInto(u);
            for (let i = 0; i < Ti.length; i++)
                Ti[i] ^= u[i];
        });
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}
pbkdf2$1.pbkdf2Async = pbkdf2Async;

var sha512$1 = {};

var _sha2 = {};

Object.defineProperty(_sha2, "__esModule", { value: true });
_sha2.SHA2 = void 0;
const _assert_js_1$1 = _assert;
const utils_js_1$4 = utils$z;
// Polyfill for Safari 14
function setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === 'function')
        return view.setBigUint64(byteOffset, value, isLE);
    const _32n = BigInt(32);
    const _u32_max = BigInt(0xffffffff);
    const wh = Number((value >> _32n) & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
}
// Base SHA2 class (RFC 6234)
class SHA2 extends utils_js_1$4.Hash {
    constructor(blockLen, outputLen, padOffset, isLE) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_js_1$4.createView)(this.buffer);
    }
    update(data) {
        _assert_js_1$1.default.exists(this);
        const { view, buffer, blockLen } = this;
        data = (0, utils_js_1$4.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            // Fast path: we have at least one block in input, cast it to view and process
            if (take === blockLen) {
                const dataView = (0, utils_js_1$4.createView)(data);
                for (; blockLen <= len - pos; pos += blockLen)
                    this.process(dataView, pos);
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
            }
        }
        this.length += data.length;
        this.roundClean();
        return this;
    }
    digestInto(out) {
        _assert_js_1$1.default.exists(this);
        _assert_js_1$1.default.output(out, this);
        this.finished = true;
        // Padding
        // We can avoid allocation of buffer for padding completely if it
        // was previously not allocated here. But it won't change performance.
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        // append the bit '1' to the message
        buffer[pos++] = 0b10000000;
        this.buffer.subarray(pos).fill(0);
        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again
        if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
        }
        // Pad until full block byte with zeros
        for (let i = pos; i < blockLen; i++)
            buffer[i] = 0;
        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
        // So we just write lowest 64 bits of that value.
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0, utils_js_1$4.createView)(out);
        const len = this.outputLen;
        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
        if (len % 4)
            throw new Error('_sha2: outputLen should be aligned to 32bit');
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
            throw new Error('_sha2: outputLen bigger than state');
        for (let i = 0; i < outLen; i++)
            oview.setUint32(4 * i, state[i], isLE);
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen)
            to.buffer.set(buffer);
        return to;
    }
}
_sha2.SHA2 = SHA2;

var _u64 = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.add = exports.toBig = exports.split = exports.fromBig = void 0;
	const U32_MASK64 = BigInt(2 ** 32 - 1);
	const _32n = BigInt(32);
	// We are not using BigUint64Array, because they are extremely slow as per 2022
	function fromBig(n, le = false) {
	    if (le)
	        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };
	    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
	}
	exports.fromBig = fromBig;
	function split(lst, le = false) {
	    let Ah = new Uint32Array(lst.length);
	    let Al = new Uint32Array(lst.length);
	    for (let i = 0; i < lst.length; i++) {
	        const { h, l } = fromBig(lst[i], le);
	        [Ah[i], Al[i]] = [h, l];
	    }
	    return [Ah, Al];
	}
	exports.split = split;
	const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);
	exports.toBig = toBig;
	// for Shift in [0, 32)
	const shrSH = (h, l, s) => h >>> s;
	const shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
	// Right rotate for Shift in [1, 32)
	const rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));
	const rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
	// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
	const rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));
	const rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));
	// Right rotate for shift===32 (just swaps l&h)
	const rotr32H = (h, l) => l;
	const rotr32L = (h, l) => h;
	// Left rotate for Shift in [1, 32)
	const rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));
	const rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));
	// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
	const rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
	const rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));
	// JS uses 32-bit signed integers for bitwise operations which means we cannot
	// simple take carry out of low bit sum by shift, we need to use division.
	// Removing "export" has 5% perf penalty -_-
	function add(Ah, Al, Bh, Bl) {
	    const l = (Al >>> 0) + (Bl >>> 0);
	    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };
	}
	exports.add = add;
	// Addition with more than 2 elements
	const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
	const add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;
	const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
	const add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;
	const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
	const add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;
	// prettier-ignore
	const u64 = {
	    fromBig, split, toBig: exports.toBig,
	    shrSH, shrSL,
	    rotrSH, rotrSL, rotrBH, rotrBL,
	    rotr32H, rotr32L,
	    rotlSH, rotlSL, rotlBH, rotlBL,
	    add, add3L, add3H, add4L, add4H, add5H, add5L,
	};
	exports.default = u64;
	
} (_u64));

Object.defineProperty(sha512$1, "__esModule", { value: true });
sha512$1.sha384 = sha512$1.sha512_256 = sha512$1.sha512_224 = sha512$1.sha512 = sha512$1.SHA512 = void 0;
const _sha2_js_1$2 = _sha2;
const _u64_js_1$1 = _u64;
const utils_js_1$3 = utils$z;
// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):
// prettier-ignore
const [SHA512_Kh, SHA512_Kl] = _u64_js_1$1.default.split([
    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',
    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',
    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',
    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',
    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',
    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',
    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',
    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',
    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',
    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',
    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',
    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',
    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',
    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',
    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',
    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',
    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',
    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',
    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',
    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'
].map(n => BigInt(n)));
// Temporary buffer, not used to store anything between runs
const SHA512_W_H = new Uint32Array(80);
const SHA512_W_L = new Uint32Array(80);
let SHA512$2 = class SHA512 extends _sha2_js_1$2.SHA2 {
    constructor() {
        super(128, 64, 16, false);
        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
        // Also looks cleaner and easier to verify with spec.
        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = 0x6a09e667 | 0;
        this.Al = 0xf3bcc908 | 0;
        this.Bh = 0xbb67ae85 | 0;
        this.Bl = 0x84caa73b | 0;
        this.Ch = 0x3c6ef372 | 0;
        this.Cl = 0xfe94f82b | 0;
        this.Dh = 0xa54ff53a | 0;
        this.Dl = 0x5f1d36f1 | 0;
        this.Eh = 0x510e527f | 0;
        this.El = 0xade682d1 | 0;
        this.Fh = 0x9b05688c | 0;
        this.Fl = 0x2b3e6c1f | 0;
        this.Gh = 0x1f83d9ab | 0;
        this.Gl = 0xfb41bd6b | 0;
        this.Hh = 0x5be0cd19 | 0;
        this.Hl = 0x137e2179 | 0;
    }
    // prettier-ignore
    get() {
        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
    }
    // prettier-ignore
    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
        for (let i = 0; i < 16; i++, offset += 4) {
            SHA512_W_H[i] = view.getUint32(offset);
            SHA512_W_L[i] = view.getUint32((offset += 4));
        }
        for (let i = 16; i < 80; i++) {
            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
            const W15h = SHA512_W_H[i - 15] | 0;
            const W15l = SHA512_W_L[i - 15] | 0;
            const s0h = _u64_js_1$1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1$1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1$1.default.shrSH(W15h, W15l, 7);
            const s0l = _u64_js_1$1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1$1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1$1.default.shrSL(W15h, W15l, 7);
            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)
            const W2h = SHA512_W_H[i - 2] | 0;
            const W2l = SHA512_W_L[i - 2] | 0;
            const s1h = _u64_js_1$1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1$1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1$1.default.shrSH(W2h, W2l, 6);
            const s1l = _u64_js_1$1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1$1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1$1.default.shrSL(W2h, W2l, 6);
            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];
            const SUMl = _u64_js_1$1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
            const SUMh = _u64_js_1$1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
            SHA512_W_H[i] = SUMh | 0;
            SHA512_W_L[i] = SUMl | 0;
        }
        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        // Compression function main loop, 80 rounds
        for (let i = 0; i < 80; i++) {
            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
            const sigma1h = _u64_js_1$1.default.rotrSH(Eh, El, 14) ^ _u64_js_1$1.default.rotrSH(Eh, El, 18) ^ _u64_js_1$1.default.rotrBH(Eh, El, 41);
            const sigma1l = _u64_js_1$1.default.rotrSL(Eh, El, 14) ^ _u64_js_1$1.default.rotrSL(Eh, El, 18) ^ _u64_js_1$1.default.rotrBL(Eh, El, 41);
            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const CHIh = (Eh & Fh) ^ (~Eh & Gh);
            const CHIl = (El & Fl) ^ (~El & Gl);
            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
            // prettier-ignore
            const T1ll = _u64_js_1$1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
            const T1h = _u64_js_1$1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
            const T1l = T1ll | 0;
            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)
            const sigma0h = _u64_js_1$1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1$1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1$1.default.rotrBH(Ah, Al, 39);
            const sigma0l = _u64_js_1$1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1$1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1$1.default.rotrBL(Ah, Al, 39);
            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);
            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);
            Hh = Gh | 0;
            Hl = Gl | 0;
            Gh = Fh | 0;
            Gl = Fl | 0;
            Fh = Eh | 0;
            Fl = El | 0;
            ({ h: Eh, l: El } = _u64_js_1$1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
            Dh = Ch | 0;
            Dl = Cl | 0;
            Ch = Bh | 0;
            Cl = Bl | 0;
            Bh = Ah | 0;
            Bl = Al | 0;
            const All = _u64_js_1$1.default.add3L(T1l, sigma0l, MAJl);
            Ah = _u64_js_1$1.default.add3H(All, T1h, sigma0h, MAJh);
            Al = All | 0;
        }
        // Add the compressed chunk to the current hash value
        ({ h: Ah, l: Al } = _u64_js_1$1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh, l: Bl } = _u64_js_1$1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch, l: Cl } = _u64_js_1$1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh, l: Dl } = _u64_js_1$1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh, l: El } = _u64_js_1$1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh, l: Fl } = _u64_js_1$1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh, l: Gl } = _u64_js_1$1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh, l: Hl } = _u64_js_1$1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
    }
    roundClean() {
        SHA512_W_H.fill(0);
        SHA512_W_L.fill(0);
    }
    destroy() {
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
};
sha512$1.SHA512 = SHA512$2;
class SHA512_224 extends SHA512$2 {
    constructor() {
        super();
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = 0x8c3d37c8 | 0;
        this.Al = 0x19544da2 | 0;
        this.Bh = 0x73e19966 | 0;
        this.Bl = 0x89dcd4d6 | 0;
        this.Ch = 0x1dfab7ae | 0;
        this.Cl = 0x32ff9c82 | 0;
        this.Dh = 0x679dd514 | 0;
        this.Dl = 0x582f9fcf | 0;
        this.Eh = 0x0f6d2b69 | 0;
        this.El = 0x7bd44da8 | 0;
        this.Fh = 0x77e36f73 | 0;
        this.Fl = 0x04c48942 | 0;
        this.Gh = 0x3f9d85a8 | 0;
        this.Gl = 0x6a1d36c8 | 0;
        this.Hh = 0x1112e6ad | 0;
        this.Hl = 0x91d692a1 | 0;
        this.outputLen = 28;
    }
}
class SHA512_256 extends SHA512$2 {
    constructor() {
        super();
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = 0x22312194 | 0;
        this.Al = 0xfc2bf72c | 0;
        this.Bh = 0x9f555fa3 | 0;
        this.Bl = 0xc84c64c2 | 0;
        this.Ch = 0x2393b86b | 0;
        this.Cl = 0x6f53b151 | 0;
        this.Dh = 0x96387719 | 0;
        this.Dl = 0x5940eabd | 0;
        this.Eh = 0x96283ee2 | 0;
        this.El = 0xa88effe3 | 0;
        this.Fh = 0xbe5e1e25 | 0;
        this.Fl = 0x53863992 | 0;
        this.Gh = 0x2b0199fc | 0;
        this.Gl = 0x2c85b8aa | 0;
        this.Hh = 0x0eb72ddc | 0;
        this.Hl = 0x81c52ca2 | 0;
        this.outputLen = 32;
    }
}
let SHA384$1 = class SHA384 extends SHA512$2 {
    constructor() {
        super();
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = 0xcbbb9d5d | 0;
        this.Al = 0xc1059ed8 | 0;
        this.Bh = 0x629a292a | 0;
        this.Bl = 0x367cd507 | 0;
        this.Ch = 0x9159015a | 0;
        this.Cl = 0x3070dd17 | 0;
        this.Dh = 0x152fecd8 | 0;
        this.Dl = 0xf70e5939 | 0;
        this.Eh = 0x67332667 | 0;
        this.El = 0xffc00b31 | 0;
        this.Fh = 0x8eb44a87 | 0;
        this.Fl = 0x68581511 | 0;
        this.Gh = 0xdb0c2e0d | 0;
        this.Gl = 0x64f98fa7 | 0;
        this.Hh = 0x47b5481d | 0;
        this.Hl = 0xbefa4fa4 | 0;
        this.outputLen = 48;
    }
};
sha512$1.sha512 = (0, utils_js_1$3.wrapConstructor)(() => new SHA512$2());
sha512$1.sha512_224 = (0, utils_js_1$3.wrapConstructor)(() => new SHA512_224());
sha512$1.sha512_256 = (0, utils_js_1$3.wrapConstructor)(() => new SHA512_256());
sha512$1.sha384 = (0, utils_js_1$3.wrapConstructor)(() => new SHA384$1());

var __createBinding$i = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$i = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$i = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$i(result, mod, k);
    __setModuleDefault$i(result, mod);
    return result;
};
Object.defineProperty(pbkdf2$2, "__esModule", { value: true });
pbkdf2$2.pbkdf2Sha512 = pbkdf2$2.pbkdf2Sha512Noble = pbkdf2$2.pbkdf2Sha512NodeCrypto = pbkdf2$2.pbkdf2Sha512Subtle = pbkdf2$2.getSubtle = pbkdf2$2.getNodeCrypto = void 0;
const utils_1$i = build$5;
const pbkdf2_1$1 = pbkdf2$1;
const sha512_1$2 = sha512$1;
/**
 * Returns the Node.js crypto module when available and `undefined`
 * otherwise.
 *
 * Detects an unimplemented fallback module from Webpack 5 and returns
 * `undefined` in that case.
 */
async function getNodeCrypto() {
    try {
        const nodeCrypto = await Promise.resolve().then(() => __importStar$i(require("crypto")));
        // We get `Object{default: Object{}}` as a fallback when using
        // `crypto: false` in Webpack 5, which we interprete as unavailable.
        if (typeof nodeCrypto === "object" && Object.keys(nodeCrypto).length <= 1) {
            return undefined;
        }
        return nodeCrypto;
    }
    catch {
        return undefined;
    }
}
pbkdf2$2.getNodeCrypto = getNodeCrypto;
async function getSubtle() {
    // From Node.js 15 onwards, webcrypto is available in globalThis.
    // In version 15 and 16 this was stored under the webcrypto key.
    // With Node.js 17 it was moved to the same locations where browsers
    // make it available.
    // Loading `require("crypto")` here seems unnecessary since it only
    // causes issues with bundlers and does not increase compatibility.
    // Browsers and Node.js 17+
    let subtle = globalThis?.crypto?.subtle;
    // Node.js 15+
    if (!subtle)
        subtle = globalThis?.crypto?.webcrypto?.subtle;
    return subtle;
}
pbkdf2$2.getSubtle = getSubtle;
async function pbkdf2Sha512Subtle(
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
subtle, secret, salt, iterations, keylen) {
    (0, utils_1$i.assert)(subtle, "Argument subtle is falsy");
    (0, utils_1$i.assert)(typeof subtle === "object", "Argument subtle is not of type object");
    (0, utils_1$i.assert)(typeof subtle.importKey === "function", "subtle.importKey is not a function");
    (0, utils_1$i.assert)(typeof subtle.deriveBits === "function", "subtle.deriveBits is not a function");
    return subtle.importKey("raw", secret, { name: "PBKDF2" }, false, ["deriveBits"]).then((key) => subtle
        .deriveBits({
        name: "PBKDF2",
        salt: salt,
        iterations: iterations,
        hash: { name: "SHA-512" },
    }, key, keylen * 8)
        .then((buffer) => new Uint8Array(buffer)));
}
pbkdf2$2.pbkdf2Sha512Subtle = pbkdf2Sha512Subtle;
/**
 * Implements pbkdf2-sha512 using the Node.js crypro module (`import "crypto"`).
 * This does not use subtle from [Crypto](https://developer.mozilla.org/en-US/docs/Web/API/Crypto).
 */
async function pbkdf2Sha512NodeCrypto(
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
nodeCrypto, secret, salt, iterations, keylen) {
    (0, utils_1$i.assert)(nodeCrypto, "Argument nodeCrypto is falsy");
    (0, utils_1$i.assert)(typeof nodeCrypto === "object", "Argument nodeCrypto is not of type object");
    (0, utils_1$i.assert)(typeof nodeCrypto.pbkdf2 === "function", "nodeCrypto.pbkdf2 is not a function");
    return new Promise((resolve, reject) => {
        nodeCrypto.pbkdf2(secret, salt, iterations, keylen, "sha512", (error, result) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(Uint8Array.from(result));
            }
        });
    });
}
pbkdf2$2.pbkdf2Sha512NodeCrypto = pbkdf2Sha512NodeCrypto;
async function pbkdf2Sha512Noble(secret, salt, iterations, keylen) {
    return (0, pbkdf2_1$1.pbkdf2Async)(sha512_1$2.sha512, secret, salt, { c: iterations, dkLen: keylen });
}
pbkdf2$2.pbkdf2Sha512Noble = pbkdf2Sha512Noble;
/**
 * A pbkdf2 implementation for BIP39. This is not exported at package level and thus a private API.
 */
async function pbkdf2Sha512(secret, salt, iterations, keylen) {
    const subtle = await getSubtle();
    if (subtle) {
        return pbkdf2Sha512Subtle(subtle, secret, salt, iterations, keylen);
    }
    else {
        const nodeCrypto = await getNodeCrypto();
        if (nodeCrypto) {
            return pbkdf2Sha512NodeCrypto(nodeCrypto, secret, salt, iterations, keylen);
        }
        else {
            return pbkdf2Sha512Noble(secret, salt, iterations, keylen);
        }
    }
}
pbkdf2$2.pbkdf2Sha512 = pbkdf2Sha512;

var sha$1 = {};

var sha256$1 = {};

Object.defineProperty(sha256$1, "__esModule", { value: true });
sha256$1.sha224 = sha256$1.sha256 = void 0;
const _sha2_js_1$1 = _sha2;
const utils_js_1$2 = utils$z;
// Choice: a ? b : c
const Chi = (a, b, c) => (a & b) ^ (~a & c);
// Majority function, true if any two inpust is true
const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);
// Round constants:
// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
// prettier-ignore
const SHA256_K = new Uint32Array([
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
]);
// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
// prettier-ignore
const IV = new Uint32Array([
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
]);
// Temporary buffer, not used to store anything between runs
// Named this way because it matches specification.
const SHA256_W = new Uint32Array(64);
let SHA256$2 = class SHA256 extends _sha2_js_1$1.SHA2 {
    constructor() {
        super(64, 32, 8, false);
        // We cannot use array here since array allows indexing by variable
        // which means optimizer/compiler cannot use registers.
        this.A = IV[0] | 0;
        this.B = IV[1] | 0;
        this.C = IV[2] | 0;
        this.D = IV[3] | 0;
        this.E = IV[4] | 0;
        this.F = IV[5] | 0;
        this.G = IV[6] | 0;
        this.H = IV[7] | 0;
    }
    get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
        for (let i = 0; i < 16; i++, offset += 4)
            SHA256_W[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = (0, utils_js_1$2.rotr)(W15, 7) ^ (0, utils_js_1$2.rotr)(W15, 18) ^ (W15 >>> 3);
            const s1 = (0, utils_js_1$2.rotr)(W2, 17) ^ (0, utils_js_1$2.rotr)(W2, 19) ^ (W2 >>> 10);
            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;
        }
        // Compression function main loop, 64 rounds
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
            const sigma1 = (0, utils_js_1$2.rotr)(E, 6) ^ (0, utils_js_1$2.rotr)(E, 11) ^ (0, utils_js_1$2.rotr)(E, 25);
            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const sigma0 = (0, utils_js_1$2.rotr)(A, 2) ^ (0, utils_js_1$2.rotr)(A, 13) ^ (0, utils_js_1$2.rotr)(A, 22);
            const T2 = (sigma0 + Maj(A, B, C)) | 0;
            H = G;
            G = F;
            F = E;
            E = (D + T1) | 0;
            D = C;
            C = B;
            B = A;
            A = (T1 + T2) | 0;
        }
        // Add the compressed chunk to the current hash value
        A = (A + this.A) | 0;
        B = (B + this.B) | 0;
        C = (C + this.C) | 0;
        D = (D + this.D) | 0;
        E = (E + this.E) | 0;
        F = (F + this.F) | 0;
        G = (G + this.G) | 0;
        H = (H + this.H) | 0;
        this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
        SHA256_W.fill(0);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
    }
};
// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
let SHA224$1 = class SHA224 extends SHA256$2 {
    constructor() {
        super();
        this.A = 0xc1059ed8 | 0;
        this.B = 0x367cd507 | 0;
        this.C = 0x3070dd17 | 0;
        this.D = 0xf70e5939 | 0;
        this.E = 0xffc00b31 | 0;
        this.F = 0x68581511 | 0;
        this.G = 0x64f98fa7 | 0;
        this.H = 0xbefa4fa4 | 0;
        this.outputLen = 28;
    }
};
/**
 * SHA2-256 hash function
 * @param message - data that would be hashed
 */
sha256$1.sha256 = (0, utils_js_1$2.wrapConstructor)(() => new SHA256$2());
sha256$1.sha224 = (0, utils_js_1$2.wrapConstructor)(() => new SHA224$1());

var utils$y = {};

Object.defineProperty(utils$y, "__esModule", { value: true });
utils$y.toRealUint8Array = void 0;
// See https://github.com/paulmillr/noble-hashes/issues/25 for why this is needed
function toRealUint8Array(data) {
    if (data instanceof Uint8Array)
        return data;
    else
        return Uint8Array.from(data);
}
utils$y.toRealUint8Array = toRealUint8Array;

Object.defineProperty(sha$1, "__esModule", { value: true });
sha$1.sha512 = sha$1.Sha512 = sha$1.sha256 = sha$1.Sha256 = void 0;
const sha256_1$1 = sha256$1;
const sha512_1$1 = sha512$1;
const utils_1$h = utils$y;
class Sha256 {
    constructor(firstData) {
        this.blockSize = 512 / 8;
        this.impl = sha256_1$1.sha256.create();
        if (firstData) {
            this.update(firstData);
        }
    }
    update(data) {
        this.impl.update((0, utils_1$h.toRealUint8Array)(data));
        return this;
    }
    digest() {
        return this.impl.digest();
    }
}
sha$1.Sha256 = Sha256;
/** Convenience function equivalent to `new Sha256(data).digest()` */
function sha256(data) {
    return new Sha256(data).digest();
}
sha$1.sha256 = sha256;
class Sha512 {
    constructor(firstData) {
        this.blockSize = 1024 / 8;
        this.impl = sha512_1$1.sha512.create();
        if (firstData) {
            this.update(firstData);
        }
    }
    update(data) {
        this.impl.update((0, utils_1$h.toRealUint8Array)(data));
        return this;
    }
    digest() {
        return this.impl.digest();
    }
}
sha$1.Sha512 = Sha512;
/** Convenience function equivalent to `new Sha512(data).digest()` */
function sha512(data) {
    return new Sha512(data).digest();
}
sha$1.sha512 = sha512;

Object.defineProperty(bip39, "__esModule", { value: true });
bip39.Bip39 = bip39.EnglishMnemonic = bip39.mnemonicToEntropy = bip39.entropyToMnemonic = void 0;
const encoding_1$p = build$6;
const pbkdf2_1 = pbkdf2$2;
const sha_1 = sha$1;
const wordlist = [
    "abandon",
    "ability",
    "able",
    "about",
    "above",
    "absent",
    "absorb",
    "abstract",
    "absurd",
    "abuse",
    "access",
    "accident",
    "account",
    "accuse",
    "achieve",
    "acid",
    "acoustic",
    "acquire",
    "across",
    "act",
    "action",
    "actor",
    "actress",
    "actual",
    "adapt",
    "add",
    "addict",
    "address",
    "adjust",
    "admit",
    "adult",
    "advance",
    "advice",
    "aerobic",
    "affair",
    "afford",
    "afraid",
    "again",
    "age",
    "agent",
    "agree",
    "ahead",
    "aim",
    "air",
    "airport",
    "aisle",
    "alarm",
    "album",
    "alcohol",
    "alert",
    "alien",
    "all",
    "alley",
    "allow",
    "almost",
    "alone",
    "alpha",
    "already",
    "also",
    "alter",
    "always",
    "amateur",
    "amazing",
    "among",
    "amount",
    "amused",
    "analyst",
    "anchor",
    "ancient",
    "anger",
    "angle",
    "angry",
    "animal",
    "ankle",
    "announce",
    "annual",
    "another",
    "answer",
    "antenna",
    "antique",
    "anxiety",
    "any",
    "apart",
    "apology",
    "appear",
    "apple",
    "approve",
    "april",
    "arch",
    "arctic",
    "area",
    "arena",
    "argue",
    "arm",
    "armed",
    "armor",
    "army",
    "around",
    "arrange",
    "arrest",
    "arrive",
    "arrow",
    "art",
    "artefact",
    "artist",
    "artwork",
    "ask",
    "aspect",
    "assault",
    "asset",
    "assist",
    "assume",
    "asthma",
    "athlete",
    "atom",
    "attack",
    "attend",
    "attitude",
    "attract",
    "auction",
    "audit",
    "august",
    "aunt",
    "author",
    "auto",
    "autumn",
    "average",
    "avocado",
    "avoid",
    "awake",
    "aware",
    "away",
    "awesome",
    "awful",
    "awkward",
    "axis",
    "baby",
    "bachelor",
    "bacon",
    "badge",
    "bag",
    "balance",
    "balcony",
    "ball",
    "bamboo",
    "banana",
    "banner",
    "bar",
    "barely",
    "bargain",
    "barrel",
    "base",
    "basic",
    "basket",
    "battle",
    "beach",
    "bean",
    "beauty",
    "because",
    "become",
    "beef",
    "before",
    "begin",
    "behave",
    "behind",
    "believe",
    "below",
    "belt",
    "bench",
    "benefit",
    "best",
    "betray",
    "better",
    "between",
    "beyond",
    "bicycle",
    "bid",
    "bike",
    "bind",
    "biology",
    "bird",
    "birth",
    "bitter",
    "black",
    "blade",
    "blame",
    "blanket",
    "blast",
    "bleak",
    "bless",
    "blind",
    "blood",
    "blossom",
    "blouse",
    "blue",
    "blur",
    "blush",
    "board",
    "boat",
    "body",
    "boil",
    "bomb",
    "bone",
    "bonus",
    "book",
    "boost",
    "border",
    "boring",
    "borrow",
    "boss",
    "bottom",
    "bounce",
    "box",
    "boy",
    "bracket",
    "brain",
    "brand",
    "brass",
    "brave",
    "bread",
    "breeze",
    "brick",
    "bridge",
    "brief",
    "bright",
    "bring",
    "brisk",
    "broccoli",
    "broken",
    "bronze",
    "broom",
    "brother",
    "brown",
    "brush",
    "bubble",
    "buddy",
    "budget",
    "buffalo",
    "build",
    "bulb",
    "bulk",
    "bullet",
    "bundle",
    "bunker",
    "burden",
    "burger",
    "burst",
    "bus",
    "business",
    "busy",
    "butter",
    "buyer",
    "buzz",
    "cabbage",
    "cabin",
    "cable",
    "cactus",
    "cage",
    "cake",
    "call",
    "calm",
    "camera",
    "camp",
    "can",
    "canal",
    "cancel",
    "candy",
    "cannon",
    "canoe",
    "canvas",
    "canyon",
    "capable",
    "capital",
    "captain",
    "car",
    "carbon",
    "card",
    "cargo",
    "carpet",
    "carry",
    "cart",
    "case",
    "cash",
    "casino",
    "castle",
    "casual",
    "cat",
    "catalog",
    "catch",
    "category",
    "cattle",
    "caught",
    "cause",
    "caution",
    "cave",
    "ceiling",
    "celery",
    "cement",
    "census",
    "century",
    "cereal",
    "certain",
    "chair",
    "chalk",
    "champion",
    "change",
    "chaos",
    "chapter",
    "charge",
    "chase",
    "chat",
    "cheap",
    "check",
    "cheese",
    "chef",
    "cherry",
    "chest",
    "chicken",
    "chief",
    "child",
    "chimney",
    "choice",
    "choose",
    "chronic",
    "chuckle",
    "chunk",
    "churn",
    "cigar",
    "cinnamon",
    "circle",
    "citizen",
    "city",
    "civil",
    "claim",
    "clap",
    "clarify",
    "claw",
    "clay",
    "clean",
    "clerk",
    "clever",
    "click",
    "client",
    "cliff",
    "climb",
    "clinic",
    "clip",
    "clock",
    "clog",
    "close",
    "cloth",
    "cloud",
    "clown",
    "club",
    "clump",
    "cluster",
    "clutch",
    "coach",
    "coast",
    "coconut",
    "code",
    "coffee",
    "coil",
    "coin",
    "collect",
    "color",
    "column",
    "combine",
    "come",
    "comfort",
    "comic",
    "common",
    "company",
    "concert",
    "conduct",
    "confirm",
    "congress",
    "connect",
    "consider",
    "control",
    "convince",
    "cook",
    "cool",
    "copper",
    "copy",
    "coral",
    "core",
    "corn",
    "correct",
    "cost",
    "cotton",
    "couch",
    "country",
    "couple",
    "course",
    "cousin",
    "cover",
    "coyote",
    "crack",
    "cradle",
    "craft",
    "cram",
    "crane",
    "crash",
    "crater",
    "crawl",
    "crazy",
    "cream",
    "credit",
    "creek",
    "crew",
    "cricket",
    "crime",
    "crisp",
    "critic",
    "crop",
    "cross",
    "crouch",
    "crowd",
    "crucial",
    "cruel",
    "cruise",
    "crumble",
    "crunch",
    "crush",
    "cry",
    "crystal",
    "cube",
    "culture",
    "cup",
    "cupboard",
    "curious",
    "current",
    "curtain",
    "curve",
    "cushion",
    "custom",
    "cute",
    "cycle",
    "dad",
    "damage",
    "damp",
    "dance",
    "danger",
    "daring",
    "dash",
    "daughter",
    "dawn",
    "day",
    "deal",
    "debate",
    "debris",
    "decade",
    "december",
    "decide",
    "decline",
    "decorate",
    "decrease",
    "deer",
    "defense",
    "define",
    "defy",
    "degree",
    "delay",
    "deliver",
    "demand",
    "demise",
    "denial",
    "dentist",
    "deny",
    "depart",
    "depend",
    "deposit",
    "depth",
    "deputy",
    "derive",
    "describe",
    "desert",
    "design",
    "desk",
    "despair",
    "destroy",
    "detail",
    "detect",
    "develop",
    "device",
    "devote",
    "diagram",
    "dial",
    "diamond",
    "diary",
    "dice",
    "diesel",
    "diet",
    "differ",
    "digital",
    "dignity",
    "dilemma",
    "dinner",
    "dinosaur",
    "direct",
    "dirt",
    "disagree",
    "discover",
    "disease",
    "dish",
    "dismiss",
    "disorder",
    "display",
    "distance",
    "divert",
    "divide",
    "divorce",
    "dizzy",
    "doctor",
    "document",
    "dog",
    "doll",
    "dolphin",
    "domain",
    "donate",
    "donkey",
    "donor",
    "door",
    "dose",
    "double",
    "dove",
    "draft",
    "dragon",
    "drama",
    "drastic",
    "draw",
    "dream",
    "dress",
    "drift",
    "drill",
    "drink",
    "drip",
    "drive",
    "drop",
    "drum",
    "dry",
    "duck",
    "dumb",
    "dune",
    "during",
    "dust",
    "dutch",
    "duty",
    "dwarf",
    "dynamic",
    "eager",
    "eagle",
    "early",
    "earn",
    "earth",
    "easily",
    "east",
    "easy",
    "echo",
    "ecology",
    "economy",
    "edge",
    "edit",
    "educate",
    "effort",
    "egg",
    "eight",
    "either",
    "elbow",
    "elder",
    "electric",
    "elegant",
    "element",
    "elephant",
    "elevator",
    "elite",
    "else",
    "embark",
    "embody",
    "embrace",
    "emerge",
    "emotion",
    "employ",
    "empower",
    "empty",
    "enable",
    "enact",
    "end",
    "endless",
    "endorse",
    "enemy",
    "energy",
    "enforce",
    "engage",
    "engine",
    "enhance",
    "enjoy",
    "enlist",
    "enough",
    "enrich",
    "enroll",
    "ensure",
    "enter",
    "entire",
    "entry",
    "envelope",
    "episode",
    "equal",
    "equip",
    "era",
    "erase",
    "erode",
    "erosion",
    "error",
    "erupt",
    "escape",
    "essay",
    "essence",
    "estate",
    "eternal",
    "ethics",
    "evidence",
    "evil",
    "evoke",
    "evolve",
    "exact",
    "example",
    "excess",
    "exchange",
    "excite",
    "exclude",
    "excuse",
    "execute",
    "exercise",
    "exhaust",
    "exhibit",
    "exile",
    "exist",
    "exit",
    "exotic",
    "expand",
    "expect",
    "expire",
    "explain",
    "expose",
    "express",
    "extend",
    "extra",
    "eye",
    "eyebrow",
    "fabric",
    "face",
    "faculty",
    "fade",
    "faint",
    "faith",
    "fall",
    "false",
    "fame",
    "family",
    "famous",
    "fan",
    "fancy",
    "fantasy",
    "farm",
    "fashion",
    "fat",
    "fatal",
    "father",
    "fatigue",
    "fault",
    "favorite",
    "feature",
    "february",
    "federal",
    "fee",
    "feed",
    "feel",
    "female",
    "fence",
    "festival",
    "fetch",
    "fever",
    "few",
    "fiber",
    "fiction",
    "field",
    "figure",
    "file",
    "film",
    "filter",
    "final",
    "find",
    "fine",
    "finger",
    "finish",
    "fire",
    "firm",
    "first",
    "fiscal",
    "fish",
    "fit",
    "fitness",
    "fix",
    "flag",
    "flame",
    "flash",
    "flat",
    "flavor",
    "flee",
    "flight",
    "flip",
    "float",
    "flock",
    "floor",
    "flower",
    "fluid",
    "flush",
    "fly",
    "foam",
    "focus",
    "fog",
    "foil",
    "fold",
    "follow",
    "food",
    "foot",
    "force",
    "forest",
    "forget",
    "fork",
    "fortune",
    "forum",
    "forward",
    "fossil",
    "foster",
    "found",
    "fox",
    "fragile",
    "frame",
    "frequent",
    "fresh",
    "friend",
    "fringe",
    "frog",
    "front",
    "frost",
    "frown",
    "frozen",
    "fruit",
    "fuel",
    "fun",
    "funny",
    "furnace",
    "fury",
    "future",
    "gadget",
    "gain",
    "galaxy",
    "gallery",
    "game",
    "gap",
    "garage",
    "garbage",
    "garden",
    "garlic",
    "garment",
    "gas",
    "gasp",
    "gate",
    "gather",
    "gauge",
    "gaze",
    "general",
    "genius",
    "genre",
    "gentle",
    "genuine",
    "gesture",
    "ghost",
    "giant",
    "gift",
    "giggle",
    "ginger",
    "giraffe",
    "girl",
    "give",
    "glad",
    "glance",
    "glare",
    "glass",
    "glide",
    "glimpse",
    "globe",
    "gloom",
    "glory",
    "glove",
    "glow",
    "glue",
    "goat",
    "goddess",
    "gold",
    "good",
    "goose",
    "gorilla",
    "gospel",
    "gossip",
    "govern",
    "gown",
    "grab",
    "grace",
    "grain",
    "grant",
    "grape",
    "grass",
    "gravity",
    "great",
    "green",
    "grid",
    "grief",
    "grit",
    "grocery",
    "group",
    "grow",
    "grunt",
    "guard",
    "guess",
    "guide",
    "guilt",
    "guitar",
    "gun",
    "gym",
    "habit",
    "hair",
    "half",
    "hammer",
    "hamster",
    "hand",
    "happy",
    "harbor",
    "hard",
    "harsh",
    "harvest",
    "hat",
    "have",
    "hawk",
    "hazard",
    "head",
    "health",
    "heart",
    "heavy",
    "hedgehog",
    "height",
    "hello",
    "helmet",
    "help",
    "hen",
    "hero",
    "hidden",
    "high",
    "hill",
    "hint",
    "hip",
    "hire",
    "history",
    "hobby",
    "hockey",
    "hold",
    "hole",
    "holiday",
    "hollow",
    "home",
    "honey",
    "hood",
    "hope",
    "horn",
    "horror",
    "horse",
    "hospital",
    "host",
    "hotel",
    "hour",
    "hover",
    "hub",
    "huge",
    "human",
    "humble",
    "humor",
    "hundred",
    "hungry",
    "hunt",
    "hurdle",
    "hurry",
    "hurt",
    "husband",
    "hybrid",
    "ice",
    "icon",
    "idea",
    "identify",
    "idle",
    "ignore",
    "ill",
    "illegal",
    "illness",
    "image",
    "imitate",
    "immense",
    "immune",
    "impact",
    "impose",
    "improve",
    "impulse",
    "inch",
    "include",
    "income",
    "increase",
    "index",
    "indicate",
    "indoor",
    "industry",
    "infant",
    "inflict",
    "inform",
    "inhale",
    "inherit",
    "initial",
    "inject",
    "injury",
    "inmate",
    "inner",
    "innocent",
    "input",
    "inquiry",
    "insane",
    "insect",
    "inside",
    "inspire",
    "install",
    "intact",
    "interest",
    "into",
    "invest",
    "invite",
    "involve",
    "iron",
    "island",
    "isolate",
    "issue",
    "item",
    "ivory",
    "jacket",
    "jaguar",
    "jar",
    "jazz",
    "jealous",
    "jeans",
    "jelly",
    "jewel",
    "job",
    "join",
    "joke",
    "journey",
    "joy",
    "judge",
    "juice",
    "jump",
    "jungle",
    "junior",
    "junk",
    "just",
    "kangaroo",
    "keen",
    "keep",
    "ketchup",
    "key",
    "kick",
    "kid",
    "kidney",
    "kind",
    "kingdom",
    "kiss",
    "kit",
    "kitchen",
    "kite",
    "kitten",
    "kiwi",
    "knee",
    "knife",
    "knock",
    "know",
    "lab",
    "label",
    "labor",
    "ladder",
    "lady",
    "lake",
    "lamp",
    "language",
    "laptop",
    "large",
    "later",
    "latin",
    "laugh",
    "laundry",
    "lava",
    "law",
    "lawn",
    "lawsuit",
    "layer",
    "lazy",
    "leader",
    "leaf",
    "learn",
    "leave",
    "lecture",
    "left",
    "leg",
    "legal",
    "legend",
    "leisure",
    "lemon",
    "lend",
    "length",
    "lens",
    "leopard",
    "lesson",
    "letter",
    "level",
    "liar",
    "liberty",
    "library",
    "license",
    "life",
    "lift",
    "light",
    "like",
    "limb",
    "limit",
    "link",
    "lion",
    "liquid",
    "list",
    "little",
    "live",
    "lizard",
    "load",
    "loan",
    "lobster",
    "local",
    "lock",
    "logic",
    "lonely",
    "long",
    "loop",
    "lottery",
    "loud",
    "lounge",
    "love",
    "loyal",
    "lucky",
    "luggage",
    "lumber",
    "lunar",
    "lunch",
    "luxury",
    "lyrics",
    "machine",
    "mad",
    "magic",
    "magnet",
    "maid",
    "mail",
    "main",
    "major",
    "make",
    "mammal",
    "man",
    "manage",
    "mandate",
    "mango",
    "mansion",
    "manual",
    "maple",
    "marble",
    "march",
    "margin",
    "marine",
    "market",
    "marriage",
    "mask",
    "mass",
    "master",
    "match",
    "material",
    "math",
    "matrix",
    "matter",
    "maximum",
    "maze",
    "meadow",
    "mean",
    "measure",
    "meat",
    "mechanic",
    "medal",
    "media",
    "melody",
    "melt",
    "member",
    "memory",
    "mention",
    "menu",
    "mercy",
    "merge",
    "merit",
    "merry",
    "mesh",
    "message",
    "metal",
    "method",
    "middle",
    "midnight",
    "milk",
    "million",
    "mimic",
    "mind",
    "minimum",
    "minor",
    "minute",
    "miracle",
    "mirror",
    "misery",
    "miss",
    "mistake",
    "mix",
    "mixed",
    "mixture",
    "mobile",
    "model",
    "modify",
    "mom",
    "moment",
    "monitor",
    "monkey",
    "monster",
    "month",
    "moon",
    "moral",
    "more",
    "morning",
    "mosquito",
    "mother",
    "motion",
    "motor",
    "mountain",
    "mouse",
    "move",
    "movie",
    "much",
    "muffin",
    "mule",
    "multiply",
    "muscle",
    "museum",
    "mushroom",
    "music",
    "must",
    "mutual",
    "myself",
    "mystery",
    "myth",
    "naive",
    "name",
    "napkin",
    "narrow",
    "nasty",
    "nation",
    "nature",
    "near",
    "neck",
    "need",
    "negative",
    "neglect",
    "neither",
    "nephew",
    "nerve",
    "nest",
    "net",
    "network",
    "neutral",
    "never",
    "news",
    "next",
    "nice",
    "night",
    "noble",
    "noise",
    "nominee",
    "noodle",
    "normal",
    "north",
    "nose",
    "notable",
    "note",
    "nothing",
    "notice",
    "novel",
    "now",
    "nuclear",
    "number",
    "nurse",
    "nut",
    "oak",
    "obey",
    "object",
    "oblige",
    "obscure",
    "observe",
    "obtain",
    "obvious",
    "occur",
    "ocean",
    "october",
    "odor",
    "off",
    "offer",
    "office",
    "often",
    "oil",
    "okay",
    "old",
    "olive",
    "olympic",
    "omit",
    "once",
    "one",
    "onion",
    "online",
    "only",
    "open",
    "opera",
    "opinion",
    "oppose",
    "option",
    "orange",
    "orbit",
    "orchard",
    "order",
    "ordinary",
    "organ",
    "orient",
    "original",
    "orphan",
    "ostrich",
    "other",
    "outdoor",
    "outer",
    "output",
    "outside",
    "oval",
    "oven",
    "over",
    "own",
    "owner",
    "oxygen",
    "oyster",
    "ozone",
    "pact",
    "paddle",
    "page",
    "pair",
    "palace",
    "palm",
    "panda",
    "panel",
    "panic",
    "panther",
    "paper",
    "parade",
    "parent",
    "park",
    "parrot",
    "party",
    "pass",
    "patch",
    "path",
    "patient",
    "patrol",
    "pattern",
    "pause",
    "pave",
    "payment",
    "peace",
    "peanut",
    "pear",
    "peasant",
    "pelican",
    "pen",
    "penalty",
    "pencil",
    "people",
    "pepper",
    "perfect",
    "permit",
    "person",
    "pet",
    "phone",
    "photo",
    "phrase",
    "physical",
    "piano",
    "picnic",
    "picture",
    "piece",
    "pig",
    "pigeon",
    "pill",
    "pilot",
    "pink",
    "pioneer",
    "pipe",
    "pistol",
    "pitch",
    "pizza",
    "place",
    "planet",
    "plastic",
    "plate",
    "play",
    "please",
    "pledge",
    "pluck",
    "plug",
    "plunge",
    "poem",
    "poet",
    "point",
    "polar",
    "pole",
    "police",
    "pond",
    "pony",
    "pool",
    "popular",
    "portion",
    "position",
    "possible",
    "post",
    "potato",
    "pottery",
    "poverty",
    "powder",
    "power",
    "practice",
    "praise",
    "predict",
    "prefer",
    "prepare",
    "present",
    "pretty",
    "prevent",
    "price",
    "pride",
    "primary",
    "print",
    "priority",
    "prison",
    "private",
    "prize",
    "problem",
    "process",
    "produce",
    "profit",
    "program",
    "project",
    "promote",
    "proof",
    "property",
    "prosper",
    "protect",
    "proud",
    "provide",
    "public",
    "pudding",
    "pull",
    "pulp",
    "pulse",
    "pumpkin",
    "punch",
    "pupil",
    "puppy",
    "purchase",
    "purity",
    "purpose",
    "purse",
    "push",
    "put",
    "puzzle",
    "pyramid",
    "quality",
    "quantum",
    "quarter",
    "question",
    "quick",
    "quit",
    "quiz",
    "quote",
    "rabbit",
    "raccoon",
    "race",
    "rack",
    "radar",
    "radio",
    "rail",
    "rain",
    "raise",
    "rally",
    "ramp",
    "ranch",
    "random",
    "range",
    "rapid",
    "rare",
    "rate",
    "rather",
    "raven",
    "raw",
    "razor",
    "ready",
    "real",
    "reason",
    "rebel",
    "rebuild",
    "recall",
    "receive",
    "recipe",
    "record",
    "recycle",
    "reduce",
    "reflect",
    "reform",
    "refuse",
    "region",
    "regret",
    "regular",
    "reject",
    "relax",
    "release",
    "relief",
    "rely",
    "remain",
    "remember",
    "remind",
    "remove",
    "render",
    "renew",
    "rent",
    "reopen",
    "repair",
    "repeat",
    "replace",
    "report",
    "require",
    "rescue",
    "resemble",
    "resist",
    "resource",
    "response",
    "result",
    "retire",
    "retreat",
    "return",
    "reunion",
    "reveal",
    "review",
    "reward",
    "rhythm",
    "rib",
    "ribbon",
    "rice",
    "rich",
    "ride",
    "ridge",
    "rifle",
    "right",
    "rigid",
    "ring",
    "riot",
    "ripple",
    "risk",
    "ritual",
    "rival",
    "river",
    "road",
    "roast",
    "robot",
    "robust",
    "rocket",
    "romance",
    "roof",
    "rookie",
    "room",
    "rose",
    "rotate",
    "rough",
    "round",
    "route",
    "royal",
    "rubber",
    "rude",
    "rug",
    "rule",
    "run",
    "runway",
    "rural",
    "sad",
    "saddle",
    "sadness",
    "safe",
    "sail",
    "salad",
    "salmon",
    "salon",
    "salt",
    "salute",
    "same",
    "sample",
    "sand",
    "satisfy",
    "satoshi",
    "sauce",
    "sausage",
    "save",
    "say",
    "scale",
    "scan",
    "scare",
    "scatter",
    "scene",
    "scheme",
    "school",
    "science",
    "scissors",
    "scorpion",
    "scout",
    "scrap",
    "screen",
    "script",
    "scrub",
    "sea",
    "search",
    "season",
    "seat",
    "second",
    "secret",
    "section",
    "security",
    "seed",
    "seek",
    "segment",
    "select",
    "sell",
    "seminar",
    "senior",
    "sense",
    "sentence",
    "series",
    "service",
    "session",
    "settle",
    "setup",
    "seven",
    "shadow",
    "shaft",
    "shallow",
    "share",
    "shed",
    "shell",
    "sheriff",
    "shield",
    "shift",
    "shine",
    "ship",
    "shiver",
    "shock",
    "shoe",
    "shoot",
    "shop",
    "short",
    "shoulder",
    "shove",
    "shrimp",
    "shrug",
    "shuffle",
    "shy",
    "sibling",
    "sick",
    "side",
    "siege",
    "sight",
    "sign",
    "silent",
    "silk",
    "silly",
    "silver",
    "similar",
    "simple",
    "since",
    "sing",
    "siren",
    "sister",
    "situate",
    "six",
    "size",
    "skate",
    "sketch",
    "ski",
    "skill",
    "skin",
    "skirt",
    "skull",
    "slab",
    "slam",
    "sleep",
    "slender",
    "slice",
    "slide",
    "slight",
    "slim",
    "slogan",
    "slot",
    "slow",
    "slush",
    "small",
    "smart",
    "smile",
    "smoke",
    "smooth",
    "snack",
    "snake",
    "snap",
    "sniff",
    "snow",
    "soap",
    "soccer",
    "social",
    "sock",
    "soda",
    "soft",
    "solar",
    "soldier",
    "solid",
    "solution",
    "solve",
    "someone",
    "song",
    "soon",
    "sorry",
    "sort",
    "soul",
    "sound",
    "soup",
    "source",
    "south",
    "space",
    "spare",
    "spatial",
    "spawn",
    "speak",
    "special",
    "speed",
    "spell",
    "spend",
    "sphere",
    "spice",
    "spider",
    "spike",
    "spin",
    "spirit",
    "split",
    "spoil",
    "sponsor",
    "spoon",
    "sport",
    "spot",
    "spray",
    "spread",
    "spring",
    "spy",
    "square",
    "squeeze",
    "squirrel",
    "stable",
    "stadium",
    "staff",
    "stage",
    "stairs",
    "stamp",
    "stand",
    "start",
    "state",
    "stay",
    "steak",
    "steel",
    "stem",
    "step",
    "stereo",
    "stick",
    "still",
    "sting",
    "stock",
    "stomach",
    "stone",
    "stool",
    "story",
    "stove",
    "strategy",
    "street",
    "strike",
    "strong",
    "struggle",
    "student",
    "stuff",
    "stumble",
    "style",
    "subject",
    "submit",
    "subway",
    "success",
    "such",
    "sudden",
    "suffer",
    "sugar",
    "suggest",
    "suit",
    "summer",
    "sun",
    "sunny",
    "sunset",
    "super",
    "supply",
    "supreme",
    "sure",
    "surface",
    "surge",
    "surprise",
    "surround",
    "survey",
    "suspect",
    "sustain",
    "swallow",
    "swamp",
    "swap",
    "swarm",
    "swear",
    "sweet",
    "swift",
    "swim",
    "swing",
    "switch",
    "sword",
    "symbol",
    "symptom",
    "syrup",
    "system",
    "table",
    "tackle",
    "tag",
    "tail",
    "talent",
    "talk",
    "tank",
    "tape",
    "target",
    "task",
    "taste",
    "tattoo",
    "taxi",
    "teach",
    "team",
    "tell",
    "ten",
    "tenant",
    "tennis",
    "tent",
    "term",
    "test",
    "text",
    "thank",
    "that",
    "theme",
    "then",
    "theory",
    "there",
    "they",
    "thing",
    "this",
    "thought",
    "three",
    "thrive",
    "throw",
    "thumb",
    "thunder",
    "ticket",
    "tide",
    "tiger",
    "tilt",
    "timber",
    "time",
    "tiny",
    "tip",
    "tired",
    "tissue",
    "title",
    "toast",
    "tobacco",
    "today",
    "toddler",
    "toe",
    "together",
    "toilet",
    "token",
    "tomato",
    "tomorrow",
    "tone",
    "tongue",
    "tonight",
    "tool",
    "tooth",
    "top",
    "topic",
    "topple",
    "torch",
    "tornado",
    "tortoise",
    "toss",
    "total",
    "tourist",
    "toward",
    "tower",
    "town",
    "toy",
    "track",
    "trade",
    "traffic",
    "tragic",
    "train",
    "transfer",
    "trap",
    "trash",
    "travel",
    "tray",
    "treat",
    "tree",
    "trend",
    "trial",
    "tribe",
    "trick",
    "trigger",
    "trim",
    "trip",
    "trophy",
    "trouble",
    "truck",
    "true",
    "truly",
    "trumpet",
    "trust",
    "truth",
    "try",
    "tube",
    "tuition",
    "tumble",
    "tuna",
    "tunnel",
    "turkey",
    "turn",
    "turtle",
    "twelve",
    "twenty",
    "twice",
    "twin",
    "twist",
    "two",
    "type",
    "typical",
    "ugly",
    "umbrella",
    "unable",
    "unaware",
    "uncle",
    "uncover",
    "under",
    "undo",
    "unfair",
    "unfold",
    "unhappy",
    "uniform",
    "unique",
    "unit",
    "universe",
    "unknown",
    "unlock",
    "until",
    "unusual",
    "unveil",
    "update",
    "upgrade",
    "uphold",
    "upon",
    "upper",
    "upset",
    "urban",
    "urge",
    "usage",
    "use",
    "used",
    "useful",
    "useless",
    "usual",
    "utility",
    "vacant",
    "vacuum",
    "vague",
    "valid",
    "valley",
    "valve",
    "van",
    "vanish",
    "vapor",
    "various",
    "vast",
    "vault",
    "vehicle",
    "velvet",
    "vendor",
    "venture",
    "venue",
    "verb",
    "verify",
    "version",
    "very",
    "vessel",
    "veteran",
    "viable",
    "vibrant",
    "vicious",
    "victory",
    "video",
    "view",
    "village",
    "vintage",
    "violin",
    "virtual",
    "virus",
    "visa",
    "visit",
    "visual",
    "vital",
    "vivid",
    "vocal",
    "voice",
    "void",
    "volcano",
    "volume",
    "vote",
    "voyage",
    "wage",
    "wagon",
    "wait",
    "walk",
    "wall",
    "walnut",
    "want",
    "warfare",
    "warm",
    "warrior",
    "wash",
    "wasp",
    "waste",
    "water",
    "wave",
    "way",
    "wealth",
    "weapon",
    "wear",
    "weasel",
    "weather",
    "web",
    "wedding",
    "weekend",
    "weird",
    "welcome",
    "west",
    "wet",
    "whale",
    "what",
    "wheat",
    "wheel",
    "when",
    "where",
    "whip",
    "whisper",
    "wide",
    "width",
    "wife",
    "wild",
    "will",
    "win",
    "window",
    "wine",
    "wing",
    "wink",
    "winner",
    "winter",
    "wire",
    "wisdom",
    "wise",
    "wish",
    "witness",
    "wolf",
    "woman",
    "wonder",
    "wood",
    "wool",
    "word",
    "work",
    "world",
    "worry",
    "worth",
    "wrap",
    "wreck",
    "wrestle",
    "wrist",
    "write",
    "wrong",
    "yard",
    "year",
    "yellow",
    "you",
    "young",
    "youth",
    "zebra",
    "zero",
    "zone",
    "zoo",
];
function bytesToBitstring(bytes) {
    return Array.from(bytes)
        .map((byte) => byte.toString(2).padStart(8, "0"))
        .join("");
}
function deriveChecksumBits(entropy) {
    const entropyLengthBits = entropy.length * 8; // "ENT" (in bits)
    const checksumLengthBits = entropyLengthBits / 32; // "CS" (in bits)
    const hash = (0, sha_1.sha256)(entropy);
    return bytesToBitstring(hash).slice(0, checksumLengthBits);
}
function bitstringToByte(bin) {
    return parseInt(bin, 2);
}
const allowedEntropyLengths = [16, 20, 24, 28, 32];
const allowedWordLengths = [12, 15, 18, 21, 24];
function entropyToMnemonic(entropy) {
    if (allowedEntropyLengths.indexOf(entropy.length) === -1) {
        throw new Error("invalid input length");
    }
    const entropyBits = bytesToBitstring(entropy);
    const checksumBits = deriveChecksumBits(entropy);
    const bits = entropyBits + checksumBits;
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const chunks = bits.match(/(.{11})/g);
    const words = chunks.map((binary) => {
        const index = bitstringToByte(binary);
        return wordlist[index];
    });
    return words.join(" ");
}
bip39.entropyToMnemonic = entropyToMnemonic;
const invalidNumberOfWorks = "Invalid number of words";
const wordNotInWordlist = "Found word that is not in the wordlist";
const invalidEntropy = "Invalid entropy";
const invalidChecksum = "Invalid mnemonic checksum";
function normalize(str) {
    return str.normalize("NFKD");
}
function mnemonicToEntropy(mnemonic) {
    const words = normalize(mnemonic).split(" ");
    if (!allowedWordLengths.includes(words.length)) {
        throw new Error(invalidNumberOfWorks);
    }
    // convert word indices to 11 bit binary strings
    const bits = words
        .map((word) => {
        const index = wordlist.indexOf(word);
        if (index === -1) {
            throw new Error(wordNotInWordlist);
        }
        return index.toString(2).padStart(11, "0");
    })
        .join("");
    // split the binary string into ENT/CS
    const dividerIndex = Math.floor(bits.length / 33) * 32;
    const entropyBits = bits.slice(0, dividerIndex);
    const checksumBits = bits.slice(dividerIndex);
    // calculate the checksum and compare
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const entropyBytes = entropyBits.match(/(.{1,8})/g).map(bitstringToByte);
    if (entropyBytes.length < 16 || entropyBytes.length > 32 || entropyBytes.length % 4 !== 0) {
        throw new Error(invalidEntropy);
    }
    const entropy = Uint8Array.from(entropyBytes);
    const newChecksum = deriveChecksumBits(entropy);
    if (newChecksum !== checksumBits) {
        throw new Error(invalidChecksum);
    }
    return entropy;
}
bip39.mnemonicToEntropy = mnemonicToEntropy;
class EnglishMnemonic {
    constructor(mnemonic) {
        if (!EnglishMnemonic.mnemonicMatcher.test(mnemonic)) {
            throw new Error("Invalid mnemonic format");
        }
        const words = mnemonic.split(" ");
        const allowedWordsLengths = [12, 15, 18, 21, 24];
        if (allowedWordsLengths.indexOf(words.length) === -1) {
            throw new Error(`Invalid word count in mnemonic (allowed: ${allowedWordsLengths} got: ${words.length})`);
        }
        for (const word of words) {
            if (EnglishMnemonic.wordlist.indexOf(word) === -1) {
                throw new Error("Mnemonic contains invalid word");
            }
        }
        // Throws with informative error message if mnemonic is not valid
        mnemonicToEntropy(mnemonic);
        this.data = mnemonic;
    }
    toString() {
        return this.data;
    }
}
bip39.EnglishMnemonic = EnglishMnemonic;
EnglishMnemonic.wordlist = wordlist;
// list of space separated lower case words (1 or more)
EnglishMnemonic.mnemonicMatcher = /^[a-z]+( [a-z]+)*$/;
class Bip39 {
    /**
     * Encodes raw entropy of length 16, 20, 24, 28 or 32 bytes as an English mnemonic between 12 and 24 words.
     *
     * | Entropy            | Words |
     * |--------------------|-------|
     * | 128 bit (16 bytes) |    12 |
     * | 160 bit (20 bytes) |    15 |
     * | 192 bit (24 bytes) |    18 |
     * | 224 bit (28 bytes) |    21 |
     * | 256 bit (32 bytes) |    24 |
     *
     *
     * @see https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki#generating-the-mnemonic
     * @param entropy The entropy to be encoded. This must be cryptographically secure.
     */
    static encode(entropy) {
        return new EnglishMnemonic(entropyToMnemonic(entropy));
    }
    static decode(mnemonic) {
        return mnemonicToEntropy(mnemonic.toString());
    }
    static async mnemonicToSeed(mnemonic, password) {
        const mnemonicBytes = (0, encoding_1$p.toUtf8)(normalize(mnemonic.toString()));
        const salt = "mnemonic" + (password ? normalize(password) : "");
        const saltBytes = (0, encoding_1$p.toUtf8)(salt);
        return (0, pbkdf2_1.pbkdf2Sha512)(mnemonicBytes, saltBytes, 2048, 64);
    }
}
bip39.Bip39 = Bip39;

var hmac$1 = {};

Object.defineProperty(hmac$1, "__esModule", { value: true });
hmac$1.Hmac = void 0;
let Hmac$1 = class Hmac {
    constructor(hashFunctionConstructor, originalKey) {
        // This implementation is based on https://en.wikipedia.org/wiki/HMAC#Implementation
        // with the addition of incremental hashing support. Thus part of the algorithm
        // is in the constructor and the rest in digest().
        const blockSize = new hashFunctionConstructor().blockSize;
        this.hash = (data) => new hashFunctionConstructor().update(data).digest();
        let key = originalKey;
        if (key.length > blockSize) {
            key = this.hash(key);
        }
        if (key.length < blockSize) {
            const zeroPadding = new Uint8Array(blockSize - key.length);
            key = new Uint8Array([...key, ...zeroPadding]);
        }
        // eslint-disable-next-line no-bitwise
        this.oKeyPad = key.map((keyByte) => keyByte ^ 0x5c);
        // eslint-disable-next-line no-bitwise
        this.iKeyPad = key.map((keyByte) => keyByte ^ 0x36);
        this.messageHasher = new hashFunctionConstructor();
        this.blockSize = blockSize;
        this.update(this.iKeyPad);
    }
    update(data) {
        this.messageHasher.update(data);
        return this;
    }
    digest() {
        const innerHash = this.messageHasher.digest();
        return this.hash(new Uint8Array([...this.oKeyPad, ...innerHash]));
    }
};
hmac$1.Hmac = Hmac$1;

var keccak = {};

var sha3 = {};

Object.defineProperty(sha3, "__esModule", { value: true });
sha3.shake256 = sha3.shake128 = sha3.keccak_512 = sha3.keccak_384 = sha3.keccak_256 = sha3.keccak_224 = sha3.sha3_512 = sha3.sha3_384 = sha3.sha3_256 = sha3.sha3_224 = sha3.Keccak = sha3.keccakP = void 0;
const _assert_js_1 = _assert;
const _u64_js_1 = _u64;
const utils_js_1$1 = utils$z;
// Various per round constants calculations
const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
const _0n = BigInt(0);
const _1n = BigInt(1);
const _2n = BigInt(2);
const _7n = BigInt(7);
const _256n = BigInt(256);
const _0x71n = BigInt(0x71);
for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
    // Pi
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI.push(2 * (5 * y + x));
    // Rotational
    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);
    // Iota
    let t = _0n;
    for (let j = 0; j < 7; j++) {
        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;
        if (R & _2n)
            t ^= _1n << ((_1n << BigInt(j)) - _1n);
    }
    _SHA3_IOTA.push(t);
}
const [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true);
// Left rotation (without 0, 32, 64)
const rotlH = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);
const rotlL = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s);
// Same as keccakf1600, but allows to skip some rounds
function keccakP(s, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
    for (let round = 24 - rounds; round < 24; round++) {
        // Theta θ
        for (let x = 0; x < 10; x++)
            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for (let x = 0; x < 10; x += 2) {
            const idx1 = (x + 8) % 10;
            const idx0 = (x + 2) % 10;
            const B0 = B[idx0];
            const B1 = B[idx0 + 1];
            const Th = rotlH(B0, B1, 1) ^ B[idx1];
            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
            for (let y = 0; y < 50; y += 10) {
                s[x + y] ^= Th;
                s[x + y + 1] ^= Tl;
            }
        }
        // Rho (ρ) and Pi (π)
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
            const shift = SHA3_ROTL[t];
            const Th = rotlH(curH, curL, shift);
            const Tl = rotlL(curH, curL, shift);
            const PI = SHA3_PI[t];
            curH = s[PI];
            curL = s[PI + 1];
            s[PI] = Th;
            s[PI + 1] = Tl;
        }
        // Chi (χ)
        for (let y = 0; y < 50; y += 10) {
            for (let x = 0; x < 10; x++)
                B[x] = s[y + x];
            for (let x = 0; x < 10; x++)
                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        // Iota (ι)
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
    }
    B.fill(0);
}
sha3.keccakP = keccakP;
class Keccak extends utils_js_1$1.Hash {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        // Can be passed from user as dkLen
        _assert_js_1.default.number(outputLen);
        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
        if (0 >= this.blockLen || this.blockLen >= 200)
            throw new Error('Sha3 supports only keccak-f1600 function');
        this.state = new Uint8Array(200);
        this.state32 = (0, utils_js_1$1.u32)(this.state);
    }
    keccak() {
        keccakP(this.state32, this.rounds);
        this.posOut = 0;
        this.pos = 0;
    }
    update(data) {
        _assert_js_1.default.exists(this);
        const { blockLen, state } = this;
        data = (0, utils_js_1$1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            for (let i = 0; i < take; i++)
                state[this.pos++] ^= data[pos++];
            if (this.pos === blockLen)
                this.keccak();
        }
        return this;
    }
    finish() {
        if (this.finished)
            return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        // Do the padding
        state[pos] ^= suffix;
        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)
            this.keccak();
        state[blockLen - 1] ^= 0x80;
        this.keccak();
    }
    writeInto(out) {
        _assert_js_1.default.exists(this, false);
        _assert_js_1.default.bytes(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len;) {
            if (this.posOut >= blockLen)
                this.keccak();
            const take = Math.min(blockLen - this.posOut, len - pos);
            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
            this.posOut += take;
            pos += take;
        }
        return out;
    }
    xofInto(out) {
        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
        if (!this.enableXOF)
            throw new Error('XOF is not possible for this instance');
        return this.writeInto(out);
    }
    xof(bytes) {
        _assert_js_1.default.number(bytes);
        return this.xofInto(new Uint8Array(bytes));
    }
    digestInto(out) {
        _assert_js_1.default.output(out, this);
        if (this.finished)
            throw new Error('digest() was already called');
        this.writeInto(out);
        this.destroy();
        return out;
    }
    digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
        this.destroyed = true;
        this.state.fill(0);
    }
    _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        // Suffix can change in cSHAKE
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
    }
}
sha3.Keccak = Keccak;
const gen = (suffix, blockLen, outputLen) => (0, utils_js_1$1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));
sha3.sha3_224 = gen(0x06, 144, 224 / 8);
/**
 * SHA3-256 hash function
 * @param message - that would be hashed
 */
sha3.sha3_256 = gen(0x06, 136, 256 / 8);
sha3.sha3_384 = gen(0x06, 104, 384 / 8);
sha3.sha3_512 = gen(0x06, 72, 512 / 8);
sha3.keccak_224 = gen(0x01, 144, 224 / 8);
/**
 * keccak-256 hash function. Different from SHA3-256.
 * @param message - that would be hashed
 */
sha3.keccak_256 = gen(0x01, 136, 256 / 8);
sha3.keccak_384 = gen(0x01, 104, 384 / 8);
sha3.keccak_512 = gen(0x01, 72, 512 / 8);
const genShake = (suffix, blockLen, outputLen) => (0, utils_js_1$1.wrapConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));
sha3.shake128 = genShake(0x1f, 168, 128 / 8);
sha3.shake256 = genShake(0x1f, 136, 256 / 8);

Object.defineProperty(keccak, "__esModule", { value: true });
keccak.keccak256 = keccak.Keccak256 = void 0;
const sha3_1 = sha3;
const utils_1$g = utils$y;
class Keccak256 {
    constructor(firstData) {
        this.blockSize = 512 / 8;
        this.impl = sha3_1.keccak_256.create();
        if (firstData) {
            this.update(firstData);
        }
    }
    update(data) {
        this.impl.update((0, utils_1$g.toRealUint8Array)(data));
        return this;
    }
    digest() {
        return this.impl.digest();
    }
}
keccak.Keccak256 = Keccak256;
/** Convenience function equivalent to `new Keccak256(data).digest()` */
function keccak256(data) {
    return new Keccak256(data).digest();
}
keccak.keccak256 = keccak256;

var libsodium$1 = {};

var libsodiumWrappers = {};

var libsodium = {exports: {}};

var hasRequiredLibsodium;

function requireLibsodium () {
	if (hasRequiredLibsodium) return libsodium.exports;
	hasRequiredLibsodium = 1;
	(function (module, exports) {
		!function(A){function I(A){var I;void 0===(I=A)&&(I={});var g=I;"object"!=typeof g.sodium&&("object"==typeof commonjsGlobal?g=commonjsGlobal:"object"==typeof window&&(g=window));var C=I;return I.ready=new Promise((function(A,I){(i=C).onAbort=I,i.print=function(A){},i.printErr=function(A){},i.onRuntimeInitialized=function(){try{i._crypto_secretbox_keybytes(),A();}catch(A){I(A);}},i.useBackupModule=function(){return new Promise((function(A,I){(i={}).onAbort=I,i.onRuntimeInitialized=function(){Object.keys(C).forEach((function(A){"getRandomValue"!==A&&delete C[A];})),Object.keys(i).forEach((function(A){C[A]=i[A];})),A();};var g,B,Q,i=void 0!==i?i:{},E=Object.assign({},i),o="object"==typeof window,a="function"==typeof importScripts,n="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,r="";if(n){var f=require$$0$2,t=require$$1;r=a?t.dirname(r)+"/":__dirname+"/",g=(A,I)=>{var g=T(A);return g?I?g:g.toString():(A=x(A)?new URL(A):t.normalize(A),f.readFileSync(A,I?void 0:"utf8"))},Q=A=>{var I=g(A,!0);return I.buffer||(I=new Uint8Array(I)),I},B=(A,I,g)=>{var C=T(A);C&&I(C),A=x(A)?new URL(A):t.normalize(A),f.readFile(A,(function(A,C){A?g(A):I(C.buffer);}));},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),process.argv.slice(2),(module.exports=i),i.inspect=function(){return "[Emscripten Module object]"};}else (o||a)&&(a?r=self.location.href:"undefined"!=typeof document&&document.currentScript&&(r=document.currentScript.src),r=0!==r.indexOf("blob:")?r.substr(0,r.replace(/[?#].*/,"").lastIndexOf("/")+1):"",g=A=>{try{var I=new XMLHttpRequest;return I.open("GET",A,!1),I.send(null),I.responseText}catch(I){var g=T(A);if(g)return function(A){for(var I=[],g=0;g<A.length;g++){var C=A[g];C>255&&(C&=255),I.push(String.fromCharCode(C));}return I.join("")}(g);throw I}},a&&(Q=A=>{try{var I=new XMLHttpRequest;return I.open("GET",A,!1),I.responseType="arraybuffer",I.send(null),new Uint8Array(I.response)}catch(I){var g=T(A);if(g)return g;throw I}}),B=(A,I,g)=>{var C=new XMLHttpRequest;C.open("GET",A,!0),C.responseType="arraybuffer",C.onload=()=>{if(200==C.status||0==C.status&&C.response)I(C.response);else {var B=T(A);B?I(B.buffer):g();}},C.onerror=g,C.send(null);});i.print;var e,c=i.printErr||void 0;Object.assign(i,E),E=null,i.arguments&&i.arguments,i.thisProgram&&i.thisProgram,i.quit&&i.quit,i.wasmBinary&&(e=i.wasmBinary),i.noExitRuntime;var y,D={Memory:function(A){this.buffer=new ArrayBuffer(65536*A.initial);},Module:function(A){},Instance:function(A,I){this.exports=function(A){for(var I,g=new Uint8Array(123),C=25;C>=0;--C)g[48+C]=52+C,g[65+C]=C,g[97+C]=26+C;function B(A,I,C){for(var B,Q,i=0,E=I,o=C.length,a=I+(3*o>>2)-("="==C[o-2])-("="==C[o-1]);i<o;i+=4)B=g[C.charCodeAt(i+1)],Q=g[C.charCodeAt(i+2)],A[E++]=g[C.charCodeAt(i)]<<2|B>>4,E<a&&(A[E++]=B<<4|Q>>2),E<a&&(A[E++]=Q<<6|g[C.charCodeAt(i+3)]);}function Q(){throw new Error("abort")}return g[43]=62,g[47]=63,function(A){var g=A.a,C=g.a,i=C.buffer;C.grow=function(A){A|=0;var g=0|rI(),B=g+A|0;if(g<B&&B<65536){var Q=new ArrayBuffer(r(B,65536));new Int8Array(Q).set(E),E=new Int8Array(Q),o=new Int32Array(Q),a=new Uint8Array(Q),n=new Uint32Array(Q),i=Q,C.buffer=i,I=a;}return g};var E=new Int8Array(i),o=(new Int32Array(i)),a=new Uint8Array(i),n=(new Uint32Array(i)),r=(Math.imul),f=(Math.clz32),t=(g.b),e=g.c,c=g.d,y=g.e,D=101744,w=0;function h(A,I){var g,C,B,Q,i,o=0,n=0,r=0,f=0,t=0,e=0,c=0,y=0,D=0,h=0,s=0,p=0,u=0,k=0,F=0,l=0,S=0,H=0,M=0,G=0,U=0,J=0,N=0,Y=0,b=0,_=0,K=0,P=0,v=0,m=0,d=0,L=0,R=0,x=0,j=0,X=0,q=0,z=0,V=0,O=0,T=0,W=0,Z=0,$=0,AA=0,IA=0,gA=0,CA=0,BA=0,QA=0,iA=0,EA=0,oA=0,aA=0,rA=0,fA=0,tA=0,eA=0,cA=0,yA=0,DA=0,wA=0,hA=0,sA=0,pA=0,uA=0,kA=0,FA=0,lA=0,SA=0,HA=0,MA=0,GA=0,UA=0;eA=a[I+40|0]|a[I+41|0]<<8|a[I+42|0]<<16|a[I+43|0]<<24,yA=o=a[I+44|0]|a[I+45|0]<<8|a[I+46|0]<<16|a[I+47|0]<<24,gA=a[I+104|0]|a[I+105|0]<<8|a[I+106|0]<<16|a[I+107|0]<<24,DA=o=a[I+108|0]|a[I+109|0]<<8|a[I+110|0]<<16|a[I+111|0]<<24,o=a[I+68|0]|a[I+69|0]<<8|a[I+70|0]<<16|a[I+71|0]<<24,q=a[I+64|0]|a[I+65|0]<<8|a[I+66|0]<<16|a[I+67|0]<<24,BA=o,HA=o=a[I+36|0]|a[I+37|0]<<8|a[I+38|0]<<16|a[I+39|0]<<24,S=o,oA=a[I+120|0]|a[I+121|0]<<8|a[I+122|0]<<16|a[I+123|0]<<24,pA=o=a[I+124|0]|a[I+125|0]<<8|a[I+126|0]<<16|a[I+127|0]<<24,B=o=a[I+92|0]|a[I+93|0]<<8|a[I+94|0]<<16|a[I+95|0]<<24,g=a[I+88|0]|a[I+89|0]<<8|a[I+90|0]<<16|a[I+91|0]<<24,X=o,EA=a[I+80|0]|a[I+81|0]<<8|a[I+82|0]<<16|a[I+83|0]<<24,hA=o=a[I+84|0]|a[I+85|0]<<8|a[I+86|0]<<16|a[I+87|0]<<24,z=o,QA=a[A+16|0]|a[A+17|0]<<8|a[A+18|0]<<16|a[A+19|0]<<24,o=(rA=a[A+52|0]|a[A+53|0]<<8|a[A+54|0]<<16|a[A+55|0]<<24)+S|0,x=(aA=a[A+48|0]|a[A+49|0]<<8|a[A+50|0]<<16|a[A+51|0]<<24)+(fA=a[I+32|0]|a[I+33|0]<<8|a[I+34|0]<<16|a[I+35|0]<<24)|0,o=(a[A+20|0]|a[A+21|0]<<8|a[A+22|0]<<16|a[A+23|0]<<24)+(aA>>>0>x>>>0?o+1|0:o)|0,o=(QA=(n=x)>>>0>(x=x+QA|0)>>>0?o+1|0:o)+yA|0,iA=cA=x+eA|0,cA=o=cA>>>0<x>>>0?o+1|0:o,x=nA(x^(a[A+80|0]|a[A+81|0]<<8|a[A+82|0]<<16|a[A+83|0]<<24)^-79577749,QA^(a[A+84|0]|a[A+85|0]<<8|a[A+86|0]<<16|a[A+87|0]<<24)^528734635,32),FA=o=w,o=o+1013904242|0,QA=x,T=o=(x=x-23791573|0)>>>0<4271175723?o+1|0:o,rA=nA(x^aA,o^rA,40),o=(o=cA)+(cA=w)|0,aA=nA(QA^(D=aA=rA+iA|0),FA^(h=D>>>0<rA>>>0?o+1|0:o),48),o=T+(L=w)|0,k=o=(aA=x+(s=aA)|0)>>>0<x>>>0?o+1|0:o,aA=o=nA(rA^(u=aA),cA^o,1),T=x=w,cA=a[I+24|0]|a[I+25|0]<<8|a[I+26|0]<<16|a[I+27|0]<<24,FA=o=a[I+28|0]|a[I+29|0]<<8|a[I+30|0]<<16|a[I+31|0]<<24,tA=a[A+8|0]|a[A+9|0]<<8|a[A+10|0]<<16|a[A+11|0]<<24,x=(rA=a[I+16|0]|a[I+17|0]<<8|a[I+18|0]<<16|a[I+19|0]<<24)+(QA=a[A+40|0]|a[A+41|0]<<8|a[A+42|0]<<16|a[A+43|0]<<24)|0,o=(MA=a[I+20|0]|a[I+21|0]<<8|a[I+22|0]<<16|a[I+23|0]<<24)+(UA=a[A+44|0]|a[A+45|0]<<8|a[A+46|0]<<16|a[A+47|0]<<24)|0,o=(a[A+12|0]|a[A+13|0]<<8|a[A+14|0]<<16|a[A+15|0]<<24)+(x>>>0<QA>>>0?o+1|0:o)|0,o=FA+(iA=(n=x)>>>0>(x=x+tA|0)>>>0?o+1|0:o)|0,o=(tA=x+cA|0)>>>0<x>>>0?o+1|0:o,n=nA(x^(a[A+72|0]|a[A+73|0]<<8|a[A+74|0]<<16|a[A+75|0]<<24)^725511199,iA^(a[A+76|0]|a[A+77|0]<<8|a[A+78|0]<<16|a[A+79|0]<<24)^-1694144372,32),e=nA(QA^(r=n-2067093701|0),UA^(m=(b=x=w)-((n>>>0<2067093701)+1150833018|0)|0),40),o=(R=w)+o|0,o=(Y=(F=x=e+tA|0)>>>0<e>>>0?o+1|0:o)+T|0,o=(F>>>0>(x=F+aA|0)>>>0?o+1|0:o)+z|0,o=(QA=(f=x)>>>0>(x=x+EA|0)>>>0?o+1|0:o)+X|0,P=X=x+g|0,y=o=X>>>0<x>>>0?o+1|0:o,p=aA,uA=T,T=x,iA=QA,aA=a[I+8|0]|a[I+9|0]<<8|a[I+10|0]<<16|a[I+11|0]<<24,x=o=a[I+12|0]|a[I+13|0]<<8|a[I+14|0]<<16|a[I+15|0]<<24,UA=o=a[0|A]|a[A+1|0]<<8|a[A+2|0]<<16|a[A+3|0]<<24,Q=QA=a[A+4|0]|a[A+5|0]<<8|a[A+6|0]<<16|a[A+7|0]<<24,z=o,o=(lA=a[I+4|0]|a[I+5|0]<<8|a[I+6|0]<<16|a[I+7|0]<<24)+(t=a[A+36|0]|a[A+37|0]<<8|a[A+38|0]<<16|a[A+39|0]<<24)|0,o=Q+((X=a[A+32|0]|a[A+33|0]<<8|a[A+34|0]<<16|a[A+35|0]<<24)>>>0>(f=X+(QA=a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24)|0)>>>0?o+1|0:o)|0,o=(tA=(z=f+z|0)>>>0<f>>>0?o+1|0:o)+x|0,sA=f=z+aA|0,f=o=f>>>0<z>>>0?o+1|0:o,c=X,X=nA(z^(a[0|(o=A- -64|0)]|a[o+1|0]<<8|a[o+2|0]<<16|a[o+3|0]<<24)^-1377402159,tA^(a[o+4|0]|a[o+5|0]<<8|a[o+6|0]<<16|a[o+7|0]<<24)^1359893119,32),tA=o=w,o=o+1779033703|0,z=X,U=o=(X=X-205731576|0)>>>0<4089235720?o+1|0:o,t=nA(c^(l=X),o^t,40),o=(K=w)+f|0,c=nA(z^(f=X=t+sA|0),tA^(H=t>>>0>f>>>0?o+1|0:o),48),o=nA(c^T,(Z=w)^iA,32),O=X=w,v=o,C=o=a[I+60|0]|a[I+61|0]<<8|a[I+62|0]<<16|a[I+63|0]<<24,tA=sA=a[I+56|0]|a[I+57|0]<<8|a[I+58|0]<<16|a[I+59|0]<<24,G=a[A+24|0]|a[A+25|0]<<8|a[A+26|0]<<16|a[A+27|0]<<24,X=(iA=a[I+48|0]|a[I+49|0]<<8|a[I+50|0]<<16|a[I+51|0]<<24)+(z=a[A+56|0]|a[A+57|0]<<8|a[A+58|0]<<16|a[A+59|0]<<24)|0,o=(SA=a[I+52|0]|a[I+53|0]<<8|a[I+54|0]<<16|a[I+55|0]<<24)+(_=a[A+60|0]|a[A+61|0]<<8|a[A+62|0]<<16|a[A+63|0]<<24)|0,o=(a[A+28|0]|a[A+29|0]<<8|a[A+30|0]<<16|a[A+31|0]<<24)+(X>>>0<z>>>0?o+1|0:o)|0,o=C+(T=(M=X)>>>0>(X=G+X|0)>>>0?o+1|0:o)|0,o=(G=X+tA|0)>>>0<X>>>0?o+1|0:o,T=nA(X^(a[A+88|0]|a[A+89|0]<<8|a[A+90|0]<<16|a[A+91|0]<<24)^327033209,T^(a[A+92|0]|a[A+93|0]<<8|a[A+94|0]<<16|a[A+95|0]<<24)^1541459225,32),z=nA(z^(tA=T+1595750129|0),(M=_)^(_=(J=X=w)-((T>>>0<2699217167)+1521486533|0)|0),40),o=(IA=w)+o|0,X=nA((G=X=z+G|0)^T,J^(M=G>>>0<z>>>0?o+1|0:o),48),o=_+($=w)|0,N=o=(X=tA+(_=X)|0)>>>0<tA>>>0?o+1|0:o,o=O+o|0,V=p^(T=v+(J=X)|0),p=o=T>>>0<J>>>0?o+1|0:o,tA=nA(V,o^uA,40),o=(uA=w)+y|0,X=nA(P=v^(y=X=tA+P|0),O^(v=y>>>0<tA>>>0?o+1|0:o),48),o=p+(CA=w)|0,O=o=(p=T+(P=X)|0)>>>0<T>>>0?o+1|0:o,X=(d=nA(p^tA,uA^o,1))+(T=a[I+72|0]|a[I+73|0]<<8|a[I+74|0]<<16|a[I+75|0]<<24)|0,o=(wA=w)+(uA=a[I+76|0]|a[I+77|0]<<8|a[I+78|0]<<16|a[I+79|0]<<24)|0,kA=X,j=X>>>0<T>>>0?o+1|0:o,W=DA,X=a[I+96|0]|a[I+97|0]<<8|a[I+98|0]<<16|a[I+99|0]<<24,tA=o=a[I+100|0]|a[I+101|0]<<8|a[I+102|0]<<16|a[I+103|0]<<24,z=(o=D)+(D=nA(J^z,N^IA,1))|0,o=(J=w)+h|0,o=(D>>>0>z>>>0?o+1|0:o)+tA|0,o=(h=(h=z)>>>0>(z=X+z|0)>>>0?o+1|0:o)+W|0,V=N=z+gA|0,N=o=N>>>0<z>>>0?o+1|0:o,F=nA(n^F,Y^b,48),Y=o=nA(F^z,(b=w)^h,32),o=U+Z|0,o=(IA=z=w)+(l=(z=c+l|0)>>>0<c>>>0?o+1|0:o)|0,U=o=(h=z)>>>0>(c=h+Y|0)>>>0?o+1|0:o,D=nA(c^D,J^o,40),o=(Z=w)+N|0,o=(J=D>>>0>(N=z=D+V|0)>>>0?o+1|0:o)+j|0,o=(n=N>>>0>(z=N+kA|0)>>>0?o+1|0:o)+pA|0,kA=j=z+oA|0,j=o=j>>>0<z>>>0?o+1|0:o,V=z,W=n,z=a[I+116|0]|a[I+117|0]<<8|a[I+118|0]<<16|a[I+119|0]<<24,I=a[I+112|0]|a[I+113|0]<<8|a[I+114|0]<<16|a[I+115|0]<<24,t=nA(t^h,l^K,1),o=(K=w)+M|0,o=((n=t+G|0)>>>0<t>>>0?o+1|0:o)+z|0,o=(h=(l=n)>>>0>(n=I+n|0)>>>0?o+1|0:o)+pA|0,GA=l=n+oA|0,l=o=l>>>0<n>>>0?o+1|0:o,o=nA(n^s,h^L,32),AA=n=w,s=o,h=n,o=b+m|0,F=n=r+F|0,G=o=n>>>0<r>>>0?o+1|0:o,o=o+h|0,M=n=n+s|0,L=o=F>>>0>n>>>0?o+1|0:o,h=nA(n^t,K^o,40),o=(K=w)+l|0,s=nA((n=h+GA|0)^s,AA^(r=n>>>0<h>>>0?o+1|0:o),48),o=nA(s^V,(GA=w)^W,32),AA=t=w,l=o,V=t,e=nA(e^F,G^R,1),o=H+(F=w)|0,o=((t=f)>>>0>(f=f+e|0)>>>0?o+1|0:o)+BA|0,o=(f=(t=f+q|0)>>>0<f>>>0?o+1|0:o)+uA|0,W=H=t+T|0,H=o=H>>>0<t>>>0?o+1|0:o,G=e,t=nA(t^_,f^$,32),o=(_=w)+k|0,u=nA(G^(f=e=t+u|0),(k=t>>>0>f>>>0?o+1|0:o)^F,40),o=($=w)+H|0,F=e=u+W|0,e=nA(t^e,_^(H=e>>>0<u>>>0?o+1|0:o),48),o=k+(i=w)|0,k=e,_=o=(e=f+e|0)>>>0<f>>>0?o+1|0:o,o=o+V|0,o=(G=e)>>>0>(e=e+l|0)>>>0?o+1|0:o,V=e,e^=d,d=o,t=nA(e,wA^o,40),o=(wA=w)+j|0,j=e=t+kA|0,o=B+(W=t>>>0>e>>>0?o+1|0:o)|0,kA=e=e+g|0,b=o=e>>>0<g>>>0?o+1|0:o,e=n,m=gA,R=DA,n=nA(Y^N,J^IA,48),o=U+(IA=w)|0,Y=n,U=o=(f=c+n|0)>>>0<c>>>0?o+1|0:o,n=nA(f^D,Z^o,1),o=(c=w)+R|0,o=((D=n+m|0)>>>0<n>>>0?o+1|0:o)+r|0,o=SA+(e=(r=e+D|0)>>>0<D>>>0?o+1|0:o)|0,N=D=r+iA|0,D=o=D>>>0<iA>>>0?o+1|0:o,r=nA(r^k,e^i,32),o=O+(J=w)|0,k=r,p=o=(r=p+r|0)>>>0<p>>>0?o+1|0:o,e=nA(n^r,o^c,40),o=(o=D)+(D=w)|0,c=n=e+N|0,n=nA(n^k,J^(N=n>>>0<e>>>0?o+1|0:o),48),o=p+(Z=w)|0,J=n,O=o=(p=r+n|0)>>>0<r>>>0?o+1|0:o,n=nA(e^p,D^o,1),o=(D=w)+b|0,o=C+(e=(r=n+kA|0)>>>0<n>>>0?o+1|0:o)|0,kA=k=r+sA|0,k=o=k>>>0<sA>>>0?o+1|0:o,b=n,m=D,o=L+GA|0,o=(n=s+M|0)>>>0<s>>>0?o+1|0:o,s=n,M=o,o=nA(n^h,K^o,1),h=D=w,n=o,o=H+z|0,o=((F=I+F|0)>>>0<I>>>0?o+1|0:o)+D|0,o=hA+(F=(D=n+F|0)>>>0<F>>>0?o+1|0:o)|0,L=H=D+EA|0,H=o=H>>>0<EA>>>0?o+1|0:o,D=nA(D^P,F^CA,32),o=U+(P=w)|0,F=D,U=o=(U=f)>>>0>(f=f+D|0)>>>0?o+1|0:o,D=nA(n^f,o^h,40),o=(K=w)+H|0,h=n=D+L|0,n=nA(H=n^F,P^(F=n>>>0<D>>>0?o+1|0:o),48),o=U+(CA=w)|0,U=n,H=n=f+n|0,P=o=n>>>0<f>>>0?o+1|0:o,L=r,R=e,n=nA(u^G,_^$,1),o=(f=w)+S|0,o=v+((r=n+fA|0)>>>0<n>>>0?o+1|0:o)|0,o=BA+(e=(r=r+y|0)>>>0<y>>>0?o+1|0:o)|0,v=y=r+q|0,y=o=y>>>0<r>>>0?o+1|0:o,u=n,n=(r=nA(r^Y,e^IA,32))+s|0,o=(s=w)+M|0,e=n,f=nA(n^u,(Y=n>>>0<r>>>0?o+1|0:o)^f,40),o=(IA=w)+y|0,y=n=f+v|0,G=nA(n^r,s^(v=n>>>0<f>>>0?o+1|0:o),48),r=nA(G^L,(o=R)^(R=w),32),o=(L=w)+P|0,s=n=r+H|0,u=nA(n^b,(M=n>>>0<r>>>0?o+1|0:o)^m,40),o=(b=w)+k|0,k=n=u+kA|0,n=nA(n^r,L^(_=n>>>0<u>>>0?o+1|0:o),48),o=M+($=w)|0,M=n,L=o=(r=s)>>>0>(s=s+n|0)>>>0?o+1|0:o,n=nA(s^u,b^o,1),o=pA+(kA=w)|0,b=n,GA=n=oA+n|0,u=o=n>>>0<oA>>>0?o+1|0:o,r=eA,n=nA(D^H,K^P,1),o=N+(D=w)|0,o=((H=c)>>>0>(c=n+c|0)>>>0?o+1|0:o)+yA|0,o=(H=(r=r+c|0)>>>0<c>>>0?o+1|0:o)+FA|0,m=c=r+cA|0,N=o=c>>>0<r>>>0?o+1|0:o,P=n,c=nA(l^j,W^AA,48),o=nA(c^r,(K=w)^H,32),AA=n=w,l=o,r=n,o=Y+R|0,o=(n=e+G|0)>>>0<e>>>0?o+1|0:o,e=n,Y=o,o=o+r|0,H=n=n+l|0,G=o=e>>>0>n>>>0?o+1|0:o,r=nA(n^P,o^D,40),o=(o=N)+(N=w)|0,P=n=r+m|0,j=o=n>>>0<r>>>0?o+1|0:o,o=o+u|0,W=o=(D=n+GA|0)>>>0<n>>>0?o+1|0:o,u=o,n=nA(f^e,Y^IA,1),o=x+(f=w)|0,o=F+((e=n+aA|0)>>>0<aA>>>0?o+1|0:o)|0,o=tA+(h=(e=e+h|0)>>>0<h>>>0?o+1|0:o)|0,m=F=e+X|0,F=o=F>>>0<X>>>0?o+1|0:o,Y=n,o=nA(e^J,h^Z,32),R=n=w,e=o,h=n,o=K+d|0,J=n=c+V|0,d=o=n>>>0<c>>>0?o+1|0:o,o=o+h|0,o=(c=n+e|0)>>>0<n>>>0?o+1|0:o,n=c^Y,Y=o,h=nA(n,o^f,40),o=(Z=w)+F|0,f=n=h+m|0,V=nA(n^e,R^(F=n>>>0<h>>>0?o+1|0:o),48),o=nA(V^D,(IA=w)^u,32),GA=n=w,m=o,u=n,n=nA(t^J,d^wA,1),o=v+(t=w)|0,o=lA+((e=n+y|0)>>>0<y>>>0?o+1|0:o)|0,o=(y=(e=e+QA|0)>>>0<QA>>>0?o+1|0:o)+MA|0,J=v=e+rA|0,v=o=v>>>0<e>>>0?o+1|0:o,e=nA(e^U,y^CA,32),o=O+(d=w)|0,U=e,y=t,t=o=(e=p+e|0)>>>0<p>>>0?o+1|0:o,y=nA(n^e,y^o,40),o=(CA=w)+v|0,p=n=y+J|0,n=nA(J=n^U,d^(U=n>>>0<y>>>0?o+1|0:o),48),o=t+(K=w)|0,t=n,v=n=e+n|0,J=o=n>>>0<e>>>0?o+1|0:o,o=o+u|0,O=o=(u=n+m|0)>>>0<n>>>0?o+1|0:o,e=nA(u^b,kA^o,40),o=W+(d=w)|0,o=((n=e+D|0)>>>0<D>>>0?o+1|0:o)+DA|0,D=n,W=n=n+gA|0,b=o=D>>>0>n>>>0?o+1|0:o,R=BA,D=nA(l^P,j^AA,48),o=(wA=w)+G|0,l=n=D+H|0,o=nA(n^r,(H=n>>>0<D>>>0?o+1|0:o)^N,1),N=r=w,n=o,o=F+B|0,o=((f=f+g|0)>>>0<g>>>0?o+1|0:o)+r|0,o=(f=(r=n+f|0)>>>0<f>>>0?o+1|0:o)+R|0,G=F=r+q|0,F=o=F>>>0<r>>>0?o+1|0:o,r=nA(r^t,f^K,32),o=L+(P=w)|0,s=o=(t=r+s|0)>>>0<s>>>0?o+1|0:o,f=nA(n^t,o^N,40),o=(j=w)+F|0,F=n=f+G|0,r=nA(n^r,P^(N=n>>>0<f>>>0?o+1|0:o),48),o=s+(G=w)|0,P=o=(s=r+t|0)>>>0<t>>>0?o+1|0:o,n=nA(f^s,j^o,1),o=(j=w)+b|0,o=uA+((t=n+W|0)>>>0<n>>>0?o+1|0:o)|0,o=(f=(t=t+T|0)>>>0<T>>>0?o+1|0:o)+S|0,kA=S=t+fA|0,S=o=S>>>0<t>>>0?o+1|0:o,L=n,R=t,K=f,t=eA,n=nA(y^v,J^CA,1),o=_+(y=w)|0,o=((f=k)>>>0>(k=n+k|0)>>>0?o+1|0:o)+yA|0,o=MA+(f=(t=t+k|0)>>>0<k>>>0?o+1|0:o)|0,_=k=t+rA|0,v=o=k>>>0<rA>>>0?o+1|0:o,k=n,f=o=nA(t^D,f^wA,32),o=Y+IA|0,o=(J=n=w)+(c=(n=c+V|0)>>>0<c>>>0?o+1|0:o)|0,Y=o=(D=n+f|0)>>>0<n>>>0?o+1|0:o,k=nA(D^k,o^y,40),o=(IA=w)+v|0,v=nA(_=(t=k+_|0)^f,J^(f=t>>>0<k>>>0?o+1|0:o),48),o=nA(v^R,(CA=w)^K,32),wA=y=w,_=o,J=y,n=nA(n^h,c^Z,1),o=tA+(y=w)|0,o=U+((c=n+X|0)>>>0<X>>>0?o+1|0:o)|0,o=lA+(p=(c=c+p|0)>>>0<p>>>0?o+1|0:o)|0,R=h=c+QA|0,h=o=h>>>0<QA>>>0?o+1|0:o,U=n,V=y,c=nA(c^M,p^$,32),o=(M=w)+H|0,y=n=c+l|0,p=nA(n^U,(l=n>>>0<c>>>0?o+1|0:o)^V,40),o=(Z=w)+h|0,U=n=p+R|0,n=nA(n^c,M^(H=n>>>0<p>>>0?o+1|0:o),48),o=l+(R=w)|0,h=n,l=n=y+n|0,M=o=n>>>0<y>>>0?o+1|0:o,o=o+J|0,J=n=n+_|0,c=j,j=o=l>>>0>n>>>0?o+1|0:o,c=nA(n^L,c^o,40),o=(o=S)+(S=w)|0,V=n=c+kA|0,L=o=n>>>0<c>>>0?o+1|0:o,y=f,n=nA(m^W,b^GA,48),o=O+($=w)|0,O=n,f=(n=u+n|0)^e,e=o=n>>>0<u>>>0?o+1|0:o,f=nA(f,o^d,1),o=(d=w)+y|0,o=C+((t=f+t|0)>>>0<f>>>0?o+1|0:o)|0,o=(y=(t=t+sA|0)>>>0<sA>>>0?o+1|0:o)+x|0,W=u=t+aA|0,u=o=u>>>0<t>>>0?o+1|0:o,t=nA(t^h,y^R,32),o=P+(b=w)|0,P=t,s=o=(y=s+t|0)>>>0<s>>>0?o+1|0:o,f=nA(f^y,d^o,40),o=(o=u)+(u=w)|0,h=t=f+W|0,t=nA(m=t^P,b^(P=t>>>0<f>>>0?o+1|0:o),48),o=s+(kA=w)|0,d=t,W=o=(s=y+t|0)>>>0<y>>>0?o+1|0:o,t=nA(f^s,u^o,1),o=(u=w)+L|0,o=B+((f=t+V|0)>>>0<t>>>0?o+1|0:o)|0,o=z+(y=(f=f+g|0)>>>0<g>>>0?o+1|0:o)|0,GA=b=I+f|0,b=o=b>>>0<I>>>0?o+1|0:o,m=t,R=u,u=f,K=y,t=nA(p^l,M^Z,1),o=(y=w)+N|0,o=hA+((f=t+F|0)>>>0<t>>>0?o+1|0:o)|0,o=(p=(f=f+EA|0)>>>0<EA>>>0?o+1|0:o)+z|0,N=F=I+f|0,F=o=F>>>0<f>>>0?o+1|0:o,l=t,f=o=nA(f^O,p^$,32),p=t=w,o=Y+CA|0,Y=o=(t=D+v|0)>>>0<D>>>0?o+1|0:o,o=o+p|0,o=(D=t)>>>0>(t=t+f|0)>>>0?o+1|0:o,v=t,t^=l,l=o,y=nA(t,o^y,40),o=(Z=w)+F|0,p=nA(F=(t=y+N|0)^f,p^(f=t>>>0<y>>>0?o+1|0:o),48),o=nA(p^u,(o=K)^(K=w),32),$=u=w,F=o,N=e,e=r,o=nA(D^k,Y^IA,1),M=r=w,D=o,o=H+FA|0,o=((k=U+cA|0)>>>0<cA>>>0?o+1|0:o)+r|0,k=o=(r=D+k|0)>>>0<k>>>0?o+1|0:o,e=nA(r^e,o^G,32),o=(o=N)+(N=w)|0,D=nA((n=e+n|0)^D,M^(Y=n>>>0<e>>>0?o+1|0:o),40),o=k+(IA=w)|0,U=D,o=SA+((H=r)>>>0>(r=r+D|0)>>>0?o+1|0:o)|0,H=o=(D=r+iA|0)>>>0<iA>>>0?o+1|0:o,r=nA(e^D,N^o,48),o=Y+(CA=w)|0,G=n,e=r,Y=n=n+r|0,N=o=G>>>0>n>>>0?o+1|0:o,o=o+u|0,G=o=(u=n+F|0)>>>0<n>>>0?o+1|0:o,n=(k=nA(u^m,o^R,40))+GA|0,o=(GA=w)+b|0,M=n,O=n>>>0<k>>>0?o+1|0:o,n=nA(_^V,L^wA,48),o=(_=w)+j|0,J=r=n+J|0,m=S,S=o=r>>>0<n>>>0?o+1|0:o,o=nA(r^c,m^o,1),V=r=w,c=o,o=f+C|0,o=((t=t+sA|0)>>>0<sA>>>0?o+1|0:o)+r|0,o=uA+(t=(r=t+c|0)>>>0<t>>>0?o+1|0:o)|0,L=f=r+T|0,f=o=f>>>0<T>>>0?o+1|0:o,r=nA(r^e,t^CA,32),o=W+(b=w)|0,j=r,r=(e=s+r|0)^c,c=o=e>>>0<s>>>0?o+1|0:o,t=nA(r,V^o,40),o=(o=f)+(f=w)|0,V=r=t+L|0,r=nA(s=r^j,b^(j=r>>>0<t>>>0?o+1|0:o),48),o=c+(CA=w)|0,W=r,e=o=(r=e+r|0)>>>0<e>>>0?o+1|0:o,t=nA(r^t,f^o,1),o=(s=w)+O|0,o=pA+((f=t+M|0)>>>0<t>>>0?o+1|0:o)|0,o=(c=(f=f+oA|0)>>>0<oA>>>0?o+1|0:o)+BA|0,AA=L=f+q|0,L=o=L>>>0<f>>>0?o+1|0:o,b=t,m=f,R=c,t=nA(U^Y,N^IA,1),o=(N=w)+DA|0,o=P+(t>>>0>(f=t+gA|0)>>>0?o+1|0:o)|0,c=o=(f=f+h|0)>>>0<h>>>0?o+1|0:o,o=nA(n^f,o^_,32),_=n=w,h=o,o=l+K|0,o=(n=p+v|0)>>>0<p>>>0?o+1|0:o,p=n,Y=o,o=_+o|0,l=n=n+h|0,U=o=p>>>0>n>>>0?o+1|0:o,n=nA(n^t,N^o,40),o=c+(K=w)|0,v=n,o=tA+((n=f+n|0)>>>0<f>>>0?o+1|0:o)|0,o=(n=n+X|0)>>>0<X>>>0?o+1|0:o,N=n,n^=h,h=o,c=nA(n,_^o,48),o=nA(c^m,(o=R)^(R=w),32),IA=n=w,_=o,P=n,n=nA(y^p,Y^Z,1),o=FA+(f=w)|0,o=H+((t=n+cA|0)>>>0<cA>>>0?o+1|0:o)|0,o=(y=(t=t+D|0)>>>0<D>>>0?o+1|0:o)+x|0,H=p=t+aA|0,p=o=p>>>0<t>>>0?o+1|0:o,D=n,Y=f,n=(t=nA(t^d,y^kA,32))+J|0,o=(J=w)+S|0,f=n,y=nA(y=n^D,(D=n>>>0<t>>>0?o+1|0:o)^Y,40),o=(Z=w)+p|0,p=n=y+H|0,t=nA(n^t,J^(S=n>>>0<y>>>0?o+1|0:o),48),o=D+(Y=w)|0,H=n=t+f|0,J=o=n>>>0<f>>>0?o+1|0:o,o=o+P|0,P=o=(D=n+_|0)>>>0<n>>>0?o+1|0:o,f=nA(D^b,o^s,40),o=(d=w)+L|0,L=n=f+AA|0,b=o=n>>>0<f>>>0?o+1|0:o,n=r,s=e,e=t,r=nA(F^M,O^$,48),o=G+(AA=w)|0,F=r,u=o=(t=u+r|0)>>>0<u>>>0?o+1|0:o,o=nA(t^k,GA^o,1),G=r=w,k=o,o=h+HA|0,o=((h=N+fA|0)>>>0<fA>>>0?o+1|0:o)+r|0,h=o=(r=h+k|0)>>>0<h>>>0?o+1|0:o,e=nA(r^e,o^Y,32),o=(N=w)+s|0,k=nA((n=e+n|0)^k,G^(s=n>>>0<e>>>0?o+1|0:o),40),o=h+(M=w)|0,o=lA+((h=r)>>>0>(r=r+k|0)>>>0?o+1|0:o)|0,Y=o=(h=r+QA|0)>>>0<QA>>>0?o+1|0:o,r=nA(e^h,N^o,48),o=s+($=w)|0,N=r,G=o=(s=n+r|0)>>>0<n>>>0?o+1|0:o,n=nA(s^k,M^o,1),o=(k=w)+b|0,o=hA+((r=n+L|0)>>>0<n>>>0?o+1|0:o)|0,o=pA+(e=(r=r+EA|0)>>>0<EA>>>0?o+1|0:o)|0,wA=M=r+oA|0,M=o=M>>>0<oA>>>0?o+1|0:o,O=n,m=r,n=nA(y^H,J^Z,1),o=(y=w)+j|0,o=MA+((r=n+V|0)>>>0<n>>>0?o+1|0:o)|0,o=SA+(H=(r=r+rA|0)>>>0<rA>>>0?o+1|0:o)|0,V=J=r+iA|0,J=o=J>>>0<iA>>>0?o+1|0:o,j=n,o=nA(r^F,H^AA,32),AA=n=w,r=o,o=U+R|0,l=n=c+l|0,F=o=n>>>0<c>>>0?o+1|0:o,o=AA+o|0,U=o=(c=n+r|0)>>>0<n>>>0?o+1|0:o,y=nA(c^j,o^y,40),o=(R=w)+J|0,H=n=y+V|0,j=nA(n^r,AA^(J=n>>>0<y>>>0?o+1|0:o),48),o=nA(j^m,(AA=w)^e,32),Z=n=w,V=o,e=n,r=eA,n=nA(l^v,F^K,1),o=S+(F=w)|0,o=((l=p)>>>0>(p=n+p|0)>>>0?o+1|0:o)+yA|0,o=hA+(p=(r=r+p|0)>>>0<p>>>0?o+1|0:o)|0,l=S=r+EA|0,S=o=S>>>0<EA>>>0?o+1|0:o,r=nA(r^W,p^CA,32),o=u+(v=w)|0,u=r,o=(r=t+r|0)>>>0<t>>>0?o+1|0:o,t=F,F=o,t=nA(n^r,t^o,40),o=(K=w)+S|0,p=n=t+l|0,n=nA(n^u,v^(S=n>>>0<t>>>0?o+1|0:o),48),o=F+(m=w)|0,F=n,l=n=r+n|0,v=o=n>>>0<r>>>0?o+1|0:o,o=o+e|0,o=(u=n+V|0)>>>0<n>>>0?o+1|0:o,n=u^O,O=o,k=nA(n,o^k,40),o=(CA=w)+M|0,M=n=k+wA|0,W=n>>>0<k>>>0?o+1|0:o,n=nA(_^L,b^IA,48),o=P+(IA=w)|0,_=n,o=(n=D+n|0)>>>0<D>>>0?o+1|0:o,D=n,P=o,o=nA(n^f,o^d,1),d=n=w,e=o,o=J+uA|0,o=((r=H+T|0)>>>0<T>>>0?o+1|0:o)+n|0,o=lA+(r=(n=r+e|0)>>>0<r>>>0?o+1|0:o)|0,H=f=n+QA|0,f=o=f>>>0<QA>>>0?o+1|0:o,n=nA(n^F,r^m,32),o=G+(J=w)|0,F=n,s=o=(r=s+n|0)>>>0<s>>>0?o+1|0:o,e=nA(r^e,d^o,40),o=(d=w)+f|0,H=n=e+H|0,n=nA(f=n^F,J^(F=n>>>0<e>>>0?o+1|0:o),48),o=s+(wA=w)|0,s=n,G=o=(f=r+n|0)>>>0<r>>>0?o+1|0:o,n=nA(f^e,d^o,1),o=(J=w)+W|0,o=FA+((r=n+M|0)>>>0<n>>>0?o+1|0:o)|0,o=(e=(r=r+cA|0)>>>0<cA>>>0?o+1|0:o)+DA|0,kA=d=r+gA|0,d=o=d>>>0<r>>>0?o+1|0:o,L=n,b=r,m=e,n=nA(t^l,K^v,1),o=MA+(e=w)|0,o=Y+((r=n+rA|0)>>>0<rA>>>0?o+1|0:o)|0,o=HA+(t=(r=r+h|0)>>>0<h>>>0?o+1|0:o)|0,v=h=r+fA|0,h=o=h>>>0<fA>>>0?o+1|0:o,Y=n,l=e,o=nA(r^_,t^IA,32),_=n=w,t=o,r=n,o=U+AA|0,o=(n=c+j|0)>>>0<c>>>0?o+1|0:o,c=n,U=o,o=o+r|0,o=(e=n+t|0)>>>0<n>>>0?o+1|0:o,n=e^Y,Y=o,n=nA(n,o^l,40),o=(o=h)+(h=w)|0,l=r=n+v|0,v=o=r>>>0<n>>>0?o+1|0:o,_=nA(r^t,_^o,48),o=nA(_^b,(o=m)^(m=w),32),K=r=w,j=o,r=nA(c^y,U^R,1),o=(c=w)+yA|0,o=S+((t=r+eA|0)>>>0<r>>>0?o+1|0:o)|0,o=C+(y=(t=t+p|0)>>>0<p>>>0?o+1|0:o)|0,R=p=t+sA|0,p=o=p>>>0<sA>>>0?o+1|0:o,S=r,U=c,t=nA(t^N,y^$,32),o=(N=w)+P|0,c=r=t+D|0,r=(y=nA(r^S,(D=r>>>0<t>>>0?o+1|0:o)^U,40))+R|0,o=(R=w)+p|0,S=r,r=nA(r^t,N^(U=r>>>0<y>>>0?o+1|0:o),48),o=D+(AA=w)|0,N=r,P=r=c+r|0,b=o=r>>>0<c>>>0?o+1|0:o,o=K+o|0,o=(t=r+j|0)>>>0<r>>>0?o+1|0:o,r=J,J=o,c=nA(t^L,r^o,40),o=(IA=w)+d|0,p=r=c+kA|0,o=nA(r^j,K^(d=r>>>0<c>>>0?o+1|0:o),48),K=r=w,j=o,r=n,o=Y+m|0,Y=n=e+_|0,_=o=n>>>0<e>>>0?o+1|0:o,o=nA(n^r,o^h,1),e=r=w,n=o,o=U+B|0,o=((D=S+g|0)>>>0<g>>>0?o+1|0:o)+r|0,o=tA+(D=(r=n+D|0)>>>0<D>>>0?o+1|0:o)|0,m=h=r+X|0,h=o=h>>>0<X>>>0?o+1|0:o,S=n,U=e,n=nA(M^V,W^Z,48),o=O+(Z=w)|0,M=n,o=(n=u+n|0)>>>0<u>>>0?o+1|0:o,u=n,r=nA(r^s,D^wA,32),O=o,o=o+(V=w)|0,e=n=r+n|0,D=nA(n^S,(s=n>>>0<r>>>0?o+1|0:o)^U,40),o=(W=w)+h|0,h=n=D+m|0,n=nA(n^r,V^(S=n>>>0<D>>>0?o+1|0:o),48),o=s+($=w)|0,U=n,V=o=(s=e+n|0)>>>0<e>>>0?o+1|0:o,n=nA(D^s,W^o,1),o=lA+(m=w)|0,W=n,wA=n=QA+n|0,e=o=n>>>0<QA>>>0?o+1|0:o,n=nA(k^u,O^CA,1),o=(D=w)+v|0,o=SA+((r=n+l|0)>>>0<n>>>0?o+1|0:o)|0,o=BA+(u=(r=r+iA|0)>>>0<iA>>>0?o+1|0:o)|0,O=k=r+q|0,k=o=k>>>0<q>>>0?o+1|0:o,l=D,r=nA(r^N,u^AA,32),o=G+(AA=w)|0,v=r,o=(D=f+r|0)>>>0<f>>>0?o+1|0:o,f=l,l=o,u=nA(n^D,f^o,40),o=(CA=w)+k|0,N=n=u+O|0,o=(G=n>>>0<u>>>0?o+1|0:o)+e|0,k=o=(e=n+wA|0)>>>0<n>>>0?o+1|0:o,O=o=nA(e^j,o^K,32),L=n=w,n=nA(y^P,b^R,1),o=(f=w)+F|0,o=z+((r=n+H|0)>>>0<n>>>0?o+1|0:o)|0,o=(y=(r=I+r|0)>>>0<I>>>0?o+1|0:o)+x|0,b=F=r+aA|0,F=o=F>>>0<r>>>0?o+1|0:o,H=n,P=f,r=nA(r^M,y^Z,32),o=(M=w)+_|0,f=n=r+Y|0,n=(y=nA(n^H,(Y=n>>>0<r>>>0?o+1|0:o)^P,40))+b|0,o=(b=w)+F|0,F=n,n=nA(n^r,M^(H=n>>>0<y>>>0?o+1|0:o),48),o=Y+(Z=w)|0,Y=n,M=o=(n=f+n|0)>>>0<f>>>0?o+1|0:o,o=o+L|0,_=o=(f=n)>>>0>(n=n+O|0)>>>0?o+1|0:o,r=nA(n^W,m^o,40),o=k+(m=w)|0,P=r,o=B+((r=e+r|0)>>>0<e>>>0?o+1|0:o)|0,W=r=r+g|0,e=r^O,O=o=r>>>0<g>>>0?o+1|0:o,r=nA(e,L^o,48),o=_+(L=w)|0,_=o=(k=n+r|0)>>>0<n>>>0?o+1|0:o,n=o=nA(k^P,m^o,1),P=e=w,e=nA(f^y,M^b,1),o=S+(y=w)|0,o=SA+((f=e+h|0)>>>0<h>>>0?o+1|0:o)|0,o=hA+(h=(f=f+iA|0)>>>0<iA>>>0?o+1|0:o)|0,m=S=f+EA|0,S=o=S>>>0<EA>>>0?o+1|0:o,M=e,b=y,o=J+K|0,o=(e=t+j|0)>>>0<t>>>0?o+1|0:o,J=e,v=nA(N^v,G^AA,48),y=nA(f^v,h^(AA=w),32),N=o,o=o+(wA=w)|0,h=e=y+e|0,e=nA(e^M,(G=e>>>0<y>>>0?o+1|0:o)^b,40),o=(M=w)+S|0,b=o=(t=e+m|0)>>>0<e>>>0?o+1|0:o,o=o+P|0,o=C+((j=t)>>>0>(t=n+t|0)>>>0?o+1|0:o)|0,o=(f=(t=t+sA|0)>>>0<sA>>>0?o+1|0:o)+yA|0,kA=S=t+eA|0,m=o=S>>>0<t>>>0?o+1|0:o,R=n,K=t,o=nA(c^J,N^IA,1),c=t=w,n=o,o=H+MA|0,o=((S=F+rA|0)>>>0<rA>>>0?o+1|0:o)+t|0,o=tA+(S=(t=n+S|0)>>>0<S>>>0?o+1|0:o)|0,N=F=t+X|0,F=o=F>>>0<X>>>0?o+1|0:o,H=n,o=nA(t^U,S^$,32),J=n=w,t=o,S=n,o=l+AA|0,l=n=D+v|0,U=o=n>>>0<D>>>0?o+1|0:o,o=o+S|0,o=(D=n+t|0)>>>0<n>>>0?o+1|0:o;n=D^H,H=o,S=nA(n,o^c,40),o=(AA=w)+F|0,v=nA(F=(n=S+N|0)^t,J^(t=n>>>0<S>>>0?o+1|0:o),48),o=nA(o=v^K,(K=w)^f,32),IA=f=w,N=o,F=f,f=nA(u^l,U^CA,1),o=BA+(u=w)|0,o=d+((c=f+q|0)>>>0<q>>>0?o+1|0:o)|0,o=FA+(p=(c=c+p|0)>>>0<p>>>0?o+1|0:o)|0,U=l=c+cA|0,l=o=l>>>0<cA>>>0?o+1|0:o,c=nA(c^Y,p^Z,32),o=V+(J=w)|0,Y=c,s=o=(c=s+c|0)>>>0<s>>>0?o+1|0:o,p=nA(f^c,o^u,40),o=(Z=w)+l|0,u=f=p+U|0,f=nA(l=f^Y,J^(Y=f>>>0<p>>>0?o+1|0:o),48),o=s+($=w)|0,l=f,U=f=c+f|0,J=o=f>>>0<c>>>0?o+1|0:o,o=o+F|0,o=(c=f+N|0)>>>0<f>>>0?o+1|0:o,f=P,P=o,s=nA(c^R,f^o,40),o=(d=w)+m|0,F=f=s+kA|0,f=nA(m=f^N,IA^(N=f>>>0<s>>>0?o+1|0:o),48),o=P+(IA=w)|0,P=f,c=o=(f=c+f|0)>>>0<c>>>0?o+1|0:o,d=o=nA(f^s,d^o,1),CA=o,V=s=w,s=t,t=e,e=nA(y^j,b^wA,48),o=G+(wA=w)|0,G=e,o=(e=h+e|0)>>>0<h>>>0?o+1|0:o,h=n,n=t^e,t=o,n=nA(n,o^M,1),o=(M=w)+s|0,o=HA+(n>>>0>(y=h+n|0)>>>0?o+1|0:o)|0,o=DA+(h=(y=y+fA|0)>>>0<fA>>>0?o+1|0:o)|0,j=s=y+gA|0,s=o=s>>>0<gA>>>0?o+1|0:o,y=nA(y^l,h^$,32),o=_+(b=w)|0,l=o=(h=y+k|0)>>>0<k>>>0?o+1|0:o,k=nA(n^h,M^o,40),o=($=w)+s|0,M=n=k+j|0,y=nA(n^y,b^(_=n>>>0<k>>>0?o+1|0:o),48),o=l+(j=w)|0,b=n=y+h|0,l=n,m=o=n>>>0<h>>>0?o+1|0:o,h=e,s=t,o=H+K|0,o=(n=D+v|0)>>>0<D>>>0?o+1|0:o,D=n,n^=S,S=o,o=nA(n,AA^o,1),R=n=w,H=o,t=o,o=Y+x|0,o=((e=u+aA|0)>>>0<aA>>>0?o+1|0:o)+n|0,u=o=(n=e)>>>0>(e=t+e|0)>>>0?o+1|0:o,t=nA(r^e,o^L,32),o=(o=s)+(s=w)|0,v=n=t+h|0,r=nA(r=n^H,R^(H=n>>>0<t>>>0?o+1|0:o),40),o=u+(L=w)|0,o=uA+((n=r+e|0)>>>0<e>>>0?o+1|0:o)|0,R=o=(h=n+T|0)>>>0<T>>>0?o+1|0:o,s=nA(t^h,s^o,48),kA=o=w,n=nA(p^U,J^Z,1),o=(t=w)+O|0,o=pA+((e=n+W|0)>>>0<n>>>0?o+1|0:o)|0,o=z+(p=(e=e+oA|0)>>>0<oA>>>0?o+1|0:o)|0,O=u=I+e|0,U=o=u>>>0<I>>>0?o+1|0:o,J=n,u=nA(e^G,p^wA,32),o=(Z=w)+S|0,S=n=u+D|0,e=nA(n^J,(G=n>>>0<u>>>0?o+1|0:o)^t,40),o=(o=U)+(U=w)|0,J=n=e+O|0,O=o=n>>>0<e>>>0?o+1|0:o,t=o,o=z+V|0,o=((p=I+d|0)>>>0<I>>>0?o+1|0:o)+t|0,Y=o=(t=n+p|0)>>>0<p>>>0?o+1|0:o,n=nA(t^s,kA^o,32),o=(d=w)+m|0,D=nA((p=n+l|0)^CA,(o=p>>>0<n>>>0?o+1|0:o)^V,40),V=o,o=DA+(l=w)|0,o=Y+((W=D+gA|0)>>>0<gA>>>0?o+1|0:o)|0,o=(Y=t+W|0)>>>0<t>>>0?o+1|0:o,t=d,d=o,t=nA(n^Y,t^o,48),o=(o=V)+(V=w)|0,n=D^(p=t+p|0),D=o=p>>>0<t>>>0?o+1|0:o,W=o=nA(n,o^l,1),CA=o,K=n=w,l=f,AA=c,f=e,e=nA(u^J,O^Z,48),o=G+(J=w)|0,u=n=e+S|0,S=o=n>>>0<S>>>0?o+1|0:o,f=nA(n^f,o^U,1),o=(O=w)+HA|0,o=R+((n=f+fA|0)>>>0<f>>>0?o+1|0:o)|0,h=o=(c=n+h|0)>>>0<h>>>0?o+1|0:o,n=nA(c^y,o^j,32),o=(U=w)+AA|0,l=y=n+l|0,G=o=y>>>0<n>>>0?o+1|0:o,f=nA(f^y,o^O,40),o=hA+(wA=w)|0,O=f,o=h+((f=EA+f|0)>>>0<EA>>>0?o+1|0:o)|0,c=o=(f=f+c|0)>>>0<c>>>0?o+1|0:o,y=nA(n^f,o^U,48),o=(o=G)+(G=w)|0,j=n=y+l|0,U=n,R=o=n>>>0<y>>>0?o+1|0:o,o=H+kA|0,l=(n=s+v|0)^r,r=o=n>>>0<s>>>0?o+1|0:o,o=nA(l,o^L,1),L=h=w,l=o,o=_+tA|0,o=((s=M+X|0)>>>0<X>>>0?o+1|0:o)+h|0,H=o=(H=s)>>>0>(s=s+l|0)>>>0?o+1|0:o,v=h=nA(s^P,IA^o,32),M=o=w,o=o+S|0,_=h=h+u|0,P=o=v>>>0>h>>>0?o+1|0:o,h=nA(h^l,L^o,40),o=yA+(L=w)|0,o=H+((u=h+eA|0)>>>0<eA>>>0?o+1|0:o)|0,u=o=(l=s)>>>0>(s=s+u|0)>>>0?o+1|0:o,l=nA(s^v,o^M,48),IA=o=w,S=o,k=nA(k^b,m^$,1),H=o=w,v=e,o=o+x|0,o=N+((e=k+aA|0)>>>0<aA>>>0?o+1|0:o)|0,o=(e=e+F|0)>>>0<F>>>0?o+1|0:o,F=e^v,v=o,F=nA(F,o^J,32),o=($=w)+r|0,N=n=F+n|0,r=nA(n^k,(r=H)^(H=n>>>0<F>>>0?o+1|0:o),40),o=pA+(M=w)|0,o=v+((n=r+oA|0)>>>0<oA>>>0?o+1|0:o)|0,v=n=n+e|0,J=o=n>>>0<e>>>0?o+1|0:o,e=o,o=K+SA|0,o=((k=W+iA|0)>>>0<iA>>>0?o+1|0:o)+e|0,W=o=(e=n+k|0)>>>0<k>>>0?o+1|0:o,n=nA(e^l,o^S,32),o=(b=w)+R|0,S=nA((k=n+U|0)^CA,(o=k>>>0<n>>>0?o+1|0:o)^K,40),m=U=w,K=o,o=U+FA|0,o=W+((U=S+cA|0)>>>0<cA>>>0?o+1|0:o)|0,W=o=(U=e+U|0)>>>0<e>>>0?o+1|0:o,e=nA(n^U,o^b,48),o=(b=w)+K|0,n=(k=e+k|0)^S,S=o=k>>>0<e>>>0?o+1|0:o,m=o=nA(n,o^m,1),K=n=w,AA=p,Z=y,y=r,r=nA(F^v,J^$,48),o=(F=w)+H|0,H=n=r+N|0,v=o=n>>>0<r>>>0?o+1|0:o,y=nA(n^y,o^M,1),o=(M=w)+lA|0,o=((n=y+QA|0)>>>0<y>>>0?o+1|0:o)+u|0,s=o=(p=n+s|0)>>>0<n>>>0?o+1|0:o,n=nA(p^Z,o^G,32),o=(u=w)+D|0,N=D=n+AA|0,G=o=D>>>0<n>>>0?o+1|0:o,y=nA(y^D,o^M,40),o=C+(Z=w)|0,M=y,o=s+((y=sA+y|0)>>>0<sA>>>0?o+1|0:o)|0,J=o=(D=y+p|0)>>>0<p>>>0?o+1|0:o,y=nA(n^D,o^u,48),o=(o=G)+(G=w)|0,N=n=y+N|0,AA=o=n>>>0<y>>>0?o+1|0:o,s=t,p=f,o=P+IA|0,t=o=(n=l+_|0)>>>0<l>>>0?o+1|0:o,f=nA(n^h,o^L,1),o=(h=w)+BA|0,o=((u=f+q|0)>>>0<f>>>0?o+1|0:o)+c|0,c=nA(s^(p=p+u|0),(o=p>>>0<u>>>0?o+1|0:o)^V,32),u=o,l=f,o=(s=w)+v|0,o=(f=c+H|0)>>>0<c>>>0?o+1|0:o,H=f,f^=l,l=o,f=nA(f,o^h,40),o=B+(v=w)|0,o=((h=f+g|0)>>>0<g>>>0?o+1|0:o)+u|0,_=o=(u=h)>>>0>(h=h+p|0)>>>0?o+1|0:o,s=nA(c^h,o^s,48),IA=o=w,p=o,c=nA(j^O,R^wA,1),P=o=w,O=t,o=o+uA|0,o=d+((t=c+T|0)>>>0<T>>>0?o+1|0:o)|0,u=F,F=o=(t=t+Y|0)>>>0<Y>>>0?o+1|0:o,u=nA(r^t,u^o,32),o=($=w)+O|0,Y=n=u+n|0,r=nA(n^c,(r=P)^(P=n>>>0<u>>>0?o+1|0:o),40),o=MA+(O=w)|0,o=F+((n=r+rA|0)>>>0<rA>>>0?o+1|0:o)|0,d=n=n+t|0,j=o=n>>>0<t>>>0?o+1|0:o,t=o,o=K+tA|0,o=((c=X+m|0)>>>0<X>>>0?o+1|0:o)+t|0,F=o=(t=n+c|0)>>>0<c>>>0?o+1|0:o,n=nA(t^s,o^p,32),o=(V=w)+AA|0,p=nA((c=n+N|0)^m,(o=c>>>0<n>>>0?o+1|0:o)^K,40),m=o,o=x+(L=w)|0,o=F+((R=p+aA|0)>>>0<aA>>>0?o+1|0:o)|0,o=(F=t+R|0)>>>0<t>>>0?o+1|0:o,t=V,V=o,t=nA(n^F,t^o,48),o=(o=m)+(m=w)|0,n=(c=t+c|0)^p,p=o=c>>>0<t>>>0?o+1|0:o,L=o=nA(n,o^L,1),R=n=w,K=y,y=r,r=nA(u^d,j^$,48),o=(o=P)+(P=w)|0,Y=n=r+Y|0,u=O,O=o=n>>>0<r>>>0?o+1|0:o,y=nA(n^y,u^o,1),o=(d=w)+FA|0,o=_+((n=y+cA|0)>>>0<y>>>0?o+1|0:o)|0,u=h,h=n+h|0,n=G,G=o=u>>>0>h>>>0?o+1|0:o,n=nA(h^K,n^o,32),o=(o=S)+(S=w)|0,_=o=(u=n+k|0)>>>0<n>>>0?o+1|0:o,k=u,y=nA(y^u,o^d,40),o=uA+($=w)|0,d=y,o=G+((y=T+y|0)>>>0<T>>>0?o+1|0:o)|0,G=o=(u=y+h|0)>>>0<h>>>0?o+1|0:o,y=nA(n^u,o^S,48),o=(o=_)+(_=w)|0,j=n=y+k|0,K=o=n>>>0<y>>>0?o+1|0:o,k=e,o=l+IA|0,e=o=(n=s+H|0)>>>0<s>>>0?o+1|0:o,f=nA(n^f,o^v,1),o=DA+(s=w)|0,o=J+((h=f+gA|0)>>>0<gA>>>0?o+1|0:o)|0,l=(h=D+h|0)^k,k=o=h>>>0<D>>>0?o+1|0:o,D=nA(l,o^b,32),S=o=w,l=f,o=o+O|0,o=(f=D+Y|0)>>>0<D>>>0?o+1|0:o,H=f,f^=l,l=o,f=nA(f,o^s,40),o=B+(v=w)|0,o=k+((s=f+g|0)>>>0<g>>>0?o+1|0:o)|0,J=o=(s=h+s|0)>>>0<h>>>0?o+1|0:o,k=nA(D^s,o^S,48),IA=o=w,h=o,D=nA(M^N,Z^AA,1),Y=o=w,N=e,o=o+C|0,o=W+((e=D+sA|0)>>>0<sA>>>0?o+1|0:o)|0,U=o=(e=e+U|0)>>>0<U>>>0?o+1|0:o,S=nA(r^e,o^P,32),o=(CA=w)+N|0,N=n=S+n|0,r=nA(n^D,(M=n>>>0<S>>>0?o+1|0:o)^Y,40),o=z+(P=w)|0,o=U+((n=I+r|0)>>>0<I>>>0?o+1|0:o)|0,U=n=n+e|0,O=o=n>>>0<e>>>0?o+1|0:o,e=o,o=R+pA|0,o=((D=L+oA|0)>>>0<oA>>>0?o+1|0:o)+e|0,Y=o=(e=n+D|0)>>>0<D>>>0?o+1|0:o,n=nA(e^k,o^h,32),o=(W=w)+K|0,h=nA((D=n+j|0)^L,(o=D>>>0<n>>>0?o+1|0:o)^R,40),b=o,o=HA+(L=w)|0,o=Y+((R=h+fA|0)>>>0<fA>>>0?o+1|0:o)|0,o=(Y=e+R|0)>>>0<e>>>0?o+1|0:o,e=W,W=o,e=nA(n^Y,e^o,48),o=(o=b)+(b=w)|0,n=(D=e+D|0)^h,h=o=D>>>0<e>>>0?o+1|0:o,L=o=nA(n,o^L,1),wA=o,R=n=w,AA=c,Z=y,c=r,r=nA(S^U,O^CA,48),o=(S=w)+M|0,U=n=r+N|0,N=o=n>>>0<r>>>0?o+1|0:o,c=nA(n^c,o^P,1),o=(P=w)+yA|0,o=J+((n=c+eA|0)>>>0<c>>>0?o+1|0:o)|0,s=o=(y=n+s|0)>>>0<s>>>0?o+1|0:o,n=nA(y^Z,o^_,32),o=(M=w)+p|0,_=o=(p=n+AA|0)>>>0<n>>>0?o+1|0:o,c=nA(c^p,o^P,40),o=lA+(CA=w)|0,J=c,o=s+((c=QA+c|0)>>>0<QA>>>0?o+1|0:o)|0,s=c+y|0,c=M,M=o=s>>>0<y>>>0?o+1|0:o,c=nA(n^s,c^o,48),o=(o=_)+(_=w)|0,P=n=c+p|0,O=o=n>>>0<c>>>0?o+1|0:o,y=t,o=l+IA|0,t=o=(n=k+H|0)>>>0<k>>>0?o+1|0:o,f=nA(n^f,o^v,1),o=(k=w)+MA|0,o=G+((p=f+rA|0)>>>0<f>>>0?o+1|0:o)|0,y=nA(y^(p=p+u|0),(o=p>>>0<u>>>0?o+1|0:o)^m,32),l=u=w,u=o,H=f,o=l+N|0,o=(f=y+U|0)>>>0<y>>>0?o+1|0:o,U=f,f^=H,H=o,f=nA(f,o^k,40),o=hA+(v=w)|0,o=((k=f+EA|0)>>>0<EA>>>0?o+1|0:o)+u|0,G=l,l=o=(u=p+k|0)>>>0<k>>>0?o+1|0:o,k=nA(y^u,G^o,48),IA=o=w,p=o,y=nA(j^d,K^$,1),N=o=w,G=t,o=o+BA|0,o=V+((t=y+q|0)>>>0<q>>>0?o+1|0:o)|0,F=o=(t=t+F|0)>>>0<F>>>0?o+1|0:o,S=nA(r^t,o^S,32),o=($=w)+G|0,G=n=S+n|0,r=nA(n^y,(r=N)^(N=n>>>0<S>>>0?o+1|0:o),40),o=SA+(d=w)|0,o=F+((n=r+iA|0)>>>0<iA>>>0?o+1|0:o)|0,j=n=n+t|0,V=o=n>>>0<t>>>0?o+1|0:o,t=o,o=R+B|0,o=((y=L+g|0)>>>0<g>>>0?o+1|0:o)+t|0,F=o=(t=n+y|0)>>>0<y>>>0?o+1|0:o,n=nA(t^k,o^p,32),o=(L=w)+O|0,p=nA((y=n+P|0)^wA,(o=y>>>0<n>>>0?o+1|0:o)^R,40),R=o,o=FA+(m=w)|0,o=F+((K=p+cA|0)>>>0<cA>>>0?o+1|0:o)|0,o=(F=t+K|0)>>>0<t>>>0?o+1|0:o,t=L,L=o,t=nA(n^F,t^o,48),o=(o=R)+(R=w)|0,n=(y=t+y|0)^p,p=o=y>>>0<t>>>0?o+1|0:o,m=o=nA(n,o^m,1),K=n=w,AA=D,Z=c,c=r,r=nA(S^j,V^$,48),o=(S=w)+N|0,N=n=r+G|0,G=o=n>>>0<r>>>0?o+1|0:o,c=nA(n^c,o^d,1),o=(d=w)+lA|0,o=l+((n=c+QA|0)>>>0<c>>>0?o+1|0:o)|0,u=o=(D=n+u|0)>>>0<u>>>0?o+1|0:o,n=nA(D^Z,o^_,32),o=(l=w)+h|0,_=o=(h=n+AA|0)>>>0<n>>>0?o+1|0:o,c=nA(c^h,o^d,40),o=BA+($=w)|0,d=c,o=u+((c=q+c|0)>>>0<q>>>0?o+1|0:o)|0,u=c+D|0,c=l,l=o=u>>>0<D>>>0?o+1|0:o,c=nA(n^u,c^o,48),o=(o=_)+(_=w)|0,j=n=c+h|0,V=o=n>>>0<c>>>0?o+1|0:o,D=e,o=H+IA|0,e=o=(n=k+U|0)>>>0<k>>>0?o+1|0:o,f=nA(n^f,o^v,1),o=SA+(k=w)|0,o=M+((h=f+iA|0)>>>0<iA>>>0?o+1|0:o)|0,s=o=(h=h+s|0)>>>0<s>>>0?o+1|0:o,D=nA(D^h,o^b,32),U=o=w,H=f,o=o+G|0,o=(f=D+N|0)>>>0<D>>>0?o+1|0:o,v=f,f^=H,H=o,f=nA(f,o^k,40),o=pA+(N=w)|0,o=s+((k=f+oA|0)>>>0<oA>>>0?o+1|0:o)|0,o=(s=h+k|0)>>>0<h>>>0?o+1|0:o,h=U,U=o,k=nA(D^s,h^o,48),IA=o=w,h=o,D=nA(J^P,O^CA,1),G=o=w,M=e,o=o+z|0,o=W+((e=I+D|0)>>>0<I>>>0?o+1|0:o)|0,Y=o=(e=e+Y|0)>>>0<Y>>>0?o+1|0:o,S=nA(r^e,o^S,32),o=(CA=w)+M|0,M=n=S+n|0,r=nA(n^D,(r=G)^(G=n>>>0<S>>>0?o+1|0:o),40),o=uA+(J=w)|0,o=Y+((n=r+T|0)>>>0<T>>>0?o+1|0:o)|0,P=n=n+e|0,O=o=n>>>0<e>>>0?o+1|0:o,e=o,o=K+DA|0,o=((D=m+gA|0)>>>0<gA>>>0?o+1|0:o)+e|0,Y=o=(e=n+D|0)>>>0<D>>>0?o+1|0:o,n=nA(e^k,o^h,32),o=(W=w)+V|0,h=nA((D=n+j|0)^m,(o=D>>>0<n>>>0?o+1|0:o)^K,40),m=o,o=C+(b=w)|0,o=Y+((K=h+sA|0)>>>0<sA>>>0?o+1|0:o)|0,o=(Y=e+K|0)>>>0<e>>>0?o+1|0:o,e=W,W=o,e=nA(n^Y,e^o,48),o=(o=m)+(m=w)|0,n=(D=e+D|0)^h,h=o=D>>>0<e>>>0?o+1|0:o,b=o=nA(n,o^b,1),K=n=w,AA=y,Z=c,c=r,r=nA(S^P,O^CA,48),o=(S=w)+G|0,G=n=r+M|0,M=o=n>>>0<r>>>0?o+1|0:o,c=nA(n^c,o^J,1),o=(J=w)+tA|0,o=U+((n=c+X|0)>>>0<c>>>0?o+1|0:o)|0,s=o=(y=n+s|0)>>>0<s>>>0?o+1|0:o,n=nA(y^Z,o^_,32),o=(U=w)+p|0,_=o=(p=n+AA|0)>>>0<n>>>0?o+1|0:o,c=nA(c^p,o^J,40),o=MA+(CA=w)|0,J=c,o=s+((c=rA+c|0)>>>0<rA>>>0?o+1|0:o)|0,s=c+y|0,c=U,U=o=s>>>0<y>>>0?o+1|0:o,c=nA(n^s,c^o,48),o=(o=_)+(_=w)|0,P=n=c+p|0,O=o=n>>>0<c>>>0?o+1|0:o,y=t,o=H+IA|0,t=o=(n=k+v|0)>>>0<k>>>0?o+1|0:o,f=nA(n^f,o^N,1),o=(k=w)+hA|0,o=l+((p=f+EA|0)>>>0<f>>>0?o+1|0:o)|0,u=o=(p=p+u|0)>>>0<u>>>0?o+1|0:o,y=nA(y^p,o^R,32),l=o=w,H=f,o=o+M|0,o=(f=y+G|0)>>>0<y>>>0?o+1|0:o,v=f,f^=H,H=o,f=nA(f,o^k,40),o=yA+(N=w)|0,o=u+((k=f+eA|0)>>>0<eA>>>0?o+1|0:o)|0,G=l,l=o=(u=p+k|0)>>>0<p>>>0?o+1|0:o,k=nA(y^u,G^o,48),IA=o=w,p=o,y=nA(j^d,V^$,1),G=o=w,M=t,o=o+x|0,o=L+((t=y+aA|0)>>>0<aA>>>0?o+1|0:o)|0,F=o=(t=t+F|0)>>>0<F>>>0?o+1|0:o,S=nA(r^t,o^S,32),o=($=w)+M|0,M=n=S+n|0,r=nA(n^y,(r=G)^(G=n>>>0<S>>>0?o+1|0:o),40),o=HA+(d=w)|0,o=F+((n=r+fA|0)>>>0<fA>>>0?o+1|0:o)|0,j=n=n+t|0,V=o=n>>>0<t>>>0?o+1|0:o,t=o,o=K+C|0,o=((y=b+sA|0)>>>0<sA>>>0?o+1|0:o)+t|0,F=o=(t=n+y|0)>>>0<y>>>0?o+1|0:o,n=nA(t^k,o^p,32),o=(L=w)+O|0,p=nA((y=n+P|0)^b,(o=y>>>0<n>>>0?o+1|0:o)^K,40),R=o,o=SA+(b=w)|0,o=F+((K=p+iA|0)>>>0<iA>>>0?o+1|0:o)|0,o=(F=t+K|0)>>>0<t>>>0?o+1|0:o,t=L,L=o,t=nA(n^F,t^o,48),o=(o=R)+(R=w)|0,n=(y=t+y|0)^p,p=o=y>>>0<t>>>0?o+1|0:o,b=o=nA(n,o^b,1),K=n=w,AA=D,Z=c,c=r,r=nA(S^j,V^$,48),o=(S=w)+G|0,G=n=r+M|0,M=o=n>>>0<r>>>0?o+1|0:o,c=nA(n^c,o^d,1),o=(d=w)+x|0,o=l+((n=c+aA|0)>>>0<c>>>0?o+1|0:o)|0,u=o=(D=n+u|0)>>>0<u>>>0?o+1|0:o,n=nA(D^Z,o^_,32),o=(l=w)+h|0,_=o=(h=n+AA|0)>>>0<n>>>0?o+1|0:o,c=nA(c^h,o^d,40),o=yA+($=w)|0,d=c,o=u+((c=eA+c|0)>>>0<eA>>>0?o+1|0:o)|0,u=c+D|0,c=l,l=o=u>>>0<D>>>0?o+1|0:o,c=nA(n^u,c^o,48),o=(o=_)+(_=w)|0,j=n=c+h|0,V=o=n>>>0<c>>>0?o+1|0:o,D=e,o=H+IA|0,e=o=(n=k+v|0)>>>0<k>>>0?o+1|0:o,f=nA(n^f,o^N,1),o=hA+(k=w)|0,o=U+((h=f+EA|0)>>>0<EA>>>0?o+1|0:o)|0,s=o=(h=h+s|0)>>>0<s>>>0?o+1|0:o,D=nA(D^h,o^m,32),U=o=w,H=f,o=o+M|0,o=(f=D+G|0)>>>0<D>>>0?o+1|0:o,v=f,f^=H,H=o,f=nA(f,o^k,40),o=MA+(N=w)|0,o=s+((k=f+rA|0)>>>0<rA>>>0?o+1|0:o)|0,o=(s=h+k|0)>>>0<h>>>0?o+1|0:o,h=U,U=o,k=nA(D^s,h^o,48),IA=o=w,h=o,D=nA(J^P,O^CA,1),G=o=w,M=e,o=o+BA|0,o=W+((e=D+q|0)>>>0<q>>>0?o+1|0:o)|0,Y=o=(e=e+Y|0)>>>0<Y>>>0?o+1|0:o,S=nA(r^e,o^S,32),o=(CA=w)+M|0,M=n=S+n|0,r=nA(n^D,(r=G)^(G=n>>>0<S>>>0?o+1|0:o),40),o=HA+(J=w)|0,o=Y+((n=r+fA|0)>>>0<fA>>>0?o+1|0:o)|0,P=n=n+e|0,O=o=n>>>0<e>>>0?o+1|0:o,e=o,o=K+uA|0,o=((D=b+T|0)>>>0<T>>>0?o+1|0:o)+e|0,Y=o=(e=n+D|0)>>>0<D>>>0?o+1|0:o,n=nA(e^k,o^h,32),o=(W=w)+V|0,h=nA((D=n+j|0)^b,(o=D>>>0<n>>>0?o+1|0:o)^K,40),m=o,o=z+(b=w)|0,o=Y+((K=I+h|0)>>>0<I>>>0?o+1|0:o)|0,o=(Y=e+K|0)>>>0<e>>>0?o+1|0:o,e=W,W=o,e=nA(n^Y,e^o,48),o=(o=m)+(m=w)|0,n=(D=e+D|0)^h,h=o=D>>>0<e>>>0?o+1|0:o,b=o=nA(n,o^b,1),K=n=w,AA=y,Z=c,c=r,r=nA(S^P,O^CA,48),o=(S=w)+G|0,G=n=r+M|0,M=o=n>>>0<r>>>0?o+1|0:o,c=nA(n^c,o^J,1),o=(J=w)+pA|0,o=U+((n=c+oA|0)>>>0<c>>>0?o+1|0:o)|0,s=o=(y=n+s|0)>>>0<s>>>0?o+1|0:o,n=nA(y^Z,o^_,32),o=(U=w)+p|0,_=o=(p=n+AA|0)>>>0<n>>>0?o+1|0:o,c=nA(c^p,o^J,40),o=B+(CA=w)|0,J=c,o=s+((c=g+c|0)>>>0<g>>>0?o+1|0:o)|0,s=c+y|0,c=U,U=o=s>>>0<y>>>0?o+1|0:o,c=nA(n^s,c^o,48),o=(o=_)+(_=w)|0,P=n=c+p|0,O=o=n>>>0<c>>>0?o+1|0:o,y=t,o=H+IA|0,t=o=(n=k+v|0)>>>0<k>>>0?o+1|0:o,f=nA(n^f,o^N,1),o=(k=w)+DA|0,o=l+((p=f+gA|0)>>>0<f>>>0?o+1|0:o)|0,u=o=(p=p+u|0)>>>0<u>>>0?o+1|0:o,y=nA(y^p,o^R,32),l=o=w,H=f,o=o+M|0,o=(f=y+G|0)>>>0<y>>>0?o+1|0:o,v=f,f^=H,H=o,f=nA(f,o^k,40),o=lA+(N=w)|0,o=u+((k=f+QA|0)>>>0<QA>>>0?o+1|0:o)|0,G=l,l=o=(u=p+k|0)>>>0<p>>>0?o+1|0:o,k=nA(y^u,G^o,48),IA=o=w,p=o,y=nA(j^d,V^$,1),G=o=w,M=t,o=o+FA|0,o=L+((t=y+cA|0)>>>0<cA>>>0?o+1|0:o)|0,F=o=(t=t+F|0)>>>0<F>>>0?o+1|0:o,S=nA(r^t,o^S,32),o=($=w)+M|0,M=n=S+n|0,r=nA(n^y,(r=G)^(G=n>>>0<S>>>0?o+1|0:o),40),o=tA+(d=w)|0,o=F+((n=r+X|0)>>>0<X>>>0?o+1|0:o)|0,j=n=n+t|0,V=o=n>>>0<t>>>0?o+1|0:o,t=o,o=K+HA|0,o=((y=b+fA|0)>>>0<fA>>>0?o+1|0:o)+t|0,F=o=(t=n+y|0)>>>0<y>>>0?o+1|0:o,n=nA(t^k,o^p,32),o=(L=w)+O|0,p=nA((y=n+P|0)^b,(o=y>>>0<n>>>0?o+1|0:o)^K,40),R=o,o=yA+(b=w)|0,o=F+((K=p+eA|0)>>>0<eA>>>0?o+1|0:o)|0,o=(F=t+K|0)>>>0<t>>>0?o+1|0:o,t=L,L=o,t=nA(n^F,t^o,48),o=(o=R)+(R=w)|0,n=(y=t+y|0)^p,p=o=y>>>0<t>>>0?o+1|0:o,b=o=nA(n,o^b,1),K=n=w,AA=D,Z=c,c=r,r=nA(S^j,V^$,48),o=(S=w)+G|0,G=n=r+M|0,M=o=n>>>0<r>>>0?o+1|0:o,c=nA(n^c,o^d,1),o=(d=w)+SA|0,o=l+((n=c+iA|0)>>>0<c>>>0?o+1|0:o)|0,u=o=(D=n+u|0)>>>0<u>>>0?o+1|0:o,n=nA(D^Z,o^_,32),o=(l=w)+h|0,_=o=(h=n+AA|0)>>>0<n>>>0?o+1|0:o,c=nA(c^h,o^d,40),o=C+($=w)|0,d=c,o=u+((c=sA+c|0)>>>0<sA>>>0?o+1|0:o)|0,u=c+D|0,c=l,l=o=u>>>0<D>>>0?o+1|0:o,c=nA(n^u,c^o,48),o=(o=_)+(_=w)|0,j=n=c+h|0,V=o=n>>>0<c>>>0?o+1|0:o,D=e,o=H+IA|0,e=o=(n=k+v|0)>>>0<k>>>0?o+1|0:o,f=nA(n^f,o^N,1),o=lA+(k=w)|0,o=U+((h=f+QA|0)>>>0<QA>>>0?o+1|0:o)|0,s=o=(h=h+s|0)>>>0<s>>>0?o+1|0:o,D=nA(D^h,o^m,32),U=o=w,H=f,o=o+M|0,o=(f=D+G|0)>>>0<D>>>0?o+1|0:o,v=f,f^=H,H=o,f=nA(f,o^k,40),o=x+(N=w)|0,o=s+((k=f+aA|0)>>>0<aA>>>0?o+1|0:o)|0,o=(s=h+k|0)>>>0<h>>>0?o+1|0:o,h=U,U=o,k=nA(D^s,h^o,48),IA=o=w,h=o,D=nA(J^P,O^CA,1),G=o=w,M=e,o=o+MA|0,o=W+((e=D+rA|0)>>>0<rA>>>0?o+1|0:o)|0,Y=o=(e=e+Y|0)>>>0<Y>>>0?o+1|0:o,S=nA(r^e,o^S,32),o=(CA=w)+M|0,M=n=S+n|0,r=nA(n^D,(r=G)^(G=n>>>0<S>>>0?o+1|0:o),40),o=FA+(J=w)|0,o=Y+((n=r+cA|0)>>>0<cA>>>0?o+1|0:o)|0,P=n=n+e|0,O=o=n>>>0<e>>>0?o+1|0:o,e=o,o=K+hA|0,o=((D=b+EA|0)>>>0<EA>>>0?o+1|0:o)+e|0,Y=o=(e=n+D|0)>>>0<D>>>0?o+1|0:o,n=nA(e^k,o^h,32),o=(W=w)+V|0,h=nA((D=n+j|0)^b,(o=D>>>0<n>>>0?o+1|0:o)^K,40),m=o,o=B+(b=w)|0,o=Y+((K=h+g|0)>>>0<g>>>0?o+1|0:o)|0,o=(Y=e+K|0)>>>0<e>>>0?o+1|0:o,e=W,W=o,e=nA(n^Y,e^o,48),o=(o=m)+(m=w)|0,n=(D=e+D|0)^h,h=o=D>>>0<e>>>0?o+1|0:o,b=o=nA(n,o^b,1),K=n=w,AA=y,Z=c,c=r,r=nA(S^P,O^CA,48),o=(S=w)+G|0,G=n=r+M|0,M=o=n>>>0<r>>>0?o+1|0:o,c=nA(n^c,o^J,1),o=(P=w)+BA|0,o=U+((n=c+q|0)>>>0<c>>>0?o+1|0:o)|0,s=o=(y=n+s|0)>>>0<s>>>0?o+1|0:o,n=nA(y^Z,o^_,32),o=(U=w)+p|0,_=p=n+AA|0,J=o=p>>>0<n>>>0?o+1|0:o,c=nA(c^p,o^P,40),o=uA+(AA=w)|0,P=c,o=s+((c=T+c|0)>>>0<T>>>0?o+1|0:o)|0,p=c+y|0,c=U,U=o=p>>>0<y>>>0?o+1|0:o,c=nA(n^p,c^o,48),o=(o=J)+(J=w)|0,_=n=c+_|0,O=o=n>>>0<c>>>0?o+1|0:o,y=t,o=H+IA|0,t=o=(n=k+v|0)>>>0<k>>>0?o+1|0:o,f=nA(n^f,o^N,1),o=(k=w)+z|0,o=l+((s=I+f|0)>>>0<f>>>0?o+1|0:o)|0,u=o=(s=s+u|0)>>>0<u>>>0?o+1|0:o,l=y=nA(y^s,o^R,32),H=o=w,v=f,o=o+M|0,o=(f=y+G|0)>>>0<y>>>0?o+1|0:o,N=f,f^=v,v=o,f=nA(f,o^k,40),o=pA+(G=w)|0,o=u+((y=f+oA|0)>>>0<oA>>>0?o+1|0:o)|0,M=(y=y+s|0)^l,l=o=y>>>0<s>>>0?o+1|0:o,s=nA(M,o^H,48),R=o=w,k=o,H=u=nA(j^d,V^$,1),M=o=w,d=t,o=o+tA|0,o=L+((t=u+X|0)>>>0<X>>>0?o+1|0:o)|0,o=(t=t+F|0)>>>0<F>>>0?o+1|0:o,F=S,S=o,u=nA(r^t,F^o,32),o=(Z=w)+d|0,F=n=u+n|0,r=nA(r=n^H,(H=n>>>0<u>>>0?o+1|0:o)^M,40),o=DA+(M=w)|0,o=S+((n=r+gA|0)>>>0<gA>>>0?o+1|0:o)|0,S=n=n+t|0,d=o=n>>>0<t>>>0?o+1|0:o,t=o,o=K+uA|0,o=((L=T)>>>0>(T=b+T|0)>>>0?o+1|0:o)+t|0,uA=o=(n=n+T|0)>>>0<T>>>0?o+1|0:o,T=nA(n^s,o^k,32),o=(j=w)+O|0,k=nA((t=_+T|0)^b,(o=t>>>0<T>>>0?o+1|0:o)^K,40),L=o,o=pA+(V=w)|0,o=uA+((b=oA)>>>0>(oA=k+oA|0)>>>0?o+1|0:o)|0,o=(oA=n+oA|0)>>>0<n>>>0?o+1|0:o,n=T^oA,T=o;pA=nA(n,o^j,48),o=(uA=w)+L|0,t=o=(n=t+pA|0)>>>0<pA>>>0?o+1|0:o,o=nA(n^k,o^V,1),k=w,j=o,V=D,D=gA,L=DA,DA=nA(u^S,d^Z,48),o=(u=w)+H|0,H=D,F=o=(gA=F+DA|0)>>>0<DA>>>0?o+1|0:o,D=nA(r^(S=gA),o^M,1),o=(M=w)+L|0,o=l+(D>>>0>(gA=H+D|0)>>>0?o+1|0:o)|0,r=o=(gA=y+gA|0)>>>0<y>>>0?o+1|0:o,c=nA(c^gA,o^J,32),o=(o=h)+(h=w)|0,l=y=c+V|0,H=o=y>>>0<c>>>0?o+1|0:o,y=nA(y^D,o^M,40),o=(M=w)+SA|0,o=(y>>>0>(iA=y+iA|0)>>>0?o+1|0:o)+r|0,r=o=(r=iA)>>>0>(iA=gA+iA|0)>>>0?o+1|0:o,c=nA(c^iA,o^h,48),o=(D=w)+H|0,h=gA=c+l|0,SA=o=gA>>>0<c>>>0?o+1|0:o,l=I,H=z,o=v+R|0,gA=o=(I=s+N|0)>>>0<s>>>0?o+1|0:o,z=nA(I^f,o^G,1),o=(s=w)+H|0,o=U+((f=l+z|0)>>>0<z>>>0?o+1|0:o)|0,e=nA((f=f+p|0)^e,(o=f>>>0<p>>>0?o+1|0:o)^m,32),l=o,U=EA,EA=z,o=(p=w)+F|0,F=s,s=o=(z=e+S|0)>>>0<e>>>0?o+1|0:o,EA=nA(z^EA,F^o,40),o=(S=w)+hA|0,o=((hA=U+EA|0)>>>0<EA>>>0?o+1|0:o)+l|0,l=hA,f=e^(hA=f+hA|0),e=o=l>>>0>hA>>>0?o+1|0:o,o=nA(f,o^p,48),v=f=w,p=o,F=q,l=BA,q=nA(_^P,O^AA,1),H=o=w,o=o+HA|0,o=W+((q=(U=q)+fA|0)>>>0<fA>>>0?o+1|0:o)|0,fA=o=(q=Y+q|0)>>>0<Y>>>0?o+1|0:o,BA=nA(q^DA,o^u,32),o=(Y=w)+gA|0,gA=I=BA+I|0,DA=nA(I^U,(u=I>>>0<BA>>>0?o+1|0:o)^H,40),o=(o=l)+(l=w)|0,o=fA+((I=DA+F|0)>>>0<DA>>>0?o+1|0:o)|0,fA=I=I+q|0,HA=o=I>>>0<q>>>0?o+1|0:o,q=o,o=k+lA|0,o=((U=QA)>>>0>(QA=j+QA|0)>>>0?o+1|0:o)+q|0,lA=o=(q=I+QA|0)>>>0<QA>>>0?o+1|0:o,QA=nA(p^q,o^f,32),o=(U=w)+SA|0,f=I=QA+h|0,I=nA(I^j,(F=k)^(k=I>>>0<QA>>>0?o+1|0:o),40),o=MA+(H=w)|0,MA=I,o=lA+((I=rA+I|0)>>>0<rA>>>0?o+1|0:o)|0,o=(I=I+q|0)>>>0<q>>>0?o+1|0:o,lA=I,N=(a[A+8|0]|a[A+9|0]<<8|a[A+10|0]<<16|a[A+11|0]<<24)^I,F=o,G=o^(a[A+12|0]|a[A+13|0]<<8|a[A+14|0]<<16|a[A+15|0]<<24),q=nA(BA^fA,Y^HA,48),o=(fA=w)+u|0,u=I=q+gA|0,HA=o=I>>>0<q>>>0?o+1|0:o,BA=eA,o=s+v|0,eA=o=(I=p+z|0)>>>0<z>>>0?o+1|0:o,EA=nA(I^EA,o^S,1),o=(p=w)+yA|0,o=((BA=EA+BA|0)>>>0<EA>>>0?o+1|0:o)+r|0,BA=o=(yA=BA+iA|0)>>>0<BA>>>0?o+1|0:o,gA=nA(yA^pA,o^uA,32),o=(z=w)+HA|0,iA=o=(rA=gA+u|0)>>>0<gA>>>0?o+1|0:o,pA=gA,gA=nA(EA^rA,o^p,40),o=(r=w)+FA|0,o=(gA>>>0>(EA=gA+cA|0)>>>0?o+1|0:o)+BA|0,s=z,z=o=(yA=EA+yA|0)>>>0<EA>>>0?o+1|0:o,EA=nA(pA^(cA=yA),s^o,48),o=(p=w)+iA|0,o=(BA=EA+rA|0)>>>0<EA>>>0?o+1|0:o,rA=BA,BA^=N,E[A+8|0]=BA,E[A+9|0]=BA>>>8,E[A+10|0]=BA>>>16,E[A+11|0]=BA>>>24,iA=o,o^=G,E[A+12|0]=o,E[A+13|0]=o>>>8,E[A+14|0]=o>>>16,E[A+15|0]=o>>>24,yA=I,BA=eA,I=q,q=nA(y^h,M^SA,1),o=(FA=w)+B|0,o=(q>>>0>(eA=q+g|0)>>>0?o+1|0:o)+T|0,oA=o=(h=eA)>>>0>(eA=oA+eA|0)>>>0?o+1|0:o,I=nA(I^eA,o^fA,32),o=(o=BA)+(BA=w)|0,fA=o=(yA=I+yA|0)>>>0<I>>>0?o+1|0:o,pA=I,yA=nA(q^(T=yA),o^FA,40),o=(y=w)+C|0,o=oA+((I=yA+sA|0)>>>0<yA>>>0?o+1|0:o)|0,o=(I=I+eA|0)>>>0<eA>>>0?o+1|0:o,oA=I,I^=pA,pA=o,eA=nA(I,o^BA,48),o=(h=w)+fA|0,T=I=eA+T|0,fA=I>>>0<eA>>>0?o+1|0:o,DA=I=nA(u^DA,l^HA,1),FA=o=w,o=o+x|0,o=e+((I=I+aA|0)>>>0<aA>>>0?o+1|0:o)|0,x=o=(q=I+hA|0)>>>0<hA>>>0?o+1|0:o,I=(BA=nA(c^q,o^D,32))+n|0,o=(n=w)+t|0,hA=I,I=(aA=nA(e=I^DA,(DA=I>>>0<BA>>>0?o+1|0:o)^FA,40))+X|0,o=(X=w)+tA|0,o=x+(I>>>0<aA>>>0?o+1|0:o)|0,o=(x=I+q|0)>>>0<q>>>0?o+1|0:o,q=x^UA^T,E[0|(I=A)]=q,E[I+1|0]=q>>>8,E[I+2|0]=q>>>16,E[I+3|0]=q>>>24,q=o^Q^fA,E[I+4|0]=q,E[I+5|0]=q>>>8,E[I+6|0]=q>>>16,E[I+7|0]=q>>>24,q=(BA=nA(x^BA,o^n,48))+hA|0,o=(hA=w)+DA|0,o=(DA=q>>>0<BA>>>0?o+1|0:o)^(a[I+20|0]|a[I+21|0]<<8|a[I+22|0]<<16|a[I+23|0]<<24)^pA,x=(a[I+16|0]|a[I+17|0]<<8|a[I+18|0]<<16|a[I+19|0]<<24)^oA^q,E[I+16|0]=x,E[I+17|0]=x>>>8,E[I+18|0]=x>>>16,E[I+19|0]=x>>>24,E[I+20|0]=o,E[I+21|0]=o>>>8,E[I+22|0]=o>>>16,E[I+23|0]=o>>>24,I=nA(QA^lA,F^U,48),x=w,oA=a[A+36|0]|a[A+37|0]<<8|a[A+38|0]<<16|a[A+39|0]<<24,o=(a[A+32|0]|a[A+33|0]<<8|a[A+34|0]<<16|a[A+35|0]<<24)^nA(gA^rA,r^iA,1)^I,E[A+32|0]=o,E[A+33|0]=o>>>8,E[A+34|0]=o>>>16,E[A+35|0]=o>>>24,o=w^oA^x,E[A+36|0]=o,E[A+37|0]=o>>>8,E[A+38|0]=o>>>16,E[A+39|0]=o>>>24,o=k+x|0,o=(oA=I+f|0)>>>0<I>>>0?o+1|0:o,gA=(a[(I=A)+28|0]|a[I+29|0]<<8|a[I+30|0]<<16|a[I+31|0]<<24)^z^o,x=(a[I+24|0]|a[I+25|0]<<8|a[I+26|0]<<16|a[I+27|0]<<24)^cA^oA,E[I+24|0]=x,E[I+25|0]=x>>>8,E[I+26|0]=x>>>16,E[I+27|0]=x>>>24,E[I+28|0]=gA,E[I+29|0]=gA>>>8,E[I+30|0]=gA>>>16,E[I+31|0]=gA>>>24,gA=a[I+44|0]|a[I+45|0]<<8|a[I+46|0]<<16|a[I+47|0]<<24,I=eA^(a[I+40|0]|a[I+41|0]<<8|a[I+42|0]<<16|a[I+43|0]<<24)^nA(q^aA,X^DA,1),E[A+40|0]=I,E[A+41|0]=I>>>8,E[A+42|0]=I>>>16,E[A+43|0]=I>>>24,I=h^w^gA,E[A+44|0]=I,E[A+45|0]=I>>>8,E[A+46|0]=I>>>16,E[A+47|0]=I>>>24,q=a[A+60|0]|a[A+61|0]<<8|a[A+62|0]<<16|a[A+63|0]<<24,I=BA^(a[A+56|0]|a[A+57|0]<<8|a[A+58|0]<<16|a[A+59|0]<<24)^nA(T^yA,y^fA,1),E[A+56|0]=I,E[A+57|0]=I>>>8,E[A+58|0]=I>>>16,E[A+59|0]=I>>>24,I=hA^w^q,E[A+60|0]=I,E[A+61|0]=I>>>8,E[A+62|0]=I>>>16,E[A+63|0]=I>>>24,q=a[A+52|0]|a[A+53|0]<<8|a[A+54|0]<<16|a[A+55|0]<<24,I=EA^(a[A+48|0]|a[A+49|0]<<8|a[A+50|0]<<16|a[A+51|0]<<24)^nA(oA^MA,o^H,1),E[A+48|0]=I,E[A+49|0]=I>>>8,E[A+50|0]=I>>>16,E[A+51|0]=I>>>24,I=p^w^q,E[A+52|0]=I,E[A+53|0]=I>>>8,E[A+54|0]=I>>>16,E[A+55|0]=I>>>24;}function s(A,I,g,C,B,Q,i){var n,r,f,t,e,c,y,h,s,p,k,F,l,S,H,G,U,J,N,Y,b,_,K,P,d,L,R,x,j,X,q,z,V,O,T,W,Z,$,AA,IA,gA,CA,BA,iA,oA,aA,nA,rA,fA=0,tA=0,eA=0,cA=0,yA=0,wA=0,hA=0,sA=0,pA=0,kA=0,FA=0,lA=0,SA=0,HA=0,MA=0,GA=0,UA=0,JA=0,NA=0,YA=0,bA=0,_A=0,KA=0,PA=0,vA=0,mA=0,dA=0,LA=0,RA=0,xA=0,jA=0,XA=0,qA=0,zA=0,VA=0,OA=0,TA=0,WA=0,ZA=0,AI=0,II=0,gI=0,CI=0,BI=0,QI=0,iI=0;return D=f=D-560|0,EA(f+352|0),i&&m(f+352|0,34768,34,0),QA(f+288|0,Q,32,0),m(wA=f+352|0,f+320|0,32,0),m(wA,g,C,B),M(wA,sA=f+224|0),pA=a[(tA=Q)+32|0]|a[tA+33|0]<<8|a[tA+34|0]<<16|a[tA+35|0]<<24,FA=a[tA+36|0]|a[tA+37|0]<<8|a[tA+38|0]<<16|a[tA+39|0]<<24,cA=a[tA+40|0]|a[tA+41|0]<<8|a[tA+42|0]<<16|a[tA+43|0]<<24,fA=a[tA+44|0]|a[tA+45|0]<<8|a[tA+46|0]<<16|a[tA+47|0]<<24,eA=a[tA+48|0]|a[tA+49|0]<<8|a[tA+50|0]<<16|a[tA+51|0]<<24,Q=a[tA+52|0]|a[tA+53|0]<<8|a[tA+54|0]<<16|a[tA+55|0]<<24,yA=a[tA+60|0]|a[tA+61|0]<<8|a[tA+62|0]<<16|a[tA+63|0]<<24,tA=a[tA+56|0]|a[tA+57|0]<<8|a[tA+58|0]<<16|a[tA+59|0]<<24,E[A+56|0]=tA,E[A+57|0]=tA>>>8,E[A+58|0]=tA>>>16,E[A+59|0]=tA>>>24,E[A+60|0]=yA,E[A+61|0]=yA>>>8,E[A+62|0]=yA>>>16,E[A+63|0]=yA>>>24,E[A+48|0]=eA,E[A+49|0]=eA>>>8,E[A+50|0]=eA>>>16,E[A+51|0]=eA>>>24,E[A+52|0]=Q,E[A+53|0]=Q>>>8,E[A+54|0]=Q>>>16,E[A+55|0]=Q>>>24,E[A+40|0]=cA,E[A+41|0]=cA>>>8,E[A+42|0]=cA>>>16,E[A+43|0]=cA>>>24,E[A+44|0]=fA,E[A+45|0]=fA>>>8,E[A+46|0]=fA>>>16,E[A+47|0]=fA>>>24,E[0|(Q=A+32|0)]=pA,E[Q+1|0]=pA>>>8,E[Q+2|0]=pA>>>16,E[Q+3|0]=pA>>>24,E[Q+4|0]=FA,E[Q+5|0]=FA>>>8,E[Q+6|0]=FA>>>16,E[Q+7|0]=FA>>>24,u(sA),v(f,sA),uA(A,f),EA(wA),i&&m(f+352|0,34768,34,0),m(i=f+352|0,A,64,0),m(i,g,C,B),M(i,hA=f+160|0),u(hA),E[f+288|0]=248&a[f+288|0],E[f+319|0]=63&a[f+319|0]|64,g=a[23+(A=r=f+288|0)|0],cA=DA(t=a[A+21|0]|a[A+22|0]<<8|g<<16&2031616,0,e=(a[hA+28|0]|a[hA+29|0]<<8|a[hA+30|0]<<16|a[hA+31|0]<<24)>>>7|0,0),eA=w,g=(A=a[hA+27|0])>>>24|0,B=A<<8|(fA=a[hA+23|0]|a[hA+24|0]<<8|a[hA+25|0]<<16|a[hA+26|0]<<24)>>>24,A=DA(c=2097151&((3&(FA=(A=(C=a[hA+28|0])>>>16|0)|g))<<30|(g=(C<<=16)|B)>>>2),0,y=(i=a[r+23|0]|a[r+24|0]<<8|a[r+25|0]<<16|a[r+26|0]<<24)>>>5&2097151,0),g=w+eA|0,C=A>>>0>(B=A+cA|0)>>>0?g+1|0:g,A=DA(h=(g=a[hA+23|0])<<16&2031616|a[hA+21|0]|a[hA+22|0]<<8,0,s=(a[r+28|0]|a[r+29|0]<<8|a[r+30|0]<<16|a[r+31|0]<<24)>>>7|0,0),C=w+C|0,eA=g=A+B|0,B=A>>>0>g>>>0?C+1|0:C,C=(A=a[r+27|0])>>>24|0,i=A<<8|i>>>24,A=DA(p=2097151&((3&(C|=g=(A=a[r+28|0])>>>16|0))<<30|(g=(A<<=16)|i)>>>2),0,k=fA>>>5&2097151,0),g=w+B|0,tA=C=A+eA|0,B=A>>>0>C>>>0?g+1|0:g,fA=DA(y,0,k,0),eA=w,g=(A=a[r+19|0])>>>24|0,i=A<<8|(UA=a[r+15|0]|a[r+16|0]<<8|a[r+17|0]<<16|a[r+18|0]<<24)>>>24,C=g,g=DA(F=(7&(C|=g=(A=a[r+20|0])>>>16|0))<<29|(g=(A<<=16)|i)>>>3,FA=C>>>3|0,e,0),A=w+eA|0,A=g>>>0>(C=g+fA|0)>>>0?A+1|0:A,i=(g=DA(t,0,c,0))+C|0,C=w+A|0,g=g>>>0>(fA=i)>>>0?C+1|0:C,C=(A=a[hA+19|0])>>>24|0,eA=A<<8|(GA=a[hA+15|0]|a[hA+16|0]<<8|a[hA+17|0]<<16|a[hA+18|0]<<24)>>>24,A=DA(l=(7&(cA=(A=(i=a[hA+20|0])>>>16|0)|C))<<29|(C=(i<<=16)|eA)>>>3,S=cA>>>3|0,s,0),g=w+g|0,g=A>>>0>(C=A+fA|0)>>>0?g+1|0:g,A=DA(h,0,p,0),g=w+g|0,pA=g=A>>>0>(sA=A+C|0)>>>0?g+1|0:g,lA=A=g-((sA>>>0<4293918720)-1|0)|0,C=(g=A>>>21|0)+B|0,fA=C=(A=(2097151&A)<<11|(cA=sA- -1048576|0)>>>21)>>>0>(tA=A+tA|0)>>>0?C+1|0:C,HA=A=C-((tA>>>0<4293918720)-1|0)|0,wA=(2097151&A)<<11|(eA=tA- -1048576|0)>>>21,i=A>>>21|0,A=DA(s,0,k,0),g=w,C=A,A=DA(e,0,y,0),g=w+g|0,g=A>>>0>(C=C+A|0)>>>0?g+1|0:g,SA=(A=C)+(C=DA(c,0,p,0))|0,A=w+g|0,A=C>>>0>SA>>>0?A+1|0:A,yA=SA-(g=-2097152&(C=SA- -1048576|0))|0,g=(A-((131071&(B=A-((SA>>>0<4293918720)-1|0)|0))+(g>>>0>SA>>>0)|0)|0)+i|0,j=g=(A=yA+wA|0)>>>0<yA>>>0?g+1|0:g,X=A,yA=DA(A,g,470296,0),wA=w,g=DA(e,0,p,0),A=w,i=g,g=DA(c,0,s,0),A=w+A|0,g=g>>>0>(i=i+g|0)>>>0?A+1|0:A,A=B>>>21|0,B=(2097151&B)<<11|C>>>21,C=A+g|0,_A=B=(C=B>>>0>(i=B+i|0)>>>0?C+1|0:C)-((i>>>0<4293918720)-1|0)|0,A=i-(g=-2097152&(bA=i- -1048576|0))|0,q=i=C-((131071&B)+(g>>>0>i>>>0)|0)|0,z=g=tA-(C=-2097152&eA)|0,V=B=fA-((C>>>0>tA>>>0)+HA|0)|0,O=A,C=DA(A,i,666643,0),A=w+wA|0,A=C>>>0>(i=C+yA|0)>>>0?A+1|0:A,C=DA(g,B,654183,0),g=w+A|0,kA=B=C+i|0,eA=C>>>0>B>>>0?g+1|0:g,SA=sA-(A=-2097152&cA)|0,lA=pA-((A>>>0>sA>>>0)+lA|0)|0,g=DA(c,0,F,FA),C=w,B=(A=g)+(g=DA(H=UA>>>6&2097151,0,e,0))|0,A=w+C|0,A=g>>>0>B>>>0?A+1|0:A,g=DA(y,0,h,0),C=w+A|0,C=g>>>0>(B=g+B|0)>>>0?C+1|0:C,A=DA(t,0,k,0),g=w+C|0,g=A>>>0>(B=A+B|0)>>>0?g+1|0:g,C=DA(s,0,G=GA>>>6&2097151,0),A=w+g|0,A=C>>>0>(B=C+B|0)>>>0?A+1|0:A,C=DA(p,0,l,S),g=w+A|0,sA=B=C+B|0,i=C>>>0>B>>>0?g+1|0:g,g=(A=a[r+14|0])>>>24|0,B=A<<8|(pA=a[r+10|0]|a[r+11|0]<<8|a[r+12|0]<<16|a[r+13|0]<<24)>>>24,g=DA(U=2097151&((1&(g|=A=(C=a[r+15|0])>>>16|0))<<31|(A=(C<<=16)|B)>>>1),0,e,0),A=w,C=g,g=DA(c,0,H,0),A=w+A|0,A=g>>>0>(C=C+g|0)>>>0?A+1|0:A,B=(g=DA(k,0,F,FA))+C|0,C=w+A|0,C=g>>>0>B>>>0?C+1|0:C,A=DA(y,0,l,S),g=w+C|0,g=A>>>0>(B=A+B|0)>>>0?g+1|0:g,A=DA(t,0,h,0),g=w+g|0,cA=C=A+B|0,B=A>>>0>C>>>0?g+1|0:g,g=(A=a[hA+14|0])>>>24|0,fA=A<<8|(tA=a[hA+10|0]|a[hA+11|0]<<8|a[hA+12|0]<<16|a[hA+13|0]<<24)>>>24,C=g,g=(A=a[hA+15|0])>>>16|0,g=DA(J=2097151&((1&(g|=C))<<31|(A=A<<16|fA)>>>1),0,s,0),A=w+B|0,A=g>>>0>(C=g+cA|0)>>>0?A+1|0:A,g=DA(p,0,G,0),A=w+A|0,fA=A=g>>>0>(cA=g+C|0)>>>0?A+1|0:A,KA=g=A-((cA>>>0<4293918720)-1|0)|0,C=(A=g>>>21|0)+i|0,wA=C=(g=(2097151&g)<<11|(yA=cA- -1048576|0)>>>21)>>>0>(HA=g+sA|0)>>>0?C+1|0:C,NA=g=C-((HA>>>0<4293918720)-1|0)|0,A=(A=g>>>21|0)+lA|0,T=A=(g=(C=(2097151&g)<<11|(sA=HA- -1048576|0)>>>21)+SA|0)>>>0<C>>>0?A+1|0:A,W=g,A=DA(g,A,-997805,-1),g=w+eA|0,kA=C=A+kA|0,eA=A>>>0>C>>>0?g+1|0:g,SA=(mA=a[23+(n=f+224|0)|0]|a[n+24|0]<<8|a[n+25|0]<<16|a[n+26|0]<<24)>>>5&2097151,C=DA(N=(A=a[r+2|0])<<16&2031616|a[0|r]|a[r+1|0]<<8,0,k,0),g=w,B=(A=DA(h,0,Y=(i=a[r+2|0]|a[r+3|0]<<8|a[r+4|0]<<16|a[r+5|0]<<24)>>>5&2097151,0))+C|0,C=w+g|0,C=A>>>0>B>>>0?C+1|0:C,A=DA(b=(a[r+7|0]|a[r+8|0]<<8|a[r+9|0]<<16|a[r+10|0]<<24)>>>7&2097151,0,G,0),g=w+C|0,g=A>>>0>(B=A+B|0)>>>0?g+1|0:g,C=DA(J,0,_=pA>>>4&2097151,0),A=w+g|0,pA=B=C+B|0,B=C>>>0>B>>>0?A+1|0:A,i=(g=a[r+6|0])<<8|i>>>24,C=A=g>>>24|0,g=(A=a[r+7|0])>>>16|0,g=DA(K=2097151&((3&(g|=C))<<30|(A=A<<16|i)>>>2),0,l,S),A=w+B|0,A=g>>>0>(C=g+pA|0)>>>0?A+1|0:A,B=(g=DA(H,0,P=(a[hA+7|0]|a[hA+8|0]<<8|a[hA+9|0]<<16|a[hA+10|0]<<24)>>>7&2097151,0))+C|0,C=w+A|0,C=g>>>0>B>>>0?C+1|0:C,g=DA(U,0,YA=tA>>>4&2097151,0),A=w+C|0,i=g>>>0>(B=g+B|0)>>>0?A+1|0:A,A=(g=a[hA+6|0])>>>24|0,pA=g<<8|(tA=a[hA+2|0]|a[hA+3|0]<<8|a[hA+4|0]<<16|a[hA+5|0]<<24)>>>24,g=A,A=DA(F,FA,d=2097151&((3&(g|=C=(A=a[hA+7|0])>>>16|0))<<30|(A=A<<16|pA)>>>2),0),g=w+i|0,g=A>>>0>(C=A+B|0)>>>0?g+1|0:g,B=C,C=DA(L=(A=a[hA+2|0])<<16&2031616|a[0|hA]|a[hA+1|0]<<8,0,y,0),A=w+g|0,A=C>>>0>(B=B+C|0)>>>0?A+1|0:A,g=DA(t,0,R=tA>>>5&2097151,0),A=w+A|0,g=g>>>0>(C=g+B|0)>>>0?A+1|0:A,pA=A=C+SA|0,i=g=A>>>0<C>>>0?g+1|0:g,B=a[n+21|0]|a[n+22|0]<<8,A=DA(h,0,N,0),g=w,tA=(C=A)+(A=DA(l,S,Y,0))|0,C=w+g|0,C=A>>>0>tA>>>0?C+1|0:C,A=DA(J,0,b,0),g=w+C|0,g=A>>>0>(tA=A+tA|0)>>>0?g+1|0:g,A=DA(_,0,YA,0),g=w+g|0,g=A>>>0>(C=A+tA|0)>>>0?g+1|0:g,tA=(A=C)+(C=DA(G,0,K,0))|0,A=w+g|0,A=C>>>0>tA>>>0?A+1|0:A,g=DA(H,0,d,0),A=w+A|0,A=g>>>0>(C=g+tA|0)>>>0?A+1|0:A,tA=(g=DA(U,0,P,0))+C|0,C=w+A|0,C=g>>>0>tA>>>0?C+1|0:C,A=DA(F,FA,R,0),g=w+C|0,g=A>>>0>(tA=A+tA|0)>>>0?g+1|0:g,A=DA(t,0,L,0),g=w+g|0,A=A>>>0>(C=A+tA|0)>>>0?g+1|0:g,g=(g=C)>>>0>(C=C+B|0)>>>0?A+1|0:A,B=C,C=(A=a[n+23|0])<<16&2031616,A=g,C=A=C>>>0>(B=B+C|0)>>>0?A+1|0:A,hA=A=A-((B>>>0<4293918720)-1|0)|0,g=(g=A>>>21|0)+i|0,A=(g=(i=pA=(A=(2097151&A)<<11|(tA=B- -1048576|0)>>>21)+pA|0)>>>0<A>>>0?g+1|0:g)+eA|0,A=(eA=i+kA|0)>>>0<i>>>0?A+1|0:A,UA=i- -1048576|0,MA=i=g-((i>>>0<4293918720)-1|0)|0,JA=eA-(g=-2097152&UA)|0,PA=A-((g>>>0>eA>>>0)+i|0)|0,pA=B,eA=C,A=DA(z,V,470296,0),g=w,C=A,A=DA(X,j,666643,0),g=w+g|0,g=A>>>0>(C=C+A|0)>>>0?g+1|0:g,B=(A=C)+(C=DA(W,T,654183,0))|0,A=w+g|0,GA=B,i=C>>>0>B>>>0?A+1|0:A,g=DA(l,S,N,0),A=w,C=g,g=DA(G,0,Y,0),A=w+A|0,A=g>>>0>(C=C+g|0)>>>0?A+1|0:A,B=(g=C)+(C=DA(b,0,YA,0))|0,g=w+A|0,g=C>>>0>B>>>0?g+1|0:g,A=DA(_,0,P,0),C=w+g|0,C=A>>>0>(B=A+B|0)>>>0?C+1|0:C,A=DA(J,0,K,0),g=w+C|0,g=A>>>0>(B=A+B|0)>>>0?g+1|0:g,C=DA(H,0,R,0),A=w+g|0,A=C>>>0>(B=C+B|0)>>>0?A+1|0:A,g=DA(U,0,d,0),A=w+A|0,A=g>>>0>(C=g+B|0)>>>0?A+1|0:A,B=(g=C)+(C=DA(F,FA,L,0))|0,g=w+A|0,SA=B,C=C>>>0>B>>>0?g+1|0:g,g=(A=a[n+19|0])>>>24|0,lA=A<<8|(kA=a[n+15|0]|a[n+16|0]<<8|a[n+17|0]<<16|a[n+18|0]<<24)>>>24,C=((vA=(A=(B=a[n+20|0])>>>16|0)|g)>>>3|0)+C|0,SA=B=(g=(7&vA)<<29|(g=(B<<=16)|lA)>>>3)+SA|0,B=g>>>0>B>>>0?C+1|0:C,lA=kA>>>6&2097151,A=DA(G,0,N,0),g=w,C=A,A=DA(J,0,Y,0),g=w+g|0,g=A>>>0>(C=C+A|0)>>>0?g+1|0:g,kA=(A=C)+(C=DA(b,0,P,0))|0,A=w+g|0,A=C>>>0>kA>>>0?A+1|0:A,C=DA(_,0,d,0),g=w+A|0,g=C>>>0>(kA=C+kA|0)>>>0?g+1|0:g,C=DA(K,0,YA,0),A=w+g|0,A=C>>>0>(kA=C+kA|0)>>>0?A+1|0:A,g=DA(H,0,L,0),C=w+A|0,C=g>>>0>(kA=g+kA|0)>>>0?C+1|0:C,A=DA(U,0,R,0),g=w+C|0,A=A>>>0>(kA=A+kA|0)>>>0?g+1|0:g,VA=A=(LA=kA+lA|0)>>>0<kA>>>0?A+1|0:A,gI=A=A-((LA>>>0<4293918720)-1|0)|0,C=(2097151&A)<<11|(qA=LA- -1048576|0)>>>21,A=(A>>>21|0)+B|0,TA=A=C>>>0>(OA=C+SA|0)>>>0?A+1|0:A,CI=A=A-((OA>>>0<4293918720)-1|0)|0,C=(2097151&A)<<11|(xA=OA- -1048576|0)>>>21,A=(A>>>21|0)+i|0,g=(C>>>0>(B=C+GA|0)>>>0?A+1|0:A)+eA|0,eA=(C=B+pA|0)-(A=-2097152&tA)|0,hA=A=(g=C>>>0<B>>>0?g+1|0:g)-((A>>>0>C>>>0)+hA|0)|0,BI=A=A-((eA>>>0<4293918720)-1|0)|0,C=(2097151&A)<<11|(jA=eA- -1048576|0)>>>21,A=(A>>21)+PA|0,B=A=C>>>0>(i=C+JA|0)>>>0?A+1|0:A,II=A=A-((i>>>0<4293918720)-1|0)|0,XA=(2097151&A)<<11|(GA=i- -1048576|0)>>>21,pA=A>>21,vA=HA-(A=-2097152&sA)|0,NA=wA-((A>>>0>HA>>>0)+NA|0)|0,A=DA(e,0,s,0),zA=g=w,JA=A,kA=A- -1048576|0,RA=g=g-((A>>>0<4293918720)-1|0)|0,Z=A=g>>>21|0,A=DA(x=(2097151&g)<<11|kA>>>21,A,-683901,-1),g=w+fA|0,g=A>>>0>(C=A+cA|0)>>>0?g+1|0:g,sA=C-(A=-2097152&yA)|0,tA=g-((A>>>0>C>>>0)+KA|0)|0,g=DA(k,0,H,0),A=w,C=g,g=DA(e,0,_,0),A=w+A|0,A=g>>>0>(C=C+g|0)>>>0?A+1|0:A,g=DA(c,0,U,0),A=w+A|0,A=g>>>0>(C=g+C|0)>>>0?A+1|0:A,fA=(g=C)+(C=DA(h,0,F,FA))|0,g=w+A|0,g=C>>>0>fA>>>0?g+1|0:g,A=DA(y,0,G,0),C=w+g|0,C=A>>>0>(fA=A+fA|0)>>>0?C+1|0:C,A=DA(t,0,l,S),g=w+C|0,g=A>>>0>(fA=A+fA|0)>>>0?g+1|0:g,C=DA(s,0,YA,0),A=w+g|0,A=C>>>0>(fA=C+fA|0)>>>0?A+1|0:A,g=DA(p,0,J,0),A=w+A|0,cA=C=g+fA|0,fA=g>>>0>C>>>0?A+1|0:A,A=DA(c,0,_,0),g=w,C=A,A=DA(e,0,b,0),g=w+g|0,g=A>>>0>(C=C+A|0)>>>0?g+1|0:g,wA=(A=DA(h,0,H,0))+C|0,C=w+g|0,C=A>>>0>wA>>>0?C+1|0:C,A=DA(k,0,U,0),g=w+C|0,g=A>>>0>(wA=A+wA|0)>>>0?g+1|0:g,C=DA(F,FA,l,S),A=w+g|0,A=C>>>0>(wA=C+wA|0)>>>0?A+1|0:A,g=DA(y,0,J,0),A=w+A|0,A=g>>>0>(C=g+wA|0)>>>0?A+1|0:A,wA=(g=C)+(C=DA(t,0,G,0))|0,g=w+A|0,g=C>>>0>wA>>>0?g+1|0:g,A=DA(s,0,P,0),C=w+g|0,C=A>>>0>(wA=A+wA|0)>>>0?C+1|0:C,A=DA(p,0,YA,0),g=w+C|0,lA=g=A>>>0>(SA=A+wA|0)>>>0?g+1|0:g,ZA=A=g-((SA>>>0<4293918720)-1|0)|0,g=(2097151&A)<<11|(HA=SA- -1048576|0)>>>21,A=(A>>>21|0)+fA|0,yA=A=g>>>0>(KA=g+cA|0)>>>0?A+1|0:A,dA=A=A-((KA>>>0<4293918720)-1|0)|0,g=(C=A>>>21|0)+tA|0,sA=g=(A=(2097151&A)<<11|(wA=KA- -1048576|0)>>>21)>>>0>(PA=A+sA|0)>>>0?g+1|0:g,WA=A=g-((PA>>>0<4293918720)-1|0)|0,fA=(2097151&A)<<11|(tA=PA- -1048576|0)>>>21,A=(A>>21)+NA|0,$=A=(g=fA+vA|0)>>>0<fA>>>0?A+1|0:A,AA=g,A=DA(g,A,-683901,-1),g=w+pA|0,XA=C=A+XA|0,pA=A>>>0>C>>>0?g+1|0:g,A=DA(c,0,N,0),g=w,C=A,A=DA(k,0,Y,0),g=w+g|0,g=A>>>0>(C=C+A|0)>>>0?g+1|0:g,fA=(A=C)+(C=DA(l,S,b,0))|0,A=w+g|0,A=C>>>0>fA>>>0?A+1|0:A,g=DA(G,0,_,0),C=w+A|0,C=g>>>0>(fA=g+fA|0)>>>0?C+1|0:C,g=DA(h,0,K,0),A=w+C|0,A=g>>>0>(fA=g+fA|0)>>>0?A+1|0:A,C=DA(H,0,YA,0),g=w+A|0,g=C>>>0>(fA=C+fA|0)>>>0?g+1|0:g,A=DA(U,0,J,0),g=w+g|0,g=A>>>0>(C=A+fA|0)>>>0?g+1|0:g,fA=(A=C)+(C=DA(F,FA,P,0))|0,A=w+g|0,A=C>>>0>fA>>>0?A+1|0:A,g=DA(y,0,R,0),C=w+A|0,C=g>>>0>(fA=g+fA|0)>>>0?C+1|0:C,g=DA(t,0,d,0),A=w+C|0,A=g>>>0>(fA=g+fA|0)>>>0?A+1|0:A,C=DA(p,0,L,0),g=w+A|0,NA=fA=C+fA|0,C=C>>>0>fA>>>0?g+1|0:g,g=(A=a[n+27|0])>>>24|0,cA=A<<8|mA>>>24,fA=2097151&((3&(g|=A=(fA=a[n+28|0])>>>16|0))<<30|(A=(fA<<=16)|cA)>>>2),g=C,cA=A=fA+NA|0,fA=A>>>0<fA>>>0?g+1|0:g,vA=DA(O,q,470296,0),NA=w,A=(C=(2097151&_A)<<11|bA>>>21)+(JA-(g=-2097152&kA)|0)|0,g=zA-((524287&RA)+(g>>>0>JA>>>0)|0)+(_A>>>21)|0,IA=g=A>>>0<C>>>0?g+1|0:g,gA=A,g=DA(A,g,666643,0),A=w+NA|0,A=g>>>0>(C=g+vA|0)>>>0?A+1|0:A,kA=(g=DA(X,j,654183,0))+C|0,C=w+A|0,C=g>>>0>kA>>>0?C+1|0:C,g=DA(z,V,-997805,-1),A=w+C|0,A=g>>>0>(kA=g+kA|0)>>>0?A+1|0:A,C=DA(W,T,136657,0),g=w+A|0,UA=(A=(2097151&MA)<<11|UA>>>21)+(kA=C+kA|0)|0,g=(MA>>>21|0)+(C>>>0>kA>>>0?g+1|0:g)|0,RA=kA=fA-((cA>>>0<4293918720)-1|0)|0,A=(A>>>0>UA>>>0?g+1|0:g)+fA|0,g=(fA=cA+UA|0)-(C=-2097152&(zA=cA- -1048576|0))|0,C=(A=(A=fA>>>0<UA>>>0?A+1|0:A)-((C>>>0>fA>>>0)+kA|0)|0)+pA|0,vA=fA=A-((g>>>0<4293918720)-1|0)|0,JA=(C=(cA=g+XA|0)>>>0<g>>>0?C+1|0:C)-(((g=-2097152&(NA=g- -1048576|0))>>>0>cA>>>0)+fA|0)|0,mA=A=cA-g|0,fA=i,i=B,AI=PA-(A=-2097152&tA)|0,kA=sA-((A>>>0>PA>>>0)+WA|0)|0,A=DA(gA,IA,-683901,-1),g=w,B=(C=A)+(A=DA(x,Z,136657,0))|0,C=w+g|0,g=yA+(A>>>0>B>>>0?C+1|0:C)|0,wA=(C=B+KA|0)-(A=-2097152&wA)|0,sA=(g=C>>>0<KA>>>0?g+1|0:g)-((A>>>0>C>>>0)+dA|0)|0,g=DA(x,Z,-997805,-1),A=w+lA|0,A=g>>>0>(C=g+SA|0)>>>0?A+1|0:A,B=(g=DA(gA,IA,136657,0))+C|0,C=w+A|0,C=g>>>0>B>>>0?C+1|0:C,A=DA(O,q,-683901,-1),g=w+C|0,g=A>>>0>(B=A+B|0)>>>0?g+1|0:g,tA=B-(A=-2097152&HA)|0,pA=g-((A>>>0>B>>>0)+ZA|0)|0,g=DA(k,0,_,0),A=w,C=g,g=DA(c,0,b,0),A=w+A|0,A=g>>>0>(C=C+g|0)>>>0?A+1|0:A,B=(g=DA(e,0,K,0))+C|0,C=w+A|0,C=g>>>0>B>>>0?C+1|0:C,A=DA(l,S,H,0),g=w+C|0,g=A>>>0>(B=A+B|0)>>>0?g+1|0:g,C=DA(h,0,U,0),A=w+g|0,A=C>>>0>(B=C+B|0)>>>0?A+1|0:A,C=DA(F,FA,G,0),g=w+A|0,g=C>>>0>(B=C+B|0)>>>0?g+1|0:g,C=DA(y,0,YA,0),A=w+g|0,A=C>>>0>(B=C+B|0)>>>0?A+1|0:A,g=DA(t,0,J,0),C=w+A|0,C=g>>>0>(B=g+B|0)>>>0?C+1|0:C,A=DA(s,0,d,0),g=w+C|0,g=A>>>0>(B=A+B|0)>>>0?g+1|0:g,C=DA(p,0,P,0),A=w+g|0,cA=B=C+B|0,B=C>>>0>B>>>0?A+1|0:A,A=DA(k,0,b,0),g=w,C=A,A=DA(e,0,Y,0),g=w+g|0,g=A>>>0>(C=C+A|0)>>>0?g+1|0:g,yA=(A=C)+(C=DA(h,0,_,0))|0,A=w+g|0,A=C>>>0>yA>>>0?A+1|0:A,g=DA(c,0,K,0),C=w+A|0,C=g>>>0>(yA=g+yA|0)>>>0?C+1|0:C,A=DA(H,0,G,0),g=w+C|0,g=A>>>0>(yA=A+yA|0)>>>0?g+1|0:g,C=DA(l,S,U,0),A=w+g|0,A=C>>>0>(yA=C+yA|0)>>>0?A+1|0:A,C=DA(F,FA,J,0),g=w+A|0,g=C>>>0>(yA=C+yA|0)>>>0?g+1|0:g,C=DA(y,0,P,0),A=w+g|0,A=C>>>0>(yA=C+yA|0)>>>0?A+1|0:A,g=DA(t,0,YA,0),C=w+A|0,C=g>>>0>(yA=g+yA|0)>>>0?C+1|0:C,yA=(A=DA(s,0,R,0))+yA|0,g=w+C|0,C=DA(p,0,d,0),A=w+(A>>>0>yA>>>0?g+1|0:g)|0,PA=A=C>>>0>(WA=C+yA|0)>>>0?A+1|0:A,BA=A=A-((WA>>>0<4293918720)-1|0)|0,C=(2097151&A)<<11|(_A=WA- -1048576|0)>>>21,A=(A>>>21|0)+B|0,bA=A=C>>>0>(XA=C+cA|0)>>>0?A+1|0:A,iA=A=A-((XA>>>0<4293918720)-1|0)|0,C=(2097151&A)<<11|(MA=XA- -1048576|0)>>>21,A=(A>>>21|0)+pA|0,UA=A=C>>>0>(KA=C+tA|0)>>>0?A+1|0:A,oA=A=A-((KA>>>0<4293918720)-1|0)|0,C=(2097151&A)<<11|(lA=KA- -1048576|0)>>>21,A=(A>>21)+sA|0,B=A=C>>>0>(tA=C+wA|0)>>>0?A+1|0:A,sA=A=A-((tA>>>0<4293918720)-1|0)|0,pA=(2097151&A)<<11|(C=tA- -1048576|0)>>>21,A=(A>>21)+kA|0,ZA=A=(cA=pA+AI|0)>>>0<pA>>>0?A+1|0:A,dA=cA,A=DA(cA,A,-683901,-1),g=w,cA=A,A=DA(AA,$,136657,0),g=w+g|0,A=(A>>>0>(cA=cA+A|0)>>>0?g+1|0:g)+i|0,QI=(i=fA+cA|0)-(g=-2097152&GA)|0,iI=(A=i>>>0<cA>>>0?A+1|0:A)-((g>>>0>i>>>0)+II|0)|0,pA=eA,cA=hA,eA=DA(dA,ZA,136657,0),i=w,AI=A=tA-(g=-2097152&C)|0,CA=B=B-((g>>>0>tA>>>0)+sA|0)|0,C=DA(AA,$,-997805,-1),g=w+i|0,g=C>>>0>(eA=C+eA|0)>>>0?g+1|0:g,C=DA(A,B,-683901,-1),A=w+g|0,II=B=C+eA|0,fA=C>>>0>B>>>0?A+1|0:A,A=DA(W,T,470296,0),g=w,B=(C=A)+(A=DA(z,V,666643,0))|0,C=w+g|0,g=TA+(A>>>0>B>>>0?C+1|0:C)|0,kA=A=B+OA|0,i=g=A>>>0<OA>>>0?g+1|0:g,g=DA(W,T,666643,0),A=w+VA|0,A=g>>>0>(C=g+LA|0)>>>0?A+1|0:A,wA=C-(g=-2097152&qA)|0,SA=A-((g>>>0>C>>>0)+gI|0)|0,g=DA(J,0,N,0),A=w,C=g,g=DA(Y,0,YA,0),A=w+A|0,A=g>>>0>(C=C+g|0)>>>0?A+1|0:A,B=(g=C)+(C=DA(b,0,d,0))|0,g=w+A|0,g=C>>>0>B>>>0?g+1|0:g,C=DA(_,0,R,0),A=w+g|0,A=C>>>0>(B=C+B|0)>>>0?A+1|0:A,g=DA(K,0,P,0),C=w+A|0,C=g>>>0>(B=g+B|0)>>>0?C+1|0:C,A=DA(U,0,L,0),g=w+C|0,tA=B=A+B|0,B=A>>>0>B>>>0?g+1|0:g,g=(A=a[n+14|0])>>>24|0,eA=A<<8|(sA=a[n+10|0]|a[n+11|0]<<8|a[n+12|0]<<16|a[n+13|0]<<24)>>>24,g=2097151&((1&(g|=C=(A=a[n+15|0])>>>16|0))<<31|(A=eA|A<<16)>>>1),A=B,tA=C=g+tA|0,B=g>>>0>C>>>0?A+1|0:A,eA=sA>>>4&2097151,A=DA(N,0,YA,0),g=w,C=A,A=DA(Y,0,P,0),g=w+g|0,g=A>>>0>(C=C+A|0)>>>0?g+1|0:g,A=DA(b,0,R,0),g=w+g|0,g=A>>>0>(C=A+C|0)>>>0?g+1|0:g,sA=(A=C)+(C=DA(_,0,L,0))|0,A=w+g|0,A=C>>>0>sA>>>0?A+1|0:A,g=DA(K,0,d,0),C=w+A|0,A=g>>>0>(sA=g+sA|0)>>>0?C+1|0:C,hA=A=(qA=eA+sA|0)>>>0<sA>>>0?A+1|0:A,aA=A=A-((qA>>>0<4293918720)-1|0)|0,g=(C=A>>>21|0)+B|0,HA=g=(A=(2097151&A)<<11|(GA=qA- -1048576|0)>>>21)>>>0>(TA=A+tA|0)>>>0?g+1|0:g,nA=A=g-((TA>>>0<4293918720)-1|0)|0,g=(2097151&A)<<11|(yA=TA- -1048576|0)>>>21,A=(A>>>21|0)+SA|0,sA=A=g>>>0>(wA=g+wA|0)>>>0?A+1|0:A,rA=A=A-((wA>>>0<4293918720)-1|0)|0,g=(C=A>>21)+i|0,gI=g=(g=(A=(2097151&A)<<11|(tA=wA- -1048576|0)>>>21)>>>0>(B=A+kA|0)>>>0?g+1|0:g)-(((C=-2097152&xA)>>>0>B>>>0)+CI|0)|0,xA=A=B-C|0,eA=A- -1048576|0,CI=A=g-((A>>>0<4293918720)-1|0)|0,C=(g=A>>21)+fA|0,g=((A=(2097151&A)<<11|eA>>>21)>>>0>(B=A+II|0)>>>0?C+1|0:C)+cA|0,LA=g=(g=(A=B)>>>0>(B=B+pA|0)>>>0?g+1|0:g)-(((C=-2097152&jA)>>>0>B>>>0)+BI|0)|0,cA=A=B-C|0,i=A- -1048576|0,VA=A=g-((A>>>0<4293918720)-1|0)|0,C=(g=A>>21)+iI|0,jA=A=(C=(A=(2097151&A)<<11|i>>>21)>>>0>(fA=A+QI|0)>>>0?C+1|0:C)-((fA>>>0<4293918720)-1|0)|0,kA=mA- -1048576|0,SA=JA-((mA>>>0<4293918720)-1|0)|0,pA=(2097151&A)<<11|(B=fA- -1048576|0)>>>21,A=(A>>21)+JA|0,BI=(mA=pA+mA|0)-(g=-2097152&kA)|0,QI=(pA>>>0>mA>>>0?A+1|0:A)-((g>>>0>mA>>>0)+SA|0)|0,iI=fA-(A=-2097152&B)|0,II=C-((A>>>0>fA>>>0)+jA|0)|0,OA=cA-(A=-2097152&i)|0,mA=LA-((A>>>0>cA>>>0)+VA|0)|0,A=DA(dA,ZA,-997805,-1),g=w,C=A,A=DA(AA,$,654183,0),g=w+g|0,g=A>>>0>(C=C+A|0)>>>0?g+1|0:g,B=(A=C)+(C=DA(AI,CA,136657,0))|0,A=w+g|0,g=gI+(C>>>0>B>>>0?A+1|0:A)|0,LA=(C=B+xA|0)-(A=-2097152&eA)|0,VA=(g=C>>>0<xA>>>0?g+1|0:g)-((A>>>0>C>>>0)+CI|0)|0,xA=KA-(A=-2097152&lA)|0,JA=UA-((A>>>0>KA>>>0)+oA|0)|0,g=DA(gA,IA,-997805,-1),A=w,C=g,g=DA(x,Z,654183,0),A=w+A|0,A=g>>>0>(C=C+g|0)>>>0?A+1|0:A,B=(g=C)+(C=DA(O,q,136657,0))|0,g=w+A|0,g=C>>>0>B>>>0?g+1|0:g,A=DA(X,j,-683901,-1),C=w+g|0,g=bA+(A>>>0>(B=A+B|0)>>>0?C+1|0:C)|0,lA=(C=B+XA|0)-(A=-2097152&MA)|0,UA=(g=C>>>0<XA>>>0?g+1|0:g)-((A>>>0>C>>>0)+iA|0)|0,g=DA(gA,IA,654183,0),A=w,C=g,g=DA(x,Z,470296,0),A=w+A|0,A=g>>>0>(C=C+g|0)>>>0?A+1|0:A,B=(g=DA(O,q,-997805,-1))+C|0,C=w+A|0,g=PA+(g>>>0>B>>>0?C+1|0:C)|0,g=(A=B+WA|0)>>>0<WA>>>0?g+1|0:g,C=A,A=DA(X,j,136657,0),g=w+g|0,g=A>>>0>(C=C+A|0)>>>0?g+1|0:g,B=(A=C)+(C=DA(z,V,-683901,-1))|0,A=w+g|0,eA=B-(g=-2097152&_A)|0,i=(C>>>0>B>>>0?A+1|0:A)-((g>>>0>B>>>0)+BA|0)|0,B=(a[n+28|0]|a[n+29|0]<<8|a[n+30|0]<<16|a[n+31|0]<<24)>>>7|0,A=DA(e,0,N,0),g=w,fA=(C=A)+(A=DA(c,0,Y,0))|0,C=w+g|0,C=A>>>0>fA>>>0?C+1|0:C,A=DA(h,0,b,0),g=w+C|0,g=A>>>0>(fA=A+fA|0)>>>0?g+1|0:g,C=DA(l,S,_,0),A=w+g|0,A=C>>>0>(fA=C+fA|0)>>>0?A+1|0:A,C=DA(k,0,K,0),g=w+A|0,g=C>>>0>(fA=C+fA|0)>>>0?g+1|0:g,C=DA(H,0,J,0),A=w+g|0,A=C>>>0>(fA=C+fA|0)>>>0?A+1|0:A,g=DA(G,0,U,0),C=w+A|0,C=g>>>0>(fA=g+fA|0)>>>0?C+1|0:C,A=DA(F,FA,YA,0),g=w+C|0,g=A>>>0>(fA=A+fA|0)>>>0?g+1|0:g,C=DA(y,0,d,0),A=w+g|0,A=C>>>0>(fA=C+fA|0)>>>0?A+1|0:A,C=DA(t,0,P,0),g=w+A|0,g=C>>>0>(fA=C+fA|0)>>>0?g+1|0:g,C=DA(s,0,L,0),A=w+g|0,A=C>>>0>(fA=C+fA|0)>>>0?A+1|0:A,g=DA(p,0,R,0),C=w+A|0,g=g>>>0>(fA=g+fA|0)>>>0?C+1|0:C,bA=(C=(2097151&RA)<<11|zA>>>21)+(A=B+fA|0)|0,A=(RA>>>21|0)+(g=A>>>0<fA>>>0?g+1|0:g)|0,pA=A=C>>>0>bA>>>0?A+1|0:A,jA=g=A-((bA>>>0<4293918720)-1|0)|0,C=(A=g>>>21|0)+i|0,cA=C=(g=(2097151&g)<<11|(FA=bA- -1048576|0)>>>21)>>>0>(MA=g+eA|0)>>>0?C+1|0:C,zA=g=C-((MA>>>0<4293918720)-1|0)|0,A=(A=g>>21)+UA|0,eA=A=(g=(2097151&g)<<11|(fA=MA- -1048576|0)>>>21)>>>0>(lA=g+lA|0)>>>0?A+1|0:A,_A=g=A-((lA>>>0<4293918720)-1|0)|0,C=(A=g>>21)+JA|0,RA=C=(g=(B=(2097151&g)<<11|(i=lA- -1048576|0)>>>21)+xA|0)>>>0<B>>>0?C+1|0:C,JA=g,A=DA(g,C,-683901,-1),g=w+VA|0,UA=C=A+LA|0,B=A>>>0>C>>>0?g+1|0:g,g=DA(AA,$,470296,0),A=w+sA|0,A=g>>>0>(wA=g+wA|0)>>>0?A+1|0:A,g=DA(dA,ZA,654183,0),A=w+(A-(((C=-2097152&tA)>>>0>wA>>>0)+rA|0)|0)|0,A=g>>>0>(tA=g+(wA-C|0)|0)>>>0?A+1|0:A,C=DA(AI,CA,-997805,-1),g=w+A|0,g=C>>>0>(tA=C+tA|0)>>>0?g+1|0:g,PA=C=lA-(A=-2097152&i)|0,YA=eA=eA-((A>>>0>lA>>>0)+_A|0)|0,tA=(i=DA(JA,RA,136657,0))+tA|0,A=w+g|0,C=DA(C,eA,-683901,-1),g=w+(i>>>0>tA>>>0?A+1|0:A)|0,eA=g=C>>>0>(sA=C+tA|0)>>>0?g+1|0:g,_A=A=g-((sA>>>0<4293918720)-1|0)|0,g=(2097151&A)<<11|(i=sA- -1048576|0)>>>21,A=(A>>21)+B|0,lA=g=(A=g>>>0>(tA=g+UA|0)>>>0?A+1|0:A)-((tA>>>0<4293918720)-1|0)|0,wA=(2097151&g)<<11|(B=tA- -1048576|0)>>>21,g=(g>>21)+mA|0,OA=UA=wA+OA|0,UA=wA>>>0>UA>>>0?g+1|0:g,mA=tA-(g=-2097152&B)|0,WA=A-((g>>>0>tA>>>0)+lA|0)|0,LA=sA-(A=-2097152&i)|0,VA=eA-((A>>>0>sA>>>0)+_A|0)|0,A=DA(AA,$,666643,0),C=HA+w|0,C=(i=A+TA|0)>>>0<TA>>>0?C+1|0:C,B=(A=DA(dA,ZA,470296,0))+(i-(g=-2097152&yA)|0)|0,g=w+(C-((g>>>0>i>>>0)+nA|0)|0)|0,g=A>>>0>B>>>0?g+1|0:g,C=DA(AI,CA,654183,0),A=w+g|0,tA=B=C+B|0,B=C>>>0>B>>>0?A+1|0:A,i=MA-(A=-2097152&fA)|0,eA=cA-((A>>>0>MA>>>0)+zA|0)|0,A=DA(gA,IA,470296,0),g=w,C=A,A=DA(x,Z,666643,0),g=w+g|0,g=A>>>0>(C=C+A|0)>>>0?g+1|0:g,A=DA(O,q,654183,0),g=w+g|0,g=A>>>0>(C=A+C|0)>>>0?g+1|0:g,fA=(A=C)+(C=DA(X,j,-997805,-1))|0,A=w+g|0,A=C>>>0>fA>>>0?A+1|0:A,g=DA(z,V,136657,0),A=w+A|0,A=g>>>0>(C=g+fA|0)>>>0?A+1|0:A,fA=(g=DA(W,T,-683901,-1))+C|0,C=w+A|0,g=pA+(g>>>0>fA>>>0?C+1|0:C)|0,MA=(C=(2097151&vA)<<11|NA>>>21)+((fA=fA+bA|0)-(A=-2097152&FA)|0)|0,A=((g=fA>>>0<bA>>>0?g+1|0:g)-((A>>>0>fA>>>0)+jA|0)|0)+(vA>>21)|0,lA=A=C>>>0>MA>>>0?A+1|0:A,xA=A=A-((MA>>>0<4293918720)-1|0)|0,g=i,i=(2097151&A)<<11|(yA=MA- -1048576|0)>>>21,A=(A>>21)+eA|0,_A=A=(C=g+i|0)>>>0<i>>>0?A+1|0:A,bA=C,A=DA(C,A,-683901,-1),g=w+B|0,g=A>>>0>(C=A+tA|0)>>>0?g+1|0:g,B=(A=C)+(C=DA(JA,RA,-997805,-1))|0,A=w+g|0,A=C>>>0>B>>>0?A+1|0:A,g=DA(PA,YA,136657,0),C=w+A|0,NA=B=g+B|0,cA=g>>>0>B>>>0?C+1|0:C,tA=qA-(A=-2097152&GA)|0,pA=hA-((A>>>0>qA>>>0)+aA|0)|0,g=DA(N,0,P,0),A=w,C=g,g=DA(Y,0,d,0),A=w+A|0,A=g>>>0>(C=C+g|0)>>>0?A+1|0:A,g=DA(b,0,L,0),A=w+A|0,A=g>>>0>(C=g+C|0)>>>0?A+1|0:A,B=(g=DA(K,0,R,0))+C|0,C=w+A|0,g=g>>>0>B>>>0?C+1|0:C,FA=C=(A=(a[n+7|0]|a[n+8|0]<<8|a[n+9|0]<<16|a[n+10|0]<<24)>>>7&2097151)+B|0,fA=A>>>0>C>>>0?g+1|0:g,A=DA(N,0,d,0),g=w,C=A,A=DA(Y,0,R,0),g=w+g|0,g=A>>>0>(C=C+A|0)>>>0?g+1|0:g,B=(A=C)+(C=DA(K,0,L,0))|0,A=w+g|0,eA=B,B=C>>>0>B>>>0?A+1|0:A,A=(g=a[n+6|0])>>>24|0,i=g<<8|(jA=a[n+2|0]|a[n+3|0]<<8|a[n+4|0]<<16|a[n+5|0]<<24)>>>24,C=A,g=(A=a[n+7|0])>>>16|0,g|=C,C=B,i=C=(A=2097151&((3&g)<<30|(A=A<<16|i)>>>2))>>>0>(eA=A+eA|0)>>>0?C+1|0:C,XA=A=C-((eA>>>0<4293918720)-1|0)|0,C=(2097151&A)<<11|(HA=eA- -1048576|0)>>>21,A=(A>>>21|0)+fA|0,wA=A=C>>>0>(hA=C+FA|0)>>>0?A+1|0:A,zA=A=A-((hA>>>0<4293918720)-1|0)|0,C=(g=A>>>21|0)+pA|0,C=(A=(2097151&A)<<11|(sA=hA- -1048576|0)>>>21)>>>0>(B=A+tA|0)>>>0?C+1|0:C,g=DA(dA,ZA,666643,0),A=w+C|0,A=g>>>0>(B=g+B|0)>>>0?A+1|0:A,g=DA(AI,CA,470296,0),A=w+A|0,A=g>>>0>(C=g+B|0)>>>0?A+1|0:A,B=(g=C)+(C=DA(bA,_A,136657,0))|0,g=w+A|0,g=C>>>0>B>>>0?g+1|0:g,A=DA(JA,RA,654183,0),g=w+g|0,g=A>>>0>(C=A+B|0)>>>0?g+1|0:g,tA=(A=DA(PA,YA,-997805,-1))+C|0,C=w+g|0,pA=C=A>>>0>tA>>>0?C+1|0:C,vA=A=C-((tA>>>0<4293918720)-1|0)|0,C=(2097151&A)<<11|(FA=tA- -1048576|0)>>>21,A=(A>>21)+cA|0,NA=C=(A=C>>>0>(B=C+NA|0)>>>0?A+1|0:A)-((B>>>0<4293918720)-1|0)|0,fA=(2097151&C)<<11|(cA=B- -1048576|0)>>>21,C=(C>>21)+VA|0,KA=GA=fA+LA|0,GA=fA>>>0>GA>>>0?C+1|0:C,fA=B,g=A,B=(MA-(A=-2097152&yA)|0)+(yA=(2097151&SA)<<11|kA>>>21)|0,A=(lA-((A>>>0>MA>>>0)+xA|0)|0)+(SA>>21)|0,kA=A=B>>>0<yA>>>0?A+1|0:A,LA=A=A-((B>>>0<4293918720)-1|0)|0,MA=C=A>>21,A=DA(dA=(2097151&A)<<11|(SA=B- -1048576|0)>>>21,C,-683901,-1),g=w+g|0,g=A>>>0>(C=A+fA|0)>>>0?g+1|0:g,VA=C-(A=-2097152&cA)|0,qA=g-((A>>>0>C>>>0)+NA|0)|0,g=DA(dA,MA,136657,0),A=w+pA|0,A=g>>>0>(C=g+tA|0)>>>0?A+1|0:A,TA=C-(g=-2097152&FA)|0,vA=A-((g>>>0>C>>>0)+vA|0)|0,g=DA(AI,CA,666643,0),A=w+(wA-(((C=-2097152&sA)>>>0>hA>>>0)+zA|0)|0)|0,A=g>>>0>(fA=g+(hA-C|0)|0)>>>0?A+1|0:A,C=DA(bA,_A,-997805,-1),g=w+A|0,g=C>>>0>(fA=C+fA|0)>>>0?g+1|0:g,A=DA(JA,RA,470296,0),C=w+g|0,C=A>>>0>(fA=A+fA|0)>>>0?C+1|0:C,g=DA(PA,YA,654183,0),A=w+C|0,NA=fA=g+fA|0,pA=g>>>0>fA>>>0?A+1|0:A,C=jA>>>5&2097151,A=DA(N,0,R,0),g=w,cA=A,A=DA(Y,0,L,0),g=w+g|0,A=A>>>0>(fA=cA+A|0)>>>0?g+1|0:g,cA=g=C+fA|0,C=A=g>>>0<fA>>>0?A+1|0:A,hA=(g=DA(N,0,L,0))+(A=(A=a[n+2|0])<<16&2031616|a[0|n]|a[n+1|0]<<8)|0,g=w,yA=g=A>>>0>hA>>>0?g+1|0:g,xA=g=g-((hA>>>0<4293918720)-1|0)|0,A=(A=g>>>21|0)+C|0,sA=A=(g=(2097151&g)<<11|(wA=hA- -1048576|0)>>>21)>>>0>(lA=g+cA|0)>>>0?A+1|0:A,jA=g=A-((lA>>>0<4293918720)-1|0)|0,C=(2097151&g)<<11|(tA=lA- -1048576|0)>>>21,g=(g>>>21|0)+i|0,g=C>>>0>(fA=C+eA|0)>>>0?g+1|0:g,C=DA(bA,_A,654183,0),A=w+(g-(((i=-2097152&HA)>>>0>fA>>>0)+XA|0)|0)|0,A=C>>>0>(eA=C+(fA-i|0)|0)>>>0?A+1|0:A,g=DA(JA,RA,666643,0),A=w+A|0,A=g>>>0>(C=g+eA|0)>>>0?A+1|0:A,FA=(g=C)+(C=DA(PA,YA,470296,0))|0,g=w+A|0,cA=g=C>>>0>FA>>>0?g+1|0:g,zA=g=g-((FA>>>0<4293918720)-1|0)|0,C=(A=g>>21)+pA|0,HA=g=(C=(g=(2097151&g)<<11|(fA=FA- -1048576|0)>>>21)>>>0>(eA=g+NA|0)>>>0?C+1|0:C)-((eA>>>0<4293918720)-1|0)|0,pA=(2097151&g)<<11|(i=eA- -1048576|0)>>>21,g=(g>>21)+vA|0,RA=JA=pA+TA|0,pA=pA>>>0>JA>>>0?g+1|0:g,A=DA(dA,MA,-997805,-1),g=w+C|0,g=A>>>0>(eA=A+eA|0)>>>0?g+1|0:g,vA=eA-(A=-2097152&i)|0,NA=g-((A>>>0>eA>>>0)+HA|0)|0,g=DA(dA,MA,654183,0),A=w+cA|0,A=g>>>0>(C=g+FA|0)>>>0?A+1|0:A,JA=C-(g=-2097152&fA)|0,HA=A-((g>>>0>C>>>0)+zA|0)|0,A=DA(bA,_A,470296,0),C=w+(sA-(((g=-2097152&tA)>>>0>lA>>>0)+jA|0)|0)|0,C=A>>>0>(i=A+(lA-g|0)|0)>>>0?C+1|0:C,g=DA(PA,YA,666643,0),A=w+C|0,eA=i=g+i|0,C=g>>>0>i>>>0?A+1|0:A,g=DA(bA,_A,666643,0),A=w+(yA-((4095&xA)+((i=-2097152&wA)>>>0>hA>>>0)|0)|0)|0,FA=A=g>>>0>(tA=g+(hA-i|0)|0)>>>0?A+1|0:A,yA=A=A-((tA>>>0<4293918720)-1|0)|0,i=(2097151&A)<<11|(cA=tA- -1048576|0)>>>21,A=(A>>21)+C|0,C=A=i>>>0>(fA=i+eA|0)>>>0?A+1|0:A,wA=A=A-((fA>>>0<4293918720)-1|0)|0,i=(2097151&A)<<11|(eA=fA- -1048576|0)>>>21,A=(A>>21)+HA|0,i=i>>>0>(sA=i+JA|0)>>>0?A+1|0:A,A=DA(dA,MA,470296,0),C=w+C|0,C=A>>>0>(g=A+fA|0)>>>0?C+1|0:C,fA=g-(A=-2097152&eA)|0,eA=C-((A>>>0>g>>>0)+wA|0)|0,g=DA(dA,MA,666643,0),A=w+(FA-(((C=-2097152&cA)>>>0>tA>>>0)+yA|0)|0)|0,g=(C=(A=g>>>0>(lA=g+(tA-C|0)|0)>>>0?A+1|0:A)>>21)+eA|0,A=(A=(g=(A=(2097151&A)<<11|lA>>>21)>>>0>(HA=A+fA|0)>>>0?g+1|0:g)>>21)+i|0,g=(g=(A=(g=(2097151&g)<<11|HA>>>21)>>>0>(yA=g+sA|0)>>>0?A+1|0:A)>>21)+NA|0,C=(A=(g=(A=(2097151&A)<<11|yA>>>21)>>>0>(i=A+vA|0)>>>0?g+1|0:g)>>21)+pA|0,A=(g=(C=(g=(2097151&g)<<11|i>>>21)>>>0>(wA=g+RA|0)>>>0?C+1|0:C)>>21)+qA|0,g=(C=(A=(C=(2097151&C)<<11|wA>>>21)>>>0>(sA=C+VA|0)>>>0?A+1|0:A)>>21)+GA|0,A=(A=(g=(A=(2097151&A)<<11|sA>>>21)>>>0>(tA=A+KA|0)>>>0?g+1|0:g)>>21)+WA|0,g=(g=(A=(g=(2097151&g)<<11|tA>>>21)>>>0>(pA=g+mA|0)>>>0?A+1|0:A)>>21)+UA|0,C=(A=(g=(A=(2097151&A)<<11|pA>>>21)>>>0>(FA=A+OA|0)>>>0?g+1|0:g)>>21)+II|0,A=(g=(C=(g=(2097151&g)<<11|FA>>>21)>>>0>(cA=g+iI|0)>>>0?C+1|0:C)>>21)+QI|0,eA=(SA=B-(g=-2097152&SA)|0)+((2097151&(A=(C=(2097151&C)<<11|cA>>>21)>>>0>(fA=C+BI|0)>>>0?A+1|0:A))<<11|fA>>>21)|0,A=(kA-((g>>>0>B>>>0)+LA|0)|0)+(A>>21)|0,SA=g=(A=eA>>>0<SA>>>0?A+1|0:A)>>21,lA=(A=DA(GA=(2097151&A)<<11|eA>>>21,g,666643,0))+(g=2097151&lA)|0,A=w,B=A=g>>>0>lA>>>0?A+1|0:A,E[0|Q]=lA,E[Q+1|0]=(255&A)<<24|lA>>>8,A=2097151&HA,g=DA(GA,SA,470296,0)+A|0,C=w,A=(B>>21)+(A>>>0>g>>>0?C+1|0:C)|0,A=(kA=(2097151&B)<<11|lA>>>21)>>>0>(HA=kA+g|0)>>>0?A+1|0:A,E[Q+4|0]=(2047&A)<<21|HA>>>11,g=A,C=HA,E[Q+3|0]=(7&A)<<29|C>>>3,E[Q+2|0]=31&((65535&B)<<16|lA>>>16)|C<<5,B=2097151&yA,yA=DA(GA,SA,654183,0)+B|0,A=w,HA=(2097151&g)<<11|C>>>21,g=(g>>21)+(B=B>>>0>yA>>>0?A+1|0:A)|0,A=g=(yA=HA+yA|0)>>>0<HA>>>0?g+1|0:g,E[Q+6|0]=(63&A)<<26|yA>>>6,B=yA,yA=0,E[Q+5|0]=yA<<13|(1572864&C)>>>19|B<<2,C=2097151&i,i=DA(GA,SA,-997805,-1)+C|0,g=w,g=C>>>0>i>>>0?g+1|0:g,yA=(2097151&(C=A))<<11|B>>>21,C=(A>>=21)+g|0,C=(i=yA+i|0)>>>0<yA>>>0?C+1|0:C,E[Q+9|0]=(511&C)<<23|i>>>9,E[Q+8|0]=(1&C)<<31|i>>>1,g=0,E[Q+7|0]=g<<18|(2080768&B)>>>14|i<<7,g=2097151&wA,B=DA(GA,SA,136657,0)+g|0,A=w,A=g>>>0>B>>>0?A+1|0:A,wA=(2097151&(g=C))<<11|i>>>21,g=A+(C=g>>21)|0,g=(B=wA+B|0)>>>0<wA>>>0?g+1|0:g,E[Q+12|0]=(4095&g)<<20|B>>>12,C=B,E[Q+11|0]=(15&g)<<28|C>>>4,B=0,E[Q+10|0]=B<<15|(1966080&i)>>>17|C<<4,B=2097151&sA,i=DA(GA,SA,-683901,-1)+B|0,A=w,A=B>>>0>i>>>0?A+1|0:A,B=g,g=A+(g>>=21)|0,g=(B=(sA=i)+(i=(2097151&B)<<11|C>>>21)|0)>>>0<i>>>0?g+1|0:g,E[Q+14|0]=(127&g)<<25|B>>>7,i=0,E[Q+13|0]=i<<12|(1048576&C)>>>20|B<<1,A=g>>21,C=(g=(2097151&g)<<11|B>>>21)>>>0>(i=g+(2097151&tA)|0)>>>0?A+1|0:A,E[Q+17|0]=(1023&C)<<22|i>>>10,E[Q+16|0]=(3&C)<<30|i>>>2,g=0,E[Q+15|0]=g<<17|(2064384&B)>>>15|i<<6,A=C>>21,A=(g=(2097151&C)<<11|i>>>21)>>>0>(C=g+(2097151&pA)|0)>>>0?A+1|0:A,E[Q+20|0]=(8191&A)<<19|C>>>13,E[Q+19|0]=(31&A)<<27|C>>>5,B=(g=2097151&FA)+(FA=(2097151&A)<<11|C>>>21)|0,g=A>>21,g=B>>>0<FA>>>0?g+1|0:g,FA=B,E[Q+21|0]=B,pA=0,E[Q+18|0]=pA<<14|(1835008&i)>>>18|C<<3,E[Q+22|0]=(255&g)<<24|B>>>8,C=g>>21,C=(B=(i=(2097151&g)<<11|B>>>21)+(2097151&cA)|0)>>>0<i>>>0?C+1|0:C,E[Q+25|0]=(2047&C)<<21|B>>>11,E[Q+24|0]=(7&C)<<29|B>>>3,E[Q+23|0]=31&((65535&g)<<16|FA>>>16)|B<<5,A=C>>21,A=(g=(2097151&C)<<11|B>>>21)>>>0>(C=g+(2097151&fA)|0)>>>0?A+1|0:A,E[Q+27|0]=(63&A)<<26|C>>>6,i=0,E[Q+26|0]=i<<13|(1572864&B)>>>19|C<<2,g=A>>21,g=(A=(B=(2097151&A)<<11|C>>>21)+(2097151&eA)|0)>>>0<B>>>0?g+1|0:g,E[Q+31|0]=(131071&g)<<15|A>>>17,E[Q+30|0]=(511&g)<<23|A>>>9,E[Q+29|0]=(1&g)<<31|A>>>1,B=0,E[Q+28|0]=B<<18|(2080768&C)>>>14|A<<7,$A(r,64),$A(n,64),I&&(o[I>>2]=64,o[I+4>>2]=0),D=f+560|0,0}function p(A,I,g,C){for(var B=0,Q=0,i=0,E=0,n=0,r=0,f=0,t=0,e=0,c=0,y=0,D=0,h=0,s=0,p=0,u=0,k=0,F=0,l=0,S=0,H=0,M=0,G=0,U=0,J=0,N=0,Y=0,b=0,_=0,K=0,P=0,v=0,m=0,d=0,L=0,R=0,x=0;i=(B=f<<3)+g|0,Q=a[0|(B=I+B|0)]|a[B+1|0]<<8|a[B+2|0]<<16|a[B+3|0]<<24,H=a[B+4|0]|a[B+5|0]<<8|a[B+6|0]<<16|a[B+7|0]<<24,n=Q<<24|(65280&Q)<<8,e=(r=16711680&Q)<<24,r=r>>>8|0,B=(t=-16777216&Q)>>>24|0,o[i>>2]=e|t<<8|-16777216&((255&H)<<24|Q>>>8)|16711680&((16777215&H)<<8|Q>>>24)|H>>>8&65280|H>>>24,Q=B|r|n,B=0,o[i+4>>2]=Q|B|B,16!=(0|(f=f+1|0)););for(I=o[A+4>>2],o[C>>2]=o[A>>2],o[C+4>>2]=I,I=o[A+60>>2],o[C+56>>2]=o[A+56>>2],o[C+60>>2]=I,I=o[A+52>>2],o[C+48>>2]=o[A+48>>2],o[C+52>>2]=I,I=o[A+44>>2],o[C+40>>2]=o[A+40>>2],o[C+44>>2]=I,I=o[A+36>>2],o[C+32>>2]=o[A+32>>2],o[C+36>>2]=I,I=o[A+28>>2],o[C+24>>2]=o[A+24>>2],o[C+28>>2]=I,I=o[A+20>>2],o[C+16>>2]=o[A+16>>2],o[C+20>>2]=I,I=o[A+12>>2],o[C+8>>2]=o[A+8>>2],o[C+12>>2]=I;t=o[C+56>>2],n=o[C+60>>2],B=o[(I=H=(M=x<<3)+g|0)>>2],I=o[I+4>>2],k=Q=o[C+36>>2],Q=nA(f=o[C+32>>2],Q,50),i=w,Q=nA(f,k,46)^Q,i^=w,Q=nA(f,k,23)^Q,I=(w^i)+I|0,I=(B=Q+B|0)>>>0<Q>>>0?I+1|0:I,B=(i=o[(Q=M+34e3|0)>>2])+B|0,I=o[Q+4>>2]+I|0,I=B>>>0<i>>>0?I+1|0:I,Q=(e=((i=o[C+48>>2])^(r=o[C+40>>2]))&f^i)+B|0,B=(((u=o[C+52>>2])^(c=o[C+44>>2]))&k^u)+I|0,I=(Q>>>0<e>>>0?B+1|0:B)+n|0,I=(B=Q)>>>0>(Q=Q+t|0)>>>0?I+1|0:I,t=(n=o[C+24>>2])+Q|0,B=o[C+28>>2]+I|0,y=B=n>>>0>t>>>0?B+1|0:B,o[C+24>>2]=t,o[C+28>>2]=B,l=B=o[C+4>>2],B=nA(h=o[C>>2],B,36),n=w,B=nA(h,l,30)^B,e=w^n,n=Q+(nA(h,l,25)^B)|0,B=I+(w^e)|0,B=Q>>>0>n>>>0?B+1|0:B,e=(I=n)+(n=h&((Q=o[C+16>>2])|(s=o[C+8>>2]))|Q&s)|0,I=(I=B)+(l&((B=o[C+20>>2])|(F=o[C+12>>2]))|B&F)|0,n=I=n>>>0>e>>>0?I+1|0:I,o[C+56>>2]=e,o[C+60>>2]=I,E=Q,D=B,S=o[(I=P=(p=8|M)+g|0)>>2],K=o[I+4>>2],B=((c^k)&y^c)+u|0,B=(I=(Q=(r^f)&t^r)+i|0)>>>0<Q>>>0?B+1|0:B,Q=nA(t,y,50),i=w,Q=nA(t,y,46)^Q,i^=w,Q=(u=nA(t,y,23)^Q)+I|0,I=(w^i)+B|0,I=(Q>>>0<u>>>0?I+1|0:I)+K|0,I=(B=Q+S|0)>>>0<Q>>>0?I+1|0:I,Q=(Q=B)+(i=o[(B=p+34e3|0)>>2])|0,B=o[B+4>>2]+I|0,B=(I=Q>>>0<i>>>0?B+1|0:B)+D|0,p=B=(E=Q+E|0)>>>0<Q>>>0?B+1|0:B,o[C+16>>2]=E,o[C+20>>2]=B,I=I+((F|l)&n|F&l)|0,I=(B=Q+((h|s)&e|h&s)|0)>>>0<Q>>>0?I+1|0:I,Q=nA(e,n,36),i=w,Q=nA(e,n,30)^Q,D=w^i,i=B,B=nA(e,n,25)^Q,I=(w^D)+I|0,D=I=B>>>0>(i=i+B|0)>>>0?I+1|0:I,o[C+48>>2]=i,o[C+52>>2]=I,I=(I=r)+(r=o[(B=K=(Q=16|M)+g|0)>>2])|0,B=o[B+4>>2]+c|0,B=I>>>0<r>>>0?B+1|0:B,Q=(c=I)+(r=o[(I=Q+34e3|0)>>2])|0,I=o[I+4>>2]+B|0,I=((y^k)&p^k)+(I=Q>>>0<r>>>0?I+1|0:I)|0,I=(B=(B=Q)+(Q=(t^f)&E^f)|0)>>>0<Q>>>0?I+1|0:I,Q=nA(E,p,50),r=w,Q=nA(E,p,46)^Q,r^=w,Q=(c=nA(E,p,23)^Q)+B|0,B=(w^r)+I|0,u=B=Q>>>0<c>>>0?B+1|0:B,I=B,B=nA(i,D,36),r=w,B=nA(i,D,30)^B,c=w^r,S=nA(i,D,25)^B,B=((n|l)&D|n&l)+(w^c)|0,I=((r=S+((e|h)&i|e&h)|0)>>>0<S>>>0?B+1|0:B)+I|0,c=I=(B=r)>>>0>(r=Q+r|0)>>>0?I+1|0:I,o[C+40>>2]=r,o[C+44>>2]=I,B=u+F|0,F=B=(s=Q+s|0)>>>0<Q>>>0?B+1|0:B,o[C+8>>2]=s,o[C+12>>2]=B,B=(B=f)+(f=o[(I=N=(Q=24|M)+g|0)>>2])|0,I=o[I+4>>2]+k|0,I=B>>>0<f>>>0?I+1|0:I,Q=(k=B)+(f=o[(B=Q+34e3|0)>>2])|0,B=o[B+4>>2]+I|0,B=(y^(y^p)&F)+(B=Q>>>0<f>>>0?B+1|0:B)|0,B=(I=(I=Q)+(Q=t^(t^E)&s)|0)>>>0<Q>>>0?B+1|0:B,Q=nA(s,F,50),f=w,Q=nA(s,F,46)^Q,f^=w,Q=(u=nA(s,F,23)^Q)+I|0,I=(w^f)+B|0,I=Q>>>0<u>>>0?I+1|0:I,B=nA(r,c,36),f=w,B=nA(r,c,30)^B,u=w^f,k=nA(r,c,25)^B,B=((n|D)&c|n&D)+(w^u)|0,B=((f=k+((i|e)&r|i&e)|0)>>>0<k>>>0?B+1|0:B)+I|0,u=B=(k=f)>>>0>(f=Q+f|0)>>>0?B+1|0:B,o[C+32>>2]=f,o[C+36>>2]=B,I=I+l|0,l=I=(h=Q+h|0)>>>0<Q>>>0?I+1|0:I,o[C>>2]=h,o[C+4>>2]=I,Q=o[(B=v=(I=32|M)+g|0)>>2],B=y+o[B+4>>2]|0,B=(Q=Q+t|0)>>>0<t>>>0?B+1|0:B,Q=(t=o[(I=I+34e3|0)>>2])+Q|0,I=o[I+4>>2]+B|0,I=(p^(p^F)&l)+(I=Q>>>0<t>>>0?I+1|0:I)|0,I=(B=(B=Q)+(Q=E^(E^s)&h)|0)>>>0<Q>>>0?I+1|0:I,Q=nA(h,l,50),t=w,Q=nA(h,l,46)^Q,t^=w,Q=(y=nA(h,l,23)^Q)+B|0,B=(w^t)+I|0,k=B=Q>>>0<y>>>0?B+1|0:B,I=B,B=nA(f,u,36),t=w,B=nA(f,u,30)^B,y=w^t,S=nA(f,u,25)^B,B=((c|D)&u|c&D)+(w^y)|0,I=((t=S+((i|r)&f|i&r)|0)>>>0<S>>>0?B+1|0:B)+I|0,t=I=(y=Q+t|0)>>>0<t>>>0?I+1|0:I,o[C+24>>2]=y,o[C+28>>2]=I,B=n+k|0,k=B=(n=Q+e|0)>>>0<Q>>>0?B+1|0:B,o[C+56>>2]=n,o[C+60>>2]=B,Q=o[(I=b=(B=40|M)+g|0)>>2],I=p+o[I+4>>2]|0,I=(Q=Q+E|0)>>>0<E>>>0?I+1|0:I,Q=(e=o[(B=B+34e3|0)>>2])+Q|0,B=o[B+4>>2]+I|0,B=(F^(F^l)&k)+(B=Q>>>0<e>>>0?B+1|0:B)|0,B=(I=(I=Q)+(Q=s^(h^s)&n)|0)>>>0<Q>>>0?B+1|0:B,Q=nA(n,k,50),e=w,Q=nA(n,k,46)^Q,e^=w,Q=(E=nA(n,k,23)^Q)+I|0,I=(w^e)+B|0,I=Q>>>0<E>>>0?I+1|0:I,B=nA(y,t,36),e=w,B=nA(y,t,30)^B,E=w^e,p=nA(y,t,25)^B,B=((c|u)&t|c&u)+(w^E)|0,B=((e=p+((r|f)&y|r&f)|0)>>>0<p>>>0?B+1|0:B)+I|0,e=B=(E=Q+e|0)>>>0<e>>>0?B+1|0:B,o[C+16>>2]=E,o[C+20>>2]=B,I=I+D|0,p=I=(D=Q+i|0)>>>0<i>>>0?I+1|0:I,o[C+48>>2]=D,o[C+52>>2]=I,Q=o[(B=_=(I=48|M)+g|0)>>2],B=F+o[B+4>>2]|0,B=(Q=Q+s|0)>>>0<s>>>0?B+1|0:B,Q=(i=o[(I=I+34e3|0)>>2])+Q|0,I=o[I+4>>2]+B|0,I=(l^(k^l)&p)+(I=Q>>>0<i>>>0?I+1|0:I)|0,I=(B=(B=Q)+(Q=h^(n^h)&D)|0)>>>0<Q>>>0?I+1|0:I,Q=nA(D,p,50),i=w,Q=nA(D,p,46)^Q,i^=w,Q=(s=nA(D,p,23)^Q)+B|0,B=(w^i)+I|0,F=B=Q>>>0<s>>>0?B+1|0:B,I=B,B=nA(E,e,36),i=w,B=nA(E,e,30)^B,s=w^i,S=nA(E,e,25)^B,B=((t|u)&e|t&u)+(w^s)|0,I=((i=S+((f|y)&E|f&y)|0)>>>0<S>>>0?B+1|0:B)+I|0,s=I=(B=i)>>>0>(i=Q+i|0)>>>0?I+1|0:I,o[C+8>>2]=i,o[C+12>>2]=I,B=c+F|0,F=B=(S=Q+r|0)>>>0<r>>>0?B+1|0:B,o[C+40>>2]=S,o[C+44>>2]=B,Q=o[(I=Y=(B=56|M)+g|0)>>2],I=l+o[I+4>>2]|0,I=(Q=Q+h|0)>>>0<h>>>0?I+1|0:I,Q=(r=o[(B=B+34e3|0)>>2])+Q|0,B=o[B+4>>2]+I|0,B=(k^(p^k)&F)+(B=Q>>>0<r>>>0?B+1|0:B)|0,B=(I=(I=Q)+(Q=n^(n^D)&S)|0)>>>0<Q>>>0?B+1|0:B,Q=nA(S,F,50),r=w,Q=nA(S,F,46)^Q,r^=w,Q=(c=nA(S,F,23)^Q)+I|0,I=(w^r)+B|0,I=Q>>>0<c>>>0?I+1|0:I,B=nA(i,s,36),r=w,B=nA(i,s,30)^B,c=w^r,h=nA(i,s,25)^B,B=((t|e)&s|t&e)+(w^c)|0,B=((r=h+((E|y)&i|E&y)|0)>>>0<h>>>0?B+1|0:B)+I|0,c=B=(c=r)>>>0>(r=Q+r|0)>>>0?B+1|0:B,o[C>>2]=r,o[C+4>>2]=B,I=I+u|0,l=I=(B=f)>>>0>(f=Q+f|0)>>>0?I+1|0:I,o[C+32>>2]=f,o[C+36>>2]=I,Q=o[(B=m=(I=64|M)+g|0)>>2],B=k+o[B+4>>2]|0,B=(Q=Q+n|0)>>>0<n>>>0?B+1|0:B,Q=(n=o[(I=I+34e3|0)>>2])+Q|0,I=o[I+4>>2]+B|0,I=(p^(p^F)&l)+(I=Q>>>0<n>>>0?I+1|0:I)|0,I=(B=(B=Q)+(Q=D^(D^S)&f)|0)>>>0<Q>>>0?I+1|0:I,Q=nA(f,l,50),n=w,Q=nA(f,l,46)^Q,n^=w,Q=(u=nA(f,l,23)^Q)+B|0,B=(w^n)+I|0,h=B=Q>>>0<u>>>0?B+1|0:B,I=B,B=nA(r,c,36),n=w,B=nA(r,c,30)^B,u=w^n,k=nA(r,c,25)^B,B=((e|s)&c|e&s)+(w^u)|0,I=((n=k+((i|E)&r|i&E)|0)>>>0<k>>>0?B+1|0:B)+I|0,n=I=(u=Q+n|0)>>>0<n>>>0?I+1|0:I,o[C+56>>2]=u,o[C+60>>2]=I,B=t+h|0,k=B=(t=Q+y|0)>>>0<Q>>>0?B+1|0:B,o[C+24>>2]=t,o[C+28>>2]=B,Q=o[(I=G=(B=72|M)+g|0)>>2],I=p+o[I+4>>2]|0,I=(Q=Q+D|0)>>>0<D>>>0?I+1|0:I,Q=(D=o[(B=B+34e3|0)>>2])+Q|0,B=o[B+4>>2]+I|0,B=(F^(F^l)&k)+(B=Q>>>0<D>>>0?B+1|0:B)|0,B=(I=(I=Q)+(Q=S^(f^S)&t)|0)>>>0<Q>>>0?B+1|0:B,Q=nA(t,k,50),D=w,Q=nA(t,k,46)^Q,D^=w,Q=(h=nA(t,k,23)^Q)+I|0,I=(w^D)+B|0,I=Q>>>0<h>>>0?I+1|0:I,B=nA(u,n,36),D=w,B=nA(u,n,30)^B,h=w^D,y=nA(u,n,25)^B,B=((c|s)&n|c&s)+(w^h)|0,B=((D=y+((i|r)&u|i&r)|0)>>>0<y>>>0?B+1|0:B)+I|0,D=B=(h=Q+D|0)>>>0<D>>>0?B+1|0:B,o[C+48>>2]=h,o[C+52>>2]=B,I=I+e|0,p=I=(e=Q+E|0)>>>0<Q>>>0?I+1|0:I,o[C+16>>2]=e,o[C+20>>2]=I,I=(E=o[(B=J=(Q=80|M)+g|0)>>2])+S|0,B=o[B+4>>2]+F|0,B=I>>>0<E>>>0?B+1|0:B,Q=(y=I)+(E=o[(I=Q+34e3|0)>>2])|0,I=o[I+4>>2]+B|0,I=(l^(k^l)&p)+(I=Q>>>0<E>>>0?I+1|0:I)|0,I=(B=(B=Q)+(Q=f^(t^f)&e)|0)>>>0<Q>>>0?I+1|0:I,Q=nA(e,p,50),E=w,Q=nA(e,p,46)^Q,E^=w,Q=(y=nA(e,p,23)^Q)+B|0,B=(w^E)+I|0,F=B=Q>>>0<y>>>0?B+1|0:B,I=B,B=nA(h,D,36),E=w,B=nA(h,D,30)^B,y=w^E,S=nA(h,D,25)^B,B=((n|c)&D|n&c)+(w^y)|0,I=((E=S+((r|u)&h|r&u)|0)>>>0<S>>>0?B+1|0:B)+I|0,E=I=(y=Q+E|0)>>>0<E>>>0?I+1|0:I,o[C+40>>2]=y,o[C+44>>2]=I,B=s+F|0,F=B=(s=Q+i|0)>>>0<i>>>0?B+1|0:B,o[C+8>>2]=s,o[C+12>>2]=B,B=34e3+(I=88|M)|0,i=o[(I=U=I+g|0)>>2],Q=o[B>>2]+i|0,I=o[B+4>>2]+o[I+4>>2]|0,B=l+(Q>>>0<i>>>0?I+1|0:I)|0,B=(k^(p^k)&F)+(B=(I=Q+f|0)>>>0<f>>>0?B+1|0:B)|0,B=(I=(Q=t^(t^e)&s)+I|0)>>>0<Q>>>0?B+1|0:B,Q=nA(s,F,50),i=w,Q=nA(s,F,46)^Q,i^=w,Q=(f=nA(s,F,23)^Q)+I|0,I=(w^i)+B|0,I=Q>>>0<f>>>0?I+1|0:I,B=nA(y,E,36),i=w,B=nA(y,E,30)^B,f=w^i,l=nA(y,E,25)^B,B=((n|D)&E|n&D)+(w^f)|0,B=((i=l+((h|u)&y|h&u)|0)>>>0<l>>>0?B+1|0:B)+I|0,f=B=(f=i)>>>0>(i=Q+i|0)>>>0?B+1|0:B,o[C+32>>2]=i,o[C+36>>2]=B,I=I+c|0,c=I=(B=r)>>>0>(r=Q+r|0)>>>0?I+1|0:I,o[C>>2]=r,o[C+4>>2]=I,B=34e3+(I=96|M)|0,l=o[(I=d=I+g|0)>>2],Q=o[B>>2]+l|0,B=o[B+4>>2]+o[I+4>>2]|0,I=k+(Q>>>0<l>>>0?B+1|0:B)|0,I=(B=Q+t|0)>>>0<t>>>0?I+1|0:I,Q=(t=e^(e^s)&r)+B|0,B=(p^(p^F)&c)+I|0,B=Q>>>0<t>>>0?B+1|0:B,I=nA(r,c,50),t=w,I=nA(r,c,46)^I,t^=w,k=Q,Q=nA(r,c,23)^I,B=(w^t)+B|0,k=B=(I=k+Q|0)>>>0<Q>>>0?B+1|0:B,Q=I,I=nA(i,f,36),t=w,I=nA(i,f,30)^I,l=w^t,S=nA(i,f,25)^I,I=((E|D)&f|E&D)+(w^l)|0,B=((t=S+((h|y)&i|h&y)|0)>>>0<S>>>0?I+1|0:I)+B|0,t=B=(l=Q+t|0)>>>0<t>>>0?B+1|0:B,o[C+24>>2]=l,o[C+28>>2]=B,B=n+k|0,n=B=(u=Q+u|0)>>>0<Q>>>0?B+1|0:B,o[C+56>>2]=u,o[C+60>>2]=B,B=34e3+(I=104|M)|0,k=o[(I=R=I+g|0)>>2],Q=o[B>>2]+k|0,I=o[B+4>>2]+o[I+4>>2]|0,B=p+(Q>>>0<k>>>0?I+1|0:I)|0,B=(I=Q+e|0)>>>0<e>>>0?B+1|0:B,Q=(e=s^(r^s)&u)+I|0,I=(F^(c^F)&n)+B|0,I=Q>>>0<e>>>0?I+1|0:I,B=nA(u,n,50),e=w,B=nA(u,n,46)^B,e^=w,p=nA(u,n,23)^B,B=(w^e)+I|0,k=B=(Q=p+Q|0)>>>0<p>>>0?B+1|0:B,I=B,B=nA(l,t,36),e=w,B=nA(l,t,30)^B,p=w^e,S=nA(l,t,25)^B,B=((E|f)&t|E&f)+(w^p)|0,I=((e=S+((i|y)&l|i&y)|0)>>>0<S>>>0?B+1|0:B)+I|0,e=I=(p=Q+e|0)>>>0<e>>>0?I+1|0:I,o[C+16>>2]=p,o[C+20>>2]=I,I=D+k|0,D=I=(h=Q+h|0)>>>0<Q>>>0?I+1|0:I,o[C+48>>2]=h,o[C+52>>2]=I,B=34e3+(I=112|M)|0,k=o[(Q=S=I+g|0)>>2],I=o[B>>2]+k|0,B=o[B+4>>2]+o[Q+4>>2]|0,B=F+(I>>>0<k>>>0?B+1|0:B)|0,B=(c^(n^c)&D)+(B=(I=I+s|0)>>>0<s>>>0?B+1|0:B)|0,B=(I=(Q=r^(r^u)&h)+I|0)>>>0<Q>>>0?B+1|0:B,Q=nA(h,D,50),s=w,Q=nA(h,D,46)^Q,s^=w,Q=(F=nA(h,D,23)^Q)+I|0,I=(w^s)+B|0,k=I=Q>>>0<F>>>0?I+1|0:I,B=I,I=nA(p,e,36),s=w,I=nA(p,e,30)^I,F=w^s,L=nA(p,e,25)^I,I=((t|f)&e|t&f)+(w^F)|0,B=((s=L+((i|l)&p|i&l)|0)>>>0<L>>>0?I+1|0:I)+B|0,s=B=(F=Q+s|0)>>>0<s>>>0?B+1|0:B,o[C+8>>2]=F,o[C+12>>2]=B,B=E+k|0,Q=B=(E=Q+y|0)>>>0<Q>>>0?B+1|0:B,o[C+40>>2]=E,o[C+44>>2]=B,B=34e3+(I=120|M)|0,M=o[(I=y=I+g|0)>>2],k=o[B>>2]+M|0,B=o[B+4>>2]+o[I+4>>2]|0,I=c+(k>>>0<M>>>0?B+1|0:B)|0,I=(n^(n^D)&Q)+(I=(B=r+k|0)>>>0<r>>>0?I+1|0:I)|0,I=(B=(r=u^(h^u)&E)+B|0)>>>0<r>>>0?I+1|0:I,r=nA(E,Q,50),n=w,r=nA(E,Q,46)^r,n^=w,Q=(r=nA(E,Q,23)^r)+B|0,B=(w^n)+I|0,B=Q>>>0<r>>>0?B+1|0:B,r=Q,n=B,I=B,B=nA(F,s,36),E=w,B=nA(F,s,30)^B,D=w^E,c=nA(F,s,25)^B,B=((t|e)&s|t&e)+(w^D)|0,I=((E=c+((p|l)&F|p&l)|0)>>>0<c>>>0?B+1|0:B)+I|0,I=(Q=Q+E|0)>>>0<E>>>0?I+1|0:I,o[C>>2]=Q,o[C+4>>2]=I,B=n+f|0,B=(f=i)>>>0>(i=i+r|0)>>>0?B+1|0:B,o[C+32>>2]=i,o[C+36>>2]=B,64!=(0|x);)n=((x=x+16|0)<<3)+g|0,r=o[H>>2],f=o[H+4>>2],L=o[G>>2],t=I=o[G+4>>2],B=I,Q=I=o[S+4>>2],I=nA(F=o[S>>2],I,45),i=w,E=((63&Q)<<26|F>>>6)^(I=nA(F,Q,3)^I),I=(Q>>>6^(e=w^i))+B|0,B=((i=E+L|0)>>>0<E>>>0?I+1|0:I)+f|0,B=(I=i+r|0)>>>0<i>>>0?B+1|0:B,r=i=o[P+4>>2],i=nA(f=o[P>>2],i,63),e=w,i=((127&r)<<25|f>>>7)^nA(f,r,56)^i,B=(w^e^r>>>7)+B|0,i=B=i>>>0>(l=i+I|0)>>>0?B+1|0:B,o[n>>2]=l,o[n+4>>2]=B,f=(S=o[J>>2])+f|0,I=(n=o[J+4>>2])+r|0,B=f>>>0<S>>>0?I+1|0:I,r=I=o[y+4>>2],I=nA(k=o[y>>2],I,45),e=w,E=f,f=((63&r)<<26|k>>>6)^nA(k,r,3)^I,B=(w^e^r>>>6)+B|0,f=(E=E+f|0)>>>0<f>>>0?B+1|0:B,B=nA(e=o[K>>2],I=o[K+4>>2],63),D=w,y=E,E=((127&I)<<25|e>>>7)^nA(e,I,56)^B,B=(w^D^I>>>7)+f|0,f=B=E>>>0>(p=y+E|0)>>>0?B+1|0:B,o[H+136>>2]=p,o[H+140>>2]=B,B=(M=o[U>>2])+e|0,I=(e=o[U+4>>2])+I|0,E=nA(l,i,45),D=w,E=(c=((63&i)<<26|l>>>6)^nA(l,i,3)^E)+B|0,B=(w^D^i>>>6)+(B>>>0<M>>>0?I+1|0:I)|0,B=E>>>0<c>>>0?B+1|0:B,D=I=o[N+4>>2],I=nA(c=o[N>>2],I,63),s=w,y=E,E=((127&D)<<25|c>>>7)^nA(c,D,56)^I,B=(w^s^D>>>7)+B|0,E=B=E>>>0>(P=y+E|0)>>>0?B+1|0:B,o[H+144>>2]=P,o[H+148>>2]=B,c=(K=o[d>>2])+c|0,I=(I=D)+(D=o[d+4>>2])|0,B=c>>>0<K>>>0?I+1|0:I,I=nA(p,f,45),s=w,u=((63&f)<<26|p>>>6)^nA(p,f,3)^I,B=(w^s^f>>>6)+B|0,B=(c=u+c|0)>>>0<u>>>0?B+1|0:B,s=I=o[v+4>>2],I=nA(u=o[v>>2],I,63),h=w,y=c,c=((127&s)<<25|u>>>7)^nA(u,s,56)^I,B=(w^h^s>>>7)+B|0,c=B=c>>>0>(N=y+c|0)>>>0?B+1|0:B,o[H+152>>2]=N,o[H+156>>2]=B,I=(v=o[R>>2])+u|0,B=(B=s)+(s=o[R+4>>2])|0,u=nA(P,E,45),h=w,u=((63&E)<<26|P>>>6)^nA(P,E,3)^u,B=(w^h^E>>>6)+(I>>>0<v>>>0?B+1|0:B)|0,u=(y=u+I|0)>>>0<u>>>0?B+1|0:B,B=nA(h=o[b>>2],I=o[b+4>>2],63),b=w,U=y,y=((127&I)<<25|h>>>7)^(B=nA(h,I,56)^B),B=(I>>>7^(G=w^b))+u|0,u=B=y>>>0>(b=U+y|0)>>>0?B+1|0:B,o[H+160>>2]=b,o[H+164>>2]=B,I=I+Q|0,I=(B=h+F|0)>>>0<h>>>0?I+1|0:I,h=nA(N,c,45),y=w,h=(G=((63&c)<<26|N>>>6)^nA(N,c,3)^h)+B|0,B=(w^y^c>>>6)+I|0,B=h>>>0<G>>>0?B+1|0:B,G=I=o[_+4>>2],I=nA(y=o[_>>2],I,63),_=w,I=nA(y,G,56)^I,U=h,B=(G>>>7^(J=w^_))+B|0,h=B=(h=((127&G)<<25|y>>>7)^I)>>>0>(_=U+h|0)>>>0?B+1|0:B,o[H+168>>2]=_,o[H+172>>2]=B,I=r+G|0,I=(B=y+k|0)>>>0<y>>>0?I+1|0:I,U=y=o[Y+4>>2],y=nA(J=o[Y>>2],y,63),G=w,y=(Y=((127&U)<<25|J>>>7)^nA(J,U,56)^y)+B|0,B=(w^G^U>>>7)+I|0,I=y>>>0<Y>>>0?B+1|0:B,B=nA(b,u,45),G=w,B=nA(b,u,3)^B,Y=w^G,G=y,I=(u>>>6^Y)+I|0,y=I=(y=((63&u)<<26|b>>>6)^B)>>>0>(G=G+y|0)>>>0?I+1|0:I,o[H+176>>2]=G,o[H+180>>2]=I,d=o[m>>2],m=I=o[m+4>>2],Y=I,I=nA(L,t,63),B=w,R=((127&t)<<25|L>>>7)^nA(L,t,56)^I,I=(w^B^t>>>7)+f|0,B=((p=R+p|0)>>>0<R>>>0?I+1|0:I)+Y|0,B=(I=p+d|0)>>>0<p>>>0?B+1|0:B,f=nA(G,y,45),p=w,Y=(f=((63&y)<<26|G>>>6)^nA(G,y,3)^f)+I|0,I=(w^p^y>>>6)+B|0,f=I=f>>>0>Y>>>0?I+1|0:I,o[H+192>>2]=Y,o[H+196>>2]=I,B=i+U|0,B=(I=l+J|0)>>>0<J>>>0?B+1|0:B,p=nA(d,m,63),J=w,U=((127&m)<<25|d>>>7)^nA(d,m,56)^p,B=(w^J^m>>>7)+B|0,I=(p=U+I|0)>>>0<U>>>0?B+1|0:B,B=nA(_,h,45),J=w,B=nA(_,h,3)^B,m=p,I=(h>>>6^(U=w^J))+I|0,p=I=(p=((63&h)<<26|_>>>6)^B)>>>0>(J=m+p|0)>>>0?I+1|0:I,o[H+184>>2]=J,o[H+188>>2]=I,I=nA(M,e,63),B=w,I=((127&e)<<25|M>>>7)^nA(M,e,56)^I,B=(w^B^e>>>7)+n|0,I=c+(I>>>0>(U=I+S|0)>>>0?B+1|0:B)|0,I=(B=N+U|0)>>>0<N>>>0?I+1|0:I,c=nA(Y,f,45),N=w,c=nA(Y,f,3)^c,U=w^N,N=(c^=(63&f)<<26|Y>>>6)+B|0,B=(f>>>6^U)+I|0,c=B=c>>>0>N>>>0?B+1|0:B,o[H+208>>2]=N,o[H+212>>2]=B,I=nA(S,n,63),B=w,U=nA(S,n,56)^I,B=((I=n>>>7|0)^w^B)+t|0,I=E+((n=(S=U^((127&n)<<25|S>>>7))+L|0)>>>0<S>>>0?B+1|0:B)|0,I=(B=n+P|0)>>>0<P>>>0?I+1|0:I,t=nA(J,p,45),n=w,E=(t=((63&p)<<26|J>>>6)^nA(J,p,3)^t)+B|0,B=(w^n^p>>>6)+I|0,t=B=t>>>0>E>>>0?B+1|0:B,o[H+200>>2]=E,o[H+204>>2]=B,I=nA(v,s,63),B=w,S=((127&s)<<25|v>>>7)^nA(v,s,56)^I,I=(w^B^s>>>7)+D|0,B=h+((n=S+K|0)>>>0<S>>>0?I+1|0:I)|0,B=(I=n+_|0)>>>0<_>>>0?B+1|0:B,n=nA(N,c,45),h=w,U=I,I=c>>>6|0,n=((63&c)<<26|N>>>6)^nA(N,c,3)^n,B=(I^w^h)+B|0,n=B=n>>>0>(c=U+n|0)>>>0?B+1|0:B,o[H+224>>2]=c,o[H+228>>2]=B,I=nA(K,D,63),B=w,I=nA(K,D,56)^I,h=w^B,S=((127&D)<<25|K>>>7)^I,I=((B=D>>>7|0)^h)+e|0,B=u+((D=S+M|0)>>>0<S>>>0?I+1|0:I)|0,B=(I=D+b|0)>>>0<b>>>0?B+1|0:B,e=nA(E,t,45),D=w,h=I,I=t>>>6|0,t=((63&t)<<26|E>>>6)^nA(E,t,3)^e,I=(I^w^D)+B|0,t=I=t>>>0>(e=h+t|0)>>>0?I+1|0:I,o[H+216>>2]=e,o[H+220>>2]=I,I=nA(k,r,63),B=w,D=((127&r)<<25|k>>>7)^nA(k,r,56)^I,B=(w^B^r>>>7)+Q|0,B=p+((I=D+F|0)>>>0<D>>>0?B+1|0:B)|0,I=(E=I+J|0)>>>0<J>>>0?B+1|0:B,B=nA(c,n,45),D=w,p=E,E=nA(c,n,3)^B,B=n>>>6|0,n=p+(E^=(63&n)<<26|c>>>6)|0,I=(B^w^D)+I|0,o[H+240>>2]=n,o[H+244>>2]=n>>>0<E>>>0?I+1|0:I,I=nA(F,Q,63),B=w,I=nA(F,Q,56)^I,n=w^B,B=((B=Q>>>7|0)^n)+s|0,I=y+((I^=(127&Q)<<25|F>>>7)>>>0>(Q=I+v|0)>>>0?B+1|0:B)|0,I=(B=Q+G|0)>>>0<G>>>0?I+1|0:I,Q=nA(e,t,45),n=w,E=B,B=t>>>6|0,Q=((63&t)<<26|e>>>6)^nA(e,t,3)^Q,B=(B^w^n)+I|0,Q=B=Q>>>0>(t=E+Q|0)>>>0?B+1|0:B,o[H+232>>2]=t,o[H+236>>2]=B,I=nA(l,i,63),B=w,E=nA(l,i,56)^I,B=((I=i>>>7|0)^w^B)+r|0,I=f+((i=(n=E^((127&i)<<25|l>>>7))+k|0)>>>0<n>>>0?B+1|0:B)|0,I=(B=i+Y|0)>>>0<Y>>>0?I+1|0:I,i=nA(t,Q,45),r=w,f=B,B=Q>>>6|0,Q=f+(i=((63&Q)<<26|t>>>6)^nA(t,Q,3)^i)|0,B=(B^w^r)+I|0,o[H+248>>2]=Q,o[H+252>>2]=Q>>>0<i>>>0?B+1|0:B;I=I+o[A+4>>2]|0,I=(g=Q+o[A>>2]|0)>>>0<Q>>>0?I+1|0:I,o[A>>2]=g,o[A+4>>2]=I,B=o[A+12>>2]+o[C+12>>2]|0,I=(g=o[C+8>>2])+o[A+8>>2]|0,o[A+8>>2]=I,o[A+12>>2]=I>>>0<g>>>0?B+1|0:B,B=o[A+20>>2]+o[C+20>>2]|0,I=(g=o[C+16>>2])+o[A+16>>2]|0,o[A+16>>2]=I,o[A+20>>2]=I>>>0<g>>>0?B+1|0:B,I=o[A+28>>2]+o[C+28>>2]|0,g=(B=o[C+24>>2])+o[A+24>>2]|0,o[A+24>>2]=g,o[A+28>>2]=g>>>0<B>>>0?I+1|0:I,B=o[A+36>>2]+o[C+36>>2]|0,I=(g=o[C+32>>2])+o[A+32>>2]|0,o[A+32>>2]=I,o[A+36>>2]=I>>>0<g>>>0?B+1|0:B,I=o[A+44>>2]+o[C+44>>2]|0,g=(B=o[C+40>>2])+o[A+40>>2]|0,o[A+40>>2]=g,o[A+44>>2]=g>>>0<B>>>0?I+1|0:I,B=o[A+52>>2]+o[C+52>>2]|0,I=(g=o[C+48>>2])+o[A+48>>2]|0,o[A+48>>2]=I,o[A+52>>2]=I>>>0<g>>>0?B+1|0:B,B=o[A+60>>2]+o[C+60>>2]|0,I=(g=o[C+56>>2])+o[A+56>>2]|0,o[A+56>>2]=I,o[A+60>>2]=I>>>0<g>>>0?B+1|0:B;}function u(A){var I,g,C,B,Q,i,o,n,r,f,t=0,e=0,c=0,y=0,D=0,h=0,s=0,p=0,u=0,k=0,F=0,l=0,S=0,H=0,M=0,G=0,U=0,J=0,N=0,Y=0,b=0,_=0,K=0,P=0,v=0,m=0,d=0,L=0,R=0,x=0,j=0,X=0,q=0,z=0,V=0,O=0,T=0,W=0;y=(l=a[A+44|0]|a[A+45|0]<<8|a[A+46|0]<<16|a[A+47|0]<<24)>>>5&2097151,c=DA(_=(a[A+60|0]|a[A+61|0]<<8|a[A+62|0]<<16|a[A+63|0]<<24)>>>3|0,0,-683901,-1),e=(t=a[A+44|0])<<16&2031616|a[A+42|0]|a[A+43|0]<<8,t=w,p=t=e>>>0>(u=c+e|0)>>>0?t+1|0:t,G=t=t-((u>>>0<4293918720)-1|0)|0,c=t>>21,t=(e=y)+(y=(2097151&t)<<11|(h=u- -1048576|0)>>>21)|0,e=c,x=e=t>>>0<y>>>0?e+1|0:e,j=t,N=DA(t,e,-683901,-1),k=w,s=DA(I=(a[A+49|0]|a[A+50|0]<<8|a[A+51|0]<<16|a[A+52|0]<<24)>>>7&2097151,0,-997805,-1),c=(t=a[A+27|0])>>>24|0,y=t<<8|(S=a[A+23|0]|a[A+24|0]<<8|a[A+25|0]<<16|a[A+26|0]<<24)>>>24,e=(t=a[A+28|0])>>>16|0,e=2097151&((3&(e|=c))<<30|(t=y|t<<16)>>>2),t=w,t=e>>>0>(c=e+s|0)>>>0?t+1|0:t,e=DA(d=(H=a[A+52|0]|a[A+53|0]<<8|a[A+54|0]<<16|a[A+55|0]<<24)>>>4&2097151,0,654183,0),t=w+t|0,s=c=e+c|0,c=e>>>0>c>>>0?t+1|0:t,D=(e=a[A+48|0])<<8|l>>>24,e=t=e>>>24|0,t=DA(g=2097151&((3&(l=(t=(y=a[A+49|0])>>>16|0)|e))<<30|(e=(y<<=16)|D)>>>2),0,136657,0),c=w+c|0,c=t>>>0>(e=t+s|0)>>>0?c+1|0:c,y=(t=DA(C=(a[A+57|0]|a[A+58|0]<<8|a[A+59|0]<<16|a[A+60|0]<<24)>>>6&2097151,0,666643,0))+e|0,e=w+c|0,s=y,c=t>>>0>y>>>0?e+1|0:e,e=(t=a[A+56|0])>>>24|0,D=t<<8|H>>>24,e=DA(B=2097151&((1&(H=(t=(y=a[A+57|0])>>>16|0)|e))<<31|(e=(y<<=16)|D)>>>1),0,470296,0),t=w+c|0,e=(t=(c=y=e+s|0)>>>0<e>>>0?t+1|0:t)+k|0,e=c>>>0>(y=c+N|0)>>>0?e+1|0:e,U=c- -1048576|0,J=c=t-((c>>>0<4293918720)-1|0)|0,k=y-(t=-2097152&U)|0,N=e-((t>>>0>y>>>0)+c|0)|0,e=DA(I,0,654183,0),t=w,t=e>>>0>(c=e+(S>>>5&2097151)|0)>>>0?t+1|0:t,y=(e=c)+(c=DA(d,0,470296,0))|0,e=w+t|0,e=c>>>0>y>>>0?e+1|0:e,t=DA(g,q,-997805,-1),e=w+e|0,e=t>>>0>(c=t+y|0)>>>0?e+1|0:e,y=(t=c)+(c=DA(B,z,666643,0))|0,t=w+e|0,D=y,y=c>>>0>y>>>0?t+1|0:t,s=(c=DA(I,0,470296,0))+(t=(t=a[A+23|0])<<16&2031616|a[A+21|0]|a[A+22|0]<<8)|0,c=w,c=t>>>0>s>>>0?c+1|0:c,s=(e=DA(d,0,666643,0))+s|0,t=w+c|0,c=DA(g,q,654183,0),e=w+(e>>>0>s>>>0?t+1|0:t)|0,H=e=c>>>0>(S=c+s|0)>>>0?e+1|0:e,m=e=e-((S>>>0<4293918720)-1|0)|0,t=(t=e>>>21|0)+y|0,c=t=(e=(2097151&e)<<11|(s=S- -1048576|0)>>>21)>>>0>(D=e+D|0)>>>0?t+1|0:t,F=e=t-((D>>>0<4293918720)-1|0)|0,t=k,k=(2097151&e)<<11|(y=D- -1048576|0)>>>21,e=(e>>21)+N|0,l=k=(e=k>>>0>(M=t+k|0)>>>0?e+1|0:e)-((M>>>0<4293918720)-1|0)|0,L=M-(t=-2097152&(N=M- -1048576|0))|0,V=e-((t>>>0>M>>>0)+k|0)|0,t=DA(j,x,136657,0),c=w+c|0,c=t>>>0>(e=t+D|0)>>>0?c+1|0:c,b=e-(t=-2097152&y)|0,R=c-((t>>>0>e>>>0)+F|0)|0,M=u-(t=-2097152&h)|0,G=p-((t>>>0>u>>>0)+G|0)|0,p=DA(_,0,136657,0),e=(t=a[A+40|0])>>>24|0,y=t<<8|(h=a[A+36|0]|a[A+37|0]<<8|a[A+38|0]<<16|a[A+39|0]<<24)>>>24,c=(t=a[A+41|0])>>>16|0,e=(c|=e)>>>3|0,c=(7&c)<<29|(t=y|t<<16)>>>3,t=e+w|0,t=c>>>0>(y=c+p|0)>>>0?t+1|0:t,e=DA(C,0,-683901,-1),t=w+t|0,t=e>>>0>(c=e+y|0)>>>0?t+1|0:t,D=c,e=DA(_,0,-997805,-1),c=w,c=e>>>0>(y=e+(h>>>6&2097151)|0)>>>0?c+1|0:c,h=(e=y)+(y=DA(C,0,136657,0))|0,e=w+c|0,c=DA(B,z,-683901,-1),e=w+(y>>>0>h>>>0?e+1|0:e)|0,k=e=c>>>0>(K=c+h|0)>>>0?e+1|0:e,O=c=e-((K>>>0<4293918720)-1|0)|0,t=t+(e=c>>21)|0,h=t=(c=(2097151&c)<<11|(u=K- -1048576|0)>>>21)>>>0>(F=c+D|0)>>>0?t+1|0:t,P=t=t-((F>>>0<4293918720)-1|0)|0,e=(e=t>>21)+G|0,X=e=(t=(c=(2097151&t)<<11|(D=F- -1048576|0)>>>21)+M|0)>>>0<c>>>0?e+1|0:e,v=t,e=DA(t,e,-683901,-1),t=w+R|0,Y=c=e+b|0,y=e>>>0>c>>>0?t+1|0:t,R=S-(t=-2097152&s)|0,G=H-((4095&m)+(t>>>0>S>>>0)|0)|0,S=DA(I,0,666643,0),t=(e=a[A+19|0])>>>24|0,s=e<<8|(H=a[A+15|0]|a[A+16|0]<<8|a[A+17|0]<<16|a[A+18|0]<<24)>>>24,c=t,e=(7&(c|=e=(t=a[A+20|0])>>>16|0))<<29|(e=(t<<=16)|s)>>>3,c=w+(c>>>3|0)|0,c=e>>>0>(s=e+S|0)>>>0?c+1|0:c,t=DA(g,q,470296,0),e=w+c|0,t=t>>>0>(s=t+s|0)>>>0?e+1|0:e,c=DA(g,q,666643,0),e=w,S=e=c>>>0>(b=c+(H>>>6&2097151)|0)>>>0?e+1|0:e,T=c=e-((b>>>0<4293918720)-1|0)|0,t=t+(e=c>>>21|0)|0,H=t=(c=(2097151&c)<<11|(p=b- -1048576|0)>>>21)>>>0>(M=c+s|0)>>>0?t+1|0:t,W=t=t-((M>>>0<4293918720)-1|0)|0,e=(e=t>>>21|0)+G|0,e=(t=(2097151&t)<<11|(s=M- -1048576|0)>>>21)>>>0>(c=t+R|0)>>>0?e+1|0:e,G=(t=c)+(c=DA(j,x,-997805,-1))|0,t=w+e|0,t=c>>>0>G>>>0?t+1|0:t,m=e=F-(c=-2097152&D)|0,Q=D=h-((c>>>0>F>>>0)+P|0)|0,c=DA(v,X,136657,0),t=w+t|0,t=c>>>0>(h=c+G|0)>>>0?t+1|0:t,c=DA(e,D,-683901,-1),e=w+t|0,h=e=c>>>0>(G=c+h|0)>>>0?e+1|0:e,P=t=e-((G>>>0<4293918720)-1|0)|0,e=(2097151&t)<<11|(D=G- -1048576|0)>>>21,t=(t>>21)+y|0,Y=e=(t=e>>>0>(F=e+Y|0)>>>0?t+1|0:t)-((F>>>0<4293918720)-1|0)|0,R=(2097151&e)<<11|(y=F- -1048576|0)>>>21,e=(e>>21)+V|0,o=L=R+L|0,R=L>>>0<R>>>0?e+1|0:e,n=F-(e=-2097152&y)|0,r=t-((e>>>0>F>>>0)+Y|0)|0,L=G-(t=-2097152&D)|0,V=h-((t>>>0>G>>>0)+P|0)|0,c=(t=DA(j,x,654183,0))+(M-(e=-2097152&s)|0)|0,e=w+(H-((e>>>0>M>>>0)+W|0)|0)|0,e=t>>>0>c>>>0?e+1|0:e,t=DA(v,X,-997805,-1),e=w+e|0,e=t>>>0>(c=t+c|0)>>>0?e+1|0:e,y=(t=c)+(c=DA(m,Q,136657,0))|0,t=w+e|0,Y=y,h=c>>>0>y>>>0?t+1|0:t,M=K-(t=-2097152&u)|0,F=k-((t>>>0>K>>>0)+O|0)|0,H=DA(d,0,-683901,-1),t=(e=a[A+35|0])>>>24|0,y=e<<8|(s=a[A+31|0]|a[A+32|0]<<8|a[A+33|0]<<16|a[A+34|0]<<24)>>>24,c=t,e=(t=a[A+36|0])>>>16|0,e|=c,c=w,c=(t=2097151&((1&e)<<31|(t=t<<16|y)>>>1))>>>0>(e=t+H|0)>>>0?c+1|0:c,y=(t=DA(_,0,654183,0))+e|0,e=w+c|0,e=t>>>0>y>>>0?e+1|0:e,c=DA(C,0,-997805,-1),t=w+e|0,t=c>>>0>(y=c+y|0)>>>0?t+1|0:t,e=DA(B,z,136657,0),t=w+t|0,D=c=e+y|0,y=e>>>0>c>>>0?t+1|0:t,t=DA(I,0,-683901,-1),e=w,e=t>>>0>(c=t+(s>>>4&2097151)|0)>>>0?e+1|0:e,s=(t=DA(d,0,136657,0))+c|0,c=w+e|0,c=t>>>0>s>>>0?c+1|0:c,t=DA(_,0,470296,0),e=w+c|0,e=t>>>0>(s=t+s|0)>>>0?e+1|0:e,s=(c=DA(C,0,654183,0))+s|0,t=w+e|0,e=DA(B,z,-997805,-1),t=w+(c>>>0>s>>>0?t+1|0:t)|0,H=t=e>>>0>(k=e+s|0)>>>0?t+1|0:t,f=e=t-((k>>>0<4293918720)-1|0)|0,c=(t=e>>21)+y|0,G=e=(c=(e=(2097151&e)<<11|(s=k- -1048576|0)>>>21)>>>0>(u=e+D|0)>>>0?c+1|0:c)-((u>>>0<4293918720)-1|0)|0,t=(t=e>>21)+F|0,P=t=(e=(y=(2097151&e)<<11|(D=u- -1048576|0)>>>21)+M|0)>>>0<y>>>0?t+1|0:t,y=Y,Y=e,t=DA(e,t,-683901,-1),e=w+h|0,F=y=y+t|0,y=t>>>0>y>>>0?e+1|0:e,h=(t=DA(j,x,470296,0))+(b-(e=-2097152&p)|0)|0,e=w+(S-((2047&T)+(e>>>0>b>>>0)|0)|0)|0,e=t>>>0>h>>>0?e+1|0:e,p=(t=h)+(h=DA(v,X,654183,0))|0,t=w+e|0,t=h>>>0>p>>>0?t+1|0:t,h=DA(m,Q,-997805,-1),e=w+t|0,e=h>>>0>(p=h+p|0)>>>0?e+1|0:e,K=D=u-(t=-2097152&D)|0,i=h=c-((t>>>0>u>>>0)+G|0)|0,c=DA(Y,P,136657,0),t=w+e|0,t=c>>>0>(p=c+p|0)>>>0?t+1|0:t,c=DA(D,h,-683901,-1),e=w+t|0,h=e=c>>>0>(S=c+p|0)>>>0?e+1|0:e,G=t=e-((S>>>0<4293918720)-1|0)|0,e=(2097151&t)<<11|(D=S- -1048576|0)>>>21,t=(t>>21)+y|0,F=e=(t=e>>>0>(p=e+F|0)>>>0?t+1|0:t)-((p>>>0<4293918720)-1|0)|0,u=(2097151&e)<<11|(y=p- -1048576|0)>>>21,e=(e>>21)+V|0,O=M=u+L|0,M=u>>>0>M>>>0?e+1|0:e,T=p-(e=-2097152&y)|0,W=t-((e>>>0>p>>>0)+F|0)|0,L=S-(t=-2097152&D)|0,V=h-((t>>>0>S>>>0)+G|0)|0,h=DA(j,x,666643,0),t=(e=a[A+14|0])>>>24|0,y=e<<8|(G=a[A+10|0]|a[A+11|0]<<8|a[A+12|0]<<16|a[A+13|0]<<24)>>>24,c=t,e=(t=a[A+15|0])>>>16|0,e|=c,c=w,c=(t=2097151&((1&e)<<31|(t=t<<16|y)>>>1))>>>0>(e=t+h|0)>>>0?c+1|0:c,y=(t=e)+(e=DA(v,X,470296,0))|0,t=w+c|0,t=e>>>0>y>>>0?t+1|0:t,e=DA(m,Q,654183,0),t=w+t|0,t=e>>>0>(c=e+y|0)>>>0?t+1|0:t,y=(e=c)+(c=DA(Y,P,-997805,-1))|0,e=w+t|0,e=c>>>0>y>>>0?e+1|0:e,t=DA(K,i,136657,0),e=w+e|0,S=c=t+y|0,y=t>>>0>c>>>0?e+1|0:e,s=k-(t=-2097152&s)|0,h=H-((t>>>0>k>>>0)+f|0)|0,c=DA(I,0,136657,0),t=w,t=(e=(a[A+28|0]|a[A+29|0]<<8|a[A+30|0]<<16|a[A+31|0]<<24)>>>7&2097151)>>>0>(c=e+c|0)>>>0?t+1|0:t,D=(e=c)+(c=DA(d,0,-997805,-1))|0,e=w+t|0,e=c>>>0>D>>>0?e+1|0:e,t=DA(g,q,-683901,-1),e=w+e|0,e=t>>>0>(c=t+D|0)>>>0?e+1|0:e,D=(t=DA(_,0,666643,0))+c|0,c=w+e|0,c=t>>>0>D>>>0?c+1|0:c,e=DA(C,0,470296,0),t=w+c|0,t=e>>>0>(D=e+D|0)>>>0?t+1|0:t,e=DA(B,z,654183,0),t=w+t|0,e=(J>>21)+(e>>>0>(c=e+D|0)>>>0?t+1|0:t)|0,u=e=(D=(2097151&J)<<11|U>>>21)>>>0>(U=D+c|0)>>>0?e+1|0:e,F=t=e-((U>>>0<4293918720)-1|0)|0,D=(2097151&t)<<11|(p=U- -1048576|0)>>>21,t=(t>>21)+h|0,b=t=(e=D+s|0)>>>0<D>>>0?t+1|0:t,J=e,e=DA(e,t,-683901,-1),t=w+y|0,D=c=e+S|0,y=e>>>0>c>>>0?t+1|0:t,t=DA(v,X,666643,0),e=w,e=t>>>0>(c=t+(G>>>4&2097151)|0)>>>0?e+1|0:e,t=DA(m,Q,470296,0),e=w+e|0,e=t>>>0>(c=t+c|0)>>>0?e+1|0:e,h=(t=DA(Y,P,654183,0))+c|0,c=w+e|0,c=t>>>0>h>>>0?c+1|0:c,e=DA(K,i,-997805,-1),t=w+c|0,t=e>>>0>(h=e+h|0)>>>0?t+1|0:t,e=DA(J,b,136657,0),t=w+t|0,H=t=e>>>0>(k=e+h|0)>>>0?t+1|0:t,x=e=t-((k>>>0<4293918720)-1|0)|0,t=D,D=(2097151&e)<<11|(s=k- -1048576|0)>>>21,e=(e>>21)+y|0,v=y=(e=(c=t+D|0)>>>0<D>>>0?e+1|0:e)-((c>>>0<4293918720)-1|0)|0,t=(t=y>>21)+V|0,j=D=(y=(2097151&y)<<11|(h=c- -1048576|0)>>>21)+L|0,S=y>>>0>D>>>0?t+1|0:t,D=c,c=e,y=(U-(e=-2097152&p)|0)+(p=(2097151&l)<<11|N>>>21)|0,e=(u-((e>>>0>U>>>0)+F|0)|0)+(l>>21)|0,G=e=y>>>0<p>>>0?e+1|0:e,d=e=e-((y>>>0<4293918720)-1|0)|0,N=t=e>>21,t=DA(_=(2097151&e)<<11|(F=y- -1048576|0)>>>21,t,-683901,-1),c=w+c|0,c=t>>>0>(e=t+D|0)>>>0?c+1|0:c,q=e-(t=-2097152&h)|0,z=c-((t>>>0>e>>>0)+v|0)|0,t=DA(_,N,136657,0),e=H+w|0,X=(c=t+k|0)-(t=-2097152&s)|0,v=(e=c>>>0<k>>>0?e+1|0:e)-((t>>>0>c>>>0)+x|0)|0,e=DA(m,Q,666643,0),c=w,c=(t=(a[A+7|0]|a[A+8|0]<<8|a[A+9|0]<<16|a[A+10|0]<<24)>>>7&2097151)>>>0>(e=t+e|0)>>>0?c+1|0:c,D=(t=DA(Y,P,470296,0))+e|0,e=w+c|0,e=t>>>0>D>>>0?e+1|0:e,t=DA(K,i,654183,0),e=w+e|0,e=t>>>0>(c=t+D|0)>>>0?e+1|0:e,D=(t=c)+(c=DA(J,b,-997805,-1))|0,t=w+e|0,p=D,D=c>>>0>D>>>0?t+1|0:t,H=DA(Y,P,666643,0),t=(e=a[A+6|0])>>>24|0,h=e<<8|(U=a[A+2|0]|a[A+3|0]<<8|a[A+4|0]<<16|a[A+5|0]<<24)>>>24,c=t,e=(t=a[A+7|0])>>>16|0,e=2097151&((3&(e|=c))<<30|(t=t<<16|h)>>>2),t=w,t=e>>>0>(c=e+H|0)>>>0?t+1|0:t,h=(e=DA(K,i,470296,0))+c|0,c=w+t|0,c=e>>>0>h>>>0?c+1|0:c,e=DA(J,b,654183,0),t=w+c|0,H=t=e>>>0>(u=e+h|0)>>>0?t+1|0:t,l=t=t-((u>>>0<4293918720)-1|0)|0,e=(c=t>>21)+D|0,k=t=(e=(t=(2097151&t)<<11|(s=u- -1048576|0)>>>21)>>>0>(h=t+p|0)>>>0?e+1|0:e)-((h>>>0<4293918720)-1|0)|0,p=(2097151&t)<<11|(D=h- -1048576|0)>>>21,t=(t>>21)+v|0,v=Y=p+X|0,p=p>>>0>Y>>>0?t+1|0:t,t=DA(_,N,-997805,-1),e=w+e|0,e=t>>>0>(c=t+h|0)>>>0?e+1|0:e,m=c-(t=-2097152&D)|0,P=e-((t>>>0>c>>>0)+k|0)|0,e=DA(_,N,654183,0),t=H+w|0,Y=(c=e+u|0)-(e=-2097152&s)|0,l=(t=c>>>0<u>>>0?t+1|0:t)-((e>>>0>c>>>0)+l|0)|0,t=DA(K,i,666643,0),e=w,e=t>>>0>(c=t+(U>>>5&2097151)|0)>>>0?e+1|0:e,t=DA(J,b,470296,0),e=w+e|0,h=c=t+c|0,c=t>>>0>c>>>0?e+1|0:e,D=DA(J,b,666643,0),e=(t=a[A+2|0])<<16&2031616|a[0|A]|a[A+1|0]<<8,t=w,H=t=e>>>0>(k=D+e|0)>>>0?t+1|0:t,b=t=t-((k>>>0<4293918720)-1|0)|0,D=(2097151&t)<<11|(s=k- -1048576|0)>>>21,t=(t>>21)+c|0,c=t=D>>>0>(u=D+h|0)>>>0?t+1|0:t,U=t=t-((u>>>0<4293918720)-1|0)|0,D=(2097151&t)<<11|(h=u- -1048576|0)>>>21,t=(t>>21)+l|0,D=D>>>0>(l=J=D+Y|0)>>>0?t+1|0:t,t=DA(_,N,470296,0),c=c+w|0,c=(e=t+u|0)>>>0<u>>>0?c+1|0:c,u=e-(t=-2097152&h)|0,h=c-((t>>>0>e>>>0)+U|0)|0,e=DA(_,N,666643,0),t=w+(H-(((c=-2097152&s)>>>0>k>>>0)+b|0)|0)|0,e=(c=(t=e>>>0>(J=e+(k-c|0)|0)>>>0?t+1|0:t)>>21)+h|0,t=(t=(e=(t=(2097151&t)<<11|J>>>21)>>>0>(U=t+u|0)>>>0?e+1|0:e)>>21)+D|0,e=(e=(t=(e=(2097151&e)<<11|U>>>21)>>>0>(l=e+l|0)>>>0?t+1|0:t)>>21)+P|0,c=(t=(e=(t=(2097151&t)<<11|l>>>21)>>>0>(D=t+m|0)>>>0?e+1|0:e)>>21)+p|0,t=(e=(c=(e=(2097151&e)<<11|D>>>21)>>>0>(N=e+v|0)>>>0?c+1|0:c)>>21)+z|0,e=(c=(t=(c=(2097151&c)<<11|N>>>21)>>>0>(k=c+q|0)>>>0?t+1|0:t)>>21)+S|0,t=(t=(e=(t=(2097151&t)<<11|k>>>21)>>>0>(u=t+j|0)>>>0?e+1|0:e)>>21)+W|0,e=(e=(t=(e=(2097151&e)<<11|u>>>21)>>>0>(S=e+T|0)>>>0?t+1|0:t)>>21)+M|0,c=(t=(e=(t=(2097151&t)<<11|S>>>21)>>>0>(p=t+O|0)>>>0?e+1|0:e)>>21)+r|0,t=(e=(c=(e=(2097151&e)<<11|p>>>21)>>>0>(H=e+n|0)>>>0?c+1|0:c)>>21)+R|0,h=(F=y-(e=-2097152&F)|0)+((2097151&(t=(c=(2097151&c)<<11|H>>>21)>>>0>(s=c+o|0)>>>0?t+1|0:t))<<11|s>>>21)|0,t=(G-((e>>>0>y>>>0)+d|0)|0)+(t>>21)|0,F=e=(t=h>>>0<F>>>0?t+1|0:t)>>21,J=(t=DA(M=(2097151&t)<<11|h>>>21,e,666643,0))+(e=2097151&J)|0,t=w,y=t=e>>>0>J>>>0?t+1|0:t,E[0|A]=J,E[A+1|0]=(255&t)<<24|J>>>8,t=2097151&U,e=DA(M,F,470296,0)+t|0,c=w,t=(y>>21)+(t>>>0>e>>>0?c+1|0:c)|0,t=(G=(2097151&y)<<11|J>>>21)>>>0>(U=G+e|0)>>>0?t+1|0:t,E[A+4|0]=(2047&t)<<21|U>>>11,e=t,c=U,E[A+3|0]=(7&t)<<29|c>>>3,E[A+2|0]=31&((65535&y)<<16|J>>>16)|c<<5,y=2097151&l,l=DA(M,F,654183,0)+y|0,t=w,U=(2097151&e)<<11|c>>>21,e=(e>>21)+(y=y>>>0>l>>>0?t+1|0:t)|0,t=e=(l=U+l|0)>>>0<U>>>0?e+1|0:e,E[A+6|0]=(63&t)<<26|l>>>6,y=l,l=0,E[A+5|0]=l<<13|(1572864&c)>>>19|y<<2,c=2097151&D,D=DA(M,F,-997805,-1)+c|0,e=w,e=c>>>0>D>>>0?e+1|0:e,l=(2097151&(c=t))<<11|y>>>21,c=(t>>=21)+e|0,c=(D=l+D|0)>>>0<l>>>0?c+1|0:c,E[A+9|0]=(511&c)<<23|D>>>9,E[A+8|0]=(1&c)<<31|D>>>1,e=0,E[A+7|0]=e<<18|(2080768&y)>>>14|D<<7,e=2097151&N,y=DA(M,F,136657,0)+e|0,t=w,t=e>>>0>y>>>0?t+1|0:t,N=(2097151&(e=c))<<11|D>>>21,e=t+(c=e>>21)|0,e=(y=N+y|0)>>>0<N>>>0?e+1|0:e,E[A+12|0]=(4095&e)<<20|y>>>12,c=y,E[A+11|0]=(15&e)<<28|c>>>4,y=0,E[A+10|0]=y<<15|(1966080&D)>>>17|c<<4,y=2097151&k,D=DA(M,F,-683901,-1)+y|0,t=w,t=y>>>0>D>>>0?t+1|0:t,y=e,e=t+(e>>=21)|0,e=(y=(Y=D)+(D=(2097151&y)<<11|c>>>21)|0)>>>0<D>>>0?e+1|0:e,E[A+14|0]=(127&e)<<25|y>>>7,D=0,E[A+13|0]=D<<12|(1048576&c)>>>20|y<<1,t=e>>21,c=(e=(2097151&e)<<11|y>>>21)>>>0>(D=e+(2097151&u)|0)>>>0?t+1|0:t,E[A+17|0]=(1023&c)<<22|D>>>10,E[A+16|0]=(3&c)<<30|D>>>2,e=0,E[A+15|0]=e<<17|(2064384&y)>>>15|D<<6,t=c>>21,t=(e=(2097151&c)<<11|D>>>21)>>>0>(c=e+(2097151&S)|0)>>>0?t+1|0:t,E[A+20|0]=(8191&t)<<19|c>>>13,E[A+19|0]=(31&t)<<27|c>>>5,y=(e=2097151&p)+(p=(2097151&t)<<11|c>>>21)|0,e=t>>21,e=y>>>0<p>>>0?e+1|0:e,p=y,E[A+21|0]=y,S=0,E[A+18|0]=S<<14|(1835008&D)>>>18|c<<3,E[A+22|0]=(255&e)<<24|y>>>8,c=e>>21,c=(y=(D=(2097151&e)<<11|y>>>21)+(2097151&H)|0)>>>0<D>>>0?c+1|0:c,E[A+25|0]=(2047&c)<<21|y>>>11,E[A+24|0]=(7&c)<<29|y>>>3,E[A+23|0]=31&((65535&e)<<16|p>>>16)|y<<5,t=c>>21,t=(e=(2097151&c)<<11|y>>>21)>>>0>(c=e+(2097151&s)|0)>>>0?t+1|0:t,E[A+27|0]=(63&t)<<26|c>>>6,D=0,E[A+26|0]=D<<13|(1572864&y)>>>19|c<<2,e=t>>21,e=(t=(y=(2097151&t)<<11|c>>>21)+(2097151&h)|0)>>>0<y>>>0?e+1|0:e,E[A+31|0]=(131071&e)<<15|t>>>17,E[A+30|0]=(511&e)<<23|t>>>9,E[A+29|0]=(1&e)<<31|t>>>1,y=0,E[A+28|0]=y<<18|(2080768&c)>>>14|t<<7;}function k(A,I,g,C,B,Q){var i,n=0,f=0,t=0,e=0,c=0,y=0,w=0,h=0,s=0,p=0,k=0,S=0,H=0,G=0,J=0,N=0,Y=0,P=0,v=0,d=0,L=0,R=0,x=0,j=0,X=0,q=0,z=0,O=0,T=0,W=0,Z=0,$=0,AA=0,IA=0,gA=0,CA=0,BA=0,QA=0;for(D=i=D-592|0,S=-1,H=A+32|0,k=32,G=1;p=a[2672+(f=k-1|0)|0],t=(f=((e=a[f+H|0])^p)-1>>8&G)&(y=a[H+(k=k-2|0)|0])-(c=a[k+2672|0])>>8|255&(e-p>>>8&G|t),G=f&(c^y)-1>>8,k;);if(255&t&&!(aA(A)|!(((127&(-1^a[B+31|0])|a[B+1|0]&a[B+2|0]&a[B+3|0]&a[B+4|0]&a[B+5|0]&a[B+6|0]&a[B+7|0]&a[B+8|0]&a[B+9|0]&a[B+10|0]&a[B+11|0]&a[B+12|0]&a[B+13|0]&a[B+14|0]&a[B+15|0]&a[B+16|0]&a[B+17|0]&a[B+18|0]&a[B+19|0]&a[B+20|0]&a[B+21|0]&a[B+22|0]&a[B+23|0]&a[B+24|0]&a[B+25|0]&a[B+26|0]&a[B+27|0]&a[B+28|0]&a[B+30|0]&a[B+29|0]^255)-1&236-a[0|B]^-1)>>>8&1)||aA(B)||U(i+128|0,B))){for(EA(f=i+384|0),Q&&m(f,34768,34,0),m(f,A,32,0),m(f,B,32,0),m(f,I,g,C),M(f,g=i+320|0),u(g),Q=i+8|0,C=i+128|0,B=0,I=0,D=n=D-2272|0;e=g+(B>>>3|0)|0,E[(f=n+2016|0)+B|0]=a[0|e]>>>(6&B)&1,E[(t=f)+(f=1|B)|0]=a[0|e]>>>(7&f)&1,256!=(0|(B=B+2|0)););for(;;){I=(g=I)+1|0;A:if(!(!a[0|(t=g+(n+2016|0)|0)]|g>>>0>254)){I:if(B=E[0|(c=(n+2016|0)+I|0)])if((0|(B=(e=B<<1)+(f=E[0|t])|0))<=15)E[0|t]=B,E[0|c]=0;else {if((0|(B=f-e|0))<-15)break A;for(E[0|t]=B,B=I;;){if(!a[0|(f=(n+2016|0)+B|0)]){E[0|f]=1;break I}if(E[0|f]=0,f=B>>>0<255,B=B+1|0,!f)break}}if(!(g>>>0>253)){I:if(f=E[0|(y=(B=g+2|0)+(n+2016|0)|0)])if((0|(f=(c=f<<2)+(e=E[0|t])|0))>=16){if((0|(f=e-c|0))<-15)break A;for(E[0|t]=f;;){if(a[0|(f=(n+2016|0)+B|0)]){if(E[0|f]=0,f=B>>>0<255,B=B+1|0,f)continue;break I}break}E[0|f]=1;}else E[0|t]=f,E[0|y]=0;if(!(g>>>0>252)){I:if(f=E[0|(y=(B=g+3|0)+(n+2016|0)|0)])if((0|(f=(c=f<<3)+(e=E[0|t])|0))>=16){if((0|(f=e-c|0))<-15)break A;for(E[0|t]=f;;){if(a[0|(f=(n+2016|0)+B|0)]){if(E[0|f]=0,f=B>>>0<255,B=B+1|0,f)continue;break I}break}E[0|f]=1;}else E[0|t]=f,E[0|y]=0;if(!(g>>>0>251)){I:if(f=E[0|(y=(B=g+4|0)+(n+2016|0)|0)])if((0|(f=(c=f<<4)+(e=E[0|t])|0))>=16){if((0|(f=e-c|0))<-15)break A;for(E[0|t]=f;;){if(a[0|(f=(n+2016|0)+B|0)]){if(E[0|f]=0,f=B>>>0<255,B=B+1|0,f)continue;break I}break}E[0|f]=1;}else E[0|t]=f,E[0|y]=0;if(!(g>>>0>250)){I:if(f=E[0|(y=(B=g+5|0)+(n+2016|0)|0)])if((0|(f=(c=f<<5)+(e=E[0|t])|0))>=16){if((0|(f=e-c|0))<-15)break A;for(E[0|t]=f;;){if(a[0|(f=(n+2016|0)+B|0)]){if(E[0|f]=0,f=B>>>0<255,B=B+1|0,f)continue;break I}break}E[0|f]=1;}else E[0|t]=f,E[0|y]=0;if(!(g>>>0>249)&&(g=E[0|(c=(B=g+6|0)+(n+2016|0)|0)]))if((0|(g=(e=g<<6)+(f=E[0|t])|0))>=16){if((0|(g=f-e|0))<-15)break A;for(E[0|t]=g;;){if(a[0|(g=(n+2016|0)+B|0)]){if(E[0|g]=0,g=B>>>0<255,B=B+1|0,g)continue;break A}break}E[0|g]=1;}else E[0|t]=g,E[0|c]=0;}}}}}if(256==(0|I))break}for(B=0;g=H+(B>>>3|0)|0,E[(I=n+1760|0)+B|0]=a[0|g]>>>(6&B)&1,E[(f=I)+(I=1|B)|0]=a[0|g]>>>(7&I)&1,256!=(0|(B=B+2|0)););for(I=0;;){I=(g=I)+1|0;A:if(!(!a[0|(t=g+(n+1760|0)|0)]|g>>>0>254)){I:if(B=E[0|(c=(n+1760|0)+I|0)])if((0|(B=(e=B<<1)+(f=E[0|t])|0))<=15)E[0|t]=B,E[0|c]=0;else {if((0|(B=f-e|0))<-15)break A;for(E[0|t]=B,B=I;;){if(!a[0|(f=(n+1760|0)+B|0)]){E[0|f]=1;break I}if(E[0|f]=0,f=B>>>0<255,B=B+1|0,!f)break}}if(!(g>>>0>253)){I:if(f=E[0|(y=(B=g+2|0)+(n+1760|0)|0)])if((0|(f=(c=f<<2)+(e=E[0|t])|0))>=16){if((0|(f=e-c|0))<-15)break A;for(E[0|t]=f;;){if(a[0|(f=(n+1760|0)+B|0)]){if(E[0|f]=0,f=B>>>0<255,B=B+1|0,f)continue;break I}break}E[0|f]=1;}else E[0|t]=f,E[0|y]=0;if(!(g>>>0>252)){I:if(f=E[0|(y=(B=g+3|0)+(n+1760|0)|0)])if((0|(f=(c=f<<3)+(e=E[0|t])|0))>=16){if((0|(f=e-c|0))<-15)break A;for(E[0|t]=f;;){if(a[0|(f=(n+1760|0)+B|0)]){if(E[0|f]=0,f=B>>>0<255,B=B+1|0,f)continue;break I}break}E[0|f]=1;}else E[0|t]=f,E[0|y]=0;if(!(g>>>0>251)){I:if(f=E[0|(y=(B=g+4|0)+(n+1760|0)|0)])if((0|(f=(c=f<<4)+(e=E[0|t])|0))>=16){if((0|(f=e-c|0))<-15)break A;for(E[0|t]=f;;){if(a[0|(f=(n+1760|0)+B|0)]){if(E[0|f]=0,f=B>>>0<255,B=B+1|0,f)continue;break I}break}E[0|f]=1;}else E[0|t]=f,E[0|y]=0;if(!(g>>>0>250)){I:if(f=E[0|(y=(B=g+5|0)+(n+1760|0)|0)])if((0|(f=(c=f<<5)+(e=E[0|t])|0))>=16){if((0|(f=e-c|0))<-15)break A;for(E[0|t]=f;;){if(a[0|(f=(n+1760|0)+B|0)]){if(E[0|f]=0,f=B>>>0<255,B=B+1|0,f)continue;break I}break}E[0|f]=1;}else E[0|t]=f,E[0|y]=0;if(!(g>>>0>249)&&(g=E[0|(c=(B=g+6|0)+(n+1760|0)|0)]))if((0|(g=(e=g<<6)+(f=E[0|t])|0))>=16){if((0|(g=f-e|0))<-15)break A;for(E[0|t]=g;;){if(a[0|(g=(n+1760|0)+B|0)]){if(E[0|g]=0,g=B>>>0<255,B=B+1|0,g)continue;break A}break}E[0|g]=1;}else E[0|t]=g,E[0|c]=0;}}}}}if(256==(0|I))break}for(V(S=n+480|0,C),p=o[C+8>>2],t=o[C+12>>2],y=o[C+16>>2],c=o[C+20>>2],e=o[C+24>>2],f=o[C+28>>2],B=o[C>>2],g=o[C+4>>2],I=o[C+36>>2],o[n+192>>2]=o[C+32>>2],o[n+196>>2]=I,o[n+184>>2]=e,o[n+188>>2]=f,o[n+176>>2]=y,o[n+180>>2]=c,o[n+168>>2]=p,o[n+172>>2]=t,o[n+160>>2]=B,o[n+164>>2]=g,p=o[C+40>>2],t=o[C+44>>2],y=o[C+48>>2],c=o[C+52>>2],e=o[C+56>>2],f=o[C+60>>2],B=o[(I=C- -64|0)>>2],g=o[I+4>>2],I=o[C+76>>2],o[n+232>>2]=o[C+72>>2],o[n+236>>2]=I,o[n+224>>2]=B,o[n+228>>2]=g,o[n+216>>2]=e,o[n+220>>2]=f,o[n+208>>2]=y,o[n+212>>2]=c,o[n+200>>2]=p,o[n+204>>2]=t,p=o[C+80>>2],t=o[C+84>>2],y=o[C+88>>2],c=o[C+92>>2],e=o[C+96>>2],f=o[C+100>>2],B=o[C+104>>2],g=o[C+108>>2],I=o[C+116>>2],o[n+272>>2]=o[C+112>>2],o[n+276>>2]=I,o[n+264>>2]=B,o[n+268>>2]=g,o[n+256>>2]=e,o[n+260>>2]=f,o[n+248>>2]=y,o[n+252>>2]=c,o[n+240>>2]=p,o[n+244>>2]=t,l(C=n+320|0,g=n+160|0),F(n,C,w=n+440|0),F(n+40|0,h=n+360|0,s=n+400|0),F(n+80|0,s,w),F(n+120|0,C,h),_(C,n,S),F(g,C,w),F(N=n+200|0,h,s),F(Y=n+240|0,s,w),F(J=n+280|0,C,h),V(I=n+640|0,g),_(C,n,I),F(g,C,w),F(N,h,s),F(Y,s,w),F(J,C,h),V(I=n+800|0,g),_(C,n,I),F(g,C,w),F(N,h,s),F(Y,s,w),F(J,C,h),V(I=n+960|0,g),_(C,n,I),F(g,C,w),F(N,h,s),F(Y,s,w),F(J,C,h),V(I=n+1120|0,g),_(C,n,I),F(g,C,w),F(N,h,s),F(Y,s,w),F(J,C,h),V(I=n+1280|0,g),_(C,n,I),F(g,C,w),F(N,h,s),F(Y,s,w),F(J,C,h),V(I=n+1440|0,g),_(C,n,I),F(g,C,w),F(N,h,s),F(Y,s,w),F(J,C,h),V(n+1600|0,g),o[Q+32>>2]=0,o[Q+36>>2]=0,o[Q+24>>2]=0,o[Q+28>>2]=0,o[Q+16>>2]=0,o[Q+20>>2]=0,o[Q+8>>2]=0,o[Q+12>>2]=0,o[Q>>2]=0,o[Q+4>>2]=0,o[Q+44>>2]=0,o[Q+48>>2]=0,o[(z=Q+40|0)>>2]=1,o[Q+52>>2]=0,o[Q+56>>2]=0,o[Q+60>>2]=0,o[Q+64>>2]=0,o[Q+68>>2]=0,o[Q+72>>2]=0,o[Q+84>>2]=0,o[Q+88>>2]=0,o[Q+76>>2]=0,o[Q+80>>2]=1,o[Q+92>>2]=0,o[Q+96>>2]=0,o[Q+100>>2]=0,o[Q+104>>2]=0,o[Q+108>>2]=0,o[Q+112>>2]=0,o[Q+116>>2]=0,IA=Q+80|0,I=255;;){A:{I:{if(!(a[(n+2016|0)+I|0]|a[(n+1760|0)+I|0])){if(!(a[(g=I-1|0)+(n+2016|0)|0]|a[g+(n+1760|0)|0]))break I;I=g;}if((0|I)<0)break A;for(;l(n+320|0,Q),(0|(B=E[(g=I)+(n+2016|0)|0]))>0?(F(I=n+160|0,C=n+320|0,w),F(N,h,s),F(Y,s,w),F(J,C,h),_(C,I,(n+480|0)+r((254&B)>>>1|0,160)|0)):(0|B)>=0||(F(I=n+160|0,C=n+320|0,w),F(N,h,s),F(Y,s,w),F(J,C,h),b(C,I,(n+480|0)+r((0-B&254)>>>1|0,160)|0)),(0|(X=E[g+(n+1760|0)|0]))>0?(F(I=n+160|0,C=n+320|0,w),F(N,h,s),F(Y,s,w),F(J,C,h),K(C,I,r((254&X)>>>1|0,120)+1488|0)):(0|X)>=0||(F(n+160|0,q=n+320|0,w),F(N,h,s),F(Y,s,w),F(J,q,h),P=o[n+160>>2],v=o[n+200>>2],d=o[n+164>>2],L=o[n+204>>2],R=o[n+168>>2],x=o[n+208>>2],j=o[n+172>>2],k=o[n+212>>2],H=o[n+176>>2],G=o[n+216>>2],S=o[n+180>>2],p=o[n+220>>2],t=o[n+184>>2],y=o[n+224>>2],c=o[n+188>>2],e=o[n+228>>2],f=o[n+192>>2],B=o[n+232>>2],C=o[n+236>>2],I=o[n+196>>2],o[n+396>>2]=C-I,o[n+392>>2]=B-f,o[n+388>>2]=e-c,o[n+384>>2]=y-t,o[n+380>>2]=p-S,o[n+376>>2]=G-H,o[n+372>>2]=k-j,o[n+368>>2]=x-R,o[n+364>>2]=L-d,o[n+360>>2]=v-P,o[n+356>>2]=I+C,o[n+352>>2]=B+f,o[n+348>>2]=e+c,o[n+344>>2]=t+y,o[n+340>>2]=p+S,o[n+336>>2]=H+G,o[n+332>>2]=k+j,o[n+328>>2]=R+x,o[n+324>>2]=d+L,o[n+320>>2]=P+v,F(s,q,40+(I=r((0-X&254)>>>1|0,120)+1488|0)|0),F(h,h,I),F(w,I+80|0,J),gA=o[n+276>>2],CA=o[n+272>>2],X=o[n+268>>2],q=o[n+264>>2],t=o[n+260>>2],y=o[n+256>>2],c=o[n+252>>2],e=o[n+248>>2],f=o[n+244>>2],B=o[n+240>>2],O=o[n+360>>2],T=o[n+400>>2],W=o[n+364>>2],Z=o[n+404>>2],$=o[n+368>>2],AA=o[n+408>>2],P=o[n+372>>2],v=o[n+412>>2],d=o[n+376>>2],L=o[n+416>>2],R=o[n+380>>2],x=o[n+420>>2],j=o[n+384>>2],k=o[n+424>>2],H=o[n+388>>2],G=o[n+428>>2],S=o[n+392>>2],p=o[n+432>>2],C=o[n+396>>2],I=o[n+436>>2],o[n+396>>2]=C+I,o[n+392>>2]=p+S,o[n+388>>2]=H+G,o[n+384>>2]=k+j,o[n+380>>2]=R+x,o[n+376>>2]=d+L,o[n+372>>2]=P+v,o[n+368>>2]=$+AA,o[n+364>>2]=W+Z,o[n+360>>2]=O+T,o[n+356>>2]=I-C,o[n+352>>2]=p-S,o[n+348>>2]=G-H,o[n+344>>2]=k-j,o[n+340>>2]=x-R,o[n+336>>2]=L-d,o[n+332>>2]=v-P,o[n+328>>2]=AA-$,o[n+324>>2]=Z-W,o[n+320>>2]=T-O,P=B<<1,v=o[n+440>>2],o[n+400>>2]=P-v,d=f<<1,L=o[n+444>>2],o[n+404>>2]=d-L,R=e<<1,x=o[n+448>>2],o[n+408>>2]=R-x,j=c<<1,k=o[n+452>>2],o[n+412>>2]=j-k,H=y<<1,G=o[n+456>>2],o[n+416>>2]=H-G,S=t<<1,p=o[n+460>>2],o[n+420>>2]=S-p,t=q<<1,y=o[n+464>>2],o[n+424>>2]=t-y,c=X<<1,e=o[n+468>>2],o[n+428>>2]=c-e,f=CA<<1,B=o[n+472>>2],o[n+432>>2]=f-B,C=gA<<1,I=o[n+476>>2],o[n+436>>2]=C-I,o[n+440>>2]=P+v,o[n+444>>2]=d+L,o[n+448>>2]=R+x,o[n+452>>2]=k+j,o[n+456>>2]=H+G,o[n+460>>2]=p+S,o[n+464>>2]=t+y,o[n+468>>2]=e+c,o[n+472>>2]=B+f,o[n+476>>2]=I+C),F(Q,n+320|0,w),F(z,h,s),F(IA,s,w),I=g-1|0,(0|g)>0;);break A}if(I=I-2|0,g)continue}break}D=n+2272|0,uA(I=i+288|0,Q),BA=-1,QA=cA(I,A),S=((0|A)==(0|I)?BA:QA)|oA(A,I,32);}return D=i+592|0,S}function F(A,I,g){var C,B,Q,i,E,a,n,f,t,e,c,y,D,h,s,p,u,k,F,l,S,H,M,G,U,J,N,Y,b,_,K,P,v,m,d,L,R,x,j,X,q,z,V,O,T,W,Z,$,AA,IA,gA,CA,BA,QA,iA=0,EA=0,oA=0,aA=0,nA=0,rA=0,fA=0,tA=0,eA=0,cA=0,yA=0,wA=0,hA=0,sA=0,pA=0,uA=0,kA=0,FA=0,lA=0,SA=0,HA=0,MA=0,GA=0,UA=0;iA=DA(C=o[g+4>>2],e=C>>31,kA=(p=o[I+20>>2])<<1,K=kA>>31),oA=w,EA=(hA=DA(pA=o[g>>2],Q=pA>>31,B=o[I+24>>2],i=B>>31))+iA|0,iA=w+oA|0,iA=EA>>>0<hA>>>0?iA+1|0:iA,eA=DA(E=o[g+8>>2],D=E>>31,hA=o[I+16>>2],a=hA>>31),oA=w+iA|0,oA=(EA=eA+EA|0)>>>0<eA>>>0?oA+1|0:oA,iA=(eA=DA(c=o[g+12>>2],u=c>>31,G=(k=o[I+12>>2])<<1,P=G>>31))+EA|0,EA=w+oA|0,EA=iA>>>0<eA>>>0?EA+1|0:EA,oA=(sA=DA(h=o[g+16>>2],U=h>>31,eA=o[I+8>>2],n=eA>>31))+iA|0,iA=w+EA|0,iA=oA>>>0<sA>>>0?iA+1|0:iA,EA=oA,oA=DA(F=o[g+20>>2],v=F>>31,J=(l=o[I+4>>2])<<1,m=J>>31),iA=w+iA|0,iA=(EA=EA+oA|0)>>>0<oA>>>0?iA+1|0:iA,W=tA=o[g+24>>2],oA=(cA=DA(tA,O=tA>>31,sA=o[I>>2],f=sA>>31))+EA|0,EA=w+iA|0,EA=oA>>>0<cA>>>0?EA+1|0:EA,d=o[g+28>>2],iA=(cA=DA(wA=r(d,19),S=wA>>31,N=(H=o[I+36>>2])<<1,L=N>>31))+oA|0,oA=w+EA|0,oA=iA>>>0<cA>>>0?oA+1|0:oA,$=o[g+32>>2],EA=(fA=DA(aA=r($,19),s=aA>>31,cA=o[I+32>>2],t=cA>>31))+iA|0,iA=w+oA|0,iA=EA>>>0<fA>>>0?iA+1|0:iA,Z=o[g+36>>2],g=DA(fA=r(Z,19),y=fA>>31,Y=(M=o[I+28>>2])<<1,R=Y>>31),iA=w+iA|0,nA=I=g+EA|0,g=I>>>0<g>>>0?iA+1|0:iA,I=DA(hA,a,C,e),iA=w,EA=DA(pA,Q,p,x=p>>31),oA=w+iA|0,oA=(I=EA+I|0)>>>0<EA>>>0?oA+1|0:oA,iA=DA(E,D,k,j=k>>31),EA=w+oA|0,EA=(I=iA+I|0)>>>0<iA>>>0?EA+1|0:EA,oA=DA(eA,n,c,u),iA=w+EA|0,iA=(I=oA+I|0)>>>0<oA>>>0?iA+1|0:iA,EA=DA(h,U,l,X=l>>31),iA=w+iA|0,iA=(I=EA+I|0)>>>0<EA>>>0?iA+1|0:iA,EA=DA(sA,f,F,v),iA=w+iA|0,iA=(I=EA+I|0)>>>0<EA>>>0?iA+1|0:iA,EA=DA(tA=r(tA,19),b=tA>>31,H,q=H>>31),oA=w+iA|0,oA=(I=EA+I|0)>>>0<EA>>>0?oA+1|0:oA,iA=DA(cA,t,wA,S),EA=w+oA|0,EA=(I=iA+I|0)>>>0<iA>>>0?EA+1|0:EA,oA=DA(aA,s,M,z=M>>31),iA=w+EA|0,iA=(I=oA+I|0)>>>0<oA>>>0?iA+1|0:iA,EA=DA(fA,y,B,i),iA=w+iA|0,MA=I=EA+I|0,lA=I>>>0<EA>>>0?iA+1|0:iA,I=DA(C,e,G,P),iA=w,EA=DA(pA,Q,hA,a),iA=w+iA|0,iA=(I=EA+I|0)>>>0<EA>>>0?iA+1|0:iA,EA=DA(eA,n,E,D),oA=w+iA|0,oA=(I=EA+I|0)>>>0<EA>>>0?oA+1|0:oA,iA=DA(c,u,J,m),EA=w+oA|0,EA=(I=iA+I|0)>>>0<iA>>>0?EA+1|0:EA,oA=DA(sA,f,h,U),iA=w+EA|0,iA=(I=oA+I|0)>>>0<oA>>>0?iA+1|0:iA,EA=DA(_=r(F,19),V=_>>31,N,L),iA=w+iA|0,iA=(I=EA+I|0)>>>0<EA>>>0?iA+1|0:iA,EA=DA(cA,t,tA,b),iA=w+iA|0,iA=(I=EA+I|0)>>>0<EA>>>0?iA+1|0:iA,EA=DA(wA,S,Y,R),oA=w+iA|0,oA=(I=EA+I|0)>>>0<EA>>>0?oA+1|0:oA,iA=DA(aA,s,B,i),EA=w+oA|0,EA=(I=iA+I|0)>>>0<iA>>>0?EA+1|0:EA,oA=DA(fA,y,kA,K),iA=w+EA|0,AA=I=oA+I|0,IA=iA=I>>>0<oA>>>0?iA+1|0:iA,gA=I=I+33554432|0,CA=iA=I>>>0<33554432?iA+1|0:iA,oA=(67108863&iA)<<6|I>>>26,iA=(iA>>26)+lA|0,MA=I=oA+MA|0,iA=I>>>0<oA>>>0?iA+1|0:iA,BA=I=I+16777216|0,iA=g+(EA=(oA=I>>>0<16777216?iA+1|0:iA)>>25)|0,iA=(I=(oA=(33554431&oA)<<7|I>>>25)+nA|0)>>>0<oA>>>0?iA+1|0:iA,FA=g=(EA=I)+33554432|0,I=iA=g>>>0<33554432?iA+1|0:iA,o[A+24>>2]=EA-(-67108864&g),g=DA(C,e,J,m),iA=w,EA=DA(pA,Q,eA,n),oA=w+iA|0,oA=(g=EA+g|0)>>>0<EA>>>0?oA+1|0:oA,EA=(iA=g)+(g=DA(sA,f,E,D))|0,iA=w+oA|0,iA=g>>>0>EA>>>0?iA+1|0:iA,oA=DA(g=r(c,19),SA=g>>31,N,L),iA=w+iA|0,iA=(EA=oA+EA|0)>>>0<oA>>>0?iA+1|0:iA,oA=(nA=DA(cA,t,lA=r(h,19),T=lA>>31))+EA|0,EA=w+iA|0,EA=oA>>>0<nA>>>0?EA+1|0:EA,nA=DA(Y,R,_,V),iA=w+EA|0,iA=(oA=nA+oA|0)>>>0<nA>>>0?iA+1|0:iA,EA=(nA=DA(B,i,tA,b))+oA|0,oA=w+iA|0,oA=EA>>>0<nA>>>0?oA+1|0:oA,nA=DA(wA,S,kA,K),iA=w+oA|0,iA=(EA=nA+EA|0)>>>0<nA>>>0?iA+1|0:iA,oA=DA(aA,s,hA,a),iA=w+iA|0,iA=(EA=oA+EA|0)>>>0<oA>>>0?iA+1|0:iA,oA=(nA=DA(fA,y,G,P))+EA|0,EA=w+iA|0,yA=oA,GA=oA>>>0<nA>>>0?EA+1|0:EA,iA=DA(sA,f,C,e),EA=w,oA=(nA=DA(pA,Q,l,X))+iA|0,iA=w+EA|0,iA=oA>>>0<nA>>>0?iA+1|0:iA,nA=EA=r(E,19),EA=(rA=DA(EA,HA=EA>>31,H,q))+oA|0,oA=w+iA|0,oA=EA>>>0<rA>>>0?oA+1|0:oA,rA=DA(cA,t,g,SA),iA=w+oA|0,iA=(EA=rA+EA|0)>>>0<rA>>>0?iA+1|0:iA,oA=DA(lA,T,M,z),iA=w+iA|0,iA=(EA=oA+EA|0)>>>0<oA>>>0?iA+1|0:iA,oA=(rA=DA(B,i,_,V))+EA|0,EA=w+iA|0,EA=oA>>>0<rA>>>0?EA+1|0:EA,rA=DA(tA,b,p,x),iA=w+EA|0,iA=(oA=rA+oA|0)>>>0<rA>>>0?iA+1|0:iA,EA=(rA=DA(hA,a,wA,S))+oA|0,oA=w+iA|0,oA=EA>>>0<rA>>>0?oA+1|0:oA,rA=DA(aA,s,k,j),iA=w+oA|0,iA=(EA=rA+EA|0)>>>0<rA>>>0?iA+1|0:iA,oA=DA(fA,y,eA,n),iA=w+iA|0,UA=EA=oA+EA|0,rA=EA>>>0<oA>>>0?iA+1|0:iA,iA=DA(iA=r(C,19),iA>>31,N,L),EA=w,oA=DA(pA,Q,sA,f),EA=w+EA|0,EA=(iA=oA+iA|0)>>>0<oA>>>0?EA+1|0:EA,oA=(nA=DA(cA,t,nA,HA))+iA|0,iA=w+EA|0,g=(EA=DA(g,SA,Y,R))+oA|0,oA=w+(oA>>>0<nA>>>0?iA+1|0:iA)|0,oA=g>>>0<EA>>>0?oA+1|0:oA,EA=DA(B,i,lA,T),iA=w+oA|0,iA=(g=EA+g|0)>>>0<EA>>>0?iA+1|0:iA,EA=DA(kA,K,_,V),iA=w+iA|0,iA=(g=EA+g|0)>>>0<EA>>>0?iA+1|0:iA,oA=DA(hA,a,tA,b),EA=w+iA|0,EA=(g=oA+g|0)>>>0<oA>>>0?EA+1|0:EA,oA=DA(wA,S,G,P),iA=w+EA|0,iA=(g=oA+g|0)>>>0<oA>>>0?iA+1|0:iA,EA=DA(aA,s,eA,n),oA=w+iA|0,oA=(g=EA+g|0)>>>0<EA>>>0?oA+1|0:oA,EA=DA(fA,y,J,m),iA=w+oA|0,nA=g=EA+g|0,SA=iA=g>>>0<EA>>>0?iA+1|0:iA,HA=g=g+33554432|0,QA=iA=g>>>0<33554432?iA+1|0:iA,EA=(oA=iA>>26)+rA|0,rA=g=(iA=(67108863&iA)<<6|g>>>26)+UA|0,iA=EA=g>>>0<iA>>>0?EA+1|0:EA,UA=g=g+16777216|0,EA=(33554431&(iA=g>>>0<16777216?iA+1|0:iA))<<7|g>>>25,iA=(iA>>25)+GA|0,iA=(g=EA+yA|0)>>>0<EA>>>0?iA+1|0:iA,GA=EA=(oA=g)+33554432|0,g=iA=EA>>>0<33554432?iA+1|0:iA,o[A+8>>2]=oA-(-67108864&EA),iA=DA(B,i,C,e),oA=w,EA=(yA=DA(pA,Q,M,z))+iA|0,iA=w+oA|0,iA=EA>>>0<yA>>>0?iA+1|0:iA,oA=DA(E,D,p,x),iA=w+iA|0,iA=(EA=oA+EA|0)>>>0<oA>>>0?iA+1|0:iA,oA=DA(hA,a,c,u),iA=w+iA|0,iA=(EA=oA+EA|0)>>>0<oA>>>0?iA+1|0:iA,yA=DA(h,U,k,j),oA=w+iA|0,oA=(EA=yA+EA|0)>>>0<yA>>>0?oA+1|0:oA,iA=(yA=DA(eA,n,F,v))+EA|0,EA=w+oA|0,EA=iA>>>0<yA>>>0?EA+1|0:EA,oA=(yA=DA(l,X,W,O))+iA|0,iA=w+EA|0,iA=oA>>>0<yA>>>0?iA+1|0:iA,EA=oA,oA=DA(sA,f,d,yA=d>>31),iA=w+iA|0,iA=(EA=EA+oA|0)>>>0<oA>>>0?iA+1|0:iA,oA=DA(aA,s,H,q),iA=w+iA|0,iA=(EA=oA+EA|0)>>>0<oA>>>0?iA+1|0:iA,uA=DA(fA,y,cA,t),oA=w+iA|0,iA=I>>26,I=(FA=(67108863&I)<<6|FA>>>26)+(EA=uA+EA|0)|0,EA=iA+(EA>>>0<uA>>>0?oA+1|0:oA)|0,iA=(oA=I)>>>0<FA>>>0?EA+1|0:EA,FA=EA=oA+16777216|0,I=iA=EA>>>0<16777216?iA+1|0:iA,o[A+28>>2]=oA-(-33554432&EA),iA=DA(eA,n,C,e),EA=w,uA=DA(pA,Q,k,j),oA=w+EA|0,oA=(iA=uA+iA|0)>>>0<uA>>>0?oA+1|0:oA,uA=DA(E,D,l,X),EA=w+oA|0,EA=(iA=uA+iA|0)>>>0<uA>>>0?EA+1|0:EA,oA=(uA=DA(sA,f,c,u))+iA|0,iA=w+EA|0,iA=oA>>>0<uA>>>0?iA+1|0:iA,EA=oA,oA=DA(lA,T,H,q),iA=w+iA|0,iA=(EA=EA+oA|0)>>>0<oA>>>0?iA+1|0:iA,oA=DA(cA,t,_,V),iA=w+iA|0,iA=(EA=oA+EA|0)>>>0<oA>>>0?iA+1|0:iA,EA=(tA=DA(tA,b,M,z))+EA|0,oA=w+iA|0,iA=(wA=DA(B,i,wA,S))+EA|0,EA=w+(EA>>>0<tA>>>0?oA+1|0:oA)|0,oA=(aA=DA(aA,s,p,x))+iA|0,iA=w+(iA>>>0<wA>>>0?EA+1|0:EA)|0,iA=oA>>>0<aA>>>0?iA+1|0:iA,EA=oA,oA=DA(fA,y,hA,a),iA=w+iA|0,aA=EA=EA+oA|0,iA=(iA=EA>>>0<oA>>>0?iA+1|0:iA)+(EA=g>>26)|0,oA=(EA=g=aA+(oA=(67108863&g)<<6|GA>>>26)|0)>>>0<oA>>>0?iA+1|0:iA,wA=iA=EA+16777216|0,g=oA=iA>>>0<16777216?oA+1|0:oA,o[A+12>>2]=EA-(-33554432&iA),iA=DA(C,e,Y,R),oA=w,EA=(aA=DA(pA,Q,cA,t))+iA|0,iA=w+oA|0,iA=EA>>>0<aA>>>0?iA+1|0:iA,oA=DA(B,i,E,D),iA=w+iA|0,iA=(EA=oA+EA|0)>>>0<oA>>>0?iA+1|0:iA,aA=DA(c,u,kA,K),oA=w+iA|0,oA=(EA=aA+EA|0)>>>0<aA>>>0?oA+1|0:oA,iA=(aA=DA(hA,a,h,U))+EA|0,EA=w+oA|0,EA=iA>>>0<aA>>>0?EA+1|0:EA,oA=(aA=DA(G,P,F,v))+iA|0,iA=w+EA|0,iA=oA>>>0<aA>>>0?iA+1|0:iA,EA=oA,oA=DA(eA,n,W,O),iA=w+iA|0,iA=(EA=EA+oA|0)>>>0<oA>>>0?iA+1|0:iA,oA=DA(d,yA,J,m),iA=w+iA|0,iA=(EA=oA+EA|0)>>>0<oA>>>0?iA+1|0:iA,EA=(kA=DA(sA,f,aA=$,tA=aA>>31))+EA|0,oA=w+iA|0,iA=(fA=DA(fA,y,N,L))+EA|0,EA=w+(EA>>>0<kA>>>0?oA+1|0:oA)|0,EA=iA>>>0<fA>>>0?EA+1|0:EA,fA=iA,iA=(iA=I>>25)+EA|0,iA=(I=fA+(oA=(33554431&I)<<7|FA>>>25)|0)>>>0<oA>>>0?iA+1|0:iA,fA=EA=(oA=I)+33554432|0,I=iA=EA>>>0<33554432?iA+1|0:iA,o[A+32>>2]=oA-(-67108864&EA),EA=g>>25,g=(wA=(33554431&g)<<7|wA>>>25)+(AA-(iA=-67108864&gA)|0)|0,iA=EA+(IA-((iA>>>0>AA>>>0)+CA|0)|0)|0,iA=g>>>0<wA>>>0?iA+1|0:iA,FA=iA=(67108863&(iA=(g=(EA=g)+33554432|0)>>>0<33554432?iA+1|0:iA))<<6|g>>>26,iA=iA+(oA=MA-(-33554432&BA)|0)|0,o[A+20>>2]=iA,o[A+16>>2]=EA-(-67108864&g),g=DA(cA,t,C,e),iA=w,EA=DA(pA,Q,H,q),iA=w+iA|0,iA=(g=EA+g|0)>>>0<EA>>>0?iA+1|0:iA,oA=DA(E,D,M,z),EA=w+iA|0,EA=(g=oA+g|0)>>>0<oA>>>0?EA+1|0:EA,iA=DA(B,i,c,u),oA=w+EA|0,oA=(g=iA+g|0)>>>0<iA>>>0?oA+1|0:oA,EA=DA(h,U,p,x),iA=w+oA|0,iA=(g=EA+g|0)>>>0<EA>>>0?iA+1|0:iA,EA=DA(hA,a,F,v),iA=w+iA|0,iA=(g=EA+g|0)>>>0<EA>>>0?iA+1|0:iA,EA=DA(k,j,W,O),iA=w+iA|0,iA=(g=EA+g|0)>>>0<EA>>>0?iA+1|0:iA,oA=DA(eA,n,d,yA),EA=w+iA|0,EA=(g=oA+g|0)>>>0<oA>>>0?EA+1|0:EA,iA=DA(aA,tA,l,X),oA=w+EA|0,oA=(g=iA+g|0)>>>0<iA>>>0?oA+1|0:oA,EA=DA(sA,f,Z,Z>>31),iA=w+oA|0,iA=(iA=(g=EA+g|0)>>>0<EA>>>0?iA+1|0:iA)+(EA=I>>26)|0,iA=(I=(oA=g)+(g=(67108863&I)<<6|fA>>>26)|0)>>>0<g>>>0?iA+1|0:iA,iA=(I=(g=I)+16777216|0)>>>0<16777216?iA+1|0:iA,o[A+36>>2]=g-(-33554432&I),oA=rA-(-33554432&UA)|0,EA=nA-(g=-67108864&HA)|0,pA=SA-((g>>>0>nA>>>0)+QA|0)|0,I=(g=DA((33554431&(g=iA))<<7|I>>>25,iA>>=25,19,0))+EA|0,EA=w+pA|0,iA=I>>>0<g>>>0?EA+1|0:EA,EA=iA=(67108863&(iA=(I=(g=I)+33554432|0)>>>0<33554432?iA+1|0:iA))<<6|I>>>26,iA=iA+oA|0,o[A+4>>2]=iA,o[A>>2]=g-(-67108864&I);}function l(A,I){var g,C,B,Q,i,E,a,n,f,t,e,c,y,h,s,p,u,k,F,l,H,M,G,U,J=0,N=0,Y=0,b=0,_=0,K=0,P=0,v=0,m=0,d=0,L=0,R=0,x=0,j=0,X=0,q=0,z=0,V=0,O=0,T=0,W=0,Z=0,$=0,AA=0,IA=0,gA=0,CA=0,BA=0,QA=0,iA=0,EA=0,oA=0,aA=0,nA=0,rA=0;D=g=D-48|0,S(A,I),S(A+80|0,I+40|0),J=DA(x=(W=o[I+92>>2])<<1,i=x>>31,R=(b=o[I+84>>2])<<1,C=R>>31),Y=w,BA=j=o[I+88>>2],N=(L=DA(j,q=j>>31,j,q))+J|0,J=w+Y|0,J=N>>>0<L>>>0?J+1|0:J,Y=(m=DA(P=o[I+96>>2],E=P>>31,L=(_=o[I+80>>2])<<1,B=L>>31))+N|0,N=w+J|0,N=Y>>>0<m>>>0?N+1|0:N,IA=o[I+108>>2],m=DA(d=r(IA,38),e=d>>31,IA,h=IA>>31),J=w+N|0,J=(Y=m+Y|0)>>>0<m>>>0?J+1|0:J,v=Y,Z=o[I+112>>2],Y=DA(K=r(Z,19),a=K>>31,N=(z=o[I+104>>2])<<1,N>>31),J=w+J|0,J=(N=v+Y|0)>>>0<Y>>>0?J+1|0:J,iA=o[I+116>>2],Y=($=DA(m=r(iA,38),Q=m>>31,X=(V=o[I+100>>2])<<1,f=X>>31))+N|0,N=w+J|0,EA=J=(Y>>>0<$>>>0?N+1|0:N)<<1|Y>>>31,oA=Y=33554432+(s=Y<<1)|0,aA=J=Y>>>0<33554432?J+1|0:J,gA=(67108863&J)<<6|Y>>>26,O=J>>26,J=DA(R,C,P,E),N=w,Y=DA(j<<=1,t=j>>31,W,p=W>>31),N=w+N|0,N=(J=Y+J|0)>>>0<Y>>>0?N+1|0:N,Y=($=DA(V,c=V>>31,L,B))+J|0,J=w+N|0,J=Y>>>0<$>>>0?J+1|0:J,N=Y,Y=DA(K,a,$=IA<<1,u=$>>31),J=w+J|0,J=(N=N+Y|0)>>>0<Y>>>0?J+1|0:J,Y=DA(m,Q,z,n=z>>31),J=w+J|0,J=(N=Y+N|0)>>>0<Y>>>0?J+1|0:J,Y=gA,gA=N<<1,N=(J<<1|N>>>31)+O|0,N=(Y=Y+gA|0)>>>0<gA>>>0?N+1|0:N,gA=Y,nA=Y=Y+16777216|0,v=(33554431&(N=Y>>>0<16777216?N+1|0:N))<<7|Y>>>25,O=N>>25,J=DA(x,i,W,p),Y=w,N=(T=DA(P,E,j,t))+J|0,J=w+Y|0,J=N>>>0<T>>>0?J+1|0:J,Y=DA(R,C,X,f),J=w+J|0,J=(N=Y+N|0)>>>0<Y>>>0?J+1|0:J,Y=(T=DA(L,B,z,n))+N|0,N=w+J|0,N=Y>>>0<T>>>0?N+1|0:N,J=Y,Y=DA(K,a,Z,y=Z>>31),N=w+N|0,N=(J=J+Y|0)>>>0<Y>>>0?N+1|0:N,Y=(T=DA(m,Q,$,u))+J|0,J=w+N|0,N=(Y>>>0<T>>>0?J+1|0:J)<<1|Y>>>31,Y=(J=v)+(v=Y<<1)|0,J=N+O|0,J=Y>>>0<v>>>0?J+1|0:J,O=Y,T=N=Y+33554432|0,Y=J=N>>>0<33554432?J+1|0:J,o[A+144>>2]=O-(-67108864&N),O=DA(J=r(V,38),J>>31,V,c),v=w,_=DA(J=_,N=J>>31,J,N),J=w+v|0,J=(N=_+O|0)>>>0<_>>>0?J+1|0:J,v=DA(_=r(z,19),k=_>>31,O=P<<1,F=O>>31),J=w+J|0,J=(N=v+N|0)>>>0<v>>>0?J+1|0:J,v=DA(x,i,d,e),J=w+J|0,J=(N=v+N|0)>>>0<v>>>0?J+1|0:J,v=(rA=DA(K,a,j,t))+N|0,N=w+J|0,N=v>>>0<rA>>>0?N+1|0:N,J=v,v=DA(R,C,m,Q),N=w+N|0,N=((J=J+v|0)>>>0<v>>>0?N+1|0:N)<<1,v=J,rA=J=N|J>>>31,M=v=33554432+(l=v<<1)|0,G=J=v>>>0<33554432?J+1|0:J,AA=(67108863&J)<<6|v>>>26,v=J>>26,J=DA(_,k,X,f),CA=w,QA=b,N=(b=DA(L,B,b,H=b>>31))+J|0,J=w+CA|0,J=N>>>0<b>>>0?J+1|0:J,b=(CA=DA(P,E,d,e))+N|0,N=w+J|0,N=b>>>0<CA>>>0?N+1|0:N,CA=DA(K,a,x,i),J=w+N|0,J=(b=CA+b|0)>>>0<CA>>>0?J+1|0:J,N=b,b=DA(m,Q,BA,q),J=w+J|0,J=((N=N+b|0)>>>0<b>>>0?J+1|0:J)<<1,b=N,N=(N=J|N>>>31)+v|0,v=b=(J=b<<1)+AA|0,J=N=J>>>0>b>>>0?N+1|0:N,CA=b=b+16777216|0,U=(33554431&(J=b>>>0<16777216?J+1|0:J))<<7|b>>>25,AA=J>>25,J=DA(L,B,BA,q),b=w,N=(QA=DA(R,C,QA,H))+J|0,J=w+b|0,J=N>>>0<QA>>>0?J+1|0:J,b=DA(_,k,z,n),J=w+J|0,J=(N=b+N|0)>>>0<b>>>0?J+1|0:J,b=(_=DA(X,f,d,e))+N|0,N=w+J|0,N=b>>>0<_>>>0?N+1|0:N,_=DA(K,a,O,F),J=w+N|0,J=(b=_+b|0)>>>0<_>>>0?J+1|0:J,_=DA(m,Q,x,i),N=w+J|0,J=(N=((b=_+b|0)>>>0<_>>>0?N+1|0:N)<<1|b>>>31)+AA|0,J=(b=(_=b<<1)+U|0)>>>0<_>>>0?J+1|0:J,_=b,QA=N=b+33554432|0,b=J=N>>>0<33554432?J+1|0:J,o[A+128>>2]=_-(-67108864&N),J=DA(j,t,V,c),N=w,_=DA(P,E,x,i),N=w+N|0,N=(J=_+J|0)>>>0<_>>>0?N+1|0:N,_=(AA=DA(R,C,z,n))+J|0,J=w+N|0,J=_>>>0<AA>>>0?J+1|0:J,N=_,_=DA(L,B,IA,h),J=w+J|0,J=(N=N+_|0)>>>0<_>>>0?J+1|0:J,_=(AA=DA(m,Q,Z,y))+N|0,N=w+J|0,N=J=(_>>>0<AA>>>0?N+1|0:N)<<1|_>>>31,J=(J=Y>>26)+N|0,J=(Y=(AA=_<<=1)+(_=(67108863&Y)<<6|T>>>26)|0)>>>0<_>>>0?J+1|0:J,_=Y,N=J,T=J=Y+16777216|0,Y=N=J>>>0<16777216?N+1|0:N,o[A+148>>2]=_-(-33554432&J),J=DA(L,B,W,p),W=w,N=(q=DA(R,C,BA,q))+J|0,J=w+W|0,J=N>>>0<q>>>0?J+1|0:J,d=DA(z,n,d,e),J=w+J|0,J=(N=d+N|0)>>>0<d>>>0?J+1|0:J,K=(d=DA(K,a,X,f))+N|0,N=w+J|0,N=K>>>0<d>>>0?N+1|0:N,d=DA(m,Q,P,E),J=w+N|0,N=(J=((K=d+K|0)>>>0<d>>>0?J+1|0:J)<<1|K>>>31)+(N=b>>26)|0,N=(b=(_=K<<1)+(K=(67108863&b)<<6|QA>>>26)|0)>>>0<K>>>0?N+1|0:N,K=b,J=N,d=N=b+16777216|0,b=J=N>>>0<16777216?J+1|0:J,o[A+132>>2]=K-(-33554432&N),J=DA(z,n,j,t),K=w,N=(P=DA(P,E,P,E))+J|0,J=w+K|0,J=N>>>0<P>>>0?J+1|0:J,P=(K=DA(x,i,X,f))+N|0,N=w+J|0,N=P>>>0<K>>>0?N+1|0:N,K=DA(R,C,$,u),J=w+N|0,J=(P=K+P|0)>>>0<K>>>0?J+1|0:J,K=DA(L,B,Z,y),N=w+J|0,N=(P=K+P|0)>>>0<K>>>0?N+1|0:N,K=DA(J=m,Q,m=iA,X=m>>31),J=w+N|0,J=(J=((P=K+P|0)>>>0<K>>>0?J+1|0:J)<<1|P>>>31)+(N=Y>>25)|0,J=(Y=(_=P<<1)+(P=(33554431&Y)<<7|T>>>25)|0)>>>0<P>>>0?J+1|0:J,P=Y,N=J,K=J=Y+33554432|0,Y=N=J>>>0<33554432?N+1|0:N,o[A+152>>2]=P-(-67108864&J),N=s-(J=-67108864&oA)|0,q=EA-((J>>>0>s>>>0)+aA|0)|0,J=b>>25,b=(d=(33554431&b)<<7|d>>>25)+N|0,N=J+q|0,N=b>>>0<d>>>0?N+1|0:N,_=N=(67108863&(N=(J=b+33554432|0)>>>0<33554432?N+1|0:N))<<6|J>>>26,N=N+(P=gA-(-33554432&nA)|0)|0,o[A+140>>2]=N,o[A+136>>2]=b-(-67108864&J),J=DA(x,i,z,n),N=w,b=DA(V,c,O,F),N=w+N|0,N=(J=b+J|0)>>>0<b>>>0?N+1|0:N,b=(x=DA(j,t,IA,h))+J|0,J=w+N|0,J=b>>>0<x>>>0?J+1|0:J,N=b,b=DA(R,C,Z,y),J=w+J|0,J=(N=N+b|0)>>>0<b>>>0?J+1|0:J,b=(R=DA(L,B,m,X))+N|0,N=w+J|0,N=J=(b>>>0<R>>>0?N+1|0:N)<<1|b>>>31,J=(J=Y>>26)+N|0,N=(Y=(_=b<<=1)+(b=(67108863&Y)<<6|K>>>26)|0)>>>0<b>>>0?J+1|0:J,N=(J=Y+16777216|0)>>>0<16777216?N+1|0:N,o[A+156>>2]=Y-(-33554432&J),b=v-(-33554432&CA)|0,R=l-(Y=-67108864&M)|0,L=rA-((Y>>>0>l>>>0)+G|0)|0,N=DA((33554431&N)<<7|J>>>25,N>>25,19,0),J=w+L|0,N=N>>>0>(Y=N+R|0)>>>0?J+1|0:J,_=N=(67108863&(N=(J=Y+33554432|0)>>>0<33554432?N+1|0:N))<<6|J>>>26,N=N+b|0,o[A+124>>2]=N,o[A+120>>2]=Y-(-67108864&J),J=o[I+40>>2],N=o[I+44>>2],Y=o[I+4>>2],b=o[I+48>>2],R=o[I+8>>2],L=o[I+52>>2],m=o[I+12>>2],x=o[I+56>>2],P=o[I+16>>2],K=o[I+60>>2],z=o[I+20>>2],X=o[I- -64>>2],j=o[I+24>>2],d=o[I+68>>2],q=o[I+28>>2],V=o[I+72>>2],Z=o[I+32>>2],BA=o[I>>2],o[A+76>>2]=o[I+76>>2]+o[I+36>>2],o[A+72>>2]=V+Z,o[A+68>>2]=d+q,o[(IA=A- -64|0)>>2]=j+X,o[A+60>>2]=K+z,o[A+56>>2]=P+x,o[A+52>>2]=m+L,o[A+48>>2]=b+R,o[A+44>>2]=N+Y,o[(I=A+40|0)>>2]=J+BA,S(g,I),J=o[A+80>>2],N=o[A+4>>2],Y=o[A+84>>2],b=o[A+8>>2],R=o[A+88>>2],L=o[A+12>>2],m=o[A+92>>2],x=o[A+16>>2],P=o[A+96>>2],K=o[A+20>>2],z=o[A+100>>2],X=o[A+24>>2],j=o[A+104>>2],d=o[A+28>>2],q=o[A+108>>2],V=o[A+32>>2],Z=o[A+112>>2],BA=o[A>>2],_=(W=o[A+116>>2])-($=o[A+36>>2])|0,o[A+116>>2]=_,O=Z-V|0,o[A+112>>2]=O,gA=q-d|0,o[A+108>>2]=gA,v=j-X|0,o[A+104>>2]=v,iA=z-K|0,o[A+100>>2]=iA,EA=P-x|0,o[A+96>>2]=EA,oA=m-L|0,o[A+92>>2]=oA,aA=R-b|0,o[A+88>>2]=aA,T=Y-N|0,o[A+84>>2]=T,nA=J-BA|0,o[A+80>>2]=nA,W=W+$|0,o[A+76>>2]=W,V=V+Z|0,o[A+72>>2]=V,d=d+q|0,o[A+68>>2]=d,X=j+X|0,o[IA>>2]=X,K=K+z|0,o[A+60>>2]=K,x=P+x|0,o[A+56>>2]=x,L=m+L|0,o[A+52>>2]=L,b=b+R|0,o[A+48>>2]=b,N=N+Y|0,o[A+44>>2]=N,Y=I,I=J+BA|0,o[Y>>2]=I,J=o[g>>2],Y=o[g+4>>2],R=o[g+8>>2],m=o[g+12>>2],P=o[g+16>>2],z=o[g+20>>2],j=o[g+24>>2],q=o[g+28>>2],Z=o[g+32>>2],o[A+36>>2]=o[g+36>>2]-W,o[A+32>>2]=Z-V,o[A+28>>2]=q-d,o[A+24>>2]=j-X,o[A+20>>2]=z-K,o[A+16>>2]=P-x,o[A+12>>2]=m-L,o[A+8>>2]=R-b,o[A+4>>2]=Y-N,o[A>>2]=J-I,I=o[A+120>>2],J=o[A+124>>2],N=o[A+128>>2],Y=o[A+132>>2],b=o[A+136>>2],R=o[A+140>>2],L=o[A+144>>2],m=o[A+148>>2],x=o[A+152>>2],o[A+156>>2]=o[A+156>>2]-_,o[A+152>>2]=x-O,o[A+148>>2]=m-gA,o[A+144>>2]=L-v,o[A+140>>2]=R-iA,o[A+136>>2]=b-EA,o[A+132>>2]=Y-oA,o[A+128>>2]=N-aA,o[A+124>>2]=J-T,o[A+120>>2]=I-nA,D=g+48|0;}function S(A,I){var g,C,B,Q,i,E,a,n,f,t,e,c,y,D,h,s,p,u,k,F,l,S,H,M,G,U,J,N,Y,b,_,K,P,v=0,m=0,d=0,L=0,R=0,x=0,j=0,X=0,q=0,z=0,V=0,O=0,T=0,W=0,Z=0,$=0,AA=0,IA=0,gA=0,CA=0,BA=0,QA=0;v=DA(C=(s=o[I+12>>2])<<1,E=C>>31,s,l=s>>31),d=w,m=(q=DA(R=o[I+16>>2],a=R>>31,n=(L=o[I+8>>2])<<1,c=n>>31))+v|0,v=w+d|0,v=m>>>0<q>>>0?v+1|0:v,d=(z=DA(T=(f=o[I+20>>2])<<1,y=T>>31,q=(x=o[I+4>>2])<<1,B=q>>31))+m|0,m=w+v|0,m=d>>>0<z>>>0?m+1|0:m,j=DA(g=o[I+24>>2],t=g>>31,z=($=o[I>>2])<<1,Q=z>>31),v=w+m|0,v=(d=j+d|0)>>>0<j>>>0?v+1|0:v,m=d,D=o[I+32>>2],d=DA(V=r(D,19),e=V>>31,D,u=D>>31),v=w+v|0,v=(m=m+d|0)>>>0<d>>>0?v+1|0:v,U=o[I+36>>2],d=DA(j=r(U,38),i=j>>31,k=(h=o[I+28>>2])<<1,S=k>>31),I=w+v|0,Z=m=d+m|0,d=m>>>0<d>>>0?I+1|0:I,I=DA(q,B,R,a),v=w,m=DA(n,c,s,l),v=w+v|0,v=(I=m+I|0)>>>0<m>>>0?v+1|0:v,X=DA(f,F=f>>31,z,Q),m=w+v|0,m=(I=X+I|0)>>>0<X>>>0?m+1|0:m,X=DA(V,e,k,S),v=w+m|0,v=(I=X+I|0)>>>0<X>>>0?v+1|0:v,m=DA(j,i,g,t),v=w+v|0,BA=I=m+I|0,O=I>>>0<m>>>0?v+1|0:v,v=DA(q,B,C,E),m=w,H=I=L,L=DA(I,W=I>>31,I,W),I=w+m|0,I=(v=L+v|0)>>>0<L>>>0?I+1|0:I,m=(L=DA(z,Q,R,a))+v|0,v=w+I|0,v=m>>>0<L>>>0?v+1|0:v,I=(L=DA(X=r(h,38),p=X>>31,h,M=h>>31))+m|0,m=w+v|0,m=I>>>0<L>>>0?m+1|0:m,I=(v=I)+(L=DA(V,e,I=g<<1,I>>31))|0,v=w+m|0,v=I>>>0<L>>>0?v+1|0:v,m=I,I=DA(j,i,T,y),v=w+v|0,J=m=m+I|0,N=v=I>>>0>m>>>0?v+1|0:v,I=v,Y=m=m+33554432|0,b=I=m>>>0<33554432?I+1|0:I,v=(v=I>>26)+O|0,BA=I=(m=(67108863&I)<<6|m>>>26)+BA|0,v=I>>>0<m>>>0?v+1|0:v,_=I=I+16777216|0,v=(v=(m=I>>>0<16777216?v+1|0:v)>>25)+d|0,I=(I=(33554431&m)<<7|I>>>25)>>>0>(m=I+Z|0)>>>0?v+1|0:v,Z=v=m+33554432|0,L=I=v>>>0<33554432?I+1|0:I,o[A+24>>2]=m-(-67108864&v),I=DA(z,Q,H,W),v=w,d=DA(q,B,x,CA=x>>31),m=w+v|0,m=(I=d+I|0)>>>0<d>>>0?m+1|0:m,O=DA(d=r(g,19),gA=d>>31,g,t),v=w+m|0,v=(I=O+I|0)>>>0<O>>>0?v+1|0:v,m=(O=DA(T,y,X,p))+I|0,I=w+v|0,I=m>>>0<O>>>0?I+1|0:I,AA=DA(V,e,O=R<<1,G=O>>31),v=w+I|0,v=(m=AA+m|0)>>>0<AA>>>0?v+1|0:v,I=m,m=DA(j,i,C,E),v=w+v|0,IA=I=I+m|0,AA=I>>>0<m>>>0?v+1|0:v,I=DA(T,y,d,gA),v=w,x=DA(z,Q,x,CA),m=w+v|0,m=(I=x+I|0)>>>0<x>>>0?m+1|0:m,x=DA(R,a,X,p),v=w+m|0,v=(I=x+I|0)>>>0<x>>>0?v+1|0:v,m=(x=DA(V,e,C,E))+I|0,I=w+v|0,I=m>>>0<x>>>0?I+1|0:I,x=DA(j,i,H,W),v=w+I|0,QA=m=x+m|0,CA=m>>>0<x>>>0?v+1|0:v,m=DA(I=r(f,38),I>>31,f,F),x=w,I=$,$=m,m=DA(I,v=I>>31,I,v),v=w+x|0,v=(I=$+m|0)>>>0<m>>>0?v+1|0:v,d=DA(d,gA,O,G),m=w+v|0,m=(I=d+I|0)>>>0<d>>>0?m+1|0:m,d=DA(C,E,X,p),v=w+m|0,v=(I=d+I|0)>>>0<d>>>0?v+1|0:v,m=(d=DA(V,e,n,c))+I|0,I=w+v|0,I=m>>>0<d>>>0?I+1|0:I,d=DA(q,B,j,i),v=w+I|0,x=m=d+m|0,gA=v=m>>>0<d>>>0?v+1|0:v,K=m=m+33554432|0,P=v=m>>>0<33554432?v+1|0:v,I=v>>26,v=(67108863&v)<<6|m>>>26,m=I+CA|0,$=d=v+QA|0,v=m=v>>>0>d>>>0?m+1|0:m,QA=m=d+16777216|0,d=(33554431&(v=m>>>0<16777216?v+1|0:v))<<7|m>>>25,v=(v>>25)+AA|0,v=(m=d+IA|0)>>>0<d>>>0?v+1|0:v,AA=I=m+33554432|0,d=v=I>>>0<33554432?v+1|0:v,o[A+8>>2]=m-(-67108864&I),I=DA(n,c,f,F),v=w,m=DA(R,a,C,E),v=w+v|0,v=(I=m+I|0)>>>0<m>>>0?v+1|0:v,m=DA(q,B,g,t),v=w+v|0,v=(I=m+I|0)>>>0<m>>>0?v+1|0:v,m=DA(z,Q,h,M),v=w+v|0,v=(I=m+I|0)>>>0<m>>>0?v+1|0:v,IA=(m=DA(j,i,D,u))+I|0,I=w+v|0,m=(v=L>>26)+(m=m>>>0>IA>>>0?I+1|0:I)|0,Z=I=(L=(67108863&L)<<6|Z>>>26)+IA|0,v=I>>>0<L>>>0?m+1|0:m,IA=I=I+16777216|0,L=v=I>>>0<16777216?v+1|0:v,o[A+28>>2]=Z-(-33554432&I),I=DA(z,Q,s,l),m=w,v=(W=DA(q,B,H,W))+I|0,I=w+m|0,I=v>>>0<W>>>0?I+1|0:I,v=(X=DA(g,t,X,p))+v|0,m=w+I|0,I=(V=DA(V,e,T,y))+v|0,v=w+(v>>>0<X>>>0?m+1|0:m)|0,v=I>>>0<V>>>0?v+1|0:v,m=DA(j,i,R,a),v=w+v|0,v=(v=(I=m+I|0)>>>0<m>>>0?v+1|0:v)+(m=d>>26)|0,I=(m=d=(Z=I)+(I=(67108863&d)<<6|AA>>>26)|0)>>>0<I>>>0?v+1|0:v,V=v=m+16777216|0,d=I=v>>>0<16777216?I+1|0:I,o[A+12>>2]=m-(-33554432&v),I=DA(g,t,n,c),v=w,m=DA(R,a,R,a),v=w+v|0,v=(I=m+I|0)>>>0<m>>>0?v+1|0:v,m=DA(C,E,T,y),v=w+v|0,v=(I=m+I|0)>>>0<m>>>0?v+1|0:v,m=(R=DA(q,B,k,S))+I|0,I=w+v|0,I=m>>>0<R>>>0?I+1|0:I,v=(R=DA(z,Q,D,u))+m|0,m=w+I|0,m=v>>>0<R>>>0?m+1|0:m,I=(R=DA(I=j,i,j=U,T=j>>31))+v|0,v=w+m|0,v=I>>>0<R>>>0?v+1|0:v,m=I,v=(I=L>>25)+v|0,v=(m=m+(L=(33554431&L)<<7|IA>>>25)|0)>>>0<L>>>0?v+1|0:v,R=I=m+33554432|0,L=v=I>>>0<33554432?v+1|0:v,o[A+32>>2]=m-(-67108864&I),v=d>>25,m=(d=(33554431&d)<<7|V>>>25)+(J-(I=-67108864&Y)|0)|0,I=v+(N-((I>>>0>J>>>0)+b|0)|0)|0,v=m>>>0<d>>>0?I+1|0:I,d=v=(67108863&(v=(I=m+33554432|0)>>>0<33554432?v+1|0:v))<<6|I>>>26,v=v+(X=BA-(-33554432&_)|0)|0,o[A+20>>2]=v,o[A+16>>2]=m-(-67108864&I),I=DA(C,E,g,t),m=w,v=(d=DA(f,F,O,G))+I|0,I=w+m|0,I=v>>>0<d>>>0?I+1|0:I,m=(d=DA(n,c,h,M))+v|0,v=w+I|0,v=m>>>0<d>>>0?v+1|0:v,I=(d=DA(q,B,D,u))+m|0,m=w+v|0,m=I>>>0<d>>>0?m+1|0:m,d=(v=I)+(I=DA(z,Q,j,T))|0,v=w+m|0,v=(I=I>>>0>d>>>0?v+1|0:v)+(v=L>>26)|0,I=(m=(L=(67108863&L)<<6|R>>>26)+d|0)>>>0<L>>>0?v+1|0:v,I=(v=m+16777216|0)>>>0<16777216?I+1|0:I,o[A+36>>2]=m-(-33554432&v),L=$-(-33554432&QA)|0,d=x-(m=-67108864&K)|0,q=gA-((m>>>0>x>>>0)+P|0)|0,I=DA((33554431&I)<<7|v>>>25,I>>25,19,0),v=w+q|0,I=I>>>0>(m=I+d|0)>>>0?v+1|0:v,d=I=(67108863&(I=(v=m+33554432|0)>>>0<33554432?I+1|0:I))<<6|v>>>26,I=I+L|0,o[A+4>>2]=I,o[A>>2]=m-(-67108864&v);}function H(A,I,g,C,B){var Q,i,n,r,f,t,e,c,y,w,h,s,p,u,k,F=0,l=0,S=0,H=0,M=0,G=0,U=0,J=0,N=0,Y=0,b=0,_=0,K=0,P=0,v=0,m=0,d=0,L=0,R=0,x=0,j=0,X=0,q=0,z=0,V=0,O=0,T=0,W=0,Z=0,$=0,AA=0,IA=0,gA=0,CA=0;for(Q=D+-64|0,i=o[A+60>>2],n=o[A+56>>2],x=o[A+52>>2],R=o[A+48>>2],r=o[A+44>>2],f=o[A+40>>2],t=o[A+36>>2],e=o[A+32>>2],c=o[A+28>>2],y=o[A+24>>2],w=o[A+20>>2],h=o[A+16>>2],s=o[A+12>>2],p=o[A+8>>2],u=o[A+4>>2],k=o[A>>2];;){if(!B&C>>>0>63|B)F=g;else {if(o[Q+56>>2]=0,o[Q+60>>2]=0,o[Q+48>>2]=0,o[Q+52>>2]=0,o[Q+40>>2]=0,o[Q+44>>2]=0,o[Q+32>>2]=0,o[Q+36>>2]=0,o[Q+24>>2]=0,o[Q+28>>2]=0,o[Q+16>>2]=0,o[Q+20>>2]=0,o[Q+8>>2]=0,o[Q+12>>2]=0,o[Q>>2]=0,o[Q+4>>2]=0,S=0,C|B)for(;E[S+Q|0]=a[I+S|0],!B&(S=S+1|0)>>>0<C>>>0|B;);I=F=Q,V=g;}for(j=20,l=k,Y=u,b=p,P=s,S=h,g=w,M=y,G=c,U=e,m=t,_=f,H=i,d=n,v=x,K=R,J=r;N=S,l=YA((S=l+S|0)^K,16),N=K=YA(N^(U=l+U|0),12),K=YA((L=S+K|0)^l,8),S=YA(N^(U=K+U|0),7),H=YA((l=G+P|0)^H,16),G=YA((J=H+J|0)^G,12),P=YA((b=M+b|0)^d,16),M=YA((_=P+_|0)^M,12),d=(X=l+G|0)+S|0,q=YA((b=M+b|0)^P,8),l=YA(d^q,16),P=YA((Y=g+Y|0)^v,16),g=YA((m=P+m|0)^g,12),N=S,v=YA((Y=g+Y|0)^P,8),N=YA(N^(S=(z=v+m|0)+l|0),12),d=YA(l^(P=N+d|0),8),S=YA((m=d+S|0)^N,7),N=U,U=b,l=YA(H^X,8),b=YA((H=l+J|0)^G,7),v=YA((U=U+b|0)^v,16),J=YA((G=N+v|0)^b,12),v=YA(v^(b=J+U|0),8),G=YA((U=G+v|0)^J,7),J=H,H=Y,Y=YA((_=_+q|0)^M,7),M=J+(K=YA((H=H+Y|0)^K,16))|0,J=H,H=YA(M^Y,12),K=YA(K^(Y=J+H|0),8),M=YA((J=M+K|0)^H,7),N=_,H=l,l=YA(g^z,7),H=YA(H^(_=l+L|0),16),L=YA((g=N+H|0)^l,12),H=YA(H^(l=L+_|0),8),g=YA((_=g+H|0)^L,7),j=j-2|0;);if(j=a[I+4|0]|a[I+5|0]<<8|a[I+6|0]<<16|a[I+7|0]<<24,L=a[I+8|0]|a[I+9|0]<<8|a[I+10|0]<<16|a[I+11|0]<<24,X=a[I+12|0]|a[I+13|0]<<8|a[I+14|0]<<16|a[I+15|0]<<24,q=a[I+16|0]|a[I+17|0]<<8|a[I+18|0]<<16|a[I+19|0]<<24,z=a[I+20|0]|a[I+21|0]<<8|a[I+22|0]<<16|a[I+23|0]<<24,N=a[I+24|0]|a[I+25|0]<<8|a[I+26|0]<<16|a[I+27|0]<<24,O=a[I+28|0]|a[I+29|0]<<8|a[I+30|0]<<16|a[I+31|0]<<24,T=a[I+32|0]|a[I+33|0]<<8|a[I+34|0]<<16|a[I+35|0]<<24,W=a[I+36|0]|a[I+37|0]<<8|a[I+38|0]<<16|a[I+39|0]<<24,Z=a[I+40|0]|a[I+41|0]<<8|a[I+42|0]<<16|a[I+43|0]<<24,$=a[I+44|0]|a[I+45|0]<<8|a[I+46|0]<<16|a[I+47|0]<<24,AA=a[I+48|0]|a[I+49|0]<<8|a[I+50|0]<<16|a[I+51|0]<<24,IA=a[I+52|0]|a[I+53|0]<<8|a[I+54|0]<<16|a[I+55|0]<<24,gA=a[I+56|0]|a[I+57|0]<<8|a[I+58|0]<<16|a[I+59|0]<<24,CA=a[I+60|0]|a[I+61|0]<<8|a[I+62|0]<<16|a[I+63|0]<<24,l=l+k^(a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24),E[0|F]=l,E[F+1|0]=l>>>8,E[F+2|0]=l>>>16,E[F+3|0]=l>>>24,l=H+i^CA,E[F+60|0]=l,E[F+61|0]=l>>>8,E[F+62|0]=l>>>16,E[F+63|0]=l>>>24,l=d+n^gA,E[F+56|0]=l,E[F+57|0]=l>>>8,E[F+58|0]=l>>>16,E[F+59|0]=l>>>24,l=v+x^IA,E[F+52|0]=l,E[F+53|0]=l>>>8,E[F+54|0]=l>>>16,E[F+55|0]=l>>>24,l=K+R^AA,E[F+48|0]=l,E[F+49|0]=l>>>8,E[F+50|0]=l>>>16,E[F+51|0]=l>>>24,l=J+r^$,E[F+44|0]=l,E[F+45|0]=l>>>8,E[F+46|0]=l>>>16,E[F+47|0]=l>>>24,l=_+f^Z,E[F+40|0]=l,E[F+41|0]=l>>>8,E[F+42|0]=l>>>16,E[F+43|0]=l>>>24,l=m+t^W,E[F+36|0]=l,E[F+37|0]=l>>>8,E[F+38|0]=l>>>16,E[F+39|0]=l>>>24,l=U+e^T,E[F+32|0]=l,E[F+33|0]=l>>>8,E[F+34|0]=l>>>16,E[F+35|0]=l>>>24,G=G+c^O,E[F+28|0]=G,E[F+29|0]=G>>>8,E[F+30|0]=G>>>16,E[F+31|0]=G>>>24,M=N^M+y,E[F+24|0]=M,E[F+25|0]=M>>>8,E[F+26|0]=M>>>16,E[F+27|0]=M>>>24,g=z^g+w,E[F+20|0]=g,E[F+21|0]=g>>>8,E[F+22|0]=g>>>16,E[F+23|0]=g>>>24,g=q^S+h,E[F+16|0]=g,E[F+17|0]=g>>>8,E[F+18|0]=g>>>16,E[F+19|0]=g>>>24,g=X^P+s,E[F+12|0]=g,E[F+13|0]=g>>>8,E[F+14|0]=g>>>16,E[F+15|0]=g>>>24,g=L^b+p,E[F+8|0]=g,E[F+9|0]=g>>>8,E[F+10|0]=g>>>16,E[F+11|0]=g>>>24,g=j^Y+u,E[F+4|0]=g,E[F+5|0]=g>>>8,E[F+6|0]=g>>>16,E[F+7|0]=g>>>24,x=!(R=R+1|0)+x|0,!B&C>>>0<=64){if(!(!C|!B&C>>>0>63|0!=(0|B)))for(S=0;E[S+V|0]=a[F+S|0],C>>>0>(S=S+1|0)>>>0;);o[A+52>>2]=x,o[A+48>>2]=R;break}I=I- -64|0,g=F- -64|0,B=B-1|0,B=(C=C+-64|0)>>>0<4294967232?B+1|0:B;}}function M(A,I){var g,C=0,B=0,Q=0,i=0,a=0,n=0,r=0;D=g=D-704|0,C=80+((B=o[A+72>>2]>>>3&127)+A|0)|0,B>>>0<=111?HA(C,34640,112-B|0):(HA(C,34640,128-B|0),p(A,B=A+80|0,g,g+640|0),MA(B,0,112)),n=(Q=o[A+64>>2])<<24|(65280&Q)<<8,B=(i=16711680&Q)>>>8|0,r=i<<24,i=(a=-16777216&Q)>>>24|0,C=r|a<<8|-16777216&((255&(C=o[A+68>>2]))<<24|Q>>>8)|16711680&((16777215&C)<<8|Q>>>24)|C>>>8&65280|C>>>24,E[A+192|0]=C,E[A+193|0]=C>>>8,E[A+194|0]=C>>>16,E[A+195|0]=C>>>24,B=(C=B|i|n)|(B=0)|B|0,E[A+196|0]=B,E[A+197|0]=B>>>8,E[A+198|0]=B>>>16,E[A+199|0]=B>>>24,n=(Q=o[A+72>>2])<<24|(65280&Q)<<8,B=(i=16711680&Q)>>>8|0,r=i<<24,i=(a=-16777216&Q)>>>24|0,C=r|a<<8|-16777216&((255&(C=o[A+76>>2]))<<24|Q>>>8)|16711680&((16777215&C)<<8|Q>>>24)|C>>>8&65280|C>>>24,E[A+200|0]=C,E[A+201|0]=C>>>8,E[A+202|0]=C>>>16,E[A+203|0]=C>>>24,B=(C=B|i|n)|(B=0)|B|0,E[A+204|0]=B,E[A+205|0]=B>>>8,E[A+206|0]=B>>>16,E[A+207|0]=B>>>24,p(A,A+80|0,g,g+640|0),n=(Q=o[A>>2])<<24|(65280&Q)<<8,B=(i=16711680&Q)>>>8|0,r=i<<24,i=(a=-16777216&Q)>>>24|0,C=r|a<<8|-16777216&((255&(C=o[A+4>>2]))<<24|Q>>>8)|16711680&((16777215&C)<<8|Q>>>24)|C>>>8&65280|C>>>24,E[0|I]=C,E[I+1|0]=C>>>8,E[I+2|0]=C>>>16,E[I+3|0]=C>>>24,B=(C=B|i|n)|(B=0)|B|0,E[I+4|0]=B,E[I+5|0]=B>>>8,E[I+6|0]=B>>>16,E[I+7|0]=B>>>24,n=(Q=o[A+8>>2])<<24|(65280&Q)<<8,B=(i=16711680&Q)>>>8|0,r=i<<24,i=(a=-16777216&Q)>>>24|0,C=r|a<<8|-16777216&((255&(C=o[A+12>>2]))<<24|Q>>>8)|16711680&((16777215&C)<<8|Q>>>24)|C>>>8&65280|C>>>24,E[I+8|0]=C,E[I+9|0]=C>>>8,E[I+10|0]=C>>>16,E[I+11|0]=C>>>24,B=(C=B|i|n)|(B=0)|B|0,E[I+12|0]=B,E[I+13|0]=B>>>8,E[I+14|0]=B>>>16,E[I+15|0]=B>>>24,n=(Q=o[A+16>>2])<<24|(65280&Q)<<8,B=(i=16711680&Q)>>>8|0,r=i<<24,i=(a=-16777216&Q)>>>24|0,C=r|a<<8|-16777216&((255&(C=o[A+20>>2]))<<24|Q>>>8)|16711680&((16777215&C)<<8|Q>>>24)|C>>>8&65280|C>>>24,E[I+16|0]=C,E[I+17|0]=C>>>8,E[I+18|0]=C>>>16,E[I+19|0]=C>>>24,B=(C=B|i|n)|(B=0)|B|0,E[I+20|0]=B,E[I+21|0]=B>>>8,E[I+22|0]=B>>>16,E[I+23|0]=B>>>24,n=(Q=o[A+24>>2])<<24|(65280&Q)<<8,B=(i=16711680&Q)>>>8|0,r=i<<24,i=(a=-16777216&Q)>>>24|0,C=r|a<<8|-16777216&((255&(C=o[A+28>>2]))<<24|Q>>>8)|16711680&((16777215&C)<<8|Q>>>24)|C>>>8&65280|C>>>24,E[I+24|0]=C,E[I+25|0]=C>>>8,E[I+26|0]=C>>>16,E[I+27|0]=C>>>24,B=(C=B|i|n)|(B=0)|B|0,E[I+28|0]=B,E[I+29|0]=B>>>8,E[I+30|0]=B>>>16,E[I+31|0]=B>>>24,n=(Q=o[A+32>>2])<<24|(65280&Q)<<8,B=(i=16711680&Q)>>>8|0,r=i<<24,i=(a=-16777216&Q)>>>24|0,C=r|a<<8|-16777216&((255&(C=o[A+36>>2]))<<24|Q>>>8)|16711680&((16777215&C)<<8|Q>>>24)|C>>>8&65280|C>>>24,E[I+32|0]=C,E[I+33|0]=C>>>8,E[I+34|0]=C>>>16,E[I+35|0]=C>>>24,B=(C=B|i|n)|(B=0)|B|0,E[I+36|0]=B,E[I+37|0]=B>>>8,E[I+38|0]=B>>>16,E[I+39|0]=B>>>24,n=(Q=o[A+40>>2])<<24|(65280&Q)<<8,B=(i=16711680&Q)>>>8|0,r=i<<24,i=(a=-16777216&Q)>>>24|0,C=r|a<<8|-16777216&((255&(C=o[A+44>>2]))<<24|Q>>>8)|16711680&((16777215&C)<<8|Q>>>24)|C>>>8&65280|C>>>24,E[I+40|0]=C,E[I+41|0]=C>>>8,E[I+42|0]=C>>>16,E[I+43|0]=C>>>24,B=(C=B|i|n)|(B=0)|B|0,E[I+44|0]=B,E[I+45|0]=B>>>8,E[I+46|0]=B>>>16,E[I+47|0]=B>>>24,n=(Q=o[A+48>>2])<<24|(65280&Q)<<8,B=(i=16711680&Q)>>>8|0,r=i<<24,i=(a=-16777216&Q)>>>24|0,C=r|a<<8|-16777216&((255&(C=o[A+52>>2]))<<24|Q>>>8)|16711680&((16777215&C)<<8|Q>>>24)|C>>>8&65280|C>>>24,E[I+48|0]=C,E[I+49|0]=C>>>8,E[I+50|0]=C>>>16,E[I+51|0]=C>>>24,B=(C=B|i|n)|(B=0)|B|0,E[I+52|0]=B,E[I+53|0]=B>>>8,E[I+54|0]=B>>>16,E[I+55|0]=B>>>24,n=(Q=o[A+56>>2])<<24|(65280&Q)<<8,B=(i=16711680&Q)>>>8|0,C=I,r=i<<24,i=(a=-16777216&Q)>>>24|0,I=r|a<<8|-16777216&((255&(I=o[A+60>>2]))<<24|Q>>>8)|16711680&((16777215&I)<<8|Q>>>24)|I>>>8&65280|I>>>24,E[C+56|0]=I,E[C+57|0]=I>>>8,E[C+58|0]=I>>>16,E[C+59|0]=I>>>24,I=(I=B|i|n)|(B=0)|B|0,E[C+60|0]=I,E[C+61|0]=I>>>8,E[C+62|0]=I>>>16,E[C+63|0]=I>>>24,$A(g,704),$A(A,208),D=g+704|0;}function G(A,I,g){var C,B=0,i=0,n=0,r=0,f=0,t=0;D=C=D+-64|0;A:{if((g-65&255)>>>0>191){if(B=-1,!(a[A+80|0]|a[A+81|0]<<8|a[A+82|0]<<16|a[A+83|0]<<24|a[A+84|0]|a[A+85|0]<<8|a[A+86|0]<<16|a[A+87|0]<<24)){if((r=a[A+352|0]|a[A+353|0]<<8|a[A+354|0]<<16|a[A+355|0]<<24)>>>0>=129){if(n=a[0|(B=A- -64|0)]|a[B+1|0]<<8|a[B+2|0]<<16|a[B+3|0]<<24,f=i=a[B+4|0]|a[B+5|0]<<8|a[B+6|0]<<16|a[B+7|0]<<24,i=(r=n+128|0)>>>0<128?i+1|0:i,E[0|B]=r,E[B+1|0]=r>>>8,E[B+2|0]=r>>>16,E[B+3|0]=r>>>24,E[B+4|0]=i,E[B+5|0]=i>>>8,E[B+6|0]=i>>>16,E[B+7|0]=i>>>24,i=a[A+76|0]|a[A+77|0]<<8|a[A+78|0]<<16|a[A+79|0]<<24,i=(B=-1==(0|f)&n>>>0>4294967167)>>>0>(n=B+(a[A+72|0]|a[A+73|0]<<8|a[A+74|0]<<16|a[A+75|0]<<24)|0)>>>0?i+1|0:i,E[A+72|0]=n,E[A+73|0]=n>>>8,E[A+74|0]=n>>>16,E[A+75|0]=n>>>24,E[A+76|0]=i,E[A+77|0]=i>>>8,E[A+78|0]=i>>>16,E[A+79|0]=i>>>24,h(A,i=A+96|0),B=(a[A+352|0]|a[A+353|0]<<8|a[A+354|0]<<16|a[A+355|0]<<24)-128|0,E[A+352|0]=B,E[A+353|0]=B>>>8,E[A+354|0]=B>>>16,E[A+355|0]=B>>>24,B>>>0>=129)break A;HA(i,A+224|0,B),r=a[A+352|0]|a[A+353|0]<<8|a[A+354|0]<<16|a[A+355|0]<<24;}i=a[0|(B=A- -64|0)]|a[B+1|0]<<8|a[B+2|0]<<16|a[B+3|0]<<24,n=t=a[B+4|0]|a[B+5|0]<<8|a[B+6|0]<<16|a[B+7|0]<<24,n=(f=i+r|0)>>>0<r>>>0?n+1|0:n,E[0|B]=f,E[B+1|0]=f>>>8,E[B+2|0]=f>>>16,E[B+3|0]=f>>>24,E[B+4|0]=n,E[B+5|0]=n>>>8,E[B+6|0]=n>>>16,E[B+7|0]=n>>>24,B=(0|n)==(0|t)&i>>>0>f>>>0|n>>>0<t>>>0,i=a[A+76|0]|a[A+77|0]<<8|a[A+78|0]<<16|a[A+79|0]<<24,i=(n=B+(a[A+72|0]|a[A+73|0]<<8|a[A+74|0]<<16|a[A+75|0]<<24)|0)>>>0<B>>>0?i+1|0:i,E[A+72|0]=n,E[A+73|0]=n>>>8,E[A+74|0]=n>>>16,E[A+75|0]=n>>>24,E[A+76|0]=i,E[A+77|0]=i>>>8,E[A+78|0]=i>>>16,E[A+79|0]=i>>>24,a[A+356|0]&&(E[A+88|0]=255,E[A+89|0]=255,E[A+90|0]=255,E[A+91|0]=255,E[A+92|0]=255,E[A+93|0]=255,E[A+94|0]=255,E[A+95|0]=255),E[A+80|0]=255,E[A+81|0]=255,E[A+82|0]=255,E[A+83|0]=255,E[A+84|0]=255,E[A+85|0]=255,E[A+86|0]=255,E[A+87|0]=255,MA((B=A+96|0)+r|0,0,256-r|0),h(A,B),i=a[A+4|0]|a[A+5|0]<<8|a[A+6|0]<<16|a[A+7|0]<<24,o[C>>2]=a[0|A]|a[A+1|0]<<8|a[A+2|0]<<16|a[A+3|0]<<24,o[C+4>>2]=i,i=a[A+12|0]|a[A+13|0]<<8|a[A+14|0]<<16|a[A+15|0]<<24,o[C+8>>2]=a[A+8|0]|a[A+9|0]<<8|a[A+10|0]<<16|a[A+11|0]<<24,o[C+12>>2]=i,i=a[A+20|0]|a[A+21|0]<<8|a[A+22|0]<<16|a[A+23|0]<<24,o[C+16>>2]=a[A+16|0]|a[A+17|0]<<8|a[A+18|0]<<16|a[A+19|0]<<24,o[C+20>>2]=i,i=a[A+28|0]|a[A+29|0]<<8|a[A+30|0]<<16|a[A+31|0]<<24,o[C+24>>2]=a[A+24|0]|a[A+25|0]<<8|a[A+26|0]<<16|a[A+27|0]<<24,o[C+28>>2]=i,i=a[A+36|0]|a[A+37|0]<<8|a[A+38|0]<<16|a[A+39|0]<<24,o[C+32>>2]=a[A+32|0]|a[A+33|0]<<8|a[A+34|0]<<16|a[A+35|0]<<24,o[C+36>>2]=i,i=a[A+44|0]|a[A+45|0]<<8|a[A+46|0]<<16|a[A+47|0]<<24,o[C+40>>2]=a[A+40|0]|a[A+41|0]<<8|a[A+42|0]<<16|a[A+43|0]<<24,o[C+44>>2]=i,i=a[A+52|0]|a[A+53|0]<<8|a[A+54|0]<<16|a[A+55|0]<<24,o[C+48>>2]=a[A+48|0]|a[A+49|0]<<8|a[A+50|0]<<16|a[A+51|0]<<24,o[C+52>>2]=i,i=a[A+60|0]|a[A+61|0]<<8|a[A+62|0]<<16|a[A+63|0]<<24,o[C+56>>2]=a[A+56|0]|a[A+57|0]<<8|a[A+58|0]<<16|a[A+59|0]<<24,o[C+60>>2]=i,HA(I,C,g),$A(A,64),$A(B,256),B=0;}return D=C- -64|0,B}mA(),Q();}e(1280,1142,306,1086),Q();}function U(A,I){var g,C,B,Q,i,n,r,f,t,e,c,y,w,h,s,p,u=0,k=0,l=0,H=0,M=0,G=0,U=0;for(D=g=D-320|0,P(C=A+40|0,I),o[A+84>>2]=0,o[A+88>>2]=0,o[A+80>>2]=1,o[A+92>>2]=0,o[A+96>>2]=0,o[A+100>>2]=0,o[A+104>>2]=0,o[A+108>>2]=0,o[A+112>>2]=0,o[A+116>>2]=0,S(G=g+240|0,C),F(H=g+192|0,G,1344),U=-1,B=o[g+240>>2]-1|0,o[g+240>>2]=B,o[g+192>>2]=o[g+192>>2]+1,Q=o[g+244>>2],i=o[g+248>>2],n=o[g+252>>2],r=o[g+256>>2],f=o[g+260>>2],t=o[g+264>>2],e=o[g+268>>2],c=o[g+272>>2],y=o[g+276>>2],S(M=g+144|0,H),F(M,M,H),S(A,M),F(A,A,H),F(A,A,G),D=k=D-144|0,S(l=k+96|0,A),S(u=k+48|0,l),S(u,u),F(u,A,u),F(l,l,u),S(l,l),F(l,u,l),S(u,l),S(u,u),S(u,u),S(u,u),S(u,u),F(l,u,l),S(u,l),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),F(u,u,l),S(k,u),S(k,k),S(k,k),S(k,k),S(k,k),S(k,k),S(k,k),S(k,k),S(k,k),S(k,k),S(k,k),S(k,k),S(k,k),S(k,k),S(k,k),S(k,k),S(k,k),S(k,k),S(k,k),S(k,k),F(u,k,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),F(l,u,l),S(u,l),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),F(u,u,l),S(k,u),u=1;S(k,k),100!=(0|(u=u+1|0)););F(u=k+48|0,k,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),S(u,u),F(l=k+96|0,u,l),S(l,l),S(l,l),F(A,l,A),D=k+144|0,F(A,A,M),F(A,A,G),S(u=g+96|0,A),F(u,u,H),u=o[g+132>>2],o[g+84>>2]=u-y,k=o[g+128>>2],o[g+80>>2]=k-c,l=o[g+124>>2],o[g+76>>2]=l-e,H=o[g+120>>2],o[g+72>>2]=H-t,M=o[g+116>>2],o[g+68>>2]=M-f,G=o[g+112>>2],o[g+64>>2]=G-r,w=o[g+108>>2],o[g+60>>2]=w-n,h=o[g+104>>2],o[g+56>>2]=h-i,s=o[g+100>>2],o[g+52>>2]=s-Q,p=o[g+96>>2],o[g+48>>2]=p-B,W(g,g+48|0);A:{if(!iA(g,32)){if(o[g+36>>2]=u+y,o[g+32>>2]=k+c,o[g+28>>2]=l+e,o[g+24>>2]=H+t,o[g+20>>2]=M+f,o[g+16>>2]=G+r,o[g+12>>2]=n+w,o[g+8>>2]=i+h,o[g+4>>2]=Q+s,o[g>>2]=B+p,W(u=g+288|0,g),!iA(u,32))break A;F(A,A,1392);}W(g+288|0,A),(1&E[g+288|0])==(a[I+31|0]>>>7|0)&&(o[A>>2]=0-o[A>>2],o[A+36>>2]=0-o[A+36>>2],o[A+32>>2]=0-o[A+32>>2],o[A+28>>2]=0-o[A+28>>2],o[A+24>>2]=0-o[A+24>>2],o[A+20>>2]=0-o[A+20>>2],o[A+16>>2]=0-o[A+16>>2],o[A+12>>2]=0-o[A+12>>2],o[A+8>>2]=0-o[A+8>>2],o[A+4>>2]=0-o[A+4>>2]),F(A+120|0,A,C),U=0;}return D=g+320|0,U}function J(A,I,g){var C,B,Q,i,o,n,r,f,t,e,c,y,D=0,w=0,h=0,s=0,p=0,u=0,k=0,F=0,l=0,S=0,H=0,M=0,G=0,U=0,J=0,N=0,Y=0,b=0,_=0,K=0;for(p=1634760805,w=C=a[0|g]|a[g+1|0]<<8|a[g+2|0]<<16|a[g+3|0]<<24,u=B=a[g+4|0]|a[g+5|0]<<8|a[g+6|0]<<16|a[g+7|0]<<24,k=Q=a[g+8|0]|a[g+9|0]<<8|a[g+10|0]<<16|a[g+11|0]<<24,F=i=a[g+12|0]|a[g+13|0]<<8|a[g+14|0]<<16|a[g+15|0]<<24,M=857760878,l=o=a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24,h=n=a[I+4|0]|a[I+5|0]<<8|a[I+6|0]<<16|a[I+7|0]<<24,H=r=a[I+8|0]|a[I+9|0]<<8|a[I+10|0]<<16|a[I+11|0]<<24,U=f=a[I+12|0]|a[I+13|0]<<8|a[I+14|0]<<16|a[I+15|0]<<24,I=2036477234,s=t=a[g+16|0]|a[g+17|0]<<8|a[g+18|0]<<16|a[g+19|0]<<24,D=1797285236,J=e=a[g+28|0]|a[g+29|0]<<8|a[g+30|0]<<16|a[g+31|0]<<24,G=c=a[g+24|0]|a[g+25|0]<<8|a[g+26|0]<<16|a[g+27|0]<<24,g=y=a[g+20|0]|a[g+21|0]<<8|a[g+22|0]<<16|a[g+23|0]<<24;S=YA(w+M|0,7)^U,N=YA(S+M|0,9)^G,F=YA(g+p|0,7)^F,Y=YA(F+p|0,9)^H,_=YA(Y+F|0,13)^g,k=YA(D+s|0,7)^k,b=YA(k+D|0,9)^h,H=YA(k+b|0,13)^s,s=YA(b+H|0,18)^D,h=YA(I+l|0,7)^J,g=_^YA(s+h|0,7),G=N^YA(g+s|0,9),J=YA(g+G|0,13)^h,D=YA(G+J|0,18)^s,u=YA(I+h|0,9)^u,l=YA(u+h|0,13)^l,I=YA(l+u|0,18)^I,s=YA(I+S|0,7)^H,H=YA(s+I|0,9)^Y,U=YA(s+H|0,13)^S,I=YA(H+U|0,18)^I,S=YA(S+N|0,13)^w,w=YA(S+N|0,18)^M,l=YA(w+F|0,7)^l,h=YA(l+w|0,9)^b,F=YA(h+l|0,13)^F,M=YA(h+F|0,18)^w,p=YA(Y+_|0,18)^p,w=YA(p+k|0,7)^S,u=YA(w+p|0,9)^u,k=YA(w+u|0,13)^k,p=YA(u+k|0,18)^p,S=K>>>0<18,K=K+2|0,S;);D=D+1797285236|0,E[A+60|0]=D,E[A+61|0]=D>>>8,E[A+62|0]=D>>>16,E[A+63|0]=D>>>24,D=J+e|0,E[A+56|0]=D,E[A+57|0]=D>>>8,E[A+58|0]=D>>>16,E[A+59|0]=D>>>24,D=G+c|0,E[A+52|0]=D,E[A+53|0]=D>>>8,E[A+54|0]=D>>>16,E[A+55|0]=D>>>24,g=g+y|0,E[A+48|0]=g,E[A+49|0]=g>>>8,E[A+50|0]=g>>>16,E[A+51|0]=g>>>24,g=s+t|0,E[A+44|0]=g,E[A+45|0]=g>>>8,E[A+46|0]=g>>>16,E[A+47|0]=g>>>24,I=I+2036477234|0,E[A+40|0]=I,E[A+41|0]=I>>>8,E[A+42|0]=I>>>16,E[A+43|0]=I>>>24,I=U+f|0,E[A+36|0]=I,E[A+37|0]=I>>>8,E[A+38|0]=I>>>16,E[A+39|0]=I>>>24,I=H+r|0,E[A+32|0]=I,E[A+33|0]=I>>>8,E[A+34|0]=I>>>16,E[A+35|0]=I>>>24,I=h+n|0,E[A+28|0]=I,E[A+29|0]=I>>>8,E[A+30|0]=I>>>16,E[A+31|0]=I>>>24,I=l+o|0,E[A+24|0]=I,E[A+25|0]=I>>>8,E[A+26|0]=I>>>16,E[A+27|0]=I>>>24,I=M+857760878|0,E[A+20|0]=I,E[A+21|0]=I>>>8,E[A+22|0]=I>>>16,E[A+23|0]=I>>>24,I=F+i|0,E[A+16|0]=I,E[A+17|0]=I>>>8,E[A+18|0]=I>>>16,E[A+19|0]=I>>>24,I=k+Q|0,E[A+12|0]=I,E[A+13|0]=I>>>8,E[A+14|0]=I>>>16,E[A+15|0]=I>>>24,I=u+B|0,E[A+8|0]=I,E[A+9|0]=I>>>8,E[A+10|0]=I>>>16,E[A+11|0]=I>>>24,I=w+C|0,E[A+4|0]=I,E[A+5|0]=I>>>8,E[A+6|0]=I>>>16,E[A+7|0]=I>>>24,I=p+1634760805|0,E[0|A]=I,E[A+1|0]=I>>>8,E[A+2|0]=I>>>16,E[A+3|0]=I>>>24;}function N(A,I,g,C){var B=0,Q=0,i=0,E=0,n=0,f=0,t=0,e=0,c=0,y=0,D=0,h=0,s=0,p=0,u=0,k=0,F=0,l=0,S=0,H=0,M=0,G=0,U=0,J=0,N=0;if(D=o[A+36>>2],c=o[A+32>>2],y=o[A+28>>2],t=o[A+24>>2],e=o[A+20>>2],!C&g>>>0>=16|C)for(M=!a[A+80|0]<<24,s=o[A+4>>2],G=r(s,5),u=o[A+8>>2],S=r(u,5),F=o[A+12>>2],l=r(F,5),H=o[A+16>>2],k=r(H,5),p=o[A>>2];B=DA(i=((a[I+3|0]|a[I+4|0]<<8|a[I+5|0]<<16|a[I+6|0]<<24)>>>2&67108863)+t|0,0,F,0),n=w,e=(E=DA(t=(67108863&(a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24))+e|0,0,H,0))+B|0,B=w+n|0,B=E>>>0>e>>>0?B+1|0:B,n=DA(y=((a[I+6|0]|a[I+7|0]<<8|a[I+8|0]<<16|a[I+9|0]<<24)>>>4&67108863)+y|0,0,u,0),B=w+B|0,B=n>>>0>(e=n+e|0)>>>0?B+1|0:B,n=DA(c=((a[I+9|0]|a[I+10|0]<<8|a[I+11|0]<<16|a[I+12|0]<<24)>>>6|0)+c|0,0,s,0),B=w+B|0,B=n>>>0>(e=n+e|0)>>>0?B+1|0:B,n=DA(D=D+M+((a[I+12|0]|a[I+13|0]<<8|a[I+14|0]<<16|a[I+15|0]<<24)>>>8)|0,0,p,0),B=w+B|0,U=e=n+e|0,e=n>>>0>e>>>0?B+1|0:B,B=DA(i,0,u,0),n=w,E=DA(t,0,F,0),Q=w+n|0,Q=(B=E+B|0)>>>0<E>>>0?Q+1|0:Q,n=(E=DA(y,0,s,0))+B|0,B=w+Q|0,B=E>>>0>n>>>0?B+1|0:B,E=DA(c,0,p,0),B=w+B|0,B=E>>>0>(n=E+n|0)>>>0?B+1|0:B,E=DA(D,0,k,0),B=w+B|0,J=n=E+n|0,n=E>>>0>n>>>0?B+1|0:B,B=DA(i,0,s,0),f=w,E=(Q=DA(t,0,u,0))+B|0,B=w+f|0,B=Q>>>0>E>>>0?B+1|0:B,f=DA(y,0,p,0),Q=w+B|0,Q=(E=f+E|0)>>>0<f>>>0?Q+1|0:Q,f=DA(c,0,k,0),B=w+Q|0,B=(E=f+E|0)>>>0<f>>>0?B+1|0:B,f=DA(D,0,l,0),B=w+B|0,N=E=f+E|0,E=E>>>0<f>>>0?B+1|0:B,B=DA(i,0,p,0),Q=w,f=(h=DA(t,0,s,0))+B|0,B=w+Q|0,B=f>>>0<h>>>0?B+1|0:B,Q=DA(y,0,k,0),B=w+B|0,B=Q>>>0>(f=Q+f|0)>>>0?B+1|0:B,h=DA(c,0,l,0),Q=w+B|0,Q=(f=h+f|0)>>>0<h>>>0?Q+1|0:Q,h=DA(D,0,S,0),B=w+Q|0,B=(f=h+f|0)>>>0<h>>>0?B+1|0:B,h=f,f=B,B=DA(i,0,k,0),Q=w,i=(t=DA(t,0,p,0))+B|0,B=w+Q|0,B=i>>>0<t>>>0?B+1|0:B,t=DA(y,0,l,0),B=w+B|0,B=(i=t+i|0)>>>0<t>>>0?B+1|0:B,t=DA(c,0,S,0),B=w+B|0,B=(i=t+i|0)>>>0<t>>>0?B+1|0:B,t=DA(D,0,G,0),Q=w+B|0,Q=(i=t+i|0)>>>0<t>>>0?Q+1|0:Q,t=i,B=f,B=(i=(y=(67108863&Q)<<6|i>>>26)+h|0)>>>0<y>>>0?B+1|0:B,y=i,c=(67108863&B)<<6|i>>>26,B=E,B=(i=c+N|0)>>>0<c>>>0?B+1|0:B,c=i,Q=n,D=B=(i=(67108863&B)<<6|i>>>26)+J|0,n=(67108863&(Q=B>>>0<i>>>0?Q+1|0:Q))<<6|B>>>26,B=e,t=(67108863&y)+((B=r((67108863&((i=n+U|0)>>>0<n>>>0?B+1|0:B))<<6|i>>>26,5)+(67108863&t)|0)>>>26|0)|0,y=67108863&c,c=67108863&D,D=67108863&i,e=67108863&B,I=I+16|0,!(C=C-(g>>>0<16)|0)&(g=g-16|0)>>>0>15|C;);o[A+20>>2]=e,o[A+36>>2]=D,o[A+32>>2]=c,o[A+28>>2]=y,o[A+24>>2]=t;}function Y(A,I,g,C){A|=0,I|=0;var B=0;return B=-1,(C|=0)-65>>>0<4294967232|(g|=0)>>>0>64||(g&&I?(D=B=D-128|0,!I|((C&=255)-65&255)>>>0<=191|((g&=255)-65&255)>>>0<=191?(mA(),Q()):(MA(A- -64|0,0,293),E[A+56|0]=121,E[A+57|0]=33,E[A+58|0]=126,E[A+59|0]=19,E[A+60|0]=25,E[A+61|0]=205,E[A+62|0]=224,E[A+63|0]=91,E[A+48|0]=107,E[A+49|0]=189,E[A+50|0]=65,E[A+51|0]=251,E[A+52|0]=171,E[A+53|0]=217,E[A+54|0]=131,E[A+55|0]=31,E[A+40|0]=31,E[A+41|0]=108,E[A+42|0]=62,E[A+43|0]=43,E[A+44|0]=140,E[A+45|0]=104,E[A+46|0]=5,E[A+47|0]=155,E[A+32|0]=209,E[A+33|0]=130,E[A+34|0]=230,E[A+35|0]=173,E[A+36|0]=127,E[A+37|0]=82,E[A+38|0]=14,E[A+39|0]=81,E[A+24|0]=241,E[A+25|0]=54,E[A+26|0]=29,E[A+27|0]=95,E[A+28|0]=58,E[A+29|0]=245,E[A+30|0]=79,E[A+31|0]=165,E[A+16|0]=43,E[A+17|0]=248,E[A+18|0]=148,E[A+19|0]=254,E[A+20|0]=114,E[A+21|0]=243,E[A+22|0]=110,E[A+23|0]=60,E[A+8|0]=59,E[A+9|0]=167,E[A+10|0]=202,E[A+11|0]=132,E[A+12|0]=133,E[A+13|0]=174,E[A+14|0]=103,E[A+15|0]=187,C=-222443256^(g<<8|C),E[0|A]=C,E[A+1|0]=C>>>8,E[A+2|0]=C>>>16,E[A+3|0]=C>>>24,C=g>>>24^1779033703,E[A+4|0]=C,E[A+5|0]=C>>>8,E[A+6|0]=C>>>16,E[A+7|0]=C>>>24,MA(g+B|0,0,g<<24>>24>=0?128-g|0:0),g=HA(B,I,g),HA(A+96|0,g,128),I=128+(a[A+352|0]|a[A+353|0]<<8|a[A+354|0]<<16|a[A+355|0]<<24)|0,E[A+352|0]=I,E[A+353|0]=I>>>8,E[A+354|0]=I>>>16,E[A+355|0]=I>>>24,$A(g,128),D=g+128|0)):(((I=255&C)-65&255)>>>0<=191&&(mA(),Q()),MA(A- -64|0,0,293),E[A+56|0]=121,E[A+57|0]=33,E[A+58|0]=126,E[A+59|0]=19,E[A+60|0]=25,E[A+61|0]=205,E[A+62|0]=224,E[A+63|0]=91,E[A+48|0]=107,E[A+49|0]=189,E[A+50|0]=65,E[A+51|0]=251,E[A+52|0]=171,E[A+53|0]=217,E[A+54|0]=131,E[A+55|0]=31,E[A+40|0]=31,E[A+41|0]=108,E[A+42|0]=62,E[A+43|0]=43,E[A+44|0]=140,E[A+45|0]=104,E[A+46|0]=5,E[A+47|0]=155,E[A+32|0]=209,E[A+33|0]=130,E[A+34|0]=230,E[A+35|0]=173,E[A+36|0]=127,E[A+37|0]=82,E[A+38|0]=14,E[A+39|0]=81,E[A+24|0]=241,E[A+25|0]=54,E[A+26|0]=29,E[A+27|0]=95,E[A+28|0]=58,E[A+29|0]=245,E[A+30|0]=79,E[A+31|0]=165,E[A+16|0]=43,E[A+17|0]=248,E[A+18|0]=148,E[A+19|0]=254,E[A+20|0]=114,E[A+21|0]=243,E[A+22|0]=110,E[A+23|0]=60,E[A+8|0]=59,E[A+9|0]=167,E[A+10|0]=202,E[A+11|0]=132,E[A+12|0]=133,E[A+13|0]=174,E[A+14|0]=103,E[A+15|0]=187,I^=-222443256,E[0|A]=I,E[A+1|0]=I>>>8,E[A+2|0]=I>>>16,E[A+3|0]=I>>>24,E[A+4|0]=103,E[A+5|0]=230,E[A+6|0]=9,E[A+7|0]=106),B=0),0|B}function b(A,I,g){var C,B,Q,i,E,a,n,r,f,t,e,c=0,y=0,D=0,w=0,h=0,s=0,p=0,u=0,k=0,l=0,S=0,H=0,M=0,G=0,U=0,J=0,N=0,Y=0,b=0;c=o[I+40>>2],y=o[I+4>>2],w=o[I+44>>2],h=o[I+8>>2],s=o[I+48>>2],p=o[I+12>>2],u=o[I+52>>2],k=o[I+16>>2],l=o[I+56>>2],S=o[I+20>>2],H=o[I+60>>2],M=o[I+24>>2],G=o[(D=I- -64|0)>>2],U=o[I+28>>2],J=o[I+68>>2],N=o[I+32>>2],Y=o[I+72>>2],b=o[I>>2],o[A+36>>2]=o[I+36>>2]+o[I+76>>2],o[A+32>>2]=N+Y,o[A+28>>2]=U+J,o[A+24>>2]=M+G,o[A+20>>2]=S+H,o[A+16>>2]=k+l,o[A+12>>2]=p+u,o[A+8>>2]=h+s,o[A+4>>2]=y+w,o[A>>2]=c+b,w=o[I+40>>2],c=o[I+4>>2],h=o[I+44>>2],s=o[I+8>>2],p=o[I+48>>2],u=o[I+12>>2],k=o[I+52>>2],l=o[I+16>>2],S=o[I+56>>2],H=o[I+20>>2],M=o[I+60>>2],G=o[I+24>>2],D=o[D>>2],y=o[I+28>>2],U=o[I+68>>2],J=o[I+32>>2],N=o[I+72>>2],Y=o[I>>2],o[A+76>>2]=o[I+76>>2]-o[I+36>>2],o[A+72>>2]=N-J,o[A+68>>2]=U-y,o[(y=A- -64|0)>>2]=D-G,o[A+60>>2]=M-H,o[A+56>>2]=S-l,o[A+52>>2]=k-u,o[A+48>>2]=p-s,o[A+44>>2]=h-c,o[(c=A+40|0)>>2]=w-Y,F(A+80|0,A,g+40|0),F(c,c,g),F(A+120|0,g+120|0,I+120|0),F(A,I+80|0,g+80|0),b=o[A+4>>2],Q=o[A+8>>2],i=o[A+12>>2],E=o[A+16>>2],a=o[A+20>>2],n=o[A+24>>2],r=o[A+28>>2],f=o[A+32>>2],t=o[A+36>>2],I=o[c>>2],g=o[A+80>>2],w=o[A+44>>2],h=o[A+84>>2],s=o[A+48>>2],p=o[A+88>>2],u=o[A+52>>2],k=o[A+92>>2],l=o[A+56>>2],S=o[A+96>>2],H=o[A+60>>2],M=o[A+100>>2],D=o[y>>2],G=o[A+104>>2],U=o[A+68>>2],J=o[A+108>>2],N=o[A+72>>2],Y=o[A+112>>2],e=o[A>>2],C=o[A+76>>2],B=o[A+116>>2],o[A+76>>2]=C+B,o[A+72>>2]=N+Y,o[A+68>>2]=U+J,o[y>>2]=D+G,o[A+60>>2]=H+M,o[A+56>>2]=l+S,o[A+52>>2]=u+k,o[A+48>>2]=s+p,o[A+44>>2]=w+h,o[c>>2]=I+g,o[A+36>>2]=B-C,o[A+32>>2]=Y-N,o[A+28>>2]=J-U,o[A+24>>2]=G-D,o[A+20>>2]=M-H,o[A+16>>2]=S-l,o[A+12>>2]=k-u,o[A+8>>2]=p-s,o[A+4>>2]=h-w,o[A>>2]=g-I,I=o[A+156>>2],g=t<<1,o[A+156>>2]=I+g,c=o[A+152>>2],y=f<<1,o[A+152>>2]=c+y,w=o[A+148>>2],h=r<<1,o[A+148>>2]=w+h,s=o[A+144>>2],p=n<<1,o[A+144>>2]=s+p,u=o[A+140>>2],k=a<<1,o[A+140>>2]=u+k,l=o[A+136>>2],S=E<<1,o[A+136>>2]=l+S,H=o[A+132>>2],M=i<<1,o[A+132>>2]=H+M,D=o[A+128>>2],G=Q<<1,o[A+128>>2]=D+G,U=o[A+124>>2],J=b<<1,o[A+124>>2]=U+J,N=o[A+120>>2],Y=e<<1,o[A+120>>2]=N+Y,o[A+112>>2]=y-c,o[A+108>>2]=h-w,o[A+104>>2]=p-s,o[A+100>>2]=k-u,o[A+96>>2]=S-l,o[A+92>>2]=M-H,o[A+88>>2]=G-D,o[A+84>>2]=J-U,o[A+80>>2]=Y-N,o[A+116>>2]=g-I;}function _(A,I,g){var C,B,Q,i,E,a,n,r,f,t,e,c=0,y=0,D=0,w=0,h=0,s=0,p=0,u=0,k=0,l=0,S=0,H=0,M=0,G=0,U=0,J=0,N=0,Y=0,b=0;c=o[I+40>>2],y=o[I+4>>2],w=o[I+44>>2],h=o[I+8>>2],s=o[I+48>>2],p=o[I+12>>2],u=o[I+52>>2],k=o[I+16>>2],l=o[I+56>>2],S=o[I+20>>2],H=o[I+60>>2],M=o[I+24>>2],G=o[(D=I- -64|0)>>2],U=o[I+28>>2],J=o[I+68>>2],N=o[I+32>>2],Y=o[I+72>>2],b=o[I>>2],o[A+36>>2]=o[I+36>>2]+o[I+76>>2],o[A+32>>2]=N+Y,o[A+28>>2]=U+J,o[A+24>>2]=M+G,o[A+20>>2]=S+H,o[A+16>>2]=k+l,o[A+12>>2]=p+u,o[A+8>>2]=h+s,o[A+4>>2]=y+w,o[A>>2]=c+b,w=o[I+40>>2],c=o[I+4>>2],h=o[I+44>>2],s=o[I+8>>2],p=o[I+48>>2],u=o[I+12>>2],k=o[I+52>>2],l=o[I+16>>2],S=o[I+56>>2],H=o[I+20>>2],M=o[I+60>>2],G=o[I+24>>2],D=o[D>>2],y=o[I+28>>2],U=o[I+68>>2],J=o[I+32>>2],N=o[I+72>>2],Y=o[I>>2],o[A+76>>2]=o[I+76>>2]-o[I+36>>2],o[A+72>>2]=N-J,o[A+68>>2]=U-y,o[(y=A- -64|0)>>2]=D-G,o[A+60>>2]=M-H,o[A+56>>2]=S-l,o[A+52>>2]=k-u,o[A+48>>2]=p-s,o[A+44>>2]=h-c,o[(c=A+40|0)>>2]=w-Y,F(A+80|0,A,g),F(c,c,g+40|0),F(A+120|0,g+120|0,I+120|0),F(A,I+80|0,g+80|0),b=o[A+4>>2],Q=o[A+8>>2],i=o[A+12>>2],E=o[A+16>>2],a=o[A+20>>2],n=o[A+24>>2],r=o[A+28>>2],f=o[A+32>>2],t=o[A+36>>2],I=o[c>>2],g=o[A+80>>2],w=o[A+44>>2],h=o[A+84>>2],s=o[A+48>>2],p=o[A+88>>2],u=o[A+52>>2],k=o[A+92>>2],l=o[A+56>>2],S=o[A+96>>2],H=o[A+60>>2],M=o[A+100>>2],D=o[y>>2],G=o[A+104>>2],U=o[A+68>>2],J=o[A+108>>2],N=o[A+72>>2],Y=o[A+112>>2],e=o[A>>2],C=o[A+76>>2],B=o[A+116>>2],o[A+76>>2]=C+B,o[A+72>>2]=N+Y,o[A+68>>2]=U+J,o[y>>2]=D+G,o[A+60>>2]=H+M,o[A+56>>2]=l+S,o[A+52>>2]=u+k,o[A+48>>2]=s+p,o[A+44>>2]=w+h,o[c>>2]=I+g,o[A+36>>2]=B-C,o[A+32>>2]=Y-N,o[A+28>>2]=J-U,o[A+24>>2]=G-D,o[A+20>>2]=M-H,o[A+16>>2]=S-l,o[A+12>>2]=k-u,o[A+8>>2]=p-s,o[A+4>>2]=h-w,o[A>>2]=g-I,I=t<<1,g=o[A+156>>2],o[A+156>>2]=I-g,c=f<<1,y=o[A+152>>2],o[A+152>>2]=c-y,w=r<<1,h=o[A+148>>2],o[A+148>>2]=w-h,s=n<<1,p=o[A+144>>2],o[A+144>>2]=s-p,u=a<<1,k=o[A+140>>2],o[A+140>>2]=u-k,l=E<<1,S=o[A+136>>2],o[A+136>>2]=l-S,H=i<<1,M=o[A+132>>2],o[A+132>>2]=H-M,D=Q<<1,G=o[A+128>>2],o[A+128>>2]=D-G,U=b<<1,J=o[A+124>>2],o[A+124>>2]=U-J,N=e<<1,Y=o[A+120>>2],o[A+120>>2]=N-Y,o[A+112>>2]=c+y,o[A+108>>2]=w+h,o[A+104>>2]=s+p,o[A+100>>2]=u+k,o[A+96>>2]=l+S,o[A+92>>2]=H+M,o[A+88>>2]=D+G,o[A+84>>2]=U+J,o[A+80>>2]=N+Y,o[A+116>>2]=I+g;}function K(A,I,g){var C,B,Q,i,E,a,n,r,f,t,e,c=0,y=0,D=0,w=0,h=0,s=0,p=0,u=0,k=0,l=0,S=0,H=0,M=0,G=0,U=0,J=0,N=0,Y=0,b=0;c=o[I+40>>2],y=o[I+4>>2],w=o[I+44>>2],h=o[I+8>>2],s=o[I+48>>2],p=o[I+12>>2],u=o[I+52>>2],k=o[I+16>>2],l=o[I+56>>2],S=o[I+20>>2],H=o[I+60>>2],M=o[I+24>>2],G=o[(D=I- -64|0)>>2],U=o[I+28>>2],J=o[I+68>>2],N=o[I+32>>2],Y=o[I+72>>2],b=o[I>>2],o[A+36>>2]=o[I+36>>2]+o[I+76>>2],o[A+32>>2]=N+Y,o[A+28>>2]=U+J,o[A+24>>2]=M+G,o[A+20>>2]=S+H,o[A+16>>2]=k+l,o[A+12>>2]=p+u,o[A+8>>2]=h+s,o[A+4>>2]=y+w,o[A>>2]=c+b,w=o[I+40>>2],c=o[I+4>>2],h=o[I+44>>2],s=o[I+8>>2],p=o[I+48>>2],u=o[I+12>>2],k=o[I+52>>2],l=o[I+16>>2],S=o[I+56>>2],H=o[I+20>>2],M=o[I+60>>2],G=o[I+24>>2],D=o[D>>2],y=o[I+28>>2],U=o[I+68>>2],J=o[I+32>>2],N=o[I+72>>2],Y=o[I>>2],o[A+76>>2]=o[I+76>>2]-o[I+36>>2],o[A+72>>2]=N-J,o[A+68>>2]=U-y,o[(y=A- -64|0)>>2]=D-G,o[A+60>>2]=M-H,o[A+56>>2]=S-l,o[A+52>>2]=k-u,o[A+48>>2]=p-s,o[A+44>>2]=h-c,o[(c=A+40|0)>>2]=w-Y,F(A+80|0,A,g),F(c,c,g+40|0),F(A+120|0,g+80|0,I+120|0),b=o[I+80>>2],Q=o[I+84>>2],i=o[I+88>>2],E=o[I+92>>2],a=o[I+96>>2],n=o[I+100>>2],r=o[I+104>>2],f=o[I+108>>2],t=o[I+112>>2],e=o[I+116>>2],I=o[c>>2],g=o[A+80>>2],w=o[A+44>>2],h=o[A+84>>2],s=o[A+48>>2],p=o[A+88>>2],u=o[A+52>>2],k=o[A+92>>2],l=o[A+56>>2],S=o[A+96>>2],H=o[A+60>>2],M=o[A+100>>2],D=o[y>>2],G=o[A+104>>2],U=o[A+68>>2],J=o[A+108>>2],N=o[A+72>>2],Y=o[A+112>>2],C=o[A+76>>2],B=o[A+116>>2],o[A+76>>2]=C+B,o[A+72>>2]=N+Y,o[A+68>>2]=U+J,o[y>>2]=D+G,o[A+60>>2]=H+M,o[A+56>>2]=l+S,o[A+52>>2]=u+k,o[A+48>>2]=s+p,o[A+44>>2]=w+h,o[c>>2]=I+g,o[A+36>>2]=B-C,o[A+32>>2]=Y-N,o[A+28>>2]=J-U,o[A+24>>2]=G-D,o[A+20>>2]=M-H,o[A+16>>2]=S-l,o[A+12>>2]=k-u,o[A+8>>2]=p-s,o[A+4>>2]=h-w,o[A>>2]=g-I,I=e<<1,g=o[A+156>>2],o[A+156>>2]=I-g,c=t<<1,y=o[A+152>>2],o[A+152>>2]=c-y,w=f<<1,h=o[A+148>>2],o[A+148>>2]=w-h,s=r<<1,p=o[A+144>>2],o[A+144>>2]=s-p,u=n<<1,k=o[A+140>>2],o[A+140>>2]=u-k,l=a<<1,S=o[A+136>>2],o[A+136>>2]=l-S,H=E<<1,M=o[A+132>>2],o[A+132>>2]=H-M,D=i<<1,G=o[A+128>>2],o[A+128>>2]=D-G,U=Q<<1,J=o[A+124>>2],o[A+124>>2]=U-J,N=b<<1,Y=o[A+120>>2],o[A+120>>2]=N-Y,o[A+112>>2]=c+y,o[A+108>>2]=w+h,o[A+104>>2]=s+p,o[A+100>>2]=u+k,o[A+96>>2]=l+S,o[A+92>>2]=H+M,o[A+88>>2]=D+G,o[A+84>>2]=U+J,o[A+80>>2]=N+Y,o[A+116>>2]=I+g;}function P(A,I){var g,C,B,Q,i,E,n,r,f,t,e,c,y,D=0,h=0,s=0,p=0,u=0,k=0,F=0,l=0,S=0,H=0,M=0,G=0,U=0,J=0;c=a[I+31|0],g=a[I+30|0],C=a[I+29|0],B=a[I+6|0],Q=a[I+5|0],i=a[I+4|0],E=a[I+9|0],n=a[I+8|0],r=a[I+7|0],H=a[I+12|0],M=a[I+11|0],f=a[I+10|0],t=a[I+15|0],G=a[I+14|0],e=a[I+13|0],F=a[I+28|0],S=a[I+27|0],l=a[I+26|0],k=a[I+25|0],p=a[I+24|0],s=a[I+23|0],y=a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24,u=(D=a[I+21|0])<<15,D=h=D>>>17|0,J=u,h=(u=a[I+20|0])>>>25|0,u=J|u<<7,U=D|h,D=(h=a[I+22|0])>>>9|0,u|=h<<23,D|=U,h=a[I+16|0]|a[I+17|0]<<8|a[I+18|0]<<16|a[I+19|0]<<24,I=0,J=h,h=(33554431&(I=(U=h+16777216|0)>>>0<16777216?1:I))<<7|U>>>25,I=(I>>>25|0)+D|0,h=(D=u=h+u|0)>>>0<h>>>0?I+1|0:I,I=(u=D+33554432|0)>>>0<33554432?h+1|0:h,o[A+24>>2]=D-(-67108864&u),h=(D=s>>>27|0)|p>>>19|k>>>11,D=s=(p=k<<21|(s=p<<13|s<<5))+(D=(67108863&(D=I))<<6|u>>>26)|0,I=h,h=(s=p+16777216|0)>>>0<16777216?I+1|0:I,o[A+28>>2]=D-(1040187392&s),D=(D=S>>>20|l>>>28|F>>>12)+(h=(I=h)>>>25|0)|0,I=(h=s=(I=(33554431&I)<<7|s>>>25)+(S<<12|l<<4|F<<20)|0)>>>0<I>>>0?D+1|0:D,s=(F=h+33554432|0)>>>0<33554432?I+1|0:I,o[A+32>>2]=h-(-67108864&F),D=(I=H>>>13|0)|(h=M>>>21|f>>>29),I=(D=(S=16777216+(H=M<<11|f<<3|H<<19)|0)>>>0<16777216?D+1|0:D)>>>25|0,D=(h=p=G<<10|e<<2|t<<18)+(p=(33554431&D)<<7|S>>>25)|0,h=I+(k=G>>>22|e>>>30|t>>>14)|0,I=D>>>0<p>>>0?h+1|0:h,p=I=(67108863&(I=(h=D+33554432|0)>>>0<33554432?I+1|0:I))<<6|h>>>26,I=I+(l=J-(-33554432&U)|0)|0,o[A+20>>2]=I,o[A+16>>2]=D-(-67108864&h),h=Q>>>18|i>>>26|B>>>10,D=(h=(l=16777216+(M=Q<<14|i<<6|B<<22)|0)>>>0<16777216?h+1|0:h)>>>25|0,h=(I=p=n<<13|r<<5|E<<21)+(p=(33554431&h)<<7|l>>>25)|0,I=D+(k=n>>>19|r>>>27|E>>>11)|0,I=h>>>0<p>>>0?I+1|0:I,D=(k=h+33554432|0)>>>0<33554432?I+1|0:I,o[A+8>>2]=h-(-67108864&k),F=(s=(67108863&s)<<6|F>>>26)+(G=c<<18&33292288|g<<10|C<<2)|0,I=h=g>>>22|C>>>30,h=(s=G+16777216|0)>>>0<16777216?I+1|0:I,o[A+36>>2]=F-(33554432&s),D=H+((67108863&D)<<6|k>>>26)|0,o[A+12>>2]=D-(234881024&S),p=M-(2113929216&l)|0,D=DA((33554431&(I=h))<<7|s>>>25,h=I>>>25|0,19,0),I=w,D=D>>>0>(h=D+y|0)>>>0?I+1|0:I,s=D=(67108863&(D=(I=h+33554432|0)>>>0<33554432?D+1|0:D))<<6|I>>>26,D=D+p|0,o[A+4>>2]=D,o[A>>2]=h-(-67108864&I);}function v(A,I){var g,C,B,Q=0,i=0,n=0,r=0,f=0,t=0,e=0,c=0,y=0,w=0,h=0,s=0;for(D=g=D-480|0;i=(n=g+288|0)+(Q<<1)|0,c=a[I+Q|0],E[i+1|0]=c>>>4,E[0|i]=15&c,n=n+((i=1|Q)<<1)|0,i=a[I+i|0],E[n+1|0]=i>>>4,E[0|n]=15&i,32!=(0|(Q=Q+2|0)););for(I=0;Q=8+(n=(Q=I)+a[0|(I=(g+288|0)+r|0)]|0)|0,E[0|I]=n-(240&Q),Q=8+(n=a[I+1|0]+(Q<<24>>24>>4)|0)|0,E[I+1|0]=n-(240&Q),Q=8+(n=a[I+2|0]+(Q<<24>>24>>4)|0)|0,E[I+2|0]=n-(240&Q),I=Q<<24>>24>>4,63!=(0|(r=r+3|0)););for(E[g+351|0]=a[g+351|0]+I,o[A+32>>2]=0,o[A+36>>2]=0,o[A+24>>2]=0,o[A+28>>2]=0,o[A+16>>2]=0,o[A+20>>2]=0,o[A+8>>2]=0,o[A+12>>2]=0,o[A>>2]=0,o[A+4>>2]=0,o[A+44>>2]=0,o[A+48>>2]=0,o[(c=A+40|0)>>2]=1,o[A+52>>2]=0,o[A+56>>2]=0,o[A+60>>2]=0,o[A+64>>2]=0,o[A+68>>2]=0,o[A+72>>2]=0,o[A+76>>2]=0,o[A+80>>2]=1,MA(A+84|0,0,76),C=A+120|0,B=A+80|0,I=g+208|0,n=g+168|0,r=g+248|0,Q=1;q(f=g+8|0,Q>>>1|0,E[(g+288|0)+Q|0]),K(i=g+128|0,A,f),F(A,i,r),F(c,n,I),F(B,I,r),F(C,i,n),i=Q>>>0<62,Q=Q+2|0,i;);for(Q=o[A+8>>2],i=o[A+12>>2],f=o[A+16>>2],t=o[A+20>>2],y=o[A+24>>2],w=o[A+28>>2],e=o[A>>2],h=o[A+4>>2],s=o[A+36>>2],o[g+392>>2]=o[A+32>>2],o[g+396>>2]=s,o[g+384>>2]=y,o[g+388>>2]=w,o[g+376>>2]=f,o[g+380>>2]=t,o[g+368>>2]=Q,o[g+372>>2]=i,o[g+360>>2]=e,o[g+364>>2]=h,Q=o[A+40>>2],i=o[A+44>>2],f=o[A+48>>2],t=o[A+52>>2],y=o[A+56>>2],w=o[A+60>>2],h=o[(e=A- -64|0)>>2],e=o[e+4>>2],s=o[A+76>>2],o[g+432>>2]=o[A+72>>2],o[g+436>>2]=s,o[g+424>>2]=h,o[g+428>>2]=e,o[g+416>>2]=y,o[g+420>>2]=w,o[g+408>>2]=f,o[g+412>>2]=t,o[g+400>>2]=Q,o[g+404>>2]=i,Q=o[A+80>>2],i=o[A+84>>2],f=o[A+88>>2],t=o[A+92>>2],y=o[A+96>>2],w=o[A+100>>2],e=o[A+104>>2],h=o[A+108>>2],s=o[A+116>>2],o[g+472>>2]=o[A+112>>2],o[g+476>>2]=s,o[g+464>>2]=e,o[g+468>>2]=h,o[g+456>>2]=y,o[g+460>>2]=w,o[g+448>>2]=f,o[g+452>>2]=t,o[g+440>>2]=Q,o[g+444>>2]=i,l(Q=g+128|0,i=g+360|0),F(i,Q,r),F(f=g+400|0,n,I),F(t=g+440|0,I,r),l(Q,i),F(i,Q,r),F(f,n,I),F(t,I,r),l(Q,i),F(i,Q,r),F(f,n,I),F(t,I,r),l(Q,i),F(A,Q,r),F(c,n,I),F(B,I,r),F(C,Q,n),Q=0;q(f=g+8|0,Q>>>1|0,E[(g+288|0)+Q|0]),K(i=g+128|0,A,f),F(A,i,r),F(c,n,I),F(B,I,r),F(C,i,n),i=Q>>>0<62,Q=Q+2|0,i;);D=g+480|0;}function m(A,I,g,C){var B,Q=0,i=0,n=0,r=0,f=0,t=0,e=0,c=0,y=0,w=0,h=0,s=0;if(D=B=D-704|0,g|C)if(Q=(C<<3|g>>>29)+(i=n=o[A+76>>2])|0,f=(t=o[A+72>>2])+(r=g<<3)|0,o[A+72>>2]=f,Q=r>>>0>f>>>0?Q+1|0:Q,o[A+76>>2]=Q,n=o[4+(r=A- -64|0)>>2],n=(e=Q=(0|Q)==(0|i)&f>>>0<t>>>0|Q>>>0<i>>>0)>>>0>(Q=Q+o[r>>2]|0)>>>0?n+1|0:n,f=(e=C>>>29|0)+Q|0,Q=n,o[r>>2]=f,o[r+4>>2]=f>>>0<e>>>0?Q+1|0:Q,(0|(n=e=0-((Q=0)+((r=127&((7&i)<<29|t>>>3))>>>0>128)|0)|0))==(0|C)&g>>>0>=(f=128-r|0)>>>0|C>>>0>n>>>0){if(i=0,n=0,!Q&(127^r)>>>0>=3|Q)for(s=252&f,t=A+80|0;E[(Q=i+r|0)+t|0]=a[I+i|0],E[t+(r+(Q=1|i)|0)|0]=a[I+Q|0],E[t+(r+(Q=2|i)|0)|0]=a[I+Q|0],E[t+(r+(Q=3|i)|0)|0]=a[I+Q|0],Q=n,n=(i=i+4|0)>>>0<4?Q+1|0:Q,Q=y,y=Q=(w=w+4|0)>>>0<4?Q+1|0:Q,(0|w)!=(0|s)|(0|h)!=(0|Q););if(t=Q=0,Q|(y=3&f))for(;E[80+(A+(Q=i+r|0)|0)|0]=a[I+i|0],Q=n,n=(i=i+1|0)?Q:Q+1|0,Q=h,h=Q=(c=c+1|0)?Q:Q+1|0,(0|y)!=(0|c)|(0|t)!=(0|Q););if(p(A,A+80|0,B,i=B+640|0),I=I+f|0,!(C=C-((g>>>0<f>>>0)+e|0)|0)&(g=g-f|0)>>>0>127|C)for(;p(A,I,B,i),I=I+128|0,!(C=C-(g>>>0<128)|0)&(g=g-128|0)>>>0>127|C;);if(g|C){if(w=3&g,f=0,c=0,h=0,i=0,n=0,!C&g>>>0>=4|C)for(r=-4&g,t=C,y=A+80|0,g=0,C=0;E[i+y|0]=a[I+i|0],E[(Q=1|i)+y|0]=a[I+Q|0],E[(Q=2|i)+y|0]=a[I+Q|0],E[(Q=3|i)+y|0]=a[I+Q|0],Q=n,n=(i=i+4|0)>>>0<4?Q+1|0:Q,Q=C,C=Q=(g=g+4|0)>>>0<4?Q+1|0:Q,(0|g)!=(0|r)|(0|t)!=(0|Q););if(f|w)for(;E[80+(A+i|0)|0]=a[I+i|0],n=(i=i+1|0)?n:n+1|0,Q=h,h=Q=(c=c+1|0)?Q:Q+1|0,(0|c)!=(0|w)|(0|f)!=(0|Q););}$A(B,704);}else {if(i=0,n=0,!C&g>>>0>=4|C)for(f=-4&g,t=C,C=A+80|0;E[C+(Q=i+r|0)|0]=a[I+i|0],E[C+(e=r+(Q=1|i)|0)|0]=a[I+Q|0],E[C+(e=r+(Q=2|i)|0)|0]=a[I+Q|0],E[C+(e=r+(Q=3|i)|0)|0]=a[I+Q|0],Q=n,n=(i=i+4|0)>>>0<4?Q+1|0:Q,Q=y,y=Q=(w=w+4|0)>>>0<4?Q+1|0:Q,(0|f)!=(0|w)|(0|t)!=(0|Q););if((g&=3)|(C=0))for(;E[80+(A+(Q=i+r|0)|0)|0]=a[I+i|0],n=(i=i+1|0)?n:n+1|0,Q=h,h=Q=(c=c+1|0)?Q:Q+1|0,(0|g)!=(0|c)|(0|C)!=(0|Q););}return D=B+704|0,0}function d(A,I,g){var C=0,B=0,Q=0,i=0,o=0,n=0,r=0,f=0,t=0,e=0,c=0,y=0,D=0,w=0,h=0,s=0,p=0,u=0,k=0,F=0;for(B=2036477234,i=857760878,C=1634760805,n=1797285236,Q=a[I+12|0]|a[I+13|0]<<8|a[I+14|0]<<16|a[I+15|0]<<24,t=a[I+8|0]|a[I+9|0]<<8|a[I+10|0]<<16|a[I+11|0]<<24,o=a[I+4|0]|a[I+5|0]<<8|a[I+6|0]<<16|a[I+7|0]<<24,e=a[g+28|0]|a[g+29|0]<<8|a[g+30|0]<<16|a[g+31|0]<<24,r=a[g+24|0]|a[g+25|0]<<8|a[g+26|0]<<16|a[g+27|0]<<24,p=a[g+20|0]|a[g+21|0]<<8|a[g+22|0]<<16|a[g+23|0]<<24,c=a[g+16|0]|a[g+17|0]<<8|a[g+18|0]<<16|a[g+19|0]<<24,y=a[g+12|0]|a[g+13|0]<<8|a[g+14|0]<<16|a[g+15|0]<<24,D=a[g+8|0]|a[g+9|0]<<8|a[g+10|0]<<16|a[g+11|0]<<24,w=a[g+4|0]|a[g+5|0]<<8|a[g+6|0]<<16|a[g+7|0]<<24,I=a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24,g=a[0|g]|a[g+1|0]<<8|a[g+2|0]<<16|a[g+3|0]<<24;f=g,g=YA((h=I)^(I=g+C|0),16),f=c=YA(f^(C=g+c|0),12),u=YA((h=I+c|0)^g,8),I=YA(f^(c=u+C|0),7),C=y,y=YA((g=n+y|0)^Q,16),C=YA(C^(e=y+e|0),12),Q=D,n=YA((B=B+D|0)^t,16),Q=YA(Q^(D=n+r|0),12),r=YA((B=Q+B|0)^n,8),g=YA(r^(n=I+(s=g+C|0)|0),16),t=YA((i=i+w|0)^o,16),w=YA((o=t+p|0)^w,12),f=I,I=YA((i=i+w|0)^t,8),f=YA(f^(o=g+(k=I+o|0)|0),12),t=YA(g^(n=f+n|0),8),g=YA((p=t+o|0)^f,7),f=B,B=C,s=YA(y^s,8),B=YA(B^(C=s+e|0),7),y=YA((o=f+B|0)^I,16),e=YA((I=y+c|0)^B,12),o=YA(y^(B=e+o|0),8),y=YA((c=I+o|0)^e,7),I=YA((I=Q)^(Q=r+D|0),7),D=YA((i=I+i|0)^u,16),r=YA(I^(C=D+C|0),12),I=YA(D^(i=r+i|0),8),D=YA((e=C+I|0)^r,7),f=Q,C=YA(w^k,7),r=YA((Q=C+h|0)^s,16),h=YA(C^(w=f+r|0),12),Q=YA(r^(C=h+Q|0),8),w=YA((r=w+Q|0)^h,7),10!=(0|(F=F+1|0)););E[0|A]=C,E[A+1|0]=C>>>8,E[A+2|0]=C>>>16,E[A+3|0]=C>>>24,E[A+28|0]=Q,E[A+29|0]=Q>>>8,E[A+30|0]=Q>>>16,E[A+31|0]=Q>>>24,E[A+24|0]=t,E[A+25|0]=t>>>8,E[A+26|0]=t>>>16,E[A+27|0]=t>>>24,E[A+20|0]=o,E[A+21|0]=o>>>8,E[A+22|0]=o>>>16,E[A+23|0]=o>>>24,E[A+16|0]=I,E[A+17|0]=I>>>8,E[A+18|0]=I>>>16,E[A+19|0]=I>>>24,E[A+12|0]=n,E[A+13|0]=n>>>8,E[A+14|0]=n>>>16,E[A+15|0]=n>>>24,E[A+8|0]=B,E[A+9|0]=B>>>8,E[A+10|0]=B>>>16,E[A+11|0]=B>>>24,E[A+4|0]=i,E[A+5|0]=i>>>8,E[A+6|0]=i>>>16,E[A+7|0]=i>>>24;}function L(A,I,g){var C=0,B=0,Q=0,i=0,o=0,n=0,r=0,f=0,t=0,e=0,c=0,y=0,D=0,w=0,h=0,s=0,p=0,u=0,k=0,F=0;for(C=1797285236,r=2036477234,f=857760878,B=1634760805,Q=a[I+12|0]|a[I+13|0]<<8|a[I+14|0]<<16|a[I+15|0]<<24,o=a[I+8|0]|a[I+9|0]<<8|a[I+10|0]<<16|a[I+11|0]<<24,i=a[I+4|0]|a[I+5|0]<<8|a[I+6|0]<<16|a[I+7|0]<<24,h=a[g+28|0]|a[g+29|0]<<8|a[g+30|0]<<16|a[g+31|0]<<24,w=a[g+24|0]|a[g+25|0]<<8|a[g+26|0]<<16|a[g+27|0]<<24,s=20,y=a[g+20|0]|a[g+21|0]<<8|a[g+22|0]<<16|a[g+23|0]<<24,D=a[g+16|0]|a[g+17|0]<<8|a[g+18|0]<<16|a[g+19|0]<<24,t=a[g+12|0]|a[g+13|0]<<8|a[g+14|0]<<16|a[g+15|0]<<24,e=a[g+8|0]|a[g+9|0]<<8|a[g+10|0]<<16|a[g+11|0]<<24,c=a[g+4|0]|a[g+5|0]<<8|a[g+6|0]<<16|a[g+7|0]<<24,I=a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24,g=a[0|g]|a[g+1|0]<<8|a[g+2|0]<<16|a[g+3|0]<<24;n=YA(g+f|0,7)^Q,p=YA(n+f|0,9)^w,t=YA(B+y|0,7)^t,u=YA(t+B|0,9)^o,k=YA(u+t|0,13)^y,e=YA(C+D|0,7)^e,i=YA(e+C|0,9)^i,o=YA(i+e|0,13)^D,C=YA(i+o|0,18)^C,Q=YA(I+r|0,7)^h,y=k^YA(C+Q|0,7),w=p^YA(y+C|0,9),h=YA(y+w|0,13)^Q,C=YA(w+h|0,18)^C,c=YA(Q+r|0,9)^c,F=YA(c+Q|0,13)^I,I=YA(F+c|0,18)^r,D=YA(I+n|0,7)^o,o=YA(D+I|0,9)^u,Q=YA(o+D|0,13)^n,r=YA(Q+o|0,18)^I,n=YA(n+p|0,13)^g,g=YA(n+p|0,18)^f,I=YA(g+t|0,7)^F,i=YA(I+g|0,9)^i,t=YA(I+i|0,13)^t,f=YA(i+t|0,18)^g,B=YA(u+k|0,18)^B,g=YA(B+e|0,7)^n,c=YA(g+B|0,9)^c,e=YA(g+c|0,13)^e,B=YA(c+e|0,18)^B,n=s>>>0>2,s=s-2|0,n;);return E[0|A]=B,E[A+1|0]=B>>>8,E[A+2|0]=B>>>16,E[A+3|0]=B>>>24,E[A+28|0]=Q,E[A+29|0]=Q>>>8,E[A+30|0]=Q>>>16,E[A+31|0]=Q>>>24,E[A+24|0]=o,E[A+25|0]=o>>>8,E[A+26|0]=o>>>16,E[A+27|0]=o>>>24,E[A+20|0]=i,E[A+21|0]=i>>>8,E[A+22|0]=i>>>16,E[A+23|0]=i>>>24,E[A+16|0]=I,E[A+17|0]=I>>>8,E[A+18|0]=I>>>16,E[A+19|0]=I>>>24,E[A+12|0]=C,E[A+13|0]=C>>>8,E[A+14|0]=C>>>16,E[A+15|0]=C>>>24,E[A+8|0]=r,E[A+9|0]=r>>>8,E[A+10|0]=r>>>16,E[A+11|0]=r>>>24,E[A+4|0]=f,E[A+5|0]=f>>>8,E[A+6|0]=f>>>16,E[A+7|0]=f>>>24,0}function R(A,I,g,C,B,i,E){var a=0,n=0,r=0,f=0,t=0,e=0,c=0;if(I-65>>>0<4294967232|E>>>0>64)A=-1;else {e=a=D,D=a=a-512&-64;A:{I:if(!(!(!(C|B)|g)|!A|((n=255&I)-65&255)>>>0<=191|!(!(I=255&E)||i)|I>>>0>=65)){if(I){if(!i)break I;MA(a- -64|0,0,293),o[a+56>>2]=327033209,o[a+60>>2]=1541459225,o[a+48>>2]=-79577749,o[a+52>>2]=528734635,o[a+40>>2]=725511199,o[a+44>>2]=-1694144372,o[a+32>>2]=-1377402159,o[a+36>>2]=1359893119,o[a+24>>2]=1595750129,o[a+28>>2]=-1521486534,o[a+16>>2]=-23791573,o[a+20>>2]=1013904242,o[a+8>>2]=-2067093701,o[a+12>>2]=-1150833019,o[a>>2]=-222443256^(I<<8|n),o[a+4>>2]=I>>>24^1779033703,MA((E=a+384|0)+I|0,0,128-I|0),HA(E,i,I),HA(a+96|0,E,128),o[a+352>>2]=128,$A(E,128),I=128;}else MA(a- -64|0,0,293),o[a+56>>2]=327033209,o[a+60>>2]=1541459225,o[a+48>>2]=-79577749,o[a+52>>2]=528734635,o[a+40>>2]=725511199,o[a+44>>2]=-1694144372,o[a+32>>2]=-1377402159,o[a+36>>2]=1359893119,o[a+24>>2]=1595750129,o[a+28>>2]=-1521486534,o[a+16>>2]=-23791573,o[a+20>>2]=1013904242,o[a+8>>2]=-2067093701,o[a+12>>2]=-1150833019,o[a>>2]=-222443256^n,o[a+4>>2]=1779033703,I=0;g:if(C|B)for(c=a+224|0,r=a+96|0;;){if(E=I+r|0,!B&C>>>0<=(i=256-I|0)>>>0){HA(E,g,C),o[a+352>>2]=C+o[a+352>>2];break g}if(HA(E,g,i),o[a+352>>2]=i+o[a+352>>2],f=I=o[a+68>>2],I=(t=(E=o[a+64>>2])+128|0)>>>0<128?I+1|0:I,o[a+64>>2]=t,o[a+68>>2]=I,I=o[a+76>>2],I=(f=E=-1==(0|f)&E>>>0>4294967167)>>>0>(E=E+o[a+72>>2]|0)>>>0?I+1|0:I,o[a+72>>2]=E,o[a+76>>2]=I,h(a,r),HA(r,c,128),I=o[a+352>>2]-128|0,o[a+352>>2]=I,g=g+i|0,!((B=B-(C>>>0<i>>>0)|0)|(C=C-i|0)))break}G(a,A,n),D=e;break A}mA(),Q();}A=0;}return A}function x(A,I,g,C){var B=0,Q=0,i=0,n=0,r=0,f=0,t=0,e=0,c=0,y=0,D=0,w=0;A:{if((i=o[A+56>>2])|(B=o[A+60>>2])){if(c=Q=16-i|0,r=(Q=(0|(n=0-((i>>>0>16)+B|0)|0))==(0|C)&g>>>0>Q>>>0|C>>>0>n>>>0)?c:g,c=Q=Q?n:C,Q|r){if(Q=0,i=0,!c&r>>>0>=4|c)for(f=-4&r,n=A- -64|0;B=Q+o[A+56>>2]|0,E[B+n|0]=a[I+Q|0],B=(y=1|Q)+o[A+56>>2]|0,E[B+n|0]=a[I+y|0],B=(y=2|Q)+o[A+56>>2]|0,E[B+n|0]=a[I+y|0],B=(y=3|Q)+o[A+56>>2]|0,E[B+n|0]=a[I+y|0],B=i,i=(Q=Q+4|0)>>>0<4?B+1|0:B,B=t,t=B=(e=e+4|0)>>>0<4?B+1|0:B,(0|e)!=(0|f)|(0|c)!=(0|B););if(n=B=0,B|(t=3&r))for(;e=Q+o[A+56>>2]|0,E[(A+e|0)- -64|0]=a[I+Q|0],i=(Q=Q+1|0)?i:i+1|0,B=w,w=B=(D=D+1|0)?B:B+1|0,(0|t)!=(0|D)|(0|n)!=(0|B););i=o[A+56>>2],B=o[A+60>>2];}if(B=B+c|0,B=(i=i+r|0)>>>0<r>>>0?B+1|0:B,o[A+56>>2]=i,o[A+60>>2]=B,!B&i>>>0<16)break A;N(A,A- -64|0,16,0),o[A+56>>2]=0,o[A+60>>2]=0,g=(i=g)-r|0,C=C-((i>>>0<r>>>0)+c|0)|0,I=I+r|0;}if(!C&g>>>0>=16|C&&(N(A,I,i=-16&g,C),g&=15,C=0,I=I+i|0),g|C){if(D=0,w=0,Q=0,i=0,!C&g>>>0>=4|C)for(r=12&g,c=0,n=A- -64|0,e=0,t=0;B=Q+o[A+56>>2]|0,E[B+n|0]=a[I+Q|0],B=(f=1|Q)+o[A+56>>2]|0,E[B+n|0]=a[I+f|0],B=(f=2|Q)+o[A+56>>2]|0,E[B+n|0]=a[I+f|0],B=(f=3|Q)+o[A+56>>2]|0,E[B+n|0]=a[I+f|0],i=(Q=Q+4|0)>>>0<4?i+1|0:i,B=t,t=B=(e=e+4|0)>>>0<4?B+1|0:B,(0|r)!=(0|e)|(0|c)!=(0|B););if(n=B=0,B|(t=3&g))for(;B=Q+o[A+56>>2]|0,E[(A+B|0)- -64|0]=a[I+Q|0],i=(Q=Q+1|0)?i:i+1|0,B=w,w=B=(D=D+1|0)?B:B+1|0,(0|t)!=(0|D)|(0|n)!=(0|B););i=C+o[A+60>>2]|0,i=(I=g+o[A+56>>2]|0)>>>0<g>>>0?i+1|0:i,o[A+56>>2]=I,o[A+60>>2]=i;}}}function j(A,I,g){var C,B=0,Q=0,i=0,E=0,a=0,n=0,r=0,f=0,t=0,e=0,c=0,y=0,D=0,w=0,h=0,s=0,p=0,u=0,k=0;y=o[I+4>>2],B=o[A+4>>2],D=o[I+8>>2],Q=o[A+8>>2],w=o[I+12>>2],i=o[A+12>>2],h=o[I+16>>2],E=o[A+16>>2],s=o[I+20>>2],a=o[A+20>>2],p=o[I+24>>2],n=o[A+24>>2],e=o[I+28>>2],r=o[A+28>>2],u=o[I+32>>2],f=o[A+32>>2],k=o[I+36>>2],t=o[A+36>>2],g=0-g|0,c=o[A>>2],o[A>>2]=g&(c^o[I>>2])^c,o[A+36>>2]=t^g&(t^k),o[A+32>>2]=f^g&(f^u),o[A+28>>2]=r^g&(r^e),o[A+24>>2]=n^g&(n^p),o[A+20>>2]=a^g&(a^s),o[A+16>>2]=E^g&(E^h),o[A+12>>2]=i^g&(i^w),o[A+8>>2]=Q^g&(Q^D),o[A+4>>2]=B^g&(B^y),B=o[A+40>>2],y=o[I+40>>2],Q=o[A+44>>2],D=o[I+44>>2],i=o[A+48>>2],w=o[I+48>>2],E=o[A+52>>2],h=o[I+52>>2],a=o[A+56>>2],s=o[I+56>>2],n=o[A+60>>2],p=o[I+60>>2],r=o[(e=A- -64|0)>>2],u=o[I- -64>>2],f=o[A+68>>2],k=o[I+68>>2],t=o[A+72>>2],c=o[I+72>>2],C=o[A+76>>2],o[A+76>>2]=C^g&(o[I+76>>2]^C),o[A+72>>2]=t^g&(t^c),o[A+68>>2]=f^g&(f^k),o[e>>2]=r^g&(r^u),o[A+60>>2]=n^g&(n^p),o[A+56>>2]=a^g&(a^s),o[A+52>>2]=E^g&(E^h),o[A+48>>2]=i^g&(i^w),o[A+44>>2]=Q^g&(Q^D),o[A+40>>2]=B^g&(B^y),B=o[A+80>>2],y=o[I+80>>2],Q=o[A+84>>2],D=o[I+84>>2],i=o[A+88>>2],w=o[I+88>>2],E=o[A+92>>2],h=o[I+92>>2],a=o[A+96>>2],s=o[I+96>>2],n=o[A+100>>2],p=o[I+100>>2],r=o[A+104>>2],e=o[I+104>>2],f=o[A+108>>2],u=o[I+108>>2],t=o[A+112>>2],k=o[I+112>>2],c=o[I+116>>2],I=o[A+116>>2],o[A+116>>2]=g&(c^I)^I,o[A+112>>2]=t^g&(t^k),o[A+108>>2]=f^g&(f^u),o[A+104>>2]=r^g&(r^e),o[A+100>>2]=n^g&(n^p),o[A+96>>2]=a^g&(a^s),o[A+92>>2]=E^g&(E^h),o[A+88>>2]=i^g&(i^w),o[A+84>>2]=Q^g&(Q^D),o[A+80>>2]=B^g&(B^y);}function X(A,I){var g,C,B=0;for(D=g=D-192|0,S(C=g+144|0,I),S(B=g+96|0,C),S(B,B),F(B,I,B),F(C,C,B),S(I=g+48|0,C),F(B,B,I),S(I,B),S(I,I),S(I,I),S(I,I),S(I,I),F(B,I,B),S(I,B),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),F(I,I,B),S(g,I),S(g,g),S(g,g),S(g,g),S(g,g),S(g,g),S(g,g),S(g,g),S(g,g),S(g,g),S(g,g),S(g,g),S(g,g),S(g,g),S(g,g),S(g,g),S(g,g),S(g,g),S(g,g),S(g,g),F(I,g,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),F(B,I,B),S(I,B),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),F(I,I,B),S(g,I),I=1;S(g,g),100!=(0|(I=I+1|0)););F(I=g+48|0,g,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),S(I,I),F(B=g+96|0,I,B),S(B,B),S(B,B),S(B,B),S(B,B),S(B,B),F(A,B,g+144|0),D=g+192|0;}function q(A,I,g){var C,B=0,Q=0,i=0,E=0,a=0,n=0,f=0,t=0;D=C=D-128|0,o[A>>2]=1,o[A+4>>2]=0,o[A+8>>2]=0,o[A+12>>2]=0,o[A+16>>2]=0,o[A+20>>2]=0,o[A+24>>2]=0,o[A+28>>2]=0,o[A+32>>2]=0,o[A+36>>2]=0,o[A+40>>2]=1,MA(A+44|0,0,76),j(A,B=r(I,960)+2704|0,(255&(1^(I=g-((g>>31&g)<<1)|0)))-1>>>31|0),j(A,B+120|0,(255&(2^I))-1>>>31|0),j(A,B+240|0,(255&(3^I))-1>>>31|0),j(A,B+360|0,(255&(4^I))-1>>>31|0),j(A,B+480|0,(255&(5^I))-1>>>31|0),j(A,B+600|0,(255&(6^I))-1>>>31|0),j(A,B+720|0,(255&(7^I))-1>>>31|0),j(A,B+840|0,(255&(8^I))-1>>>31|0),Q=o[A+40>>2],i=o[A+44>>2],E=o[A+48>>2],a=o[A+52>>2],n=o[A+56>>2],f=o[A+60>>2],t=o[(I=A- -64|0)>>2],B=o[I+4>>2],I=o[A+76>>2],o[C+40>>2]=o[A+72>>2],o[C+44>>2]=I,o[C+32>>2]=t,o[C+36>>2]=B,o[C+24>>2]=n,o[C+28>>2]=f,o[C+16>>2]=E,o[C+20>>2]=a,o[C+8>>2]=Q,o[C+12>>2]=i,Q=o[A+8>>2],i=o[A+12>>2],E=o[A+16>>2],a=o[A+20>>2],n=o[A+24>>2],f=o[A+28>>2],t=o[A>>2],B=o[A+4>>2],I=o[A+36>>2],o[C+80>>2]=o[A+32>>2],o[C+84>>2]=I,o[C+72>>2]=n,o[C+76>>2]=f,o[(I=C- -64|0)>>2]=E,o[I+4>>2]=a,o[C+56>>2]=Q,o[C+60>>2]=i,o[C+48>>2]=t,o[C+52>>2]=B,Q=o[A+80>>2],i=o[A+84>>2],E=o[A+88>>2],a=o[A+92>>2],n=o[A+96>>2],f=o[A+100>>2],t=o[A+104>>2],B=o[A+108>>2],I=o[A+112>>2],o[C+124>>2]=0-o[A+116>>2],o[C+120>>2]=0-I,o[C+116>>2]=0-B,o[C+112>>2]=0-t,o[C+108>>2]=0-f,o[C+104>>2]=0-n,o[C+100>>2]=0-a,o[C+96>>2]=0-E,o[C+92>>2]=0-i,o[C+88>>2]=0-Q,j(A,C+8|0,(128&g)>>>7|0),D=C+128|0;}function z(A,I,g,C){var B=0,Q=0,i=0,o=0,n=0,r=0,f=0;if(g|C)A:for(f=A+224|0,n=A+96|0,Q=a[A+352|0]|a[A+353|0]<<8|a[A+354|0]<<16|a[A+355|0]<<24;;){if(B=Q+n|0,!C&g>>>0<=(i=256-Q|0)>>>0){HA(B,I,g),I=(a[A+352|0]|a[A+353|0]<<8|a[A+354|0]<<16|a[A+355|0]<<24)+g|0,E[A+352|0]=I,E[A+353|0]=I>>>8,E[A+354|0]=I>>>16,E[A+355|0]=I>>>24;break A}if(HA(B,I,i),B=(a[A+352|0]|a[A+353|0]<<8|a[A+354|0]<<16|a[A+355|0]<<24)+i|0,E[A+352|0]=B,E[A+353|0]=B>>>8,E[A+354|0]=B>>>16,E[A+355|0]=B>>>24,r=Q=a[A+68|0]|a[A+69|0]<<8|a[A+70|0]<<16|a[A+71|0]<<24,Q=(o=128+(B=a[A+64|0]|a[A+65|0]<<8|a[A+66|0]<<16|a[A+67|0]<<24)|0)>>>0<128?Q+1|0:Q,E[A+64|0]=o,E[A+65|0]=o>>>8,E[A+66|0]=o>>>16,E[A+67|0]=o>>>24,E[A+68|0]=Q,E[A+69|0]=Q>>>8,E[A+70|0]=Q>>>16,E[A+71|0]=Q>>>24,Q=a[A+76|0]|a[A+77|0]<<8|a[A+78|0]<<16|a[A+79|0]<<24,Q=(r=B=-1==(0|r)&B>>>0>4294967167)>>>0>(B=B+(a[A+72|0]|a[A+73|0]<<8|a[A+74|0]<<16|a[A+75|0]<<24)|0)>>>0?Q+1|0:Q,E[A+72|0]=B,E[A+73|0]=B>>>8,E[A+74|0]=B>>>16,E[A+75|0]=B>>>24,E[A+76|0]=Q,E[A+77|0]=Q>>>8,E[A+78|0]=Q>>>16,E[A+79|0]=Q>>>24,h(A,n),HA(n,f,128),B=Q=(a[A+352|0]|a[A+353|0]<<8|a[A+354|0]<<16|a[A+355|0]<<24)-128|0,E[A+352|0]=B,E[A+353|0]=B>>>8,E[A+354|0]=B>>>16,E[A+355|0]=B>>>24,I=I+i|0,!((C=C-(g>>>0<i>>>0)|0)|(g=g-i|0)))break}return 0}function V(A,I){var g,C=0,B=0,Q=0,i=0,E=0,a=0,n=0,r=0,f=0,t=0,e=0,c=0,y=0,D=0,w=0,h=0,s=0,p=0;C=o[I+40>>2],B=o[I+4>>2],Q=o[I+44>>2],i=o[I+8>>2],E=o[I+48>>2],a=o[I+12>>2],n=o[I+52>>2],r=o[I+16>>2],f=o[I+56>>2],e=o[I+20>>2],c=o[I+60>>2],y=o[I+24>>2],D=o[(t=I- -64|0)>>2],w=o[I+28>>2],h=o[I+68>>2],s=o[I+32>>2],p=o[I+72>>2],g=o[I>>2],o[A+36>>2]=o[I+36>>2]+o[I+76>>2],o[A+32>>2]=s+p,o[A+28>>2]=w+h,o[A+24>>2]=y+D,o[A+20>>2]=e+c,o[A+16>>2]=r+f,o[A+12>>2]=a+n,o[A+8>>2]=i+E,o[A+4>>2]=B+Q,o[A>>2]=C+g,C=o[I+40>>2],B=o[I+4>>2],Q=o[I+44>>2],i=o[I+8>>2],E=o[I+48>>2],a=o[I+12>>2],n=o[I+52>>2],r=o[I+16>>2],f=o[I+56>>2],e=o[I+20>>2],c=o[I+60>>2],y=o[I+24>>2],t=o[t>>2],D=o[I+28>>2],w=o[I+68>>2],h=o[I+32>>2],s=o[I+72>>2],p=o[I>>2],o[A+76>>2]=o[I+76>>2]-o[I+36>>2],o[A+72>>2]=s-h,o[A+68>>2]=w-D,o[A- -64>>2]=t-y,o[A+60>>2]=c-e,o[A+56>>2]=f-r,o[A+52>>2]=n-a,o[A+48>>2]=E-i,o[A+44>>2]=Q-B,o[A+40>>2]=C-p,C=o[I+80>>2],B=o[I+84>>2],Q=o[I+88>>2],i=o[I+92>>2],E=o[I+96>>2],a=o[I+100>>2],n=o[I+104>>2],r=o[I+108>>2],f=o[I+116>>2],o[A+112>>2]=o[I+112>>2],o[A+116>>2]=f,o[A+104>>2]=n,o[A+108>>2]=r,o[A+96>>2]=E,o[A+100>>2]=a,o[A+88>>2]=Q,o[A+92>>2]=i,o[A+80>>2]=C,o[A+84>>2]=B,F(A+120|0,I+120|0,1440);}function O(A,I){var g,C,B,Q,i,a=0,n=0,f=0,t=0,e=0,c=0,y=0,D=0,w=0,h=0;(f=o[A+56>>2])|(a=o[A+60>>2])&&(E[f+(n=A- -64|0)|0]=1,!((h=f+1|0)?a:a+1|0)&h>>>0<=15&&MA(65+(A+f|0)|0,0,15-f|0),E[A+80|0]=1,N(A,n,16,0)),h=o[A+52>>2],D=o[A+48>>2],n=o[A+44>>2],f=o[A+24>>2],e=o[A+28>>2]+(f>>>26|0)|0,t=o[A+32>>2]+(e>>>26|0)|0,g=o[A+36>>2]+(t>>>26|0)|0,a=(y=(f=(f=(67108863&f)+((c=o[A+20>>2]+r(g>>>26|0,5)|0)>>>26|0)|0)&(e=(t=(i=(67108863&g)+((Q=(C=67108863&t)+((B=(w=67108863&e)+((c=f+((a=5+(y=67108863&c)|0)>>>26|0)|0)>>>26|0)|0)>>>26|0)|0)>>>26|0)|0)-67108864|0)>>31)|c&(t=67108863&(c=(t>>>31|0)-1|0)))<<26|a&t|e&y)+o[A+40>>2]|0,E[0|I]=a,E[I+1|0]=a>>>8,E[I+2|0]=a>>>16,E[I+3|0]=a>>>24,y=a>>>0<y>>>0,a=(w=e&w|t&B)<<20|f>>>6,f=0,a=(n=a+n|0)>>>0<a>>>0?1:f,a=(f=n+y|0)>>>0<n>>>0?a+1|0:a,E[(n=I)+4|0]=f,E[n+5|0]=f>>>8,E[n+6|0]=f>>>16,E[n+7|0]=f>>>24,f=0,n=(n=(t=e&C|t&Q)<<14|w>>>12)>>>0>(D=n+D|0)>>>0?1:f,f=D,D=a,f=(a=f+a|0)>>>0<D>>>0?n+1|0:n,E[(n=I)+8|0]=a,E[n+9|0]=a>>>8,E[n+10|0]=a>>>16,E[n+11|0]=a>>>24,a=n=(c&i|e&g)<<8|t>>>18,a=(a=f)+(n=n+h|0)|0,E[I+12|0]=a,E[I+13|0]=a>>>8,E[I+14|0]=a>>>16,E[I+15|0]=a>>>24,$A(A,88);}function T(A,I,g){var C,B=0;return D=C=D-16|0,E[C+15|0]=0,B=-1,0|nI[o[8722]](A,I,g)||(E[C+15|0]=a[0|A]|a[C+15|0],E[C+15|0]=a[A+1|0]|a[C+15|0],E[C+15|0]=a[A+2|0]|a[C+15|0],E[C+15|0]=a[A+3|0]|a[C+15|0],E[C+15|0]=a[A+4|0]|a[C+15|0],E[C+15|0]=a[A+5|0]|a[C+15|0],E[C+15|0]=a[A+6|0]|a[C+15|0],E[C+15|0]=a[A+7|0]|a[C+15|0],E[C+15|0]=a[A+8|0]|a[C+15|0],E[C+15|0]=a[A+9|0]|a[C+15|0],E[C+15|0]=a[A+10|0]|a[C+15|0],E[C+15|0]=a[A+11|0]|a[C+15|0],E[C+15|0]=a[A+12|0]|a[C+15|0],E[C+15|0]=a[A+13|0]|a[C+15|0],E[C+15|0]=a[A+14|0]|a[C+15|0],E[C+15|0]=a[A+15|0]|a[C+15|0],E[C+15|0]=a[A+16|0]|a[C+15|0],E[C+15|0]=a[A+17|0]|a[C+15|0],E[C+15|0]=a[A+18|0]|a[C+15|0],E[C+15|0]=a[A+19|0]|a[C+15|0],E[C+15|0]=a[A+20|0]|a[C+15|0],E[C+15|0]=a[A+21|0]|a[C+15|0],E[C+15|0]=a[A+22|0]|a[C+15|0],E[C+15|0]=a[A+23|0]|a[C+15|0],E[C+15|0]=a[A+24|0]|a[C+15|0],E[C+15|0]=a[A+25|0]|a[C+15|0],E[C+15|0]=a[A+26|0]|a[C+15|0],E[C+15|0]=a[A+27|0]|a[C+15|0],E[C+15|0]=a[A+28|0]|a[C+15|0],E[C+15|0]=a[A+29|0]|a[C+15|0],E[C+15|0]=a[A+30|0]|a[C+15|0],E[C+15|0]=a[A+31|0]|a[C+15|0],B=(a[C+15|0]<<23)-8388608>>31),D=C+16|0,B}function W(A,I){var g,C,B,Q,i,a,n,f=0,t=0;C=o[I+32>>2],B=o[I+28>>2],Q=o[I+24>>2],i=o[I+20>>2],a=o[I+16>>2],n=o[I+12>>2],f=o[I+4>>2],t=o[I>>2],g=o[I+36>>2],I=o[I+8>>2],t=r((C+(B+(Q+(i+(a+(n+((f+(t+(r(g,19)+16777216>>>25|0)>>26)>>25)+I>>26)>>25)>>26)>>25)>>26)>>25)>>26)+g>>25,19)+t|0,E[0|A]=t,E[A+2|0]=t>>>16,E[A+1|0]=t>>>8,f=f+(t>>26)|0,E[A+5|0]=f>>>14,E[A+4|0]=f>>>6,E[A+3|0]=t>>>24&3|f<<2,I=I+(f>>25)|0,E[A+8|0]=I>>>13,E[A+7|0]=I>>>5,E[A+6|0]=I<<3|(29360128&f)>>>22,t=(I>>26)+n|0,E[A+11|0]=t>>>11,E[A+10|0]=t>>>3,E[A+9|0]=t<<5|(65011712&I)>>>21,f=(t>>25)+a|0,E[A+15|0]=f>>>18,E[A+14|0]=f>>>10,E[A+13|0]=f>>>2,I=(f>>26)+i|0,E[A+16|0]=I,E[A+12|0]=f<<6|(33030144&t)>>>19,E[A+18|0]=I>>>16,E[A+17|0]=I>>>8,f=(I>>25)+Q|0,E[A+21|0]=f>>>15,E[A+20|0]=f>>>7,E[A+19|0]=I>>>24&1|f<<1,I=(f>>26)+B|0,E[A+24|0]=I>>>13,E[A+23|0]=I>>>5,E[A+22|0]=I<<3|(58720256&f)>>>23,f=(I>>25)+C|0,E[A+27|0]=f>>>12,E[A+26|0]=f>>>4,E[A+25|0]=f<<4|(31457280&I)>>>21,I=g+(f>>26)|0,E[A+30|0]=I>>>10,E[A+29|0]=I>>>2,E[A+31|0]=(33292288&I)>>>18,E[A+28|0]=I<<6|(66060288&f)>>>20;}function Z(A,I){var g;return o[12+(g=D-16|0)>>2]=A,o[g+8>>2]=I,o[g+4>>2]=0,o[g+4>>2]=o[g+4>>2]|a[o[g+12>>2]]^a[o[g+8>>2]],o[g+4>>2]=o[g+4>>2]|a[o[g+12>>2]+1|0]^a[o[g+8>>2]+1|0],o[g+4>>2]=o[g+4>>2]|a[o[g+12>>2]+2|0]^a[o[g+8>>2]+2|0],o[g+4>>2]=o[g+4>>2]|a[o[g+12>>2]+3|0]^a[o[g+8>>2]+3|0],o[g+4>>2]=o[g+4>>2]|a[o[g+12>>2]+4|0]^a[o[g+8>>2]+4|0],o[g+4>>2]=o[g+4>>2]|a[o[g+12>>2]+5|0]^a[o[g+8>>2]+5|0],o[g+4>>2]=o[g+4>>2]|a[o[g+12>>2]+6|0]^a[o[g+8>>2]+6|0],o[g+4>>2]=o[g+4>>2]|a[o[g+12>>2]+7|0]^a[o[g+8>>2]+7|0],o[g+4>>2]=o[g+4>>2]|a[o[g+12>>2]+8|0]^a[o[g+8>>2]+8|0],o[g+4>>2]=o[g+4>>2]|a[o[g+12>>2]+9|0]^a[o[g+8>>2]+9|0],o[g+4>>2]=o[g+4>>2]|a[o[g+12>>2]+10|0]^a[o[g+8>>2]+10|0],o[g+4>>2]=o[g+4>>2]|a[o[g+12>>2]+11|0]^a[o[g+8>>2]+11|0],o[g+4>>2]=o[g+4>>2]|a[o[g+12>>2]+12|0]^a[o[g+8>>2]+12|0],o[g+4>>2]=o[g+4>>2]|a[o[g+12>>2]+13|0]^a[o[g+8>>2]+13|0],o[g+4>>2]=o[g+4>>2]|a[o[g+12>>2]+14|0]^a[o[g+8>>2]+14|0],o[g+4>>2]=o[g+4>>2]|a[o[g+12>>2]+15|0]^a[o[g+8>>2]+15|0],(o[g+4>>2]-1>>>8&1)-1|0}function $(A,I){var g,C=0,B=0;g=I;A:if(C=255&I){if(3&A)for(;;){if(!(I=a[0|A])|(0|I)==(255&g))break A;if(!(3&(A=A+1|0)))break}I:if(!((-1^(I=o[A>>2]))&I-16843009&-2139062144))for(C=r(C,16843009);;){if((-1^(I^=C))&I-16843009&-2139062144)break I;if(I=o[A+4>>2],A=A+4|0,I-16843009&(-1^I)&-2139062144)break}for(;I=A,(C=a[0|A])&&(A=I+1|0,(0|C)!=(255&g)););A=I;}else {C=A;I:{if(3&A)for(;;){if(!a[0|A])break I;if(!(3&(A=A+1|0)))break}for(;I=A,A=A+4|0,!((-1^(B=o[I>>2]))&B-16843009&-2139062144););for(;I=(A=I)+1|0,a[0|A];);}A=C+(A-C|0)|0;}return a[0|A]==(255&g)?A:0}function AA(A,I){var g,C=0,B=0,Q=0,i=0,o=0;for(D=g=D-192|0,EA(A),MA(g- -64|0,54,128);E[0|(C=(i=g- -64|0)+B|0)]=a[0|C]^a[I+B|0],E[0|(Q=(C=1|B)+i|0)]=a[0|Q]^a[I+C|0],E[0|(Q=(C=2|B)+i|0)]=a[0|Q]^a[I+C|0],E[0|(C=(C=i)+(i=3|B)|0)]=a[0|C]^a[I+i|0],B=B+4|0,32!=(0|(o=o+4|0)););for(m(A,B=g- -64|0,128,0),EA(i=A+208|0),MA(B,92,128),B=0,o=0;E[0|(C=(A=g- -64|0)+B|0)]=a[0|C]^a[I+B|0],E[0|(Q=(C=1|B)+A|0)]=a[0|Q]^a[I+C|0],E[0|(Q=(C=2|B)+A|0)]=a[0|Q]^a[I+C|0],E[0|(C=(C=A)+(A=3|B)|0)]=a[0|C]^a[A+I|0],B=B+4|0,32!=(0|(o=o+4|0)););m(i,A=g- -64|0,128,0),$A(A,128),$A(g,64),D=g+192|0;}function IA(A,I,g,C,B,Q,i){var E,a,n,r,f,t=0;return D=E=D-352|0,L(E,Q,i),!((!B&C>>>0>A-g>>>0|0!=(0|B))&A>>>0>g>>>0)&(!B&C>>>0<=g-A>>>0|A>>>0>=g>>>0)||(g=kA(A,g,C)),o[E+56>>2]=0,o[E+60>>2]=0,o[E+48>>2]=0,o[E+52>>2]=0,o[E+40>>2]=0,o[E+44>>2]=0,o[E+32>>2]=0,o[E+36>>2]=0,i=(t=!B&C>>>0>=32|0!=(0|B))?32:C,f=t=t?0:B,(n=!(i|t))||HA(E- -64|0,g,i),LA(a=E+32|0,a,r=i+32|0,t=r>>>0<32?t+1|0:t,Q=Q+16|0,E),OA(E+96|0,a),n||HA(A,E- -64|0,i),$A(E+32|0,64),!B&C>>>0>=33|B&&vA(A+i|0,g+i|0,C-i|0,B-(f+(C>>>0<i>>>0)|0)|0,Q,E),$A(E,32),zA(g=E+96|0,A,C,B),TA(g,I),$A(g,256),D=E+352|0,0}function gA(A,I,g,C,B,Q,i){var E,a,n=0,r=0;D=E=D-96|0,L(E,Q,i),i=E+32|0,a=Q+16|0,nI[o[8724]](i,32,0,a,E),Q=-1;A:{if(!(0|nI[o[8718]](g,I,C,B,i))){if(Q=0,!A)break A;!((!B&C>>>0>I-A>>>0|0!=(0|B))&A>>>0<I>>>0)&(!B&C>>>0<=A-I>>>0|A>>>0<=I>>>0)||(I=kA(A,I,C)),(i=(g=!B&C>>>0>=32|0!=(0|B))?32:C)|(g=g?0:B)?(r=HA(E- -64|0,I,i),LA(Q=E+32|0,Q,n=i+32|0,n>>>0<32?g+1|0:g,a,E),HA(A,r,i)):LA(Q=E+32|0,Q,n=i+32|0,n>>>0<32?g+1|0:g,a,E),$A(E+32|0,64),Q=0,!B&C>>>0<33||vA(A+i|0,I+i|0,C-i|0,B-(g+(C>>>0<i>>>0)|0)|0,a,E);}$A(E,32);}return D=E+96|0,Q}function CA(A,I,g,C,B,Q,i,E,n,r){var f,t;return D=f=D-400|0,o[f+4>>2]=0,d(t=f+16|0,n,r),r=a[n+20|0]|a[n+21|0]<<8|a[n+22|0]<<16|a[n+23|0]<<24,o[f+8>>2]=a[n+16|0]|a[n+17|0]<<8|a[n+18|0]<<16|a[n+19|0]<<24,o[f+12>>2]=r,XA(r=f+80|0,64,f+4|0,t),OA(n=f+144|0,r),$A(r,64),zA(n,Q,i,E),zA(n,34816,0-i&15,0),zA(n,I,g,C),zA(n,34816,0-g&15,0),o[f+72>>2]=i,o[f+76>>2]=E,zA(n,Q=f+72|0,8,0),o[f+72>>2]=g,o[f+76>>2]=C,zA(n,Q,8,0),TA(n,Q=f+48|0),$A(n,256),n=Z(Q,B),$A(Q,16),A&&(n?(MA(A,0,g),n=-1):(_A(A,I,g,C,f+4|0,f+16|0),n=0)),$A(f+16|0,32),D=f+400|0,n}function BA(A,I,g,C,B,Q,i,E,n,r,f){var t,e,c;return D=t=D-384|0,o[t+4>>2]=0,d(e=t+16|0,r,f),f=a[r+20|0]|a[r+21|0]<<8|a[r+22|0]<<16|a[r+23|0]<<24,o[t+8>>2]=a[r+16|0]|a[r+17|0]<<8|a[r+18|0]<<16|a[r+19|0]<<24,o[t+12>>2]=f,XA(f=t- -64|0,64,c=t+4|0,e),OA(r=t+128|0,f),$A(f,64),zA(r,i,E,n),zA(r,34816,0-E&15,0),_A(A,C,B,Q,c,e),zA(r,A,B,Q),zA(r,34816,0-B&15,0),o[t+56>>2]=E,o[t+60>>2]=n,zA(r,A=t+56|0,8,0),o[t+56>>2]=B,o[t+60>>2]=Q,zA(r,A,8,0),TA(r,I),$A(r,256),g&&(o[g>>2]=16,o[g+4>>2]=0),$A(t+16|0,32),D=t+384|0,0}function QA(A,I,g,C){var B,Q=0;return D=B=D-208|0,o[B+72>>2]=0,o[B+76>>2]=0,Q=o[8487],o[B+8>>2]=o[8486],o[B+12>>2]=Q,Q=o[8489],o[B+16>>2]=o[8488],o[B+20>>2]=Q,Q=o[8491],o[B+24>>2]=o[8490],o[B+28>>2]=Q,Q=o[8493],o[B+32>>2]=o[8492],o[B+36>>2]=Q,Q=o[8495],o[B+40>>2]=o[8494],o[B+44>>2]=Q,Q=o[8497],o[B+48>>2]=o[8496],o[B+52>>2]=Q,Q=o[8499],o[B+56>>2]=o[8498],o[B+60>>2]=Q,o[B+64>>2]=0,o[B+68>>2]=0,Q=o[8485],o[B>>2]=o[8484],o[B+4>>2]=Q,m(B,I,g,C),M(B,A),D=B+208|0,0}function iA(A,I){var g,C=0,B=0,Q=0;if(E[15+(g=D-16|0)|0]=0,I){if(B=3&I,I>>>0>=4)for(Q=-4&I,I=0;E[g+15|0]=a[A+C|0]|a[g+15|0],E[g+15|0]=a[(1|C)+A|0]|a[g+15|0],E[g+15|0]=a[(2|C)+A|0]|a[g+15|0],E[g+15|0]=a[(3|C)+A|0]|a[g+15|0],C=C+4|0,(0|Q)!=(0|(I=I+4|0)););if(B)for(I=0;E[g+15|0]=a[A+C|0]|a[g+15|0],C=C+1|0,(0|B)!=(0|(I=I+1|0)););}return a[g+15|0]-1>>>8&1}function EA(A){var I=0;o[A+64>>2]=0,o[A+68>>2]=0,o[A+72>>2]=0,o[A+76>>2]=0,I=o[8485],o[A>>2]=o[8484],o[A+4>>2]=I,I=o[8487],o[A+8>>2]=o[8486],o[A+12>>2]=I,I=o[8489],o[A+16>>2]=o[8488],o[A+20>>2]=I,I=o[8491],o[A+24>>2]=o[8490],o[A+28>>2]=I,I=o[8493],o[A+32>>2]=o[8492],o[A+36>>2]=I,I=o[8495],o[A+40>>2]=o[8494],o[A+44>>2]=I,I=o[8497],o[A+48>>2]=o[8496],o[A+52>>2]=I,I=o[8499],o[A+56>>2]=o[8498],o[A+60>>2]=I;}function oA(A,I,g){var C,B=0,Q=0;if(o[12+(C=D-16|0)>>2]=A,o[C+8>>2]=I,A=0,E[C+7|0]=0,g){if(I=1&g,1!=(0|g))for(Q=-2&g,g=0;E[C+7|0]=a[C+7|0]|a[o[C+12>>2]+A|0]^a[o[C+8>>2]+A|0],B=1|A,E[C+7|0]=a[C+7|0]|a[B+o[C+12>>2]|0]^a[o[C+8>>2]+B|0],A=A+2|0,(0|Q)!=(0|(g=g+2|0)););I&&(E[C+7|0]=a[C+7|0]|a[o[C+12>>2]+A|0]^a[o[C+8>>2]+A|0]);}return (a[C+7|0]-1>>>8&1)-1|0}function aA(A){for(var I=0,g=0,C=0,B=0,Q=0,i=0,E=0,o=0,n=0,r=0;B=(g=a[A+C|0])^a[0|(I=C+2448|0)]|B,Q=g^a[I+192|0]|Q,i=g^a[I+160|0]|i,E=g^a[I+128|0]|E,o=g^a[I+96|0]|o,n=g^a[I- -64|0]|n,r=g^a[I+32|0]|r,31!=(0|(C=C+1|0)););return ((255&((I=127^(A=127&a[A+31|0]))|Q))-1|(255&(I|i))-1|(255&(I|E))-1|(255&(122^A|o))-1|(255&(5^A|n))-1|(255&(A|r))-1|(255&(A|B))-1)>>>8&1}function nA(A,I,g){var C=0,B=0,Q=0,i=0;return B=31&(Q=i=63&g),Q=Q>>>0>=32?-1>>>B|0:(C=-1>>>B|0)|(1<<B)-1<<32-B,Q&=A,C&=I,B=31&i,i>>>0>=32?(C=Q<<B,i=0):(C=(1<<B)-1&Q>>>32-B|C<<B,i=Q<<B),Q=C,C=31&(B=0-g&63),B>>>0>=32?(C=-1<<C,g=0):C=(g=-1<<C)|(1<<C)-1&-1>>>32-C,A&=g,I&=C,C=31&B,B>>>0>=32?(g=0,A=I>>>C|0):(g=I>>>C|0,A=((1<<C)-1&I)<<32-C|A>>>C),w=g|Q,A|i}function rA(A,I,g,C,B,Q,i,E,a,n){var r,f,t;return D=r=D-352|0,XA(t=r+32|0,64,a,n),OA(f=r+96|0,t),$A(t,64),zA(f,Q,i,E),zA(f,33920,0-i&15,0),zA(f,I,g,C),zA(f,33920,0-g&15,0),o[r+24>>2]=i,o[r+28>>2]=E,zA(f,Q=r+24|0,8,0),o[r+24>>2]=g,o[r+28>>2]=C,zA(f,Q,8,0),TA(f,r),$A(f,256),Q=Z(r,B),$A(r,16),A&&(Q?(MA(A,0,g),Q=-1):(wA(A,I,g,C,a,1,n),Q=0)),D=r+352|0,Q}function fA(A,I,g,C,B,Q,i,E,a,n,r){var f,t,e;return D=f=D-336|0,XA(e=f+16|0,64,n,r),OA(t=f+80|0,e),$A(e,64),zA(t,i,E,a),zA(t,33920,0-E&15,0),wA(A,C,B,Q,n,1,r),zA(t,A,B,Q),zA(t,33920,0-B&15,0),o[f+8>>2]=E,o[f+12>>2]=a,zA(t,A=f+8|0,8,0),o[f+8>>2]=B,o[f+12>>2]=Q,zA(t,A,8,0),TA(t,I),$A(t,256),g&&(o[g>>2]=16,o[g+4>>2]=0),D=f+336|0,0}function tA(A,I,g,C,B,Q,i,E,a,n){var r,f,t;return D=r=D-352|0,qA(t=r+32|0,a,n),OA(f=r+96|0,t),$A(t,64),zA(f,Q,i,E),o[r+24>>2]=i,o[r+28>>2]=E,zA(f,Q=r+24|0,8,0),zA(f,I,g,C),o[r+24>>2]=g,o[r+28>>2]=C,zA(f,Q,8,0),TA(f,r),$A(f,256),Q=Z(r,B),$A(r,16),A&&(Q?(MA(A,0,g),Q=-1):(bA(A,I,g,C,a,n),Q=0)),D=r+352|0,Q}function eA(A,I,g,C,B,Q,i,E,a,n,r){var f,t,e;return D=f=D-336|0,qA(e=f+16|0,n,r),OA(t=f+80|0,e),$A(e,64),zA(t,i,E,a),o[f+8>>2]=E,o[f+12>>2]=a,zA(t,i=f+8|0,8,0),bA(A,C,B,Q,n,r),zA(t,A,B,Q),o[f+8>>2]=B,o[f+12>>2]=Q,zA(t,i,8,0),TA(t,I),$A(t,256),g&&(o[g>>2]=16,o[g+4>>2]=0),D=f+336|0,0}function cA(A,I){var g;for(o[12+(g=D-16|0)>>2]=A,o[g+8>>2]=I,A=0,o[g+4>>2]=0;o[g+4>>2]=o[g+4>>2]|a[o[g+12>>2]+A|0]^a[o[g+8>>2]+A|0],I=1|A,o[g+4>>2]=o[g+4>>2]|a[I+o[g+12>>2]|0]^a[I+o[g+8>>2]|0],32!=(0|(A=A+2|0)););return (o[g+4>>2]-1>>>8&1)-1|0}function yA(A){var I=0,g=0,C=0,B=0;for(I=1;I=a[0|(g=A+C|0)]+I|0,E[0|g]=I,I=a[0|(g=(1|C)+A|0)]+(I>>>8|0)|0,E[0|g]=I,I=a[0|(g=(2|C)+A|0)]+(I>>>8|0)|0,E[0|g]=I,I=a[0|(g=(3|C)+A|0)]+(I>>>8|0)|0,E[0|g]=I,I=I>>>8|0,C=C+4|0,4!=(0|(B=B+4|0)););}function DA(A,I,g,C){var B,Q,i,E,o=0,a=0;return E=r(o=g>>>16|0,a=A>>>16|0),o=(65535&(a=((i=r(B=65535&g,Q=65535&A))>>>16|0)+r(a,B)|0))+r(o,Q)|0,w=(r(I,g)+E|0)+r(A,C)+(a>>>16)+(o>>>16)|0,65535&i|o<<16}function wA(A,I,g,C,B,i,E){var a=0,n=0;a=C,1==(((a=(n=g+63|0)>>>0<63?a+1|0:a)>>>6|0)+(0!=(0|(a=(63&a)<<26|n>>>6)))|0)&i>>>0>(n=0-a|0)>>>0|1==(0|C)|C>>>0>1?(mA(),Q()):nI[o[8716]](A,I,g,C,B,i,E);}function hA(A,I){A|=0;var g,C=0,B=0,Q=0;if(D=g=D-16|0,I|=0)for(;E[g+15|0]=0,B=A+C|0,Q=0|t(34904,g+15|0,0),E[0|B]=Q,(0|(C=C+1|0))!=(0|I););D=g+16|0;}function sA(A,I,g,C,B,Q,i){var E,o=0;return D=E=D-32|0,o=-1,!C&g>>>0<16||SA(E,Q,i)||(o=gA(A,I+16|0,I,g-16|0,C-(g>>>0<16)|0,B,E),$A(E,32)),D=E+32|0,o}function pA(A){var I,g;return (A=(I=o[8712])+(g=A+7&-8)|0)>>>0<=I>>>0&&g||A>>>0>rI()<<16>>>0&&!(0|y(0|A))?(o[8916]=48,-1):(o[8712]=A,I)}function uA(A,I){var g,C,B;D=g=D-176|0,X(C=g+96|0,I+80|0),F(B=g+48|0,I,C),F(g,I+40|0,C),W(A,g),W(g+144|0,B),E[A+31|0]=a[A+31|0]^a[g+144|0]<<7,D=g+176|0;}function kA(A,I,g){var C=0;if(A>>>0<I>>>0)return HA(A,I,g);if(g)for(C=A+g|0,I=I+g|0;I=I-1|0,E[0|(C=C-1|0)]=a[0|I],g=g-1|0;);return A}function FA(A,I,g,C,B,i,E){var o,a=0;if(D=o=D-32|0,!C&g>>>0<4294967280)return a=-1,SA(o,i,E)||(a=IA(A+16|0,A,I,g,C,B,o),$A(o,32)),D=o+32|0,a;mA(),Q();}function lA(A,I,g,C,B,Q){return I|=0,0|(!(C|=0)&(g|=0)>>>0>=16|C?gA(A|=0,I+16|0,I,g-16|0,C-(g>>>0<16)|0,B|=0,Q|=0):-1)}function SA(A,I,g){A|=0;var C,B=0;return D=C=D-32|0,B=-1,T(C,g|=0,I|=0)||(B=L(A,34832,C)),D=C+32|0,0|B}function HA(A,I,g){var C=0;if(g)for(C=A;E[0|C]=a[0|I],C=C+1|0,I=I+1|0,g=g-1|0;);return A}function MA(A,I,g){var C=0;if(g)for(C=A;E[0|C]=I,C=C+1|0,g=g-1|0;);return A}function GA(A,I,g){return A|=0,I|=0,(g|=0)>>>0>=256&&(e(1260,1187,107,1067),Q()),0|G(A,I,255&g)}function UA(A,I){var g;D=g=D+-64|0,M(A,g),m(A=A+208|0,g,64,0),M(A,I),$A(g,64),D=g- -64|0;}function JA(A,I,g,C,B,Q,i){return 0|IA(A|=0,I|=0,g|=0,C|=0,B|=0,Q|=0,i|=0)}function NA(A,I,g,C,B,Q,i){return 0|gA(A|=0,I|=0,g|=0,C|=0,B|=0,Q|=0,i|=0)}function YA(A,I){var g=0;return (-1>>>(g=31&I)&A)<<g|((g=A)&-1<<(A=0-I&31))>>>A}function bA(A,I,g,C,B,i){1==(0|C)|C>>>0>1&&(mA(),Q()),nI[o[8715]](A,I,g,C,B,1,0,i);}function _A(A,I,g,C,B,i){1==(0|C)|C>>>0>1&&(mA(),Q()),nI[o[8716]](A,I,g,C,B,1,i);}function KA(){var A;D=A=D-16|0,E[A+15|0]=0,t(34940,A+15|0,0),D=A+16|0;}function PA(A,I,g){return 0|T(A|=0,I|=0,g|=0)}function vA(A,I,g,C,B,Q){nI[o[8725]](A,I,g,C,B,1,0,Q);}function mA(){var A;(A=o[9050])&&nI[0|A](),c(),Q();}function dA(A,I){return A|=0,hA(I|=0,32),0|VA(A,I)}function LA(A,I,g,C,B,Q){nI[o[8725]](A,I,g,C,B,0,0,Q);}function RA(A){return A?31-f(A-1^A)|0:32}function xA(A,I,g,C){nI[o[8716]](A,I,40,0,g,0,C);}function jA(A,I){return 0|VA(A|=0,I|=0)}function XA(A,I,g,C){nI[o[8714]](A,I,0,g,C);}function qA(A,I,g){nI[o[8713]](A,64,0,I,g);}function zA(A,I,g,C){nI[o[8720]](A,I,g,C);}function VA(A,I){return 0|nI[o[8723]](A,I)}function OA(A,I){nI[o[8719]](A,I);}function TA(A,I){nI[o[8721]](A,I);}function WA(A,I,g,C){m(A,I,g,C);}function ZA(A){hA(A|=0,32);}function $A(A,I){MA(A,0,I);}function AI(){return 16}function II(){return 32}function gI(){return 24}function CI(){return -17}function BI(){return 64}function QI(){return 1}function iI(){return 3}function EI(){return 8}function oI(){return 0}B(I=a,1024,"TGlic29kaXVtRFJHcmFuZG9tYnl0ZXMAYjY0X3BvcyA8PSBiNjRfbGVuAGNyeXB0b19nZW5lcmljaGFzaF9ibGFrZTJiX2ZpbmFsAHJhbmRvbWJ5dGVzL3JhbmRvbWJ5dGVzLmMAc29kaXVtL2NvZGVjcy5jAGNyeXB0b19nZW5lcmljaGFzaC9ibGFrZTJiL3JlZi9ibGFrZTJiLXJlZi5jAGNyeXB0b19nZW5lcmljaGFzaC9ibGFrZTJiL3JlZi9nZW5lcmljaGFzaF9ibGFrZTJiLmMAYnVmX2xlbiA8PSBTSVpFX01BWABvdXRsZW4gPD0gVUlOVDhfTUFYAFMtPmJ1ZmxlbiA8PSBCTEFLRTJCX0JMT0NLQllURVMAMS4wLjE4AHNvZGl1bV9iaW4yYmFzZTY0AAAAAAAAAAC2eFn/hXLTAL1uFf8PCmoAKcABAJjoef+8PKD/mXHO/wC34v60DUj/AAAAAAAAAACwoA7+08mG/54YjwB/aTUAYAy9AKfX+/+fTID+amXh/x78BACSDK4="),B(I,1440,"WfGy/grlpv973Sr+HhTUAFKAAwAw0fMAd3lA/zLjnP8AbsUBZxuQ"),B(I,1488,"hTuMAb3xJP/4JcMBYNw3ALdMPv/DQj0AMkykAeGkTP9MPaP/dT4fAFGRQP92QQ4AonPW/waKLgB85vT/CoqPADQawgC49EwAgY8pAb70E/97qnr/YoFEAHnVkwBWZR7/oWebAIxZQ//v5b4BQwu1AMbwif7uRbz/Q5fuABMqbP/lVXEBMkSH/xFqCQAyZwH/UAGoASOYHv8QqLkBOFno/2XS/AAp+kcAzKpP/w4u7/9QTe8AvdZL/xGN+QAmUEz/vlV1AFbkqgCc2NABw8+k/5ZCTP+v4RD/jVBiAUzb8gDGonIALtqYAJsr8f6boGj/M7ulAAIRrwBCVKAB9zoeACNBNf5F7L8ALYb1AaN73QAgbhT/NBelALrWRwDpsGAA8u82ATlZigBTAFT/iKBkAFyOeP5ofL4AtbE+//opVQCYgioBYPz2AJeXP/7vhT4AIDicAC2nvf+OhbMBg1bTALuzlv76qg7/0qNOACU0lwBjTRoA7pzV/9XA0QFJLlQAFEEpATbOTwDJg5L+qm8Y/7EhMv6rJsv/Tvd0ANHdmQCFgLIBOiwZAMknOwG9E/wAMeXSAXW7dQC1s7gBAHLbADBekwD1KTgAfQ3M/vStdwAs3SD+VOoUAPmgxgHsfur/L2Oo/qrimf9ms9gA4o16/3pCmf629YYA4+QZAdY56//YrTj/tefSAHeAnf+BX4j/bn4zAAKpt/8HgmL+RbBe/3QE4wHZ8pH/yq0fAWkBJ/8ur0UA5C86/9fgRf7POEX/EP6L/xfP1P/KFH7/X9Vg/wmwIQDIBc//8SqA/iMhwP/45cQBgRF4APtnl/8HNHD/jDhC/yji9f/ZRiX+rNYJ/0hDhgGSwNb/LCZwAES4S//OWvsAleuNALWqOgB09O8AXJ0CAGatYgDpiWABfzHLAAWblAAXlAn/03oMACKGGv/bzIgAhggp/+BTK/5VGfcAbX8A/qmIMADud9v/563VAM4S/v4Iugf/fgkHAW8qSABvNOz+YD+NAJO/f/7NTsD/DmrtAbvbTACv87v+aVmtAFUZWQGi85QAAnbR/iGeCQCLoy7/XUYoAGwqjv5v/I7/m9+QADPlp/9J/Jv/XnQM/5ig2v+c7iX/s+rP/8UAs/+apI0A4cRoAAojGf7R1PL/Yf3e/rhl5QDeEn8BpIiH/x7PjP6SYfMAgcAa/slUIf9vCk7/k1Gy/wQEGACh7tf/Bo0hADXXDv8ptdD/54udALPL3f//uXEAveKs/3FC1v/KPi3/ZkAI/06uEP6FdUT/"),B(I,2480,"AQ=="),B(I,2512,"JuiVj8KyJ7BFw/SJ8u+Y8NXfrAXTxjM5sTgCiG1T/AXHF2pwPU3YT7o8C3YNEGcPKiBT+iw5zMZOx/13kqwDeuz///////////////////////////////////////9/7f///////////////////////////////////////3/u////////////////////////////////////////f+3T9VwaYxJY1pz3ot753hQ="),B(I,2703,""),B(I,33676,"AQ=="),B(I,33712,"AQ=="),B(I,33744,"4Ot6fDtBuK4WVuP68Z/EatoJjeucMrH9hmIFFl9JuABfnJW8o1CMJLHQsVWcg+9bBERcxFgcjobYIk7d0J8RV+z///////////////////////////////////////9/7f///////////////////////////////////////3/u////////////////////////////////////////fw=="),B(I,33936,"CMm882fmCWo7p8qEha5nuyv4lP5y82488TYdXzr1T6XRguatf1IOUR9sPiuMaAWba71B+6vZgx95IX4TGc3gWyKuKNeYL4pCzWXvI5FEN3EvO03sz/vAtbzbiYGl27XpOLVI81vCVjkZ0AW28RHxWZtPGa+kgj+SGIFt2tVeHKtCAgOjmKoH2L5vcEUBW4MSjLLkTr6FMSTitP/Vw30MVW+Je/J0Xb5ysZYWO/6x3oA1Esclpwbcm5Qmac908ZvB0krxnsFpm+TjJU84hke+77XVjIvGncEPZZysd8yhDCR1AitZbyzpLYPkpm6qhHRK1PtBvdypsFy1UxGD2oj5dqvfZu5SUT6YEDK0LW3GMag/IfuYyCcDsOQO777Hf1m/wo+oPfML4MYlpwqTR5Gn1W+CA+BRY8oGcG4OCmcpKRT8L9JGhQq3JybJJlw4IRsu7SrEWvxtLE3fs5WdEw04U95jr4tUcwplqLJ3PLsKanbmru1HLsnCgTs1ghSFLHKSZAPxTKHov6IBMEK8S2YaqJGX+NBwi0vCML5UBqNRbMcYUu/WGeiS0RCpZVUkBpnWKiBxV4U1DvS40bsycKBqEMjQ0rgWwaQZU6tBUQhsNx6Z647fTHdIJ6hIm+G1vLA0Y1rJxbMMHDnLikHjSqrYTnPjY3dPypxbo7iy1vNvLmj8su9d7oKPdGAvF0NvY6V4cqvwoRR4yITsOWQaCALHjCgeYyP6/76Q6b2C3utsUKQVecay96P5vitTcuPyeHHGnGEm6s4+J8oHwsAhx7iG0R7r4M3WfdrqeNFu7n9PffW6bxdyqmfwBqaYyKLFfWMKrg35vgSYPxEbRxwTNQtxG4R9BCP1d9sokyTHQHuryjK8vskVCr6ePEwNEJzEZx1DtkI+y77UxUwqfmX8nCl/Wez61jqrb8tfF1hHSowZRGyA"),B(I,34768,"U2lnRWQyNTUxOSBubyBFZDI1NTE5IGNvbGxpc2lvbnMB"),B(I,34848,"cI0BAAEAAAACAAAAAwAAAAQAAAAFAAAABgAAAAcAAAAIAAAACQAAAAoAAAALAAAADAAAAA0=");var aI,nI=(aI=[null,function(A,I,g,C,B){var Q;return A|=0,C|=0,B|=0,D=Q=D+-64|0,(I|=0)|(g|=0)&&(o[Q+8>>2]=2036477234,o[Q+12>>2]=1797285236,o[Q>>2]=1634760805,o[Q+4>>2]=857760878,o[Q+16>>2]=a[0|B]|a[B+1|0]<<8|a[B+2|0]<<16|a[B+3|0]<<24,o[Q+20>>2]=a[B+4|0]|a[B+5|0]<<8|a[B+6|0]<<16|a[B+7|0]<<24,o[Q+24>>2]=a[B+8|0]|a[B+9|0]<<8|a[B+10|0]<<16|a[B+11|0]<<24,o[Q+28>>2]=a[B+12|0]|a[B+13|0]<<8|a[B+14|0]<<16|a[B+15|0]<<24,o[Q+32>>2]=a[B+16|0]|a[B+17|0]<<8|a[B+18|0]<<16|a[B+19|0]<<24,o[Q+36>>2]=a[B+20|0]|a[B+21|0]<<8|a[B+22|0]<<16|a[B+23|0]<<24,o[Q+40>>2]=a[B+24|0]|a[B+25|0]<<8|a[B+26|0]<<16|a[B+27|0]<<24,B=a[B+28|0]|a[B+29|0]<<8|a[B+30|0]<<16|a[B+31|0]<<24,o[Q+48>>2]=0,o[Q+52>>2]=0,o[Q+44>>2]=B,o[Q+56>>2]=a[0|C]|a[C+1|0]<<8|a[C+2|0]<<16|a[C+3|0]<<24,o[Q+60>>2]=a[C+4|0]|a[C+5|0]<<8|a[C+6|0]<<16|a[C+7|0]<<24,H(Q,A=MA(A,0,I),A,I,g),$A(Q,64)),D=Q- -64|0,0},function(A,I,g,C,B){var Q;return A|=0,C|=0,B|=0,D=Q=D+-64|0,(I|=0)|(g|=0)&&(o[Q+8>>2]=2036477234,o[Q+12>>2]=1797285236,o[Q>>2]=1634760805,o[Q+4>>2]=857760878,o[Q+16>>2]=a[0|B]|a[B+1|0]<<8|a[B+2|0]<<16|a[B+3|0]<<24,o[Q+20>>2]=a[B+4|0]|a[B+5|0]<<8|a[B+6|0]<<16|a[B+7|0]<<24,o[Q+24>>2]=a[B+8|0]|a[B+9|0]<<8|a[B+10|0]<<16|a[B+11|0]<<24,o[Q+28>>2]=a[B+12|0]|a[B+13|0]<<8|a[B+14|0]<<16|a[B+15|0]<<24,o[Q+32>>2]=a[B+16|0]|a[B+17|0]<<8|a[B+18|0]<<16|a[B+19|0]<<24,o[Q+36>>2]=a[B+20|0]|a[B+21|0]<<8|a[B+22|0]<<16|a[B+23|0]<<24,o[Q+40>>2]=a[B+24|0]|a[B+25|0]<<8|a[B+26|0]<<16|a[B+27|0]<<24,B=a[B+28|0]|a[B+29|0]<<8|a[B+30|0]<<16|a[B+31|0]<<24,o[Q+48>>2]=0,o[Q+44>>2]=B,o[Q+52>>2]=a[0|C]|a[C+1|0]<<8|a[C+2|0]<<16|a[C+3|0]<<24,o[Q+56>>2]=a[C+4|0]|a[C+5|0]<<8|a[C+6|0]<<16|a[C+7|0]<<24,o[Q+60>>2]=a[C+8|0]|a[C+9|0]<<8|a[C+10|0]<<16|a[C+11|0]<<24,H(Q,A=MA(A,0,I),A,I,g),$A(Q,64)),D=Q- -64|0,0},function(A,I,g,C,B,Q,i,E){var n;return A|=0,I|=0,B|=0,Q|=0,i|=0,E|=0,D=n=D+-64|0,(g|=0)|(C|=0)&&(o[n+8>>2]=2036477234,o[n+12>>2]=1797285236,o[n>>2]=1634760805,o[n+4>>2]=857760878,o[n+16>>2]=a[0|E]|a[E+1|0]<<8|a[E+2|0]<<16|a[E+3|0]<<24,o[n+20>>2]=a[E+4|0]|a[E+5|0]<<8|a[E+6|0]<<16|a[E+7|0]<<24,o[n+24>>2]=a[E+8|0]|a[E+9|0]<<8|a[E+10|0]<<16|a[E+11|0]<<24,o[n+28>>2]=a[E+12|0]|a[E+13|0]<<8|a[E+14|0]<<16|a[E+15|0]<<24,o[n+32>>2]=a[E+16|0]|a[E+17|0]<<8|a[E+18|0]<<16|a[E+19|0]<<24,o[n+36>>2]=a[E+20|0]|a[E+21|0]<<8|a[E+22|0]<<16|a[E+23|0]<<24,o[n+40>>2]=a[E+24|0]|a[E+25|0]<<8|a[E+26|0]<<16|a[E+27|0]<<24,o[n+44>>2]=a[E+28|0]|a[E+29|0]<<8|a[E+30|0]<<16|a[E+31|0]<<24,o[n+48>>2]=Q,o[n+52>>2]=i,o[n+56>>2]=a[0|B]|a[B+1|0]<<8|a[B+2|0]<<16|a[B+3|0]<<24,o[n+60>>2]=a[B+4|0]|a[B+5|0]<<8|a[B+6|0]<<16|a[B+7|0]<<24,H(n,I,A,g,C),$A(n,64)),D=n- -64|0,0},function(A,I,g,C,B,Q,i){var E;return A|=0,I|=0,B|=0,Q|=0,i|=0,D=E=D+-64|0,(g|=0)|(C|=0)&&(o[E+8>>2]=2036477234,o[E+12>>2]=1797285236,o[E>>2]=1634760805,o[E+4>>2]=857760878,o[E+16>>2]=a[0|i]|a[i+1|0]<<8|a[i+2|0]<<16|a[i+3|0]<<24,o[E+20>>2]=a[i+4|0]|a[i+5|0]<<8|a[i+6|0]<<16|a[i+7|0]<<24,o[E+24>>2]=a[i+8|0]|a[i+9|0]<<8|a[i+10|0]<<16|a[i+11|0]<<24,o[E+28>>2]=a[i+12|0]|a[i+13|0]<<8|a[i+14|0]<<16|a[i+15|0]<<24,o[E+32>>2]=a[i+16|0]|a[i+17|0]<<8|a[i+18|0]<<16|a[i+19|0]<<24,o[E+36>>2]=a[i+20|0]|a[i+21|0]<<8|a[i+22|0]<<16|a[i+23|0]<<24,o[E+40>>2]=a[i+24|0]|a[i+25|0]<<8|a[i+26|0]<<16|a[i+27|0]<<24,i=a[i+28|0]|a[i+29|0]<<8|a[i+30|0]<<16|a[i+31|0]<<24,o[E+48>>2]=Q,o[E+44>>2]=i,o[E+52>>2]=a[0|B]|a[B+1|0]<<8|a[B+2|0]<<16|a[B+3|0]<<24,o[E+56>>2]=a[B+4|0]|a[B+5|0]<<8|a[B+6|0]<<16|a[B+7|0]<<24,o[E+60>>2]=a[B+8|0]|a[B+9|0]<<8|a[B+10|0]<<16|a[B+11|0]<<24,H(E,I,A,g,C),$A(E,64)),D=E- -64|0,0},function(A,I,g,C,B){var Q,i,n;return A|=0,I|=0,g|=0,C|=0,B|=0,D=Q=(i=D)-128&-64,o[Q>>2]=67108863&(a[0|B]|a[B+1|0]<<8|a[B+2|0]<<16|a[B+3|0]<<24),o[Q+4>>2]=(a[B+3|0]|a[B+4|0]<<8|a[B+5|0]<<16|a[B+6|0]<<24)>>>2&67108611,o[Q+8>>2]=(a[B+6|0]|a[B+7|0]<<8|a[B+8|0]<<16|a[B+9|0]<<24)>>>4&67092735,o[Q+12>>2]=(a[B+9|0]|a[B+10|0]<<8|a[B+11|0]<<16|a[B+12|0]<<24)>>>6&66076671,n=a[B+12|0]|a[B+13|0]<<8|a[B+14|0]<<16|a[B+15|0]<<24,o[Q+20>>2]=0,o[Q+24>>2]=0,o[Q+28>>2]=0,o[Q+32>>2]=0,o[Q+36>>2]=0,o[Q+16>>2]=n>>>8&1048575,o[Q+40>>2]=a[B+16|0]|a[B+17|0]<<8|a[B+18|0]<<16|a[B+19|0]<<24,o[Q+44>>2]=a[B+20|0]|a[B+21|0]<<8|a[B+22|0]<<16|a[B+23|0]<<24,o[Q+48>>2]=a[B+24|0]|a[B+25|0]<<8|a[B+26|0]<<16|a[B+27|0]<<24,B=a[B+28|0]|a[B+29|0]<<8|a[B+30|0]<<16|a[B+31|0]<<24,E[Q+80|0]=0,o[Q+56>>2]=0,o[Q+60>>2]=0,o[Q+52>>2]=B,x(Q,I,g,C),O(Q,A),D=i,0},function(A,I,g,C,B){var Q,i,n;return A|=0,I|=0,g|=0,C|=0,B|=0,D=Q=(i=D)-192&-64,o[Q+64>>2]=67108863&(a[0|B]|a[B+1|0]<<8|a[B+2|0]<<16|a[B+3|0]<<24),o[Q+68>>2]=(a[B+3|0]|a[B+4|0]<<8|a[B+5|0]<<16|a[B+6|0]<<24)>>>2&67108611,o[Q+72>>2]=(a[B+6|0]|a[B+7|0]<<8|a[B+8|0]<<16|a[B+9|0]<<24)>>>4&67092735,o[Q+76>>2]=(a[B+9|0]|a[B+10|0]<<8|a[B+11|0]<<16|a[B+12|0]<<24)>>>6&66076671,n=a[B+12|0]|a[B+13|0]<<8|a[B+14|0]<<16|a[B+15|0]<<24,o[Q+84>>2]=0,o[Q+88>>2]=0,o[Q+92>>2]=0,o[Q+96>>2]=0,o[Q+100>>2]=0,o[Q+80>>2]=n>>>8&1048575,o[Q+104>>2]=a[B+16|0]|a[B+17|0]<<8|a[B+18|0]<<16|a[B+19|0]<<24,o[Q+108>>2]=a[B+20|0]|a[B+21|0]<<8|a[B+22|0]<<16|a[B+23|0]<<24,o[Q+112>>2]=a[B+24|0]|a[B+25|0]<<8|a[B+26|0]<<16|a[B+27|0]<<24,B=a[B+28|0]|a[B+29|0]<<8|a[B+30|0]<<16|a[B+31|0]<<24,E[Q+144|0]=0,o[Q+120>>2]=0,o[Q+124>>2]=0,o[Q+116>>2]=B,x(B=Q- -64|0,I,g,C),O(B,I=Q+48|0),A=Z(A,I),D=i,0|A},function(A,I){var g;return I|=0,o[(A|=0)>>2]=67108863&(a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24),o[A+4>>2]=(a[I+3|0]|a[I+4|0]<<8|a[I+5|0]<<16|a[I+6|0]<<24)>>>2&67108611,o[A+8>>2]=(a[I+6|0]|a[I+7|0]<<8|a[I+8|0]<<16|a[I+9|0]<<24)>>>4&67092735,o[A+12>>2]=(a[I+9|0]|a[I+10|0]<<8|a[I+11|0]<<16|a[I+12|0]<<24)>>>6&66076671,g=a[I+12|0]|a[I+13|0]<<8|a[I+14|0]<<16|a[I+15|0]<<24,o[A+20>>2]=0,o[A+24>>2]=0,o[A+28>>2]=0,o[A+32>>2]=0,o[A+36>>2]=0,o[A+16>>2]=g>>>8&1048575,o[A+40>>2]=a[I+16|0]|a[I+17|0]<<8|a[I+18|0]<<16|a[I+19|0]<<24,o[A+44>>2]=a[I+20|0]|a[I+21|0]<<8|a[I+22|0]<<16|a[I+23|0]<<24,o[A+48>>2]=a[I+24|0]|a[I+25|0]<<8|a[I+26|0]<<16|a[I+27|0]<<24,I=a[I+28|0]|a[I+29|0]<<8|a[I+30|0]<<16|a[I+31|0]<<24,E[A+80|0]=0,o[A+56>>2]=0,o[A+60>>2]=0,o[A+52>>2]=I,0},function(A,I,g,C){return x(A|=0,I|=0,g|=0,C|=0),0},function(A,I){return O(A|=0,I|=0),0},function(A,I,g){A|=0,I|=0,g|=0;var C,B=0,Q=0,i=0,n=0,r=0,f=0,t=0,e=0,c=0,y=0,h=0,s=0,p=0,u=0,k=0,l=0,H=0,M=0,G=0,U=0,J=0,N=0,Y=0,b=0,_=0,K=0,v=0,m=0,d=0,L=0,R=0,x=0,j=0,q=0,z=0,V=0,O=0,T=0,Z=0,$=0,AA=0,IA=0,gA=0,CA=0,BA=0,QA=0,iA=0,EA=0,oA=0,aA=0,nA=0,rA=0,fA=0,tA=0,eA=0,cA=0,yA=0,wA=0,hA=0,sA=0,pA=0,uA=0,kA=0,FA=0,lA=0;for(D=C=D-368|0;h=(i=a[g+B|0])^a[0|(r=B+33680|0)]|h,c=i^a[r+192|0]|c,y=i^a[r+160|0]|y,e=i^a[r+128|0]|e,n=i^a[r+96|0]|n,f=i^a[r- -64|0]|f,Q=i^a[r+32|0]|Q,31!=(0|(B=B+1|0)););if(B=-1,!(256&((255&((i=127^(r=127&a[g+31|0]))|c))-1|(255&(i|y))-1|(255&(i|e))-1|(255&(87^r|n))-1|(255&(f|r))-1|(255&(Q|r))-1|(255&(r|h))-1))){for(B=I,I=a[I+28|0]|a[I+29|0]<<8|a[I+30|0]<<16|a[I+31|0]<<24,o[C+360>>2]=a[B+24|0]|a[B+25|0]<<8|a[B+26|0]<<16|a[B+27|0]<<24,o[C+364>>2]=I,I=a[B+20|0]|a[B+21|0]<<8|a[B+22|0]<<16|a[B+23|0]<<24,o[C+352>>2]=a[B+16|0]|a[B+17|0]<<8|a[B+18|0]<<16|a[B+19|0]<<24,o[C+356>>2]=I,Q=a[B+4|0]|a[B+5|0]<<8|a[B+6|0]<<16|a[B+7|0]<<24,I=a[0|B]|a[B+1|0]<<8|a[B+2|0]<<16|a[B+3|0]<<24,o[C+336>>2]=I,o[C+340>>2]=Q,Q=a[B+12|0]|a[B+13|0]<<8|a[B+14|0]<<16|a[B+15|0]<<24,o[C+344>>2]=a[B+8|0]|a[B+9|0]<<8|a[B+10|0]<<16|a[B+11|0]<<24,o[C+348>>2]=Q,E[C+336|0]=248&I,E[C+367|0]=63&a[C+367|0]|64,P(C+288|0,g),o[C+260>>2]=0,o[C+264>>2]=0,o[C+268>>2]=0,o[C+272>>2]=0,o[C+276>>2]=0,o[C+208>>2]=0,o[C+212>>2]=0,o[C+216>>2]=0,o[C+220>>2]=0,o[C+224>>2]=0,o[C+228>>2]=0,o[C+244>>2]=0,o[C+248>>2]=0,o[C+240>>2]=1,o[C+252>>2]=0,o[C+256>>2]=0,o[C+192>>2]=0,o[C+196>>2]=0,o[C+200>>2]=0,o[C+204>>2]=0,I=o[C+316>>2],o[C+168>>2]=o[C+312>>2],o[C+172>>2]=I,I=o[C+308>>2],o[C+160>>2]=o[C+304>>2],o[C+164>>2]=I,I=o[C+300>>2],o[C+152>>2]=o[C+296>>2],o[C+156>>2]=I,I=o[C+292>>2],o[C+144>>2]=o[C+288>>2],o[C+148>>2]=I,I=o[C+324>>2],o[C+176>>2]=o[C+320>>2],o[C+180>>2]=I,o[C+116>>2]=0,o[C+120>>2]=0,o[C+124>>2]=0,o[C+128>>2]=0,o[C+132>>2]=0,o[C+100>>2]=0,o[C+104>>2]=0,o[C+96>>2]=1,o[C+108>>2]=0,o[C+112>>2]=0,g=254;Z=o[C+276>>2],i=o[C+180>>2],$=o[C+96>>2],AA=o[C+192>>2],IA=o[C+144>>2],gA=o[C+240>>2],CA=o[C+100>>2],BA=o[C+196>>2],QA=o[C+148>>2],iA=o[C+244>>2],J=o[C+104>>2],EA=o[C+200>>2],N=o[C+152>>2],oA=o[C+248>>2],K=o[C+108>>2],aA=o[C+204>>2],Y=o[C+156>>2],nA=o[C+252>>2],b=o[C+112>>2],rA=o[C+208>>2],G=o[C+160>>2],fA=o[C+256>>2],h=o[C+116>>2],tA=o[C+212>>2],t=o[C+164>>2],eA=o[C+260>>2],c=o[C+120>>2],cA=o[C+216>>2],y=o[C+168>>2],yA=o[C+264>>2],e=o[C+124>>2],wA=o[C+220>>2],n=o[C+172>>2],hA=o[C+268>>2],f=o[C+128>>2],sA=o[C+224>>2],Q=o[C+176>>2],pA=o[C+272>>2],uA=g,U=(H=(I=0-((I=T)^(T=a[C+336+(g>>>3)|0]>>>(7&g)&1))|0)&((B=o[C+132>>2])^(q=o[C+228>>2])))^B,o[C+132>>2]=U,z=i^(p=I&(i^Z)),o[C+84>>2]=z-U,_=f^(u=I&(f^sA)),o[C+128>>2]=_,V=(M=I&(Q^pA))^Q,o[C+80>>2]=V-_,m=e^(k=I&(e^wA)),o[C+124>>2]=m,kA=n^(l=I&(n^hA)),o[C+76>>2]=kA-m,d=c^(s=I&(c^cA)),o[C+120>>2]=d,FA=y^(r=I&(y^yA)),o[C+72>>2]=FA-d,L=h^(i=I&(h^tA)),o[C+116>>2]=L,lA=t^(h=I&(t^eA)),o[C+68>>2]=lA-L,R=b^(c=I&(b^rA)),o[C+112>>2]=R,v=G^(y=I&(G^fA)),o[C+64>>2]=v-R,x=K^(e=I&(K^aA)),o[C+108>>2]=x,O=Y^(n=I&(Y^nA)),o[C+60>>2]=O-x,j=J^(f=I&(J^EA)),o[C+104>>2]=j,K=N^(Q=I&(N^oA)),o[C+56>>2]=K-j,J=CA^(B=I&(CA^BA)),o[C+100>>2]=J,Y=QA^(g=I&(QA^iA)),o[C+52>>2]=Y-J,N=$^(b=I&($^AA)),o[C+96>>2]=N,G=(I&=IA^gA)^IA,o[C+48>>2]=G-N,t=p^Z,H^=q,o[C+36>>2]=t-H,p=M^pA,u^=sA,o[C+32>>2]=p-u,M=l^hA,k^=wA,o[C+28>>2]=M-k,l=r^yA,s^=cA,o[C+24>>2]=l-s,r=h^eA,i^=tA,o[C+20>>2]=r-i,h=y^fA,c^=rA,o[C+16>>2]=h-c,y=n^nA,e^=aA,o[C+12>>2]=y-e,n=Q^oA,f^=EA,o[C+8>>2]=n-f,Q=g^iA,B^=BA,o[C+4>>2]=Q-B,g=I^gA,I=b^AA,o[C>>2]=g-I,o[C+276>>2]=t+H,o[C+272>>2]=p+u,o[C+268>>2]=k+M,o[C+264>>2]=s+l,o[C+260>>2]=i+r,o[C+256>>2]=c+h,o[C+248>>2]=n+f,o[C+244>>2]=B+Q,o[C+240>>2]=I+g,o[C+252>>2]=e+y,o[C+228>>2]=U+z,o[C+224>>2]=_+V,o[C+220>>2]=m+kA,o[C+216>>2]=d+FA,o[C+212>>2]=L+lA,o[C+208>>2]=v+R,o[C+204>>2]=x+O,o[C+200>>2]=K+j,o[C+196>>2]=J+Y,o[C+192>>2]=G+N,F(z=C+96|0,_=C+48|0,G=C+240|0),F(U=C+192|0,U,C),S(_,C),S(C,G),t=o[C+192>>2],H=o[C+96>>2],p=o[C+196>>2],u=o[C+100>>2],M=o[C+200>>2],k=o[C+104>>2],l=o[C+204>>2],s=o[C+108>>2],r=o[C+208>>2],i=o[C+112>>2],h=o[C+212>>2],c=o[C+116>>2],y=o[C+216>>2],e=o[C+120>>2],n=o[C+220>>2],f=o[C+124>>2],Q=o[C+224>>2],B=o[C+128>>2],g=o[C+228>>2],I=o[C+132>>2],o[C+180>>2]=g+I,o[C+176>>2]=B+Q,o[C+172>>2]=n+f,o[C+168>>2]=e+y,o[C+164>>2]=c+h,o[C+160>>2]=i+r,o[C+156>>2]=s+l,o[C+152>>2]=k+M,o[C+148>>2]=p+u,o[C+144>>2]=t+H,o[C+228>>2]=I-g,o[C+224>>2]=B-Q,o[C+220>>2]=f-n,o[C+216>>2]=e-y,o[C+212>>2]=c-h,o[C+208>>2]=i-r,o[C+204>>2]=s-l,o[C+200>>2]=k-M,o[C+196>>2]=u-p,o[C+192>>2]=H-t,F(G,C,_),m=o[C+52>>2],s=o[C+4>>2],d=o[C+56>>2],r=o[C+8>>2],L=o[C+64>>2],i=o[C+16>>2],R=o[C+60>>2],e=o[C+12>>2],x=o[C+72>>2],n=o[C+24>>2],j=o[C+68>>2],f=o[C+20>>2],J=o[C+80>>2],B=o[C+32>>2],N=o[C+76>>2],g=o[C+28>>2],q=o[C+84>>2],I=o[C+36>>2],V=o[C+48>>2],Q=o[C>>2]-V|0,o[C>>2]=Q,I=I-q|0,o[C+36>>2]=I,b=g-N|0,o[C+28>>2]=b,G=B-J|0,o[C+32>>2]=G,h=f-j|0,o[C+20>>2]=h,c=n-x|0,o[C+24>>2]=c,y=e-R|0,o[C+12>>2]=y,e=i-L|0,o[C+16>>2]=e,n=r-d|0,o[C+8>>2]=n,B=s-m|0,o[C+4>>2]=B,S(U,U),I=DA(I,I>>31,121666,0),g=w,O=I,I=DA((33554431&(g=(t=I+16777216|0)>>>0<16777216?g+1|0:g))<<7|t>>>25,g>>25,19,0),f=w,g=I,I=DA(Q,Q>>31,121666,0),v=w+f|0,I=I>>>0>(g=g+I|0)>>>0?v+1|0:v,I=(f=g+33554432|0)>>>0<33554432?I+1|0:I,H=g-(-67108864&f)|0,o[C+96>>2]=H,Q=DA(B,B>>31,121666,0),g=w,g=(B=Q+16777216|0)>>>0<16777216?g+1|0:g,p=(I=(67108863&I)<<6|f>>>26)+(Q-(-33554432&B)|0)|0,o[C+100>>2]=p,v=g>>25,B=(33554431&g)<<7|B>>>25,g=DA(n,n>>31,121666,0)+B|0,I=v+w|0,I=g>>>0<B>>>0?I+1|0:I,f=(u=g+33554432|0)>>>0<33554432?I+1|0:I,M=g-(-67108864&u)|0,o[C+104>>2]=M,B=DA(e,e>>31,121666,0),Q=w,g=DA(y,y>>31,121666,0),I=w,Y=B,K=g,B=(33554431&(I=(k=g+16777216|0)>>>0<16777216?I+1|0:I))<<7|k>>>25,I=(I>>25)+Q|0,I=(g=Y+B|0)>>>0<B>>>0?I+1|0:I,Q=(l=g+33554432|0)>>>0<33554432?I+1|0:I,s=g-(-67108864&l)|0,o[C+112>>2]=s,B=DA(c,c>>31,121666,0),n=w,g=DA(h,h>>31,121666,0),I=w,Y=g,g=(33554431&(I=(r=g+16777216|0)>>>0<16777216?I+1|0:I))<<7|r>>>25,I=(I>>25)+n|0,I=g>>>0>(B=g+B|0)>>>0?I+1|0:I,g=(i=B+33554432|0)>>>0<33554432?I+1|0:I,h=B-(-67108864&i)|0,o[C+120>>2]=h,n=DA(G,G>>31,121666,0),e=w,B=DA(b,b>>31,121666,0),I=w,G=B,B=(33554431&(I=(c=B+16777216|0)>>>0<16777216?I+1|0:I))<<7|c>>>25,I=(I>>25)+e|0,I=B>>>0>(n=B+n|0)>>>0?I+1|0:I,B=(y=n+33554432|0)>>>0<33554432?I+1|0:I,e=n-(-67108864&y)|0,o[C+128>>2]=e,n=(f=K+((67108863&f)<<6|u>>>26)|0)-(-33554432&k)|0,o[C+108>>2]=n,f=(Q=Y+((67108863&Q)<<6|l>>>26)|0)-(-33554432&r)|0,o[C+116>>2]=f,Q=(I=G+((67108863&g)<<6|i>>>26)|0)-(-33554432&c)|0,o[C+124>>2]=Q,g=(B=O+((67108863&B)<<6|y>>>26)|0)-(-33554432&t)|0,o[C+132>>2]=g,S(I=C+144|0,I),o[C+84>>2]=g+q,o[C+80>>2]=e+J,o[C+76>>2]=Q+N,o[C+72>>2]=h+x,o[C+68>>2]=f+j,o[C+64>>2]=s+L,o[C+60>>2]=n+R,o[C+56>>2]=M+d,o[C+52>>2]=p+m,o[C+48>>2]=H+V,g=uA-1|0,F(z,C+288|0,U),F(U,C,_),uA;);h=o[C+144>>2],H=o[C+240>>2],c=o[C+148>>2],p=o[C+244>>2],y=o[C+152>>2],u=o[C+248>>2],e=o[C+156>>2],M=o[C+252>>2],n=o[C+160>>2],k=o[C+256>>2],f=o[C+164>>2],l=o[C+260>>2],Q=o[C+168>>2],s=o[C+264>>2],B=o[C+172>>2],r=o[C+268>>2],g=o[C+176>>2],i=o[C+272>>2],t=0-T|0,I=o[C+276>>2],o[C+276>>2]=t&(I^o[C+180>>2])^I,o[C+272>>2]=i^t&(g^i),o[C+268>>2]=r^t&(B^r),o[C+264>>2]=s^t&(Q^s),o[C+260>>2]=l^t&(f^l),o[C+256>>2]=k^t&(n^k),o[C+252>>2]=M^t&(e^M),o[C+248>>2]=u^t&(y^u),o[C+244>>2]=p^t&(c^p),o[C+240>>2]=H^t&(h^H),H=o[C+192>>2],h=o[C+96>>2],p=o[C+196>>2],c=o[C+100>>2],u=o[C+200>>2],y=o[C+104>>2],M=o[C+204>>2],e=o[C+108>>2],k=o[C+208>>2],n=o[C+112>>2],l=o[C+212>>2],f=o[C+116>>2],s=o[C+216>>2],Q=o[C+120>>2],r=o[C+220>>2],B=o[C+124>>2],i=o[C+224>>2],g=o[C+128>>2],I=o[C+228>>2],o[C+228>>2]=t&(I^o[C+132>>2])^I,o[C+224>>2]=i^t&(g^i),o[C+220>>2]=r^t&(B^r),o[C+216>>2]=s^t&(Q^s),o[C+212>>2]=l^t&(f^l),o[C+208>>2]=k^t&(n^k),o[C+204>>2]=M^t&(e^M),o[C+200>>2]=u^t&(y^u),o[C+196>>2]=p^t&(c^p),o[C+192>>2]=H^t&(h^H),X(g=C+192|0,g),F(I=C+240|0,I,g),W(A,I),$A(C+336|0,32),B=0;}return D=C+368|0,0|B},function(A,I){var g,C,B,Q,i,n,r,f,t,e,c,y,w,h,s,p,u,k,l,S;return I|=0,D=g=D-304|0,E[0|(A|=0)]=a[0|I],E[A+1|0]=a[I+1|0],E[A+2|0]=a[I+2|0],E[A+3|0]=a[I+3|0],E[A+4|0]=a[I+4|0],E[A+5|0]=a[I+5|0],E[A+6|0]=a[I+6|0],E[A+7|0]=a[I+7|0],E[A+8|0]=a[I+8|0],E[A+9|0]=a[I+9|0],E[A+10|0]=a[I+10|0],E[A+11|0]=a[I+11|0],E[A+12|0]=a[I+12|0],E[A+13|0]=a[I+13|0],E[A+14|0]=a[I+14|0],E[A+15|0]=a[I+15|0],E[A+16|0]=a[I+16|0],E[A+17|0]=a[I+17|0],E[A+18|0]=a[I+18|0],E[A+19|0]=a[I+19|0],E[A+20|0]=a[I+20|0],E[A+21|0]=a[I+21|0],E[A+22|0]=a[I+22|0],E[A+23|0]=a[I+23|0],E[A+24|0]=a[I+24|0],E[A+25|0]=a[I+25|0],E[A+26|0]=a[I+26|0],E[A+27|0]=a[I+27|0],E[A+28|0]=a[I+28|0],E[A+29|0]=a[I+29|0],E[A+30|0]=a[I+30|0],I=a[I+31|0],E[0|A]=248&a[0|A],E[A+31|0]=63&I|64,v(g+48|0,A),I=o[g+132>>2],C=o[g+92>>2],B=o[g+136>>2],Q=o[g+96>>2],i=o[g+140>>2],n=o[g+100>>2],r=o[g+144>>2],f=o[g+104>>2],t=o[g+148>>2],e=o[g+108>>2],c=o[g+152>>2],y=o[g+112>>2],w=o[g+156>>2],h=o[g+116>>2],s=o[g+160>>2],p=o[g+120>>2],u=o[g+128>>2],k=o[g+88>>2],l=o[g+124>>2],S=o[g+164>>2],o[g+292>>2]=l+S,o[g+288>>2]=s+p,o[g+284>>2]=w+h,o[g+280>>2]=c+y,o[g+276>>2]=t+e,o[g+272>>2]=r+f,o[g+268>>2]=i+n,o[g+264>>2]=B+Q,o[g+260>>2]=I+C,o[g+256>>2]=u+k,o[g+244>>2]=S-l,o[g+240>>2]=s-p,o[g+236>>2]=w-h,o[g+232>>2]=c-y,o[g+228>>2]=t-e,o[g+224>>2]=r-f,o[g+220>>2]=i-n,o[g+216>>2]=B-Q,o[g+212>>2]=I-C,o[g+208>>2]=u-k,X(I=g+208|0,I),F(g,g+256|0,I),W(A,g),D=g+304|0,0},function(A,I,g,C,B){A|=0,C|=0,B|=0;var Q,i=0,n=0,r=0,f=0;if(D=Q=D-112|0,(I|=0)|(g|=0)){i=a[B+28|0]|a[B+29|0]<<8|a[B+30|0]<<16|a[B+31|0]<<24,o[Q+24>>2]=a[B+24|0]|a[B+25|0]<<8|a[B+26|0]<<16|a[B+27|0]<<24,o[Q+28>>2]=i,i=a[B+20|0]|a[B+21|0]<<8|a[B+22|0]<<16|a[B+23|0]<<24,o[Q+16>>2]=a[B+16|0]|a[B+17|0]<<8|a[B+18|0]<<16|a[B+19|0]<<24,o[Q+20>>2]=i,i=a[B+4|0]|a[B+5|0]<<8|a[B+6|0]<<16|a[B+7|0]<<24,o[Q>>2]=a[0|B]|a[B+1|0]<<8|a[B+2|0]<<16|a[B+3|0]<<24,o[Q+4>>2]=i,i=a[B+12|0]|a[B+13|0]<<8|a[B+14|0]<<16|a[B+15|0]<<24,o[Q+8>>2]=a[B+8|0]|a[B+9|0]<<8|a[B+10|0]<<16|a[B+11|0]<<24,o[Q+12>>2]=i,B=a[0|C]|a[C+1|0]<<8|a[C+2|0]<<16|a[C+3|0]<<24,C=a[C+4|0]|a[C+5|0]<<8|a[C+6|0]<<16|a[C+7|0]<<24,o[Q+104>>2]=0,o[Q+108>>2]=0,o[Q+96>>2]=B,o[Q+100>>2]=C;A:{if(!g&I>>>0>=64|g){for(;J(A,Q+96|0,Q),C=a[Q+104|0]+1|0,E[Q+104|0]=C,C=a[Q+105|0]+(C>>>8|0)|0,E[Q+105|0]=C,C=a[Q+106|0]+(C>>>8|0)|0,E[Q+106|0]=C,C=a[Q+107|0]+(C>>>8|0)|0,E[Q+107|0]=C,C=a[Q+108|0]+(C>>>8|0)|0,E[Q+108|0]=C,C=a[Q+109|0]+(C>>>8|0)|0,E[Q+109|0]=C,C=a[Q+110|0]+(C>>>8|0)|0,E[Q+110|0]=C,E[Q+111|0]=a[Q+111|0]+(C>>>8|0),A=A- -64|0,g=g-1|0,!(g=(I=I+-64|0)>>>0<4294967232?g+1|0:g)&I>>>0>63|g;);if(!(I|g))break A}if(C=0,J(Q+32|0,Q+96|0,Q),g=3&I,B=0,I-1>>>0>=3)for(i=-4&I,I=0;n=r=Q+32|0,E[A+B|0]=a[n+B|0],E[(f=1|B)+A|0]=a[n+f|0],E[(n=2|B)+A|0]=a[n+r|0],E[(n=3|B)+A|0]=a[n+(Q+32|0)|0],B=B+4|0,(0|i)!=(0|(I=I+4|0)););if(g)for(;E[A+B|0]=a[(Q+32|0)+B|0],B=B+1|0,(0|g)!=(0|(C=C+1|0)););}$A(Q+32|0,64),$A(Q,32);}return D=Q+112|0,0},function(A,I,g,C,B,Q,i,n){A|=0,I|=0,B|=0,Q|=0,i|=0,n|=0;var r,f=0;if(D=r=D-112|0,(g|=0)|(C|=0)){f=a[n+28|0]|a[n+29|0]<<8|a[n+30|0]<<16|a[n+31|0]<<24,o[r+24>>2]=a[n+24|0]|a[n+25|0]<<8|a[n+26|0]<<16|a[n+27|0]<<24,o[r+28>>2]=f,f=a[n+20|0]|a[n+21|0]<<8|a[n+22|0]<<16|a[n+23|0]<<24,o[r+16>>2]=a[n+16|0]|a[n+17|0]<<8|a[n+18|0]<<16|a[n+19|0]<<24,o[r+20>>2]=f,f=a[n+4|0]|a[n+5|0]<<8|a[n+6|0]<<16|a[n+7|0]<<24,o[r>>2]=a[0|n]|a[n+1|0]<<8|a[n+2|0]<<16|a[n+3|0]<<24,o[r+4>>2]=f,f=a[n+12|0]|a[n+13|0]<<8|a[n+14|0]<<16|a[n+15|0]<<24,o[r+8>>2]=a[n+8|0]|a[n+9|0]<<8|a[n+10|0]<<16|a[n+11|0]<<24,o[r+12>>2]=f,n=a[B+4|0]|a[B+5|0]<<8|a[B+6|0]<<16|a[B+7|0]<<24,o[r+96>>2]=a[0|B]|a[B+1|0]<<8|a[B+2|0]<<16|a[B+3|0]<<24,o[r+100>>2]=n,E[r+104|0]=Q,E[r+111|0]=i>>>24,E[r+110|0]=i>>>16,E[r+109|0]=i>>>8,E[r+108|0]=i,E[r+107|0]=(16777215&i)<<8|Q>>>24,E[r+106|0]=(65535&i)<<16|Q>>>16,E[r+105|0]=(255&i)<<24|Q>>>8;A:{if(!C&g>>>0>=64|C){for(;;){for(n=0,J(r+32|0,r+96|0,r);Q=r+32|0,E[A+n|0]=a[Q+n|0]^a[I+n|0],E[(B=1|n)+A|0]=a[B+Q|0]^a[I+B|0],64!=(0|(n=n+2|0)););if(B=a[r+104|0]+1|0,E[r+104|0]=B,B=a[r+105|0]+(B>>>8|0)|0,E[r+105|0]=B,B=a[r+106|0]+(B>>>8|0)|0,E[r+106|0]=B,B=a[r+107|0]+(B>>>8|0)|0,E[r+107|0]=B,B=a[r+108|0]+(B>>>8|0)|0,E[r+108|0]=B,B=a[r+109|0]+(B>>>8|0)|0,E[r+109|0]=B,B=a[r+110|0]+(B>>>8|0)|0,E[r+110|0]=B,E[r+111|0]=a[r+111|0]+(B>>>8|0),I=I- -64|0,A=A- -64|0,C=C-1|0,!(!(C=(g=g+-64|0)>>>0<4294967232?C+1|0:C)&g>>>0>63|C))break}if(!(g|C))break A}if(n=0,J(r+32|0,r+96|0,r),C=1&g,1!=(0|g))for(Q=-2&g,B=0;i=r+32|0,E[A+n|0]=a[i+n|0]^a[I+n|0],E[(g=1|n)+A|0]=a[g+i|0]^a[I+g|0],n=n+2|0,(0|Q)!=(0|(B=B+2|0)););C&&(E[A+n|0]=a[(r+32|0)+n|0]^a[I+n|0]);}$A(r+32|0,64),$A(r,32);}return D=r+112|0,0}],aI.grow=function(A){var I=this.length;return this.length=this.length+A,I},aI.set=function(A,I){this[A]=I;},aI.get=function(A){return this[A]},aI);function rI(){return i.byteLength/65536|0}return {f:function(){},g:function(A,I,g,C,B,Q,i,E,o,a,n,r){return 0|eA(A|=0,I|=0,g|=0,C|=0,(A=0)|(B|=0),Q|=0,i|=0,A|(E|=0),o|=0,n|=0,r|=0)},h:function(A,I,g,C,B,i,E,a,n,r,f){return A|=0,I|=0,n|=0,n=C|=0,!(C=B|=0)&(B=0|n)>>>0<4294967280?(eA(A,A+B|0,0,g|=0,B,C,i|=0,E|=0,a|=0,r|=0,f|=0),I&&(C=(A=B+16|0)>>>0<16?C+1|0:C,o[I>>2]=A,o[I+4>>2]=C)):(mA(),Q()),0},i:function(A,I,g,C,B,Q,i,E,o,a,n,r){return 0|fA(A|=0,I|=0,g|=0,C|=0,(A=0)|(B|=0),Q|=0,i|=0,A|(E|=0),o|=0,n|=0,r|=0)},j:function(A,I,g,C,B,i,E,a,n,r,f){return A|=0,I|=0,n|=0,n=C|=0,!(C=B|=0)&(B=0|n)>>>0<4294967280?(fA(A,A+B|0,0,g|=0,B,C,i|=0,E|=0,a|=0,r|=0,f|=0),I&&(C=(A=B+16|0)>>>0<16?C+1|0:C,o[I>>2]=A,o[I+4>>2]=C)):(mA(),Q()),0},k:function(A,I,g,C,B,Q,i,E,o,a,n){return 0|tA(A|=0,g|=0,(A=0)|(C|=0),B|=0,Q|=0,i|=0,A|(E|=0),o|=0,a|=0,n|=0)},l:function(A,I,g,C,B,Q,i,E,a,n,r){return I|=0,g|=0,C|=0,B|=0,E|=0,E|=0,g=-1,!(Q|=0)&(B|=0)>>>0>=16|Q&&(g=tA(A|=0,C,B-16|0,Q-(B>>>0<16)|0,(C+B|0)-16|0,i|=0,E,a|=0,n|=0,r|=0)),I&&(o[I>>2]=g?0:B-16|0,o[I+4>>2]=g?0:Q-(B>>>0<16)|0),0|g},m:function(A,I,g,C,B,Q,i,E,o,a,n){return 0|rA(A|=0,g|=0,(A=0)|(C|=0),B|=0,Q|=0,i|=0,A|(E|=0),o|=0,a|=0,n|=0)},n:function(A,I,g,C,B,Q,i,E,a,n,r){return I|=0,g|=0,C|=0,B|=0,E|=0,E|=0,g=-1,!(Q|=0)&(B|=0)>>>0>=16|Q&&(g=rA(A|=0,C,B-16|0,Q-(B>>>0<16)|0,(C+B|0)-16|0,i|=0,E,a|=0,n|=0,r|=0)),I&&(o[I>>2]=g?0:B-16|0,o[I+4>>2]=g?0:Q-(B>>>0<16)|0),0|g},o:II,p:function(){return 12},q:oI,r:AI,s:CI,t:ZA,u:II,v:EI,w:oI,x:AI,y:CI,z:ZA,A:function(A,I,g,C,B,Q,i,E,o,a,n,r){return 0|BA(A|=0,I|=0,g|=0,C|=0,(A=0)|(B|=0),Q|=0,i|=0,A|(E|=0),o|=0,n|=0,r|=0)},B:function(A,I,g,C,B,i,E,a,n,r,f){return A|=0,I|=0,n|=0,n=C|=0,!(C=B|=0)&(B=0|n)>>>0<4294967280?(BA(A,A+B|0,0,g|=0,B,C,i|=0,E|=0,a|=0,r|=0,f|=0),I&&(C=(A=B+16|0)>>>0<16?C+1|0:C,o[I>>2]=A,o[I+4>>2]=C)):(mA(),Q()),0},C:function(A,I,g,C,B,Q,i,E,o,a,n){return 0|CA(A|=0,g|=0,(A=0)|(C|=0),B|=0,Q|=0,i|=0,A|(E|=0),o|=0,a|=0,n|=0)},D:function(A,I,g,C,B,Q,i,E,a,n,r){return I|=0,g|=0,C|=0,B|=0,E|=0,E|=0,g=-1,!(Q|=0)&(B|=0)>>>0>=16|Q&&(g=CA(A|=0,C,B-16|0,Q-(B>>>0<16)|0,(C+B|0)-16|0,i|=0,E,a|=0,n|=0,r|=0)),I&&(o[I>>2]=g?0:B-16|0,o[I+4>>2]=g?0:Q-(B>>>0<16)|0),0|g},E:II,F:gI,G:oI,H:AI,I:CI,J:ZA,K:II,L:II,M:function(A,I,g,C,B){var Q;return A|=0,I|=0,g|=0,C|=0,D=Q=D-480|0,AA(Q,B|=0),WA(Q,I,g,C),UA(Q,Q+416|0),I=o[Q+444>>2],g=o[Q+440>>2],E[A+24|0]=g,E[A+25|0]=g>>>8,E[A+26|0]=g>>>16,E[A+27|0]=g>>>24,E[A+28|0]=I,E[A+29|0]=I>>>8,E[A+30|0]=I>>>16,E[A+31|0]=I>>>24,I=o[Q+436>>2],g=o[Q+432>>2],E[A+16|0]=g,E[A+17|0]=g>>>8,E[A+18|0]=g>>>16,E[A+19|0]=g>>>24,E[A+20|0]=I,E[A+21|0]=I>>>8,E[A+22|0]=I>>>16,E[A+23|0]=I>>>24,I=o[Q+428>>2],g=o[Q+424>>2],E[A+8|0]=g,E[A+9|0]=g>>>8,E[A+10|0]=g>>>16,E[A+11|0]=g>>>24,E[A+12|0]=I,E[A+13|0]=I>>>8,E[A+14|0]=I>>>16,E[A+15|0]=I>>>24,I=o[Q+420>>2],g=o[Q+416>>2],E[0|A]=g,E[A+1|0]=g>>>8,E[A+2|0]=g>>>16,E[A+3|0]=g>>>24,E[A+4|0]=I,E[A+5|0]=I>>>8,E[A+6|0]=I>>>16,E[A+7|0]=I>>>24,D=Q+480|0,0},N:function(A,I,g,C,B){var Q,i;return A|=0,I|=0,g|=0,C|=0,D=Q=D-512|0,AA(i=Q+32|0,B|=0),WA(i,I,g,C),UA(i,Q+448|0),I=o[Q+476>>2],o[Q+24>>2]=o[Q+472>>2],o[Q+28>>2]=I,I=o[Q+468>>2],o[Q+16>>2]=o[Q+464>>2],o[Q+20>>2]=I,I=o[Q+460>>2],o[Q+8>>2]=o[Q+456>>2],o[Q+12>>2]=I,I=o[Q+452>>2],o[Q>>2]=o[Q+448>>2],o[Q+4>>2]=I,I=cA(A,Q),g=oA(Q,A,32),D=Q+512|0,g|((0|A)==(0|Q)?-1:I)},O:ZA,P:II,Q:II,R:II,S:II,T:gI,U:AI,V:CI,W:function(A,I,g){A|=0,I|=0;var C,B=0;return D=C=D+-64|0,QA(C,g|=0,32,0),g=o[C+28>>2],B=o[C+24>>2],E[I+24|0]=B,E[I+25|0]=B>>>8,E[I+26|0]=B>>>16,E[I+27|0]=B>>>24,E[I+28|0]=g,E[I+29|0]=g>>>8,E[I+30|0]=g>>>16,E[I+31|0]=g>>>24,g=o[C+20>>2],B=o[C+16>>2],E[I+16|0]=B,E[I+17|0]=B>>>8,E[I+18|0]=B>>>16,E[I+19|0]=B>>>24,E[I+20|0]=g,E[I+21|0]=g>>>8,E[I+22|0]=g>>>16,E[I+23|0]=g>>>24,g=o[C+12>>2],B=o[C+8>>2],E[I+8|0]=B,E[I+9|0]=B>>>8,E[I+10|0]=B>>>16,E[I+11|0]=B>>>24,E[I+12|0]=g,E[I+13|0]=g>>>8,E[I+14|0]=g>>>16,E[I+15|0]=g>>>24,g=o[C+4>>2],B=o[C>>2],E[0|I]=B,E[I+1|0]=B>>>8,E[I+2|0]=B>>>16,E[I+3|0]=B>>>24,E[I+4|0]=g,E[I+5|0]=g>>>8,E[I+6|0]=g>>>16,E[I+7|0]=g>>>24,$A(C,64),A=VA(A,I),D=C- -64|0,0|A},X:dA,Y:SA,Z:JA,_:function(A,I,g,C,B,Q,i,E){var o,a;return A|=0,I|=0,g|=0,Q|=0,a=C|=0,C=B|=0,D=o=D-32|0,B=-1,SA(o,i|=0,E|=0)||(B=IA(A,I,g,a,C,Q,o),$A(o,32)),D=o+32|0,0|B},$:function(A,I,g,C,B,i){return A|=0,I|=0,B|=0,i|=0,!(C|=0)&(g|=0)>>>0>=4294967280|C&&(mA(),Q()),0|IA(A+16|0,A,I,g,C,B,i)},aa:function(A,I,g,C,B,Q,i){return 0|FA(A|=0,I|=0,g|=0,C|=0,B|=0,Q|=0,i|=0)},ba:NA,ca:function(A,I,g,C,B,Q,i,E){var o,a;return A|=0,I|=0,g|=0,Q|=0,a=C|=0,C=B|=0,D=o=D-32|0,B=-1,SA(o,i|=0,E|=0)||(B=gA(A,I,g,a,C,Q,o),$A(o,32)),D=o+32|0,0|B},da:lA,ea:function(A,I,g,C,B,Q,i){return 0|sA(A|=0,I|=0,g|=0,C|=0,B|=0,Q|=0,i|=0)},fa:function(A,I,g,C,B){A|=0,I|=0,B|=0;var Q,i,a,n=0,r=0;return i=g|=0,g=C|=0,a=C=D,D=Q=C-512&-64,C=-1,dA(Q- -64|0,Q+32|0)||(Y(C=Q+128|0,0,0,24),z(C,r=Q- -64|0,32,0),z(C,B,32,0),GA(C,n=Q+96|0,24),C=FA(A+32|0,I,i,g,n,C=B,B=Q+32|0),I=o[Q+92>>2],g=o[Q+88>>2],E[A+24|0]=g,E[A+25|0]=g>>>8,E[A+26|0]=g>>>16,E[A+27|0]=g>>>24,E[A+28|0]=I,E[A+29|0]=I>>>8,E[A+30|0]=I>>>16,E[A+31|0]=I>>>24,I=o[Q+84>>2],g=o[Q+80>>2],E[A+16|0]=g,E[A+17|0]=g>>>8,E[A+18|0]=g>>>16,E[A+19|0]=g>>>24,E[A+20|0]=I,E[A+21|0]=I>>>8,E[A+22|0]=I>>>16,E[A+23|0]=I>>>24,I=o[Q+76>>2],g=o[Q+72>>2],E[A+8|0]=g,E[A+9|0]=g>>>8,E[A+10|0]=g>>>16,E[A+11|0]=g>>>24,E[A+12|0]=I,E[A+13|0]=I>>>8,E[A+14|0]=I>>>16,E[A+15|0]=I>>>24,I=o[Q+68>>2],g=o[Q+64>>2],E[0|A]=g,E[A+1|0]=g>>>8,E[A+2|0]=g>>>16,E[A+3|0]=g>>>24,E[A+4|0]=I,E[A+5|0]=I>>>8,E[A+6|0]=I>>>16,E[A+7|0]=I>>>24,$A(B,32),$A(r,32),$A(n,24)),D=a,0|C},ga:function(A,I,g,C,B,Q){A|=0,I|=0,B|=0,Q|=0;var i,E,o=0,a=0;return i=o=D,D=o=o-448&-64,a=-1,E=C|=0,!C&(g|=0)>>>0>=48|C&&(Y(C=o- -64|0,0,0,24),z(C,I,32,0),z(C,B,32,0),GA(B=C,C=o+32|0,24),a=sA(A,I+32|0,g-32|0,E-(g>>>0<32)|0,C,I,Q)),D=i,0|a},ha:function(){return 48},ia:AI,ja:BI,ka:II,la:AI,ma:BI,na:II,oa:function(){return 384},pa:function(A,I,g,C,B,Q,i){return 0|R(A|=0,I|=0,g|=0,C|=0,B|=0,Q|=0,i|=0)},qa:Y,ra:function(A,I,g,C){return 0|z(A|=0,I|=0,g|=0,C|=0)},sa:GA,ta:ZA,ua:BI,va:function(A,I,g,C){return 0|QA(A|=0,I|=0,g|=0,C|=0)},wa:AI,xa:BI,ya:EI,za:II,Aa:function(A,I,g,C,B,i){A|=0,I|=0,g|=0,C|=0,i|=0;var E,n=0,r=0,f=0,t=0,e=0,c=0,y=0;return D=E=D-32|0,n=a[0|(B|=0)]|a[B+1|0]<<8|a[B+2|0]<<16|a[B+3|0]<<24,B=a[B+4|0]|a[B+5|0]<<8|a[B+6|0]<<16|a[B+7|0]<<24,o[E+24>>2]=0,o[E+28>>2]=0,o[E+16>>2]=n,o[E+20>>2]=B,o[E+8>>2]=0,o[E+12>>2]=0,o[(B=E)>>2]=g,o[B+4>>2]=C,I-65>>>0<=4294967246?(o[8916]=28,A=-1):I-65>>>0<4294967232?A=-1:(D=B=(f=D)-512&-64,!i|!A|((r=255&I)-65&255)>>>0<=191?(mA(),Q()):(C=E+16|0,E?(t=725511199^(a[E+8|0]|a[E+9|0]<<8|a[E+10|0]<<16|a[E+11|0]<<24),e=-1694144372^(a[E+12|0]|a[E+13|0]<<8|a[E+14|0]<<16|a[E+15|0]<<24),g=-1377402159^(a[0|E]|a[E+1|0]<<8|a[E+2|0]<<16|a[E+3|0]<<24),I=1359893119^(a[E+4|0]|a[E+5|0]<<8|a[E+6|0]<<16|a[E+7|0]<<24)):(t=725511199,e=-1694144372,g=-1377402159,I=1359893119),C?(c=327033209^(a[C+8|0]|a[C+9|0]<<8|a[C+10|0]<<16|a[C+11|0]<<24),y=1541459225^(a[C+12|0]|a[C+13|0]<<8|a[C+14|0]<<16|a[C+15|0]<<24),n=-79577749^(a[0|C]|a[C+1|0]<<8|a[C+2|0]<<16|a[C+3|0]<<24),C=528734635^(a[C+4|0]|a[C+5|0]<<8|a[C+6|0]<<16|a[C+7|0]<<24)):(c=327033209,y=1541459225,n=-79577749,C=528734635),MA(B- -64|0,0,293),o[B+56>>2]=c,o[B+60>>2]=y,o[B+48>>2]=n,o[B+52>>2]=C,o[B+40>>2]=t,o[B+44>>2]=e,o[B+32>>2]=g,o[B+36>>2]=I,o[B+24>>2]=1595750129,o[B+28>>2]=-1521486534,o[B+16>>2]=-23791573,o[B+20>>2]=1013904242,o[B+8>>2]=-2067093701,o[B+12>>2]=-1150833019,o[B>>2]=-222443256^(8192|r),o[B+4>>2]=1779033703,MA(32+(I=B+384|0)|0,0,96),HA(I,i,32),HA(B+96|0,I,128),o[B+352>>2]=128,$A(I,128),G(B,A,r),D=f),A=0),D=E+32|0,0|A},Ba:ZA,Ca:function(A,I,g){return A|=0,R(I|=0,32,g|=0,32,0,0,0),0|jA(A,I)},Da:function(A,I){return A|=0,hA(I|=0,32),0|jA(A,I)},Ea:function(A,I,g,C,B){I|=0,g|=0,C|=0,B|=0;var i,o,n=0,r=0;if(o=n=D,D=n=n-512&-64,i=(A|=0)||I){if(r=-1,!PA(n+96|0,C,B)){for(C=I||A,A=0,Y(I=n+128|0,0,0,64),z(I,r=n+96|0,32,0),$A(r,32),z(I,g,32,0),z(I,B,32,0),GA(I,n+32|0,64),$A(I,384);I=(B=n+32|0)+A|0,E[A+i|0]=a[0|I],E[A+C|0]=a[I+32|0],E[(g=1|A)+i|0]=a[g+B|0],E[g+C|0]=a[I+33|0],32!=(0|(A=A+2|0)););$A(n+32|0,64),r=0;}return D=o,0|r}mA(),Q();},Fa:function(A,I,g,C,B){I|=0,g|=0,C|=0,B|=0;var i,o,n=0,r=0;if(o=n=D,D=n=n-512&-64,i=(A|=0)||I){if(r=-1,!PA(n+96|0,C,B)){for(C=I||A,A=0,Y(I=n+128|0,0,0,64),z(I,r=n+96|0,32,0),$A(r,32),z(I,B,32,0),z(I,g,32,0),GA(I,n+32|0,64),$A(I,384);I=(B=n+32|0)+A|0,E[A+C|0]=a[0|I],E[A+i|0]=a[I+32|0],E[(g=1|A)+C|0]=a[g+B|0],E[g+i|0]=a[I+33|0],32!=(0|(A=A+2|0)););$A(n+32|0,64),r=0;}return D=o,0|r}mA(),Q();},Ga:II,Ha:II,Ia:II,Ja:II,Ka:jA,La:PA,Ma:II,Na:II,Oa:II,Pa:gI,Qa:AI,Ra:CI,Sa:ZA,Ta:JA,Ua:function(A,I,g,C,B,i){return A|=0,I|=0,B|=0,i|=0,!(C|=0)&(g|=0)>>>0>=4294967280|C&&(mA(),Q()),IA(A+16|0,A,I,g,C,B,i),0},Va:NA,Wa:lA,Xa:ZA,Ya:function(A,I,g){return A|=0,g|=0,hA(I|=0,24),d(A,I,g),E[A+32|0]=1,E[A+33|0]=0,E[A+34|0]=0,E[A+35|0]=0,g=a[I+16|0]|a[I+17|0]<<8|a[I+18|0]<<16|a[I+19|0]<<24,I=a[I+20|0]|a[I+21|0]<<8|a[I+22|0]<<16|a[I+23|0]<<24,E[A+44|0]=0,E[A+45|0]=0,E[A+46|0]=0,E[A+47|0]=0,E[A+48|0]=0,E[A+49|0]=0,E[A+50|0]=0,E[A+51|0]=0,E[A+36|0]=g,E[A+37|0]=g>>>8,E[A+38|0]=g>>>16,E[A+39|0]=g>>>24,E[A+40|0]=I,E[A+41|0]=I>>>8,E[A+42|0]=I>>>16,E[A+43|0]=I>>>24,0},Za:function(A,I,g){return d(A|=0,I|=0,g|=0),E[A+32|0]=1,E[A+33|0]=0,E[A+34|0]=0,E[A+35|0]=0,g=a[I+16|0]|a[I+17|0]<<8|a[I+18|0]<<16|a[I+19|0]<<24,I=a[I+20|0]|a[I+21|0]<<8|a[I+22|0]<<16|a[I+23|0]<<24,E[A+44|0]=0,E[A+45|0]=0,E[A+46|0]=0,E[A+47|0]=0,E[A+48|0]=0,E[A+49|0]=0,E[A+50|0]=0,E[A+51|0]=0,E[A+36|0]=g,E[A+37|0]=g>>>8,E[A+38|0]=g>>>16,E[A+39|0]=g>>>24,E[A+40|0]=I,E[A+41|0]=I>>>8,E[A+42|0]=I>>>16,E[A+43|0]=I>>>24,0},_a:function(A){var I,g=0,C=0;D=I=D-48|0,g=a[28+(A|=0)|0]|a[A+29|0]<<8|a[A+30|0]<<16|a[A+31|0]<<24,o[I+24>>2]=a[A+24|0]|a[A+25|0]<<8|a[A+26|0]<<16|a[A+27|0]<<24,o[I+28>>2]=g,g=a[A+20|0]|a[A+21|0]<<8|a[A+22|0]<<16|a[A+23|0]<<24,o[I+16>>2]=a[A+16|0]|a[A+17|0]<<8|a[A+18|0]<<16|a[A+19|0]<<24,o[I+20>>2]=g,g=a[A+4|0]|a[A+5|0]<<8|a[A+6|0]<<16|a[A+7|0]<<24,o[I>>2]=a[0|A]|a[A+1|0]<<8|a[A+2|0]<<16|a[A+3|0]<<24,o[I+4>>2]=g,g=a[A+12|0]|a[A+13|0]<<8|a[A+14|0]<<16|a[A+15|0]<<24,o[I+8>>2]=a[A+8|0]|a[A+9|0]<<8|a[A+10|0]<<16|a[A+11|0]<<24,o[I+12>>2]=g,g=a[A+40|0]|a[A+41|0]<<8|a[A+42|0]<<16|a[A+43|0]<<24,o[I+32>>2]=a[A+36|0]|a[A+37|0]<<8|a[A+38|0]<<16|a[A+39|0]<<24,o[I+36>>2]=g,xA(I,I,A+32|0,A),g=o[I+28>>2],C=o[I+24>>2],E[A+24|0]=C,E[A+25|0]=C>>>8,E[A+26|0]=C>>>16,E[A+27|0]=C>>>24,E[A+28|0]=g,E[A+29|0]=g>>>8,E[A+30|0]=g>>>16,E[A+31|0]=g>>>24,g=o[I+20>>2],C=o[I+16>>2],E[A+16|0]=C,E[A+17|0]=C>>>8,E[A+18|0]=C>>>16,E[A+19|0]=C>>>24,E[A+20|0]=g,E[A+21|0]=g>>>8,E[A+22|0]=g>>>16,E[A+23|0]=g>>>24,g=o[I+12>>2],C=o[I+8>>2],E[A+8|0]=C,E[A+9|0]=C>>>8,E[A+10|0]=C>>>16,E[A+11|0]=C>>>24,E[A+12|0]=g,E[A+13|0]=g>>>8,E[A+14|0]=g>>>16,E[A+15|0]=g>>>24,g=o[I+4>>2],C=o[I>>2],E[0|A]=C,E[A+1|0]=C>>>8,E[A+2|0]=C>>>16,E[A+3|0]=C>>>24,E[A+4|0]=g,E[A+5|0]=g>>>8,E[A+6|0]=g>>>16,E[A+7|0]=g>>>24,C=o[I+36>>2],g=o[I+32>>2],E[A+32|0]=1,E[A+33|0]=0,E[A+34|0]=0,E[A+35|0]=0,E[A+36|0]=g,E[A+37|0]=g>>>8,E[A+38|0]=g>>>16,E[A+39|0]=g>>>24,E[A+40|0]=C,E[A+41|0]=C>>>8,E[A+42|0]=C>>>16,E[A+43|0]=C>>>24,D=I+48|0;},$a:function(A,I,g,C,B,i,n,r,f,t){A|=0,I|=0,C|=0,n|=0,f|=0,t|=0;var e,c=0,y=0,w=0;return c=B|=0,B=i|=0,c|=i=0,e=i|(r|=0),D=i=D-384|0,(g|=0)&&(o[g>>2]=0,o[g+4>>2]=0),!B&c>>>0<4294967279?(XA(y=i+16|0,64,w=A+32|0,A),OA(r=i+80|0,y),$A(y,64),zA(r,n,e,f),zA(r,33904,0-e&15,0),o[i+72>>2]=0,o[i+76>>2]=0,o[(n=i- -64|0)>>2]=0,o[n+4>>2]=0,o[i+56>>2]=0,o[i+60>>2]=0,o[i+48>>2]=0,o[i+52>>2]=0,o[i+40>>2]=0,o[i+44>>2]=0,o[i+32>>2]=0,o[i+36>>2]=0,o[i+16>>2]=0,o[i+20>>2]=0,o[i+24>>2]=0,o[i+28>>2]=0,E[i+16|0]=t,wA(y,y,64,0,w,1,A),zA(r,y,64,0),E[0|I]=a[i+16|0],wA(I=I+1|0,C,c,B,w,2,A),zA(r,I,c,B),zA(r,33904,15&c,0),o[i+8>>2]=e,o[i+12>>2]=f,zA(r,C=i+8|0,8,0),o[i+8>>2]=c- -64,o[i+12>>2]=B-((c>>>0<4294967232)-1|0),zA(r,C,8,0),TA(r,I=I+c|0),$A(r,256),E[A+36|0]=a[A+36|0]^a[0|I],E[A+37|0]=a[A+37|0]^a[I+1|0],E[A+38|0]=a[A+38|0]^a[I+2|0],E[A+39|0]=a[A+39|0]^a[I+3|0],E[A+40|0]=a[A+40|0]^a[I+4|0],E[A+41|0]=a[A+41|0]^a[I+5|0],E[A+42|0]=a[A+42|0]^a[I+6|0],E[A+43|0]=a[A+43|0]^a[I+7|0],yA(w),(2&t||iA(w,4))&&(I=a[A+28|0]|a[A+29|0]<<8|a[A+30|0]<<16|a[A+31|0]<<24,o[i+360>>2]=a[A+24|0]|a[A+25|0]<<8|a[A+26|0]<<16|a[A+27|0]<<24,o[i+364>>2]=I,I=a[A+20|0]|a[A+21|0]<<8|a[A+22|0]<<16|a[A+23|0]<<24,o[i+352>>2]=a[A+16|0]|a[A+17|0]<<8|a[A+18|0]<<16|a[A+19|0]<<24,o[i+356>>2]=I,I=a[A+4|0]|a[A+5|0]<<8|a[A+6|0]<<16|a[A+7|0]<<24,o[i+336>>2]=a[0|A]|a[A+1|0]<<8|a[A+2|0]<<16|a[A+3|0]<<24,o[i+340>>2]=I,I=a[A+12|0]|a[A+13|0]<<8|a[A+14|0]<<16|a[A+15|0]<<24,o[i+344>>2]=a[A+8|0]|a[A+9|0]<<8|a[A+10|0]<<16|a[A+11|0]<<24,o[i+348>>2]=I,I=a[A+40|0]|a[A+41|0]<<8|a[A+42|0]<<16|a[A+43|0]<<24,o[i+368>>2]=a[A+36|0]|a[A+37|0]<<8|a[A+38|0]<<16|a[A+39|0]<<24,o[i+372>>2]=I,xA(I=i+336|0,I,w,A),I=o[i+364>>2],C=o[i+360>>2],E[A+24|0]=C,E[A+25|0]=C>>>8,E[A+26|0]=C>>>16,E[A+27|0]=C>>>24,E[A+28|0]=I,E[A+29|0]=I>>>8,E[A+30|0]=I>>>16,E[A+31|0]=I>>>24,I=o[i+356>>2],C=o[i+352>>2],E[A+16|0]=C,E[A+17|0]=C>>>8,E[A+18|0]=C>>>16,E[A+19|0]=C>>>24,E[A+20|0]=I,E[A+21|0]=I>>>8,E[A+22|0]=I>>>16,E[A+23|0]=I>>>24,I=o[i+348>>2],C=o[i+344>>2],E[A+8|0]=C,E[A+9|0]=C>>>8,E[A+10|0]=C>>>16,E[A+11|0]=C>>>24,E[A+12|0]=I,E[A+13|0]=I>>>8,E[A+14|0]=I>>>16,E[A+15|0]=I>>>24,I=o[i+340>>2],C=o[i+336>>2],E[0|A]=C,E[A+1|0]=C>>>8,E[A+2|0]=C>>>16,E[A+3|0]=C>>>24,E[A+4|0]=I,E[A+5|0]=I>>>8,E[A+6|0]=I>>>16,E[A+7|0]=I>>>24,I=o[i+368>>2],C=o[i+372>>2],E[A+32|0]=1,E[A+33|0]=0,E[A+34|0]=0,E[A+35|0]=0,E[A+36|0]=I,E[A+37|0]=I>>>8,E[A+38|0]=I>>>16,E[A+39|0]=I>>>24,E[A+40|0]=C,E[A+41|0]=C>>>8,E[A+42|0]=C>>>16,E[A+43|0]=C>>>24),g&&(B=(A=c+17|0)>>>0<17?B+1|0:B,o[g>>2]=A,o[g+4>>2]=B),D=i+384|0):(mA(),Q()),0},ab:function(A,I,g,C,B,i,n,r,f,t){A|=0,I|=0,C|=0,B|=0,r|=0,t|=0;var e,c=0,y=0,w=0,h=0,s=0,p=0;c=i|=0,i=n|=0,y=0|c,e=f|=0,D=n=D-400|0,(g|=0)&&(o[g>>2]=0,o[g+4>>2]=0),C&&(E[0|C]=255),p=-1;A:{I:{if(!(!i&y>>>0<17)){if(s=c=i-(y>>>0<17)|0,!c&(f=y-17|0)>>>0>=4294967279|c)break I;XA(w=n+32|0,64,h=A+32|0,A),OA(c=n+96|0,w),$A(w,64),zA(c,r,e,t),zA(c,33904,0-e&15,0),o[n+88>>2]=0,o[n+92>>2]=0,o[n+80>>2]=0,o[n+84>>2]=0,o[n+72>>2]=0,o[n+76>>2]=0,o[(r=n- -64|0)>>2]=0,o[r+4>>2]=0,o[n+56>>2]=0,o[n+60>>2]=0,o[n+48>>2]=0,o[n+52>>2]=0,o[n+40>>2]=0,o[n+44>>2]=0,o[n+32>>2]=0,o[n+36>>2]=0,E[n+32|0]=a[0|B],wA(w,w,64,0,h,1,A),r=a[n+32|0],E[n+32|0]=a[0|B],zA(c,w,64,0),zA(c,B=B+1|0,f,s),zA(c,33904,y-1&15,0),o[n+24>>2]=e,o[n+28>>2]=t,zA(c,t=n+24|0,8,0),i=(y=y+47|0)>>>0<47?i+1|0:i,o[n+24>>2]=y,o[n+28>>2]=i,zA(c,t,8,0),TA(c,n),$A(c,256),oA(n,B+f|0,16)?$A(n,16):(wA(I,B,f,s,h,2,A),E[A+36|0]=a[A+36|0]^a[0|n],E[A+37|0]=a[A+37|0]^a[n+1|0],E[A+38|0]=a[A+38|0]^a[n+2|0],E[A+39|0]=a[A+39|0]^a[n+3|0],E[A+40|0]=a[A+40|0]^a[n+4|0],E[A+41|0]=a[A+41|0]^a[n+5|0],E[A+42|0]=a[A+42|0]^a[n+6|0],E[A+43|0]=a[A+43|0]^a[n+7|0],yA(h),(2&r||iA(h,4))&&(I=a[A+28|0]|a[A+29|0]<<8|a[A+30|0]<<16|a[A+31|0]<<24,o[n+376>>2]=a[A+24|0]|a[A+25|0]<<8|a[A+26|0]<<16|a[A+27|0]<<24,o[n+380>>2]=I,I=a[A+20|0]|a[A+21|0]<<8|a[A+22|0]<<16|a[A+23|0]<<24,o[n+368>>2]=a[A+16|0]|a[A+17|0]<<8|a[A+18|0]<<16|a[A+19|0]<<24,o[n+372>>2]=I,I=a[A+4|0]|a[A+5|0]<<8|a[A+6|0]<<16|a[A+7|0]<<24,o[n+352>>2]=a[0|A]|a[A+1|0]<<8|a[A+2|0]<<16|a[A+3|0]<<24,o[n+356>>2]=I,I=a[A+12|0]|a[A+13|0]<<8|a[A+14|0]<<16|a[A+15|0]<<24,o[n+360>>2]=a[A+8|0]|a[A+9|0]<<8|a[A+10|0]<<16|a[A+11|0]<<24,o[n+364>>2]=I,I=a[A+40|0]|a[A+41|0]<<8|a[A+42|0]<<16|a[A+43|0]<<24,o[n+384>>2]=a[A+36|0]|a[A+37|0]<<8|a[A+38|0]<<16|a[A+39|0]<<24,o[n+388>>2]=I,xA(I=n+352|0,I,h,A),I=o[n+380>>2],B=o[n+376>>2],E[A+24|0]=B,E[A+25|0]=B>>>8,E[A+26|0]=B>>>16,E[A+27|0]=B>>>24,E[A+28|0]=I,E[A+29|0]=I>>>8,E[A+30|0]=I>>>16,E[A+31|0]=I>>>24,I=o[n+372>>2],B=o[n+368>>2],E[A+16|0]=B,E[A+17|0]=B>>>8,E[A+18|0]=B>>>16,E[A+19|0]=B>>>24,E[A+20|0]=I,E[A+21|0]=I>>>8,E[A+22|0]=I>>>16,E[A+23|0]=I>>>24,I=o[n+364>>2],B=o[n+360>>2],E[A+8|0]=B,E[A+9|0]=B>>>8,E[A+10|0]=B>>>16,E[A+11|0]=B>>>24,E[A+12|0]=I,E[A+13|0]=I>>>8,E[A+14|0]=I>>>16,E[A+15|0]=I>>>24,I=o[n+356>>2],B=o[n+352>>2],E[0|A]=B,E[A+1|0]=B>>>8,E[A+2|0]=B>>>16,E[A+3|0]=B>>>24,E[A+4|0]=I,E[A+5|0]=I>>>8,E[A+6|0]=I>>>16,E[A+7|0]=I>>>24,I=o[n+384>>2],B=o[n+388>>2],E[A+32|0]=1,E[A+33|0]=0,E[A+34|0]=0,E[A+35|0]=0,E[A+36|0]=I,E[A+37|0]=I>>>8,E[A+38|0]=I>>>16,E[A+39|0]=I>>>24,E[A+40|0]=B,E[A+41|0]=B>>>8,E[A+42|0]=B>>>16,E[A+43|0]=B>>>24),g&&(o[g>>2]=f,o[g+4>>2]=s),p=0,C&&(E[0|C]=r));}D=n+400|0;break A}mA(),Q();}return 0|p},bb:function(){return 52},cb:function(){return 17},db:gI,eb:II,fb:function(){return -18},gb:oI,hb:QI,ib:function(){return 2},jb:iI,kb:EI,lb:AI,mb:function(A,I,g,C,B){A|=0,I|=0,g|=0,C|=0;var Q,i=0,o=0,n=0,r=0,f=0,t=0,e=0,c=0,y=0,D=0,h=0,s=0,p=0,u=0,k=0,F=0;if(p=1886610805^(B=a[0|(i=B|=0)]|a[i+1|0]<<8|a[i+2|0]<<16|a[i+3|0]<<24),u=1936682341^(o=a[i+4|0]|a[i+5|0]<<8|a[i+6|0]<<16|a[i+7|0]<<24),B^=1852142177,n=1819895653^o,k=1852075885^(o=a[i+8|0]|a[i+9|0]<<8|a[i+10|0]<<16|a[i+11|0]<<24),F=1685025377^(i=a[i+12|0]|a[i+13|0]<<8|a[i+14|0]<<16|a[i+15|0]<<24),r=2037671283^o,o=1952801890^i,D=g,(0|(c=(I+g|0)-(Q=7&g)|0))!=(0|I)){for(;g=(h=o^(s=a[I+4|0]|a[I+5|0]<<8|a[I+6|0]<<16|a[I+7|0]<<24))+n|0,r=B=(i=C=r^(y=a[0|I]|a[I+1|0]<<8|a[I+2|0]<<16|a[I+3|0]<<24))+B|0,e=g=B>>>0<i>>>0?g+1|0:g,g=u+F|0,g=(n=p+k|0)>>>0<k>>>0?g+1|0:g,i=nA(k,F,13)^n,o=g,g=e+(B=g^w)|0,g=i>>>0>(f=r+i|0)>>>0?g+1|0:g,i=nA(i,B,17)^f,t=g,p=nA(i,B=g^w,13),u=w,g=nA(C,h,16),C=e^w,h=g^r,o=nA(n,o,32),g=w+C|0,g=(o=(n=h+o|0)>>>0<o>>>0?g+1|0:g)+B|0,e=g=(r=i+n|0)>>>0<n>>>0?g+1|0:g,p=nA(i=r^p,B=g^u,17),u=w,g=nA(h,C,21),C=o^w,h=g^n,o=nA(f,t,32),g=w+C|0,g=(o=(n=h+o|0)>>>0<o>>>0?g+1|0:g)+B|0,k=(i=i+n|0)^p,B=g=i>>>0<n>>>0?g+1|0:g,F=g^u,g=nA(h,C,16),f=o^=w,t=nA(g^=n,o,21),n=w,e=(o=nA(r,e,32))+g|0,g=w+f|0,r=t^e,o=(g=o>>>0>e>>>0?g+1|0:g)^n,B=nA(i,B,32),n=w,p=e^y,u=g^s,(0|c)!=(0|(I=I+8|0)););I=c;}switch(s=0,t=D<<24,Q-1|0){case 6:t|=a[I+6|0]<<16;case 5:t|=a[I+5|0]<<8;case 4:t|=a[I+4|0];case 3:s|=(C=a[I+3|0])<<24,t|=g=C>>>8|0;case 2:s|=(C=a[I+2|0])<<16,t|=g=C>>>16|0;case 1:s|=(C=a[I+1|0])<<8,t|=g=C>>>24|0;case 0:s=a[0|I]|s;}return I=A,C=nA(i=r^s,A=o^t,16),A=A+n|0,e=A=(r=B+i|0)>>>0<B>>>0?A+1|0:A,f=nA(B=C^r,A^=g=w,21),o=w,g=u+F|0,C=g=(i=p+k|0)>>>0<k>>>0?g+1|0:g,c=B,B=nA(i,g,32),g=w+A|0,A=o,o=g=B>>>0>(n=c+B|0)>>>0?g+1|0:g,D=nA(B=n^f,A^=g,16),y=w,i=(g=r)+(r=c=nA(k,F,13)^i)|0,g=(f=w^C)+e|0,C=i,e=B,B=nA(i,g=i>>>0<r>>>0?g+1|0:g,32),A=w+A|0,h=nA(i=(r=e+B|0)^D,B=(e=B>>>0>r>>>0?A+1|0:A)^y,21),y=w,c=nA(c,f,17)^C,g=(f=w^g)+o|0,A=g=(A=c)>>>0>(C=A+n|0)>>>0?g+1|0:g,o=i,i=nA(C,g,32),g=w+B|0,D=g=(o=i>>>0>(n=o+i|0)>>>0?g+1|0:g)^y,y=nA(h^=n,g,16),i=w,c=nA(c,f,13)^C,A=(f=A^w)+e|0,C=A=(g=c)>>>0>(B=g+r|0)>>>0?A+1|0:A,A=nA(B,A,32),g=D+w|0,D=g=(r=i)^(i=(A=h+(255^A)|0)>>>0<h>>>0?g+1|0:g),r=A,y=nA(h=y^A,g,21),e=w,c=nA(c,f,17)^B,g=(f=C^w)+(o^t)|0,C=g=(A=n^s)>>>0>(B=c+A|0)>>>0?g+1|0:g,A=nA(B,g,32),g=D+w|0,g=(o=(A=A+h|0)>>>0<h>>>0?g+1|0:g)^e,e=A,y=nA(D=y^A,g,16),n=w,f=nA(c,f,13)^B,A=i+(t=w^C)|0,C=A=(B=r+f|0)>>>0<r>>>0?A+1|0:A,A=nA(B,A,32),g=g+w|0,c=g=(i=(A=A+D|0)>>>0<D>>>0?g+1|0:g)^n,n=A,y=nA(D=y^A,g,21),r=w,A=nA(f,t,17),g=o+(f=C^w)|0,C=g=(B=e+(t=A^B)|0)>>>0<e>>>0?g+1|0:g,A=nA(B,g,32),g=c+w|0,r=g=(o=(A=A+D|0)>>>0<D>>>0?g+1|0:g)^r,e=A,c=nA(D=y^A,g,16),y=w,A=nA(t,f,13),g=i+(f=C^w)|0,C=g=(i=n+(t=A^B)|0)>>>0<n>>>0?g+1|0:g,A=nA(i,g,32),g=r+w|0,r=A=A+D|0,n=g=A>>>0<D>>>0?g+1|0:g,D=nA(B=c^A,A=g^y,21),c=w,t=nA(t,f,17),g=o+(y=C^w)|0,f=i^t,i=B,B=nA(C=e+f|0,g=C>>>0<e>>>0?g+1|0:g,32),A=w+A|0,c=nA(i=(e=i+B|0)^D,B=(o=B>>>0>e>>>0?A+1|0:A)^c,16),t=w,A=nA(f,y,13),g=n+(y=g^w)|0,A=g=(C=r+(f=A^C)|0)>>>0<r>>>0?g+1|0:g,n=nA(C,g,32),g=w+B|0,B=i=n+i|0,t=nA(i^c,(g=i>>>0<n>>>0?g+1|0:g)^t,21),r=w,C=nA(f,y,17)^C,n=nA(C,A^=w,13),A=A+o|0,o=A=w^((C=C+e|0)>>>0<e>>>0?A+1|0:A),C=nA(i=C^n,A,17)^t,A=w^r,g=g+o|0,r=B,C=nA(B=B+i|0,g=r>>>0>B>>>0?g+1|0:g,32)^C^B,E[0|I]=C,E[I+1|0]=C>>>8,E[I+2|0]=C>>>16,E[I+3|0]=C>>>24,A^=g^w,E[I+4|0]=A,E[I+5|0]=A>>>8,E[I+6|0]=A>>>16,E[I+7|0]=A>>>24,0},nb:function(A){hA(A|=0,16);},ob:function(){return 208},pb:BI,qb:II,rb:II,sb:BI,tb:function(){return -65},ub:function(A,I,g){A|=0;var C,B,Q,i,o=0,n=0,r=0,f=0,t=0;return D=Q=D-160|0,QA(I|=0,g|=0,32,0),E[0|I]=248&a[0|I],E[I+31|0]=63&a[I+31|0]|64,v(Q,I),uA(A,Q),n=a[(B=g)+8|0]|a[B+9|0]<<8|a[B+10|0]<<16|a[B+11|0]<<24,o=a[B+12|0]|a[B+13|0]<<8|a[B+14|0]<<16|a[B+15|0]<<24,r=a[B+16|0]|a[B+17|0]<<8|a[B+18|0]<<16|a[B+19|0]<<24,f=a[B+20|0]|a[B+21|0]<<8|a[B+22|0]<<16|a[B+23|0]<<24,t=a[0|B]|a[B+1|0]<<8|a[B+2|0]<<16|a[B+3|0]<<24,g=a[B+4|0]|a[B+5|0]<<8|a[B+6|0]<<16|a[B+7|0]<<24,i=a[B+28|0]|a[B+29|0]<<8|a[B+30|0]<<16|a[B+31|0]<<24,C=I,I=a[B+24|0]|a[B+25|0]<<8|a[B+26|0]<<16|a[B+27|0]<<24,E[C+24|0]=I,E[C+25|0]=I>>>8,E[C+26|0]=I>>>16,E[C+27|0]=I>>>24,E[C+28|0]=i,E[C+29|0]=i>>>8,E[C+30|0]=i>>>16,E[C+31|0]=i>>>24,E[C+16|0]=r,E[C+17|0]=r>>>8,E[C+18|0]=r>>>16,E[C+19|0]=r>>>24,E[C+20|0]=f,E[C+21|0]=f>>>8,E[C+22|0]=f>>>16,E[C+23|0]=f>>>24,E[C+8|0]=n,E[C+9|0]=n>>>8,E[C+10|0]=n>>>16,E[C+11|0]=n>>>24,E[C+12|0]=o,E[C+13|0]=o>>>8,E[C+14|0]=o>>>16,E[C+15|0]=o>>>24,E[0|C]=t,E[C+1|0]=t>>>8,E[C+2|0]=t>>>16,E[C+3|0]=t>>>24,E[C+4|0]=g,E[C+5|0]=g>>>8,E[C+6|0]=g>>>16,E[C+7|0]=g>>>24,r=a[(o=A)+8|0]|a[o+9|0]<<8|a[o+10|0]<<16|a[o+11|0]<<24,f=a[o+12|0]|a[o+13|0]<<8|a[o+14|0]<<16|a[o+15|0]<<24,t=a[o+16|0]|a[o+17|0]<<8|a[o+18|0]<<16|a[o+19|0]<<24,g=a[o+20|0]|a[o+21|0]<<8|a[o+22|0]<<16|a[o+23|0]<<24,I=a[0|o]|a[o+1|0]<<8|a[o+2|0]<<16|a[o+3|0]<<24,A=a[o+4|0]|a[o+5|0]<<8|a[o+6|0]<<16|a[o+7|0]<<24,n=a[o+28|0]|a[o+29|0]<<8|a[o+30|0]<<16|a[o+31|0]<<24,o=a[o+24|0]|a[o+25|0]<<8|a[o+26|0]<<16|a[o+27|0]<<24,E[C+56|0]=o,E[C+57|0]=o>>>8,E[C+58|0]=o>>>16,E[C+59|0]=o>>>24,E[C+60|0]=n,E[C+61|0]=n>>>8,E[C+62|0]=n>>>16,E[C+63|0]=n>>>24,E[C+48|0]=t,E[C+49|0]=t>>>8,E[C+50|0]=t>>>16,E[C+51|0]=t>>>24,E[C+52|0]=g,E[C+53|0]=g>>>8,E[C+54|0]=g>>>16,E[C+55|0]=g>>>24,E[C+40|0]=r,E[C+41|0]=r>>>8,E[C+42|0]=r>>>16,E[C+43|0]=r>>>24,E[C+44|0]=f,E[C+45|0]=f>>>8,E[C+46|0]=f>>>16,E[C+47|0]=f>>>24,E[C+32|0]=I,E[C+33|0]=I>>>8,E[C+34|0]=I>>>16,E[C+35|0]=I>>>24,E[C+36|0]=A,E[C+37|0]=A>>>8,E[C+38|0]=A>>>16,E[C+39|0]=A>>>24,D=Q+160|0,0},vb:function(A,I){A|=0,I|=0;var g,C,B,Q,i,n=0,r=0,f=0;return D=r=D-192|0,hA(r,32),QA(I,r,32,0),E[0|I]=248&a[0|I],E[I+31|0]=63&a[I+31|0]|64,v(f=r+32|0,I),uA(A,f),g=r,f=o[r+28>>2],r=o[r+24>>2],E[I+24|0]=r,E[I+25|0]=r>>>8,E[I+26|0]=r>>>16,E[I+27|0]=r>>>24,E[I+28|0]=f,E[I+29|0]=f>>>8,E[I+30|0]=f>>>16,E[I+31|0]=f>>>24,f=o[g+20>>2],r=o[g+16>>2],E[I+16|0]=r,E[I+17|0]=r>>>8,E[I+18|0]=r>>>16,E[I+19|0]=r>>>24,E[I+20|0]=f,E[I+21|0]=f>>>8,E[I+22|0]=f>>>16,E[I+23|0]=f>>>24,f=o[g+12>>2],r=o[g+8>>2],E[I+8|0]=r,E[I+9|0]=r>>>8,E[I+10|0]=r>>>16,E[I+11|0]=r>>>24,E[I+12|0]=f,E[I+13|0]=f>>>8,E[I+14|0]=f>>>16,E[I+15|0]=f>>>24,f=o[g+4>>2],r=o[g>>2],E[0|I]=r,E[I+1|0]=r>>>8,E[I+2|0]=r>>>16,E[I+3|0]=r>>>24,E[I+4|0]=f,E[I+5|0]=f>>>8,E[I+6|0]=f>>>16,E[I+7|0]=f>>>24,C=a[(n=A)+8|0]|a[n+9|0]<<8|a[n+10|0]<<16|a[n+11|0]<<24,B=a[n+12|0]|a[n+13|0]<<8|a[n+14|0]<<16|a[n+15|0]<<24,Q=a[n+16|0]|a[n+17|0]<<8|a[n+18|0]<<16|a[n+19|0]<<24,f=a[n+20|0]|a[n+21|0]<<8|a[n+22|0]<<16|a[n+23|0]<<24,r=a[0|n]|a[n+1|0]<<8|a[n+2|0]<<16|a[n+3|0]<<24,A=a[n+4|0]|a[n+5|0]<<8|a[n+6|0]<<16|a[n+7|0]<<24,i=a[n+28|0]|a[n+29|0]<<8|a[n+30|0]<<16|a[n+31|0]<<24,n=a[n+24|0]|a[n+25|0]<<8|a[n+26|0]<<16|a[n+27|0]<<24,E[I+56|0]=n,E[I+57|0]=n>>>8,E[I+58|0]=n>>>16,E[I+59|0]=n>>>24,E[I+60|0]=i,E[I+61|0]=i>>>8,E[I+62|0]=i>>>16,E[I+63|0]=i>>>24,E[I+48|0]=Q,E[I+49|0]=Q>>>8,E[I+50|0]=Q>>>16,E[I+51|0]=Q>>>24,E[I+52|0]=f,E[I+53|0]=f>>>8,E[I+54|0]=f>>>16,E[I+55|0]=f>>>24,E[I+40|0]=C,E[I+41|0]=C>>>8,E[I+42|0]=C>>>16,E[I+43|0]=C>>>24,E[I+44|0]=B,E[I+45|0]=B>>>8,E[I+46|0]=B>>>16,E[I+47|0]=B>>>24,E[I+32|0]=r,E[I+33|0]=r>>>8,E[I+34|0]=r>>>16,E[I+35|0]=r>>>24,E[I+36|0]=A,E[I+37|0]=A>>>8,E[I+38|0]=A>>>16,E[I+39|0]=A>>>24,$A(g,32),D=g+192|0,0},wb:function(A,I,g,C,B,Q){I|=0,B|=0,Q|=0;var i,E=0;return D=i=D-16|0,s(A|=0,i+8|0,kA(A- -64|0,g|=0,C|=0),C,B,Q,0),64!=o[i+8>>2]|o[i+12>>2]?(I&&(o[I>>2]=0,o[I+4>>2]=0),MA(A,0,C- -64|0),E=-1):I&&(o[I>>2]=C- -64,o[I+4>>2]=B-((C>>>0<4294967232)-1|0)),D=i+16|0,0|E},xb:function(A,I,g,C,B,Q){A|=0,I|=0,g|=0;var i=0;A:{I:{if(!(!(B|=0)&(C|=0)>>>0<64||(B=B-1|0,!(B=(C=C+-64|0)>>>0<4294967232?B+1|0:B)&C>>>0>4294967231|B))){if(!k(g,i=g- -64|0,C,B,Q|=0,0))break I;A&&MA(A,0,C);}if(g=-1,!I)break A;o[I>>2]=0,o[I+4>>2]=0;break A}I&&(o[I>>2]=C,o[I+4>>2]=B),g=0,A&&kA(A,i,C);}return 0|g},yb:function(A,I,g,C,B,Q){return s(A|=0,I|=0,g|=0,C|=0,B|=0,Q|=0,0),0},zb:function(A,I,g,C,B){return 0|k(A|=0,I|=0,g|=0,C|=0,B|=0,0)},Ab:function(A){return EA(A|=0),0},Bb:function(A,I,g,C){return 0|m(A|=0,I|=0,g|=0,C|=0)},Cb:function(A,I,g,C){var B;return I|=0,g|=0,C|=0,D=B=D+-64|0,M(A|=0,B),A=s(I,g,B,64,0,C,1),D=B- -64|0,0|A},Db:function(A,I,g){var C;return I|=0,g|=0,D=C=D+-64|0,M(A|=0,C),A=k(I,C,64,0,g,1),D=C- -64|0,0|A},Eb:function(A,I){A|=0;var g,C=0,B=0,Q=0,i=0,a=0,n=0,f=0,t=0,e=0,c=0,y=0,h=0,s=0,p=0,u=0,k=0,S=0,H=0,M=0,G=0,J=0,N=0,Y=0,K=0,P=0,v=0,m=0,d=0,L=0,R=0,x=0,j=0,q=0,z=0,O=0,T=0,Z=0,$=0,AA=0,IA=0,gA=0,CA=0,BA=0,QA=0,EA=0,oA=0,nA=0,rA=0,fA=0,tA=0,eA=0,cA=0,yA=0,wA=0,hA=0,sA=0,pA=0,uA=0,kA=0,FA=0,lA=0,SA=0,HA=0,GA=0,UA=0,JA=0,NA=0,YA=0,bA=0,_A=0,KA=0,PA=0,vA=0,mA=0,dA=0,LA=0,RA=0,xA=0,jA=0,XA=0;if(D=g=D-256|0,PA=-1,!aA(I|=0)&&!U(g+96|0,I)){for(D=C=D-2048|0,V(s=C+640|0,I=g+96|0),B=o[I+8>>2],i=o[I+12>>2],Q=o[I+16>>2],a=o[I+20>>2],e=o[I+24>>2],c=o[I+28>>2],n=o[I>>2],f=o[I+4>>2],p=o[I+36>>2],o[C+352>>2]=o[I+32>>2],o[C+356>>2]=p,o[C+344>>2]=e,o[C+348>>2]=c,o[C+336>>2]=Q,o[C+340>>2]=a,o[C+328>>2]=B,o[C+332>>2]=i,o[C+320>>2]=n,o[C+324>>2]=f,B=o[I+40>>2],i=o[I+44>>2],Q=o[I+48>>2],a=o[I+52>>2],e=o[I+56>>2],c=o[I+60>>2],f=o[(n=I- -64|0)>>2],n=o[n+4>>2],p=o[I+76>>2],o[C+392>>2]=o[I+72>>2],o[C+396>>2]=p,o[C+384>>2]=f,o[C+388>>2]=n,o[C+376>>2]=e,o[C+380>>2]=c,o[C+368>>2]=Q,o[C+372>>2]=a,o[C+360>>2]=B,o[C+364>>2]=i,B=o[I+80>>2],i=o[I+84>>2],Q=o[I+88>>2],a=o[I+92>>2],e=o[I+96>>2],c=o[I+100>>2],n=o[I+104>>2],f=o[I+108>>2],p=o[I+116>>2],o[C+432>>2]=o[I+112>>2],o[C+436>>2]=p,o[C+424>>2]=n,o[C+428>>2]=f,o[C+416>>2]=e,o[C+420>>2]=c,o[C+408>>2]=Q,o[C+412>>2]=a,o[C+400>>2]=B,o[C+404>>2]=i,l(I=C+480|0,B=C+320|0),F(n=C+160|0,I,i=C+600|0),F(C+200|0,Q=C+520|0,a=C+560|0),F(C+240|0,a,i),F(C+280|0,I,Q),_(I,n,s),F(B,I,i),F(s=C+360|0,Q,a),F(e=C+400|0,a,i),F(c=C+440|0,I,Q),V(f=C+800|0,B),_(I,n,f),F(B,I,i),F(s,Q,a),F(e,a,i),F(c,I,Q),V(f=C+960|0,B),_(I,n,f),F(B,I,i),F(s,Q,a),F(e,a,i),F(c,I,Q),V(f=C+1120|0,B),_(I,n,f),F(B,I,i),F(s,Q,a),F(e,a,i),F(c,I,Q),V(f=C+1280|0,B),_(I,n,f),F(B,I,i),F(s,Q,a),F(e,a,i),F(c,I,Q),V(f=C+1440|0,B),_(I,n,f),F(B,I,i),F(s,Q,a),F(e,a,i),F(c,I,Q),V(f=C+1600|0,B),_(I,n,f),F(B,I,i),F(s,Q,a),F(e,a,i),F(c,I,Q),V(C+1760|0,B),o[C+32>>2]=0,o[C+36>>2]=0,o[C+24>>2]=0,o[C+28>>2]=0,o[C+16>>2]=0,o[C+20>>2]=0,o[C+8>>2]=0,o[C+12>>2]=0,o[C+44>>2]=0,o[C+48>>2]=0,o[C+52>>2]=0,o[C+56>>2]=0,o[C+60>>2]=0,o[C+64>>2]=0,o[C+68>>2]=0,o[C+72>>2]=0,o[C+76>>2]=0,o[C+80>>2]=1,o[C>>2]=0,o[C+4>>2]=0,o[C+40>>2]=1,MA(C+84|0,0,76),f=C+120|0,p=C+80|0,M=C+40|0,I=252;B=o[C+36>>2],o[C+1960>>2]=o[C+32>>2],o[C+1964>>2]=B,B=o[C+28>>2],o[C+1952>>2]=o[C+24>>2],o[C+1956>>2]=B,B=o[C+20>>2],o[C+1944>>2]=o[C+16>>2],o[C+1948>>2]=B,B=o[C+12>>2],o[C+1936>>2]=o[C+8>>2],o[C+1940>>2]=B,B=o[C+4>>2],o[C+1928>>2]=o[C>>2],o[C+1932>>2]=B,B=o[C+76>>2],o[C+2e3>>2]=o[C+72>>2],o[C+2004>>2]=B,B=o[C+68>>2],o[C+1992>>2]=o[C+64>>2],o[C+1996>>2]=B,B=o[C+60>>2],o[C+1984>>2]=o[C+56>>2],o[C+1988>>2]=B,B=o[C+52>>2],o[C+1976>>2]=o[C+48>>2],o[C+1980>>2]=B,B=o[C+44>>2],o[C+1968>>2]=o[C+40>>2],o[C+1972>>2]=B,B=o[C+84>>2],o[C+2008>>2]=o[C+80>>2],o[C+2012>>2]=B,B=o[C+92>>2],o[C+2016>>2]=o[C+88>>2],o[C+2020>>2]=B,B=o[C+100>>2],o[C+2024>>2]=o[C+96>>2],o[C+2028>>2]=B,B=o[C+108>>2],o[C+2032>>2]=o[C+104>>2],o[C+2036>>2]=B,B=o[C+116>>2],o[C+2040>>2]=o[C+112>>2],o[C+2044>>2]=B,B=I,I=E[I+33424|0],l(C+480|0,C+1928|0),(0|I)>0?(F(k=C+320|0,n=C+480|0,i),F(s,Q,a),F(e,a,i),F(c,n,Q),_(n,k,(C+640|0)+r((254&I)>>>1|0,160)|0)):(0|I)>=0||(F(k=C+320|0,n=C+480|0,i),F(s,Q,a),F(e,a,i),F(c,n,Q),b(n,k,(C+640|0)+r((0-I&254)>>>1|0,160)|0)),F(C,I=C+480|0,i),F(M,Q,a),F(p,a,i),F(f,I,Q),I=B-1|0,B;);W(I=C+640|0,C),I=iA(I,32),D=C+2048|0,I&&(Q=o[g+136>>2],o[g>>2]=1-Q,PA=0,j=o[g+172>>2],o[g+36>>2]=0-j,f=o[g+168>>2],o[g+32>>2]=0-f,q=o[g+164>>2],o[g+28>>2]=0-q,s=o[g+160>>2],o[g+24>>2]=0-s,z=o[g+156>>2],o[g+20>>2]=0-z,e=o[g+152>>2],o[g+16>>2]=0-e,O=o[g+148>>2],o[g+12>>2]=0-O,c=o[g+144>>2],o[g+8>>2]=0-c,T=o[g+140>>2],o[g+4>>2]=0-T,X(g,g),I=DA(M=o[g+4>>2],L=M>>31,G=z<<1,fA=G>>31),B=w,C=DA(a=o[g>>2],N=a>>31,s,Y=s>>31),B=w+B|0,B=(I=C+I|0)>>>0<C>>>0?B+1|0:B,C=(i=DA(K=o[g+8>>2],Z=K>>31,e,P=e>>31))+I|0,I=w+B|0,I=C>>>0<i>>>0?I+1|0:I,B=C,C=DA(R=o[g+12>>2],IA=R>>31,BA=O<<1,tA=BA>>31),I=w+I|0,I=C>>>0>(B=B+C|0)>>>0?I+1|0:I,C=DA($=o[g+16>>2],QA=$>>31,c,v=c>>31),I=w+I|0,I=C>>>0>(B=C+B|0)>>>0?I+1|0:I,JA=i=o[g+20>>2],n=DA(i,eA=i>>31,EA=T<<1,cA=EA>>31),C=w+I|0,C=(B=n+B|0)>>>0<n>>>0?C+1|0:C,NA=S=o[g+24>>2],I=(Q=DA(S,HA=S>>31,n=Q+1|0,m=n>>31))+B|0,B=w+C|0,B=I>>>0<Q>>>0?B+1|0:B,yA=o[g+28>>2],C=(Q=DA(y=r(yA,19),gA=y>>31,oA=j<<1,wA=oA>>31))+I|0,I=w+B|0,I=C>>>0<Q>>>0?I+1|0:I,B=C,vA=o[g+32>>2],C=DA(k=r(vA,19),AA=k>>31,f,d=f>>31),I=w+I|0,I=C>>>0>(B=B+C|0)>>>0?I+1|0:I,mA=o[g+36>>2],C=DA(p=r(mA,19),x=p>>31,nA=q<<1,hA=nA>>31),I=w+I|0,h=B=C+B|0,Q=C>>>0>B>>>0?I+1|0:I,I=DA(e,P,M,L),B=w,t=DA(a,N,z,sA=z>>31),C=w+B|0,C=(I=t+I|0)>>>0<t>>>0?C+1|0:C,t=DA(K,Z,O,pA=O>>31),B=w+C|0,B=(I=t+I|0)>>>0<t>>>0?B+1|0:B,C=(t=DA(c,v,R,IA))+I|0,I=w+B|0,I=C>>>0<t>>>0?I+1|0:I,B=C,C=DA($,QA,T,uA=T>>31),I=w+I|0,I=C>>>0>(B=B+C|0)>>>0?I+1|0:I,C=DA(n,m,i,eA),I=w+I|0,I=C>>>0>(B=C+B|0)>>>0?I+1|0:I,t=DA(S=r(S,19),rA=S>>31,j,kA=j>>31),C=w+I|0,C=(B=t+B|0)>>>0<t>>>0?C+1|0:C,I=(t=DA(f,d,y,gA))+B|0,B=w+C|0,B=I>>>0<t>>>0?B+1|0:B,C=(t=DA(k,AA,q,FA=q>>31))+I|0,I=w+B|0,I=C>>>0<t>>>0?I+1|0:I,B=C,C=DA(s,Y,p,x),I=w+I|0,YA=B=B+C|0,CA=C>>>0>B>>>0?I+1|0:I,I=DA(M,L,BA,tA),C=w,B=(t=DA(a,N,e,P))+I|0,I=w+C|0,I=B>>>0<t>>>0?I+1|0:I,t=DA(c,v,K,Z),C=w+I|0,C=(B=t+B|0)>>>0<t>>>0?C+1|0:C,I=(t=DA(R,IA,EA,cA))+B|0,B=w+C|0,B=I>>>0<t>>>0?B+1|0:B,C=(t=DA(n,m,$,QA))+I|0,I=w+B|0,I=C>>>0<t>>>0?I+1|0:I,B=C,C=DA(t=r(i,19),lA=t>>31,oA,wA),I=w+I|0,I=C>>>0>(B=B+C|0)>>>0?I+1|0:I,C=DA(f,d,S,rA),I=w+I|0,I=C>>>0>(B=C+B|0)>>>0?I+1|0:I,i=DA(y,gA,nA,hA),C=w+I|0,C=(B=i+B|0)>>>0<i>>>0?C+1|0:C,I=(i=DA(s,Y,k,AA))+B|0,B=w+C|0,B=I>>>0<i>>>0?B+1|0:B,C=(i=DA(p,x,G,fA))+I|0,I=w+B|0,dA=C,LA=I=C>>>0<i>>>0?I+1|0:I,RA=C=C+33554432|0,xA=I=C>>>0<33554432?I+1|0:I,C=(67108863&I)<<6|C>>>26,I=(I>>26)+CA|0,YA=i=C+YA|0,C=I=C>>>0>i>>>0?I+1|0:I,jA=I=i+16777216|0,i=(33554431&(C=I>>>0<16777216?C+1|0:C))<<7|I>>>25,I=(B=C>>25)+Q|0,I=(C=i+h|0)>>>0<i>>>0?I+1|0:I,bA=B=C+33554432|0,i=I=B>>>0<33554432?I+1|0:I,o[g+72>>2]=C-(-67108864&B),I=DA(M,L,EA,cA),B=w,Q=DA(a,N,c,v),C=w+B|0,C=(I=Q+I|0)>>>0<Q>>>0?C+1|0:C,B=(Q=DA(n,m,K,Z))+I|0,I=w+C|0,I=B>>>0<Q>>>0?I+1|0:I,C=DA(Q=r(R,19),SA=Q>>31,oA,wA),I=w+I|0,I=C>>>0>(B=C+B|0)>>>0?I+1|0:I,C=(h=DA(CA=r($,19),GA=CA>>31,f,d))+B|0,B=w+I|0,B=C>>>0<h>>>0?B+1|0:B,h=DA(nA,hA,t,lA),I=w+B|0,I=(C=h+C|0)>>>0<h>>>0?I+1|0:I,B=(h=DA(s,Y,S,rA))+C|0,C=w+I|0,C=B>>>0<h>>>0?C+1|0:C,h=DA(y,gA,G,fA),I=w+C|0,I=(B=h+B|0)>>>0<h>>>0?I+1|0:I,C=DA(e,P,k,AA),I=w+I|0,I=C>>>0>(B=C+B|0)>>>0?I+1|0:I,C=(h=DA(p,x,BA,tA))+B|0,B=w+I|0,H=C,_A=C>>>0<h>>>0?B+1|0:B,I=DA(n,m,M,L),B=w,C=(h=DA(a,N,T,uA))+I|0,I=w+B|0,I=C>>>0<h>>>0?I+1|0:I,h=B=r(K,19),B=(u=DA(B,UA=B>>31,j,kA))+C|0,C=w+I|0,C=B>>>0<u>>>0?C+1|0:C,u=DA(f,d,Q,SA),I=w+C|0,I=(B=u+B|0)>>>0<u>>>0?I+1|0:I,C=DA(CA,GA,q,FA),I=w+I|0,I=C>>>0>(B=C+B|0)>>>0?I+1|0:I,C=(u=DA(s,Y,t,lA))+B|0,B=w+I|0,B=C>>>0<u>>>0?B+1|0:B,u=DA(S,rA,z,sA),I=w+B|0,I=(C=u+C|0)>>>0<u>>>0?I+1|0:I,B=(u=DA(e,P,y,gA))+C|0,C=w+I|0,C=B>>>0<u>>>0?C+1|0:C,u=DA(k,AA,O,pA),I=w+C|0,I=(B=u+B|0)>>>0<u>>>0?I+1|0:I,C=DA(c,v,p,x),I=w+I|0,KA=B=C+B|0,u=C>>>0>B>>>0?I+1|0:I,I=DA(I=r(M,19),I>>31,oA,wA),B=w,C=DA(a,N,n,m),B=w+B|0,B=(I=C+I|0)>>>0<C>>>0?B+1|0:B,C=(h=DA(f,d,h,UA))+I|0,I=w+B|0,B=(Q=DA(Q,SA,nA,hA))+C|0,C=w+(C>>>0<h>>>0?I+1|0:I)|0,C=B>>>0<Q>>>0?C+1|0:C,Q=DA(s,Y,CA,GA),I=w+C|0,I=(B=Q+B|0)>>>0<Q>>>0?I+1|0:I,C=DA(G,fA,t,lA),I=w+I|0,I=C>>>0>(B=C+B|0)>>>0?I+1|0:I,C=(Q=DA(e,P,S,rA))+B|0,B=w+I|0,B=C>>>0<Q>>>0?B+1|0:B,Q=DA(y,gA,BA,tA),I=w+B|0,I=(C=Q+C|0)>>>0<Q>>>0?I+1|0:I,B=(Q=DA(c,v,k,AA))+C|0,C=w+I|0,C=B>>>0<Q>>>0?C+1|0:C,Q=DA(p,x,EA,cA),I=w+C|0,h=B=Q+B|0,SA=I=B>>>0<Q>>>0?I+1|0:I,UA=B=B+33554432|0,XA=I=B>>>0<33554432?I+1|0:I,C=I>>26,I=(67108863&I)<<6|B>>>26,B=C+u|0,u=Q=I+KA|0,I=B=I>>>0>Q>>>0?B+1|0:B,KA=B=Q+16777216|0,Q=(33554431&(I=B>>>0<16777216?I+1|0:I))<<7|B>>>25,I=(I>>25)+_A|0,I=(B=Q+H|0)>>>0<Q>>>0?I+1|0:I,_A=B=(C=B)+33554432|0,Q=I=B>>>0<33554432?I+1|0:I,o[g+56>>2]=C-(-67108864&B),I=DA(s,Y,M,L),C=w,B=(H=DA(a,N,q,FA))+I|0,I=w+C|0,I=B>>>0<H>>>0?I+1|0:I,C=DA(K,Z,z,sA),I=w+I|0,I=C>>>0>(B=C+B|0)>>>0?I+1|0:I,C=DA(e,P,R,IA),I=w+I|0,I=C>>>0>(B=C+B|0)>>>0?I+1|0:I,H=DA($,QA,O,pA),C=w+I|0,C=(B=H+B|0)>>>0<H>>>0?C+1|0:C,I=(H=DA(c,v,JA,eA))+B|0,B=w+C|0,B=I>>>0<H>>>0?B+1|0:B,C=(H=DA(T,uA,NA,HA))+I|0,I=w+B|0,I=C>>>0<H>>>0?I+1|0:I,B=C,C=DA(yA,H=yA>>31,n,m),I=w+I|0,I=C>>>0>(B=B+C|0)>>>0?I+1|0:I,C=DA(k,AA,j,kA),I=w+I|0,I=C>>>0>(B=C+B|0)>>>0?I+1|0:I,J=(C=B)+(B=DA(p,x,f,d))|0,C=w+I|0,B=(I=i>>26)+(B=B>>>0>J>>>0?C+1|0:C)|0,I=(C=(i=(67108863&i)<<6|bA>>>26)+J|0)>>>0<i>>>0?B+1|0:B,bA=B=C+16777216|0,i=I=B>>>0<16777216?I+1|0:I,o[g+76>>2]=C-(-33554432&B),I=DA(c,v,M,L),B=w,J=DA(a,N,O,pA),C=w+B|0,C=(I=J+I|0)>>>0<J>>>0?C+1|0:C,J=DA(K,Z,T,uA),B=w+C|0,B=(I=J+I|0)>>>0<J>>>0?B+1|0:B,C=(J=DA(n,m,R,IA))+I|0,I=w+B|0,I=C>>>0<J>>>0?I+1|0:I,B=C,C=DA(CA,GA,j,kA),I=w+I|0,I=C>>>0>(B=B+C|0)>>>0?I+1|0:I,C=DA(f,d,t,lA),I=w+I|0,I=C>>>0>(B=C+B|0)>>>0?I+1|0:I,B=(S=DA(S,rA,q,FA))+B|0,C=w+I|0,I=(y=DA(s,Y,y,gA))+B|0,B=w+(B>>>0<S>>>0?C+1|0:C)|0,C=(k=DA(k,AA,z,sA))+I|0,I=w+(I>>>0<y>>>0?B+1|0:B)|0,I=C>>>0<k>>>0?I+1|0:I,B=C,C=DA(e,P,p,x),I=w+I|0,y=B=B+C|0,I=(I=C>>>0>B>>>0?I+1|0:I)+(B=Q>>26)|0,C=(B=Q=y+(C=(67108863&Q)<<6|_A>>>26)|0)>>>0<C>>>0?I+1|0:I,k=I=B+16777216|0,Q=C=I>>>0<16777216?C+1|0:C,o[g+60>>2]=B-(-33554432&I),I=DA(M,L,nA,hA),C=w,B=(y=DA(a,N,f,d))+I|0,I=w+C|0,I=B>>>0<y>>>0?I+1|0:I,C=DA(s,Y,K,Z),I=w+I|0,I=C>>>0>(B=C+B|0)>>>0?I+1|0:I,y=DA(R,IA,G,fA),C=w+I|0,C=(B=y+B|0)>>>0<y>>>0?C+1|0:C,I=(y=DA(e,P,$,QA))+B|0,B=w+C|0,B=I>>>0<y>>>0?B+1|0:B,C=(y=DA(BA,tA,JA,eA))+I|0,I=w+B|0,I=C>>>0<y>>>0?I+1|0:I,B=C,C=DA(c,v,NA,HA),I=w+I|0,I=C>>>0>(B=B+C|0)>>>0?I+1|0:I,C=B,B=DA(yA,H,EA,cA),I=w+I|0,I=(C=C+B|0)>>>0<B>>>0?I+1|0:I,y=B=vA,B=(G=DA(B,S=B>>31,n,m))+C|0,C=w+I|0,I=(p=DA(p,x,oA,wA))+B|0,B=w+(B>>>0<G>>>0?C+1|0:C)|0,C=I>>>0<p>>>0?B+1|0:B,B=I,I=(I=i>>25)+C|0,I=(B=B+(i=(33554431&i)<<7|bA>>>25)|0)>>>0<i>>>0?I+1|0:I,p=B=(C=B)+33554432|0,i=I=B>>>0<33554432?I+1|0:I,o[g+80>>2]=C-(-67108864&B),B=Q>>25,C=(Q=(33554431&Q)<<7|k>>>25)+(dA-(I=-67108864&RA)|0)|0,I=B+(LA-((I>>>0>dA>>>0)+xA|0)|0)|0,I=C>>>0<Q>>>0?I+1|0:I,Q=I=(67108863&(I=(B=C+33554432|0)>>>0<33554432?I+1|0:I))<<6|B>>>26,I=I+(G=YA-(-33554432&jA)|0)|0,o[g+68>>2]=I,o[g+64>>2]=C-(-67108864&B),I=DA(f,d,M,L),C=w,B=(Q=DA(a,N,j,kA))+I|0,I=w+C|0,I=B>>>0<Q>>>0?I+1|0:I,C=(Q=DA(K,Z,q,FA))+B|0,B=w+I|0,B=C>>>0<Q>>>0?B+1|0:B,I=(Q=DA(s,Y,R,IA))+C|0,C=w+B|0,C=I>>>0<Q>>>0?C+1|0:C,B=(Q=DA($,QA,z,sA))+I|0,I=w+C|0,I=B>>>0<Q>>>0?I+1|0:I,C=DA(e,P,JA,eA),I=w+I|0,I=C>>>0>(B=C+B|0)>>>0?I+1|0:I,C=DA(O,pA,NA,HA),I=w+I|0,I=C>>>0>(B=C+B|0)>>>0?I+1|0:I,C=(Q=DA(c,v,yA,H))+B|0,B=w+I|0,B=C>>>0<Q>>>0?B+1|0:B,Q=(I=DA(y,S,T,uA))+C|0,C=w+B|0,C=I>>>0>Q>>>0?C+1|0:C,B=Q,Q=DA(I=mA,I>>31,n,m),I=w+C|0,C=B=B+Q|0,I=(I=B>>>0<Q>>>0?I+1|0:I)+(B=i>>26)|0,I=(C=C+(i=(67108863&i)<<6|p>>>26)|0)>>>0<i>>>0?I+1|0:I,I=(B=C+16777216|0)>>>0<16777216?I+1|0:I,o[g+84>>2]=C-(-33554432&B),i=u-(-33554432&KA)|0,Q=h-(C=-67108864&UA)|0,a=SA-((C>>>0>h>>>0)+XA|0)|0,I=DA((33554431&(C=I))<<7|B>>>25,I=C>>25,19,0),B=w+a|0,I=I>>>0>(C=I+Q|0)>>>0?B+1|0:B,Q=I=(67108863&(I=(B=C+33554432|0)>>>0<33554432?I+1|0:I))<<6|B>>>26,I=I+i|0,o[g+52>>2]=I,o[g+48>>2]=C-(-67108864&B),W(A,g+48|0));}return D=g+256|0,0|PA},Fb:function(A,I){A|=0;var g,C=0;return D=g=D+-64|0,QA(g,I|=0,32,0),E[0|g]=248&a[0|g],E[g+31|0]=63&a[g+31|0]|64,I=o[g+20>>2],C=o[g+16>>2],E[A+16|0]=C,E[A+17|0]=C>>>8,E[A+18|0]=C>>>16,E[A+19|0]=C>>>24,E[A+20|0]=I,E[A+21|0]=I>>>8,E[A+22|0]=I>>>16,E[A+23|0]=I>>>24,I=o[g+12>>2],C=o[g+8>>2],E[A+8|0]=C,E[A+9|0]=C>>>8,E[A+10|0]=C>>>16,E[A+11|0]=C>>>24,E[A+12|0]=I,E[A+13|0]=I>>>8,E[A+14|0]=I>>>16,E[A+15|0]=I>>>24,I=o[g+4>>2],C=o[g>>2],E[0|A]=C,E[A+1|0]=C>>>8,E[A+2|0]=C>>>16,E[A+3|0]=C>>>24,E[A+4|0]=I,E[A+5|0]=I>>>8,E[A+6|0]=I>>>16,E[A+7|0]=I>>>24,I=o[g+28>>2],C=o[g+24>>2],E[A+24|0]=C,E[A+25|0]=C>>>8,E[A+26|0]=C>>>16,E[A+27|0]=C>>>24,E[A+28|0]=I,E[A+29|0]=I>>>8,E[A+30|0]=I>>>16,E[A+31|0]=I>>>24,$A(g,64),D=g- -64|0,0},Gb:function(){var A,I;return D=A=D-16|0,E[A+15|0]=0,I=0|t(34904,A+15|0,0),D=A+16|0,0|I},Hb:KA,Ib:function(A){var I,g=0,C=0;if(D=I=D-16|0,(A|=0)>>>0>=2){for(g=(0-A>>>0)%(A>>>0)|0;E[I+15|0]=0,g>>>0>(C=0|t(34904,I+15|0,0))>>>0;);g=(C>>>0)%(A>>>0)|0;}return D=I+16|0,0|g},Jb:hA,Kb:function(A,I,g){XA(A|=0,I|=0,1024,g|=0);},Lb:II,Mb:function(){var A=0,I=0;return (A=o[9048])&&(A=o[A+20>>2])&&(I=0|nI[0|A]()),0|I},Nb:function(A,I,g){A|=0,I|=0;var C,B=0,i=0,o=0;if(D=C=D-16|0,g|=0)e(1240,1100,197,1036),Q();else {if(I)for(;E[C+15|0]=0,i=A+B|0,o=0|t(34904,C+15|0,0),E[0|i]=o,(0|I)!=(0|(B=B+1|0)););D=C+16|0;}},Ob:function(A,I,g,C){A|=0,g|=0;var B=0,i=0,o=0;if(!((C|=0)>>>0>2147483646|C<<1>>>0>=(I|=0)>>>0)){if(I=0,C){for(;B=(I<<1)+A|0,i=15&(o=a[I+g|0]),E[B+1|0]=22272+((i<<8)+(i+65526&55552)|0)>>>8,i=B,B=o>>>4|0,E[0|i]=87+((B+65526>>>8&217)+B|0),(0|C)!=(0|(I=I+1|0)););I=C<<1;}else I=0;return E[I+A|0]=0,0|A}mA(),Q();},Pb:function(A,I,g,C,B,Q,i){A|=0,I|=0,g|=0,B|=0,Q|=0,i|=0;var n=0,r=0,f=0,t=0,e=0,c=0,y=0,D=0,w=0,h=0;A:if(C|=0){I:{g:{C:{B:{if(!B){for(r=1,B=0;;){if(!(255&((y=(65526+(f=(223&(e=a[g+n|0]))-55&255)^f+65520)>>>8|0)|(D=65526+(e^=48)>>>8|0))))break C;if(I>>>0<=c>>>0)break B;if(f=f&y|e&D,255&t?(E[A+c|0]=B|f,c=c+1|0):B=f<<4,t^=-1,(0|(n=n+1|0))==(0|C))break}n=C;break C}for(;;){Q:{i:{E:{o:{a:{if(!(255&((e=(65526+(f=(223&(r=a[g+n|0]))-55&255)^f+65520)>>>8|0)|(D=65526+(y=48^r)>>>8|0)))){if(255&t)break g;if(!$(B,r))break A;if((n=t=n+1|0)>>>0<C>>>0)break a;break A}if(I>>>0<=c>>>0)break B;if(r=f&e|y&D,!(255&t))break o;E[A+c|0]=r|h,c=c+1|0;break Q}for(;;){if(!(255&((e=(65526+(f=(223&(r=a[g+n|0]))-55&255)^f+65520)>>>8|0)|(D=65526+(y=48^r)>>>8|0)))){if(!$(B,r))break A;if((n=n+1|0)>>>0<C>>>0)continue;break E}break}if(I>>>0<=c>>>0)break i;r=f&e|y&D;}h=r<<4,t=0;break Q}n=C>>>0>t>>>0?C:t;break A}t=0;break B}if(t^=-1,r=1,!((n=n+1|0)>>>0<C>>>0))break}break C}o[8916]=68,r=0;}if(!(255&t))break I}o[8916]=28,w=-1,n=n-1|0,c=0;break A}r||(c=0,w=-1);}return i?o[i>>2]=g+n:(0|C)!=(0|n)&&(o[8916]=28,w=-1),Q&&(o[Q>>2]=c),0|w},Qb:function(A,I){A|=0;var g=0;return 1!=(-7&(I|=0))&&(mA(),Q()),1+((3&(g=(g=A)+r(A=(A>>>0)/3|0,-3)|0)?2&I?g+1|0:4:0)+(A<<2)|0)|0},Rb:function(A,I,g,C,B){A|=0,I|=0,g|=0,C|=0;var i=0,o=0,n=0,f=0,t=0,c=0,y=0,D=0,w=0,h=0;A:{I:{g:{if(1==(-7&(B|=0))&&(f=(i=(C>>>0)/3|0)<<2,(i=r(i,-3)+C|0)&&(f=2&B?(2|f)+(i>>>1|0)|0:f+4|0),!(I>>>0<=f>>>0))){if(!(4&B)){if(i=0,!C)break A;break g}if(i=0,!C)break A;for(;;){for(c=(D=a[g+y|0])|c<<8,t=i,i=1+((((n|=8)-6>>>0)/6|0)+i|0)|0;w=65510+(o=c>>>(n=(B=n)-6|0)&63)>>>8|0,h=o+65484>>>8|0,E[A+t|0]=(1+(16321^o)^-1)>>>8&45|o+252&o+65474>>>8&(-1^h)|(o+32705^-1)>>>8&95|w&o+65|h&o+71&(-1^w),(0|(t=t+1|0))!=(0|i););if((0|(y=y+1|0))==(0|C))break}if(!n)break A;t=(C=65510+(g=D<<12-B&63)>>>8|0)&g+65,c=g+252&g+65474>>>8&(-1^(B=g+65484>>>8|0)),n=B&g+71&(-1^C),C=g+32705|0,B=(1+(16321^g)^-1)>>>8&45,g=95;break I}mA(),Q();}for(;;){for(c=(D=a[g+y|0])|c<<8,t=i,i=1+((((n|=8)-6>>>0)/6|0)+i|0)|0;w=65510+(o=c>>>(n=(B=n)-6|0)&63)>>>8|0,h=o+65484>>>8|0,E[A+t|0]=(1+(16321^o)^-1)>>>8&43|o+252&o+65474>>>8&(-1^h)|(o+16321^-1)>>>8&47|w&o+65|h&o+71&(-1^w),(0|(t=t+1|0))!=(0|i););if((0|(y=y+1|0))==(0|C))break}if(!n)break A;t=(C=65510+(g=D<<12-B&63)>>>8|0)&g+65,c=g+252&g+65474>>>8&(-1^(B=g+65484>>>8|0)),n=B&g+71&(-1^C),C=g+16321|0,B=(1+(16321^g)^-1)>>>8&43,g=47;}E[A+i|0]=g&(-1^C)>>>8|t|c|B|n,i=i+1|0;}A:{I:{if(i>>>0<=f>>>0){if(i>>>0<f>>>0)break I;f=i;break A}e(1048,1126,230,1319),Q();}MA(A+i|0,61,f-i|0);}return MA(A+f|0,0,(I>>>0>(g=f+1|0)>>>0?I:g)-f|0),0|A},Sb:function(A,I,g,C,B,i,n,r){A|=0,I|=0,g|=0,C|=0,B|=0,i|=0,n|=0;var f=0,t=0,e=0,c=0,y=0,D=0,w=0,h=0;A:{I:{g:{C:{B:{Q:{i:{E:{o:{a:{n:{if(1==(-7&(r|=0))){if(e=0,!C)break E;if(4&r)break n;for(;;){e=t;r:{f:{t:{e:{for(;;){if(f=(f=(c=E[g+e|0])-65|0)&((90-c^-1)&(-1^f))>>>8&255|c+4&((c+65488^-1)&(57-c^-1))>>>8&255|c+185&((c+65439^-1)&(122-c^-1))>>>8&255|(1+(16336^c)^-1)>>>8&63|(1+(16340^c)^-1)>>>8&62,255!=(0|(f|=(f-1&1+(65470^c))>>>8&255)))break e;if(f=0,!B)break o;if(!$(B,c))break;if((e=e+1|0)>>>0>=C>>>0)break t}t=e;break o}if(w=f+(w<<6)|0,y>>>0>1)break f;y=y+6|0;break r}t=(A=t+1|0)>>>0<C>>>0?C:A;break o}if(y=y-2|0,I>>>0<=D>>>0)break a;E[A+D|0]=w>>>y,D=D+1|0;}if(f=0,!((t=e+1|0)>>>0<C>>>0))break}break o}mA(),Q();}n:for(;;){for(e=t;;){r:{if(f=(f=(c=E[g+e|0])-65|0)&((90-c^-1)&(-1^f))>>>8&255|c+4&((c+65488^-1)&(57-c^-1))>>>8&255|c+185&((c+65439^-1)&(122-c^-1))>>>8&255|(1+(16288^c)^-1)>>>8&63|(1+(16338^c)^-1)>>>8&62,255==(0|(f|=(f-1&1+(65470^c))>>>8&255))){if(f=0,!B)break o;if($(B,c))break r;t=e;break o}if(w=f+(w<<6)|0,y>>>0<2)y=y+6|0;else {if(y=y-2|0,I>>>0<=D>>>0)break a;E[A+D|0]=w>>>y,D=D+1|0;}if(f=0,(t=e+1|0)>>>0<C>>>0)continue n;break o}if(!((e=e+1|0)>>>0<C>>>0))break}break}t=(A=t+1|0)>>>0<C>>>0?C:A;break o}t=e,o[8916]=68,f=1;}if(y>>>0>4)break i;e=t;}if(A=e,I=-1,f){t=A;break A}if((-1<<y^-1)&w){t=A;break A}if(2&r){r=A;break B}if(y>>>0<2){r=A;break B}if(t=A>>>0>C>>>0?A:C,e=y>>>1|0,!B)break Q;for(r=A;;){if((0|r)==(0|t)){f=68;break C}if(61!=(0|(A=E[g+r|0]))){if(!$(B,A)){f=28,t=r;break C}}else e=e-1|0;if(r=r+1|0,!e)break}break B}I=-1;break A}if(f=68,A>>>0>=C>>>0)break C;if(61!=a[A+g|0]){t=A,f=28;break C}if(r=A+e|0,1!=(0|e)){if((0|(y=A+1|0))==(0|t))break C;if(61!=a[g+y|0]){t=y,f=28;break C}if(2!=(0|e)){if((0|(A=A+2|0))==(0|t))break C;if(f=28,t=A,61!=a[A+g|0])break C}}}if(I=0,B)break g;break I}o[8916]=f;break A}if(!(C>>>0<=r>>>0)){for(;;){if(!$(B,E[g+r|0]))break I;if((0|(r=r+1|0))==(0|C))break}r=C;}}t=r,h=D;}return n?o[n>>2]=g+t:(0|C)!=(0|t)&&(o[8916]=28,I=-1),i&&(o[i>>2]=h),0|I},Tb:function(){var A=0;return o[9049]?A=1:(KA(),hA(36176,16),o[9049]=1,A=0),0|A},Ub:function(A,I,g,C,B){A|=0,I|=0,g|=0,B|=0;var i,n=0,r=0,f=0;D=i=D-16|0;A:{if(C|=0){if(f=-1,(n=(n=C-1|0)-(r=n&C?(g>>>0)%(C>>>0)|0:g&n)|0)>>>0>=(-1^g)>>>0)break A;if(!((g=g+n|0)>>>0>=B>>>0))for(A&&(o[A>>2]=g+1),A=I+g|0,f=0,E[i+15|0]=0,g=0;B=I=A-g|0,r=a[0|I]&a[i+15|0],I=(g^n)-1>>>24|0,E[0|B]=r|128&I,E[i+15|0]=I|a[i+15|0],(0|C)!=(0|(g=g+1|0)););}else f=-1;return D=i+16|0,0|f}mA(),Q();},Vb:function(A,I,g,C){A|=0,I|=0,g|=0,C|=0;var B,Q=0,i=0,E=0,n=0,r=0;if(o[12+(B=D-16|0)>>2]=0,C-1>>>0<g>>>0){for(r=(i=g-1|0)+I|0,g=0,I=0;I&=255,n=(128^(E=a[r-Q|0]))-1&o[B+12>>2]-1&I-1,o[B+12>>2]=o[B+12>>2]|n<<23>>31&Q,I|=E,g|=n>>>8&1,(0|(Q=Q+1|0))!=(0|C););o[A>>2]=i-o[B+12>>2],A=(255&g)-1|0;}else A=-1;return 0|A},Wb:function(){return 1312},Xb:function(){return 10},Yb:iI,Zb:QI,_b:function(A){var I,g=0,C=0,B=0,Q=0,i=0,E=0,r=0,t=0,e=0,c=0,y=0,w=0;D=I=D-16|0;A:{I:{g:{C:{B:{Q:{i:{E:{o:{if((A|=0)>>>0<=244){if(3&(g=(E=o[8917])>>>(C=(r=A>>>0<11?16:A+11&-8)>>>3|0)|0)){g=35708+(A=(C=C+(1&(-1^g))|0)<<3)|0,B=o[A+35716>>2],(0|g)!=(0|(A=o[B+8>>2]))?(o[A+12>>2]=g,o[g+8>>2]=A):(y=35668,w=YA(-2,C)&E,o[y>>2]=w),A=B+8|0,g=C<<3,o[B+4>>2]=3|g,o[4+(g=g+B|0)>>2]=1|o[g+4>>2];break A}if((c=o[8919])>>>0>=r>>>0)break o;if(g){g=35708+(A=(B=RA(0-(A=(0-(A=2<<C)|A)&g<<C)&A))<<3)|0,Q=o[A+35716>>2],(0|g)!=(0|(A=o[Q+8>>2]))?(o[A+12>>2]=g,o[g+8>>2]=A):(E=YA(-2,B)&E,o[8917]=E),o[Q+4>>2]=3|r,B=(A=B<<3)-r|0,o[4+(C=Q+r|0)>>2]=1|B,o[A+Q>>2]=B,c&&(g=35708+(-8&c)|0,i=o[8922],(A=1<<(c>>>3))&E?A=o[g+8>>2]:(o[8917]=A|E,A=g),o[g+8>>2]=i,o[A+12>>2]=i,o[i+12>>2]=g,o[i+8>>2]=A),A=Q+8|0,o[8922]=C,o[8919]=B;break A}if(!(e=o[8918]))break o;for(C=o[35972+(RA(0-e&e)<<2)>>2],i=(-8&o[C+4>>2])-r|0,g=C;(A=o[g+16>>2])||(A=o[g+20>>2]);)i=(B=(g=(-8&o[A+4>>2])-r|0)>>>0<i>>>0)?g:i,C=B?A:C,g=A;if(t=o[C+24>>2],(0|(B=o[C+12>>2]))!=(0|C)){A=o[C+8>>2],o[A+12>>2]=B,o[B+8>>2]=A;break I}if(!(A=o[(g=C+20|0)>>2])){if(!(A=o[C+16>>2]))break E;g=C+16|0;}for(;Q=g,B=A,(A=o[(g=A+20|0)>>2])||(g=B+16|0,A=o[B+16>>2]););o[Q>>2]=0;break I}if(r=-1,!(A>>>0>4294967231)&&(r=-8&(A=A+11|0),e=o[8918])){i=0-r|0,E=0,r>>>0<256||(E=31,r>>>0>16777215||(E=62+((r>>>38-(A=f(A>>>8|0))&1)-(A<<1)|0)|0));a:{n:{if(g=o[35972+(E<<2)>>2])for(A=0,C=r<<(31!=(0|E)?25-(E>>>1|0)|0:0);;){if(!((Q=(-8&o[g+4>>2])-r|0)>>>0>=i>>>0||(B=g,i=Q,Q))){i=0,A=g;break n}if(Q=o[g+20>>2],g=o[16+((C>>>29&4)+g|0)>>2],A=Q?(0|Q)==(0|g)?A:Q:A,C<<=1,!g)break}else A=0;if(!(A|B)){if(B=0,!(A=(0-(A=2<<E)|A)&e))break o;A=o[35972+(RA(A&0-A)<<2)>>2];}if(!A)break a}for(;i=(C=(g=(-8&o[A+4>>2])-r|0)>>>0<i>>>0)?g:i,B=C?A:B,A=(g=o[A+16>>2])||o[A+20>>2];);}if(!(!B|o[8919]-r>>>0<=i>>>0)){if(E=o[B+24>>2],(0|B)!=(0|(C=o[B+12>>2]))){A=o[B+8>>2],o[A+12>>2]=C,o[C+8>>2]=A;break g}if(!(A=o[(g=B+20|0)>>2])){if(!(A=o[B+16>>2]))break i;g=B+16|0;}for(;Q=g,C=A,(A=o[(g=A+20|0)>>2])||(g=C+16|0,A=o[C+16>>2]););o[Q>>2]=0;break g}}}if((A=o[8919])>>>0>=r>>>0){B=o[8922],(g=A-r|0)>>>0>=16?(o[4+(C=B+r|0)>>2]=1|g,o[A+B>>2]=g,o[B+4>>2]=3|r):(o[B+4>>2]=3|A,o[4+(A=A+B|0)>>2]=1|o[A+4>>2],C=0,g=0),o[8919]=g,o[8922]=C,A=B+8|0;break A}if((t=o[8920])>>>0>r>>>0){g=t-r|0,o[8920]=g,A=(C=o[8923])+r|0,o[8923]=A,o[A+4>>2]=1|g,o[C+4>>2]=3|r,A=C+8|0;break A}if(A=0,e=r+47|0,o[9035]?C=o[9037]:(o[9038]=-1,o[9039]=-1,o[9036]=4096,o[9037]=4096,o[9035]=I+12&-16^1431655768,o[9040]=0,o[9028]=0,C=4096),(g=(Q=e+C|0)&(i=0-C|0))>>>0<=r>>>0)break A;if((B=o[9027])&&B>>>0<(E=(C=o[9025])+g|0)>>>0|C>>>0>=E>>>0)break A;o:{if(!(4&a[36112])){a:{n:{r:{f:{if(B=o[8923])for(A=36116;;){if((C=o[A>>2])>>>0<=B>>>0&B>>>0<C+o[A+4>>2]>>>0)break f;if(!(A=o[A+8>>2]))break}if(-1==(0|(C=pA(0))))break a;if(E=g,(A=(B=o[9036])-1|0)&C&&(E=(g-C|0)+(A+C&0-B)|0),E>>>0<=r>>>0)break a;if((B=o[9027])&&B>>>0<(i=(A=o[9025])+E|0)>>>0|A>>>0>=i>>>0)break a;if((0|C)!=(0|(A=pA(E))))break r;break o}if((0|(C=pA(E=i&Q-t)))==(o[A>>2]+o[A+4>>2]|0))break n;A=C;}if(-1==(0|A))break a;if(r+48>>>0<=E>>>0){C=A;break o}if(-1==(0|pA(C=(C=o[9037])+(e-E|0)&0-C)))break a;E=C+E|0,C=A;break o}if(-1!=(0|C))break o}o[9028]=4|o[9028];}if(-1==(0|(C=pA(g)))|-1==(0|(A=pA(0)))|A>>>0<=C>>>0)break C;if((E=A-C|0)>>>0<=r+40>>>0)break C}A=o[9025]+E|0,o[9025]=A,A>>>0>n[9026]&&(o[9026]=A);o:{if(Q=o[8923]){for(A=36116;;){if(((B=o[A>>2])+(g=o[A+4>>2])|0)==(0|C))break o;if(!(A=o[A+8>>2]))break}break Q}for((A=o[8921])>>>0<=C>>>0&&A||(o[8921]=C),A=0,o[9030]=E,o[9029]=C,o[8925]=-1,o[8926]=o[9035],o[9032]=0;g=35708+(B=A<<3)|0,o[B+35716>>2]=g,o[B+35720>>2]=g,32!=(0|(A=A+1|0)););g=(B=E-40|0)-(A=C+8&7?-8-C&7:0)|0,o[8920]=g,A=A+C|0,o[8923]=A,o[A+4>>2]=1|g,o[4+(C+B|0)>>2]=40,o[8924]=o[9039];break B}if(8&a[A+12|0]|B>>>0>Q>>>0|C>>>0<=Q>>>0)break Q;o[A+4>>2]=g+E,C=(A=Q+8&7?-8-Q&7:0)+Q|0,o[8923]=C,A=(g=o[8920]+E|0)-A|0,o[8920]=A,o[C+4>>2]=1|A,o[4+(g+Q|0)>>2]=40,o[8924]=o[9039];break B}B=0;break I}C=0;break g}n[8921]>C>>>0&&(o[8921]=C),g=C+E|0,A=36116;Q:{i:{E:{o:{a:{n:{for(;;){if((0|g)!=o[A>>2]){if(A=o[A+8>>2])continue;break n}break}if(!(8&a[A+12|0]))break a}for(A=36116;;){if((g=o[A>>2])>>>0<=Q>>>0&&(i=g+o[A+4>>2]|0)>>>0>Q>>>0)break o;A=o[A+8>>2];}}if(o[A>>2]=C,o[A+4>>2]=o[A+4>>2]+E,o[4+(e=(C+8&7?-8-C&7:0)+C|0)>>2]=3|r,A=(E=g+(g+8&7?-8-g&7:0)|0)-(t=r+e|0)|0,(0|Q)==(0|E)){o[8923]=t,A=o[8920]+A|0,o[8920]=A,o[t+4>>2]=1|A;break i}if(o[8922]==(0|E)){o[8922]=t,A=o[8919]+A|0,o[8919]=A,o[t+4>>2]=1|A,o[A+t>>2]=A;break i}if(1==(3&(i=o[E+4>>2]))){Q=-8&i;a:if(i>>>0<=255){if(B=o[E+8>>2],g=i>>>3|0,(0|(C=o[E+12>>2]))==(0|B)){y=35668,w=o[8917]&YA(-2,g),o[y>>2]=w;break a}o[B+12>>2]=C,o[C+8>>2]=B;}else {if(r=o[E+24>>2],(0|E)==(0|(C=o[E+12>>2])))if((g=o[(i=E+20|0)>>2])||(g=o[(i=E+16|0)>>2])){for(;B=i,(g=o[(i=(C=g)+20|0)>>2])||(i=C+16|0,g=o[C+16>>2]););o[B>>2]=0;}else C=0;else g=o[E+8>>2],o[g+12>>2]=C,o[C+8>>2]=g;if(r){B=o[E+28>>2];n:{if(o[(g=35972+(B<<2)|0)>>2]==(0|E)){if(o[g>>2]=C,C)break n;y=35672,w=o[8918]&YA(-2,B),o[y>>2]=w;break a}if(o[r+(o[r+16>>2]==(0|E)?16:20)>>2]=C,!C)break a}o[C+24>>2]=r,(g=o[E+16>>2])&&(o[C+16>>2]=g,o[g+24>>2]=C),(g=o[E+20>>2])&&(o[C+20>>2]=g,o[g+24>>2]=C);}}i=o[4+(E=Q+E|0)>>2],A=A+Q|0;}if(o[E+4>>2]=-2&i,o[t+4>>2]=1|A,o[A+t>>2]=A,A>>>0<=255){g=35708+(-8&A)|0,(C=o[8917])&(A=1<<(A>>>3))?A=o[g+8>>2]:(o[8917]=A|C,A=g),o[g+8>>2]=t,o[A+12>>2]=t,o[t+12>>2]=g,o[t+8>>2]=A;break i}if(i=31,A>>>0<=16777215&&(i=62+((A>>>38-(g=f(A>>>8|0))&1)-(g<<1)|0)|0),o[t+28>>2]=i,o[t+16>>2]=0,o[t+20>>2]=0,g=35972+(i<<2)|0,(B=o[8918])&(C=1<<i)){for(i=A<<(31!=(0|i)?25-(i>>>1|0)|0:0),C=o[g>>2];;){if(g=C,(-8&o[C+4>>2])==(0|A))break E;if(C=i>>>29|0,i<<=1,!(C=o[16+(B=(4&C)+g|0)>>2]))break}o[B+16>>2]=t;}else o[8918]=C|B,o[g>>2]=t;o[t+24>>2]=g,o[t+12>>2]=t,o[t+8>>2]=t;break i}for(g=(B=E-40|0)-(A=C+8&7?-8-C&7:0)|0,o[8920]=g,A=A+C|0,o[8923]=A,o[A+4>>2]=1|g,o[4+(C+B|0)>>2]=40,o[8924]=o[9039],o[(B=(A=(i+(i-39&7?39-i&7:0)|0)-47|0)>>>0<Q+16>>>0?Q:A)+4>>2]=27,A=o[9032],o[B+16>>2]=o[9031],o[B+20>>2]=A,A=o[9030],o[B+8>>2]=o[9029],o[B+12>>2]=A,o[9031]=B+8,o[9030]=E,o[9029]=C,o[9032]=0,A=B+24|0;o[A+4>>2]=7,g=A+8|0,A=A+4|0,g>>>0<i>>>0;);if((0|B)==(0|Q))break B;if(o[B+4>>2]=-2&o[B+4>>2],i=B-Q|0,o[Q+4>>2]=1|i,o[B>>2]=i,i>>>0<=255){g=35708+(-8&i)|0,(C=o[8917])&(A=1<<(i>>>3))?A=o[g+8>>2]:(o[8917]=A|C,A=g),o[g+8>>2]=Q,o[A+12>>2]=Q,o[Q+12>>2]=g,o[Q+8>>2]=A;break B}if(A=31,i>>>0<=16777215&&(A=62+((i>>>38-(A=f(i>>>8|0))&1)-(A<<1)|0)|0),o[Q+28>>2]=A,o[Q+16>>2]=0,o[Q+20>>2]=0,g=35972+(A<<2)|0,(B=o[8918])&(C=1<<A)){for(A=i<<(31!=(0|A)?25-(A>>>1|0)|0:0),B=o[g>>2];;){if((0|i)==(-8&o[(g=B)+4>>2]))break Q;if(C=A>>>29|0,A<<=1,!(B=o[16+(C=(4&C)+g|0)>>2]))break}o[C+16>>2]=Q;}else o[8918]=C|B,o[g>>2]=Q;o[Q+24>>2]=g,o[Q+12>>2]=Q,o[Q+8>>2]=Q;break B}A=o[g+8>>2],o[A+12>>2]=t,o[g+8>>2]=t,o[t+24>>2]=0,o[t+12>>2]=g,o[t+8>>2]=A;}A=e+8|0;break A}A=o[g+8>>2],o[A+12>>2]=Q,o[g+8>>2]=Q,o[Q+24>>2]=0,o[Q+12>>2]=g,o[Q+8>>2]=A;}if(!((A=o[8920])>>>0<=r>>>0)){g=A-r|0,o[8920]=g,A=(C=o[8923])+r|0,o[8923]=A,o[A+4>>2]=1|g,o[C+4>>2]=3|r,A=C+8|0;break A}}o[8916]=48,A=0;break A}g:if(E){g=o[B+28>>2];C:{if(o[(A=35972+(g<<2)|0)>>2]==(0|B)){if(o[A>>2]=C,C)break C;e=YA(-2,g)&e,o[8918]=e;break g}if(o[E+(o[E+16>>2]==(0|B)?16:20)>>2]=C,!C)break g}o[C+24>>2]=E,(A=o[B+16>>2])&&(o[C+16>>2]=A,o[A+24>>2]=C),(A=o[B+20>>2])&&(o[C+20>>2]=A,o[A+24>>2]=C);}g:if(i>>>0<=15)A=i+r|0,o[B+4>>2]=3|A,o[4+(A=A+B|0)>>2]=1|o[A+4>>2];else if(o[B+4>>2]=3|r,o[4+(Q=B+r|0)>>2]=1|i,o[Q+i>>2]=i,i>>>0<=255)g=35708+(-8&i)|0,(C=o[8917])&(A=1<<(i>>>3))?A=o[g+8>>2]:(o[8917]=A|C,A=g),o[g+8>>2]=Q,o[A+12>>2]=Q,o[Q+12>>2]=g,o[Q+8>>2]=A;else {A=31,i>>>0<=16777215&&(A=62+((i>>>38-(A=f(i>>>8|0))&1)-(A<<1)|0)|0),o[Q+28>>2]=A,o[Q+16>>2]=0,o[Q+20>>2]=0,g=35972+(A<<2)|0;C:{if((C=1<<A)&e){for(A=i<<(31!=(0|A)?25-(A>>>1|0)|0:0),r=o[g>>2];;){if((-8&o[(g=r)+4>>2])==(0|i))break C;if(C=A>>>29|0,A<<=1,!(r=o[16+(C=(4&C)+g|0)>>2]))break}o[C+16>>2]=Q;}else o[8918]=C|e,o[g>>2]=Q;o[Q+24>>2]=g,o[Q+12>>2]=Q,o[Q+8>>2]=Q;break g}A=o[g+8>>2],o[A+12>>2]=Q,o[g+8>>2]=Q,o[Q+24>>2]=0,o[Q+12>>2]=g,o[Q+8>>2]=A;}A=B+8|0;break A}I:if(t){g=o[C+28>>2];g:{if(o[(A=35972+(g<<2)|0)>>2]==(0|C)){if(o[A>>2]=B,B)break g;y=35672,w=YA(-2,g)&e,o[y>>2]=w;break I}if(o[t+(o[t+16>>2]==(0|C)?16:20)>>2]=B,!B)break I}o[B+24>>2]=t,(A=o[C+16>>2])&&(o[B+16>>2]=A,o[A+24>>2]=B),(A=o[C+20>>2])&&(o[B+20>>2]=A,o[A+24>>2]=B);}i>>>0<=15?(A=i+r|0,o[C+4>>2]=3|A,o[4+(A=A+C|0)>>2]=1|o[A+4>>2]):(o[C+4>>2]=3|r,o[4+(B=C+r|0)>>2]=1|i,o[B+i>>2]=i,c&&(g=35708+(-8&c)|0,Q=o[8922],(A=1<<(c>>>3))&E?A=o[g+8>>2]:(o[8917]=A|E,A=g),o[g+8>>2]=Q,o[A+12>>2]=Q,o[Q+12>>2]=g,o[Q+8>>2]=A),o[8922]=B,o[8919]=i),A=C+8|0;}return D=I+16|0,0|A},$b:function(A){var I=0,g=0,C=0,B=0,Q=0,i=0,E=0,a=0,r=0;A:if(A|=0){Q=(C=A-8|0)+(A=-8&(I=o[A-4>>2]))|0;I:if(!(1&I)){if(!(3&I))break A;if((C=C-(I=o[C>>2])|0)>>>0<n[8921])break A;if(A=A+I|0,o[8922]==(0|C)){if(3==(3&(I=o[Q+4>>2])))return o[8919]=A,o[Q+4>>2]=-2&I,o[C+4>>2]=1|A,void(o[A+C>>2]=A)}else {if(I>>>0<=255){if(B=o[C+8>>2],I=I>>>3|0,(0|(g=o[C+12>>2]))==(0|B)){a=35668,r=o[8917]&YA(-2,I),o[a>>2]=r;break I}o[B+12>>2]=g,o[g+8>>2]=B;break I}if(E=o[C+24>>2],(0|C)==(0|(I=o[C+12>>2])))if((g=o[(B=C+20|0)>>2])||(g=o[(B=C+16|0)>>2])){for(;i=B,(g=o[(B=(I=g)+20|0)>>2])||(B=I+16|0,g=o[I+16>>2]););o[i>>2]=0;}else I=0;else g=o[C+8>>2],o[g+12>>2]=I,o[I+8>>2]=g;if(!E)break I;B=o[C+28>>2];g:{if(o[(g=35972+(B<<2)|0)>>2]==(0|C)){if(o[g>>2]=I,I)break g;a=35672,r=o[8918]&YA(-2,B),o[a>>2]=r;break I}if(o[E+(o[E+16>>2]==(0|C)?16:20)>>2]=I,!I)break I}if(o[I+24>>2]=E,(g=o[C+16>>2])&&(o[I+16>>2]=g,o[g+24>>2]=I),!(g=o[C+20>>2]))break I;o[I+20>>2]=g,o[g+24>>2]=I;}}if(!(C>>>0>=Q>>>0)&&1&(I=o[Q+4>>2])){I:{if(!(2&I)){if(o[8923]==(0|Q)){if(o[8923]=C,A=o[8920]+A|0,o[8920]=A,o[C+4>>2]=1|A,o[8922]!=(0|C))break A;return o[8919]=0,void(o[8922]=0)}if(o[8922]==(0|Q))return o[8922]=C,A=o[8919]+A|0,o[8919]=A,o[C+4>>2]=1|A,void(o[A+C>>2]=A);A=(-8&I)+A|0;g:if(I>>>0<=255){if(B=o[Q+8>>2],I=I>>>3|0,(0|(g=o[Q+12>>2]))==(0|B)){a=35668,r=o[8917]&YA(-2,I),o[a>>2]=r;break g}o[B+12>>2]=g,o[g+8>>2]=B;}else {if(E=o[Q+24>>2],(0|Q)==(0|(I=o[Q+12>>2])))if((g=o[(B=Q+20|0)>>2])||(g=o[(B=Q+16|0)>>2])){for(;i=B,(g=o[(B=(I=g)+20|0)>>2])||(B=I+16|0,g=o[I+16>>2]););o[i>>2]=0;}else I=0;else g=o[Q+8>>2],o[g+12>>2]=I,o[I+8>>2]=g;if(E){B=o[Q+28>>2];C:{if(o[(g=35972+(B<<2)|0)>>2]==(0|Q)){if(o[g>>2]=I,I)break C;a=35672,r=o[8918]&YA(-2,B),o[a>>2]=r;break g}if(o[E+(o[E+16>>2]==(0|Q)?16:20)>>2]=I,!I)break g}o[I+24>>2]=E,(g=o[Q+16>>2])&&(o[I+16>>2]=g,o[g+24>>2]=I),(g=o[Q+20>>2])&&(o[I+20>>2]=g,o[g+24>>2]=I);}}if(o[C+4>>2]=1|A,o[A+C>>2]=A,o[8922]!=(0|C))break I;return void(o[8919]=A)}o[Q+4>>2]=-2&I,o[C+4>>2]=1|A,o[A+C>>2]=A;}if(A>>>0<=255)return I=35708+(-8&A)|0,(g=o[8917])&(A=1<<(A>>>3))?A=o[I+8>>2]:(o[8917]=A|g,A=I),o[I+8>>2]=C,o[A+12>>2]=C,o[C+12>>2]=I,void(o[C+8>>2]=A);B=31,A>>>0<=16777215&&(B=62+((A>>>38-(I=f(A>>>8|0))&1)-(I<<1)|0)|0),o[C+28>>2]=B,o[C+16>>2]=0,o[C+20>>2]=0,i=35972+(B<<2)|0;I:{g:{if((g=o[8918])&(I=1<<B)){for(B=A<<(31!=(0|B)?25-(B>>>1|0)|0:0),I=o[i>>2];;){if(g=I,(-8&o[I+4>>2])==(0|A))break g;if(I=B>>>29|0,B<<=1,!(I=o[16+(i=g+(4&I)|0)>>2]))break}o[i+16>>2]=C,o[C+24>>2]=g;}else o[8918]=I|g,o[i>>2]=C,o[C+24>>2]=i;o[C+12>>2]=C,o[C+8>>2]=C;break I}A=o[g+8>>2],o[A+12>>2]=C,o[g+8>>2]=C,o[C+24>>2]=0,o[C+12>>2]=g,o[C+8>>2]=A;}A=o[8925]-1|0,o[8925]=A||-1;}}},ac:nI}}(A)}(I);},instantiate:function(A,I){return {then:function(g){var C=new D.Module(A);g({instance:new D.Instance(C,I)});}}},RuntimeError:Error};e=[],"object"!=typeof D&&K("no native wasm support detected");var w,h,s,p,u,k,F,l=!1,S="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function H(A,I){return A?function(A,I,g){for(var C=I+g,B=I;A[B]&&!(B>=C);)++B;if(B-I>16&&A.buffer&&S)return S.decode(A.subarray(I,B));for(var Q="";I<B;){var i=A[I++];if(128&i){var E=63&A[I++];if(192!=(224&i)){var o=63&A[I++];if((i=224==(240&i)?(15&i)<<12|E<<6|o:(7&i)<<18|E<<12|o<<6|63&A[I++])<65536)Q+=String.fromCharCode(i);else {var a=i-65536;Q+=String.fromCharCode(55296|a>>10,56320|1023&a);}}else Q+=String.fromCharCode((31&i)<<6|E);}else Q+=String.fromCharCode(i);}return Q}(h,A,I):""}function M(){var A=y.buffer;i.HEAP8=w=new Int8Array(A),i.HEAP16=s=new Int16Array(A),i.HEAP32=p=new Int32Array(A),i.HEAPU8=h=new Uint8Array(A),i.HEAPU16=new Uint16Array(A),i.HEAPU32=u=new Uint32Array(A),i.HEAPF32=k=new Float32Array(A),i.HEAPF64=F=new Float64Array(A);}var G=i.INITIAL_MEMORY||16777216;G>=65536||K("INITIAL_MEMORY should be larger than STACK_SIZE, was "+G+"! (STACK_SIZE=65536)"),y=i.wasmMemory?i.wasmMemory:new D.Memory({initial:G/65536,maximum:32768}),M(),G=y.buffer.byteLength;var U=[],J=[],N=[],Y=0,_=null;function K(A){throw i.onAbort&&i.onAbort(A),c(A="Aborted("+A+")"),l=!0,A+=". Build with -sASSERTIONS for more info.",new D.RuntimeError(A)}var P,v,m,d,L="data:application/octet-stream;base64,";function R(A){return A.startsWith(L)}function x(A){return A.startsWith("file://")}function j(A){try{if(A==P&&e)return new Uint8Array(e);var I=T(A);if(I)return I;if(Q)return Q(A);throw "both async and sync fetching of the wasm failed"}catch(A){K(A);}}R(P="<<< WASM_BINARY_FILE >>>")||(v=P,P=i.locateFile?i.locateFile(v,r):r+v);var X={34904:()=>i.getRandomValue(),34940:()=>{if(void 0===i.getRandomValue)try{var A="object"==typeof window?window:self,I=void 0!==A.crypto?A.crypto:A.msCrypto,g=function(){var A=new Uint32Array(1);return I.getRandomValues(A),A[0]>>>0};g(),i.getRandomValue=g;}catch(A){try{var C=require("crypto"),B=function(){var A=C.randomBytes(4);return (A[0]<<24|A[1]<<16|A[2]<<8|A[3])>>>0};B(),i.getRandomValue=B;}catch(A){throw "No secure random number generator found"}}}};function q(A){for(;A.length>0;)A.shift()(i);}var z=[];function V(A){var I=y.buffer;try{return y.grow(A-I.byteLength+65535>>>16),M(),1}catch(A){}}var O="function"==typeof atob?atob:function(A){var I,g,C,B,Q,i,E="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",o="",a=0;A=A.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{I=E.indexOf(A.charAt(a++))<<2|(B=E.indexOf(A.charAt(a++)))>>4,g=(15&B)<<4|(Q=E.indexOf(A.charAt(a++)))>>2,C=(3&Q)<<6|(i=E.indexOf(A.charAt(a++))),o+=String.fromCharCode(I),64!==Q&&(o+=String.fromCharCode(g)),64!==i&&(o+=String.fromCharCode(C));}while(a<A.length);return o};function T(A){if(R(A))return function(A){if("boolean"==typeof n&&n){var I=Buffer.from(A,"base64");return new Uint8Array(I.buffer,I.byteOffset,I.byteLength)}try{for(var g=O(A),C=new Uint8Array(g.length),B=0;B<g.length;++B)C[B]=g.charCodeAt(B);return C}catch(A){throw new Error("Converting base64 string to bytes failed.")}}(A.slice(L.length))}var W,Z={c:function(A,I,g,C){K("Assertion failed: "+H(A)+", at: "+[I?H(I):"unknown filename",g,C?H(C):"unknown function"]);},d:function(){K("");},b:function(A,I,g){return function(A,I,g){var C=function(A,I){var g;for(z.length=0,I>>=2;g=h[A++];)I+=105!=g&I,z.push(105==g?p[I]:F[I++>>1]),++I;return z}(I,g);return X[A].apply(null,C)}(A,I,g)},e:function(A){var I,g=h.length,C=2147483648;if((A>>>=0)>C)return !1;for(var B=1;B<=4;B*=2){var Q=g*(1+.2/B);if(Q=Math.min(Q,A+100663296),V(Math.min(C,(I=Math.max(A,Q))+(65536-I%65536)%65536)))return !0}return !1},a:y};function $(){function A(){W||(W=!0,i.calledRun=!0,l||(q(J),i.onRuntimeInitialized&&i.onRuntimeInitialized(),function(){if(i.postRun)for("function"==typeof i.postRun&&(i.postRun=[i.postRun]);i.postRun.length;)A=i.postRun.shift(),N.unshift(A);var A;q(N);}()));}Y>0||(function(){if(i.preRun)for("function"==typeof i.preRun&&(i.preRun=[i.preRun]);i.preRun.length;)A=i.preRun.shift(),U.unshift(A);var A;q(U);}(),Y>0||(i.setStatus?(i.setStatus("Running..."),setTimeout((function(){setTimeout((function(){i.setStatus("");}),1),A();}),1)):A()));}if(function(){var A={a:Z};function I(A,I){var g,C=A.exports;i.asm=C,i.asm.ac,g=i.asm.f,J.unshift(g),function(A){if(Y--,i.monitorRunDependencies&&i.monitorRunDependencies(Y),0==Y&&(_)){var I=_;_=null,I();}}();}function g(A){I(A.instance);}function C(I){return function(){if(!e&&(o||a)){if("function"==typeof fetch&&!x(P))return fetch(P,{credentials:"same-origin"}).then((function(A){if(!A.ok)throw "failed to load wasm binary file at '"+P+"'";return A.arrayBuffer()})).catch((function(){return j(P)}));if(B)return new Promise((function(A,I){B(P,(function(I){A(new Uint8Array(I));}),I);}))}return Promise.resolve().then((function(){return j(P)}))}().then((function(I){return D.instantiate(I,A)})).then((function(A){return A})).then(I,(function(A){c("failed to asynchronously prepare wasm: "+A),K(A);}))}if(Y++,i.monitorRunDependencies&&i.monitorRunDependencies(Y),i.instantiateWasm)try{return i.instantiateWasm(A,I)}catch(A){return c("Module.instantiateWasm callback failed with error: "+A),!1}e||"function"!=typeof D.instantiateStreaming||R(P)||x(P)||n||"function"!=typeof fetch?C(g):fetch(P,{credentials:"same-origin"}).then((function(I){return D.instantiateStreaming(I,A).then(g,(function(A){return c("wasm streaming compile failed: "+A),c("falling back to ArrayBuffer instantiation"),C(g)}))}));}(),i._crypto_aead_chacha20poly1305_encrypt_detached=function(){return (i._crypto_aead_chacha20poly1305_encrypt_detached=i.asm.g).apply(null,arguments)},i._crypto_aead_chacha20poly1305_encrypt=function(){return (i._crypto_aead_chacha20poly1305_encrypt=i.asm.h).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_encrypt_detached=function(){return (i._crypto_aead_chacha20poly1305_ietf_encrypt_detached=i.asm.i).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_encrypt=function(){return (i._crypto_aead_chacha20poly1305_ietf_encrypt=i.asm.j).apply(null,arguments)},i._crypto_aead_chacha20poly1305_decrypt_detached=function(){return (i._crypto_aead_chacha20poly1305_decrypt_detached=i.asm.k).apply(null,arguments)},i._crypto_aead_chacha20poly1305_decrypt=function(){return (i._crypto_aead_chacha20poly1305_decrypt=i.asm.l).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_decrypt_detached=function(){return (i._crypto_aead_chacha20poly1305_ietf_decrypt_detached=i.asm.m).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_decrypt=function(){return (i._crypto_aead_chacha20poly1305_ietf_decrypt=i.asm.n).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_keybytes=function(){return (i._crypto_aead_chacha20poly1305_ietf_keybytes=i.asm.o).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_npubbytes=function(){return (i._crypto_aead_chacha20poly1305_ietf_npubbytes=i.asm.p).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_nsecbytes=function(){return (i._crypto_aead_chacha20poly1305_ietf_nsecbytes=i.asm.q).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_abytes=function(){return (i._crypto_aead_chacha20poly1305_ietf_abytes=i.asm.r).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_messagebytes_max=function(){return (i._crypto_aead_chacha20poly1305_ietf_messagebytes_max=i.asm.s).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_keygen=function(){return (i._crypto_aead_chacha20poly1305_ietf_keygen=i.asm.t).apply(null,arguments)},i._crypto_aead_chacha20poly1305_keybytes=function(){return (i._crypto_aead_chacha20poly1305_keybytes=i.asm.u).apply(null,arguments)},i._crypto_aead_chacha20poly1305_npubbytes=function(){return (i._crypto_aead_chacha20poly1305_npubbytes=i.asm.v).apply(null,arguments)},i._crypto_aead_chacha20poly1305_nsecbytes=function(){return (i._crypto_aead_chacha20poly1305_nsecbytes=i.asm.w).apply(null,arguments)},i._crypto_aead_chacha20poly1305_abytes=function(){return (i._crypto_aead_chacha20poly1305_abytes=i.asm.x).apply(null,arguments)},i._crypto_aead_chacha20poly1305_messagebytes_max=function(){return (i._crypto_aead_chacha20poly1305_messagebytes_max=i.asm.y).apply(null,arguments)},i._crypto_aead_chacha20poly1305_keygen=function(){return (i._crypto_aead_chacha20poly1305_keygen=i.asm.z).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_encrypt_detached=function(){return (i._crypto_aead_xchacha20poly1305_ietf_encrypt_detached=i.asm.A).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_encrypt=function(){return (i._crypto_aead_xchacha20poly1305_ietf_encrypt=i.asm.B).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_decrypt_detached=function(){return (i._crypto_aead_xchacha20poly1305_ietf_decrypt_detached=i.asm.C).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_decrypt=function(){return (i._crypto_aead_xchacha20poly1305_ietf_decrypt=i.asm.D).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_keybytes=function(){return (i._crypto_aead_xchacha20poly1305_ietf_keybytes=i.asm.E).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_npubbytes=function(){return (i._crypto_aead_xchacha20poly1305_ietf_npubbytes=i.asm.F).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_nsecbytes=function(){return (i._crypto_aead_xchacha20poly1305_ietf_nsecbytes=i.asm.G).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_abytes=function(){return (i._crypto_aead_xchacha20poly1305_ietf_abytes=i.asm.H).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_messagebytes_max=function(){return (i._crypto_aead_xchacha20poly1305_ietf_messagebytes_max=i.asm.I).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_keygen=function(){return (i._crypto_aead_xchacha20poly1305_ietf_keygen=i.asm.J).apply(null,arguments)},i._crypto_auth_bytes=function(){return (i._crypto_auth_bytes=i.asm.K).apply(null,arguments)},i._crypto_auth_keybytes=function(){return (i._crypto_auth_keybytes=i.asm.L).apply(null,arguments)},i._crypto_auth=function(){return (i._crypto_auth=i.asm.M).apply(null,arguments)},i._crypto_auth_verify=function(){return (i._crypto_auth_verify=i.asm.N).apply(null,arguments)},i._crypto_auth_keygen=function(){return (i._crypto_auth_keygen=i.asm.O).apply(null,arguments)},i._crypto_box_seedbytes=function(){return (i._crypto_box_seedbytes=i.asm.P).apply(null,arguments)},i._crypto_box_publickeybytes=function(){return (i._crypto_box_publickeybytes=i.asm.Q).apply(null,arguments)},i._crypto_box_secretkeybytes=function(){return (i._crypto_box_secretkeybytes=i.asm.R).apply(null,arguments)},i._crypto_box_beforenmbytes=function(){return (i._crypto_box_beforenmbytes=i.asm.S).apply(null,arguments)},i._crypto_box_noncebytes=function(){return (i._crypto_box_noncebytes=i.asm.T).apply(null,arguments)},i._crypto_box_macbytes=function(){return (i._crypto_box_macbytes=i.asm.U).apply(null,arguments)},i._crypto_box_messagebytes_max=function(){return (i._crypto_box_messagebytes_max=i.asm.V).apply(null,arguments)},i._crypto_box_seed_keypair=function(){return (i._crypto_box_seed_keypair=i.asm.W).apply(null,arguments)},i._crypto_box_keypair=function(){return (i._crypto_box_keypair=i.asm.X).apply(null,arguments)},i._crypto_box_beforenm=function(){return (i._crypto_box_beforenm=i.asm.Y).apply(null,arguments)},i._crypto_box_detached_afternm=function(){return (i._crypto_box_detached_afternm=i.asm.Z).apply(null,arguments)},i._crypto_box_detached=function(){return (i._crypto_box_detached=i.asm._).apply(null,arguments)},i._crypto_box_easy_afternm=function(){return (i._crypto_box_easy_afternm=i.asm.$).apply(null,arguments)},i._crypto_box_easy=function(){return (i._crypto_box_easy=i.asm.aa).apply(null,arguments)},i._crypto_box_open_detached_afternm=function(){return (i._crypto_box_open_detached_afternm=i.asm.ba).apply(null,arguments)},i._crypto_box_open_detached=function(){return (i._crypto_box_open_detached=i.asm.ca).apply(null,arguments)},i._crypto_box_open_easy_afternm=function(){return (i._crypto_box_open_easy_afternm=i.asm.da).apply(null,arguments)},i._crypto_box_open_easy=function(){return (i._crypto_box_open_easy=i.asm.ea).apply(null,arguments)},i._crypto_box_seal=function(){return (i._crypto_box_seal=i.asm.fa).apply(null,arguments)},i._crypto_box_seal_open=function(){return (i._crypto_box_seal_open=i.asm.ga).apply(null,arguments)},i._crypto_box_sealbytes=function(){return (i._crypto_box_sealbytes=i.asm.ha).apply(null,arguments)},i._crypto_generichash_bytes_min=function(){return (i._crypto_generichash_bytes_min=i.asm.ia).apply(null,arguments)},i._crypto_generichash_bytes_max=function(){return (i._crypto_generichash_bytes_max=i.asm.ja).apply(null,arguments)},i._crypto_generichash_bytes=function(){return (i._crypto_generichash_bytes=i.asm.ka).apply(null,arguments)},i._crypto_generichash_keybytes_min=function(){return (i._crypto_generichash_keybytes_min=i.asm.la).apply(null,arguments)},i._crypto_generichash_keybytes_max=function(){return (i._crypto_generichash_keybytes_max=i.asm.ma).apply(null,arguments)},i._crypto_generichash_keybytes=function(){return (i._crypto_generichash_keybytes=i.asm.na).apply(null,arguments)},i._crypto_generichash_statebytes=function(){return (i._crypto_generichash_statebytes=i.asm.oa).apply(null,arguments)},i._crypto_generichash=function(){return (i._crypto_generichash=i.asm.pa).apply(null,arguments)},i._crypto_generichash_init=function(){return (i._crypto_generichash_init=i.asm.qa).apply(null,arguments)},i._crypto_generichash_update=function(){return (i._crypto_generichash_update=i.asm.ra).apply(null,arguments)},i._crypto_generichash_final=function(){return (i._crypto_generichash_final=i.asm.sa).apply(null,arguments)},i._crypto_generichash_keygen=function(){return (i._crypto_generichash_keygen=i.asm.ta).apply(null,arguments)},i._crypto_hash_bytes=function(){return (i._crypto_hash_bytes=i.asm.ua).apply(null,arguments)},i._crypto_hash=function(){return (i._crypto_hash=i.asm.va).apply(null,arguments)},i._crypto_kdf_bytes_min=function(){return (i._crypto_kdf_bytes_min=i.asm.wa).apply(null,arguments)},i._crypto_kdf_bytes_max=function(){return (i._crypto_kdf_bytes_max=i.asm.xa).apply(null,arguments)},i._crypto_kdf_contextbytes=function(){return (i._crypto_kdf_contextbytes=i.asm.ya).apply(null,arguments)},i._crypto_kdf_keybytes=function(){return (i._crypto_kdf_keybytes=i.asm.za).apply(null,arguments)},i._crypto_kdf_derive_from_key=function(){return (i._crypto_kdf_derive_from_key=i.asm.Aa).apply(null,arguments)},i._crypto_kdf_keygen=function(){return (i._crypto_kdf_keygen=i.asm.Ba).apply(null,arguments)},i._crypto_kx_seed_keypair=function(){return (i._crypto_kx_seed_keypair=i.asm.Ca).apply(null,arguments)},i._crypto_kx_keypair=function(){return (i._crypto_kx_keypair=i.asm.Da).apply(null,arguments)},i._crypto_kx_client_session_keys=function(){return (i._crypto_kx_client_session_keys=i.asm.Ea).apply(null,arguments)},i._crypto_kx_server_session_keys=function(){return (i._crypto_kx_server_session_keys=i.asm.Fa).apply(null,arguments)},i._crypto_kx_publickeybytes=function(){return (i._crypto_kx_publickeybytes=i.asm.Ga).apply(null,arguments)},i._crypto_kx_secretkeybytes=function(){return (i._crypto_kx_secretkeybytes=i.asm.Ha).apply(null,arguments)},i._crypto_kx_seedbytes=function(){return (i._crypto_kx_seedbytes=i.asm.Ia).apply(null,arguments)},i._crypto_kx_sessionkeybytes=function(){return (i._crypto_kx_sessionkeybytes=i.asm.Ja).apply(null,arguments)},i._crypto_scalarmult_base=function(){return (i._crypto_scalarmult_base=i.asm.Ka).apply(null,arguments)},i._crypto_scalarmult=function(){return (i._crypto_scalarmult=i.asm.La).apply(null,arguments)},i._crypto_scalarmult_bytes=function(){return (i._crypto_scalarmult_bytes=i.asm.Ma).apply(null,arguments)},i._crypto_scalarmult_scalarbytes=function(){return (i._crypto_scalarmult_scalarbytes=i.asm.Na).apply(null,arguments)},i._crypto_secretbox_keybytes=function(){return (i._crypto_secretbox_keybytes=i.asm.Oa).apply(null,arguments)},i._crypto_secretbox_noncebytes=function(){return (i._crypto_secretbox_noncebytes=i.asm.Pa).apply(null,arguments)},i._crypto_secretbox_macbytes=function(){return (i._crypto_secretbox_macbytes=i.asm.Qa).apply(null,arguments)},i._crypto_secretbox_messagebytes_max=function(){return (i._crypto_secretbox_messagebytes_max=i.asm.Ra).apply(null,arguments)},i._crypto_secretbox_keygen=function(){return (i._crypto_secretbox_keygen=i.asm.Sa).apply(null,arguments)},i._crypto_secretbox_detached=function(){return (i._crypto_secretbox_detached=i.asm.Ta).apply(null,arguments)},i._crypto_secretbox_easy=function(){return (i._crypto_secretbox_easy=i.asm.Ua).apply(null,arguments)},i._crypto_secretbox_open_detached=function(){return (i._crypto_secretbox_open_detached=i.asm.Va).apply(null,arguments)},i._crypto_secretbox_open_easy=function(){return (i._crypto_secretbox_open_easy=i.asm.Wa).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_keygen=function(){return (i._crypto_secretstream_xchacha20poly1305_keygen=i.asm.Xa).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_init_push=function(){return (i._crypto_secretstream_xchacha20poly1305_init_push=i.asm.Ya).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_init_pull=function(){return (i._crypto_secretstream_xchacha20poly1305_init_pull=i.asm.Za).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_rekey=function(){return (i._crypto_secretstream_xchacha20poly1305_rekey=i.asm._a).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_push=function(){return (i._crypto_secretstream_xchacha20poly1305_push=i.asm.$a).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_pull=function(){return (i._crypto_secretstream_xchacha20poly1305_pull=i.asm.ab).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_statebytes=function(){return (i._crypto_secretstream_xchacha20poly1305_statebytes=i.asm.bb).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_abytes=function(){return (i._crypto_secretstream_xchacha20poly1305_abytes=i.asm.cb).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_headerbytes=function(){return (i._crypto_secretstream_xchacha20poly1305_headerbytes=i.asm.db).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_keybytes=function(){return (i._crypto_secretstream_xchacha20poly1305_keybytes=i.asm.eb).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_messagebytes_max=function(){return (i._crypto_secretstream_xchacha20poly1305_messagebytes_max=i.asm.fb).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_tag_message=function(){return (i._crypto_secretstream_xchacha20poly1305_tag_message=i.asm.gb).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_tag_push=function(){return (i._crypto_secretstream_xchacha20poly1305_tag_push=i.asm.hb).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_tag_rekey=function(){return (i._crypto_secretstream_xchacha20poly1305_tag_rekey=i.asm.ib).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_tag_final=function(){return (i._crypto_secretstream_xchacha20poly1305_tag_final=i.asm.jb).apply(null,arguments)},i._crypto_shorthash_bytes=function(){return (i._crypto_shorthash_bytes=i.asm.kb).apply(null,arguments)},i._crypto_shorthash_keybytes=function(){return (i._crypto_shorthash_keybytes=i.asm.lb).apply(null,arguments)},i._crypto_shorthash=function(){return (i._crypto_shorthash=i.asm.mb).apply(null,arguments)},i._crypto_shorthash_keygen=function(){return (i._crypto_shorthash_keygen=i.asm.nb).apply(null,arguments)},i._crypto_sign_statebytes=function(){return (i._crypto_sign_statebytes=i.asm.ob).apply(null,arguments)},i._crypto_sign_bytes=function(){return (i._crypto_sign_bytes=i.asm.pb).apply(null,arguments)},i._crypto_sign_seedbytes=function(){return (i._crypto_sign_seedbytes=i.asm.qb).apply(null,arguments)},i._crypto_sign_publickeybytes=function(){return (i._crypto_sign_publickeybytes=i.asm.rb).apply(null,arguments)},i._crypto_sign_secretkeybytes=function(){return (i._crypto_sign_secretkeybytes=i.asm.sb).apply(null,arguments)},i._crypto_sign_messagebytes_max=function(){return (i._crypto_sign_messagebytes_max=i.asm.tb).apply(null,arguments)},i._crypto_sign_seed_keypair=function(){return (i._crypto_sign_seed_keypair=i.asm.ub).apply(null,arguments)},i._crypto_sign_keypair=function(){return (i._crypto_sign_keypair=i.asm.vb).apply(null,arguments)},i._crypto_sign=function(){return (i._crypto_sign=i.asm.wb).apply(null,arguments)},i._crypto_sign_open=function(){return (i._crypto_sign_open=i.asm.xb).apply(null,arguments)},i._crypto_sign_detached=function(){return (i._crypto_sign_detached=i.asm.yb).apply(null,arguments)},i._crypto_sign_verify_detached=function(){return (i._crypto_sign_verify_detached=i.asm.zb).apply(null,arguments)},i._crypto_sign_init=function(){return (i._crypto_sign_init=i.asm.Ab).apply(null,arguments)},i._crypto_sign_update=function(){return (i._crypto_sign_update=i.asm.Bb).apply(null,arguments)},i._crypto_sign_final_create=function(){return (i._crypto_sign_final_create=i.asm.Cb).apply(null,arguments)},i._crypto_sign_final_verify=function(){return (i._crypto_sign_final_verify=i.asm.Db).apply(null,arguments)},i._crypto_sign_ed25519_pk_to_curve25519=function(){return (i._crypto_sign_ed25519_pk_to_curve25519=i.asm.Eb).apply(null,arguments)},i._crypto_sign_ed25519_sk_to_curve25519=function(){return (i._crypto_sign_ed25519_sk_to_curve25519=i.asm.Fb).apply(null,arguments)},i._randombytes_random=function(){return (i._randombytes_random=i.asm.Gb).apply(null,arguments)},i._randombytes_stir=function(){return (i._randombytes_stir=i.asm.Hb).apply(null,arguments)},i._randombytes_uniform=function(){return (i._randombytes_uniform=i.asm.Ib).apply(null,arguments)},i._randombytes_buf=function(){return (i._randombytes_buf=i.asm.Jb).apply(null,arguments)},i._randombytes_buf_deterministic=function(){return (i._randombytes_buf_deterministic=i.asm.Kb).apply(null,arguments)},i._randombytes_seedbytes=function(){return (i._randombytes_seedbytes=i.asm.Lb).apply(null,arguments)},i._randombytes_close=function(){return (i._randombytes_close=i.asm.Mb).apply(null,arguments)},i._randombytes=function(){return (i._randombytes=i.asm.Nb).apply(null,arguments)},i._sodium_bin2hex=function(){return (i._sodium_bin2hex=i.asm.Ob).apply(null,arguments)},i._sodium_hex2bin=function(){return (i._sodium_hex2bin=i.asm.Pb).apply(null,arguments)},i._sodium_base64_encoded_len=function(){return (i._sodium_base64_encoded_len=i.asm.Qb).apply(null,arguments)},i._sodium_bin2base64=function(){return (i._sodium_bin2base64=i.asm.Rb).apply(null,arguments)},i._sodium_base642bin=function(){return (i._sodium_base642bin=i.asm.Sb).apply(null,arguments)},i._sodium_init=function(){return (i._sodium_init=i.asm.Tb).apply(null,arguments)},i._sodium_pad=function(){return (i._sodium_pad=i.asm.Ub).apply(null,arguments)},i._sodium_unpad=function(){return (i._sodium_unpad=i.asm.Vb).apply(null,arguments)},i._sodium_version_string=function(){return (i._sodium_version_string=i.asm.Wb).apply(null,arguments)},i._sodium_library_version_major=function(){return (i._sodium_library_version_major=i.asm.Xb).apply(null,arguments)},i._sodium_library_version_minor=function(){return (i._sodium_library_version_minor=i.asm.Yb).apply(null,arguments)},i._sodium_library_minimal=function(){return (i._sodium_library_minimal=i.asm.Zb).apply(null,arguments)},i._malloc=function(){return (i._malloc=i.asm._b).apply(null,arguments)},i._free=function(){return (i._free=i.asm.$b).apply(null,arguments)},i.UTF8ToString=H,i.setValue=function(A,I,g="i8"){switch(g.endsWith("*")&&(g="*"),g){case"i1":case"i8":w[A>>0]=I;break;case"i16":s[A>>1]=I;break;case"i32":p[A>>2]=I;break;case"i64":d=[I>>>0,(m=I,+Math.abs(m)>=1?m>0?(0|Math.min(+Math.floor(m/4294967296),4294967295))>>>0:~~+Math.ceil((m-+(~~m>>>0))/4294967296)>>>0:0)],p[A>>2]=d[0],p[A+4>>2]=d[1];break;case"float":k[A>>2]=I;break;case"double":F[A>>3]=I;break;case"*":u[A>>2]=I;break;default:K("invalid type for setValue: "+g);}},i.getValue=function(A,I="i8"){switch(I.endsWith("*")&&(I="*"),I){case"i1":case"i8":return w[A>>0];case"i16":return s[A>>1];case"i32":case"i64":return p[A>>2];case"float":return k[A>>2];case"double":return F[A>>3];case"*":return u[A>>2];default:K("invalid type for getValue: "+I);}return null},_=function A(){W||$(),W||(_=A);},i.preInit)for("function"==typeof i.preInit&&(i.preInit=[i.preInit]);i.preInit.length>0;)i.preInit.pop()();$();}))};var g,B,Q,i=void 0!==i?i:{},E=Object.assign({},i),o="object"==typeof window,a="function"==typeof importScripts,n="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,r="";if(n){var f=require$$0$2,t=require$$1;r=a?t.dirname(r)+"/":__dirname+"/",g=(A,I)=>{var g=V(A);return g?I?g:g.toString():(A=L(A)?new URL(A):t.normalize(A),f.readFileSync(A,I?void 0:"utf8"))},Q=A=>{var I=g(A,!0);return I.buffer||(I=new Uint8Array(I)),I},B=(A,I,g)=>{var C=V(A);C&&I(C),A=L(A)?new URL(A):t.normalize(A),f.readFile(A,(function(A,C){A?g(A):I(C.buffer);}));},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),process.argv.slice(2),(module.exports=i),i.inspect=function(){return "[Emscripten Module object]"};}else (o||a)&&(a?r=self.location.href:"undefined"!=typeof document&&document.currentScript&&(r=document.currentScript.src),r=0!==r.indexOf("blob:")?r.substr(0,r.replace(/[?#].*/,"").lastIndexOf("/")+1):"",g=A=>{try{var I=new XMLHttpRequest;return I.open("GET",A,!1),I.send(null),I.responseText}catch(I){var g=V(A);if(g)return function(A){for(var I=[],g=0;g<A.length;g++){var C=A[g];C>255&&(C&=255),I.push(String.fromCharCode(C));}return I.join("")}(g);throw I}},a&&(Q=A=>{try{var I=new XMLHttpRequest;return I.open("GET",A,!1),I.responseType="arraybuffer",I.send(null),new Uint8Array(I.response)}catch(I){var g=V(A);if(g)return g;throw I}}),B=(A,I,g)=>{var C=new XMLHttpRequest;C.open("GET",A,!0),C.responseType="arraybuffer",C.onload=()=>{if(200==C.status||0==C.status&&C.response)I(C.response);else {var B=V(A);B?I(B.buffer):g();}},C.onerror=g,C.send(null);});i.print;var e,c,y=i.printErr||void 0;Object.assign(i,E),E=null,i.arguments&&i.arguments,i.thisProgram&&i.thisProgram,i.quit&&i.quit,i.wasmBinary&&(e=i.wasmBinary),i.noExitRuntime,"object"!=typeof WebAssembly&&b("no native wasm support detected");var D,w,h,s,p,u,k,F=!1,l="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function S(A,I){return A?function(A,I,g){for(var C=I+g,B=I;A[B]&&!(B>=C);)++B;if(B-I>16&&A.buffer&&l)return l.decode(A.subarray(I,B));for(var Q="";I<B;){var i=A[I++];if(128&i){var E=63&A[I++];if(192!=(224&i)){var o=63&A[I++];if((i=224==(240&i)?(15&i)<<12|E<<6|o:(7&i)<<18|E<<12|o<<6|63&A[I++])<65536)Q+=String.fromCharCode(i);else {var a=i-65536;Q+=String.fromCharCode(55296|a>>10,56320|1023&a);}}else Q+=String.fromCharCode((31&i)<<6|E);}else Q+=String.fromCharCode(i);}return Q}(w,A,I):""}function H(){var A=c.buffer;i.HEAP8=D=new Int8Array(A),i.HEAP16=h=new Int16Array(A),i.HEAP32=s=new Int32Array(A),i.HEAPU8=w=new Uint8Array(A),i.HEAPU16=new Uint16Array(A),i.HEAPU32=p=new Uint32Array(A),i.HEAPF32=u=new Float32Array(A),i.HEAPF64=k=new Float64Array(A);}var M=[],G=[],U=[],J=0,Y=null;function b(A){throw i.onAbort&&i.onAbort(A),y(A="Aborted("+A+")"),F=!0,A+=". Build with -sASSERTIONS for more info.",new WebAssembly.RuntimeError(A)}var _,K,P,v,m="data:application/octet-stream;base64,";function d(A){return A.startsWith(m)}function L(A){return A.startsWith("file://")}function R(A){try{if(A==_&&e)return new Uint8Array(e);var I=V(A);if(I)return I;if(Q)return Q(A);throw "both async and sync fetching of the wasm failed"}catch(A){b(A);}}d(_="data:application/octet-stream;base64,")||(K=_,_=i.locateFile?i.locateFile(K,r):r+K);var x={34904:()=>i.getRandomValue(),34940:()=>{if(void 0===i.getRandomValue)try{var A="object"==typeof window?window:self,I=void 0!==A.crypto?A.crypto:A.msCrypto,g=function(){var A=new Uint32Array(1);return I.getRandomValues(A),A[0]>>>0};g(),i.getRandomValue=g;}catch(A){try{var C=require("crypto"),B=function(){var A=C.randomBytes(4);return (A[0]<<24|A[1]<<16|A[2]<<8|A[3])>>>0};B(),i.getRandomValue=B;}catch(A){throw "No secure random number generator found"}}}};function j(A){for(;A.length>0;)A.shift()(i);}var X=[];function q(A){var I=c.buffer;try{return c.grow(A-I.byteLength+65535>>>16),H(),1}catch(A){}}var z="function"==typeof atob?atob:function(A){var I,g,C,B,Q,i,E="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",o="",a=0;A=A.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{I=E.indexOf(A.charAt(a++))<<2|(B=E.indexOf(A.charAt(a++)))>>4,g=(15&B)<<4|(Q=E.indexOf(A.charAt(a++)))>>2,C=(3&Q)<<6|(i=E.indexOf(A.charAt(a++))),o+=String.fromCharCode(I),64!==Q&&(o+=String.fromCharCode(g)),64!==i&&(o+=String.fromCharCode(C));}while(a<A.length);return o};function V(A){if(d(A))return function(A){if("boolean"==typeof n&&n){var I=Buffer.from(A,"base64");return new Uint8Array(I.buffer,I.byteOffset,I.byteLength)}try{for(var g=z(A),C=new Uint8Array(g.length),B=0;B<g.length;++B)C[B]=g.charCodeAt(B);return C}catch(A){throw new Error("Converting base64 string to bytes failed.")}}(A.slice(m.length))}var O,T={b:function(A,I,g,C){b("Assertion failed: "+S(A)+", at: "+[I?S(I):"unknown filename",g,C?S(C):"unknown function"]);},c:function(){b("");},a:function(A,I,g){return function(A,I,g){var C=function(A,I){var g;for(X.length=0,I>>=2;g=w[A++];)I+=105!=g&I,X.push(105==g?s[I]:k[I++>>1]),++I;return X}(I,g);return x[A].apply(null,C)}(A,I,g)},d:function(A,I,g){w.copyWithin(A,I,I+g);},e:function(A){var I,g=w.length,C=2147483648;if((A>>>=0)>C)return !1;for(var B=1;B<=4;B*=2){var Q=g*(1+.2/B);if(Q=Math.min(Q,A+100663296),q(Math.min(C,(I=Math.max(A,Q))+(65536-I%65536)%65536)))return !0}return !1}};function W(){function A(){O||(O=!0,i.calledRun=!0,F||(j(G),i.onRuntimeInitialized&&i.onRuntimeInitialized(),function(){if(i.postRun)for("function"==typeof i.postRun&&(i.postRun=[i.postRun]);i.postRun.length;)A=i.postRun.shift(),U.unshift(A);var A;j(U);}()));}J>0||(function(){if(i.preRun)for("function"==typeof i.preRun&&(i.preRun=[i.preRun]);i.preRun.length;)A=i.preRun.shift(),M.unshift(A);var A;j(M);}(),J>0||(i.setStatus?(i.setStatus("Running..."),setTimeout((function(){setTimeout((function(){i.setStatus("");}),1),A();}),1)):A()));}if(function(){var A={a:T};function I(A,I){var g=A.exports;i.asm=g,c=i.asm.f,H(),i.asm.ac,function(A){if(J--,i.monitorRunDependencies&&i.monitorRunDependencies(J),0==J&&(Y)){var I=Y;Y=null,I();}}();}function g(A){I(A.instance);}function C(I){return function(){if(!e&&(o||a)){if("function"==typeof fetch&&!L(_))return fetch(_,{credentials:"same-origin"}).then((function(A){if(!A.ok)throw "failed to load wasm binary file at '"+_+"'";return A.arrayBuffer()})).catch((function(){return R(_)}));if(B)return new Promise((function(A,I){B(_,(function(I){A(new Uint8Array(I));}),I);}))}return Promise.resolve().then((function(){return R(_)}))}().then((function(I){return WebAssembly.instantiate(I,A)})).then((function(A){return A})).then(I,(function(A){y("failed to asynchronously prepare wasm: "+A),b(A);}))}if(J++,i.monitorRunDependencies&&i.monitorRunDependencies(J),i.instantiateWasm)try{return i.instantiateWasm(A,I)}catch(A){return y("Module.instantiateWasm callback failed with error: "+A),!1}e||"function"!=typeof WebAssembly.instantiateStreaming||d(_)||L(_)||n||"function"!=typeof fetch?C(g):fetch(_,{credentials:"same-origin"}).then((function(I){return WebAssembly.instantiateStreaming(I,A).then(g,(function(A){return y("wasm streaming compile failed: "+A),y("falling back to ArrayBuffer instantiation"),C(g)}))}));}(),i._crypto_aead_chacha20poly1305_encrypt_detached=function(){return (i._crypto_aead_chacha20poly1305_encrypt_detached=i.asm.g).apply(null,arguments)},i._crypto_aead_chacha20poly1305_encrypt=function(){return (i._crypto_aead_chacha20poly1305_encrypt=i.asm.h).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_encrypt_detached=function(){return (i._crypto_aead_chacha20poly1305_ietf_encrypt_detached=i.asm.i).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_encrypt=function(){return (i._crypto_aead_chacha20poly1305_ietf_encrypt=i.asm.j).apply(null,arguments)},i._crypto_aead_chacha20poly1305_decrypt_detached=function(){return (i._crypto_aead_chacha20poly1305_decrypt_detached=i.asm.k).apply(null,arguments)},i._crypto_aead_chacha20poly1305_decrypt=function(){return (i._crypto_aead_chacha20poly1305_decrypt=i.asm.l).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_decrypt_detached=function(){return (i._crypto_aead_chacha20poly1305_ietf_decrypt_detached=i.asm.m).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_decrypt=function(){return (i._crypto_aead_chacha20poly1305_ietf_decrypt=i.asm.n).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_keybytes=function(){return (i._crypto_aead_chacha20poly1305_ietf_keybytes=i.asm.o).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_npubbytes=function(){return (i._crypto_aead_chacha20poly1305_ietf_npubbytes=i.asm.p).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_nsecbytes=function(){return (i._crypto_aead_chacha20poly1305_ietf_nsecbytes=i.asm.q).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_abytes=function(){return (i._crypto_aead_chacha20poly1305_ietf_abytes=i.asm.r).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_messagebytes_max=function(){return (i._crypto_aead_chacha20poly1305_ietf_messagebytes_max=i.asm.s).apply(null,arguments)},i._crypto_aead_chacha20poly1305_ietf_keygen=function(){return (i._crypto_aead_chacha20poly1305_ietf_keygen=i.asm.t).apply(null,arguments)},i._crypto_aead_chacha20poly1305_keybytes=function(){return (i._crypto_aead_chacha20poly1305_keybytes=i.asm.u).apply(null,arguments)},i._crypto_aead_chacha20poly1305_npubbytes=function(){return (i._crypto_aead_chacha20poly1305_npubbytes=i.asm.v).apply(null,arguments)},i._crypto_aead_chacha20poly1305_nsecbytes=function(){return (i._crypto_aead_chacha20poly1305_nsecbytes=i.asm.w).apply(null,arguments)},i._crypto_aead_chacha20poly1305_abytes=function(){return (i._crypto_aead_chacha20poly1305_abytes=i.asm.x).apply(null,arguments)},i._crypto_aead_chacha20poly1305_messagebytes_max=function(){return (i._crypto_aead_chacha20poly1305_messagebytes_max=i.asm.y).apply(null,arguments)},i._crypto_aead_chacha20poly1305_keygen=function(){return (i._crypto_aead_chacha20poly1305_keygen=i.asm.z).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_encrypt_detached=function(){return (i._crypto_aead_xchacha20poly1305_ietf_encrypt_detached=i.asm.A).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_encrypt=function(){return (i._crypto_aead_xchacha20poly1305_ietf_encrypt=i.asm.B).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_decrypt_detached=function(){return (i._crypto_aead_xchacha20poly1305_ietf_decrypt_detached=i.asm.C).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_decrypt=function(){return (i._crypto_aead_xchacha20poly1305_ietf_decrypt=i.asm.D).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_keybytes=function(){return (i._crypto_aead_xchacha20poly1305_ietf_keybytes=i.asm.E).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_npubbytes=function(){return (i._crypto_aead_xchacha20poly1305_ietf_npubbytes=i.asm.F).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_nsecbytes=function(){return (i._crypto_aead_xchacha20poly1305_ietf_nsecbytes=i.asm.G).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_abytes=function(){return (i._crypto_aead_xchacha20poly1305_ietf_abytes=i.asm.H).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_messagebytes_max=function(){return (i._crypto_aead_xchacha20poly1305_ietf_messagebytes_max=i.asm.I).apply(null,arguments)},i._crypto_aead_xchacha20poly1305_ietf_keygen=function(){return (i._crypto_aead_xchacha20poly1305_ietf_keygen=i.asm.J).apply(null,arguments)},i._crypto_auth_bytes=function(){return (i._crypto_auth_bytes=i.asm.K).apply(null,arguments)},i._crypto_auth_keybytes=function(){return (i._crypto_auth_keybytes=i.asm.L).apply(null,arguments)},i._crypto_auth=function(){return (i._crypto_auth=i.asm.M).apply(null,arguments)},i._crypto_auth_verify=function(){return (i._crypto_auth_verify=i.asm.N).apply(null,arguments)},i._crypto_auth_keygen=function(){return (i._crypto_auth_keygen=i.asm.O).apply(null,arguments)},i._crypto_box_seedbytes=function(){return (i._crypto_box_seedbytes=i.asm.P).apply(null,arguments)},i._crypto_box_publickeybytes=function(){return (i._crypto_box_publickeybytes=i.asm.Q).apply(null,arguments)},i._crypto_box_secretkeybytes=function(){return (i._crypto_box_secretkeybytes=i.asm.R).apply(null,arguments)},i._crypto_box_beforenmbytes=function(){return (i._crypto_box_beforenmbytes=i.asm.S).apply(null,arguments)},i._crypto_box_noncebytes=function(){return (i._crypto_box_noncebytes=i.asm.T).apply(null,arguments)},i._crypto_box_macbytes=function(){return (i._crypto_box_macbytes=i.asm.U).apply(null,arguments)},i._crypto_box_messagebytes_max=function(){return (i._crypto_box_messagebytes_max=i.asm.V).apply(null,arguments)},i._crypto_box_seed_keypair=function(){return (i._crypto_box_seed_keypair=i.asm.W).apply(null,arguments)},i._crypto_box_keypair=function(){return (i._crypto_box_keypair=i.asm.X).apply(null,arguments)},i._crypto_box_beforenm=function(){return (i._crypto_box_beforenm=i.asm.Y).apply(null,arguments)},i._crypto_box_detached_afternm=function(){return (i._crypto_box_detached_afternm=i.asm.Z).apply(null,arguments)},i._crypto_box_detached=function(){return (i._crypto_box_detached=i.asm._).apply(null,arguments)},i._crypto_box_easy_afternm=function(){return (i._crypto_box_easy_afternm=i.asm.$).apply(null,arguments)},i._crypto_box_easy=function(){return (i._crypto_box_easy=i.asm.aa).apply(null,arguments)},i._crypto_box_open_detached_afternm=function(){return (i._crypto_box_open_detached_afternm=i.asm.ba).apply(null,arguments)},i._crypto_box_open_detached=function(){return (i._crypto_box_open_detached=i.asm.ca).apply(null,arguments)},i._crypto_box_open_easy_afternm=function(){return (i._crypto_box_open_easy_afternm=i.asm.da).apply(null,arguments)},i._crypto_box_open_easy=function(){return (i._crypto_box_open_easy=i.asm.ea).apply(null,arguments)},i._crypto_box_seal=function(){return (i._crypto_box_seal=i.asm.fa).apply(null,arguments)},i._crypto_box_seal_open=function(){return (i._crypto_box_seal_open=i.asm.ga).apply(null,arguments)},i._crypto_box_sealbytes=function(){return (i._crypto_box_sealbytes=i.asm.ha).apply(null,arguments)},i._crypto_generichash_bytes_min=function(){return (i._crypto_generichash_bytes_min=i.asm.ia).apply(null,arguments)},i._crypto_generichash_bytes_max=function(){return (i._crypto_generichash_bytes_max=i.asm.ja).apply(null,arguments)},i._crypto_generichash_bytes=function(){return (i._crypto_generichash_bytes=i.asm.ka).apply(null,arguments)},i._crypto_generichash_keybytes_min=function(){return (i._crypto_generichash_keybytes_min=i.asm.la).apply(null,arguments)},i._crypto_generichash_keybytes_max=function(){return (i._crypto_generichash_keybytes_max=i.asm.ma).apply(null,arguments)},i._crypto_generichash_keybytes=function(){return (i._crypto_generichash_keybytes=i.asm.na).apply(null,arguments)},i._crypto_generichash_statebytes=function(){return (i._crypto_generichash_statebytes=i.asm.oa).apply(null,arguments)},i._crypto_generichash=function(){return (i._crypto_generichash=i.asm.pa).apply(null,arguments)},i._crypto_generichash_init=function(){return (i._crypto_generichash_init=i.asm.qa).apply(null,arguments)},i._crypto_generichash_update=function(){return (i._crypto_generichash_update=i.asm.ra).apply(null,arguments)},i._crypto_generichash_final=function(){return (i._crypto_generichash_final=i.asm.sa).apply(null,arguments)},i._crypto_generichash_keygen=function(){return (i._crypto_generichash_keygen=i.asm.ta).apply(null,arguments)},i._crypto_hash_bytes=function(){return (i._crypto_hash_bytes=i.asm.ua).apply(null,arguments)},i._crypto_hash=function(){return (i._crypto_hash=i.asm.va).apply(null,arguments)},i._crypto_kdf_bytes_min=function(){return (i._crypto_kdf_bytes_min=i.asm.wa).apply(null,arguments)},i._crypto_kdf_bytes_max=function(){return (i._crypto_kdf_bytes_max=i.asm.xa).apply(null,arguments)},i._crypto_kdf_contextbytes=function(){return (i._crypto_kdf_contextbytes=i.asm.ya).apply(null,arguments)},i._crypto_kdf_keybytes=function(){return (i._crypto_kdf_keybytes=i.asm.za).apply(null,arguments)},i._crypto_kdf_derive_from_key=function(){return (i._crypto_kdf_derive_from_key=i.asm.Aa).apply(null,arguments)},i._crypto_kdf_keygen=function(){return (i._crypto_kdf_keygen=i.asm.Ba).apply(null,arguments)},i._crypto_kx_seed_keypair=function(){return (i._crypto_kx_seed_keypair=i.asm.Ca).apply(null,arguments)},i._crypto_kx_keypair=function(){return (i._crypto_kx_keypair=i.asm.Da).apply(null,arguments)},i._crypto_kx_client_session_keys=function(){return (i._crypto_kx_client_session_keys=i.asm.Ea).apply(null,arguments)},i._crypto_kx_server_session_keys=function(){return (i._crypto_kx_server_session_keys=i.asm.Fa).apply(null,arguments)},i._crypto_kx_publickeybytes=function(){return (i._crypto_kx_publickeybytes=i.asm.Ga).apply(null,arguments)},i._crypto_kx_secretkeybytes=function(){return (i._crypto_kx_secretkeybytes=i.asm.Ha).apply(null,arguments)},i._crypto_kx_seedbytes=function(){return (i._crypto_kx_seedbytes=i.asm.Ia).apply(null,arguments)},i._crypto_kx_sessionkeybytes=function(){return (i._crypto_kx_sessionkeybytes=i.asm.Ja).apply(null,arguments)},i._crypto_scalarmult_base=function(){return (i._crypto_scalarmult_base=i.asm.Ka).apply(null,arguments)},i._crypto_scalarmult=function(){return (i._crypto_scalarmult=i.asm.La).apply(null,arguments)},i._crypto_scalarmult_bytes=function(){return (i._crypto_scalarmult_bytes=i.asm.Ma).apply(null,arguments)},i._crypto_scalarmult_scalarbytes=function(){return (i._crypto_scalarmult_scalarbytes=i.asm.Na).apply(null,arguments)},i._crypto_secretbox_keybytes=function(){return (i._crypto_secretbox_keybytes=i.asm.Oa).apply(null,arguments)},i._crypto_secretbox_noncebytes=function(){return (i._crypto_secretbox_noncebytes=i.asm.Pa).apply(null,arguments)},i._crypto_secretbox_macbytes=function(){return (i._crypto_secretbox_macbytes=i.asm.Qa).apply(null,arguments)},i._crypto_secretbox_messagebytes_max=function(){return (i._crypto_secretbox_messagebytes_max=i.asm.Ra).apply(null,arguments)},i._crypto_secretbox_keygen=function(){return (i._crypto_secretbox_keygen=i.asm.Sa).apply(null,arguments)},i._crypto_secretbox_detached=function(){return (i._crypto_secretbox_detached=i.asm.Ta).apply(null,arguments)},i._crypto_secretbox_easy=function(){return (i._crypto_secretbox_easy=i.asm.Ua).apply(null,arguments)},i._crypto_secretbox_open_detached=function(){return (i._crypto_secretbox_open_detached=i.asm.Va).apply(null,arguments)},i._crypto_secretbox_open_easy=function(){return (i._crypto_secretbox_open_easy=i.asm.Wa).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_keygen=function(){return (i._crypto_secretstream_xchacha20poly1305_keygen=i.asm.Xa).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_init_push=function(){return (i._crypto_secretstream_xchacha20poly1305_init_push=i.asm.Ya).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_init_pull=function(){return (i._crypto_secretstream_xchacha20poly1305_init_pull=i.asm.Za).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_rekey=function(){return (i._crypto_secretstream_xchacha20poly1305_rekey=i.asm._a).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_push=function(){return (i._crypto_secretstream_xchacha20poly1305_push=i.asm.$a).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_pull=function(){return (i._crypto_secretstream_xchacha20poly1305_pull=i.asm.ab).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_statebytes=function(){return (i._crypto_secretstream_xchacha20poly1305_statebytes=i.asm.bb).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_abytes=function(){return (i._crypto_secretstream_xchacha20poly1305_abytes=i.asm.cb).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_headerbytes=function(){return (i._crypto_secretstream_xchacha20poly1305_headerbytes=i.asm.db).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_keybytes=function(){return (i._crypto_secretstream_xchacha20poly1305_keybytes=i.asm.eb).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_messagebytes_max=function(){return (i._crypto_secretstream_xchacha20poly1305_messagebytes_max=i.asm.fb).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_tag_message=function(){return (i._crypto_secretstream_xchacha20poly1305_tag_message=i.asm.gb).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_tag_push=function(){return (i._crypto_secretstream_xchacha20poly1305_tag_push=i.asm.hb).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_tag_rekey=function(){return (i._crypto_secretstream_xchacha20poly1305_tag_rekey=i.asm.ib).apply(null,arguments)},i._crypto_secretstream_xchacha20poly1305_tag_final=function(){return (i._crypto_secretstream_xchacha20poly1305_tag_final=i.asm.jb).apply(null,arguments)},i._crypto_shorthash_bytes=function(){return (i._crypto_shorthash_bytes=i.asm.kb).apply(null,arguments)},i._crypto_shorthash_keybytes=function(){return (i._crypto_shorthash_keybytes=i.asm.lb).apply(null,arguments)},i._crypto_shorthash=function(){return (i._crypto_shorthash=i.asm.mb).apply(null,arguments)},i._crypto_shorthash_keygen=function(){return (i._crypto_shorthash_keygen=i.asm.nb).apply(null,arguments)},i._crypto_sign_statebytes=function(){return (i._crypto_sign_statebytes=i.asm.ob).apply(null,arguments)},i._crypto_sign_bytes=function(){return (i._crypto_sign_bytes=i.asm.pb).apply(null,arguments)},i._crypto_sign_seedbytes=function(){return (i._crypto_sign_seedbytes=i.asm.qb).apply(null,arguments)},i._crypto_sign_publickeybytes=function(){return (i._crypto_sign_publickeybytes=i.asm.rb).apply(null,arguments)},i._crypto_sign_secretkeybytes=function(){return (i._crypto_sign_secretkeybytes=i.asm.sb).apply(null,arguments)},i._crypto_sign_messagebytes_max=function(){return (i._crypto_sign_messagebytes_max=i.asm.tb).apply(null,arguments)},i._crypto_sign_seed_keypair=function(){return (i._crypto_sign_seed_keypair=i.asm.ub).apply(null,arguments)},i._crypto_sign_keypair=function(){return (i._crypto_sign_keypair=i.asm.vb).apply(null,arguments)},i._crypto_sign=function(){return (i._crypto_sign=i.asm.wb).apply(null,arguments)},i._crypto_sign_open=function(){return (i._crypto_sign_open=i.asm.xb).apply(null,arguments)},i._crypto_sign_detached=function(){return (i._crypto_sign_detached=i.asm.yb).apply(null,arguments)},i._crypto_sign_verify_detached=function(){return (i._crypto_sign_verify_detached=i.asm.zb).apply(null,arguments)},i._crypto_sign_init=function(){return (i._crypto_sign_init=i.asm.Ab).apply(null,arguments)},i._crypto_sign_update=function(){return (i._crypto_sign_update=i.asm.Bb).apply(null,arguments)},i._crypto_sign_final_create=function(){return (i._crypto_sign_final_create=i.asm.Cb).apply(null,arguments)},i._crypto_sign_final_verify=function(){return (i._crypto_sign_final_verify=i.asm.Db).apply(null,arguments)},i._crypto_sign_ed25519_pk_to_curve25519=function(){return (i._crypto_sign_ed25519_pk_to_curve25519=i.asm.Eb).apply(null,arguments)},i._crypto_sign_ed25519_sk_to_curve25519=function(){return (i._crypto_sign_ed25519_sk_to_curve25519=i.asm.Fb).apply(null,arguments)},i._randombytes_random=function(){return (i._randombytes_random=i.asm.Gb).apply(null,arguments)},i._randombytes_stir=function(){return (i._randombytes_stir=i.asm.Hb).apply(null,arguments)},i._randombytes_uniform=function(){return (i._randombytes_uniform=i.asm.Ib).apply(null,arguments)},i._randombytes_buf=function(){return (i._randombytes_buf=i.asm.Jb).apply(null,arguments)},i._randombytes_buf_deterministic=function(){return (i._randombytes_buf_deterministic=i.asm.Kb).apply(null,arguments)},i._randombytes_seedbytes=function(){return (i._randombytes_seedbytes=i.asm.Lb).apply(null,arguments)},i._randombytes_close=function(){return (i._randombytes_close=i.asm.Mb).apply(null,arguments)},i._randombytes=function(){return (i._randombytes=i.asm.Nb).apply(null,arguments)},i._sodium_bin2hex=function(){return (i._sodium_bin2hex=i.asm.Ob).apply(null,arguments)},i._sodium_hex2bin=function(){return (i._sodium_hex2bin=i.asm.Pb).apply(null,arguments)},i._sodium_base64_encoded_len=function(){return (i._sodium_base64_encoded_len=i.asm.Qb).apply(null,arguments)},i._sodium_bin2base64=function(){return (i._sodium_bin2base64=i.asm.Rb).apply(null,arguments)},i._sodium_base642bin=function(){return (i._sodium_base642bin=i.asm.Sb).apply(null,arguments)},i._sodium_init=function(){return (i._sodium_init=i.asm.Tb).apply(null,arguments)},i._sodium_pad=function(){return (i._sodium_pad=i.asm.Ub).apply(null,arguments)},i._sodium_unpad=function(){return (i._sodium_unpad=i.asm.Vb).apply(null,arguments)},i._sodium_version_string=function(){return (i._sodium_version_string=i.asm.Wb).apply(null,arguments)},i._sodium_library_version_major=function(){return (i._sodium_library_version_major=i.asm.Xb).apply(null,arguments)},i._sodium_library_version_minor=function(){return (i._sodium_library_version_minor=i.asm.Yb).apply(null,arguments)},i._sodium_library_minimal=function(){return (i._sodium_library_minimal=i.asm.Zb).apply(null,arguments)},i._malloc=function(){return (i._malloc=i.asm._b).apply(null,arguments)},i._free=function(){return (i._free=i.asm.$b).apply(null,arguments)},i.UTF8ToString=S,i.setValue=function(A,I,g="i8"){switch(g.endsWith("*")&&(g="*"),g){case"i1":case"i8":D[A>>0]=I;break;case"i16":h[A>>1]=I;break;case"i32":s[A>>2]=I;break;case"i64":v=[I>>>0,(P=I,+Math.abs(P)>=1?P>0?(0|Math.min(+Math.floor(P/4294967296),4294967295))>>>0:~~+Math.ceil((P-+(~~P>>>0))/4294967296)>>>0:0)],s[A>>2]=v[0],s[A+4>>2]=v[1];break;case"float":u[A>>2]=I;break;case"double":k[A>>3]=I;break;case"*":p[A>>2]=I;break;default:b("invalid type for setValue: "+g);}},i.getValue=function(A,I="i8"){switch(I.endsWith("*")&&(I="*"),I){case"i1":case"i8":return D[A>>0];case"i16":return h[A>>1];case"i32":case"i64":return s[A>>2];case"float":return u[A>>2];case"double":return k[A>>3];case"*":return p[A>>2];default:b("invalid type for getValue: "+I);}return null},Y=function A(){O||W(),O||(Y=A);},i.preInit)for("function"==typeof i.preInit&&(i.preInit=[i.preInit]);i.preInit.length>0;)i.preInit.pop()();W();})).catch((function(){return C.useBackupModule()})),I}"string"!=typeof exports.nodeName?I(exports):A.libsodium=I(A.libsodium_mod||(A.commonJsStrict={}));}(commonjsGlobal); 
	} (libsodium, libsodium.exports));
	return libsodium.exports;
}

(function (exports) {
	!function(e){function r(e,r){var t,a="uint8array",_=r.ready.then((function(){function a(){if(0!==t._sodium_init())throw new Error("libsodium was not correctly initialized.");for(var r=["crypto_aead_chacha20poly1305_decrypt","crypto_aead_chacha20poly1305_decrypt_detached","crypto_aead_chacha20poly1305_encrypt","crypto_aead_chacha20poly1305_encrypt_detached","crypto_aead_chacha20poly1305_ietf_decrypt","crypto_aead_chacha20poly1305_ietf_decrypt_detached","crypto_aead_chacha20poly1305_ietf_encrypt","crypto_aead_chacha20poly1305_ietf_encrypt_detached","crypto_aead_chacha20poly1305_ietf_keygen","crypto_aead_chacha20poly1305_keygen","crypto_aead_xchacha20poly1305_ietf_decrypt","crypto_aead_xchacha20poly1305_ietf_decrypt_detached","crypto_aead_xchacha20poly1305_ietf_encrypt","crypto_aead_xchacha20poly1305_ietf_encrypt_detached","crypto_aead_xchacha20poly1305_ietf_keygen","crypto_auth","crypto_auth_hmacsha256","crypto_auth_hmacsha256_final","crypto_auth_hmacsha256_init","crypto_auth_hmacsha256_keygen","crypto_auth_hmacsha256_update","crypto_auth_hmacsha256_verify","crypto_auth_hmacsha512","crypto_auth_hmacsha512_final","crypto_auth_hmacsha512_init","crypto_auth_hmacsha512_keygen","crypto_auth_hmacsha512_update","crypto_auth_hmacsha512_verify","crypto_auth_keygen","crypto_auth_verify","crypto_box_beforenm","crypto_box_curve25519xchacha20poly1305_keypair","crypto_box_curve25519xchacha20poly1305_seal","crypto_box_curve25519xchacha20poly1305_seal_open","crypto_box_detached","crypto_box_easy","crypto_box_easy_afternm","crypto_box_keypair","crypto_box_open_detached","crypto_box_open_easy","crypto_box_open_easy_afternm","crypto_box_seal","crypto_box_seal_open","crypto_box_seed_keypair","crypto_core_ed25519_add","crypto_core_ed25519_from_hash","crypto_core_ed25519_from_uniform","crypto_core_ed25519_is_valid_point","crypto_core_ed25519_random","crypto_core_ed25519_scalar_add","crypto_core_ed25519_scalar_complement","crypto_core_ed25519_scalar_invert","crypto_core_ed25519_scalar_mul","crypto_core_ed25519_scalar_negate","crypto_core_ed25519_scalar_random","crypto_core_ed25519_scalar_reduce","crypto_core_ed25519_scalar_sub","crypto_core_ed25519_sub","crypto_core_hchacha20","crypto_core_hsalsa20","crypto_core_ristretto255_add","crypto_core_ristretto255_from_hash","crypto_core_ristretto255_is_valid_point","crypto_core_ristretto255_random","crypto_core_ristretto255_scalar_add","crypto_core_ristretto255_scalar_complement","crypto_core_ristretto255_scalar_invert","crypto_core_ristretto255_scalar_mul","crypto_core_ristretto255_scalar_negate","crypto_core_ristretto255_scalar_random","crypto_core_ristretto255_scalar_reduce","crypto_core_ristretto255_scalar_sub","crypto_core_ristretto255_sub","crypto_generichash","crypto_generichash_blake2b_salt_personal","crypto_generichash_final","crypto_generichash_init","crypto_generichash_keygen","crypto_generichash_update","crypto_hash","crypto_hash_sha256","crypto_hash_sha256_final","crypto_hash_sha256_init","crypto_hash_sha256_update","crypto_hash_sha512","crypto_hash_sha512_final","crypto_hash_sha512_init","crypto_hash_sha512_update","crypto_kdf_derive_from_key","crypto_kdf_keygen","crypto_kx_client_session_keys","crypto_kx_keypair","crypto_kx_seed_keypair","crypto_kx_server_session_keys","crypto_onetimeauth","crypto_onetimeauth_final","crypto_onetimeauth_init","crypto_onetimeauth_keygen","crypto_onetimeauth_update","crypto_onetimeauth_verify","crypto_pwhash","crypto_pwhash_scryptsalsa208sha256","crypto_pwhash_scryptsalsa208sha256_ll","crypto_pwhash_scryptsalsa208sha256_str","crypto_pwhash_scryptsalsa208sha256_str_verify","crypto_pwhash_str","crypto_pwhash_str_needs_rehash","crypto_pwhash_str_verify","crypto_scalarmult","crypto_scalarmult_base","crypto_scalarmult_ed25519","crypto_scalarmult_ed25519_base","crypto_scalarmult_ed25519_base_noclamp","crypto_scalarmult_ed25519_noclamp","crypto_scalarmult_ristretto255","crypto_scalarmult_ristretto255_base","crypto_secretbox_detached","crypto_secretbox_easy","crypto_secretbox_keygen","crypto_secretbox_open_detached","crypto_secretbox_open_easy","crypto_secretstream_xchacha20poly1305_init_pull","crypto_secretstream_xchacha20poly1305_init_push","crypto_secretstream_xchacha20poly1305_keygen","crypto_secretstream_xchacha20poly1305_pull","crypto_secretstream_xchacha20poly1305_push","crypto_secretstream_xchacha20poly1305_rekey","crypto_shorthash","crypto_shorthash_keygen","crypto_shorthash_siphashx24","crypto_sign","crypto_sign_detached","crypto_sign_ed25519_pk_to_curve25519","crypto_sign_ed25519_sk_to_curve25519","crypto_sign_ed25519_sk_to_pk","crypto_sign_ed25519_sk_to_seed","crypto_sign_final_create","crypto_sign_final_verify","crypto_sign_init","crypto_sign_keypair","crypto_sign_open","crypto_sign_seed_keypair","crypto_sign_update","crypto_sign_verify_detached","crypto_stream_chacha20","crypto_stream_chacha20_ietf_xor","crypto_stream_chacha20_ietf_xor_ic","crypto_stream_chacha20_keygen","crypto_stream_chacha20_xor","crypto_stream_chacha20_xor_ic","crypto_stream_keygen","crypto_stream_xchacha20_keygen","crypto_stream_xchacha20_xor","crypto_stream_xchacha20_xor_ic","randombytes_buf","randombytes_buf_deterministic","randombytes_close","randombytes_random","randombytes_set_implementation","randombytes_stir","randombytes_uniform","sodium_version_string"],a=[x,k,S,T,w,Y,B,A,K,M,I,N,L,U,O,C,R,P,G,X,D,F,V,H,q,j,z,W,J,Q,Z,$,ee,re,te,ae,_e,se,ne,ce,oe,he,pe,ye,ie,le,ue,de,ve,ge,be,fe,me,Ee,xe,ke,Se,Te,we,Ye,Be,Ae,Ke,Me,Ie,Ne,Le,Ue,Oe,Ce,Re,Pe,Ge,Xe,De,Fe,Ve,He,qe,je,ze,We,Je,Qe,Ze,$e,er,rr,tr,ar,_r,sr,nr,cr,or,hr,pr,yr,ir,lr,ur,dr,vr,gr,br,fr,mr,Er,xr,kr,Sr,Tr,wr,Yr,Br,Ar,Kr,Mr,Ir,Nr,Lr,Ur,Or,Cr,Rr,Pr,Gr,Xr,Dr,Fr,Vr,Hr,qr,jr,zr,Wr,Jr,Qr,Zr,$r,et,rt,tt,at,_t,st,nt,ct,ot,ht,pt,yt,it,lt,ut,dt,vt,gt,bt,ft,mt,Et],_=0;_<a.length;_++)"function"==typeof t["_"+r[_]]&&(e[r[_]]=a[_]);var s=["SODIUM_LIBRARY_VERSION_MAJOR","SODIUM_LIBRARY_VERSION_MINOR","crypto_aead_chacha20poly1305_ABYTES","crypto_aead_chacha20poly1305_IETF_ABYTES","crypto_aead_chacha20poly1305_IETF_KEYBYTES","crypto_aead_chacha20poly1305_IETF_MESSAGEBYTES_MAX","crypto_aead_chacha20poly1305_IETF_NPUBBYTES","crypto_aead_chacha20poly1305_IETF_NSECBYTES","crypto_aead_chacha20poly1305_KEYBYTES","crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX","crypto_aead_chacha20poly1305_NPUBBYTES","crypto_aead_chacha20poly1305_NSECBYTES","crypto_aead_chacha20poly1305_ietf_ABYTES","crypto_aead_chacha20poly1305_ietf_KEYBYTES","crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX","crypto_aead_chacha20poly1305_ietf_NPUBBYTES","crypto_aead_chacha20poly1305_ietf_NSECBYTES","crypto_aead_xchacha20poly1305_IETF_ABYTES","crypto_aead_xchacha20poly1305_IETF_KEYBYTES","crypto_aead_xchacha20poly1305_IETF_MESSAGEBYTES_MAX","crypto_aead_xchacha20poly1305_IETF_NPUBBYTES","crypto_aead_xchacha20poly1305_IETF_NSECBYTES","crypto_aead_xchacha20poly1305_ietf_ABYTES","crypto_aead_xchacha20poly1305_ietf_KEYBYTES","crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX","crypto_aead_xchacha20poly1305_ietf_NPUBBYTES","crypto_aead_xchacha20poly1305_ietf_NSECBYTES","crypto_auth_BYTES","crypto_auth_KEYBYTES","crypto_auth_hmacsha256_BYTES","crypto_auth_hmacsha256_KEYBYTES","crypto_auth_hmacsha512256_BYTES","crypto_auth_hmacsha512256_KEYBYTES","crypto_auth_hmacsha512_BYTES","crypto_auth_hmacsha512_KEYBYTES","crypto_box_BEFORENMBYTES","crypto_box_MACBYTES","crypto_box_MESSAGEBYTES_MAX","crypto_box_NONCEBYTES","crypto_box_PUBLICKEYBYTES","crypto_box_SEALBYTES","crypto_box_SECRETKEYBYTES","crypto_box_SEEDBYTES","crypto_box_curve25519xchacha20poly1305_BEFORENMBYTES","crypto_box_curve25519xchacha20poly1305_MACBYTES","crypto_box_curve25519xchacha20poly1305_MESSAGEBYTES_MAX","crypto_box_curve25519xchacha20poly1305_NONCEBYTES","crypto_box_curve25519xchacha20poly1305_PUBLICKEYBYTES","crypto_box_curve25519xchacha20poly1305_SEALBYTES","crypto_box_curve25519xchacha20poly1305_SECRETKEYBYTES","crypto_box_curve25519xchacha20poly1305_SEEDBYTES","crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES","crypto_box_curve25519xsalsa20poly1305_MACBYTES","crypto_box_curve25519xsalsa20poly1305_MESSAGEBYTES_MAX","crypto_box_curve25519xsalsa20poly1305_NONCEBYTES","crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES","crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES","crypto_box_curve25519xsalsa20poly1305_SEEDBYTES","crypto_core_ed25519_BYTES","crypto_core_ed25519_HASHBYTES","crypto_core_ed25519_NONREDUCEDSCALARBYTES","crypto_core_ed25519_SCALARBYTES","crypto_core_ed25519_UNIFORMBYTES","crypto_core_hchacha20_CONSTBYTES","crypto_core_hchacha20_INPUTBYTES","crypto_core_hchacha20_KEYBYTES","crypto_core_hchacha20_OUTPUTBYTES","crypto_core_hsalsa20_CONSTBYTES","crypto_core_hsalsa20_INPUTBYTES","crypto_core_hsalsa20_KEYBYTES","crypto_core_hsalsa20_OUTPUTBYTES","crypto_core_ristretto255_BYTES","crypto_core_ristretto255_HASHBYTES","crypto_core_ristretto255_NONREDUCEDSCALARBYTES","crypto_core_ristretto255_SCALARBYTES","crypto_core_salsa2012_CONSTBYTES","crypto_core_salsa2012_INPUTBYTES","crypto_core_salsa2012_KEYBYTES","crypto_core_salsa2012_OUTPUTBYTES","crypto_core_salsa20_CONSTBYTES","crypto_core_salsa20_INPUTBYTES","crypto_core_salsa20_KEYBYTES","crypto_core_salsa20_OUTPUTBYTES","crypto_generichash_BYTES","crypto_generichash_BYTES_MAX","crypto_generichash_BYTES_MIN","crypto_generichash_KEYBYTES","crypto_generichash_KEYBYTES_MAX","crypto_generichash_KEYBYTES_MIN","crypto_generichash_blake2b_BYTES","crypto_generichash_blake2b_BYTES_MAX","crypto_generichash_blake2b_BYTES_MIN","crypto_generichash_blake2b_KEYBYTES","crypto_generichash_blake2b_KEYBYTES_MAX","crypto_generichash_blake2b_KEYBYTES_MIN","crypto_generichash_blake2b_PERSONALBYTES","crypto_generichash_blake2b_SALTBYTES","crypto_hash_BYTES","crypto_hash_sha256_BYTES","crypto_hash_sha512_BYTES","crypto_kdf_BYTES_MAX","crypto_kdf_BYTES_MIN","crypto_kdf_CONTEXTBYTES","crypto_kdf_KEYBYTES","crypto_kdf_blake2b_BYTES_MAX","crypto_kdf_blake2b_BYTES_MIN","crypto_kdf_blake2b_CONTEXTBYTES","crypto_kdf_blake2b_KEYBYTES","crypto_kx_PUBLICKEYBYTES","crypto_kx_SECRETKEYBYTES","crypto_kx_SEEDBYTES","crypto_kx_SESSIONKEYBYTES","crypto_onetimeauth_BYTES","crypto_onetimeauth_KEYBYTES","crypto_onetimeauth_poly1305_BYTES","crypto_onetimeauth_poly1305_KEYBYTES","crypto_pwhash_ALG_ARGON2I13","crypto_pwhash_ALG_ARGON2ID13","crypto_pwhash_ALG_DEFAULT","crypto_pwhash_BYTES_MAX","crypto_pwhash_BYTES_MIN","crypto_pwhash_MEMLIMIT_INTERACTIVE","crypto_pwhash_MEMLIMIT_MAX","crypto_pwhash_MEMLIMIT_MIN","crypto_pwhash_MEMLIMIT_MODERATE","crypto_pwhash_MEMLIMIT_SENSITIVE","crypto_pwhash_OPSLIMIT_INTERACTIVE","crypto_pwhash_OPSLIMIT_MAX","crypto_pwhash_OPSLIMIT_MIN","crypto_pwhash_OPSLIMIT_MODERATE","crypto_pwhash_OPSLIMIT_SENSITIVE","crypto_pwhash_PASSWD_MAX","crypto_pwhash_PASSWD_MIN","crypto_pwhash_SALTBYTES","crypto_pwhash_STRBYTES","crypto_pwhash_argon2i_BYTES_MAX","crypto_pwhash_argon2i_BYTES_MIN","crypto_pwhash_argon2i_SALTBYTES","crypto_pwhash_argon2i_STRBYTES","crypto_pwhash_argon2id_BYTES_MAX","crypto_pwhash_argon2id_BYTES_MIN","crypto_pwhash_argon2id_SALTBYTES","crypto_pwhash_argon2id_STRBYTES","crypto_pwhash_scryptsalsa208sha256_BYTES_MAX","crypto_pwhash_scryptsalsa208sha256_BYTES_MIN","crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE","crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MAX","crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MIN","crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE","crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE","crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MAX","crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MIN","crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE","crypto_pwhash_scryptsalsa208sha256_SALTBYTES","crypto_pwhash_scryptsalsa208sha256_STRBYTES","crypto_scalarmult_BYTES","crypto_scalarmult_SCALARBYTES","crypto_scalarmult_curve25519_BYTES","crypto_scalarmult_curve25519_SCALARBYTES","crypto_scalarmult_ed25519_BYTES","crypto_scalarmult_ed25519_SCALARBYTES","crypto_scalarmult_ristretto255_BYTES","crypto_scalarmult_ristretto255_SCALARBYTES","crypto_secretbox_KEYBYTES","crypto_secretbox_MACBYTES","crypto_secretbox_MESSAGEBYTES_MAX","crypto_secretbox_NONCEBYTES","crypto_secretbox_xchacha20poly1305_KEYBYTES","crypto_secretbox_xchacha20poly1305_MACBYTES","crypto_secretbox_xchacha20poly1305_MESSAGEBYTES_MAX","crypto_secretbox_xchacha20poly1305_NONCEBYTES","crypto_secretbox_xsalsa20poly1305_KEYBYTES","crypto_secretbox_xsalsa20poly1305_MACBYTES","crypto_secretbox_xsalsa20poly1305_MESSAGEBYTES_MAX","crypto_secretbox_xsalsa20poly1305_NONCEBYTES","crypto_secretstream_xchacha20poly1305_ABYTES","crypto_secretstream_xchacha20poly1305_HEADERBYTES","crypto_secretstream_xchacha20poly1305_KEYBYTES","crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX","crypto_secretstream_xchacha20poly1305_TAG_FINAL","crypto_secretstream_xchacha20poly1305_TAG_MESSAGE","crypto_secretstream_xchacha20poly1305_TAG_PUSH","crypto_secretstream_xchacha20poly1305_TAG_REKEY","crypto_shorthash_BYTES","crypto_shorthash_KEYBYTES","crypto_shorthash_siphash24_BYTES","crypto_shorthash_siphash24_KEYBYTES","crypto_shorthash_siphashx24_BYTES","crypto_shorthash_siphashx24_KEYBYTES","crypto_sign_BYTES","crypto_sign_MESSAGEBYTES_MAX","crypto_sign_PUBLICKEYBYTES","crypto_sign_SECRETKEYBYTES","crypto_sign_SEEDBYTES","crypto_sign_ed25519_BYTES","crypto_sign_ed25519_MESSAGEBYTES_MAX","crypto_sign_ed25519_PUBLICKEYBYTES","crypto_sign_ed25519_SECRETKEYBYTES","crypto_sign_ed25519_SEEDBYTES","crypto_stream_KEYBYTES","crypto_stream_MESSAGEBYTES_MAX","crypto_stream_NONCEBYTES","crypto_stream_chacha20_IETF_KEYBYTES","crypto_stream_chacha20_IETF_MESSAGEBYTES_MAX","crypto_stream_chacha20_IETF_NONCEBYTES","crypto_stream_chacha20_KEYBYTES","crypto_stream_chacha20_MESSAGEBYTES_MAX","crypto_stream_chacha20_NONCEBYTES","crypto_stream_chacha20_ietf_KEYBYTES","crypto_stream_chacha20_ietf_MESSAGEBYTES_MAX","crypto_stream_chacha20_ietf_NONCEBYTES","crypto_stream_salsa2012_KEYBYTES","crypto_stream_salsa2012_MESSAGEBYTES_MAX","crypto_stream_salsa2012_NONCEBYTES","crypto_stream_salsa208_KEYBYTES","crypto_stream_salsa208_MESSAGEBYTES_MAX","crypto_stream_salsa208_NONCEBYTES","crypto_stream_salsa20_KEYBYTES","crypto_stream_salsa20_MESSAGEBYTES_MAX","crypto_stream_salsa20_NONCEBYTES","crypto_stream_xchacha20_KEYBYTES","crypto_stream_xchacha20_MESSAGEBYTES_MAX","crypto_stream_xchacha20_NONCEBYTES","crypto_stream_xsalsa20_KEYBYTES","crypto_stream_xsalsa20_MESSAGEBYTES_MAX","crypto_stream_xsalsa20_NONCEBYTES","crypto_verify_16_BYTES","crypto_verify_32_BYTES","crypto_verify_64_BYTES"];for(_=0;_<s.length;_++)"function"==typeof(c=t["_"+s[_].toLowerCase()])&&(e[s[_]]=c());var n=["SODIUM_VERSION_STRING","crypto_pwhash_STRPREFIX","crypto_pwhash_scryptsalsa208sha256_STRPREFIX"];for(_=0;_<n.length;_++){var c;"function"==typeof(c=t["_"+n[_].toLowerCase()])&&(e[n[_]]=t.UTF8ToString(c()));}}t=r;try{a();var _=new Uint8Array([98,97,108,108,115]),s=e.randombytes_buf(e.crypto_secretbox_NONCEBYTES),n=e.randombytes_buf(e.crypto_secretbox_KEYBYTES),c=e.crypto_secretbox_easy(_,s,n),o=e.crypto_secretbox_open_easy(c,s,n);if(e.memcmp(_,o))return}catch(e){if(null==t.useBackupModule)throw new Error("Both wasm and asm failed to load"+e)}t.useBackupModule(),a();}));function s(e){if("function"==typeof TextEncoder)return (new TextEncoder).encode(e);e=unescape(encodeURIComponent(e));for(var r=new Uint8Array(e.length),t=0,a=e.length;t<a;t++)r[t]=e.charCodeAt(t);return r}function n(e){if("function"==typeof TextDecoder)return new TextDecoder("utf-8",{fatal:!0}).decode(e);var r=8192,t=Math.ceil(e.length/r);if(t<=1)try{return decodeURIComponent(escape(String.fromCharCode.apply(null,e)))}catch(e){throw new TypeError("The encoded data was not valid.")}for(var a="",_=0,s=0;s<t;s++){var c=Array.prototype.slice.call(e,s*r+_,(s+1)*r+_);if(0!=c.length){var o,h=c.length,p=0;do{var y=c[--h];y>=240?(p=4,o=!0):y>=224?(p=3,o=!0):y>=192?(p=2,o=!0):y<128&&(p=1,o=!0);}while(!o);for(var i=p-(c.length-h),l=0;l<i;l++)_--,c.pop();a+=n(c);}}return a}function c(e){e=E(null,e,"input");for(var r,t,a,_="",s=0;s<e.length;s++)a=87+(t=15&e[s])+(t-10>>8&-39)<<8|87+(r=e[s]>>>4)+(r-10>>8&-39),_+=String.fromCharCode(255&a)+String.fromCharCode(a>>>8);return _}var o={ORIGINAL:1,ORIGINAL_NO_PADDING:3,URLSAFE:5,URLSAFE_NO_PADDING:7};function h(e){if(null==e)return o.URLSAFE_NO_PADDING;if(e!==o.ORIGINAL&&e!==o.ORIGINAL_NO_PADDING&&e!==o.URLSAFE&&e!=o.URLSAFE_NO_PADDING)throw new Error("unsupported base64 variant");return e}function p(e,r){r=h(r),e=E(_,e,"input");var a,_=[],s=0|Math.floor(e.length/3),c=e.length-3*s,o=4*s+(0!==c?0==(2&r)?4:2+(c>>>1):0),p=new u(o+1),y=d(e);return _.push(y),_.push(p.address),0===t._sodium_bin2base64(p.address,p.length,y,e.length,r)&&b(_,"conversion failed"),p.length=o,a=n(p.to_Uint8Array()),g(_),a}function y(e,r){var t=r||a;if(!i(t))throw new Error(t+" output format is not available");if(e instanceof u){if("uint8array"===t)return e.to_Uint8Array();if("text"===t)return n(e.to_Uint8Array());if("hex"===t)return c(e.to_Uint8Array());if("base64"===t)return p(e.to_Uint8Array(),o.URLSAFE_NO_PADDING);throw new Error('What is output format "'+t+'"?')}if("object"==typeof e){for(var _=Object.keys(e),s={},h=0;h<_.length;h++)s[_[h]]=y(e[_[h]],t);return s}if("string"==typeof e)return e;throw new TypeError("Cannot format output")}function i(e){for(var r=["uint8array","text","hex","base64"],t=0;t<r.length;t++)if(r[t]===e)return !0;return !1}function l(e){if(e){if("string"!=typeof e)throw new TypeError("When defined, the output format must be a string");if(!i(e))throw new Error(e+" is not a supported output format")}}function u(e){this.length=e,this.address=v(e);}function d(e){var r=v(e.length);return t.HEAPU8.set(e,r),r}function v(e){var r=t._malloc(e);if(0===r)throw {message:"_malloc() failed",length:e};return r}function g(e){if(e)for(var r=0;r<e.length;r++)a=e[r],t._free(a);var a;}function b(e,r){throw g(e),new Error(r)}function f(e,r){throw g(e),new TypeError(r)}function m(e,r,t){null==r&&f(e,t+" cannot be null or undefined");}function E(e,r,t){return m(e,r,t),r instanceof Uint8Array?r:"string"==typeof r?s(r):void f(e,"unsupported input type for "+t)}function x(e,r,a,_,s,n){var c=[];l(n);var o=null;null!=e&&(o=d(e=E(c,e,"secret_nonce")),e.length,c.push(o)),r=E(c,r,"ciphertext");var h,p=t._crypto_aead_chacha20poly1305_abytes(),i=r.length;i<p&&f(c,"ciphertext is too short"),h=d(r),c.push(h);var v=null,m=0;null!=a&&(v=d(a=E(c,a,"additional_data")),m=a.length,c.push(v)),_=E(c,_,"public_nonce");var x,k=0|t._crypto_aead_chacha20poly1305_npubbytes();_.length!==k&&f(c,"invalid public_nonce length"),x=d(_),c.push(x),s=E(c,s,"key");var S,T=0|t._crypto_aead_chacha20poly1305_keybytes();s.length!==T&&f(c,"invalid key length"),S=d(s),c.push(S);var w=new u(i-t._crypto_aead_chacha20poly1305_abytes()|0),Y=w.address;if(c.push(Y),0===t._crypto_aead_chacha20poly1305_decrypt(Y,null,o,h,i,0,v,m,0,x,S)){var B=y(w,n);return g(c),B}b(c,"ciphertext cannot be decrypted using that key");}function k(e,r,a,_,s,n,c){var o=[];l(c);var h=null;null!=e&&(h=d(e=E(o,e,"secret_nonce")),e.length,o.push(h));var p=d(r=E(o,r,"ciphertext")),i=r.length;o.push(p),a=E(o,a,"mac");var v,m=0|t._crypto_box_macbytes();a.length!==m&&f(o,"invalid mac length"),v=d(a),o.push(v);var x=null,k=0;null!=_&&(x=d(_=E(o,_,"additional_data")),k=_.length,o.push(x)),s=E(o,s,"public_nonce");var S,T=0|t._crypto_aead_chacha20poly1305_npubbytes();s.length!==T&&f(o,"invalid public_nonce length"),S=d(s),o.push(S),n=E(o,n,"key");var w,Y=0|t._crypto_aead_chacha20poly1305_keybytes();n.length!==Y&&f(o,"invalid key length"),w=d(n),o.push(w);var B=new u(0|i),A=B.address;if(o.push(A),0===t._crypto_aead_chacha20poly1305_decrypt_detached(A,h,p,i,0,v,x,k,0,S,w)){var K=y(B,c);return g(o),K}b(o,"ciphertext cannot be decrypted using that key");}function S(e,r,a,_,s,n){var c=[];l(n);var o=d(e=E(c,e,"message")),h=e.length;c.push(o);var p=null,i=0;null!=r&&(p=d(r=E(c,r,"additional_data")),i=r.length,c.push(p));var v=null;null!=a&&(v=d(a=E(c,a,"secret_nonce")),a.length,c.push(v)),_=E(c,_,"public_nonce");var m,x=0|t._crypto_aead_chacha20poly1305_npubbytes();_.length!==x&&f(c,"invalid public_nonce length"),m=d(_),c.push(m),s=E(c,s,"key");var k,S=0|t._crypto_aead_chacha20poly1305_keybytes();s.length!==S&&f(c,"invalid key length"),k=d(s),c.push(k);var T=new u(h+t._crypto_aead_chacha20poly1305_abytes()|0),w=T.address;if(c.push(w),0===t._crypto_aead_chacha20poly1305_encrypt(w,null,o,h,0,p,i,0,v,m,k)){var Y=y(T,n);return g(c),Y}b(c,"invalid usage");}function T(e,r,a,_,s,n){var c=[];l(n);var o=d(e=E(c,e,"message")),h=e.length;c.push(o);var p=null,i=0;null!=r&&(p=d(r=E(c,r,"additional_data")),i=r.length,c.push(p));var v=null;null!=a&&(v=d(a=E(c,a,"secret_nonce")),a.length,c.push(v)),_=E(c,_,"public_nonce");var m,x=0|t._crypto_aead_chacha20poly1305_npubbytes();_.length!==x&&f(c,"invalid public_nonce length"),m=d(_),c.push(m),s=E(c,s,"key");var k,S=0|t._crypto_aead_chacha20poly1305_keybytes();s.length!==S&&f(c,"invalid key length"),k=d(s),c.push(k);var T=new u(0|h),w=T.address;c.push(w);var Y=new u(0|t._crypto_aead_chacha20poly1305_abytes()),B=Y.address;if(c.push(B),0===t._crypto_aead_chacha20poly1305_encrypt_detached(w,B,null,o,h,0,p,i,0,v,m,k)){var A=y({ciphertext:T,mac:Y},n);return g(c),A}b(c,"invalid usage");}function w(e,r,a,_,s,n){var c=[];l(n);var o=null;null!=e&&(o=d(e=E(c,e,"secret_nonce")),e.length,c.push(o)),r=E(c,r,"ciphertext");var h,p=t._crypto_aead_chacha20poly1305_ietf_abytes(),i=r.length;i<p&&f(c,"ciphertext is too short"),h=d(r),c.push(h);var v=null,m=0;null!=a&&(v=d(a=E(c,a,"additional_data")),m=a.length,c.push(v)),_=E(c,_,"public_nonce");var x,k=0|t._crypto_aead_chacha20poly1305_ietf_npubbytes();_.length!==k&&f(c,"invalid public_nonce length"),x=d(_),c.push(x),s=E(c,s,"key");var S,T=0|t._crypto_aead_chacha20poly1305_ietf_keybytes();s.length!==T&&f(c,"invalid key length"),S=d(s),c.push(S);var w=new u(i-t._crypto_aead_chacha20poly1305_ietf_abytes()|0),Y=w.address;if(c.push(Y),0===t._crypto_aead_chacha20poly1305_ietf_decrypt(Y,null,o,h,i,0,v,m,0,x,S)){var B=y(w,n);return g(c),B}b(c,"ciphertext cannot be decrypted using that key");}function Y(e,r,a,_,s,n,c){var o=[];l(c);var h=null;null!=e&&(h=d(e=E(o,e,"secret_nonce")),e.length,o.push(h));var p=d(r=E(o,r,"ciphertext")),i=r.length;o.push(p),a=E(o,a,"mac");var v,m=0|t._crypto_box_macbytes();a.length!==m&&f(o,"invalid mac length"),v=d(a),o.push(v);var x=null,k=0;null!=_&&(x=d(_=E(o,_,"additional_data")),k=_.length,o.push(x)),s=E(o,s,"public_nonce");var S,T=0|t._crypto_aead_chacha20poly1305_ietf_npubbytes();s.length!==T&&f(o,"invalid public_nonce length"),S=d(s),o.push(S),n=E(o,n,"key");var w,Y=0|t._crypto_aead_chacha20poly1305_ietf_keybytes();n.length!==Y&&f(o,"invalid key length"),w=d(n),o.push(w);var B=new u(0|i),A=B.address;if(o.push(A),0===t._crypto_aead_chacha20poly1305_ietf_decrypt_detached(A,h,p,i,0,v,x,k,0,S,w)){var K=y(B,c);return g(o),K}b(o,"ciphertext cannot be decrypted using that key");}function B(e,r,a,_,s,n){var c=[];l(n);var o=d(e=E(c,e,"message")),h=e.length;c.push(o);var p=null,i=0;null!=r&&(p=d(r=E(c,r,"additional_data")),i=r.length,c.push(p));var v=null;null!=a&&(v=d(a=E(c,a,"secret_nonce")),a.length,c.push(v)),_=E(c,_,"public_nonce");var m,x=0|t._crypto_aead_chacha20poly1305_ietf_npubbytes();_.length!==x&&f(c,"invalid public_nonce length"),m=d(_),c.push(m),s=E(c,s,"key");var k,S=0|t._crypto_aead_chacha20poly1305_ietf_keybytes();s.length!==S&&f(c,"invalid key length"),k=d(s),c.push(k);var T=new u(h+t._crypto_aead_chacha20poly1305_ietf_abytes()|0),w=T.address;if(c.push(w),0===t._crypto_aead_chacha20poly1305_ietf_encrypt(w,null,o,h,0,p,i,0,v,m,k)){var Y=y(T,n);return g(c),Y}b(c,"invalid usage");}function A(e,r,a,_,s,n){var c=[];l(n);var o=d(e=E(c,e,"message")),h=e.length;c.push(o);var p=null,i=0;null!=r&&(p=d(r=E(c,r,"additional_data")),i=r.length,c.push(p));var v=null;null!=a&&(v=d(a=E(c,a,"secret_nonce")),a.length,c.push(v)),_=E(c,_,"public_nonce");var m,x=0|t._crypto_aead_chacha20poly1305_ietf_npubbytes();_.length!==x&&f(c,"invalid public_nonce length"),m=d(_),c.push(m),s=E(c,s,"key");var k,S=0|t._crypto_aead_chacha20poly1305_ietf_keybytes();s.length!==S&&f(c,"invalid key length"),k=d(s),c.push(k);var T=new u(0|h),w=T.address;c.push(w);var Y=new u(0|t._crypto_aead_chacha20poly1305_ietf_abytes()),B=Y.address;if(c.push(B),0===t._crypto_aead_chacha20poly1305_ietf_encrypt_detached(w,B,null,o,h,0,p,i,0,v,m,k)){var A=y({ciphertext:T,mac:Y},n);return g(c),A}b(c,"invalid usage");}function K(e){var r=[];l(e);var a=new u(0|t._crypto_aead_chacha20poly1305_ietf_keybytes()),_=a.address;r.push(_),t._crypto_aead_chacha20poly1305_ietf_keygen(_);var s=y(a,e);return g(r),s}function M(e){var r=[];l(e);var a=new u(0|t._crypto_aead_chacha20poly1305_keybytes()),_=a.address;r.push(_),t._crypto_aead_chacha20poly1305_keygen(_);var s=y(a,e);return g(r),s}function I(e,r,a,_,s,n){var c=[];l(n);var o=null;null!=e&&(o=d(e=E(c,e,"secret_nonce")),e.length,c.push(o)),r=E(c,r,"ciphertext");var h,p=t._crypto_aead_xchacha20poly1305_ietf_abytes(),i=r.length;i<p&&f(c,"ciphertext is too short"),h=d(r),c.push(h);var v=null,m=0;null!=a&&(v=d(a=E(c,a,"additional_data")),m=a.length,c.push(v)),_=E(c,_,"public_nonce");var x,k=0|t._crypto_aead_xchacha20poly1305_ietf_npubbytes();_.length!==k&&f(c,"invalid public_nonce length"),x=d(_),c.push(x),s=E(c,s,"key");var S,T=0|t._crypto_aead_xchacha20poly1305_ietf_keybytes();s.length!==T&&f(c,"invalid key length"),S=d(s),c.push(S);var w=new u(i-t._crypto_aead_xchacha20poly1305_ietf_abytes()|0),Y=w.address;if(c.push(Y),0===t._crypto_aead_xchacha20poly1305_ietf_decrypt(Y,null,o,h,i,0,v,m,0,x,S)){var B=y(w,n);return g(c),B}b(c,"ciphertext cannot be decrypted using that key");}function N(e,r,a,_,s,n,c){var o=[];l(c);var h=null;null!=e&&(h=d(e=E(o,e,"secret_nonce")),e.length,o.push(h));var p=d(r=E(o,r,"ciphertext")),i=r.length;o.push(p),a=E(o,a,"mac");var v,m=0|t._crypto_box_macbytes();a.length!==m&&f(o,"invalid mac length"),v=d(a),o.push(v);var x=null,k=0;null!=_&&(x=d(_=E(o,_,"additional_data")),k=_.length,o.push(x)),s=E(o,s,"public_nonce");var S,T=0|t._crypto_aead_xchacha20poly1305_ietf_npubbytes();s.length!==T&&f(o,"invalid public_nonce length"),S=d(s),o.push(S),n=E(o,n,"key");var w,Y=0|t._crypto_aead_xchacha20poly1305_ietf_keybytes();n.length!==Y&&f(o,"invalid key length"),w=d(n),o.push(w);var B=new u(0|i),A=B.address;if(o.push(A),0===t._crypto_aead_xchacha20poly1305_ietf_decrypt_detached(A,h,p,i,0,v,x,k,0,S,w)){var K=y(B,c);return g(o),K}b(o,"ciphertext cannot be decrypted using that key");}function L(e,r,a,_,s,n){var c=[];l(n);var o=d(e=E(c,e,"message")),h=e.length;c.push(o);var p=null,i=0;null!=r&&(p=d(r=E(c,r,"additional_data")),i=r.length,c.push(p));var v=null;null!=a&&(v=d(a=E(c,a,"secret_nonce")),a.length,c.push(v)),_=E(c,_,"public_nonce");var m,x=0|t._crypto_aead_xchacha20poly1305_ietf_npubbytes();_.length!==x&&f(c,"invalid public_nonce length"),m=d(_),c.push(m),s=E(c,s,"key");var k,S=0|t._crypto_aead_xchacha20poly1305_ietf_keybytes();s.length!==S&&f(c,"invalid key length"),k=d(s),c.push(k);var T=new u(h+t._crypto_aead_xchacha20poly1305_ietf_abytes()|0),w=T.address;if(c.push(w),0===t._crypto_aead_xchacha20poly1305_ietf_encrypt(w,null,o,h,0,p,i,0,v,m,k)){var Y=y(T,n);return g(c),Y}b(c,"invalid usage");}function U(e,r,a,_,s,n){var c=[];l(n);var o=d(e=E(c,e,"message")),h=e.length;c.push(o);var p=null,i=0;null!=r&&(p=d(r=E(c,r,"additional_data")),i=r.length,c.push(p));var v=null;null!=a&&(v=d(a=E(c,a,"secret_nonce")),a.length,c.push(v)),_=E(c,_,"public_nonce");var m,x=0|t._crypto_aead_xchacha20poly1305_ietf_npubbytes();_.length!==x&&f(c,"invalid public_nonce length"),m=d(_),c.push(m),s=E(c,s,"key");var k,S=0|t._crypto_aead_xchacha20poly1305_ietf_keybytes();s.length!==S&&f(c,"invalid key length"),k=d(s),c.push(k);var T=new u(0|h),w=T.address;c.push(w);var Y=new u(0|t._crypto_aead_xchacha20poly1305_ietf_abytes()),B=Y.address;if(c.push(B),0===t._crypto_aead_xchacha20poly1305_ietf_encrypt_detached(w,B,null,o,h,0,p,i,0,v,m,k)){var A=y({ciphertext:T,mac:Y},n);return g(c),A}b(c,"invalid usage");}function O(e){var r=[];l(e);var a=new u(0|t._crypto_aead_xchacha20poly1305_ietf_keybytes()),_=a.address;r.push(_),t._crypto_aead_xchacha20poly1305_ietf_keygen(_);var s=y(a,e);return g(r),s}function C(e,r,a){var _=[];l(a);var s=d(e=E(_,e,"message")),n=e.length;_.push(s),r=E(_,r,"key");var c,o=0|t._crypto_auth_keybytes();r.length!==o&&f(_,"invalid key length"),c=d(r),_.push(c);var h=new u(0|t._crypto_auth_bytes()),p=h.address;if(_.push(p),0==(0|t._crypto_auth(p,s,n,0,c))){var i=y(h,a);return g(_),i}b(_,"invalid usage");}function R(e,r,a){var _=[];l(a);var s=d(e=E(_,e,"message")),n=e.length;_.push(s),r=E(_,r,"key");var c,o=0|t._crypto_auth_hmacsha256_keybytes();r.length!==o&&f(_,"invalid key length"),c=d(r),_.push(c);var h=new u(0|t._crypto_auth_hmacsha256_bytes()),p=h.address;if(_.push(p),0==(0|t._crypto_auth_hmacsha256(p,s,n,0,c))){var i=y(h,a);return g(_),i}b(_,"invalid usage");}function P(e,r){var a=[];l(r),m(a,e,"state_address");var _=new u(0|t._crypto_auth_hmacsha256_bytes()),s=_.address;if(a.push(s),0==(0|t._crypto_auth_hmacsha256_final(e,s))){var n=(t._free(e),y(_,r));return g(a),n}b(a,"invalid usage");}function G(e,r){var a=[];l(r);var _=null,s=0;null!=e&&(_=d(e=E(a,e,"key")),s=e.length,a.push(_));var n=new u(208).address;if(0==(0|t._crypto_auth_hmacsha256_init(n,_,s))){var c=n;return g(a),c}b(a,"invalid usage");}function X(e){var r=[];l(e);var a=new u(0|t._crypto_auth_hmacsha256_keybytes()),_=a.address;r.push(_),t._crypto_auth_hmacsha256_keygen(_);var s=y(a,e);return g(r),s}function D(e,r,a){var _=[];l(a),m(_,e,"state_address");var s=d(r=E(_,r,"message_chunk")),n=r.length;_.push(s),0!=(0|t._crypto_auth_hmacsha256_update(e,s,n))&&b(_,"invalid usage"),g(_);}function F(e,r,a){var _=[];e=E(_,e,"tag");var s,n=0|t._crypto_auth_hmacsha256_bytes();e.length!==n&&f(_,"invalid tag length"),s=d(e),_.push(s);var c=d(r=E(_,r,"message")),o=r.length;_.push(c),a=E(_,a,"key");var h,p=0|t._crypto_auth_hmacsha256_keybytes();a.length!==p&&f(_,"invalid key length"),h=d(a),_.push(h);var y=0==(0|t._crypto_auth_hmacsha256_verify(s,c,o,0,h));return g(_),y}function V(e,r,a){var _=[];l(a);var s=d(e=E(_,e,"message")),n=e.length;_.push(s),r=E(_,r,"key");var c,o=0|t._crypto_auth_hmacsha512_keybytes();r.length!==o&&f(_,"invalid key length"),c=d(r),_.push(c);var h=new u(0|t._crypto_auth_hmacsha512_bytes()),p=h.address;if(_.push(p),0==(0|t._crypto_auth_hmacsha512(p,s,n,0,c))){var i=y(h,a);return g(_),i}b(_,"invalid usage");}function H(e,r){var a=[];l(r),m(a,e,"state_address");var _=new u(0|t._crypto_auth_hmacsha512_bytes()),s=_.address;if(a.push(s),0==(0|t._crypto_auth_hmacsha512_final(e,s))){var n=(t._free(e),y(_,r));return g(a),n}b(a,"invalid usage");}function q(e,r){var a=[];l(r);var _=null,s=0;null!=e&&(_=d(e=E(a,e,"key")),s=e.length,a.push(_));var n=new u(416).address;if(0==(0|t._crypto_auth_hmacsha512_init(n,_,s))){var c=n;return g(a),c}b(a,"invalid usage");}function j(e){var r=[];l(e);var a=new u(0|t._crypto_auth_hmacsha512_keybytes()),_=a.address;r.push(_),t._crypto_auth_hmacsha512_keygen(_);var s=y(a,e);return g(r),s}function z(e,r,a){var _=[];l(a),m(_,e,"state_address");var s=d(r=E(_,r,"message_chunk")),n=r.length;_.push(s),0!=(0|t._crypto_auth_hmacsha512_update(e,s,n))&&b(_,"invalid usage"),g(_);}function W(e,r,a){var _=[];e=E(_,e,"tag");var s,n=0|t._crypto_auth_hmacsha512_bytes();e.length!==n&&f(_,"invalid tag length"),s=d(e),_.push(s);var c=d(r=E(_,r,"message")),o=r.length;_.push(c),a=E(_,a,"key");var h,p=0|t._crypto_auth_hmacsha512_keybytes();a.length!==p&&f(_,"invalid key length"),h=d(a),_.push(h);var y=0==(0|t._crypto_auth_hmacsha512_verify(s,c,o,0,h));return g(_),y}function J(e){var r=[];l(e);var a=new u(0|t._crypto_auth_keybytes()),_=a.address;r.push(_),t._crypto_auth_keygen(_);var s=y(a,e);return g(r),s}function Q(e,r,a){var _=[];e=E(_,e,"tag");var s,n=0|t._crypto_auth_bytes();e.length!==n&&f(_,"invalid tag length"),s=d(e),_.push(s);var c=d(r=E(_,r,"message")),o=r.length;_.push(c),a=E(_,a,"key");var h,p=0|t._crypto_auth_keybytes();a.length!==p&&f(_,"invalid key length"),h=d(a),_.push(h);var y=0==(0|t._crypto_auth_verify(s,c,o,0,h));return g(_),y}function Z(e,r,a){var _=[];l(a),e=E(_,e,"publicKey");var s,n=0|t._crypto_box_publickeybytes();e.length!==n&&f(_,"invalid publicKey length"),s=d(e),_.push(s),r=E(_,r,"privateKey");var c,o=0|t._crypto_box_secretkeybytes();r.length!==o&&f(_,"invalid privateKey length"),c=d(r),_.push(c);var h=new u(0|t._crypto_box_beforenmbytes()),p=h.address;if(_.push(p),0==(0|t._crypto_box_beforenm(p,s,c))){var i=y(h,a);return g(_),i}b(_,"invalid usage");}function $(e){var r=[];l(e);var a=new u(0|t._crypto_box_curve25519xchacha20poly1305_publickeybytes()),_=a.address;r.push(_);var s=new u(0|t._crypto_box_curve25519xchacha20poly1305_secretkeybytes()),n=s.address;r.push(n),t._crypto_box_curve25519xchacha20poly1305_keypair(_,n);var c=y({publicKey:a,privateKey:s,keyType:"curve25519"},e);return g(r),c}function ee(e,r,a){var _=[];l(a);var s=d(e=E(_,e,"message")),n=e.length;_.push(s),r=E(_,r,"publicKey");var c,o=0|t._crypto_box_curve25519xchacha20poly1305_publickeybytes();r.length!==o&&f(_,"invalid publicKey length"),c=d(r),_.push(c);var h=new u(n+t._crypto_box_curve25519xchacha20poly1305_sealbytes()|0),p=h.address;_.push(p),t._crypto_box_curve25519xchacha20poly1305_seal(p,s,n,0,c);var i=y(h,a);return g(_),i}function re(e,r,a,_){var s=[];l(_),e=E(s,e,"ciphertext");var n,c=t._crypto_box_curve25519xchacha20poly1305_sealbytes(),o=e.length;o<c&&f(s,"ciphertext is too short"),n=d(e),s.push(n),r=E(s,r,"publicKey");var h,p=0|t._crypto_box_curve25519xchacha20poly1305_publickeybytes();r.length!==p&&f(s,"invalid publicKey length"),h=d(r),s.push(h),a=E(s,a,"secretKey");var i,v=0|t._crypto_box_curve25519xchacha20poly1305_secretkeybytes();a.length!==v&&f(s,"invalid secretKey length"),i=d(a),s.push(i);var b=new u(o-t._crypto_box_curve25519xchacha20poly1305_sealbytes()|0),m=b.address;s.push(m),t._crypto_box_curve25519xchacha20poly1305_seal_open(m,n,o,0,h,i);var x=y(b,_);return g(s),x}function te(e,r,a,_,s){var n=[];l(s);var c=d(e=E(n,e,"message")),o=e.length;n.push(c),r=E(n,r,"nonce");var h,p=0|t._crypto_box_noncebytes();r.length!==p&&f(n,"invalid nonce length"),h=d(r),n.push(h),a=E(n,a,"publicKey");var i,v=0|t._crypto_box_publickeybytes();a.length!==v&&f(n,"invalid publicKey length"),i=d(a),n.push(i),_=E(n,_,"privateKey");var m,x=0|t._crypto_box_secretkeybytes();_.length!==x&&f(n,"invalid privateKey length"),m=d(_),n.push(m);var k=new u(0|o),S=k.address;n.push(S);var T=new u(0|t._crypto_box_macbytes()),w=T.address;if(n.push(w),0==(0|t._crypto_box_detached(S,w,c,o,0,h,i,m))){var Y=y({ciphertext:k,mac:T},s);return g(n),Y}b(n,"invalid usage");}function ae(e,r,a,_,s){var n=[];l(s);var c=d(e=E(n,e,"message")),o=e.length;n.push(c),r=E(n,r,"nonce");var h,p=0|t._crypto_box_noncebytes();r.length!==p&&f(n,"invalid nonce length"),h=d(r),n.push(h),a=E(n,a,"publicKey");var i,v=0|t._crypto_box_publickeybytes();a.length!==v&&f(n,"invalid publicKey length"),i=d(a),n.push(i),_=E(n,_,"privateKey");var m,x=0|t._crypto_box_secretkeybytes();_.length!==x&&f(n,"invalid privateKey length"),m=d(_),n.push(m);var k=new u(o+t._crypto_box_macbytes()|0),S=k.address;if(n.push(S),0==(0|t._crypto_box_easy(S,c,o,0,h,i,m))){var T=y(k,s);return g(n),T}b(n,"invalid usage");}function _e(e,r,a,_){var s=[];l(_);var n=d(e=E(s,e,"message")),c=e.length;s.push(n),r=E(s,r,"nonce");var o,h=0|t._crypto_box_noncebytes();r.length!==h&&f(s,"invalid nonce length"),o=d(r),s.push(o),a=E(s,a,"sharedKey");var p,i=0|t._crypto_box_beforenmbytes();a.length!==i&&f(s,"invalid sharedKey length"),p=d(a),s.push(p);var v=new u(c+t._crypto_box_macbytes()|0),m=v.address;if(s.push(m),0==(0|t._crypto_box_easy_afternm(m,n,c,0,o,p))){var x=y(v,_);return g(s),x}b(s,"invalid usage");}function se(e){var r=[];l(e);var a=new u(0|t._crypto_box_publickeybytes()),_=a.address;r.push(_);var s=new u(0|t._crypto_box_secretkeybytes()),n=s.address;if(r.push(n),0==(0|t._crypto_box_keypair(_,n))){var c={publicKey:y(a,e),privateKey:y(s,e),keyType:"x25519"};return g(r),c}b(r,"internal error");}function ne(e,r,a,_,s,n){var c=[];l(n);var o=d(e=E(c,e,"ciphertext")),h=e.length;c.push(o),r=E(c,r,"mac");var p,i=0|t._crypto_box_macbytes();r.length!==i&&f(c,"invalid mac length"),p=d(r),c.push(p),a=E(c,a,"nonce");var v,m=0|t._crypto_box_noncebytes();a.length!==m&&f(c,"invalid nonce length"),v=d(a),c.push(v),_=E(c,_,"publicKey");var x,k=0|t._crypto_box_publickeybytes();_.length!==k&&f(c,"invalid publicKey length"),x=d(_),c.push(x),s=E(c,s,"privateKey");var S,T=0|t._crypto_box_secretkeybytes();s.length!==T&&f(c,"invalid privateKey length"),S=d(s),c.push(S);var w=new u(0|h),Y=w.address;if(c.push(Y),0==(0|t._crypto_box_open_detached(Y,o,p,h,0,v,x,S))){var B=y(w,n);return g(c),B}b(c,"incorrect key pair for the given ciphertext");}function ce(e,r,a,_,s){var n=[];l(s),e=E(n,e,"ciphertext");var c,o=t._crypto_box_macbytes(),h=e.length;h<o&&f(n,"ciphertext is too short"),c=d(e),n.push(c),r=E(n,r,"nonce");var p,i=0|t._crypto_box_noncebytes();r.length!==i&&f(n,"invalid nonce length"),p=d(r),n.push(p),a=E(n,a,"publicKey");var v,m=0|t._crypto_box_publickeybytes();a.length!==m&&f(n,"invalid publicKey length"),v=d(a),n.push(v),_=E(n,_,"privateKey");var x,k=0|t._crypto_box_secretkeybytes();_.length!==k&&f(n,"invalid privateKey length"),x=d(_),n.push(x);var S=new u(h-t._crypto_box_macbytes()|0),T=S.address;if(n.push(T),0==(0|t._crypto_box_open_easy(T,c,h,0,p,v,x))){var w=y(S,s);return g(n),w}b(n,"incorrect key pair for the given ciphertext");}function oe(e,r,a,_){var s=[];l(_);var n=d(e=E(s,e,"ciphertext")),c=e.length;s.push(n),r=E(s,r,"nonce");var o,h=0|t._crypto_box_noncebytes();r.length!==h&&f(s,"invalid nonce length"),o=d(r),s.push(o),a=E(s,a,"sharedKey");var p,i=0|t._crypto_box_beforenmbytes();a.length!==i&&f(s,"invalid sharedKey length"),p=d(a),s.push(p);var v=new u(c-t._crypto_box_macbytes()|0),m=v.address;if(s.push(m),0==(0|t._crypto_box_open_easy_afternm(m,n,c,0,o,p))){var x=y(v,_);return g(s),x}b(s,"incorrect secret key for the given ciphertext");}function he(e,r,a){var _=[];l(a);var s=d(e=E(_,e,"message")),n=e.length;_.push(s),r=E(_,r,"publicKey");var c,o=0|t._crypto_box_publickeybytes();r.length!==o&&f(_,"invalid publicKey length"),c=d(r),_.push(c);var h=new u(n+t._crypto_box_sealbytes()|0),p=h.address;if(_.push(p),0==(0|t._crypto_box_seal(p,s,n,0,c))){var i=y(h,a);return g(_),i}b(_,"invalid usage");}function pe(e,r,a,_){var s=[];l(_),e=E(s,e,"ciphertext");var n,c=t._crypto_box_sealbytes(),o=e.length;o<c&&f(s,"ciphertext is too short"),n=d(e),s.push(n),r=E(s,r,"publicKey");var h,p=0|t._crypto_box_publickeybytes();r.length!==p&&f(s,"invalid publicKey length"),h=d(r),s.push(h),a=E(s,a,"privateKey");var i,v=0|t._crypto_box_secretkeybytes();a.length!==v&&f(s,"invalid privateKey length"),i=d(a),s.push(i);var m=new u(o-t._crypto_box_sealbytes()|0),x=m.address;if(s.push(x),0==(0|t._crypto_box_seal_open(x,n,o,0,h,i))){var k=y(m,_);return g(s),k}b(s,"incorrect key pair for the given ciphertext");}function ye(e,r){var a=[];l(r),e=E(a,e,"seed");var _,s=0|t._crypto_box_seedbytes();e.length!==s&&f(a,"invalid seed length"),_=d(e),a.push(_);var n=new u(0|t._crypto_box_publickeybytes()),c=n.address;a.push(c);var o=new u(0|t._crypto_box_secretkeybytes()),h=o.address;if(a.push(h),0==(0|t._crypto_box_seed_keypair(c,h,_))){var p={publicKey:y(n,r),privateKey:y(o,r),keyType:"x25519"};return g(a),p}b(a,"invalid usage");}function ie(e,r,a){var _=[];l(a),e=E(_,e,"p");var s,n=0|t._crypto_core_ed25519_bytes();e.length!==n&&f(_,"invalid p length"),s=d(e),_.push(s),r=E(_,r,"q");var c,o=0|t._crypto_core_ed25519_bytes();r.length!==o&&f(_,"invalid q length"),c=d(r),_.push(c);var h=new u(0|t._crypto_core_ed25519_bytes()),p=h.address;if(_.push(p),0==(0|t._crypto_core_ed25519_add(p,s,c))){var i=y(h,a);return g(_),i}b(_,"input is an invalid element");}function le(e,r){var a=[];l(r);var _=d(e=E(a,e,"r"));e.length,a.push(_);var s=new u(0|t._crypto_core_ed25519_bytes()),n=s.address;if(a.push(n),0==(0|t._crypto_core_ed25519_from_hash(n,_))){var c=y(s,r);return g(a),c}b(a,"invalid usage");}function ue(e,r){var a=[];l(r);var _=d(e=E(a,e,"r"));e.length,a.push(_);var s=new u(0|t._crypto_core_ed25519_bytes()),n=s.address;if(a.push(n),0==(0|t._crypto_core_ed25519_from_uniform(n,_))){var c=y(s,r);return g(a),c}b(a,"invalid usage");}function de(e,r){var a=[];l(r),e=E(a,e,"repr");var _,s=0|t._crypto_core_ed25519_bytes();e.length!==s&&f(a,"invalid repr length"),_=d(e),a.push(_);var n=1==(0|t._crypto_core_ed25519_is_valid_point(_));return g(a),n}function ve(e){var r=[];l(e);var a=new u(0|t._crypto_core_ed25519_bytes()),_=a.address;r.push(_),t._crypto_core_ed25519_random(_);var s=y(a,e);return g(r),s}function ge(e,r,a){var _=[];l(a),e=E(_,e,"x");var s,n=0|t._crypto_core_ed25519_scalarbytes();e.length!==n&&f(_,"invalid x length"),s=d(e),_.push(s),r=E(_,r,"y");var c,o=0|t._crypto_core_ed25519_scalarbytes();r.length!==o&&f(_,"invalid y length"),c=d(r),_.push(c);var h=new u(0|t._crypto_core_ed25519_scalarbytes()),p=h.address;_.push(p),t._crypto_core_ed25519_scalar_add(p,s,c);var i=y(h,a);return g(_),i}function be(e,r){var a=[];l(r),e=E(a,e,"s");var _,s=0|t._crypto_core_ed25519_scalarbytes();e.length!==s&&f(a,"invalid s length"),_=d(e),a.push(_);var n=new u(0|t._crypto_core_ed25519_scalarbytes()),c=n.address;a.push(c),t._crypto_core_ed25519_scalar_complement(c,_);var o=y(n,r);return g(a),o}function fe(e,r){var a=[];l(r),e=E(a,e,"s");var _,s=0|t._crypto_core_ed25519_scalarbytes();e.length!==s&&f(a,"invalid s length"),_=d(e),a.push(_);var n=new u(0|t._crypto_core_ed25519_scalarbytes()),c=n.address;if(a.push(c),0==(0|t._crypto_core_ed25519_scalar_invert(c,_))){var o=y(n,r);return g(a),o}b(a,"invalid reciprocate");}function me(e,r,a){var _=[];l(a),e=E(_,e,"x");var s,n=0|t._crypto_core_ed25519_scalarbytes();e.length!==n&&f(_,"invalid x length"),s=d(e),_.push(s),r=E(_,r,"y");var c,o=0|t._crypto_core_ed25519_scalarbytes();r.length!==o&&f(_,"invalid y length"),c=d(r),_.push(c);var h=new u(0|t._crypto_core_ed25519_scalarbytes()),p=h.address;_.push(p),t._crypto_core_ed25519_scalar_mul(p,s,c);var i=y(h,a);return g(_),i}function Ee(e,r){var a=[];l(r),e=E(a,e,"s");var _,s=0|t._crypto_core_ed25519_scalarbytes();e.length!==s&&f(a,"invalid s length"),_=d(e),a.push(_);var n=new u(0|t._crypto_core_ed25519_scalarbytes()),c=n.address;a.push(c),t._crypto_core_ed25519_scalar_negate(c,_);var o=y(n,r);return g(a),o}function xe(e){var r=[];l(e);var a=new u(0|t._crypto_core_ed25519_scalarbytes()),_=a.address;r.push(_),t._crypto_core_ed25519_scalar_random(_);var s=y(a,e);return g(r),s}function ke(e,r){var a=[];l(r),e=E(a,e,"sample");var _,s=0|t._crypto_core_ed25519_nonreducedscalarbytes();e.length!==s&&f(a,"invalid sample length"),_=d(e),a.push(_);var n=new u(0|t._crypto_core_ed25519_scalarbytes()),c=n.address;a.push(c),t._crypto_core_ed25519_scalar_reduce(c,_);var o=y(n,r);return g(a),o}function Se(e,r,a){var _=[];l(a),e=E(_,e,"x");var s,n=0|t._crypto_core_ed25519_scalarbytes();e.length!==n&&f(_,"invalid x length"),s=d(e),_.push(s),r=E(_,r,"y");var c,o=0|t._crypto_core_ed25519_scalarbytes();r.length!==o&&f(_,"invalid y length"),c=d(r),_.push(c);var h=new u(0|t._crypto_core_ed25519_scalarbytes()),p=h.address;_.push(p),t._crypto_core_ed25519_scalar_sub(p,s,c);var i=y(h,a);return g(_),i}function Te(e,r,a){var _=[];l(a),e=E(_,e,"p");var s,n=0|t._crypto_core_ed25519_bytes();e.length!==n&&f(_,"invalid p length"),s=d(e),_.push(s),r=E(_,r,"q");var c,o=0|t._crypto_core_ed25519_bytes();r.length!==o&&f(_,"invalid q length"),c=d(r),_.push(c);var h=new u(0|t._crypto_core_ed25519_bytes()),p=h.address;if(_.push(p),0==(0|t._crypto_core_ed25519_sub(p,s,c))){var i=y(h,a);return g(_),i}b(_,"input is an invalid element");}function we(e,r,a,_){var s=[];l(_),e=E(s,e,"input");var n,c=0|t._crypto_core_hchacha20_inputbytes();e.length!==c&&f(s,"invalid input length"),n=d(e),s.push(n),r=E(s,r,"privateKey");var o,h=0|t._crypto_core_hchacha20_keybytes();r.length!==h&&f(s,"invalid privateKey length"),o=d(r),s.push(o);var p=null;null!=a&&(p=d(a=E(s,a,"constant")),a.length,s.push(p));var i=new u(0|t._crypto_core_hchacha20_outputbytes()),v=i.address;if(s.push(v),0==(0|t._crypto_core_hchacha20(v,n,o,p))){var m=y(i,_);return g(s),m}b(s,"invalid usage");}function Ye(e,r,a,_){var s=[];l(_),e=E(s,e,"input");var n,c=0|t._crypto_core_hsalsa20_inputbytes();e.length!==c&&f(s,"invalid input length"),n=d(e),s.push(n),r=E(s,r,"privateKey");var o,h=0|t._crypto_core_hsalsa20_keybytes();r.length!==h&&f(s,"invalid privateKey length"),o=d(r),s.push(o);var p=null;null!=a&&(p=d(a=E(s,a,"constant")),a.length,s.push(p));var i=new u(0|t._crypto_core_hsalsa20_outputbytes()),v=i.address;if(s.push(v),0==(0|t._crypto_core_hsalsa20(v,n,o,p))){var m=y(i,_);return g(s),m}b(s,"invalid usage");}function Be(e,r,a){var _=[];l(a),e=E(_,e,"p");var s,n=0|t._crypto_core_ristretto255_bytes();e.length!==n&&f(_,"invalid p length"),s=d(e),_.push(s),r=E(_,r,"q");var c,o=0|t._crypto_core_ristretto255_bytes();r.length!==o&&f(_,"invalid q length"),c=d(r),_.push(c);var h=new u(0|t._crypto_core_ristretto255_bytes()),p=h.address;if(_.push(p),0==(0|t._crypto_core_ristretto255_add(p,s,c))){var i=y(h,a);return g(_),i}b(_,"input is an invalid element");}function Ae(e,r){var a=[];l(r);var _=d(e=E(a,e,"r"));e.length,a.push(_);var s=new u(0|t._crypto_core_ristretto255_bytes()),n=s.address;if(a.push(n),0==(0|t._crypto_core_ristretto255_from_hash(n,_))){var c=y(s,r);return g(a),c}b(a,"invalid usage");}function Ke(e,r){var a=[];l(r),e=E(a,e,"repr");var _,s=0|t._crypto_core_ristretto255_bytes();e.length!==s&&f(a,"invalid repr length"),_=d(e),a.push(_);var n=1==(0|t._crypto_core_ristretto255_is_valid_point(_));return g(a),n}function Me(e){var r=[];l(e);var a=new u(0|t._crypto_core_ristretto255_bytes()),_=a.address;r.push(_),t._crypto_core_ristretto255_random(_);var s=y(a,e);return g(r),s}function Ie(e,r,a){var _=[];l(a),e=E(_,e,"x");var s,n=0|t._crypto_core_ristretto255_scalarbytes();e.length!==n&&f(_,"invalid x length"),s=d(e),_.push(s),r=E(_,r,"y");var c,o=0|t._crypto_core_ristretto255_scalarbytes();r.length!==o&&f(_,"invalid y length"),c=d(r),_.push(c);var h=new u(0|t._crypto_core_ristretto255_scalarbytes()),p=h.address;_.push(p),t._crypto_core_ristretto255_scalar_add(p,s,c);var i=y(h,a);return g(_),i}function Ne(e,r){var a=[];l(r),e=E(a,e,"s");var _,s=0|t._crypto_core_ristretto255_scalarbytes();e.length!==s&&f(a,"invalid s length"),_=d(e),a.push(_);var n=new u(0|t._crypto_core_ristretto255_scalarbytes()),c=n.address;a.push(c),t._crypto_core_ristretto255_scalar_complement(c,_);var o=y(n,r);return g(a),o}function Le(e,r){var a=[];l(r),e=E(a,e,"s");var _,s=0|t._crypto_core_ristretto255_scalarbytes();e.length!==s&&f(a,"invalid s length"),_=d(e),a.push(_);var n=new u(0|t._crypto_core_ristretto255_scalarbytes()),c=n.address;if(a.push(c),0==(0|t._crypto_core_ristretto255_scalar_invert(c,_))){var o=y(n,r);return g(a),o}b(a,"invalid reciprocate");}function Ue(e,r,a){var _=[];l(a),e=E(_,e,"x");var s,n=0|t._crypto_core_ristretto255_scalarbytes();e.length!==n&&f(_,"invalid x length"),s=d(e),_.push(s),r=E(_,r,"y");var c,o=0|t._crypto_core_ristretto255_scalarbytes();r.length!==o&&f(_,"invalid y length"),c=d(r),_.push(c);var h=new u(0|t._crypto_core_ristretto255_scalarbytes()),p=h.address;_.push(p),t._crypto_core_ristretto255_scalar_mul(p,s,c);var i=y(h,a);return g(_),i}function Oe(e,r){var a=[];l(r),e=E(a,e,"s");var _,s=0|t._crypto_core_ristretto255_scalarbytes();e.length!==s&&f(a,"invalid s length"),_=d(e),a.push(_);var n=new u(0|t._crypto_core_ristretto255_scalarbytes()),c=n.address;a.push(c),t._crypto_core_ristretto255_scalar_negate(c,_);var o=y(n,r);return g(a),o}function Ce(e){var r=[];l(e);var a=new u(0|t._crypto_core_ristretto255_scalarbytes()),_=a.address;r.push(_),t._crypto_core_ristretto255_scalar_random(_);var s=y(a,e);return g(r),s}function Re(e,r){var a=[];l(r),e=E(a,e,"sample");var _,s=0|t._crypto_core_ristretto255_nonreducedscalarbytes();e.length!==s&&f(a,"invalid sample length"),_=d(e),a.push(_);var n=new u(0|t._crypto_core_ristretto255_scalarbytes()),c=n.address;a.push(c),t._crypto_core_ristretto255_scalar_reduce(c,_);var o=y(n,r);return g(a),o}function Pe(e,r,a){var _=[];l(a),e=E(_,e,"x");var s,n=0|t._crypto_core_ristretto255_scalarbytes();e.length!==n&&f(_,"invalid x length"),s=d(e),_.push(s),r=E(_,r,"y");var c,o=0|t._crypto_core_ristretto255_scalarbytes();r.length!==o&&f(_,"invalid y length"),c=d(r),_.push(c);var h=new u(0|t._crypto_core_ristretto255_scalarbytes()),p=h.address;_.push(p),t._crypto_core_ristretto255_scalar_sub(p,s,c);var i=y(h,a);return g(_),i}function Ge(e,r,a){var _=[];l(a),e=E(_,e,"p");var s,n=0|t._crypto_core_ristretto255_bytes();e.length!==n&&f(_,"invalid p length"),s=d(e),_.push(s),r=E(_,r,"q");var c,o=0|t._crypto_core_ristretto255_bytes();r.length!==o&&f(_,"invalid q length"),c=d(r),_.push(c);var h=new u(0|t._crypto_core_ristretto255_bytes()),p=h.address;if(_.push(p),0==(0|t._crypto_core_ristretto255_sub(p,s,c))){var i=y(h,a);return g(_),i}b(_,"input is an invalid element");}function Xe(e,r,a,_){var s=[];l(_),m(s,e,"hash_length"),("number"!=typeof e||(0|e)!==e||e<0)&&f(s,"hash_length must be an unsigned integer");var n=d(r=E(s,r,"message")),c=r.length;s.push(n);var o=null,h=0;null!=a&&(o=d(a=E(s,a,"key")),h=a.length,s.push(o));var p=new u(e|=0),i=p.address;if(s.push(i),0==(0|t._crypto_generichash(i,e,n,c,0,o,h))){var v=y(p,_);return g(s),v}b(s,"invalid usage");}function De(e,r,a,_,s){var n=[];l(s),m(n,e,"subkey_len"),("number"!=typeof e||(0|e)!==e||e<0)&&f(n,"subkey_len must be an unsigned integer");var c=null,o=0;null!=r&&(c=d(r=E(n,r,"key")),o=r.length,n.push(c));var h=null,p=0;null!=a&&(a=E(n,a,"id"),p=0|t._crypto_generichash_blake2b_saltbytes(),a.length!==p&&f(n,"invalid id length"),h=d(a),n.push(h));var i=null,v=0;null!=_&&(_=E(n,_,"ctx"),v=0|t._crypto_generichash_blake2b_personalbytes(),_.length!==v&&f(n,"invalid ctx length"),i=d(_),n.push(i));var x=new u(0|e),k=x.address;if(n.push(k),0==(0|t._crypto_generichash_blake2b_salt_personal(k,e,null,0,0,c,o,h,i))){var S=y(x,s);return g(n),S}b(n,"invalid usage");}function Fe(e,r,a){var _=[];l(a),m(_,e,"state_address"),m(_,r,"hash_length"),("number"!=typeof r||(0|r)!==r||r<0)&&f(_,"hash_length must be an unsigned integer");var s=new u(r|=0),n=s.address;if(_.push(n),0==(0|t._crypto_generichash_final(e,n,r))){var c=(t._free(e),y(s,a));return g(_),c}b(_,"invalid usage");}function Ve(e,r,a){var _=[];l(a);var s=null,n=0;null!=e&&(s=d(e=E(_,e,"key")),n=e.length,_.push(s)),m(_,r,"hash_length"),("number"!=typeof r||(0|r)!==r||r<0)&&f(_,"hash_length must be an unsigned integer");var c=new u(357).address;if(0==(0|t._crypto_generichash_init(c,s,n,r))){var o=c;return g(_),o}b(_,"invalid usage");}function He(e){var r=[];l(e);var a=new u(0|t._crypto_generichash_keybytes()),_=a.address;r.push(_),t._crypto_generichash_keygen(_);var s=y(a,e);return g(r),s}function qe(e,r,a){var _=[];l(a),m(_,e,"state_address");var s=d(r=E(_,r,"message_chunk")),n=r.length;_.push(s),0!=(0|t._crypto_generichash_update(e,s,n))&&b(_,"invalid usage"),g(_);}function je(e,r){var a=[];l(r);var _=d(e=E(a,e,"message")),s=e.length;a.push(_);var n=new u(0|t._crypto_hash_bytes()),c=n.address;if(a.push(c),0==(0|t._crypto_hash(c,_,s,0))){var o=y(n,r);return g(a),o}b(a,"invalid usage");}function ze(e,r){var a=[];l(r);var _=d(e=E(a,e,"message")),s=e.length;a.push(_);var n=new u(0|t._crypto_hash_sha256_bytes()),c=n.address;if(a.push(c),0==(0|t._crypto_hash_sha256(c,_,s,0))){var o=y(n,r);return g(a),o}b(a,"invalid usage");}function We(e,r){var a=[];l(r),m(a,e,"state_address");var _=new u(0|t._crypto_hash_sha256_bytes()),s=_.address;if(a.push(s),0==(0|t._crypto_hash_sha256_final(e,s))){var n=(t._free(e),y(_,r));return g(a),n}b(a,"invalid usage");}function Je(e){var r=[];l(e);var a=new u(104).address;if(0==(0|t._crypto_hash_sha256_init(a))){var _=a;return g(r),_}b(r,"invalid usage");}function Qe(e,r,a){var _=[];l(a),m(_,e,"state_address");var s=d(r=E(_,r,"message_chunk")),n=r.length;_.push(s),0!=(0|t._crypto_hash_sha256_update(e,s,n))&&b(_,"invalid usage"),g(_);}function Ze(e,r){var a=[];l(r);var _=d(e=E(a,e,"message")),s=e.length;a.push(_);var n=new u(0|t._crypto_hash_sha512_bytes()),c=n.address;if(a.push(c),0==(0|t._crypto_hash_sha512(c,_,s,0))){var o=y(n,r);return g(a),o}b(a,"invalid usage");}function $e(e,r){var a=[];l(r),m(a,e,"state_address");var _=new u(0|t._crypto_hash_sha512_bytes()),s=_.address;if(a.push(s),0==(0|t._crypto_hash_sha512_final(e,s))){var n=(t._free(e),y(_,r));return g(a),n}b(a,"invalid usage");}function er(e){var r=[];l(e);var a=new u(208).address;if(0==(0|t._crypto_hash_sha512_init(a))){var _=a;return g(r),_}b(r,"invalid usage");}function rr(e,r,a){var _=[];l(a),m(_,e,"state_address");var s=d(r=E(_,r,"message_chunk")),n=r.length;_.push(s),0!=(0|t._crypto_hash_sha512_update(e,s,n))&&b(_,"invalid usage"),g(_);}function tr(e,r,a,_,n){var c=[];l(n),m(c,e,"subkey_len"),("number"!=typeof e||(0|e)!==e||e<0)&&f(c,"subkey_len must be an unsigned integer"),m(c,r,"subkey_id"),("number"!=typeof r||(0|r)!==r||r<0)&&f(c,"subkey_id must be an unsigned integer"),"string"!=typeof a&&f(c,"ctx must be a string"),a=s(a+"\0"),null!=h&&a.length-1!==h&&f(c,"invalid ctx length");var o=d(a),h=a.length-1;c.push(o),_=E(c,_,"key");var p,i=0|t._crypto_kdf_keybytes();_.length!==i&&f(c,"invalid key length"),p=d(_),c.push(p);var v=new u(0|e),b=v.address;c.push(b),t._crypto_kdf_derive_from_key(b,e,r,r>>>24>>>8,o,p);var x=y(v,n);return g(c),x}function ar(e){var r=[];l(e);var a=new u(0|t._crypto_kdf_keybytes()),_=a.address;r.push(_),t._crypto_kdf_keygen(_);var s=y(a,e);return g(r),s}function _r(e,r,a,_){var s=[];l(_),e=E(s,e,"clientPublicKey");var n,c=0|t._crypto_kx_publickeybytes();e.length!==c&&f(s,"invalid clientPublicKey length"),n=d(e),s.push(n),r=E(s,r,"clientSecretKey");var o,h=0|t._crypto_kx_secretkeybytes();r.length!==h&&f(s,"invalid clientSecretKey length"),o=d(r),s.push(o),a=E(s,a,"serverPublicKey");var p,i=0|t._crypto_kx_publickeybytes();a.length!==i&&f(s,"invalid serverPublicKey length"),p=d(a),s.push(p);var v=new u(0|t._crypto_kx_sessionkeybytes()),m=v.address;s.push(m);var x=new u(0|t._crypto_kx_sessionkeybytes()),k=x.address;if(s.push(k),0==(0|t._crypto_kx_client_session_keys(m,k,n,o,p))){var S=y({sharedRx:v,sharedTx:x},_);return g(s),S}b(s,"invalid usage");}function sr(e){var r=[];l(e);var a=new u(0|t._crypto_kx_publickeybytes()),_=a.address;r.push(_);var s=new u(0|t._crypto_kx_secretkeybytes()),n=s.address;if(r.push(n),0==(0|t._crypto_kx_keypair(_,n))){var c={publicKey:y(a,e),privateKey:y(s,e),keyType:"x25519"};return g(r),c}b(r,"internal error");}function nr(e,r){var a=[];l(r),e=E(a,e,"seed");var _,s=0|t._crypto_kx_seedbytes();e.length!==s&&f(a,"invalid seed length"),_=d(e),a.push(_);var n=new u(0|t._crypto_kx_publickeybytes()),c=n.address;a.push(c);var o=new u(0|t._crypto_kx_secretkeybytes()),h=o.address;if(a.push(h),0==(0|t._crypto_kx_seed_keypair(c,h,_))){var p={publicKey:y(n,r),privateKey:y(o,r),keyType:"x25519"};return g(a),p}b(a,"internal error");}function cr(e,r,a,_){var s=[];l(_),e=E(s,e,"serverPublicKey");var n,c=0|t._crypto_kx_publickeybytes();e.length!==c&&f(s,"invalid serverPublicKey length"),n=d(e),s.push(n),r=E(s,r,"serverSecretKey");var o,h=0|t._crypto_kx_secretkeybytes();r.length!==h&&f(s,"invalid serverSecretKey length"),o=d(r),s.push(o),a=E(s,a,"clientPublicKey");var p,i=0|t._crypto_kx_publickeybytes();a.length!==i&&f(s,"invalid clientPublicKey length"),p=d(a),s.push(p);var v=new u(0|t._crypto_kx_sessionkeybytes()),m=v.address;s.push(m);var x=new u(0|t._crypto_kx_sessionkeybytes()),k=x.address;if(s.push(k),0==(0|t._crypto_kx_server_session_keys(m,k,n,o,p))){var S=y({sharedRx:v,sharedTx:x},_);return g(s),S}b(s,"invalid usage");}function or(e,r,a){var _=[];l(a);var s=d(e=E(_,e,"message")),n=e.length;_.push(s),r=E(_,r,"key");var c,o=0|t._crypto_onetimeauth_keybytes();r.length!==o&&f(_,"invalid key length"),c=d(r),_.push(c);var h=new u(0|t._crypto_onetimeauth_bytes()),p=h.address;if(_.push(p),0==(0|t._crypto_onetimeauth(p,s,n,0,c))){var i=y(h,a);return g(_),i}b(_,"invalid usage");}function hr(e,r){var a=[];l(r),m(a,e,"state_address");var _=new u(0|t._crypto_onetimeauth_bytes()),s=_.address;if(a.push(s),0==(0|t._crypto_onetimeauth_final(e,s))){var n=(t._free(e),y(_,r));return g(a),n}b(a,"invalid usage");}function pr(e,r){var a=[];l(r);var _=null;null!=e&&(_=d(e=E(a,e,"key")),e.length,a.push(_));var s=new u(144).address;if(0==(0|t._crypto_onetimeauth_init(s,_))){var n=s;return g(a),n}b(a,"invalid usage");}function yr(e){var r=[];l(e);var a=new u(0|t._crypto_onetimeauth_keybytes()),_=a.address;r.push(_),t._crypto_onetimeauth_keygen(_);var s=y(a,e);return g(r),s}function ir(e,r,a){var _=[];l(a),m(_,e,"state_address");var s=d(r=E(_,r,"message_chunk")),n=r.length;_.push(s),0!=(0|t._crypto_onetimeauth_update(e,s,n))&&b(_,"invalid usage"),g(_);}function lr(e,r,a){var _=[];e=E(_,e,"hash");var s,n=0|t._crypto_onetimeauth_bytes();e.length!==n&&f(_,"invalid hash length"),s=d(e),_.push(s);var c=d(r=E(_,r,"message")),o=r.length;_.push(c),a=E(_,a,"key");var h,p=0|t._crypto_onetimeauth_keybytes();a.length!==p&&f(_,"invalid key length"),h=d(a),_.push(h);var y=0==(0|t._crypto_onetimeauth_verify(s,c,o,0,h));return g(_),y}function ur(e,r,a,_,s,n,c){var o=[];l(c),m(o,e,"keyLength"),("number"!=typeof e||(0|e)!==e||e<0)&&f(o,"keyLength must be an unsigned integer");var h=d(r=E(o,r,"password")),p=r.length;o.push(h),a=E(o,a,"salt");var i,v=0|t._crypto_pwhash_saltbytes();a.length!==v&&f(o,"invalid salt length"),i=d(a),o.push(i),m(o,_,"opsLimit"),("number"!=typeof _||(0|_)!==_||_<0)&&f(o,"opsLimit must be an unsigned integer"),m(o,s,"memLimit"),("number"!=typeof s||(0|s)!==s||s<0)&&f(o,"memLimit must be an unsigned integer"),m(o,n,"algorithm"),("number"!=typeof n||(0|n)!==n||n<0)&&f(o,"algorithm must be an unsigned integer");var x=new u(0|e),k=x.address;if(o.push(k),0==(0|t._crypto_pwhash(k,e,0,h,p,0,i,_,0,s,n))){var S=y(x,c);return g(o),S}b(o,"invalid usage");}function dr(e,r,a,_,s,n){var c=[];l(n),m(c,e,"keyLength"),("number"!=typeof e||(0|e)!==e||e<0)&&f(c,"keyLength must be an unsigned integer");var o=d(r=E(c,r,"password")),h=r.length;c.push(o),a=E(c,a,"salt");var p,i=0|t._crypto_pwhash_scryptsalsa208sha256_saltbytes();a.length!==i&&f(c,"invalid salt length"),p=d(a),c.push(p),m(c,_,"opsLimit"),("number"!=typeof _||(0|_)!==_||_<0)&&f(c,"opsLimit must be an unsigned integer"),m(c,s,"memLimit"),("number"!=typeof s||(0|s)!==s||s<0)&&f(c,"memLimit must be an unsigned integer");var v=new u(0|e),x=v.address;if(c.push(x),0==(0|t._crypto_pwhash_scryptsalsa208sha256(x,e,0,o,h,0,p,_,0,s))){var k=y(v,n);return g(c),k}b(c,"invalid usage");}function vr(e,r,a,_,s,n,c){var o=[];l(c);var h=d(e=E(o,e,"password")),p=e.length;o.push(h);var i=d(r=E(o,r,"salt")),v=r.length;o.push(i),m(o,a,"opsLimit"),("number"!=typeof a||(0|a)!==a||a<0)&&f(o,"opsLimit must be an unsigned integer"),m(o,_,"r"),("number"!=typeof _||(0|_)!==_||_<0)&&f(o,"r must be an unsigned integer"),m(o,s,"p"),("number"!=typeof s||(0|s)!==s||s<0)&&f(o,"p must be an unsigned integer"),m(o,n,"keyLength"),("number"!=typeof n||(0|n)!==n||n<0)&&f(o,"keyLength must be an unsigned integer");var x=new u(0|n),k=x.address;if(o.push(k),0==(0|t._crypto_pwhash_scryptsalsa208sha256_ll(h,p,i,v,a,0,_,s,k,n))){var S=y(x,c);return g(o),S}b(o,"invalid usage");}function gr(e,r,a,_){var s=[];l(_);var n=d(e=E(s,e,"password")),c=e.length;s.push(n),m(s,r,"opsLimit"),("number"!=typeof r||(0|r)!==r||r<0)&&f(s,"opsLimit must be an unsigned integer"),m(s,a,"memLimit"),("number"!=typeof a||(0|a)!==a||a<0)&&f(s,"memLimit must be an unsigned integer");var o=new u(0|t._crypto_pwhash_scryptsalsa208sha256_strbytes()).address;if(s.push(o),0==(0|t._crypto_pwhash_scryptsalsa208sha256_str(o,n,c,0,r,0,a))){var h=t.UTF8ToString(o);return g(s),h}b(s,"invalid usage");}function br(e,r,a){var _=[];l(a),"string"!=typeof e&&f(_,"hashed_password must be a string"),e=s(e+"\0"),null!=c&&e.length-1!==c&&f(_,"invalid hashed_password length");var n=d(e),c=e.length-1;_.push(n);var o=d(r=E(_,r,"password")),h=r.length;_.push(o);var p=0==(0|t._crypto_pwhash_scryptsalsa208sha256_str_verify(n,o,h,0));return g(_),p}function fr(e,r,a,_){var s=[];l(_);var n=d(e=E(s,e,"password")),c=e.length;s.push(n),m(s,r,"opsLimit"),("number"!=typeof r||(0|r)!==r||r<0)&&f(s,"opsLimit must be an unsigned integer"),m(s,a,"memLimit"),("number"!=typeof a||(0|a)!==a||a<0)&&f(s,"memLimit must be an unsigned integer");var o=new u(0|t._crypto_pwhash_strbytes()).address;if(s.push(o),0==(0|t._crypto_pwhash_str(o,n,c,0,r,0,a))){var h=t.UTF8ToString(o);return g(s),h}b(s,"invalid usage");}function mr(e,r,a,_){var n=[];l(_),"string"!=typeof e&&f(n,"hashed_password must be a string"),e=s(e+"\0"),null!=o&&e.length-1!==o&&f(n,"invalid hashed_password length");var c=d(e),o=e.length-1;n.push(c),m(n,r,"opsLimit"),("number"!=typeof r||(0|r)!==r||r<0)&&f(n,"opsLimit must be an unsigned integer"),m(n,a,"memLimit"),("number"!=typeof a||(0|a)!==a||a<0)&&f(n,"memLimit must be an unsigned integer");var h=0!=(0|t._crypto_pwhash_str_needs_rehash(c,r,0,a));return g(n),h}function Er(e,r,a){var _=[];l(a),"string"!=typeof e&&f(_,"hashed_password must be a string"),e=s(e+"\0"),null!=c&&e.length-1!==c&&f(_,"invalid hashed_password length");var n=d(e),c=e.length-1;_.push(n);var o=d(r=E(_,r,"password")),h=r.length;_.push(o);var p=0==(0|t._crypto_pwhash_str_verify(n,o,h,0));return g(_),p}function xr(e,r,a){var _=[];l(a),e=E(_,e,"privateKey");var s,n=0|t._crypto_scalarmult_scalarbytes();e.length!==n&&f(_,"invalid privateKey length"),s=d(e),_.push(s),r=E(_,r,"publicKey");var c,o=0|t._crypto_scalarmult_bytes();r.length!==o&&f(_,"invalid publicKey length"),c=d(r),_.push(c);var h=new u(0|t._crypto_scalarmult_bytes()),p=h.address;if(_.push(p),0==(0|t._crypto_scalarmult(p,s,c))){var i=y(h,a);return g(_),i}b(_,"weak public key");}function kr(e,r){var a=[];l(r),e=E(a,e,"privateKey");var _,s=0|t._crypto_scalarmult_scalarbytes();e.length!==s&&f(a,"invalid privateKey length"),_=d(e),a.push(_);var n=new u(0|t._crypto_scalarmult_bytes()),c=n.address;if(a.push(c),0==(0|t._crypto_scalarmult_base(c,_))){var o=y(n,r);return g(a),o}b(a,"unknown error");}function Sr(e,r,a){var _=[];l(a),e=E(_,e,"n");var s,n=0|t._crypto_scalarmult_ed25519_scalarbytes();e.length!==n&&f(_,"invalid n length"),s=d(e),_.push(s),r=E(_,r,"p");var c,o=0|t._crypto_scalarmult_ed25519_bytes();r.length!==o&&f(_,"invalid p length"),c=d(r),_.push(c);var h=new u(0|t._crypto_scalarmult_ed25519_bytes()),p=h.address;if(_.push(p),0==(0|t._crypto_scalarmult_ed25519(p,s,c))){var i=y(h,a);return g(_),i}b(_,"invalid point or scalar is 0");}function Tr(e,r){var a=[];l(r),e=E(a,e,"scalar");var _,s=0|t._crypto_scalarmult_ed25519_scalarbytes();e.length!==s&&f(a,"invalid scalar length"),_=d(e),a.push(_);var n=new u(0|t._crypto_scalarmult_ed25519_bytes()),c=n.address;if(a.push(c),0==(0|t._crypto_scalarmult_ed25519_base(c,_))){var o=y(n,r);return g(a),o}b(a,"scalar is 0");}function wr(e,r){var a=[];l(r),e=E(a,e,"scalar");var _,s=0|t._crypto_scalarmult_ed25519_scalarbytes();e.length!==s&&f(a,"invalid scalar length"),_=d(e),a.push(_);var n=new u(0|t._crypto_scalarmult_ed25519_bytes()),c=n.address;if(a.push(c),0==(0|t._crypto_scalarmult_ed25519_base_noclamp(c,_))){var o=y(n,r);return g(a),o}b(a,"scalar is 0");}function Yr(e,r,a){var _=[];l(a),e=E(_,e,"n");var s,n=0|t._crypto_scalarmult_ed25519_scalarbytes();e.length!==n&&f(_,"invalid n length"),s=d(e),_.push(s),r=E(_,r,"p");var c,o=0|t._crypto_scalarmult_ed25519_bytes();r.length!==o&&f(_,"invalid p length"),c=d(r),_.push(c);var h=new u(0|t._crypto_scalarmult_ed25519_bytes()),p=h.address;if(_.push(p),0==(0|t._crypto_scalarmult_ed25519_noclamp(p,s,c))){var i=y(h,a);return g(_),i}b(_,"invalid point or scalar is 0");}function Br(e,r,a){var _=[];l(a),e=E(_,e,"scalar");var s,n=0|t._crypto_scalarmult_ristretto255_scalarbytes();e.length!==n&&f(_,"invalid scalar length"),s=d(e),_.push(s),r=E(_,r,"element");var c,o=0|t._crypto_scalarmult_ristretto255_bytes();r.length!==o&&f(_,"invalid element length"),c=d(r),_.push(c);var h=new u(0|t._crypto_scalarmult_ristretto255_bytes()),p=h.address;if(_.push(p),0==(0|t._crypto_scalarmult_ristretto255(p,s,c))){var i=y(h,a);return g(_),i}b(_,"result is identity element");}function Ar(e,r){var a=[];l(r),e=E(a,e,"scalar");var _,s=0|t._crypto_core_ristretto255_scalarbytes();e.length!==s&&f(a,"invalid scalar length"),_=d(e),a.push(_);var n=new u(0|t._crypto_core_ristretto255_bytes()),c=n.address;if(a.push(c),0==(0|t._crypto_scalarmult_ristretto255_base(c,_))){var o=y(n,r);return g(a),o}b(a,"scalar is 0");}function Kr(e,r,a,_){var s=[];l(_);var n=d(e=E(s,e,"message")),c=e.length;s.push(n),r=E(s,r,"nonce");var o,h=0|t._crypto_secretbox_noncebytes();r.length!==h&&f(s,"invalid nonce length"),o=d(r),s.push(o),a=E(s,a,"key");var p,i=0|t._crypto_secretbox_keybytes();a.length!==i&&f(s,"invalid key length"),p=d(a),s.push(p);var v=new u(0|c),m=v.address;s.push(m);var x=new u(0|t._crypto_secretbox_macbytes()),k=x.address;if(s.push(k),0==(0|t._crypto_secretbox_detached(m,k,n,c,0,o,p))){var S=y({mac:x,cipher:v},_);return g(s),S}b(s,"invalid usage");}function Mr(e,r,a,_){var s=[];l(_);var n=d(e=E(s,e,"message")),c=e.length;s.push(n),r=E(s,r,"nonce");var o,h=0|t._crypto_secretbox_noncebytes();r.length!==h&&f(s,"invalid nonce length"),o=d(r),s.push(o),a=E(s,a,"key");var p,i=0|t._crypto_secretbox_keybytes();a.length!==i&&f(s,"invalid key length"),p=d(a),s.push(p);var v=new u(c+t._crypto_secretbox_macbytes()|0),m=v.address;if(s.push(m),0==(0|t._crypto_secretbox_easy(m,n,c,0,o,p))){var x=y(v,_);return g(s),x}b(s,"invalid usage");}function Ir(e){var r=[];l(e);var a=new u(0|t._crypto_secretbox_keybytes()),_=a.address;r.push(_),t._crypto_secretbox_keygen(_);var s=y(a,e);return g(r),s}function Nr(e,r,a,_,s){var n=[];l(s);var c=d(e=E(n,e,"ciphertext")),o=e.length;n.push(c),r=E(n,r,"mac");var h,p=0|t._crypto_secretbox_macbytes();r.length!==p&&f(n,"invalid mac length"),h=d(r),n.push(h),a=E(n,a,"nonce");var i,v=0|t._crypto_secretbox_noncebytes();a.length!==v&&f(n,"invalid nonce length"),i=d(a),n.push(i),_=E(n,_,"key");var m,x=0|t._crypto_secretbox_keybytes();_.length!==x&&f(n,"invalid key length"),m=d(_),n.push(m);var k=new u(0|o),S=k.address;if(n.push(S),0==(0|t._crypto_secretbox_open_detached(S,c,h,o,0,i,m))){var T=y(k,s);return g(n),T}b(n,"wrong secret key for the given ciphertext");}function Lr(e,r,a,_){var s=[];l(_),e=E(s,e,"ciphertext");var n,c=t._crypto_secretbox_macbytes(),o=e.length;o<c&&f(s,"ciphertext is too short"),n=d(e),s.push(n),r=E(s,r,"nonce");var h,p=0|t._crypto_secretbox_noncebytes();r.length!==p&&f(s,"invalid nonce length"),h=d(r),s.push(h),a=E(s,a,"key");var i,v=0|t._crypto_secretbox_keybytes();a.length!==v&&f(s,"invalid key length"),i=d(a),s.push(i);var m=new u(o-t._crypto_secretbox_macbytes()|0),x=m.address;if(s.push(x),0==(0|t._crypto_secretbox_open_easy(x,n,o,0,h,i))){var k=y(m,_);return g(s),k}b(s,"wrong secret key for the given ciphertext");}function Ur(e,r,a){var _=[];l(a),e=E(_,e,"header");var s,n=0|t._crypto_secretstream_xchacha20poly1305_headerbytes();e.length!==n&&f(_,"invalid header length"),s=d(e),_.push(s),r=E(_,r,"key");var c,o=0|t._crypto_secretstream_xchacha20poly1305_keybytes();r.length!==o&&f(_,"invalid key length"),c=d(r),_.push(c);var h=new u(52).address;if(0==(0|t._crypto_secretstream_xchacha20poly1305_init_pull(h,s,c))){var p=h;return g(_),p}b(_,"invalid usage");}function Or(e,r){var a=[];l(r),e=E(a,e,"key");var _,s=0|t._crypto_secretstream_xchacha20poly1305_keybytes();e.length!==s&&f(a,"invalid key length"),_=d(e),a.push(_);var n=new u(52).address,c=new u(0|t._crypto_secretstream_xchacha20poly1305_headerbytes()),o=c.address;if(a.push(o),0==(0|t._crypto_secretstream_xchacha20poly1305_init_push(n,o,_))){var h={state:n,header:y(c,r)};return g(a),h}b(a,"invalid usage");}function Cr(e){var r=[];l(e);var a=new u(0|t._crypto_secretstream_xchacha20poly1305_keybytes()),_=a.address;r.push(_),t._crypto_secretstream_xchacha20poly1305_keygen(_);var s=y(a,e);return g(r),s}function Rr(e,r,a,_){var s=[];l(_),m(s,e,"state_address"),r=E(s,r,"cipher");var n,c=t._crypto_secretstream_xchacha20poly1305_abytes(),o=r.length;o<c&&f(s,"cipher is too short"),n=d(r),s.push(n);var h=null,p=0;null!=a&&(h=d(a=E(s,a,"ad")),p=a.length,s.push(h));var i=new u(o-t._crypto_secretstream_xchacha20poly1305_abytes()|0),b=i.address;s.push(b);var x,k=(x=v(1),s.push(x),(k=0===t._crypto_secretstream_xchacha20poly1305_pull(e,b,0,x,n,o,0,h,p)&&{tag:t.HEAPU8[x],message:i})&&{message:y(k.message,_),tag:k.tag});return g(s),k}function Pr(e,r,a,_,s){var n=[];l(s),m(n,e,"state_address");var c=d(r=E(n,r,"message_chunk")),o=r.length;n.push(c);var h=null,p=0;null!=a&&(h=d(a=E(n,a,"ad")),p=a.length,n.push(h)),m(n,_,"tag"),("number"!=typeof _||(0|_)!==_||_<0)&&f(n,"tag must be an unsigned integer");var i=new u(o+t._crypto_secretstream_xchacha20poly1305_abytes()|0),v=i.address;if(n.push(v),0==(0|t._crypto_secretstream_xchacha20poly1305_push(e,v,0,c,o,0,h,p,0,_))){var x=y(i,s);return g(n),x}b(n,"invalid usage");}function Gr(e,r){var a=[];return l(r),m(a,e,"state_address"),t._crypto_secretstream_xchacha20poly1305_rekey(e),g(a),!0}function Xr(e,r,a){var _=[];l(a);var s=d(e=E(_,e,"message")),n=e.length;_.push(s),r=E(_,r,"key");var c,o=0|t._crypto_shorthash_keybytes();r.length!==o&&f(_,"invalid key length"),c=d(r),_.push(c);var h=new u(0|t._crypto_shorthash_bytes()),p=h.address;if(_.push(p),0==(0|t._crypto_shorthash(p,s,n,0,c))){var i=y(h,a);return g(_),i}b(_,"invalid usage");}function Dr(e){var r=[];l(e);var a=new u(0|t._crypto_shorthash_keybytes()),_=a.address;r.push(_),t._crypto_shorthash_keygen(_);var s=y(a,e);return g(r),s}function Fr(e,r,a){var _=[];l(a);var s=d(e=E(_,e,"message")),n=e.length;_.push(s),r=E(_,r,"key");var c,o=0|t._crypto_shorthash_siphashx24_keybytes();r.length!==o&&f(_,"invalid key length"),c=d(r),_.push(c);var h=new u(0|t._crypto_shorthash_siphashx24_bytes()),p=h.address;if(_.push(p),0==(0|t._crypto_shorthash_siphashx24(p,s,n,0,c))){var i=y(h,a);return g(_),i}b(_,"invalid usage");}function Vr(e,r,a){var _=[];l(a);var s=d(e=E(_,e,"message")),n=e.length;_.push(s),r=E(_,r,"privateKey");var c,o=0|t._crypto_sign_secretkeybytes();r.length!==o&&f(_,"invalid privateKey length"),c=d(r),_.push(c);var h=new u(e.length+t._crypto_sign_bytes()|0),p=h.address;if(_.push(p),0==(0|t._crypto_sign(p,null,s,n,0,c))){var i=y(h,a);return g(_),i}b(_,"invalid usage");}function Hr(e,r,a){var _=[];l(a);var s=d(e=E(_,e,"message")),n=e.length;_.push(s),r=E(_,r,"privateKey");var c,o=0|t._crypto_sign_secretkeybytes();r.length!==o&&f(_,"invalid privateKey length"),c=d(r),_.push(c);var h=new u(0|t._crypto_sign_bytes()),p=h.address;if(_.push(p),0==(0|t._crypto_sign_detached(p,null,s,n,0,c))){var i=y(h,a);return g(_),i}b(_,"invalid usage");}function qr(e,r){var a=[];l(r),e=E(a,e,"edPk");var _,s=0|t._crypto_sign_publickeybytes();e.length!==s&&f(a,"invalid edPk length"),_=d(e),a.push(_);var n=new u(0|t._crypto_scalarmult_scalarbytes()),c=n.address;if(a.push(c),0==(0|t._crypto_sign_ed25519_pk_to_curve25519(c,_))){var o=y(n,r);return g(a),o}b(a,"invalid key");}function jr(e,r){var a=[];l(r),e=E(a,e,"edSk");var _,s=0|t._crypto_sign_secretkeybytes();e.length!==s&&f(a,"invalid edSk length"),_=d(e),a.push(_);var n=new u(0|t._crypto_scalarmult_scalarbytes()),c=n.address;if(a.push(c),0==(0|t._crypto_sign_ed25519_sk_to_curve25519(c,_))){var o=y(n,r);return g(a),o}b(a,"invalid key");}function zr(e,r){var a=[];l(r),e=E(a,e,"privateKey");var _,s=0|t._crypto_sign_secretkeybytes();e.length!==s&&f(a,"invalid privateKey length"),_=d(e),a.push(_);var n=new u(0|t._crypto_sign_publickeybytes()),c=n.address;if(a.push(c),0==(0|t._crypto_sign_ed25519_sk_to_pk(c,_))){var o=y(n,r);return g(a),o}b(a,"invalid key");}function Wr(e,r){var a=[];l(r),e=E(a,e,"privateKey");var _,s=0|t._crypto_sign_secretkeybytes();e.length!==s&&f(a,"invalid privateKey length"),_=d(e),a.push(_);var n=new u(0|t._crypto_sign_seedbytes()),c=n.address;if(a.push(c),0==(0|t._crypto_sign_ed25519_sk_to_seed(c,_))){var o=y(n,r);return g(a),o}b(a,"invalid key");}function Jr(e,r,a){var _=[];l(a),m(_,e,"state_address"),r=E(_,r,"privateKey");var s,n=0|t._crypto_sign_secretkeybytes();r.length!==n&&f(_,"invalid privateKey length"),s=d(r),_.push(s);var c=new u(0|t._crypto_sign_bytes()),o=c.address;if(_.push(o),0==(0|t._crypto_sign_final_create(e,o,null,s))){var h=(t._free(e),y(c,a));return g(_),h}b(_,"invalid usage");}function Qr(e,r,a,_){var s=[];l(_),m(s,e,"state_address"),r=E(s,r,"signature");var n,c=0|t._crypto_sign_bytes();r.length!==c&&f(s,"invalid signature length"),n=d(r),s.push(n),a=E(s,a,"publicKey");var o,h=0|t._crypto_sign_publickeybytes();a.length!==h&&f(s,"invalid publicKey length"),o=d(a),s.push(o);var p=0==(0|t._crypto_sign_final_verify(e,n,o));return g(s),p}function Zr(e){var r=[];l(e);var a=new u(208).address;if(0==(0|t._crypto_sign_init(a))){var _=a;return g(r),_}b(r,"internal error");}function $r(e){var r=[];l(e);var a=new u(0|t._crypto_sign_publickeybytes()),_=a.address;r.push(_);var s=new u(0|t._crypto_sign_secretkeybytes()),n=s.address;if(r.push(n),0==(0|t._crypto_sign_keypair(_,n))){var c={publicKey:y(a,e),privateKey:y(s,e),keyType:"ed25519"};return g(r),c}b(r,"internal error");}function et(e,r,a){var _=[];l(a),e=E(_,e,"signedMessage");var s,n=t._crypto_sign_bytes(),c=e.length;c<n&&f(_,"signedMessage is too short"),s=d(e),_.push(s),r=E(_,r,"publicKey");var o,h=0|t._crypto_sign_publickeybytes();r.length!==h&&f(_,"invalid publicKey length"),o=d(r),_.push(o);var p=new u(c-t._crypto_sign_bytes()|0),i=p.address;if(_.push(i),0==(0|t._crypto_sign_open(i,null,s,c,0,o))){var v=y(p,a);return g(_),v}b(_,"incorrect signature for the given public key");}function rt(e,r){var a=[];l(r),e=E(a,e,"seed");var _,s=0|t._crypto_sign_seedbytes();e.length!==s&&f(a,"invalid seed length"),_=d(e),a.push(_);var n=new u(0|t._crypto_sign_publickeybytes()),c=n.address;a.push(c);var o=new u(0|t._crypto_sign_secretkeybytes()),h=o.address;if(a.push(h),0==(0|t._crypto_sign_seed_keypair(c,h,_))){var p={publicKey:y(n,r),privateKey:y(o,r),keyType:"ed25519"};return g(a),p}b(a,"invalid usage");}function tt(e,r,a){var _=[];l(a),m(_,e,"state_address");var s=d(r=E(_,r,"message_chunk")),n=r.length;_.push(s),0!=(0|t._crypto_sign_update(e,s,n,0))&&b(_,"invalid usage"),g(_);}function at(e,r,a){var _=[];e=E(_,e,"signature");var s,n=0|t._crypto_sign_bytes();e.length!==n&&f(_,"invalid signature length"),s=d(e),_.push(s);var c=d(r=E(_,r,"message")),o=r.length;_.push(c),a=E(_,a,"publicKey");var h,p=0|t._crypto_sign_publickeybytes();a.length!==p&&f(_,"invalid publicKey length"),h=d(a),_.push(h);var y=0==(0|t._crypto_sign_verify_detached(s,c,o,0,h));return g(_),y}function _t(e,r,a,_){var s=[];l(_),m(s,e,"outLength"),("number"!=typeof e||(0|e)!==e||e<0)&&f(s,"outLength must be an unsigned integer"),r=E(s,r,"key");var n,c=0|t._crypto_stream_chacha20_keybytes();r.length!==c&&f(s,"invalid key length"),n=d(r),s.push(n),a=E(s,a,"nonce");var o,h=0|t._crypto_stream_chacha20_noncebytes();a.length!==h&&f(s,"invalid nonce length"),o=d(a),s.push(o);var p=new u(0|e),i=p.address;s.push(i),t._crypto_stream_chacha20(i,e,0,o,n);var v=y(p,_);return g(s),v}function st(e,r,a,_){var s=[];l(_);var n=d(e=E(s,e,"input_message")),c=e.length;s.push(n),r=E(s,r,"nonce");var o,h=0|t._crypto_stream_chacha20_ietf_noncebytes();r.length!==h&&f(s,"invalid nonce length"),o=d(r),s.push(o),a=E(s,a,"key");var p,i=0|t._crypto_stream_chacha20_ietf_keybytes();a.length!==i&&f(s,"invalid key length"),p=d(a),s.push(p);var v=new u(0|c),m=v.address;if(s.push(m),0===t._crypto_stream_chacha20_ietf_xor(m,n,c,0,o,p)){var x=y(v,_);return g(s),x}b(s,"invalid usage");}function nt(e,r,a,_,s){var n=[];l(s);var c=d(e=E(n,e,"input_message")),o=e.length;n.push(c),r=E(n,r,"nonce");var h,p=0|t._crypto_stream_chacha20_ietf_noncebytes();r.length!==p&&f(n,"invalid nonce length"),h=d(r),n.push(h),m(n,a,"nonce_increment"),("number"!=typeof a||(0|a)!==a||a<0)&&f(n,"nonce_increment must be an unsigned integer"),_=E(n,_,"key");var i,v=0|t._crypto_stream_chacha20_ietf_keybytes();_.length!==v&&f(n,"invalid key length"),i=d(_),n.push(i);var x=new u(0|o),k=x.address;if(n.push(k),0===t._crypto_stream_chacha20_ietf_xor_ic(k,c,o,0,h,a,i)){var S=y(x,s);return g(n),S}b(n,"invalid usage");}function ct(e){var r=[];l(e);var a=new u(0|t._crypto_stream_chacha20_keybytes()),_=a.address;r.push(_),t._crypto_stream_chacha20_keygen(_);var s=y(a,e);return g(r),s}function ot(e,r,a,_){var s=[];l(_);var n=d(e=E(s,e,"input_message")),c=e.length;s.push(n),r=E(s,r,"nonce");var o,h=0|t._crypto_stream_chacha20_noncebytes();r.length!==h&&f(s,"invalid nonce length"),o=d(r),s.push(o),a=E(s,a,"key");var p,i=0|t._crypto_stream_chacha20_keybytes();a.length!==i&&f(s,"invalid key length"),p=d(a),s.push(p);var v=new u(0|c),m=v.address;if(s.push(m),0===t._crypto_stream_chacha20_xor(m,n,c,0,o,p)){var x=y(v,_);return g(s),x}b(s,"invalid usage");}function ht(e,r,a,_,s){var n=[];l(s);var c=d(e=E(n,e,"input_message")),o=e.length;n.push(c),r=E(n,r,"nonce");var h,p=0|t._crypto_stream_chacha20_noncebytes();r.length!==p&&f(n,"invalid nonce length"),h=d(r),n.push(h),m(n,a,"nonce_increment"),("number"!=typeof a||(0|a)!==a||a<0)&&f(n,"nonce_increment must be an unsigned integer"),_=E(n,_,"key");var i,v=0|t._crypto_stream_chacha20_keybytes();_.length!==v&&f(n,"invalid key length"),i=d(_),n.push(i);var x=new u(0|o),k=x.address;if(n.push(k),0===t._crypto_stream_chacha20_xor_ic(k,c,o,0,h,a,0,i)){var S=y(x,s);return g(n),S}b(n,"invalid usage");}function pt(e){var r=[];l(e);var a=new u(0|t._crypto_stream_keybytes()),_=a.address;r.push(_),t._crypto_stream_keygen(_);var s=y(a,e);return g(r),s}function yt(e){var r=[];l(e);var a=new u(0|t._crypto_stream_xchacha20_keybytes()),_=a.address;r.push(_),t._crypto_stream_xchacha20_keygen(_);var s=y(a,e);return g(r),s}function it(e,r,a,_){var s=[];l(_);var n=d(e=E(s,e,"input_message")),c=e.length;s.push(n),r=E(s,r,"nonce");var o,h=0|t._crypto_stream_xchacha20_noncebytes();r.length!==h&&f(s,"invalid nonce length"),o=d(r),s.push(o),a=E(s,a,"key");var p,i=0|t._crypto_stream_xchacha20_keybytes();a.length!==i&&f(s,"invalid key length"),p=d(a),s.push(p);var v=new u(0|c),m=v.address;if(s.push(m),0===t._crypto_stream_xchacha20_xor(m,n,c,0,o,p)){var x=y(v,_);return g(s),x}b(s,"invalid usage");}function lt(e,r,a,_,s){var n=[];l(s);var c=d(e=E(n,e,"input_message")),o=e.length;n.push(c),r=E(n,r,"nonce");var h,p=0|t._crypto_stream_xchacha20_noncebytes();r.length!==p&&f(n,"invalid nonce length"),h=d(r),n.push(h),m(n,a,"nonce_increment"),("number"!=typeof a||(0|a)!==a||a<0)&&f(n,"nonce_increment must be an unsigned integer"),_=E(n,_,"key");var i,v=0|t._crypto_stream_xchacha20_keybytes();_.length!==v&&f(n,"invalid key length"),i=d(_),n.push(i);var x=new u(0|o),k=x.address;if(n.push(k),0===t._crypto_stream_xchacha20_xor_ic(k,c,o,0,h,a,0,i)){var S=y(x,s);return g(n),S}b(n,"invalid usage");}function ut(e,r){var a=[];l(r),m(a,e,"length"),("number"!=typeof e||(0|e)!==e||e<0)&&f(a,"length must be an unsigned integer");var _=new u(0|e),s=_.address;a.push(s),t._randombytes_buf(s,e);var n=y(_,r);return g(a),n}function dt(e,r,a){var _=[];l(a),m(_,e,"length"),("number"!=typeof e||(0|e)!==e||e<0)&&f(_,"length must be an unsigned integer"),r=E(_,r,"seed");var s,n=0|t._randombytes_seedbytes();r.length!==n&&f(_,"invalid seed length"),s=d(r),_.push(s);var c=new u(0|e),o=c.address;_.push(o),t._randombytes_buf_deterministic(o,e,s);var h=y(c,a);return g(_),h}function vt(e){l(e),t._randombytes_close();}function gt(e){l(e);var r=t._randombytes_random()>>>0;return g([]),r}function bt(e,r){var a=[];l(r);for(var _=t._malloc(24),s=0;s<6;s++)t.setValue(_+4*s,t.Runtime.addFunction(e[["implementation_name","random","stir","uniform","buf","close"][s]]),"i32");0!=(0|t._randombytes_set_implementation(_))&&b(a,"unsupported implementation"),g(a);}function ft(e){l(e),t._randombytes_stir();}function mt(e,r){var a=[];l(r),m(a,e,"upper_bound"),("number"!=typeof e||(0|e)!==e||e<0)&&f(a,"upper_bound must be an unsigned integer");var _=t._randombytes_uniform(e)>>>0;return g(a),_}function Et(){var e=t._sodium_version_string(),r=t.UTF8ToString(e);return g([]),r}return u.prototype.to_Uint8Array=function(){var e=new Uint8Array(this.length);return e.set(t.HEAPU8.subarray(this.address,this.address+this.length)),e},e.add=function(e,r){if(!(e instanceof Uint8Array&&r instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can added");var t=e.length,a=0,_=0;if(r.length!=e.length)throw new TypeError("Arguments must have the same length");for(_=0;_<t;_++)a>>=8,a+=e[_]+r[_],e[_]=255&a;},e.base64_variants=o,e.compare=function(e,r){if(!(e instanceof Uint8Array&&r instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be compared");if(e.length!==r.length)throw new TypeError("Only instances of identical length can be compared");for(var t=0,a=1,_=e.length;_-- >0;)t|=r[_]-e[_]>>8&a,a&=(r[_]^e[_])-1>>8;return t+t+a-1},e.from_base64=function(e,r){r=h(r);var a,_=[],s=new u(3*(e=E(_,e,"input")).length/4),n=d(e),c=v(4),o=v(4);return _.push(n),_.push(s.address),_.push(s.result_bin_len_p),_.push(s.b64_end_p),0!==t._sodium_base642bin(s.address,s.length,n,e.length,0,c,o,r)&&b(_,"invalid input"),t.getValue(o,"i32")-n!==e.length&&b(_,"incomplete input"),s.length=t.getValue(c,"i32"),a=s.to_Uint8Array(),g(_),a},e.from_hex=function(e){var r,a=[],_=new u((e=E(a,e,"input")).length/2),s=d(e),n=v(4);return a.push(s),a.push(_.address),a.push(_.hex_end_p),0!==t._sodium_hex2bin(_.address,_.length,s,e.length,0,0,n)&&b(a,"invalid input"),t.getValue(n,"i32")-s!==e.length&&b(a,"incomplete input"),r=_.to_Uint8Array(),g(a),r},e.from_string=s,e.increment=function(e){if(!(e instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be incremented");for(var r=256,t=0,a=e.length;t<a;t++)r>>=8,r+=e[t],e[t]=255&r;},e.is_zero=function(e){if(!(e instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be checked");for(var r=0,t=0,a=e.length;t<a;t++)r|=e[t];return 0===r},e.libsodium=r,e.memcmp=function(e,r){if(!(e instanceof Uint8Array&&r instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be compared");if(e.length!==r.length)throw new TypeError("Only instances of identical length can be compared");for(var t=0,a=0,_=e.length;a<_;a++)t|=e[a]^r[a];return 0===t},e.memzero=function(e){if(!(e instanceof Uint8Array))throw new TypeError("Only Uint8Array instances can be wiped");for(var r=0,t=e.length;r<t;r++)e[r]=0;},e.output_formats=function(){return ["uint8array","text","hex","base64"]},e.pad=function(e,r){if(!(e instanceof Uint8Array))throw new TypeError("buffer must be a Uint8Array");if((r|=0)<=0)throw new Error("block size must be > 0");var a,_=[],s=v(4),n=1,c=0,o=0|e.length,h=new u(o+r);_.push(s),_.push(h.address);for(var p=h.address,y=h.address+o+r;p<y;p++)t.HEAPU8[p]=e[c],c+=n=1&~((65535&((o-=n)>>>48|o>>>32|o>>>16|o))-1>>16);return 0!==t._sodium_pad(s,h.address,e.length,r,h.length)&&b(_,"internal error"),h.length=t.getValue(s,"i32"),a=h.to_Uint8Array(),g(_),a},e.unpad=function(e,r){if(!(e instanceof Uint8Array))throw new TypeError("buffer must be a Uint8Array");if((r|=0)<=0)throw new Error("block size must be > 0");var a=[],_=d(e),s=v(4);return a.push(_),a.push(s),0!==t._sodium_unpad(s,_,e.length,r)&&b(a,"unsupported/invalid padding"),e=(e=new Uint8Array(e)).subarray(0,t.getValue(s,"i32")),g(a),e},e.ready=_,e.symbols=function(){return Object.keys(e).sort()},e.to_base64=p,e.to_hex=c,e.to_string=n,e}var t="object"==typeof e.sodium&&"function"==typeof e.sodium.onload?e.sodium.onload:null;"string"!=typeof exports.nodeName?r(exports,requireLibsodium()):e.sodium=r(e.commonJsStrict={},e.libsodium),t&&e.sodium.ready.then((function(){t(e.sodium);}));}(commonjsGlobal); 
} (libsodiumWrappers));

// Keep all classes requiring libsodium-js in one file as having multiple
// requiring of the libsodium-wrappers module currently crashes browsers
//
// libsodium.js API: https://gist.github.com/webmaster128/b2dbe6d54d36dd168c9fabf441b9b09c
var __importDefault$d = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(libsodium$1, "__esModule", { value: true });
libsodium$1.Xchacha20poly1305Ietf = libsodium$1.xchacha20NonceLength = libsodium$1.Ed25519 = libsodium$1.Ed25519Keypair = libsodium$1.Argon2id = libsodium$1.isArgon2idOptions = void 0;
const utils_1$f = build$5;
const libsodium_wrappers_1 = __importDefault$d(libsodiumWrappers);
function isArgon2idOptions(thing) {
    if (!(0, utils_1$f.isNonNullObject)(thing))
        return false;
    if (typeof thing.outputLength !== "number")
        return false;
    if (typeof thing.opsLimit !== "number")
        return false;
    if (typeof thing.memLimitKib !== "number")
        return false;
    return true;
}
libsodium$1.isArgon2idOptions = isArgon2idOptions;
class Argon2id {
    static async execute(password, salt, options) {
        await libsodium_wrappers_1.default.ready;
        return libsodium_wrappers_1.default.crypto_pwhash(options.outputLength, password, salt, // libsodium only supports 16 byte salts and will throw when you don't respect that
        options.opsLimit, options.memLimitKib * 1024, libsodium_wrappers_1.default.crypto_pwhash_ALG_ARGON2ID13);
    }
}
libsodium$1.Argon2id = Argon2id;
class Ed25519Keypair {
    constructor(privkey, pubkey) {
        this.privkey = privkey;
        this.pubkey = pubkey;
    }
    // a libsodium privkey has the format `<ed25519 privkey> + <ed25519 pubkey>`
    static fromLibsodiumPrivkey(libsodiumPrivkey) {
        if (libsodiumPrivkey.length !== 64) {
            throw new Error(`Unexpected key length ${libsodiumPrivkey.length}. Must be 64.`);
        }
        return new Ed25519Keypair(libsodiumPrivkey.slice(0, 32), libsodiumPrivkey.slice(32, 64));
    }
    toLibsodiumPrivkey() {
        return new Uint8Array([...this.privkey, ...this.pubkey]);
    }
}
libsodium$1.Ed25519Keypair = Ed25519Keypair;
class Ed25519 {
    /**
     * Generates a keypair deterministically from a given 32 bytes seed.
     *
     * This seed equals the Ed25519 private key.
     * For implementation details see crypto_sign_seed_keypair in
     * https://download.libsodium.org/doc/public-key_cryptography/public-key_signatures.html
     * and diagram on https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/
     */
    static async makeKeypair(seed) {
        await libsodium_wrappers_1.default.ready;
        const keypair = libsodium_wrappers_1.default.crypto_sign_seed_keypair(seed);
        return Ed25519Keypair.fromLibsodiumPrivkey(keypair.privateKey);
    }
    static async createSignature(message, keyPair) {
        await libsodium_wrappers_1.default.ready;
        return libsodium_wrappers_1.default.crypto_sign_detached(message, keyPair.toLibsodiumPrivkey());
    }
    static async verifySignature(signature, message, pubkey) {
        await libsodium_wrappers_1.default.ready;
        return libsodium_wrappers_1.default.crypto_sign_verify_detached(signature, message, pubkey);
    }
}
libsodium$1.Ed25519 = Ed25519;
/**
 * Nonce length in bytes for all flavours of XChaCha20.
 *
 * @see https://libsodium.gitbook.io/doc/advanced/stream_ciphers/xchacha20#notes
 */
libsodium$1.xchacha20NonceLength = 24;
class Xchacha20poly1305Ietf {
    static async encrypt(message, key, nonce) {
        await libsodium_wrappers_1.default.ready;
        const additionalData = null;
        return libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_encrypt(message, additionalData, null, // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)
        nonce, key);
    }
    static async decrypt(ciphertext, key, nonce) {
        await libsodium_wrappers_1.default.ready;
        const additionalData = null;
        return libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_decrypt(null, // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)
        ciphertext, additionalData, nonce, key);
    }
}
libsodium$1.Xchacha20poly1305Ietf = Xchacha20poly1305Ietf;

var random = {};

Object.defineProperty(random, "__esModule", { value: true });
random.Random = void 0;
class Random {
    /**
     * Returns `count` cryptographically secure random bytes
     */
    static getBytes(count) {
        try {
            const globalObject = typeof window === "object" ? window : self;
            const cryptoApi = typeof globalObject.crypto !== "undefined" ? globalObject.crypto : globalObject.msCrypto;
            const out = new Uint8Array(count);
            cryptoApi.getRandomValues(out);
            return out;
        }
        catch {
            try {
                // eslint-disable-next-line @typescript-eslint/no-var-requires
                const crypto = require("crypto");
                return new Uint8Array([...crypto.randomBytes(count)]);
            }
            catch {
                throw new Error("No secure random number generator found");
            }
        }
    }
}
random.Random = Random;

var ripemd$1 = {};

var ripemd160$1 = {};

Object.defineProperty(ripemd160$1, "__esModule", { value: true });
ripemd160$1.ripemd160 = ripemd160$1.RIPEMD160 = void 0;
const _sha2_js_1 = _sha2;
const utils_js_1 = utils$z;
// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html
// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf
const Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
const Id = Uint8Array.from({ length: 16 }, (_, i) => i);
const Pi = Id.map((i) => (9 * i + 5) % 16);
let idxL = [Id];
let idxR = [Pi];
for (let i = 0; i < 4; i++)
    for (let j of [idxL, idxR])
        j.push(j[i].map((k) => Rho[k]));
const shifts = [
    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],
].map((i) => new Uint8Array(i));
const shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));
const shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));
const Kl = new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);
const Kr = new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);
// The rotate left (circular left shift) operation for uint32
const rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));
// It's called f() in spec.
function f$1(group, x, y, z) {
    if (group === 0)
        return x ^ y ^ z;
    else if (group === 1)
        return (x & y) | (~x & z);
    else if (group === 2)
        return (x | ~y) ^ z;
    else if (group === 3)
        return (x & z) | (y & ~z);
    else
        return x ^ (y | ~z);
}
// Temporary buffer, not used to store anything between runs
const BUF = new Uint32Array(16);
let RIPEMD160$1 = class RIPEMD160 extends _sha2_js_1.SHA2 {
    constructor() {
        super(64, 20, 8, true);
        this.h0 = 0x67452301 | 0;
        this.h1 = 0xefcdab89 | 0;
        this.h2 = 0x98badcfe | 0;
        this.h3 = 0x10325476 | 0;
        this.h4 = 0xc3d2e1f0 | 0;
    }
    get() {
        const { h0, h1, h2, h3, h4 } = this;
        return [h0, h1, h2, h3, h4];
    }
    set(h0, h1, h2, h3, h4) {
        this.h0 = h0 | 0;
        this.h1 = h1 | 0;
        this.h2 = h2 | 0;
        this.h3 = h3 | 0;
        this.h4 = h4 | 0;
    }
    process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
            BUF[i] = view.getUint32(offset, true);
        // prettier-ignore
        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
        // Instead of iterating 0 to 80, we split it into 5 groups
        // And use the groups in constants, functions, etc. Much simpler
        for (let group = 0; group < 5; group++) {
            const rGroup = 4 - group;
            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore
            const rl = idxL[group], rr = idxR[group]; // prettier-ignore
            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore
            for (let i = 0; i < 16; i++) {
                const tl = (rotl(al + f$1(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;
                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore
            }
            // 2 loops are 10% faster
            for (let i = 0; i < 16; i++) {
                const tr = (rotl(ar + f$1(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;
                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore
            }
        }
        // Add the compressed chunk to the current hash value
        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);
    }
    roundClean() {
        BUF.fill(0);
    }
    destroy() {
        this.destroyed = true;
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0);
    }
};
ripemd160$1.RIPEMD160 = RIPEMD160$1;
/**
 * RIPEMD-160 - a hash function from 1990s.
 * @param message - msg that would be hashed
 */
ripemd160$1.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160$1());

Object.defineProperty(ripemd$1, "__esModule", { value: true });
ripemd$1.ripemd160 = ripemd$1.Ripemd160 = void 0;
const ripemd160_1$1 = ripemd160$1;
const utils_1$e = utils$y;
class Ripemd160 {
    constructor(firstData) {
        this.blockSize = 512 / 8;
        this.impl = ripemd160_1$1.ripemd160.create();
        if (firstData) {
            this.update(firstData);
        }
    }
    update(data) {
        this.impl.update((0, utils_1$e.toRealUint8Array)(data));
        return this;
    }
    digest() {
        return this.impl.digest();
    }
}
ripemd$1.Ripemd160 = Ripemd160;
/** Convenience function equivalent to `new Ripemd160(data).digest()` */
function ripemd160(data) {
    return new Ripemd160(data).digest();
}
ripemd$1.ripemd160 = ripemd160;

var secp256k1$2 = {};

var elliptic = {};

var _from$1 = "elliptic@^6.5.4";
var _id$1 = "elliptic@6.5.4";
var _inBundle$1 = false;
var _integrity$1 = "sha512-iLhC6ULemrljPZb+QutR5TQGB+pdW6KGD5RSegS+8sorOZT+rdQFbsQFJgvN3eRqNALqJer4oQ16YvJHlU8hzQ==";
var _location$1 = "/elliptic";
var _phantomChildren$1 = {
};
var _requested$1 = {
	type: "range",
	registry: true,
	raw: "elliptic@^6.5.4",
	name: "elliptic",
	escapedName: "elliptic",
	rawSpec: "^6.5.4",
	saveSpec: null,
	fetchSpec: "^6.5.4"
};
var _requiredBy$1 = [
	"/@cosmjs/crypto"
];
var _resolved$1 = "https://registry.npmjs.org/elliptic/-/elliptic-6.5.4.tgz";
var _shasum$1 = "da37cebd31e79a1367e941b592ed1fbebd58abbb";
var _spec$1 = "elliptic@^6.5.4";
var _where$1 = "/Users/albertorobles/Documents/Sandbox/coreumjs/node_modules/@cosmjs/crypto";
var author$1 = {
	name: "Fedor Indutny",
	email: "fedor@indutny.com"
};
var bugs$1 = {
	url: "https://github.com/indutny/elliptic/issues"
};
var bundleDependencies$1 = false;
var dependencies$1 = {
	"bn.js": "^4.11.9",
	brorand: "^1.1.0",
	"hash.js": "^1.0.0",
	"hmac-drbg": "^1.0.1",
	inherits: "^2.0.4",
	"minimalistic-assert": "^1.0.1",
	"minimalistic-crypto-utils": "^1.0.1"
};
var deprecated$1 = false;
var description$1 = "EC cryptography";
var devDependencies$1 = {
	brfs: "^2.0.2",
	coveralls: "^3.1.0",
	eslint: "^7.6.0",
	grunt: "^1.2.1",
	"grunt-browserify": "^5.3.0",
	"grunt-cli": "^1.3.2",
	"grunt-contrib-connect": "^3.0.0",
	"grunt-contrib-copy": "^1.0.0",
	"grunt-contrib-uglify": "^5.0.0",
	"grunt-mocha-istanbul": "^5.0.2",
	"grunt-saucelabs": "^9.0.1",
	istanbul: "^0.4.5",
	mocha: "^8.0.1"
};
var files = [
	"lib"
];
var homepage$1 = "https://github.com/indutny/elliptic";
var keywords$1 = [
	"EC",
	"Elliptic",
	"curve",
	"Cryptography"
];
var license$1 = "MIT";
var main$1 = "lib/elliptic.js";
var name$1 = "elliptic";
var repository$1 = {
	type: "git",
	url: "git+ssh://git@github.com/indutny/elliptic.git"
};
var scripts$1 = {
	lint: "eslint lib test",
	"lint:fix": "npm run lint -- --fix",
	test: "npm run lint && npm run unit",
	unit: "istanbul test _mocha --reporter=spec test/index.js",
	version: "grunt dist && git add dist/"
};
var version$1 = "6.5.4";
var require$$0$1 = {
	_from: _from$1,
	_id: _id$1,
	_inBundle: _inBundle$1,
	_integrity: _integrity$1,
	_location: _location$1,
	_phantomChildren: _phantomChildren$1,
	_requested: _requested$1,
	_requiredBy: _requiredBy$1,
	_resolved: _resolved$1,
	_shasum: _shasum$1,
	_spec: _spec$1,
	_where: _where$1,
	author: author$1,
	bugs: bugs$1,
	bundleDependencies: bundleDependencies$1,
	dependencies: dependencies$1,
	deprecated: deprecated$1,
	description: description$1,
	devDependencies: devDependencies$1,
	files: files,
	homepage: homepage$1,
	keywords: keywords$1,
	license: license$1,
	main: main$1,
	name: name$1,
	repository: repository$1,
	scripts: scripts$1,
	version: version$1
};

var utils$x = {};

var bn = {exports: {}};

(function (module) {
	(function (module, exports) {

	  // Utils
	  function assert (val, msg) {
	    if (!val) throw new Error(msg || 'Assertion failed');
	  }

	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits (ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  }

	  // BN

	  function BN (number, base, endian) {
	    if (BN.isBN(number)) {
	      return number;
	    }

	    this.negative = 0;
	    this.words = null;
	    this.length = 0;

	    // Reduction context
	    this.red = null;

	    if (number !== null) {
	      if (base === 'le' || base === 'be') {
	        endian = base;
	        base = 10;
	      }

	      this._init(number || 0, base || 10, endian || 'be');
	    }
	  }
	  if (typeof module === 'object') {
	    module.exports = BN;
	  } else {
	    exports.BN = BN;
	  }

	  BN.BN = BN;
	  BN.wordSize = 26;

	  var Buffer;
	  try {
	    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
	      Buffer = window.Buffer;
	    } else {
	      Buffer = require('buffer').Buffer;
	    }
	  } catch (e) {
	  }

	  BN.isBN = function isBN (num) {
	    if (num instanceof BN) {
	      return true;
	    }

	    return num !== null && typeof num === 'object' &&
	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };

	  BN.max = function max (left, right) {
	    if (left.cmp(right) > 0) return left;
	    return right;
	  };

	  BN.min = function min (left, right) {
	    if (left.cmp(right) < 0) return left;
	    return right;
	  };

	  BN.prototype._init = function init (number, base, endian) {
	    if (typeof number === 'number') {
	      return this._initNumber(number, base, endian);
	    }

	    if (typeof number === 'object') {
	      return this._initArray(number, base, endian);
	    }

	    if (base === 'hex') {
	      base = 16;
	    }
	    assert(base === (base | 0) && base >= 2 && base <= 36);

	    number = number.toString().replace(/\s+/g, '');
	    var start = 0;
	    if (number[0] === '-') {
	      start++;
	      this.negative = 1;
	    }

	    if (start < number.length) {
	      if (base === 16) {
	        this._parseHex(number, start, endian);
	      } else {
	        this._parseBase(number, base, start);
	        if (endian === 'le') {
	          this._initArray(this.toArray(), base, endian);
	        }
	      }
	    }
	  };

	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
	    if (number < 0) {
	      this.negative = 1;
	      number = -number;
	    }
	    if (number < 0x4000000) {
	      this.words = [ number & 0x3ffffff ];
	      this.length = 1;
	    } else if (number < 0x10000000000000) {
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff
	      ];
	      this.length = 2;
	    } else {
	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff,
	        1
	      ];
	      this.length = 3;
	    }

	    if (endian !== 'le') return;

	    // Reverse the bytes
	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initArray = function _initArray (number, base, endian) {
	    // Perhaps a Uint8Array
	    assert(typeof number.length === 'number');
	    if (number.length <= 0) {
	      this.words = [ 0 ];
	      this.length = 1;
	      return this;
	    }

	    this.length = Math.ceil(number.length / 3);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    var off = 0;
	    if (endian === 'be') {
	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    } else if (endian === 'le') {
	      for (i = 0, j = 0; i < number.length; i += 3) {
	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    }
	    return this.strip();
	  };

	  function parseHex4Bits (string, index) {
	    var c = string.charCodeAt(index);
	    // 'A' - 'F'
	    if (c >= 65 && c <= 70) {
	      return c - 55;
	    // 'a' - 'f'
	    } else if (c >= 97 && c <= 102) {
	      return c - 87;
	    // '0' - '9'
	    } else {
	      return (c - 48) & 0xf;
	    }
	  }

	  function parseHexByte (string, lowerBound, index) {
	    var r = parseHex4Bits(string, index);
	    if (index - 1 >= lowerBound) {
	      r |= parseHex4Bits(string, index - 1) << 4;
	    }
	    return r;
	  }

	  BN.prototype._parseHex = function _parseHex (number, start, endian) {
	    // Create possibly bigger array to ensure that it fits the number
	    this.length = Math.ceil((number.length - start) / 6);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    // 24-bits chunks
	    var off = 0;
	    var j = 0;

	    var w;
	    if (endian === 'be') {
	      for (i = number.length - 1; i >= start; i -= 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    } else {
	      var parseLength = number.length - start;
	      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    }

	    this.strip();
	  };

	  function parseBase (str, start, end, mul) {
	    var r = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r *= mul;

	      // 'a'
	      if (c >= 49) {
	        r += c - 49 + 0xa;

	      // 'A'
	      } else if (c >= 17) {
	        r += c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        r += c;
	      }
	    }
	    return r;
	  }

	  BN.prototype._parseBase = function _parseBase (number, base, start) {
	    // Initialize as zero
	    this.words = [ 0 ];
	    this.length = 1;

	    // Find length of limb in base
	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
	      limbLen++;
	    }
	    limbLen--;
	    limbPow = (limbPow / base) | 0;

	    var total = number.length - start;
	    var mod = total % limbLen;
	    var end = Math.min(total, total - mod) + start;

	    var word = 0;
	    for (var i = start; i < end; i += limbLen) {
	      word = parseBase(number, i, i + limbLen, base);

	      this.imuln(limbPow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    if (mod !== 0) {
	      var pow = 1;
	      word = parseBase(number, i, number.length, base);

	      for (i = 0; i < mod; i++) {
	        pow *= base;
	      }

	      this.imuln(pow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    this.strip();
	  };

	  BN.prototype.copy = function copy (dest) {
	    dest.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      dest.words[i] = this.words[i];
	    }
	    dest.length = this.length;
	    dest.negative = this.negative;
	    dest.red = this.red;
	  };

	  BN.prototype.clone = function clone () {
	    var r = new BN(null);
	    this.copy(r);
	    return r;
	  };

	  BN.prototype._expand = function _expand (size) {
	    while (this.length < size) {
	      this.words[this.length++] = 0;
	    }
	    return this;
	  };

	  // Remove leading `0` from `this`
	  BN.prototype.strip = function strip () {
	    while (this.length > 1 && this.words[this.length - 1] === 0) {
	      this.length--;
	    }
	    return this._normSign();
	  };

	  BN.prototype._normSign = function _normSign () {
	    // -0 = 0
	    if (this.length === 1 && this.words[0] === 0) {
	      this.negative = 0;
	    }
	    return this;
	  };

	  BN.prototype.inspect = function inspect () {
	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  };

	  /*

	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];

	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
	    zeros[i] = s;
	    s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
	    var groupSize = 0;
	    var groupBase = 1;
	    while (groupBase < (1 << BN.wordSize) / base) {
	      groupBase *= base;
	      groupSize += 1;
	    }
	    groupSizes[base] = groupSize;
	    groupBases[base] = groupBase;
	  }

	  */

	  var zeros = [
	    '',
	    '0',
	    '00',
	    '000',
	    '0000',
	    '00000',
	    '000000',
	    '0000000',
	    '00000000',
	    '000000000',
	    '0000000000',
	    '00000000000',
	    '000000000000',
	    '0000000000000',
	    '00000000000000',
	    '000000000000000',
	    '0000000000000000',
	    '00000000000000000',
	    '000000000000000000',
	    '0000000000000000000',
	    '00000000000000000000',
	    '000000000000000000000',
	    '0000000000000000000000',
	    '00000000000000000000000',
	    '000000000000000000000000',
	    '0000000000000000000000000'
	  ];

	  var groupSizes = [
	    0, 0,
	    25, 16, 12, 11, 10, 9, 8,
	    8, 7, 7, 7, 7, 6, 6,
	    6, 6, 6, 6, 6, 5, 5,
	    5, 5, 5, 5, 5, 5, 5,
	    5, 5, 5, 5, 5, 5, 5
	  ];

	  var groupBases = [
	    0, 0,
	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	  ];

	  BN.prototype.toString = function toString (base, padding) {
	    base = base || 10;
	    padding = padding | 0 || 1;

	    var out;
	    if (base === 16 || base === 'hex') {
	      out = '';
	      var off = 0;
	      var carry = 0;
	      for (var i = 0; i < this.length; i++) {
	        var w = this.words[i];
	        var word = (((w << off) | carry) & 0xffffff).toString(16);
	        carry = (w >>> (24 - off)) & 0xffffff;
	        if (carry !== 0 || i !== this.length - 1) {
	          out = zeros[6 - word.length] + word + out;
	        } else {
	          out = word + out;
	        }
	        off += 2;
	        if (off >= 26) {
	          off -= 26;
	          i--;
	        }
	      }
	      if (carry !== 0) {
	        out = carry.toString(16) + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    if (base === (base | 0) && base >= 2 && base <= 36) {
	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	      var groupSize = groupSizes[base];
	      // var groupBase = Math.pow(base, groupSize);
	      var groupBase = groupBases[base];
	      out = '';
	      var c = this.clone();
	      c.negative = 0;
	      while (!c.isZero()) {
	        var r = c.modn(groupBase).toString(base);
	        c = c.idivn(groupBase);

	        if (!c.isZero()) {
	          out = zeros[groupSize - r.length] + r + out;
	        } else {
	          out = r + out;
	        }
	      }
	      if (this.isZero()) {
	        out = '0' + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    assert(false, 'Base should be between 2 and 36');
	  };

	  BN.prototype.toNumber = function toNumber () {
	    var ret = this.words[0];
	    if (this.length === 2) {
	      ret += this.words[1] * 0x4000000;
	    } else if (this.length === 3 && this.words[2] === 0x01) {
	      // NOTE: at this stage it is known that the top bit is set
	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
	    } else if (this.length > 2) {
	      assert(false, 'Number can only safely store up to 53 bits');
	    }
	    return (this.negative !== 0) ? -ret : ret;
	  };

	  BN.prototype.toJSON = function toJSON () {
	    return this.toString(16);
	  };

	  BN.prototype.toBuffer = function toBuffer (endian, length) {
	    assert(typeof Buffer !== 'undefined');
	    return this.toArrayLike(Buffer, endian, length);
	  };

	  BN.prototype.toArray = function toArray (endian, length) {
	    return this.toArrayLike(Array, endian, length);
	  };

	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
	    var byteLength = this.byteLength();
	    var reqLength = length || Math.max(1, byteLength);
	    assert(byteLength <= reqLength, 'byte array longer than desired length');
	    assert(reqLength > 0, 'Requested array length <= 0');

	    this.strip();
	    var littleEndian = endian === 'le';
	    var res = new ArrayType(reqLength);

	    var b, i;
	    var q = this.clone();
	    if (!littleEndian) {
	      // Assume big-endian
	      for (i = 0; i < reqLength - byteLength; i++) {
	        res[i] = 0;
	      }

	      for (i = 0; !q.isZero(); i++) {
	        b = q.andln(0xff);
	        q.iushrn(8);

	        res[reqLength - i - 1] = b;
	      }
	    } else {
	      for (i = 0; !q.isZero(); i++) {
	        b = q.andln(0xff);
	        q.iushrn(8);

	        res[i] = b;
	      }

	      for (; i < reqLength; i++) {
	        res[i] = 0;
	      }
	    }

	    return res;
	  };

	  if (Math.clz32) {
	    BN.prototype._countBits = function _countBits (w) {
	      return 32 - Math.clz32(w);
	    };
	  } else {
	    BN.prototype._countBits = function _countBits (w) {
	      var t = w;
	      var r = 0;
	      if (t >= 0x1000) {
	        r += 13;
	        t >>>= 13;
	      }
	      if (t >= 0x40) {
	        r += 7;
	        t >>>= 7;
	      }
	      if (t >= 0x8) {
	        r += 4;
	        t >>>= 4;
	      }
	      if (t >= 0x02) {
	        r += 2;
	        t >>>= 2;
	      }
	      return r + t;
	    };
	  }

	  BN.prototype._zeroBits = function _zeroBits (w) {
	    // Short-cut
	    if (w === 0) return 26;

	    var t = w;
	    var r = 0;
	    if ((t & 0x1fff) === 0) {
	      r += 13;
	      t >>>= 13;
	    }
	    if ((t & 0x7f) === 0) {
	      r += 7;
	      t >>>= 7;
	    }
	    if ((t & 0xf) === 0) {
	      r += 4;
	      t >>>= 4;
	    }
	    if ((t & 0x3) === 0) {
	      r += 2;
	      t >>>= 2;
	    }
	    if ((t & 0x1) === 0) {
	      r++;
	    }
	    return r;
	  };

	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength () {
	    var w = this.words[this.length - 1];
	    var hi = this._countBits(w);
	    return (this.length - 1) * 26 + hi;
	  };

	  function toBitArray (num) {
	    var w = new Array(num.bitLength());

	    for (var bit = 0; bit < w.length; bit++) {
	      var off = (bit / 26) | 0;
	      var wbit = bit % 26;

	      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
	    }

	    return w;
	  }

	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits () {
	    if (this.isZero()) return 0;

	    var r = 0;
	    for (var i = 0; i < this.length; i++) {
	      var b = this._zeroBits(this.words[i]);
	      r += b;
	      if (b !== 26) break;
	    }
	    return r;
	  };

	  BN.prototype.byteLength = function byteLength () {
	    return Math.ceil(this.bitLength() / 8);
	  };

	  BN.prototype.toTwos = function toTwos (width) {
	    if (this.negative !== 0) {
	      return this.abs().inotn(width).iaddn(1);
	    }
	    return this.clone();
	  };

	  BN.prototype.fromTwos = function fromTwos (width) {
	    if (this.testn(width - 1)) {
	      return this.notn(width).iaddn(1).ineg();
	    }
	    return this.clone();
	  };

	  BN.prototype.isNeg = function isNeg () {
	    return this.negative !== 0;
	  };

	  // Return negative clone of `this`
	  BN.prototype.neg = function neg () {
	    return this.clone().ineg();
	  };

	  BN.prototype.ineg = function ineg () {
	    if (!this.isZero()) {
	      this.negative ^= 1;
	    }

	    return this;
	  };

	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor (num) {
	    while (this.length < num.length) {
	      this.words[this.length++] = 0;
	    }

	    for (var i = 0; i < num.length; i++) {
	      this.words[i] = this.words[i] | num.words[i];
	    }

	    return this.strip();
	  };

	  BN.prototype.ior = function ior (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuor(num);
	  };

	  // Or `num` with `this`
	  BN.prototype.or = function or (num) {
	    if (this.length > num.length) return this.clone().ior(num);
	    return num.clone().ior(this);
	  };

	  BN.prototype.uor = function uor (num) {
	    if (this.length > num.length) return this.clone().iuor(num);
	    return num.clone().iuor(this);
	  };

	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand (num) {
	    // b = min-length(num, this)
	    var b;
	    if (this.length > num.length) {
	      b = num;
	    } else {
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = this.words[i] & num.words[i];
	    }

	    this.length = b.length;

	    return this.strip();
	  };

	  BN.prototype.iand = function iand (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuand(num);
	  };

	  // And `num` with `this`
	  BN.prototype.and = function and (num) {
	    if (this.length > num.length) return this.clone().iand(num);
	    return num.clone().iand(this);
	  };

	  BN.prototype.uand = function uand (num) {
	    if (this.length > num.length) return this.clone().iuand(num);
	    return num.clone().iuand(this);
	  };

	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor (num) {
	    // a.length > b.length
	    var a;
	    var b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = a.words[i] ^ b.words[i];
	    }

	    if (this !== a) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = a.length;

	    return this.strip();
	  };

	  BN.prototype.ixor = function ixor (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuxor(num);
	  };

	  // Xor `num` with `this`
	  BN.prototype.xor = function xor (num) {
	    if (this.length > num.length) return this.clone().ixor(num);
	    return num.clone().ixor(this);
	  };

	  BN.prototype.uxor = function uxor (num) {
	    if (this.length > num.length) return this.clone().iuxor(num);
	    return num.clone().iuxor(this);
	  };

	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn (width) {
	    assert(typeof width === 'number' && width >= 0);

	    var bytesNeeded = Math.ceil(width / 26) | 0;
	    var bitsLeft = width % 26;

	    // Extend the buffer with leading zeroes
	    this._expand(bytesNeeded);

	    if (bitsLeft > 0) {
	      bytesNeeded--;
	    }

	    // Handle complete words
	    for (var i = 0; i < bytesNeeded; i++) {
	      this.words[i] = ~this.words[i] & 0x3ffffff;
	    }

	    // Handle the residue
	    if (bitsLeft > 0) {
	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
	    }

	    // And remove leading zeroes
	    return this.strip();
	  };

	  BN.prototype.notn = function notn (width) {
	    return this.clone().inotn(width);
	  };

	  // Set `bit` of `this`
	  BN.prototype.setn = function setn (bit, val) {
	    assert(typeof bit === 'number' && bit >= 0);

	    var off = (bit / 26) | 0;
	    var wbit = bit % 26;

	    this._expand(off + 1);

	    if (val) {
	      this.words[off] = this.words[off] | (1 << wbit);
	    } else {
	      this.words[off] = this.words[off] & ~(1 << wbit);
	    }

	    return this.strip();
	  };

	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd (num) {
	    var r;

	    // negative + positive
	    if (this.negative !== 0 && num.negative === 0) {
	      this.negative = 0;
	      r = this.isub(num);
	      this.negative ^= 1;
	      return this._normSign();

	    // positive + negative
	    } else if (this.negative === 0 && num.negative !== 0) {
	      num.negative = 0;
	      r = this.isub(num);
	      num.negative = 1;
	      return r._normSign();
	    }

	    // a.length > b.length
	    var a, b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }

	    this.length = a.length;
	    if (carry !== 0) {
	      this.words[this.length] = carry;
	      this.length++;
	    // Copy the rest of the words
	    } else if (a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    return this;
	  };

	  // Add `num` to `this`
	  BN.prototype.add = function add (num) {
	    var res;
	    if (num.negative !== 0 && this.negative === 0) {
	      num.negative = 0;
	      res = this.sub(num);
	      num.negative ^= 1;
	      return res;
	    } else if (num.negative === 0 && this.negative !== 0) {
	      this.negative = 0;
	      res = num.sub(this);
	      this.negative = 1;
	      return res;
	    }

	    if (this.length > num.length) return this.clone().iadd(num);

	    return num.clone().iadd(this);
	  };

	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub (num) {
	    // this - (-num) = this + num
	    if (num.negative !== 0) {
	      num.negative = 0;
	      var r = this.iadd(num);
	      num.negative = 1;
	      return r._normSign();

	    // -this - num = -(this + num)
	    } else if (this.negative !== 0) {
	      this.negative = 0;
	      this.iadd(num);
	      this.negative = 1;
	      return this._normSign();
	    }

	    // At this point both numbers are positive
	    var cmp = this.cmp(num);

	    // Optimization - zeroify
	    if (cmp === 0) {
	      this.negative = 0;
	      this.length = 1;
	      this.words[0] = 0;
	      return this;
	    }

	    // a > b
	    var a, b;
	    if (cmp > 0) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }

	    // Copy rest of the words
	    if (carry === 0 && i < a.length && a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = Math.max(this.length, i);

	    if (a !== this) {
	      this.negative = 1;
	    }

	    return this.strip();
	  };

	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub (num) {
	    return this.clone().isub(num);
	  };

	  function smallMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    var len = (self.length + num.length) | 0;
	    out.length = len;
	    len = (len - 1) | 0;

	    // Peel one iteration (compiler can't do it, because of code complexity)
	    var a = self.words[0] | 0;
	    var b = num.words[0] | 0;
	    var r = a * b;

	    var lo = r & 0x3ffffff;
	    var carry = (r / 0x4000000) | 0;
	    out.words[0] = lo;

	    for (var k = 1; k < len; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = carry >>> 26;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = (k - j) | 0;
	        a = self.words[i] | 0;
	        b = num.words[j] | 0;
	        r = a * b + rword;
	        ncarry += (r / 0x4000000) | 0;
	        rword = r & 0x3ffffff;
	      }
	      out.words[k] = rword | 0;
	      carry = ncarry | 0;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry | 0;
	    } else {
	      out.length--;
	    }

	    return out.strip();
	  }

	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo (self, num, out) {
	    var a = self.words;
	    var b = num.words;
	    var o = out.words;
	    var c = 0;
	    var lo;
	    var mid;
	    var hi;
	    var a0 = a[0] | 0;
	    var al0 = a0 & 0x1fff;
	    var ah0 = a0 >>> 13;
	    var a1 = a[1] | 0;
	    var al1 = a1 & 0x1fff;
	    var ah1 = a1 >>> 13;
	    var a2 = a[2] | 0;
	    var al2 = a2 & 0x1fff;
	    var ah2 = a2 >>> 13;
	    var a3 = a[3] | 0;
	    var al3 = a3 & 0x1fff;
	    var ah3 = a3 >>> 13;
	    var a4 = a[4] | 0;
	    var al4 = a4 & 0x1fff;
	    var ah4 = a4 >>> 13;
	    var a5 = a[5] | 0;
	    var al5 = a5 & 0x1fff;
	    var ah5 = a5 >>> 13;
	    var a6 = a[6] | 0;
	    var al6 = a6 & 0x1fff;
	    var ah6 = a6 >>> 13;
	    var a7 = a[7] | 0;
	    var al7 = a7 & 0x1fff;
	    var ah7 = a7 >>> 13;
	    var a8 = a[8] | 0;
	    var al8 = a8 & 0x1fff;
	    var ah8 = a8 >>> 13;
	    var a9 = a[9] | 0;
	    var al9 = a9 & 0x1fff;
	    var ah9 = a9 >>> 13;
	    var b0 = b[0] | 0;
	    var bl0 = b0 & 0x1fff;
	    var bh0 = b0 >>> 13;
	    var b1 = b[1] | 0;
	    var bl1 = b1 & 0x1fff;
	    var bh1 = b1 >>> 13;
	    var b2 = b[2] | 0;
	    var bl2 = b2 & 0x1fff;
	    var bh2 = b2 >>> 13;
	    var b3 = b[3] | 0;
	    var bl3 = b3 & 0x1fff;
	    var bh3 = b3 >>> 13;
	    var b4 = b[4] | 0;
	    var bl4 = b4 & 0x1fff;
	    var bh4 = b4 >>> 13;
	    var b5 = b[5] | 0;
	    var bl5 = b5 & 0x1fff;
	    var bh5 = b5 >>> 13;
	    var b6 = b[6] | 0;
	    var bl6 = b6 & 0x1fff;
	    var bh6 = b6 >>> 13;
	    var b7 = b[7] | 0;
	    var bl7 = b7 & 0x1fff;
	    var bh7 = b7 >>> 13;
	    var b8 = b[8] | 0;
	    var bl8 = b8 & 0x1fff;
	    var bh8 = b8 >>> 13;
	    var b9 = b[9] | 0;
	    var bl9 = b9 & 0x1fff;
	    var bh9 = b9 >>> 13;

	    out.negative = self.negative ^ num.negative;
	    out.length = 19;
	    /* k = 0 */
	    lo = Math.imul(al0, bl0);
	    mid = Math.imul(al0, bh0);
	    mid = (mid + Math.imul(ah0, bl0)) | 0;
	    hi = Math.imul(ah0, bh0);
	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
	    w0 &= 0x3ffffff;
	    /* k = 1 */
	    lo = Math.imul(al1, bl0);
	    mid = Math.imul(al1, bh0);
	    mid = (mid + Math.imul(ah1, bl0)) | 0;
	    hi = Math.imul(ah1, bh0);
	    lo = (lo + Math.imul(al0, bl1)) | 0;
	    mid = (mid + Math.imul(al0, bh1)) | 0;
	    mid = (mid + Math.imul(ah0, bl1)) | 0;
	    hi = (hi + Math.imul(ah0, bh1)) | 0;
	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
	    w1 &= 0x3ffffff;
	    /* k = 2 */
	    lo = Math.imul(al2, bl0);
	    mid = Math.imul(al2, bh0);
	    mid = (mid + Math.imul(ah2, bl0)) | 0;
	    hi = Math.imul(ah2, bh0);
	    lo = (lo + Math.imul(al1, bl1)) | 0;
	    mid = (mid + Math.imul(al1, bh1)) | 0;
	    mid = (mid + Math.imul(ah1, bl1)) | 0;
	    hi = (hi + Math.imul(ah1, bh1)) | 0;
	    lo = (lo + Math.imul(al0, bl2)) | 0;
	    mid = (mid + Math.imul(al0, bh2)) | 0;
	    mid = (mid + Math.imul(ah0, bl2)) | 0;
	    hi = (hi + Math.imul(ah0, bh2)) | 0;
	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
	    w2 &= 0x3ffffff;
	    /* k = 3 */
	    lo = Math.imul(al3, bl0);
	    mid = Math.imul(al3, bh0);
	    mid = (mid + Math.imul(ah3, bl0)) | 0;
	    hi = Math.imul(ah3, bh0);
	    lo = (lo + Math.imul(al2, bl1)) | 0;
	    mid = (mid + Math.imul(al2, bh1)) | 0;
	    mid = (mid + Math.imul(ah2, bl1)) | 0;
	    hi = (hi + Math.imul(ah2, bh1)) | 0;
	    lo = (lo + Math.imul(al1, bl2)) | 0;
	    mid = (mid + Math.imul(al1, bh2)) | 0;
	    mid = (mid + Math.imul(ah1, bl2)) | 0;
	    hi = (hi + Math.imul(ah1, bh2)) | 0;
	    lo = (lo + Math.imul(al0, bl3)) | 0;
	    mid = (mid + Math.imul(al0, bh3)) | 0;
	    mid = (mid + Math.imul(ah0, bl3)) | 0;
	    hi = (hi + Math.imul(ah0, bh3)) | 0;
	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
	    w3 &= 0x3ffffff;
	    /* k = 4 */
	    lo = Math.imul(al4, bl0);
	    mid = Math.imul(al4, bh0);
	    mid = (mid + Math.imul(ah4, bl0)) | 0;
	    hi = Math.imul(ah4, bh0);
	    lo = (lo + Math.imul(al3, bl1)) | 0;
	    mid = (mid + Math.imul(al3, bh1)) | 0;
	    mid = (mid + Math.imul(ah3, bl1)) | 0;
	    hi = (hi + Math.imul(ah3, bh1)) | 0;
	    lo = (lo + Math.imul(al2, bl2)) | 0;
	    mid = (mid + Math.imul(al2, bh2)) | 0;
	    mid = (mid + Math.imul(ah2, bl2)) | 0;
	    hi = (hi + Math.imul(ah2, bh2)) | 0;
	    lo = (lo + Math.imul(al1, bl3)) | 0;
	    mid = (mid + Math.imul(al1, bh3)) | 0;
	    mid = (mid + Math.imul(ah1, bl3)) | 0;
	    hi = (hi + Math.imul(ah1, bh3)) | 0;
	    lo = (lo + Math.imul(al0, bl4)) | 0;
	    mid = (mid + Math.imul(al0, bh4)) | 0;
	    mid = (mid + Math.imul(ah0, bl4)) | 0;
	    hi = (hi + Math.imul(ah0, bh4)) | 0;
	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
	    w4 &= 0x3ffffff;
	    /* k = 5 */
	    lo = Math.imul(al5, bl0);
	    mid = Math.imul(al5, bh0);
	    mid = (mid + Math.imul(ah5, bl0)) | 0;
	    hi = Math.imul(ah5, bh0);
	    lo = (lo + Math.imul(al4, bl1)) | 0;
	    mid = (mid + Math.imul(al4, bh1)) | 0;
	    mid = (mid + Math.imul(ah4, bl1)) | 0;
	    hi = (hi + Math.imul(ah4, bh1)) | 0;
	    lo = (lo + Math.imul(al3, bl2)) | 0;
	    mid = (mid + Math.imul(al3, bh2)) | 0;
	    mid = (mid + Math.imul(ah3, bl2)) | 0;
	    hi = (hi + Math.imul(ah3, bh2)) | 0;
	    lo = (lo + Math.imul(al2, bl3)) | 0;
	    mid = (mid + Math.imul(al2, bh3)) | 0;
	    mid = (mid + Math.imul(ah2, bl3)) | 0;
	    hi = (hi + Math.imul(ah2, bh3)) | 0;
	    lo = (lo + Math.imul(al1, bl4)) | 0;
	    mid = (mid + Math.imul(al1, bh4)) | 0;
	    mid = (mid + Math.imul(ah1, bl4)) | 0;
	    hi = (hi + Math.imul(ah1, bh4)) | 0;
	    lo = (lo + Math.imul(al0, bl5)) | 0;
	    mid = (mid + Math.imul(al0, bh5)) | 0;
	    mid = (mid + Math.imul(ah0, bl5)) | 0;
	    hi = (hi + Math.imul(ah0, bh5)) | 0;
	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
	    w5 &= 0x3ffffff;
	    /* k = 6 */
	    lo = Math.imul(al6, bl0);
	    mid = Math.imul(al6, bh0);
	    mid = (mid + Math.imul(ah6, bl0)) | 0;
	    hi = Math.imul(ah6, bh0);
	    lo = (lo + Math.imul(al5, bl1)) | 0;
	    mid = (mid + Math.imul(al5, bh1)) | 0;
	    mid = (mid + Math.imul(ah5, bl1)) | 0;
	    hi = (hi + Math.imul(ah5, bh1)) | 0;
	    lo = (lo + Math.imul(al4, bl2)) | 0;
	    mid = (mid + Math.imul(al4, bh2)) | 0;
	    mid = (mid + Math.imul(ah4, bl2)) | 0;
	    hi = (hi + Math.imul(ah4, bh2)) | 0;
	    lo = (lo + Math.imul(al3, bl3)) | 0;
	    mid = (mid + Math.imul(al3, bh3)) | 0;
	    mid = (mid + Math.imul(ah3, bl3)) | 0;
	    hi = (hi + Math.imul(ah3, bh3)) | 0;
	    lo = (lo + Math.imul(al2, bl4)) | 0;
	    mid = (mid + Math.imul(al2, bh4)) | 0;
	    mid = (mid + Math.imul(ah2, bl4)) | 0;
	    hi = (hi + Math.imul(ah2, bh4)) | 0;
	    lo = (lo + Math.imul(al1, bl5)) | 0;
	    mid = (mid + Math.imul(al1, bh5)) | 0;
	    mid = (mid + Math.imul(ah1, bl5)) | 0;
	    hi = (hi + Math.imul(ah1, bh5)) | 0;
	    lo = (lo + Math.imul(al0, bl6)) | 0;
	    mid = (mid + Math.imul(al0, bh6)) | 0;
	    mid = (mid + Math.imul(ah0, bl6)) | 0;
	    hi = (hi + Math.imul(ah0, bh6)) | 0;
	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
	    w6 &= 0x3ffffff;
	    /* k = 7 */
	    lo = Math.imul(al7, bl0);
	    mid = Math.imul(al7, bh0);
	    mid = (mid + Math.imul(ah7, bl0)) | 0;
	    hi = Math.imul(ah7, bh0);
	    lo = (lo + Math.imul(al6, bl1)) | 0;
	    mid = (mid + Math.imul(al6, bh1)) | 0;
	    mid = (mid + Math.imul(ah6, bl1)) | 0;
	    hi = (hi + Math.imul(ah6, bh1)) | 0;
	    lo = (lo + Math.imul(al5, bl2)) | 0;
	    mid = (mid + Math.imul(al5, bh2)) | 0;
	    mid = (mid + Math.imul(ah5, bl2)) | 0;
	    hi = (hi + Math.imul(ah5, bh2)) | 0;
	    lo = (lo + Math.imul(al4, bl3)) | 0;
	    mid = (mid + Math.imul(al4, bh3)) | 0;
	    mid = (mid + Math.imul(ah4, bl3)) | 0;
	    hi = (hi + Math.imul(ah4, bh3)) | 0;
	    lo = (lo + Math.imul(al3, bl4)) | 0;
	    mid = (mid + Math.imul(al3, bh4)) | 0;
	    mid = (mid + Math.imul(ah3, bl4)) | 0;
	    hi = (hi + Math.imul(ah3, bh4)) | 0;
	    lo = (lo + Math.imul(al2, bl5)) | 0;
	    mid = (mid + Math.imul(al2, bh5)) | 0;
	    mid = (mid + Math.imul(ah2, bl5)) | 0;
	    hi = (hi + Math.imul(ah2, bh5)) | 0;
	    lo = (lo + Math.imul(al1, bl6)) | 0;
	    mid = (mid + Math.imul(al1, bh6)) | 0;
	    mid = (mid + Math.imul(ah1, bl6)) | 0;
	    hi = (hi + Math.imul(ah1, bh6)) | 0;
	    lo = (lo + Math.imul(al0, bl7)) | 0;
	    mid = (mid + Math.imul(al0, bh7)) | 0;
	    mid = (mid + Math.imul(ah0, bl7)) | 0;
	    hi = (hi + Math.imul(ah0, bh7)) | 0;
	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
	    w7 &= 0x3ffffff;
	    /* k = 8 */
	    lo = Math.imul(al8, bl0);
	    mid = Math.imul(al8, bh0);
	    mid = (mid + Math.imul(ah8, bl0)) | 0;
	    hi = Math.imul(ah8, bh0);
	    lo = (lo + Math.imul(al7, bl1)) | 0;
	    mid = (mid + Math.imul(al7, bh1)) | 0;
	    mid = (mid + Math.imul(ah7, bl1)) | 0;
	    hi = (hi + Math.imul(ah7, bh1)) | 0;
	    lo = (lo + Math.imul(al6, bl2)) | 0;
	    mid = (mid + Math.imul(al6, bh2)) | 0;
	    mid = (mid + Math.imul(ah6, bl2)) | 0;
	    hi = (hi + Math.imul(ah6, bh2)) | 0;
	    lo = (lo + Math.imul(al5, bl3)) | 0;
	    mid = (mid + Math.imul(al5, bh3)) | 0;
	    mid = (mid + Math.imul(ah5, bl3)) | 0;
	    hi = (hi + Math.imul(ah5, bh3)) | 0;
	    lo = (lo + Math.imul(al4, bl4)) | 0;
	    mid = (mid + Math.imul(al4, bh4)) | 0;
	    mid = (mid + Math.imul(ah4, bl4)) | 0;
	    hi = (hi + Math.imul(ah4, bh4)) | 0;
	    lo = (lo + Math.imul(al3, bl5)) | 0;
	    mid = (mid + Math.imul(al3, bh5)) | 0;
	    mid = (mid + Math.imul(ah3, bl5)) | 0;
	    hi = (hi + Math.imul(ah3, bh5)) | 0;
	    lo = (lo + Math.imul(al2, bl6)) | 0;
	    mid = (mid + Math.imul(al2, bh6)) | 0;
	    mid = (mid + Math.imul(ah2, bl6)) | 0;
	    hi = (hi + Math.imul(ah2, bh6)) | 0;
	    lo = (lo + Math.imul(al1, bl7)) | 0;
	    mid = (mid + Math.imul(al1, bh7)) | 0;
	    mid = (mid + Math.imul(ah1, bl7)) | 0;
	    hi = (hi + Math.imul(ah1, bh7)) | 0;
	    lo = (lo + Math.imul(al0, bl8)) | 0;
	    mid = (mid + Math.imul(al0, bh8)) | 0;
	    mid = (mid + Math.imul(ah0, bl8)) | 0;
	    hi = (hi + Math.imul(ah0, bh8)) | 0;
	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
	    w8 &= 0x3ffffff;
	    /* k = 9 */
	    lo = Math.imul(al9, bl0);
	    mid = Math.imul(al9, bh0);
	    mid = (mid + Math.imul(ah9, bl0)) | 0;
	    hi = Math.imul(ah9, bh0);
	    lo = (lo + Math.imul(al8, bl1)) | 0;
	    mid = (mid + Math.imul(al8, bh1)) | 0;
	    mid = (mid + Math.imul(ah8, bl1)) | 0;
	    hi = (hi + Math.imul(ah8, bh1)) | 0;
	    lo = (lo + Math.imul(al7, bl2)) | 0;
	    mid = (mid + Math.imul(al7, bh2)) | 0;
	    mid = (mid + Math.imul(ah7, bl2)) | 0;
	    hi = (hi + Math.imul(ah7, bh2)) | 0;
	    lo = (lo + Math.imul(al6, bl3)) | 0;
	    mid = (mid + Math.imul(al6, bh3)) | 0;
	    mid = (mid + Math.imul(ah6, bl3)) | 0;
	    hi = (hi + Math.imul(ah6, bh3)) | 0;
	    lo = (lo + Math.imul(al5, bl4)) | 0;
	    mid = (mid + Math.imul(al5, bh4)) | 0;
	    mid = (mid + Math.imul(ah5, bl4)) | 0;
	    hi = (hi + Math.imul(ah5, bh4)) | 0;
	    lo = (lo + Math.imul(al4, bl5)) | 0;
	    mid = (mid + Math.imul(al4, bh5)) | 0;
	    mid = (mid + Math.imul(ah4, bl5)) | 0;
	    hi = (hi + Math.imul(ah4, bh5)) | 0;
	    lo = (lo + Math.imul(al3, bl6)) | 0;
	    mid = (mid + Math.imul(al3, bh6)) | 0;
	    mid = (mid + Math.imul(ah3, bl6)) | 0;
	    hi = (hi + Math.imul(ah3, bh6)) | 0;
	    lo = (lo + Math.imul(al2, bl7)) | 0;
	    mid = (mid + Math.imul(al2, bh7)) | 0;
	    mid = (mid + Math.imul(ah2, bl7)) | 0;
	    hi = (hi + Math.imul(ah2, bh7)) | 0;
	    lo = (lo + Math.imul(al1, bl8)) | 0;
	    mid = (mid + Math.imul(al1, bh8)) | 0;
	    mid = (mid + Math.imul(ah1, bl8)) | 0;
	    hi = (hi + Math.imul(ah1, bh8)) | 0;
	    lo = (lo + Math.imul(al0, bl9)) | 0;
	    mid = (mid + Math.imul(al0, bh9)) | 0;
	    mid = (mid + Math.imul(ah0, bl9)) | 0;
	    hi = (hi + Math.imul(ah0, bh9)) | 0;
	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
	    w9 &= 0x3ffffff;
	    /* k = 10 */
	    lo = Math.imul(al9, bl1);
	    mid = Math.imul(al9, bh1);
	    mid = (mid + Math.imul(ah9, bl1)) | 0;
	    hi = Math.imul(ah9, bh1);
	    lo = (lo + Math.imul(al8, bl2)) | 0;
	    mid = (mid + Math.imul(al8, bh2)) | 0;
	    mid = (mid + Math.imul(ah8, bl2)) | 0;
	    hi = (hi + Math.imul(ah8, bh2)) | 0;
	    lo = (lo + Math.imul(al7, bl3)) | 0;
	    mid = (mid + Math.imul(al7, bh3)) | 0;
	    mid = (mid + Math.imul(ah7, bl3)) | 0;
	    hi = (hi + Math.imul(ah7, bh3)) | 0;
	    lo = (lo + Math.imul(al6, bl4)) | 0;
	    mid = (mid + Math.imul(al6, bh4)) | 0;
	    mid = (mid + Math.imul(ah6, bl4)) | 0;
	    hi = (hi + Math.imul(ah6, bh4)) | 0;
	    lo = (lo + Math.imul(al5, bl5)) | 0;
	    mid = (mid + Math.imul(al5, bh5)) | 0;
	    mid = (mid + Math.imul(ah5, bl5)) | 0;
	    hi = (hi + Math.imul(ah5, bh5)) | 0;
	    lo = (lo + Math.imul(al4, bl6)) | 0;
	    mid = (mid + Math.imul(al4, bh6)) | 0;
	    mid = (mid + Math.imul(ah4, bl6)) | 0;
	    hi = (hi + Math.imul(ah4, bh6)) | 0;
	    lo = (lo + Math.imul(al3, bl7)) | 0;
	    mid = (mid + Math.imul(al3, bh7)) | 0;
	    mid = (mid + Math.imul(ah3, bl7)) | 0;
	    hi = (hi + Math.imul(ah3, bh7)) | 0;
	    lo = (lo + Math.imul(al2, bl8)) | 0;
	    mid = (mid + Math.imul(al2, bh8)) | 0;
	    mid = (mid + Math.imul(ah2, bl8)) | 0;
	    hi = (hi + Math.imul(ah2, bh8)) | 0;
	    lo = (lo + Math.imul(al1, bl9)) | 0;
	    mid = (mid + Math.imul(al1, bh9)) | 0;
	    mid = (mid + Math.imul(ah1, bl9)) | 0;
	    hi = (hi + Math.imul(ah1, bh9)) | 0;
	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
	    w10 &= 0x3ffffff;
	    /* k = 11 */
	    lo = Math.imul(al9, bl2);
	    mid = Math.imul(al9, bh2);
	    mid = (mid + Math.imul(ah9, bl2)) | 0;
	    hi = Math.imul(ah9, bh2);
	    lo = (lo + Math.imul(al8, bl3)) | 0;
	    mid = (mid + Math.imul(al8, bh3)) | 0;
	    mid = (mid + Math.imul(ah8, bl3)) | 0;
	    hi = (hi + Math.imul(ah8, bh3)) | 0;
	    lo = (lo + Math.imul(al7, bl4)) | 0;
	    mid = (mid + Math.imul(al7, bh4)) | 0;
	    mid = (mid + Math.imul(ah7, bl4)) | 0;
	    hi = (hi + Math.imul(ah7, bh4)) | 0;
	    lo = (lo + Math.imul(al6, bl5)) | 0;
	    mid = (mid + Math.imul(al6, bh5)) | 0;
	    mid = (mid + Math.imul(ah6, bl5)) | 0;
	    hi = (hi + Math.imul(ah6, bh5)) | 0;
	    lo = (lo + Math.imul(al5, bl6)) | 0;
	    mid = (mid + Math.imul(al5, bh6)) | 0;
	    mid = (mid + Math.imul(ah5, bl6)) | 0;
	    hi = (hi + Math.imul(ah5, bh6)) | 0;
	    lo = (lo + Math.imul(al4, bl7)) | 0;
	    mid = (mid + Math.imul(al4, bh7)) | 0;
	    mid = (mid + Math.imul(ah4, bl7)) | 0;
	    hi = (hi + Math.imul(ah4, bh7)) | 0;
	    lo = (lo + Math.imul(al3, bl8)) | 0;
	    mid = (mid + Math.imul(al3, bh8)) | 0;
	    mid = (mid + Math.imul(ah3, bl8)) | 0;
	    hi = (hi + Math.imul(ah3, bh8)) | 0;
	    lo = (lo + Math.imul(al2, bl9)) | 0;
	    mid = (mid + Math.imul(al2, bh9)) | 0;
	    mid = (mid + Math.imul(ah2, bl9)) | 0;
	    hi = (hi + Math.imul(ah2, bh9)) | 0;
	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
	    w11 &= 0x3ffffff;
	    /* k = 12 */
	    lo = Math.imul(al9, bl3);
	    mid = Math.imul(al9, bh3);
	    mid = (mid + Math.imul(ah9, bl3)) | 0;
	    hi = Math.imul(ah9, bh3);
	    lo = (lo + Math.imul(al8, bl4)) | 0;
	    mid = (mid + Math.imul(al8, bh4)) | 0;
	    mid = (mid + Math.imul(ah8, bl4)) | 0;
	    hi = (hi + Math.imul(ah8, bh4)) | 0;
	    lo = (lo + Math.imul(al7, bl5)) | 0;
	    mid = (mid + Math.imul(al7, bh5)) | 0;
	    mid = (mid + Math.imul(ah7, bl5)) | 0;
	    hi = (hi + Math.imul(ah7, bh5)) | 0;
	    lo = (lo + Math.imul(al6, bl6)) | 0;
	    mid = (mid + Math.imul(al6, bh6)) | 0;
	    mid = (mid + Math.imul(ah6, bl6)) | 0;
	    hi = (hi + Math.imul(ah6, bh6)) | 0;
	    lo = (lo + Math.imul(al5, bl7)) | 0;
	    mid = (mid + Math.imul(al5, bh7)) | 0;
	    mid = (mid + Math.imul(ah5, bl7)) | 0;
	    hi = (hi + Math.imul(ah5, bh7)) | 0;
	    lo = (lo + Math.imul(al4, bl8)) | 0;
	    mid = (mid + Math.imul(al4, bh8)) | 0;
	    mid = (mid + Math.imul(ah4, bl8)) | 0;
	    hi = (hi + Math.imul(ah4, bh8)) | 0;
	    lo = (lo + Math.imul(al3, bl9)) | 0;
	    mid = (mid + Math.imul(al3, bh9)) | 0;
	    mid = (mid + Math.imul(ah3, bl9)) | 0;
	    hi = (hi + Math.imul(ah3, bh9)) | 0;
	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
	    w12 &= 0x3ffffff;
	    /* k = 13 */
	    lo = Math.imul(al9, bl4);
	    mid = Math.imul(al9, bh4);
	    mid = (mid + Math.imul(ah9, bl4)) | 0;
	    hi = Math.imul(ah9, bh4);
	    lo = (lo + Math.imul(al8, bl5)) | 0;
	    mid = (mid + Math.imul(al8, bh5)) | 0;
	    mid = (mid + Math.imul(ah8, bl5)) | 0;
	    hi = (hi + Math.imul(ah8, bh5)) | 0;
	    lo = (lo + Math.imul(al7, bl6)) | 0;
	    mid = (mid + Math.imul(al7, bh6)) | 0;
	    mid = (mid + Math.imul(ah7, bl6)) | 0;
	    hi = (hi + Math.imul(ah7, bh6)) | 0;
	    lo = (lo + Math.imul(al6, bl7)) | 0;
	    mid = (mid + Math.imul(al6, bh7)) | 0;
	    mid = (mid + Math.imul(ah6, bl7)) | 0;
	    hi = (hi + Math.imul(ah6, bh7)) | 0;
	    lo = (lo + Math.imul(al5, bl8)) | 0;
	    mid = (mid + Math.imul(al5, bh8)) | 0;
	    mid = (mid + Math.imul(ah5, bl8)) | 0;
	    hi = (hi + Math.imul(ah5, bh8)) | 0;
	    lo = (lo + Math.imul(al4, bl9)) | 0;
	    mid = (mid + Math.imul(al4, bh9)) | 0;
	    mid = (mid + Math.imul(ah4, bl9)) | 0;
	    hi = (hi + Math.imul(ah4, bh9)) | 0;
	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
	    w13 &= 0x3ffffff;
	    /* k = 14 */
	    lo = Math.imul(al9, bl5);
	    mid = Math.imul(al9, bh5);
	    mid = (mid + Math.imul(ah9, bl5)) | 0;
	    hi = Math.imul(ah9, bh5);
	    lo = (lo + Math.imul(al8, bl6)) | 0;
	    mid = (mid + Math.imul(al8, bh6)) | 0;
	    mid = (mid + Math.imul(ah8, bl6)) | 0;
	    hi = (hi + Math.imul(ah8, bh6)) | 0;
	    lo = (lo + Math.imul(al7, bl7)) | 0;
	    mid = (mid + Math.imul(al7, bh7)) | 0;
	    mid = (mid + Math.imul(ah7, bl7)) | 0;
	    hi = (hi + Math.imul(ah7, bh7)) | 0;
	    lo = (lo + Math.imul(al6, bl8)) | 0;
	    mid = (mid + Math.imul(al6, bh8)) | 0;
	    mid = (mid + Math.imul(ah6, bl8)) | 0;
	    hi = (hi + Math.imul(ah6, bh8)) | 0;
	    lo = (lo + Math.imul(al5, bl9)) | 0;
	    mid = (mid + Math.imul(al5, bh9)) | 0;
	    mid = (mid + Math.imul(ah5, bl9)) | 0;
	    hi = (hi + Math.imul(ah5, bh9)) | 0;
	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
	    w14 &= 0x3ffffff;
	    /* k = 15 */
	    lo = Math.imul(al9, bl6);
	    mid = Math.imul(al9, bh6);
	    mid = (mid + Math.imul(ah9, bl6)) | 0;
	    hi = Math.imul(ah9, bh6);
	    lo = (lo + Math.imul(al8, bl7)) | 0;
	    mid = (mid + Math.imul(al8, bh7)) | 0;
	    mid = (mid + Math.imul(ah8, bl7)) | 0;
	    hi = (hi + Math.imul(ah8, bh7)) | 0;
	    lo = (lo + Math.imul(al7, bl8)) | 0;
	    mid = (mid + Math.imul(al7, bh8)) | 0;
	    mid = (mid + Math.imul(ah7, bl8)) | 0;
	    hi = (hi + Math.imul(ah7, bh8)) | 0;
	    lo = (lo + Math.imul(al6, bl9)) | 0;
	    mid = (mid + Math.imul(al6, bh9)) | 0;
	    mid = (mid + Math.imul(ah6, bl9)) | 0;
	    hi = (hi + Math.imul(ah6, bh9)) | 0;
	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
	    w15 &= 0x3ffffff;
	    /* k = 16 */
	    lo = Math.imul(al9, bl7);
	    mid = Math.imul(al9, bh7);
	    mid = (mid + Math.imul(ah9, bl7)) | 0;
	    hi = Math.imul(ah9, bh7);
	    lo = (lo + Math.imul(al8, bl8)) | 0;
	    mid = (mid + Math.imul(al8, bh8)) | 0;
	    mid = (mid + Math.imul(ah8, bl8)) | 0;
	    hi = (hi + Math.imul(ah8, bh8)) | 0;
	    lo = (lo + Math.imul(al7, bl9)) | 0;
	    mid = (mid + Math.imul(al7, bh9)) | 0;
	    mid = (mid + Math.imul(ah7, bl9)) | 0;
	    hi = (hi + Math.imul(ah7, bh9)) | 0;
	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
	    w16 &= 0x3ffffff;
	    /* k = 17 */
	    lo = Math.imul(al9, bl8);
	    mid = Math.imul(al9, bh8);
	    mid = (mid + Math.imul(ah9, bl8)) | 0;
	    hi = Math.imul(ah9, bh8);
	    lo = (lo + Math.imul(al8, bl9)) | 0;
	    mid = (mid + Math.imul(al8, bh9)) | 0;
	    mid = (mid + Math.imul(ah8, bl9)) | 0;
	    hi = (hi + Math.imul(ah8, bh9)) | 0;
	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
	    w17 &= 0x3ffffff;
	    /* k = 18 */
	    lo = Math.imul(al9, bl9);
	    mid = Math.imul(al9, bh9);
	    mid = (mid + Math.imul(ah9, bl9)) | 0;
	    hi = Math.imul(ah9, bh9);
	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
	    w18 &= 0x3ffffff;
	    o[0] = w0;
	    o[1] = w1;
	    o[2] = w2;
	    o[3] = w3;
	    o[4] = w4;
	    o[5] = w5;
	    o[6] = w6;
	    o[7] = w7;
	    o[8] = w8;
	    o[9] = w9;
	    o[10] = w10;
	    o[11] = w11;
	    o[12] = w12;
	    o[13] = w13;
	    o[14] = w14;
	    o[15] = w15;
	    o[16] = w16;
	    o[17] = w17;
	    o[18] = w18;
	    if (c !== 0) {
	      o[19] = c;
	      out.length++;
	    }
	    return out;
	  };

	  // Polyfill comb
	  if (!Math.imul) {
	    comb10MulTo = smallMulTo;
	  }

	  function bigMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    out.length = self.length + num.length;

	    var carry = 0;
	    var hncarry = 0;
	    for (var k = 0; k < out.length - 1; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = hncarry;
	      hncarry = 0;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j;
	        var a = self.words[i] | 0;
	        var b = num.words[j] | 0;
	        var r = a * b;

	        var lo = r & 0x3ffffff;
	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	        lo = (lo + rword) | 0;
	        rword = lo & 0x3ffffff;
	        ncarry = (ncarry + (lo >>> 26)) | 0;

	        hncarry += ncarry >>> 26;
	        ncarry &= 0x3ffffff;
	      }
	      out.words[k] = rword;
	      carry = ncarry;
	      ncarry = hncarry;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry;
	    } else {
	      out.length--;
	    }

	    return out.strip();
	  }

	  function jumboMulTo (self, num, out) {
	    var fftm = new FFTM();
	    return fftm.mulp(self, num, out);
	  }

	  BN.prototype.mulTo = function mulTo (num, out) {
	    var res;
	    var len = this.length + num.length;
	    if (this.length === 10 && num.length === 10) {
	      res = comb10MulTo(this, num, out);
	    } else if (len < 63) {
	      res = smallMulTo(this, num, out);
	    } else if (len < 1024) {
	      res = bigMulTo(this, num, out);
	    } else {
	      res = jumboMulTo(this, num, out);
	    }

	    return res;
	  };

	  // Cooley-Tukey algorithm for FFT
	  // slightly revisited to rely on looping instead of recursion

	  function FFTM (x, y) {
	    this.x = x;
	    this.y = y;
	  }

	  FFTM.prototype.makeRBT = function makeRBT (N) {
	    var t = new Array(N);
	    var l = BN.prototype._countBits(N) - 1;
	    for (var i = 0; i < N; i++) {
	      t[i] = this.revBin(i, l, N);
	    }

	    return t;
	  };

	  // Returns binary-reversed representation of `x`
	  FFTM.prototype.revBin = function revBin (x, l, N) {
	    if (x === 0 || x === N - 1) return x;

	    var rb = 0;
	    for (var i = 0; i < l; i++) {
	      rb |= (x & 1) << (l - i - 1);
	      x >>= 1;
	    }

	    return rb;
	  };

	  // Performs "tweedling" phase, therefore 'emulating'
	  // behaviour of the recursive algorithm
	  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
	    for (var i = 0; i < N; i++) {
	      rtws[i] = rws[rbt[i]];
	      itws[i] = iws[rbt[i]];
	    }
	  };

	  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
	    this.permute(rbt, rws, iws, rtws, itws, N);

	    for (var s = 1; s < N; s <<= 1) {
	      var l = s << 1;

	      var rtwdf = Math.cos(2 * Math.PI / l);
	      var itwdf = Math.sin(2 * Math.PI / l);

	      for (var p = 0; p < N; p += l) {
	        var rtwdf_ = rtwdf;
	        var itwdf_ = itwdf;

	        for (var j = 0; j < s; j++) {
	          var re = rtws[p + j];
	          var ie = itws[p + j];

	          var ro = rtws[p + j + s];
	          var io = itws[p + j + s];

	          var rx = rtwdf_ * ro - itwdf_ * io;

	          io = rtwdf_ * io + itwdf_ * ro;
	          ro = rx;

	          rtws[p + j] = re + ro;
	          itws[p + j] = ie + io;

	          rtws[p + j + s] = re - ro;
	          itws[p + j + s] = ie - io;

	          /* jshint maxdepth : false */
	          if (j !== l) {
	            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

	            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
	            rtwdf_ = rx;
	          }
	        }
	      }
	    }
	  };

	  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
	    var N = Math.max(m, n) | 1;
	    var odd = N & 1;
	    var i = 0;
	    for (N = N / 2 | 0; N; N = N >>> 1) {
	      i++;
	    }

	    return 1 << i + 1 + odd;
	  };

	  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
	    if (N <= 1) return;

	    for (var i = 0; i < N / 2; i++) {
	      var t = rws[i];

	      rws[i] = rws[N - i - 1];
	      rws[N - i - 1] = t;

	      t = iws[i];

	      iws[i] = -iws[N - i - 1];
	      iws[N - i - 1] = -t;
	    }
	  };

	  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
	    var carry = 0;
	    for (var i = 0; i < N / 2; i++) {
	      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
	        Math.round(ws[2 * i] / N) +
	        carry;

	      ws[i] = w & 0x3ffffff;

	      if (w < 0x4000000) {
	        carry = 0;
	      } else {
	        carry = w / 0x4000000 | 0;
	      }
	    }

	    return ws;
	  };

	  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
	    var carry = 0;
	    for (var i = 0; i < len; i++) {
	      carry = carry + (ws[i] | 0);

	      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
	      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
	    }

	    // Pad with zeroes
	    for (i = 2 * len; i < N; ++i) {
	      rws[i] = 0;
	    }

	    assert(carry === 0);
	    assert((carry & ~0x1fff) === 0);
	  };

	  FFTM.prototype.stub = function stub (N) {
	    var ph = new Array(N);
	    for (var i = 0; i < N; i++) {
	      ph[i] = 0;
	    }

	    return ph;
	  };

	  FFTM.prototype.mulp = function mulp (x, y, out) {
	    var N = 2 * this.guessLen13b(x.length, y.length);

	    var rbt = this.makeRBT(N);

	    var _ = this.stub(N);

	    var rws = new Array(N);
	    var rwst = new Array(N);
	    var iwst = new Array(N);

	    var nrws = new Array(N);
	    var nrwst = new Array(N);
	    var niwst = new Array(N);

	    var rmws = out.words;
	    rmws.length = N;

	    this.convert13b(x.words, x.length, rws, N);
	    this.convert13b(y.words, y.length, nrws, N);

	    this.transform(rws, _, rwst, iwst, N, rbt);
	    this.transform(nrws, _, nrwst, niwst, N, rbt);

	    for (var i = 0; i < N; i++) {
	      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
	      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
	      rwst[i] = rx;
	    }

	    this.conjugate(rwst, iwst, N);
	    this.transform(rwst, iwst, rmws, _, N, rbt);
	    this.conjugate(rmws, _, N);
	    this.normalize13b(rmws, N);

	    out.negative = x.negative ^ y.negative;
	    out.length = x.length + y.length;
	    return out.strip();
	  };

	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return this.mulTo(num, out);
	  };

	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return jumboMulTo(this, num, out);
	  };

	  // In-place Multiplication
	  BN.prototype.imul = function imul (num) {
	    return this.clone().mulTo(num, this);
	  };

	  BN.prototype.imuln = function imuln (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);

	    // Carry
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = (this.words[i] | 0) * num;
	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
	      carry >>= 26;
	      carry += (w / 0x4000000) | 0;
	      // NOTE: lo is 27bit maximum
	      carry += lo >>> 26;
	      this.words[i] = lo & 0x3ffffff;
	    }

	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }

	    return this;
	  };

	  BN.prototype.muln = function muln (num) {
	    return this.clone().imuln(num);
	  };

	  // `this` * `this`
	  BN.prototype.sqr = function sqr () {
	    return this.mul(this);
	  };

	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr () {
	    return this.imul(this.clone());
	  };

	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow (num) {
	    var w = toBitArray(num);
	    if (w.length === 0) return new BN(1);

	    // Skip leading zeroes
	    var res = this;
	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
	      if (w[i] !== 0) break;
	    }

	    if (++i < w.length) {
	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
	        if (w[i] === 0) continue;

	        res = res.mul(q);
	      }
	    }

	    return res;
	  };

	  // Shift-left in-place
	  BN.prototype.iushln = function iushln (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
	    var i;

	    if (r !== 0) {
	      var carry = 0;

	      for (i = 0; i < this.length; i++) {
	        var newCarry = this.words[i] & carryMask;
	        var c = ((this.words[i] | 0) - newCarry) << r;
	        this.words[i] = c | carry;
	        carry = newCarry >>> (26 - r);
	      }

	      if (carry) {
	        this.words[i] = carry;
	        this.length++;
	      }
	    }

	    if (s !== 0) {
	      for (i = this.length - 1; i >= 0; i--) {
	        this.words[i + s] = this.words[i];
	      }

	      for (i = 0; i < s; i++) {
	        this.words[i] = 0;
	      }

	      this.length += s;
	    }

	    return this.strip();
	  };

	  BN.prototype.ishln = function ishln (bits) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushln(bits);
	  };

	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var h;
	    if (hint) {
	      h = (hint - (hint % 26)) / 26;
	    } else {
	      h = 0;
	    }

	    var r = bits % 26;
	    var s = Math.min((bits - r) / 26, this.length);
	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	    var maskedWords = extended;

	    h -= s;
	    h = Math.max(0, h);

	    // Extended mode, copy masked part
	    if (maskedWords) {
	      for (var i = 0; i < s; i++) {
	        maskedWords.words[i] = this.words[i];
	      }
	      maskedWords.length = s;
	    }

	    if (s === 0) ; else if (this.length > s) {
	      this.length -= s;
	      for (i = 0; i < this.length; i++) {
	        this.words[i] = this.words[i + s];
	      }
	    } else {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    var carry = 0;
	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
	      var word = this.words[i] | 0;
	      this.words[i] = (carry << (26 - r)) | (word >>> r);
	      carry = word & mask;
	    }

	    // Push carried bits as a mask
	    if (maskedWords && carry !== 0) {
	      maskedWords.words[maskedWords.length++] = carry;
	    }

	    if (this.length === 0) {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    return this.strip();
	  };

	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushrn(bits, hint, extended);
	  };

	  // Shift-left
	  BN.prototype.shln = function shln (bits) {
	    return this.clone().ishln(bits);
	  };

	  BN.prototype.ushln = function ushln (bits) {
	    return this.clone().iushln(bits);
	  };

	  // Shift-right
	  BN.prototype.shrn = function shrn (bits) {
	    return this.clone().ishrn(bits);
	  };

	  BN.prototype.ushrn = function ushrn (bits) {
	    return this.clone().iushrn(bits);
	  };

	  // Test if n bit is set
	  BN.prototype.testn = function testn (bit) {
	    assert(typeof bit === 'number' && bit >= 0);
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) return false;

	    // Check bit and return
	    var w = this.words[s];

	    return !!(w & q);
	  };

	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;

	    assert(this.negative === 0, 'imaskn works only with positive numbers');

	    if (this.length <= s) {
	      return this;
	    }

	    if (r !== 0) {
	      s++;
	    }
	    this.length = Math.min(s, this.length);

	    if (r !== 0) {
	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	      this.words[this.length - 1] &= mask;
	    }

	    return this.strip();
	  };

	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn (bits) {
	    return this.clone().imaskn(bits);
	  };

	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.isubn(-num);

	    // Possible sign change
	    if (this.negative !== 0) {
	      if (this.length === 1 && (this.words[0] | 0) < num) {
	        this.words[0] = num - (this.words[0] | 0);
	        this.negative = 0;
	        return this;
	      }

	      this.negative = 0;
	      this.isubn(num);
	      this.negative = 1;
	      return this;
	    }

	    // Add without checks
	    return this._iaddn(num);
	  };

	  BN.prototype._iaddn = function _iaddn (num) {
	    this.words[0] += num;

	    // Carry
	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	      this.words[i] -= 0x4000000;
	      if (i === this.length - 1) {
	        this.words[i + 1] = 1;
	      } else {
	        this.words[i + 1]++;
	      }
	    }
	    this.length = Math.max(this.length, i + 1);

	    return this;
	  };

	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.iaddn(-num);

	    if (this.negative !== 0) {
	      this.negative = 0;
	      this.iaddn(num);
	      this.negative = 1;
	      return this;
	    }

	    this.words[0] -= num;

	    if (this.length === 1 && this.words[0] < 0) {
	      this.words[0] = -this.words[0];
	      this.negative = 1;
	    } else {
	      // Carry
	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	        this.words[i] += 0x4000000;
	        this.words[i + 1] -= 1;
	      }
	    }

	    return this.strip();
	  };

	  BN.prototype.addn = function addn (num) {
	    return this.clone().iaddn(num);
	  };

	  BN.prototype.subn = function subn (num) {
	    return this.clone().isubn(num);
	  };

	  BN.prototype.iabs = function iabs () {
	    this.negative = 0;

	    return this;
	  };

	  BN.prototype.abs = function abs () {
	    return this.clone().iabs();
	  };

	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
	    var len = num.length + shift;
	    var i;

	    this._expand(len);

	    var w;
	    var carry = 0;
	    for (i = 0; i < num.length; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      var right = (num.words[i] | 0) * mul;
	      w -= right & 0x3ffffff;
	      carry = (w >> 26) - ((right / 0x4000000) | 0);
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    for (; i < this.length - shift; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      carry = w >> 26;
	      this.words[i + shift] = w & 0x3ffffff;
	    }

	    if (carry === 0) return this.strip();

	    // Subtraction overflow
	    assert(carry === -1);
	    carry = 0;
	    for (i = 0; i < this.length; i++) {
	      w = -(this.words[i] | 0) + carry;
	      carry = w >> 26;
	      this.words[i] = w & 0x3ffffff;
	    }
	    this.negative = 1;

	    return this.strip();
	  };

	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
	    var shift = this.length - num.length;

	    var a = this.clone();
	    var b = num;

	    // Normalize
	    var bhi = b.words[b.length - 1] | 0;
	    var bhiBits = this._countBits(bhi);
	    shift = 26 - bhiBits;
	    if (shift !== 0) {
	      b = b.ushln(shift);
	      a.iushln(shift);
	      bhi = b.words[b.length - 1] | 0;
	    }

	    // Initialize quotient
	    var m = a.length - b.length;
	    var q;

	    if (mode !== 'mod') {
	      q = new BN(null);
	      q.length = m + 1;
	      q.words = new Array(q.length);
	      for (var i = 0; i < q.length; i++) {
	        q.words[i] = 0;
	      }
	    }

	    var diff = a.clone()._ishlnsubmul(b, 1, m);
	    if (diff.negative === 0) {
	      a = diff;
	      if (q) {
	        q.words[m] = 1;
	      }
	    }

	    for (var j = m - 1; j >= 0; j--) {
	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
	        (a.words[b.length + j - 1] | 0);

	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
	      // (0x7ffffff)
	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

	      a._ishlnsubmul(b, qj, j);
	      while (a.negative !== 0) {
	        qj--;
	        a.negative = 0;
	        a._ishlnsubmul(b, 1, j);
	        if (!a.isZero()) {
	          a.negative ^= 1;
	        }
	      }
	      if (q) {
	        q.words[j] = qj;
	      }
	    }
	    if (q) {
	      q.strip();
	    }
	    a.strip();

	    // Denormalize
	    if (mode !== 'div' && shift !== 0) {
	      a.iushrn(shift);
	    }

	    return {
	      div: q || null,
	      mod: a
	    };
	  };

	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod (num, mode, positive) {
	    assert(!num.isZero());

	    if (this.isZero()) {
	      return {
	        div: new BN(0),
	        mod: new BN(0)
	      };
	    }

	    var div, mod, res;
	    if (this.negative !== 0 && num.negative === 0) {
	      res = this.neg().divmod(num, mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.iadd(num);
	        }
	      }

	      return {
	        div: div,
	        mod: mod
	      };
	    }

	    if (this.negative === 0 && num.negative !== 0) {
	      res = this.divmod(num.neg(), mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      return {
	        div: div,
	        mod: res.mod
	      };
	    }

	    if ((this.negative & num.negative) !== 0) {
	      res = this.neg().divmod(num.neg(), mode);

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.isub(num);
	        }
	      }

	      return {
	        div: res.div,
	        mod: mod
	      };
	    }

	    // Both numbers are positive at this point

	    // Strip both numbers to approximate shift value
	    if (num.length > this.length || this.cmp(num) < 0) {
	      return {
	        div: new BN(0),
	        mod: this
	      };
	    }

	    // Very short reduction
	    if (num.length === 1) {
	      if (mode === 'div') {
	        return {
	          div: this.divn(num.words[0]),
	          mod: null
	        };
	      }

	      if (mode === 'mod') {
	        return {
	          div: null,
	          mod: new BN(this.modn(num.words[0]))
	        };
	      }

	      return {
	        div: this.divn(num.words[0]),
	        mod: new BN(this.modn(num.words[0]))
	      };
	    }

	    return this._wordDiv(num, mode);
	  };

	  // Find `this` / `num`
	  BN.prototype.div = function div (num) {
	    return this.divmod(num, 'div', false).div;
	  };

	  // Find `this` % `num`
	  BN.prototype.mod = function mod (num) {
	    return this.divmod(num, 'mod', false).mod;
	  };

	  BN.prototype.umod = function umod (num) {
	    return this.divmod(num, 'mod', true).mod;
	  };

	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound (num) {
	    var dm = this.divmod(num);

	    // Fast case - exact division
	    if (dm.mod.isZero()) return dm.div;

	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

	    var half = num.ushrn(1);
	    var r2 = num.andln(1);
	    var cmp = mod.cmp(half);

	    // Round down
	    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

	    // Round up
	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };

	  BN.prototype.modn = function modn (num) {
	    assert(num <= 0x3ffffff);
	    var p = (1 << 26) % num;

	    var acc = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      acc = (p * acc + (this.words[i] | 0)) % num;
	    }

	    return acc;
	  };

	  // In-place division by number
	  BN.prototype.idivn = function idivn (num) {
	    assert(num <= 0x3ffffff);

	    var carry = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var w = (this.words[i] | 0) + carry * 0x4000000;
	      this.words[i] = (w / num) | 0;
	      carry = w % num;
	    }

	    return this.strip();
	  };

	  BN.prototype.divn = function divn (num) {
	    return this.clone().idivn(num);
	  };

	  BN.prototype.egcd = function egcd (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var x = this;
	    var y = p.clone();

	    if (x.negative !== 0) {
	      x = x.umod(p);
	    } else {
	      x = x.clone();
	    }

	    // A * x + B * y = x
	    var A = new BN(1);
	    var B = new BN(0);

	    // C * x + D * y = y
	    var C = new BN(0);
	    var D = new BN(1);

	    var g = 0;

	    while (x.isEven() && y.isEven()) {
	      x.iushrn(1);
	      y.iushrn(1);
	      ++g;
	    }

	    var yp = y.clone();
	    var xp = x.clone();

	    while (!x.isZero()) {
	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        x.iushrn(i);
	        while (i-- > 0) {
	          if (A.isOdd() || B.isOdd()) {
	            A.iadd(yp);
	            B.isub(xp);
	          }

	          A.iushrn(1);
	          B.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        y.iushrn(j);
	        while (j-- > 0) {
	          if (C.isOdd() || D.isOdd()) {
	            C.iadd(yp);
	            D.isub(xp);
	          }

	          C.iushrn(1);
	          D.iushrn(1);
	        }
	      }

	      if (x.cmp(y) >= 0) {
	        x.isub(y);
	        A.isub(C);
	        B.isub(D);
	      } else {
	        y.isub(x);
	        C.isub(A);
	        D.isub(B);
	      }
	    }

	    return {
	      a: C,
	      b: D,
	      gcd: y.iushln(g)
	    };
	  };

	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var a = this;
	    var b = p.clone();

	    if (a.negative !== 0) {
	      a = a.umod(p);
	    } else {
	      a = a.clone();
	    }

	    var x1 = new BN(1);
	    var x2 = new BN(0);

	    var delta = b.clone();

	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        a.iushrn(i);
	        while (i-- > 0) {
	          if (x1.isOdd()) {
	            x1.iadd(delta);
	          }

	          x1.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        b.iushrn(j);
	        while (j-- > 0) {
	          if (x2.isOdd()) {
	            x2.iadd(delta);
	          }

	          x2.iushrn(1);
	        }
	      }

	      if (a.cmp(b) >= 0) {
	        a.isub(b);
	        x1.isub(x2);
	      } else {
	        b.isub(a);
	        x2.isub(x1);
	      }
	    }

	    var res;
	    if (a.cmpn(1) === 0) {
	      res = x1;
	    } else {
	      res = x2;
	    }

	    if (res.cmpn(0) < 0) {
	      res.iadd(p);
	    }

	    return res;
	  };

	  BN.prototype.gcd = function gcd (num) {
	    if (this.isZero()) return num.abs();
	    if (num.isZero()) return this.abs();

	    var a = this.clone();
	    var b = num.clone();
	    a.negative = 0;
	    b.negative = 0;

	    // Remove common factor of two
	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	      a.iushrn(1);
	      b.iushrn(1);
	    }

	    do {
	      while (a.isEven()) {
	        a.iushrn(1);
	      }
	      while (b.isEven()) {
	        b.iushrn(1);
	      }

	      var r = a.cmp(b);
	      if (r < 0) {
	        // Swap `a` and `b` to make `a` always bigger than `b`
	        var t = a;
	        a = b;
	        b = t;
	      } else if (r === 0 || b.cmpn(1) === 0) {
	        break;
	      }

	      a.isub(b);
	    } while (true);

	    return b.iushln(shift);
	  };

	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm (num) {
	    return this.egcd(num).a.umod(num);
	  };

	  BN.prototype.isEven = function isEven () {
	    return (this.words[0] & 1) === 0;
	  };

	  BN.prototype.isOdd = function isOdd () {
	    return (this.words[0] & 1) === 1;
	  };

	  // And first word and num
	  BN.prototype.andln = function andln (num) {
	    return this.words[0] & num;
	  };

	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn (bit) {
	    assert(typeof bit === 'number');
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) {
	      this._expand(s + 1);
	      this.words[s] |= q;
	      return this;
	    }

	    // Add bit and propagate, if needed
	    var carry = q;
	    for (var i = s; carry !== 0 && i < this.length; i++) {
	      var w = this.words[i] | 0;
	      w += carry;
	      carry = w >>> 26;
	      w &= 0x3ffffff;
	      this.words[i] = w;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return this;
	  };

	  BN.prototype.isZero = function isZero () {
	    return this.length === 1 && this.words[0] === 0;
	  };

	  BN.prototype.cmpn = function cmpn (num) {
	    var negative = num < 0;

	    if (this.negative !== 0 && !negative) return -1;
	    if (this.negative === 0 && negative) return 1;

	    this.strip();

	    var res;
	    if (this.length > 1) {
	      res = 1;
	    } else {
	      if (negative) {
	        num = -num;
	      }

	      assert(num <= 0x3ffffff, 'Number is too big');

	      var w = this.words[0] | 0;
	      res = w === num ? 0 : w < num ? -1 : 1;
	    }
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp (num) {
	    if (this.negative !== 0 && num.negative === 0) return -1;
	    if (this.negative === 0 && num.negative !== 0) return 1;

	    var res = this.ucmp(num);
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp (num) {
	    // At this point both numbers have the same sign
	    if (this.length > num.length) return 1;
	    if (this.length < num.length) return -1;

	    var res = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var a = this.words[i] | 0;
	      var b = num.words[i] | 0;

	      if (a === b) continue;
	      if (a < b) {
	        res = -1;
	      } else if (a > b) {
	        res = 1;
	      }
	      break;
	    }
	    return res;
	  };

	  BN.prototype.gtn = function gtn (num) {
	    return this.cmpn(num) === 1;
	  };

	  BN.prototype.gt = function gt (num) {
	    return this.cmp(num) === 1;
	  };

	  BN.prototype.gten = function gten (num) {
	    return this.cmpn(num) >= 0;
	  };

	  BN.prototype.gte = function gte (num) {
	    return this.cmp(num) >= 0;
	  };

	  BN.prototype.ltn = function ltn (num) {
	    return this.cmpn(num) === -1;
	  };

	  BN.prototype.lt = function lt (num) {
	    return this.cmp(num) === -1;
	  };

	  BN.prototype.lten = function lten (num) {
	    return this.cmpn(num) <= 0;
	  };

	  BN.prototype.lte = function lte (num) {
	    return this.cmp(num) <= 0;
	  };

	  BN.prototype.eqn = function eqn (num) {
	    return this.cmpn(num) === 0;
	  };

	  BN.prototype.eq = function eq (num) {
	    return this.cmp(num) === 0;
	  };

	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red (num) {
	    return new Red(num);
	  };

	  BN.prototype.toRed = function toRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    assert(this.negative === 0, 'red works only with positives');
	    return ctx.convertTo(this)._forceRed(ctx);
	  };

	  BN.prototype.fromRed = function fromRed () {
	    assert(this.red, 'fromRed works only with numbers in reduction context');
	    return this.red.convertFrom(this);
	  };

	  BN.prototype._forceRed = function _forceRed (ctx) {
	    this.red = ctx;
	    return this;
	  };

	  BN.prototype.forceRed = function forceRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    return this._forceRed(ctx);
	  };

	  BN.prototype.redAdd = function redAdd (num) {
	    assert(this.red, 'redAdd works only with red numbers');
	    return this.red.add(this, num);
	  };

	  BN.prototype.redIAdd = function redIAdd (num) {
	    assert(this.red, 'redIAdd works only with red numbers');
	    return this.red.iadd(this, num);
	  };

	  BN.prototype.redSub = function redSub (num) {
	    assert(this.red, 'redSub works only with red numbers');
	    return this.red.sub(this, num);
	  };

	  BN.prototype.redISub = function redISub (num) {
	    assert(this.red, 'redISub works only with red numbers');
	    return this.red.isub(this, num);
	  };

	  BN.prototype.redShl = function redShl (num) {
	    assert(this.red, 'redShl works only with red numbers');
	    return this.red.shl(this, num);
	  };

	  BN.prototype.redMul = function redMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.mul(this, num);
	  };

	  BN.prototype.redIMul = function redIMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.imul(this, num);
	  };

	  BN.prototype.redSqr = function redSqr () {
	    assert(this.red, 'redSqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqr(this);
	  };

	  BN.prototype.redISqr = function redISqr () {
	    assert(this.red, 'redISqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.isqr(this);
	  };

	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt () {
	    assert(this.red, 'redSqrt works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqrt(this);
	  };

	  BN.prototype.redInvm = function redInvm () {
	    assert(this.red, 'redInvm works only with red numbers');
	    this.red._verify1(this);
	    return this.red.invm(this);
	  };

	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg () {
	    assert(this.red, 'redNeg works only with red numbers');
	    this.red._verify1(this);
	    return this.red.neg(this);
	  };

	  BN.prototype.redPow = function redPow (num) {
	    assert(this.red && !num.red, 'redPow(normalNum)');
	    this.red._verify1(this);
	    return this.red.pow(this, num);
	  };

	  // Prime numbers with efficient reduction
	  var primes = {
	    k256: null,
	    p224: null,
	    p192: null,
	    p25519: null
	  };

	  // Pseudo-Mersenne prime
	  function MPrime (name, p) {
	    // P = 2 ^ N - K
	    this.name = name;
	    this.p = new BN(p, 16);
	    this.n = this.p.bitLength();
	    this.k = new BN(1).iushln(this.n).isub(this.p);

	    this.tmp = this._tmp();
	  }

	  MPrime.prototype._tmp = function _tmp () {
	    var tmp = new BN(null);
	    tmp.words = new Array(Math.ceil(this.n / 13));
	    return tmp;
	  };

	  MPrime.prototype.ireduce = function ireduce (num) {
	    // Assumes that `num` is less than `P^2`
	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	    var r = num;
	    var rlen;

	    do {
	      this.split(r, this.tmp);
	      r = this.imulK(r);
	      r = r.iadd(this.tmp);
	      rlen = r.bitLength();
	    } while (rlen > this.n);

	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
	    if (cmp === 0) {
	      r.words[0] = 0;
	      r.length = 1;
	    } else if (cmp > 0) {
	      r.isub(this.p);
	    } else {
	      if (r.strip !== undefined) {
	        // r is BN v4 instance
	        r.strip();
	      } else {
	        // r is BN v5 instance
	        r._strip();
	      }
	    }

	    return r;
	  };

	  MPrime.prototype.split = function split (input, out) {
	    input.iushrn(this.n, 0, out);
	  };

	  MPrime.prototype.imulK = function imulK (num) {
	    return num.imul(this.k);
	  };

	  function K256 () {
	    MPrime.call(
	      this,
	      'k256',
	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);

	  K256.prototype.split = function split (input, output) {
	    // 256 = 9 * 26 + 22
	    var mask = 0x3fffff;

	    var outLen = Math.min(input.length, 9);
	    for (var i = 0; i < outLen; i++) {
	      output.words[i] = input.words[i];
	    }
	    output.length = outLen;

	    if (input.length <= 9) {
	      input.words[0] = 0;
	      input.length = 1;
	      return;
	    }

	    // Shift by 9 limbs
	    var prev = input.words[9];
	    output.words[output.length++] = prev & mask;

	    for (i = 10; i < input.length; i++) {
	      var next = input.words[i] | 0;
	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
	      prev = next;
	    }
	    prev >>>= 22;
	    input.words[i - 10] = prev;
	    if (prev === 0 && input.length > 10) {
	      input.length -= 10;
	    } else {
	      input.length -= 9;
	    }
	  };

	  K256.prototype.imulK = function imulK (num) {
	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	    num.words[num.length] = 0;
	    num.words[num.length + 1] = 0;
	    num.length += 2;

	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
	    var lo = 0;
	    for (var i = 0; i < num.length; i++) {
	      var w = num.words[i] | 0;
	      lo += w * 0x3d1;
	      num.words[i] = lo & 0x3ffffff;
	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
	    }

	    // Fast length reduction
	    if (num.words[num.length - 1] === 0) {
	      num.length--;
	      if (num.words[num.length - 1] === 0) {
	        num.length--;
	      }
	    }
	    return num;
	  };

	  function P224 () {
	    MPrime.call(
	      this,
	      'p224',
	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);

	  function P192 () {
	    MPrime.call(
	      this,
	      'p192',
	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);

	  function P25519 () {
	    // 2 ^ 255 - 19
	    MPrime.call(
	      this,
	      '25519',
	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);

	  P25519.prototype.imulK = function imulK (num) {
	    // K = 0x13
	    var carry = 0;
	    for (var i = 0; i < num.length; i++) {
	      var hi = (num.words[i] | 0) * 0x13 + carry;
	      var lo = hi & 0x3ffffff;
	      hi >>>= 26;

	      num.words[i] = lo;
	      carry = hi;
	    }
	    if (carry !== 0) {
	      num.words[num.length++] = carry;
	    }
	    return num;
	  };

	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime (name) {
	    // Cached version of prime
	    if (primes[name]) return primes[name];

	    var prime;
	    if (name === 'k256') {
	      prime = new K256();
	    } else if (name === 'p224') {
	      prime = new P224();
	    } else if (name === 'p192') {
	      prime = new P192();
	    } else if (name === 'p25519') {
	      prime = new P25519();
	    } else {
	      throw new Error('Unknown prime ' + name);
	    }
	    primes[name] = prime;

	    return prime;
	  };

	  //
	  // Base reduction engine
	  //
	  function Red (m) {
	    if (typeof m === 'string') {
	      var prime = BN._prime(m);
	      this.m = prime.p;
	      this.prime = prime;
	    } else {
	      assert(m.gtn(1), 'modulus must be greater than 1');
	      this.m = m;
	      this.prime = null;
	    }
	  }

	  Red.prototype._verify1 = function _verify1 (a) {
	    assert(a.negative === 0, 'red works only with positives');
	    assert(a.red, 'red works only with red numbers');
	  };

	  Red.prototype._verify2 = function _verify2 (a, b) {
	    assert((a.negative | b.negative) === 0, 'red works only with positives');
	    assert(a.red && a.red === b.red,
	      'red works only with red numbers');
	  };

	  Red.prototype.imod = function imod (a) {
	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
	    return a.umod(this.m)._forceRed(this);
	  };

	  Red.prototype.neg = function neg (a) {
	    if (a.isZero()) {
	      return a.clone();
	    }

	    return this.m.sub(a)._forceRed(this);
	  };

	  Red.prototype.add = function add (a, b) {
	    this._verify2(a, b);

	    var res = a.add(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.iadd = function iadd (a, b) {
	    this._verify2(a, b);

	    var res = a.iadd(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res;
	  };

	  Red.prototype.sub = function sub (a, b) {
	    this._verify2(a, b);

	    var res = a.sub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.isub = function isub (a, b) {
	    this._verify2(a, b);

	    var res = a.isub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res;
	  };

	  Red.prototype.shl = function shl (a, num) {
	    this._verify1(a);
	    return this.imod(a.ushln(num));
	  };

	  Red.prototype.imul = function imul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.imul(b));
	  };

	  Red.prototype.mul = function mul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.mul(b));
	  };

	  Red.prototype.isqr = function isqr (a) {
	    return this.imul(a, a.clone());
	  };

	  Red.prototype.sqr = function sqr (a) {
	    return this.mul(a, a);
	  };

	  Red.prototype.sqrt = function sqrt (a) {
	    if (a.isZero()) return a.clone();

	    var mod3 = this.m.andln(3);
	    assert(mod3 % 2 === 1);

	    // Fast case
	    if (mod3 === 3) {
	      var pow = this.m.add(new BN(1)).iushrn(2);
	      return this.pow(a, pow);
	    }

	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	    //
	    // Find Q and S, that Q * 2 ^ S = (P - 1)
	    var q = this.m.subn(1);
	    var s = 0;
	    while (!q.isZero() && q.andln(1) === 0) {
	      s++;
	      q.iushrn(1);
	    }
	    assert(!q.isZero());

	    var one = new BN(1).toRed(this);
	    var nOne = one.redNeg();

	    // Find quadratic non-residue
	    // NOTE: Max is such because of generalized Riemann hypothesis.
	    var lpow = this.m.subn(1).iushrn(1);
	    var z = this.m.bitLength();
	    z = new BN(2 * z * z).toRed(this);

	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
	      z.redIAdd(nOne);
	    }

	    var c = this.pow(z, q);
	    var r = this.pow(a, q.addn(1).iushrn(1));
	    var t = this.pow(a, q);
	    var m = s;
	    while (t.cmp(one) !== 0) {
	      var tmp = t;
	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
	        tmp = tmp.redSqr();
	      }
	      assert(i < m);
	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

	      r = r.redMul(b);
	      c = b.redSqr();
	      t = t.redMul(c);
	      m = i;
	    }

	    return r;
	  };

	  Red.prototype.invm = function invm (a) {
	    var inv = a._invmp(this.m);
	    if (inv.negative !== 0) {
	      inv.negative = 0;
	      return this.imod(inv).redNeg();
	    } else {
	      return this.imod(inv);
	    }
	  };

	  Red.prototype.pow = function pow (a, num) {
	    if (num.isZero()) return new BN(1).toRed(this);
	    if (num.cmpn(1) === 0) return a.clone();

	    var windowSize = 4;
	    var wnd = new Array(1 << windowSize);
	    wnd[0] = new BN(1).toRed(this);
	    wnd[1] = a;
	    for (var i = 2; i < wnd.length; i++) {
	      wnd[i] = this.mul(wnd[i - 1], a);
	    }

	    var res = wnd[0];
	    var current = 0;
	    var currentLen = 0;
	    var start = num.bitLength() % 26;
	    if (start === 0) {
	      start = 26;
	    }

	    for (i = num.length - 1; i >= 0; i--) {
	      var word = num.words[i];
	      for (var j = start - 1; j >= 0; j--) {
	        var bit = (word >> j) & 1;
	        if (res !== wnd[0]) {
	          res = this.sqr(res);
	        }

	        if (bit === 0 && current === 0) {
	          currentLen = 0;
	          continue;
	        }

	        current <<= 1;
	        current |= bit;
	        currentLen++;
	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

	        res = this.mul(res, wnd[current]);
	        currentLen = 0;
	        current = 0;
	      }
	      start = 26;
	    }

	    return res;
	  };

	  Red.prototype.convertTo = function convertTo (num) {
	    var r = num.umod(this.m);

	    return r === num ? r.clone() : r;
	  };

	  Red.prototype.convertFrom = function convertFrom (num) {
	    var res = num.clone();
	    res.red = null;
	    return res;
	  };

	  //
	  // Montgomery method engine
	  //

	  BN.mont = function mont (num) {
	    return new Mont(num);
	  };

	  function Mont (m) {
	    Red.call(this, m);

	    this.shift = this.m.bitLength();
	    if (this.shift % 26 !== 0) {
	      this.shift += 26 - (this.shift % 26);
	    }

	    this.r = new BN(1).iushln(this.shift);
	    this.r2 = this.imod(this.r.sqr());
	    this.rinv = this.r._invmp(this.m);

	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
	    this.minv = this.minv.umod(this.r);
	    this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);

	  Mont.prototype.convertTo = function convertTo (num) {
	    return this.imod(num.ushln(this.shift));
	  };

	  Mont.prototype.convertFrom = function convertFrom (num) {
	    var r = this.imod(num.mul(this.rinv));
	    r.red = null;
	    return r;
	  };

	  Mont.prototype.imul = function imul (a, b) {
	    if (a.isZero() || b.isZero()) {
	      a.words[0] = 0;
	      a.length = 1;
	      return a;
	    }

	    var t = a.imul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;

	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.mul = function mul (a, b) {
	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

	    var t = a.mul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.invm = function invm (a) {
	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	    var res = this.imod(a._invmp(this.m).mul(this.r2));
	    return res._forceRed(this);
	  };
	})(module, commonjsGlobal); 
} (bn));

var bnExports = bn.exports;

var minimalisticAssert = assert$f;

function assert$f(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert$f.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

var utils$w = {};

(function (exports) {

	var utils = exports;

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg !== 'string') {
	    for (var i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	    return res;
	  }
	  if (enc === 'hex') {
	    msg = msg.replace(/[^a-z0-9]+/ig, '');
	    if (msg.length % 2 !== 0)
	      msg = '0' + msg;
	    for (var i = 0; i < msg.length; i += 2)
	      res.push(parseInt(msg[i] + msg[i + 1], 16));
	  } else {
	    for (var i = 0; i < msg.length; i++) {
	      var c = msg.charCodeAt(i);
	      var hi = c >> 8;
	      var lo = c & 0xff;
	      if (hi)
	        res.push(hi, lo);
	      else
	        res.push(lo);
	    }
	  }
	  return res;
	}
	utils.toArray = toArray;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	utils.zero2 = zero2;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	utils.toHex = toHex;

	utils.encode = function encode(arr, enc) {
	  if (enc === 'hex')
	    return toHex(arr);
	  else
	    return arr;
	}; 
} (utils$w));

(function (exports) {

	var utils = exports;
	var BN = bnExports;
	var minAssert = minimalisticAssert;
	var minUtils = utils$w;

	utils.assert = minAssert;
	utils.toArray = minUtils.toArray;
	utils.zero2 = minUtils.zero2;
	utils.toHex = minUtils.toHex;
	utils.encode = minUtils.encode;

	// Represent num in a w-NAF form
	function getNAF(num, w, bits) {
	  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
	  naf.fill(0);

	  var ws = 1 << (w + 1);
	  var k = num.clone();

	  for (var i = 0; i < naf.length; i++) {
	    var z;
	    var mod = k.andln(ws - 1);
	    if (k.isOdd()) {
	      if (mod > (ws >> 1) - 1)
	        z = (ws >> 1) - mod;
	      else
	        z = mod;
	      k.isubn(z);
	    } else {
	      z = 0;
	    }

	    naf[i] = z;
	    k.iushrn(1);
	  }

	  return naf;
	}
	utils.getNAF = getNAF;

	// Represent k1, k2 in a Joint Sparse Form
	function getJSF(k1, k2) {
	  var jsf = [
	    [],
	    [],
	  ];

	  k1 = k1.clone();
	  k2 = k2.clone();
	  var d1 = 0;
	  var d2 = 0;
	  var m8;
	  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
	    // First phase
	    var m14 = (k1.andln(3) + d1) & 3;
	    var m24 = (k2.andln(3) + d2) & 3;
	    if (m14 === 3)
	      m14 = -1;
	    if (m24 === 3)
	      m24 = -1;
	    var u1;
	    if ((m14 & 1) === 0) {
	      u1 = 0;
	    } else {
	      m8 = (k1.andln(7) + d1) & 7;
	      if ((m8 === 3 || m8 === 5) && m24 === 2)
	        u1 = -m14;
	      else
	        u1 = m14;
	    }
	    jsf[0].push(u1);

	    var u2;
	    if ((m24 & 1) === 0) {
	      u2 = 0;
	    } else {
	      m8 = (k2.andln(7) + d2) & 7;
	      if ((m8 === 3 || m8 === 5) && m14 === 2)
	        u2 = -m24;
	      else
	        u2 = m24;
	    }
	    jsf[1].push(u2);

	    // Second phase
	    if (2 * d1 === u1 + 1)
	      d1 = 1 - d1;
	    if (2 * d2 === u2 + 1)
	      d2 = 1 - d2;
	    k1.iushrn(1);
	    k2.iushrn(1);
	  }

	  return jsf;
	}
	utils.getJSF = getJSF;

	function cachedProperty(obj, name, computer) {
	  var key = '_' + name;
	  obj.prototype[name] = function cachedProperty() {
	    return this[key] !== undefined ? this[key] :
	      this[key] = computer.call(this);
	  };
	}
	utils.cachedProperty = cachedProperty;

	function parseBytes(bytes) {
	  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
	    bytes;
	}
	utils.parseBytes = parseBytes;

	function intFromLE(bytes) {
	  return new BN(bytes, 'hex', 'le');
	}
	utils.intFromLE = intFromLE; 
} (utils$x));

var brorand = {exports: {}};

var r$1;

brorand.exports = function rand(len) {
  if (!r$1)
    r$1 = new Rand(null);

  return r$1.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
brorand.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto$1 = require('crypto');
    if (typeof crypto$1.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto$1.randomBytes(n);
    };
  } catch (e) {
  }
}

var brorandExports = brorand.exports;

var curve = {};

var BN$7 = bnExports;
var utils$v = utils$x;
var getNAF = utils$v.getNAF;
var getJSF = utils$v.getJSF;
var assert$e = utils$v.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN$7(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN$7.red(conf.prime) : BN$7.mont(this.p);

  // Useful for many curves
  this.zero = new BN$7(0).toRed(this.red);
  this.one = new BN$7(1).toRed(this.red);
  this.two = new BN$7(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN$7(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
var base = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert$e(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  var j;
  var nafW;
  for (j = 0; j < naf.length; j += doubles.step) {
    nafW = 0;
    for (var l = j + doubles.step - 1; l >= j; l--)
      nafW = (nafW << 1) + naf[l];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (j = 0; j < repr.length; j++) {
      nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var l = 0; i >= 0 && naf[i] === 0; i--)
      l++;
    if (i >= 0)
      l++;
    acc = acc.dblp(l);

    if (i < 0)
      break;
    var z = naf[i];
    assert$e(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
  points,
  coeffs,
  len,
  jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  var i;
  var j;
  var p;
  for (i = 0; i < len; i++) {
    p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b], /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3,  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (j = 0; j < len; j++) {
      var z = tmp[j];
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils$v.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert$e(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert$e(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
      bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils$v.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null,
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles,
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res,
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

var inherits$4 = {exports: {}};

var inherits_browser = {exports: {}};

var hasRequiredInherits_browser;

function requireInherits_browser () {
	if (hasRequiredInherits_browser) return inherits_browser.exports;
	hasRequiredInherits_browser = 1;
	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  inherits_browser.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	          value: ctor,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      });
	    }
	  };
	} else {
	  // old school shim for old browsers
	  inherits_browser.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      var TempCtor = function () {};
	      TempCtor.prototype = superCtor.prototype;
	      ctor.prototype = new TempCtor();
	      ctor.prototype.constructor = ctor;
	    }
	  };
	}
	return inherits_browser.exports;
}

try {
  var util = require('util');
  /* istanbul ignore next */
  if (typeof util.inherits !== 'function') throw '';
  inherits$4.exports = util.inherits;
} catch (e) {
  /* istanbul ignore next */
  inherits$4.exports = requireInherits_browser();
}

var inheritsExports = inherits$4.exports;

var utils$u = utils$x;
var BN$6 = bnExports;
var inherits$3 = inheritsExports;
var Base$2 = base;

var assert$d = utils$u.assert;

function ShortCurve(conf) {
  Base$2.call(this, 'short', conf);

  this.a = new BN$6(conf.a, 16).toRed(this.red);
  this.b = new BN$6(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits$3(ShortCurve, Base$2);
var short = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN$6(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN$6(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert$d(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN$6(vec.a, 16),
        b: new BN$6(vec.b, 16),
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis,
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN$6.mont(num);
  var tinv = new BN$6(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN$6(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN$6(1);
  var y1 = new BN$6(0);
  var x2 = new BN$6(0);
  var y2 = new BN$6(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 },
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN$6(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();

        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }

        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

      // Clean-up references to points and coefficients
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };

function Point$2(curve, x, y, isRed) {
  Base$2.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN$6(x, 16);
    this.y = new BN$6(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits$3(Point$2, Base$2.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point$2(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point$2.fromJSON(this, obj, red);
};

Point$2.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul),
      },
    };
  }
  return beta;
};

Point$2.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1),
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1),
    },
  } ];
};

Point$2.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point)),
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point)),
    },
  };
  return res;
};

Point$2.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point$2.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point$2.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point$2.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point$2.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point$2.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point$2.prototype.mul = function mul(k) {
  k = new BN$6(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point$2.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point$2.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point$2.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point$2.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate),
      },
    };
  }
  return res;
};

Point$2.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base$2.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN$6(0);
  } else {
    this.x = new BN$6(x, 16);
    this.y = new BN$6(y, 16);
    this.z = new BN$6(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits$3(JPoint, Base$2.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  var i;
  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN$6(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

var BN$5 = bnExports;
var inherits$2 = inheritsExports;
var Base$1 = base;

var utils$t = utils$x;

function MontCurve(conf) {
  Base$1.call(this, 'mont', conf);

  this.a = new BN$5(conf.a, 16).toRed(this.red);
  this.b = new BN$5(conf.b, 16).toRed(this.red);
  this.i4 = new BN$5(4).toRed(this.red).redInvm();
  this.two = new BN$5(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits$2(MontCurve, Base$1);
var mont = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point$1(curve, x, z) {
  Base$1.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN$5(x, 16);
    this.z = new BN$5(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits$2(Point$1, Base$1.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils$t.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point$1(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point$1.fromJSON(this, obj);
};

Point$1.prototype.precompute = function precompute() {
  // No-op
};

Point$1.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point$1.fromJSON = function fromJSON(curve, obj) {
  return new Point$1(curve, obj[0], obj[1] || curve.one);
};

Point$1.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point$1.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point$1.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point$1.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point$1.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point$1.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point$1.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point$1.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point$1.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point$1.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point$1.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

var utils$s = utils$x;
var BN$4 = bnExports;
var inherits$1 = inheritsExports;
var Base = base;

var assert$c = utils$s.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN$4(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN$4(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN$4(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert$c(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits$1(EdwardsCurve, Base);
var edwards = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN$4(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN$4(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN$4(x, 16);
    this.y = new BN$4(y, 16);
    this.z = z ? new BN$4(z, 16) : this.curve.one;
    this.t = t && new BN$4(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits$1(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  var e;
  var h;
  var j;
  if (this.curve.twisted) {
    // E = a * C
    e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      h = this.z.redSqr();
      // J = F - 2 * H
      j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    e = c.redAdd(d);
    // H = (c * Z1)^2
    h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
    this.y,
    this.z,
    this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

(function (exports) {

	var curve = exports;

	curve.base = base;
	curve.short = short;
	curve.mont = mont;
	curve.edwards = edwards; 
} (curve));

var curves$2 = {};

var hash$2 = {};

var utils$r = {};

var assert$b = minimalisticAssert;
var inherits = inheritsExports;

utils$r.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
utils$r.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils$r.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
utils$r.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
utils$r.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils$r.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
utils$r.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert$b(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
utils$r.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
utils$r.split32 = split32;

function rotr32$1(w, b) {
  return (w >>> b) | (w << (32 - b));
}
utils$r.rotr32 = rotr32$1;

function rotl32$2(w, b) {
  return (w << b) | (w >>> (32 - b));
}
utils$r.rotl32 = rotl32$2;

function sum32$3(a, b) {
  return (a + b) >>> 0;
}
utils$r.sum32 = sum32$3;

function sum32_3$1(a, b, c) {
  return (a + b + c) >>> 0;
}
utils$r.sum32_3 = sum32_3$1;

function sum32_4$2(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
utils$r.sum32_4 = sum32_4$2;

function sum32_5$2(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
utils$r.sum32_5 = sum32_5$2;

function sum64$1(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
utils$r.sum64 = sum64$1;

function sum64_hi$1(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
utils$r.sum64_hi = sum64_hi$1;

function sum64_lo$1(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
utils$r.sum64_lo = sum64_lo$1;

function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
utils$r.sum64_4_hi = sum64_4_hi$1;

function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
utils$r.sum64_4_lo = sum64_4_lo$1;

function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
utils$r.sum64_5_hi = sum64_5_hi$1;

function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
utils$r.sum64_5_lo = sum64_5_lo$1;

function rotr64_hi$1(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
utils$r.rotr64_hi = rotr64_hi$1;

function rotr64_lo$1(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
utils$r.rotr64_lo = rotr64_lo$1;

function shr64_hi$1(ah, al, num) {
  return ah >>> num;
}
utils$r.shr64_hi = shr64_hi$1;

function shr64_lo$1(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
utils$r.shr64_lo = shr64_lo$1;

var common$6 = {};

var utils$q = utils$r;
var assert$a = minimalisticAssert;

function BlockHash$4() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
common$6.BlockHash = BlockHash$4;

BlockHash$4.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils$q.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils$q.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash$4.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert$a(this.pending === null);

  return this._digest(enc);
};

BlockHash$4.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

var sha = {};

var common$5 = {};

var utils$p = utils$r;
var rotr32 = utils$p.rotr32;

function ft_1$1(s, x, y, z) {
  if (s === 0)
    return ch32$1(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32$1(x, y, z);
}
common$5.ft_1 = ft_1$1;

function ch32$1(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
common$5.ch32 = ch32$1;

function maj32$1(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
common$5.maj32 = maj32$1;

function p32(x, y, z) {
  return x ^ y ^ z;
}
common$5.p32 = p32;

function s0_256$1(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
common$5.s0_256 = s0_256$1;

function s1_256$1(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
common$5.s1_256 = s1_256$1;

function g0_256$1(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
common$5.g0_256 = g0_256$1;

function g1_256$1(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
common$5.g1_256 = g1_256$1;

var utils$o = utils$r;
var common$4 = common$6;
var shaCommon$1 = common$5;

var rotl32$1 = utils$o.rotl32;
var sum32$2 = utils$o.sum32;
var sum32_5$1 = utils$o.sum32_5;
var ft_1 = shaCommon$1.ft_1;
var BlockHash$3 = common$4.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash$3.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils$o.inherits(SHA1, BlockHash$3);
var _1 = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32$1(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32$2(this.h[0], a);
  this.h[1] = sum32$2(this.h[1], b);
  this.h[2] = sum32$2(this.h[2], c);
  this.h[3] = sum32$2(this.h[3], d);
  this.h[4] = sum32$2(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils$o.toHex32(this.h, 'big');
  else
    return utils$o.split32(this.h, 'big');
};

var utils$n = utils$r;
var common$3 = common$6;
var shaCommon = common$5;
var assert$9 = minimalisticAssert;

var sum32$1 = utils$n.sum32;
var sum32_4$1 = utils$n.sum32_4;
var sum32_5 = utils$n.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash$2 = common$3.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256$1() {
  if (!(this instanceof SHA256$1))
    return new SHA256$1();

  BlockHash$2.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils$n.inherits(SHA256$1, BlockHash$2);
var _256 = SHA256$1;

SHA256$1.blockSize = 512;
SHA256$1.outSize = 256;
SHA256$1.hmacStrength = 192;
SHA256$1.padLength = 64;

SHA256$1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert$9(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32$1(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32$1(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32$1(T1, T2);
  }

  this.h[0] = sum32$1(this.h[0], a);
  this.h[1] = sum32$1(this.h[1], b);
  this.h[2] = sum32$1(this.h[2], c);
  this.h[3] = sum32$1(this.h[3], d);
  this.h[4] = sum32$1(this.h[4], e);
  this.h[5] = sum32$1(this.h[5], f);
  this.h[6] = sum32$1(this.h[6], g);
  this.h[7] = sum32$1(this.h[7], h);
};

SHA256$1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils$n.toHex32(this.h, 'big');
  else
    return utils$n.split32(this.h, 'big');
};

var utils$m = utils$r;
var SHA256 = _256;

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils$m.inherits(SHA224, SHA256);
var _224 = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils$m.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils$m.split32(this.h.slice(0, 7), 'big');
};

var utils$l = utils$r;
var common$2 = common$6;
var assert$8 = minimalisticAssert;

var rotr64_hi = utils$l.rotr64_hi;
var rotr64_lo = utils$l.rotr64_lo;
var shr64_hi = utils$l.shr64_hi;
var shr64_lo = utils$l.shr64_lo;
var sum64 = utils$l.sum64;
var sum64_hi = utils$l.sum64_hi;
var sum64_lo = utils$l.sum64_lo;
var sum64_4_hi = utils$l.sum64_4_hi;
var sum64_4_lo = utils$l.sum64_4_lo;
var sum64_5_hi = utils$l.sum64_5_hi;
var sum64_5_lo = utils$l.sum64_5_lo;

var BlockHash$1 = common$2.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512$1() {
  if (!(this instanceof SHA512$1))
    return new SHA512$1();

  BlockHash$1.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils$l.inherits(SHA512$1, BlockHash$1);
var _512 = SHA512$1;

SHA512$1.blockSize = 1024;
SHA512$1.outSize = 512;
SHA512$1.hmacStrength = 192;
SHA512$1.padLength = 128;

SHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512$1.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert$8(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512$1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils$l.toHex32(this.h, 'big');
  else
    return utils$l.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

var utils$k = utils$r;

var SHA512 = _512;

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils$k.inherits(SHA384, SHA512);
var _384 = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils$k.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils$k.split32(this.h.slice(0, 12), 'big');
};

sha.sha1 = _1;
sha.sha224 = _224;
sha.sha256 = _256;
sha.sha384 = _384;
sha.sha512 = _512;

var ripemd = {};

var utils$j = utils$r;
var common$1 = common$6;

var rotl32 = utils$j.rotl32;
var sum32 = utils$j.sum32;
var sum32_3 = utils$j.sum32_3;
var sum32_4 = utils$j.sum32_4;
var BlockHash = common$1.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils$j.inherits(RIPEMD160, BlockHash);
ripemd.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils$j.toHex32(this.h, 'little');
  else
    return utils$j.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

var utils$i = utils$r;
var assert$7 = minimalisticAssert;

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils$i.toArray(key, enc));
}
var hmac = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert$7(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

(function (exports) {
	var hash = exports;

	hash.utils = utils$r;
	hash.common = common$6;
	hash.sha = sha;
	hash.ripemd = ripemd;
	hash.hmac = hmac;

	// Proxy hash functions to the main object
	hash.sha1 = hash.sha.sha1;
	hash.sha256 = hash.sha.sha256;
	hash.sha224 = hash.sha.sha224;
	hash.sha384 = hash.sha.sha384;
	hash.sha512 = hash.sha.sha512;
	hash.ripemd160 = hash.ripemd.ripemd160; 
} (hash$2));

var secp256k1$1;
var hasRequiredSecp256k1;

function requireSecp256k1 () {
	if (hasRequiredSecp256k1) return secp256k1$1;
	hasRequiredSecp256k1 = 1;
	secp256k1$1 = {
	  doubles: {
	    step: 4,
	    points: [
	      [
	        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
	        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
	      ],
	      [
	        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
	        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
	      ],
	      [
	        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
	        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
	      ],
	      [
	        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
	        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
	      ],
	      [
	        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
	        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
	      ],
	      [
	        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
	        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
	      ],
	      [
	        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
	        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
	      ],
	      [
	        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
	        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
	      ],
	      [
	        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
	        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
	      ],
	      [
	        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
	        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
	      ],
	      [
	        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
	        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
	      ],
	      [
	        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
	        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
	      ],
	      [
	        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
	        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
	      ],
	      [
	        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
	        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
	      ],
	      [
	        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
	        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
	      ],
	      [
	        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
	        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
	      ],
	      [
	        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
	        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
	      ],
	      [
	        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
	        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
	      ],
	      [
	        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
	        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
	      ],
	      [
	        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
	        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
	      ],
	      [
	        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
	        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
	      ],
	      [
	        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
	        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
	      ],
	      [
	        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
	        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
	      ],
	      [
	        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
	        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
	      ],
	      [
	        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
	        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
	      ],
	      [
	        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
	        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
	      ],
	      [
	        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
	        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
	      ],
	      [
	        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
	        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
	      ],
	      [
	        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
	        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
	      ],
	      [
	        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
	        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
	      ],
	      [
	        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
	        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
	      ],
	      [
	        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
	        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
	      ],
	      [
	        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
	        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
	      ],
	      [
	        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
	        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
	      ],
	      [
	        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
	        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
	      ],
	      [
	        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
	        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
	      ],
	      [
	        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
	        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
	      ],
	      [
	        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
	        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
	      ],
	      [
	        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
	        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
	      ],
	      [
	        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
	        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
	      ],
	      [
	        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
	        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
	      ],
	      [
	        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
	        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
	      ],
	      [
	        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
	        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
	      ],
	      [
	        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
	        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
	      ],
	      [
	        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
	        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
	      ],
	      [
	        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
	        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
	      ],
	      [
	        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
	        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
	      ],
	      [
	        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
	        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
	      ],
	      [
	        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
	        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
	      ],
	      [
	        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
	        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
	      ],
	      [
	        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
	        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
	      ],
	      [
	        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
	        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
	      ],
	      [
	        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
	        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
	      ],
	      [
	        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
	        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
	      ],
	      [
	        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
	        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
	      ],
	      [
	        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
	        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
	      ],
	      [
	        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
	        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
	      ],
	      [
	        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
	        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
	      ],
	      [
	        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
	        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
	      ],
	      [
	        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
	        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
	      ],
	      [
	        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
	        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
	      ],
	      [
	        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
	        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
	      ],
	      [
	        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
	        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
	      ],
	      [
	        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
	        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
	      ],
	      [
	        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
	        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
	      ],
	    ],
	  },
	  naf: {
	    wnd: 7,
	    points: [
	      [
	        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
	        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
	      ],
	      [
	        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
	        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
	      ],
	      [
	        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
	        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
	      ],
	      [
	        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
	        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
	      ],
	      [
	        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
	        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
	      ],
	      [
	        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
	        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
	      ],
	      [
	        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
	        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
	      ],
	      [
	        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
	        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
	      ],
	      [
	        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
	        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
	      ],
	      [
	        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
	        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
	      ],
	      [
	        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
	        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
	      ],
	      [
	        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
	        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
	      ],
	      [
	        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
	        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
	      ],
	      [
	        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
	        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
	      ],
	      [
	        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
	        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
	      ],
	      [
	        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
	        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
	      ],
	      [
	        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
	        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
	      ],
	      [
	        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
	        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
	      ],
	      [
	        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
	        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
	      ],
	      [
	        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
	        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
	      ],
	      [
	        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
	        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
	      ],
	      [
	        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
	        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
	      ],
	      [
	        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
	        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
	      ],
	      [
	        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
	        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
	      ],
	      [
	        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
	        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
	      ],
	      [
	        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
	        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
	      ],
	      [
	        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
	        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
	      ],
	      [
	        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
	        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
	      ],
	      [
	        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
	        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
	      ],
	      [
	        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
	        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
	      ],
	      [
	        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
	        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
	      ],
	      [
	        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
	        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
	      ],
	      [
	        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
	        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
	      ],
	      [
	        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
	        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
	      ],
	      [
	        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
	        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
	      ],
	      [
	        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
	        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
	      ],
	      [
	        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
	        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
	      ],
	      [
	        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
	        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
	      ],
	      [
	        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
	        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
	      ],
	      [
	        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
	        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
	      ],
	      [
	        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
	        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
	      ],
	      [
	        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
	        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
	      ],
	      [
	        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
	        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
	      ],
	      [
	        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
	        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
	      ],
	      [
	        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
	        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
	      ],
	      [
	        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
	        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
	      ],
	      [
	        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
	        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
	      ],
	      [
	        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
	        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
	      ],
	      [
	        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
	        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
	      ],
	      [
	        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
	        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
	      ],
	      [
	        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
	        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
	      ],
	      [
	        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
	        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
	      ],
	      [
	        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
	        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
	      ],
	      [
	        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
	        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
	      ],
	      [
	        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
	        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
	      ],
	      [
	        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
	        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
	      ],
	      [
	        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
	        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
	      ],
	      [
	        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
	        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
	      ],
	      [
	        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
	        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
	      ],
	      [
	        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
	        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
	      ],
	      [
	        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
	        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
	      ],
	      [
	        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
	        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
	      ],
	      [
	        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
	        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
	      ],
	      [
	        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
	        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
	      ],
	      [
	        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
	        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
	      ],
	      [
	        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
	        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
	      ],
	      [
	        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
	        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
	      ],
	      [
	        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
	        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
	      ],
	      [
	        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
	        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
	      ],
	      [
	        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
	        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
	      ],
	      [
	        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
	        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
	      ],
	      [
	        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
	        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
	      ],
	      [
	        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
	        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
	      ],
	      [
	        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
	        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
	      ],
	      [
	        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
	        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
	      ],
	      [
	        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
	        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
	      ],
	      [
	        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
	        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
	      ],
	      [
	        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
	        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
	      ],
	      [
	        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
	        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
	      ],
	      [
	        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
	        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
	      ],
	      [
	        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
	        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
	      ],
	      [
	        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
	        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
	      ],
	      [
	        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
	        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
	      ],
	      [
	        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
	        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
	      ],
	      [
	        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
	        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
	      ],
	      [
	        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
	        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
	      ],
	      [
	        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
	        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
	      ],
	      [
	        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
	        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
	      ],
	      [
	        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
	        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
	      ],
	      [
	        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
	        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
	      ],
	      [
	        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
	        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
	      ],
	      [
	        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
	        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
	      ],
	      [
	        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
	        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
	      ],
	      [
	        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
	        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
	      ],
	      [
	        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
	        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
	      ],
	      [
	        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
	        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
	      ],
	      [
	        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
	        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
	      ],
	      [
	        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
	        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
	      ],
	      [
	        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
	        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
	      ],
	      [
	        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
	        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
	      ],
	      [
	        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
	        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
	      ],
	      [
	        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
	        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
	      ],
	      [
	        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
	        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
	      ],
	      [
	        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
	        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
	      ],
	      [
	        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
	        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
	      ],
	      [
	        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
	        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
	      ],
	      [
	        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
	        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
	      ],
	      [
	        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
	        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
	      ],
	      [
	        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
	        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
	      ],
	      [
	        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
	        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
	      ],
	      [
	        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
	        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
	      ],
	      [
	        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
	        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
	      ],
	      [
	        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
	        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
	      ],
	      [
	        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
	        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
	      ],
	      [
	        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
	        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
	      ],
	      [
	        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
	        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
	      ],
	      [
	        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
	        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
	      ],
	      [
	        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
	        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
	      ],
	      [
	        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
	        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
	      ],
	      [
	        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
	        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
	      ],
	      [
	        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
	        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
	      ],
	      [
	        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
	        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
	      ],
	      [
	        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
	        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
	      ],
	      [
	        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
	        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
	      ],
	      [
	        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
	        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
	      ],
	      [
	        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
	        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
	      ],
	      [
	        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
	        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
	      ],
	    ],
	  },
	};
	return secp256k1$1;
}

(function (exports) {

	var curves = exports;

	var hash = hash$2;
	var curve$1 = curve;
	var utils = utils$x;

	var assert = utils.assert;

	function PresetCurve(options) {
	  if (options.type === 'short')
	    this.curve = new curve$1.short(options);
	  else if (options.type === 'edwards')
	    this.curve = new curve$1.edwards(options);
	  else
	    this.curve = new curve$1.mont(options);
	  this.g = this.curve.g;
	  this.n = this.curve.n;
	  this.hash = options.hash;

	  assert(this.g.validate(), 'Invalid curve');
	  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
	}
	curves.PresetCurve = PresetCurve;

	function defineCurve(name, options) {
	  Object.defineProperty(curves, name, {
	    configurable: true,
	    enumerable: true,
	    get: function() {
	      var curve = new PresetCurve(options);
	      Object.defineProperty(curves, name, {
	        configurable: true,
	        enumerable: true,
	        value: curve,
	      });
	      return curve;
	    },
	  });
	}

	defineCurve('p192', {
	  type: 'short',
	  prime: 'p192',
	  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
	  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
	  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
	    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
	  ],
	});

	defineCurve('p224', {
	  type: 'short',
	  prime: 'p224',
	  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
	  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
	  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
	    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
	  ],
	});

	defineCurve('p256', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
	  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
	  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
	  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
	    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
	  ],
	});

	defineCurve('p384', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'fffffffe ffffffff 00000000 00000000 ffffffff',
	  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'fffffffe ffffffff 00000000 00000000 fffffffc',
	  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
	     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
	  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
	     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
	  hash: hash.sha384,
	  gRed: false,
	  g: [
	    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
	    '5502f25d bf55296c 3a545e38 72760ab7',
	    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
	    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
	  ],
	});

	defineCurve('p521', {
	  type: 'short',
	  prime: null,
	  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff',
	  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff fffffffc',
	  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
	     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
	     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
	  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
	     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
	  hash: hash.sha512,
	  gRed: false,
	  g: [
	    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
	    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
	    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
	    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
	    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
	    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
	  ],
	});

	defineCurve('curve25519', {
	  type: 'mont',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '76d06',
	  b: '1',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '9',
	  ],
	});

	defineCurve('ed25519', {
	  type: 'edwards',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '-1',
	  c: '1',
	  // -121665 * (121666^(-1)) (mod P)
	  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

	    // 4/5
	    '6666666666666666666666666666666666666666666666666666666666666658',
	  ],
	});

	var pre;
	try {
	  pre = requireSecp256k1();
	} catch (e) {
	  pre = undefined;
	}

	defineCurve('secp256k1', {
	  type: 'short',
	  prime: 'k256',
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
	  a: '0',
	  b: '7',
	  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
	  h: '1',
	  hash: hash.sha256,

	  // Precomputed endomorphism
	  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
	  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
	  basis: [
	    {
	      a: '3086d221a7d46bcde86c90e49284eb15',
	      b: '-e4437ed6010e88286f547fa90abfe4c3',
	    },
	    {
	      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
	      b: '3086d221a7d46bcde86c90e49284eb15',
	    },
	  ],

	  gRed: false,
	  g: [
	    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
	    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
	    pre,
	  ],
	}); 
} (curves$2));

var hash$1 = hash$2;
var utils$h = utils$w;
var assert$6 = minimalisticAssert;

function HmacDRBG$1(options) {
  if (!(this instanceof HmacDRBG$1))
    return new HmacDRBG$1(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils$h.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils$h.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils$h.toArray(options.pers, options.persEnc || 'hex');
  assert$6(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
var hmacDrbg = HmacDRBG$1;

HmacDRBG$1.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG$1.prototype._hmac = function hmac() {
  return new hash$1.hmac(this.hash, this.K);
};

HmacDRBG$1.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG$1.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils$h.toArray(entropy, entropyEnc);
  add = utils$h.toArray(add, addEnc);

  assert$6(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG$1.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils$h.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils$h.encode(res, enc);
};

var BN$3 = bnExports;
var utils$g = utils$x;
var assert$5 = utils$g.assert;

function KeyPair$3(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
var key$1 = KeyPair$3;

KeyPair$3.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair$3)
    return pub;

  return new KeyPair$3(ec, {
    pub: pub,
    pubEnc: enc,
  });
};

KeyPair$3.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair$3)
    return priv;

  return new KeyPair$3(ec, {
    priv: priv,
    privEnc: enc,
  });
};

KeyPair$3.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair$3.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair$3.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair$3.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN$3(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair$3.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert$5(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert$5(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair$3.prototype.derive = function derive(pub) {
  if(!pub.validate()) {
    assert$5(pub.validate(), 'public point not validated');
  }
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair$3.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair$3.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair$3.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

var BN$2 = bnExports;

var utils$f = utils$x;
var assert$4 = utils$f.assert;

function Signature$3(options, enc) {
  if (options instanceof Signature$3)
    return options;

  if (this._importDER(options, enc))
    return;

  assert$4(options.r && options.s, 'Signature without r or s');
  this.r = new BN$2(options.r, 16);
  this.s = new BN$2(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
var signature$2 = Signature$3;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;

  // Indefinite length or overflow
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }

  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }

  // Leading zeroes
  if (val <= 0x7f) {
    return false;
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature$3.prototype._importDER = function _importDER(data, enc) {
  data = utils$f.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len === false) {
    return false;
  }
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  if (rlen === false) {
    return false;
  }
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  this.r = new BN$2(r);
  this.s = new BN$2(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature$3.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils$f.encode(res, enc);
};

var BN$1 = bnExports;
var HmacDRBG = hmacDrbg;
var utils$e = utils$x;
var curves$1 = curves$2;
var rand = brorandExports;
var assert$3 = utils$e.assert;

var KeyPair$2 = key$1;
var Signature$2 = signature$2;

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert$3(Object.prototype.hasOwnProperty.call(curves$1, options),
      'Unknown curve ' + options);

    options = curves$1[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves$1.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
var ec = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair$2(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair$2.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair$2.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray(),
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN$1(2));
  for (;;) {
    var priv = new BN$1(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};

EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN$1(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN$1(1));

  for (var iter = 0; ; iter++) {
    var k = options.k ?
      options.k(iter) :
      new BN$1(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature$2({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN$1(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature$2(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);
  var p;

  if (!this.curve._maxwellTrick) {
    p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert$3((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature$2(signature, enc);

  var n = this.n;
  var e = new BN$1(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature$2(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

var utils$d = utils$x;
var assert$2 = utils$d.assert;
var parseBytes$2 = utils$d.parseBytes;
var cachedProperty$1 = utils$d.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair$1(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes$2(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes$2(params.pub);
}

KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair$1)
    return pub;
  return new KeyPair$1(eddsa, { pub: pub });
};

KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair$1)
    return secret;
  return new KeyPair$1(eddsa, { secret: secret });
};

KeyPair$1.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty$1(KeyPair$1, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty$1(KeyPair$1, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty$1(KeyPair$1, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty$1(KeyPair$1, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty$1(KeyPair$1, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty$1(KeyPair$1, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair$1.prototype.sign = function sign(message) {
  assert$2(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair$1.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair$1.prototype.getSecret = function getSecret(enc) {
  assert$2(this._secret, 'KeyPair is public only');
  return utils$d.encode(this.secret(), enc);
};

KeyPair$1.prototype.getPublic = function getPublic(enc) {
  return utils$d.encode(this.pubBytes(), enc);
};

var key = KeyPair$1;

var BN = bnExports;
var utils$c = utils$x;
var assert$1 = utils$c.assert;
var cachedProperty = utils$c.cachedProperty;
var parseBytes$1 = utils$c.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature$1(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes$1(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength),
    };
  }

  assert$1(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature$1, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature$1, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature$1, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature$1, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature$1.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature$1.prototype.toHex = function toHex() {
  return utils$c.encode(this.toBytes(), 'hex').toUpperCase();
};

var signature$1 = Signature$1;

var hash = hash$2;
var curves = curves$2;
var utils$b = utils$x;
var assert = utils$b.assert;
var parseBytes = utils$b.parseBytes;
var KeyPair = key;
var Signature = signature$1;

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

var eddsa = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
    .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils$b.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils$b.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils$b.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils$b.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

(function (exports) {

	var elliptic = exports;

	elliptic.version = require$$0$1.version;
	elliptic.utils = utils$x;
	elliptic.rand = brorandExports;
	elliptic.curve = curve;
	elliptic.curves = curves$2;

	// Protocols
	elliptic.ec = ec;
	elliptic.eddsa = eddsa; 
} (elliptic));

var secp256k1signature = {};

Object.defineProperty(secp256k1signature, "__esModule", { value: true });
secp256k1signature.ExtendedSecp256k1Signature = secp256k1signature.Secp256k1Signature = void 0;
function trimLeadingNullBytes(inData) {
    let numberOfLeadingNullBytes = 0;
    for (const byte of inData) {
        if (byte === 0x00) {
            numberOfLeadingNullBytes++;
        }
        else {
            break;
        }
    }
    return inData.slice(numberOfLeadingNullBytes);
}
const derTagInteger = 0x02;
class Secp256k1Signature {
    constructor(r, s) {
        if (r.length > 32 || r.length === 0 || r[0] === 0x00) {
            throw new Error("Unsigned integer r must be encoded as unpadded big endian.");
        }
        if (s.length > 32 || s.length === 0 || s[0] === 0x00) {
            throw new Error("Unsigned integer s must be encoded as unpadded big endian.");
        }
        this.data = {
            r: r,
            s: s,
        };
    }
    /**
     * Takes the pair of integers (r, s) as 2x32 byte of binary data.
     *
     * Note: This is the format Cosmos SDK uses natively.
     *
     * @param data a 64 byte value containing integers r and s.
     */
    static fromFixedLength(data) {
        if (data.length !== 64) {
            throw new Error(`Got invalid data length: ${data.length}. Expected 2x 32 bytes for the pair (r, s)`);
        }
        return new Secp256k1Signature(trimLeadingNullBytes(data.slice(0, 32)), trimLeadingNullBytes(data.slice(32, 64)));
    }
    static fromDer(data) {
        let pos = 0;
        if (data[pos++] !== 0x30) {
            throw new Error("Prefix 0x30 expected");
        }
        const bodyLength = data[pos++];
        if (data.length - pos !== bodyLength) {
            throw new Error("Data length mismatch detected");
        }
        // r
        const rTag = data[pos++];
        if (rTag !== derTagInteger) {
            throw new Error("INTEGER tag expected");
        }
        const rLength = data[pos++];
        if (rLength >= 0x80) {
            throw new Error("Decoding length values above 127 not supported");
        }
        const rData = data.slice(pos, pos + rLength);
        pos += rLength;
        // s
        const sTag = data[pos++];
        if (sTag !== derTagInteger) {
            throw new Error("INTEGER tag expected");
        }
        const sLength = data[pos++];
        if (sLength >= 0x80) {
            throw new Error("Decoding length values above 127 not supported");
        }
        const sData = data.slice(pos, pos + sLength);
        pos += sLength;
        return new Secp256k1Signature(
        // r/s data can contain leading 0 bytes to express integers being non-negative in DER
        trimLeadingNullBytes(rData), trimLeadingNullBytes(sData));
    }
    r(length) {
        if (length === undefined) {
            return this.data.r;
        }
        else {
            const paddingLength = length - this.data.r.length;
            if (paddingLength < 0) {
                throw new Error("Length too small to hold parameter r");
            }
            const padding = new Uint8Array(paddingLength);
            return new Uint8Array([...padding, ...this.data.r]);
        }
    }
    s(length) {
        if (length === undefined) {
            return this.data.s;
        }
        else {
            const paddingLength = length - this.data.s.length;
            if (paddingLength < 0) {
                throw new Error("Length too small to hold parameter s");
            }
            const padding = new Uint8Array(paddingLength);
            return new Uint8Array([...padding, ...this.data.s]);
        }
    }
    toFixedLength() {
        return new Uint8Array([...this.r(32), ...this.s(32)]);
    }
    toDer() {
        // DER supports negative integers but our data is unsigned. Thus we need to prepend
        // a leading 0 byte when the higest bit is set to differentiate nagative values
        const rEncoded = this.data.r[0] >= 0x80 ? new Uint8Array([0, ...this.data.r]) : this.data.r;
        const sEncoded = this.data.s[0] >= 0x80 ? new Uint8Array([0, ...this.data.s]) : this.data.s;
        const rLength = rEncoded.length;
        const sLength = sEncoded.length;
        const data = new Uint8Array([derTagInteger, rLength, ...rEncoded, derTagInteger, sLength, ...sEncoded]);
        return new Uint8Array([0x30, data.length, ...data]);
    }
}
secp256k1signature.Secp256k1Signature = Secp256k1Signature;
/**
 * A Secp256k1Signature plus the recovery parameter
 */
class ExtendedSecp256k1Signature extends Secp256k1Signature {
    constructor(r, s, recovery) {
        super(r, s);
        if (!Number.isInteger(recovery)) {
            throw new Error("The recovery parameter must be an integer.");
        }
        if (recovery < 0 || recovery > 4) {
            throw new Error("The recovery parameter must be one of 0, 1, 2, 3.");
        }
        this.recovery = recovery;
    }
    /**
     * Decode extended signature from the simple fixed length encoding
     * described in toFixedLength().
     */
    static fromFixedLength(data) {
        if (data.length !== 65) {
            throw new Error(`Got invalid data length ${data.length}. Expected 32 + 32 + 1`);
        }
        return new ExtendedSecp256k1Signature(trimLeadingNullBytes(data.slice(0, 32)), trimLeadingNullBytes(data.slice(32, 64)), data[64]);
    }
    /**
     * A simple custom encoding that encodes the extended signature as
     * r (32 bytes) | s (32 bytes) | recovery param (1 byte)
     * where | denotes concatenation of bonary data.
     */
    toFixedLength() {
        return new Uint8Array([...this.r(32), ...this.s(32), this.recovery]);
    }
}
secp256k1signature.ExtendedSecp256k1Signature = ExtendedSecp256k1Signature;

var __importDefault$c = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(secp256k1$2, "__esModule", { value: true });
secp256k1$2.Secp256k1 = void 0;
const encoding_1$o = build$6;
const bn_js_1 = __importDefault$c(bnExports$1);
const elliptic_1 = __importDefault$c(elliptic);
const secp256k1signature_1 = secp256k1signature;
const secp256k1 = new elliptic_1.default.ec("secp256k1");
const secp256k1N = new bn_js_1.default("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141", "hex");
class Secp256k1 {
    /**
     * Takes a 32 byte private key and returns a privkey/pubkey pair.
     *
     * The resulting pubkey is uncompressed. For the use in Cosmos it should
     * be compressed first using `Secp256k1.compressPubkey`.
     */
    static async makeKeypair(privkey) {
        if (privkey.length !== 32) {
            // is this check missing in secp256k1.validatePrivateKey?
            // https://github.com/bitjson/bitcoin-ts/issues/4
            throw new Error("input data is not a valid secp256k1 private key");
        }
        const keypair = secp256k1.keyFromPrivate(privkey);
        if (keypair.validate().result !== true) {
            throw new Error("input data is not a valid secp256k1 private key");
        }
        // range test that is not part of the elliptic implementation
        const privkeyAsBigInteger = new bn_js_1.default(privkey);
        if (privkeyAsBigInteger.gte(secp256k1N)) {
            // not strictly smaller than N
            throw new Error("input data is not a valid secp256k1 private key");
        }
        const out = {
            privkey: (0, encoding_1$o.fromHex)(keypair.getPrivate("hex")),
            // encodes uncompressed as
            // - 1-byte prefix "04"
            // - 32-byte x coordinate
            // - 32-byte y coordinate
            pubkey: Uint8Array.from(keypair.getPublic("array")),
        };
        return out;
    }
    /**
     * Creates a signature that is
     * - deterministic (RFC 6979)
     * - lowS signature
     * - DER encoded
     */
    static async createSignature(messageHash, privkey) {
        if (messageHash.length === 0) {
            throw new Error("Message hash must not be empty");
        }
        if (messageHash.length > 32) {
            throw new Error("Message hash length must not exceed 32 bytes");
        }
        const keypair = secp256k1.keyFromPrivate(privkey);
        // the `canonical` option ensures creation of lowS signature representations
        const { r, s, recoveryParam } = keypair.sign(messageHash, { canonical: true });
        if (typeof recoveryParam !== "number")
            throw new Error("Recovery param missing");
        return new secp256k1signature_1.ExtendedSecp256k1Signature(Uint8Array.from(r.toArray()), Uint8Array.from(s.toArray()), recoveryParam);
    }
    static async verifySignature(signature, messageHash, pubkey) {
        if (messageHash.length === 0) {
            throw new Error("Message hash must not be empty");
        }
        if (messageHash.length > 32) {
            throw new Error("Message hash length must not exceed 32 bytes");
        }
        const keypair = secp256k1.keyFromPublic(pubkey);
        // From https://github.com/indutny/elliptic:
        //
        //     Sign the message's hash (input must be an array, or a hex-string)
        //
        //     Signature MUST be either:
        //     1) DER-encoded signature as hex-string; or
        //     2) DER-encoded signature as buffer; or
        //     3) object with two hex-string properties (r and s); or
        //     4) object with two buffer properties (r and s)
        //
        // Uint8Array is not a Buffer, but elliptic seems to be happy with the interface
        // common to both types. Uint8Array is not an array of ints but the interface is
        // similar
        try {
            return keypair.verify(messageHash, signature.toDer());
        }
        catch (error) {
            return false;
        }
    }
    static recoverPubkey(signature, messageHash) {
        const signatureForElliptic = { r: (0, encoding_1$o.toHex)(signature.r()), s: (0, encoding_1$o.toHex)(signature.s()) };
        const point = secp256k1.recoverPubKey(messageHash, signatureForElliptic, signature.recovery);
        const keypair = secp256k1.keyFromPublic(point);
        return (0, encoding_1$o.fromHex)(keypair.getPublic(false, "hex"));
    }
    /**
     * Takes a compressed or uncompressed pubkey and return a compressed one.
     *
     * This function is idempotent.
     */
    static compressPubkey(pubkey) {
        switch (pubkey.length) {
            case 33:
                return pubkey;
            case 65:
                return Uint8Array.from(secp256k1.keyFromPublic(pubkey).getPublic(true, "array"));
            default:
                throw new Error("Invalid pubkey length");
        }
    }
    /**
     * Takes a compressed or uncompressed pubkey and returns an uncompressed one.
     *
     * This function is idempotent.
     */
    static uncompressPubkey(pubkey) {
        switch (pubkey.length) {
            case 33:
                return Uint8Array.from(secp256k1.keyFromPublic(pubkey).getPublic(false, "array"));
            case 65:
                return pubkey;
            default:
                throw new Error("Invalid pubkey length");
        }
    }
    static trimRecoveryByte(signature) {
        switch (signature.length) {
            case 64:
                return signature;
            case 65:
                return signature.slice(0, 64);
            default:
                throw new Error("Invalid signature length");
        }
    }
}
secp256k1$2.Secp256k1 = Secp256k1;

var slip10 = {};

(function (exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.stringToPath = exports.pathToString = exports.Slip10 = exports.Slip10RawIndex = exports.slip10CurveFromString = exports.Slip10Curve = void 0;
	const encoding_1 = build$6;
	const math_1 = build$a;
	const bn_js_1 = __importDefault(bnExports$1);
	const elliptic_1 = __importDefault(elliptic);
	const hmac_1 = hmac$1;
	const sha_1 = sha$1;
	/**
	 * Raw values must match the curve string in SLIP-0010 master key generation
	 *
	 * @see https://github.com/satoshilabs/slips/blob/master/slip-0010.md#master-key-generation
	 */
	var Slip10Curve;
	(function (Slip10Curve) {
	    Slip10Curve["Secp256k1"] = "Bitcoin seed";
	    Slip10Curve["Ed25519"] = "ed25519 seed";
	})(Slip10Curve = exports.Slip10Curve || (exports.Slip10Curve = {}));
	/**
	 * Reverse mapping of Slip10Curve
	 */
	function slip10CurveFromString(curveString) {
	    switch (curveString) {
	        case Slip10Curve.Ed25519:
	            return Slip10Curve.Ed25519;
	        case Slip10Curve.Secp256k1:
	            return Slip10Curve.Secp256k1;
	        default:
	            throw new Error(`Unknown curve string: '${curveString}'`);
	    }
	}
	exports.slip10CurveFromString = slip10CurveFromString;
	class Slip10RawIndex extends math_1.Uint32 {
	    static hardened(hardenedIndex) {
	        return new Slip10RawIndex(hardenedIndex + 2 ** 31);
	    }
	    static normal(normalIndex) {
	        return new Slip10RawIndex(normalIndex);
	    }
	    isHardened() {
	        return this.data >= 2 ** 31;
	    }
	}
	exports.Slip10RawIndex = Slip10RawIndex;
	const secp256k1 = new elliptic_1.default.ec("secp256k1");
	// Universal private key derivation accoring to
	// https://github.com/satoshilabs/slips/blob/master/slip-0010.md
	class Slip10 {
	    static derivePath(curve, seed, path) {
	        let result = this.master(curve, seed);
	        for (const rawIndex of path) {
	            result = this.child(curve, result.privkey, result.chainCode, rawIndex);
	        }
	        return result;
	    }
	    static master(curve, seed) {
	        const i = new hmac_1.Hmac(sha_1.Sha512, (0, encoding_1.toAscii)(curve)).update(seed).digest();
	        const il = i.slice(0, 32);
	        const ir = i.slice(32, 64);
	        if (curve !== Slip10Curve.Ed25519 && (this.isZero(il) || this.isGteN(curve, il))) {
	            return this.master(curve, i);
	        }
	        return {
	            chainCode: ir,
	            privkey: il,
	        };
	    }
	    static child(curve, parentPrivkey, parentChainCode, rawIndex) {
	        let i;
	        if (rawIndex.isHardened()) {
	            const payload = new Uint8Array([0x00, ...parentPrivkey, ...rawIndex.toBytesBigEndian()]);
	            i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(payload).digest();
	        }
	        else {
	            if (curve === Slip10Curve.Ed25519) {
	                throw new Error("Normal keys are not allowed with ed25519");
	            }
	            else {
	                // Step 1 of https://github.com/satoshilabs/slips/blob/master/slip-0010.md#private-parent-key--private-child-key
	                // Calculate I = HMAC-SHA512(Key = c_par, Data = ser_P(point(k_par)) || ser_32(i)).
	                // where the functions point() and ser_p() are defined in BIP-0032
	                const data = new Uint8Array([
	                    ...Slip10.serializedPoint(curve, new bn_js_1.default(parentPrivkey)),
	                    ...rawIndex.toBytesBigEndian(),
	                ]);
	                i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(data).digest();
	            }
	        }
	        return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i);
	    }
	    /**
	     * Implementation of ser_P(point(k_par)) from BIP-0032
	     *
	     * @see https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki
	     */
	    static serializedPoint(curve, p) {
	        switch (curve) {
	            case Slip10Curve.Secp256k1:
	                return (0, encoding_1.fromHex)(secp256k1.g.mul(p).encodeCompressed("hex"));
	            default:
	                throw new Error("curve not supported");
	        }
	    }
	    static childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i) {
	        // step 2 (of the Private parent key → private child key algorithm)
	        const il = i.slice(0, 32);
	        const ir = i.slice(32, 64);
	        // step 3
	        const returnChainCode = ir;
	        // step 4
	        if (curve === Slip10Curve.Ed25519) {
	            return {
	                chainCode: returnChainCode,
	                privkey: il,
	            };
	        }
	        // step 5
	        const n = this.n(curve);
	        const returnChildKeyAsNumber = new bn_js_1.default(il).add(new bn_js_1.default(parentPrivkey)).mod(n);
	        const returnChildKey = Uint8Array.from(returnChildKeyAsNumber.toArray("be", 32));
	        // step 6
	        if (this.isGteN(curve, il) || this.isZero(returnChildKey)) {
	            const newI = new hmac_1.Hmac(sha_1.Sha512, parentChainCode)
	                .update(new Uint8Array([0x01, ...ir, ...rawIndex.toBytesBigEndian()]))
	                .digest();
	            return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, newI);
	        }
	        // step 7
	        return {
	            chainCode: returnChainCode,
	            privkey: returnChildKey,
	        };
	    }
	    static isZero(privkey) {
	        return privkey.every((byte) => byte === 0);
	    }
	    static isGteN(curve, privkey) {
	        const keyAsNumber = new bn_js_1.default(privkey);
	        return keyAsNumber.gte(this.n(curve));
	    }
	    static n(curve) {
	        switch (curve) {
	            case Slip10Curve.Secp256k1:
	                return new bn_js_1.default("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141", 16);
	            default:
	                throw new Error("curve not supported");
	        }
	    }
	}
	exports.Slip10 = Slip10;
	function pathToString(path) {
	    return path.reduce((current, component) => {
	        const componentString = component.isHardened()
	            ? `${component.toNumber() - 2 ** 31}'`
	            : component.toString();
	        return current + "/" + componentString;
	    }, "m");
	}
	exports.pathToString = pathToString;
	function stringToPath(input) {
	    if (!input.startsWith("m"))
	        throw new Error("Path string must start with 'm'");
	    let rest = input.slice(1);
	    const out = new Array();
	    while (rest) {
	        const match = rest.match(/^\/([0-9]+)('?)/);
	        if (!match)
	            throw new Error("Syntax error while reading path component");
	        const [fullMatch, numberString, apostrophe] = match;
	        const value = math_1.Uint53.fromString(numberString).toNumber();
	        if (value >= 2 ** 31)
	            throw new Error("Component value too high. Must not exceed 2**31-1.");
	        if (apostrophe)
	            out.push(Slip10RawIndex.hardened(value));
	        else
	            out.push(Slip10RawIndex.normal(value));
	        rest = rest.slice(fullMatch.length);
	    }
	    return out;
	}
	exports.stringToPath = stringToPath;
	
} (slip10));

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.stringToPath = exports.Slip10RawIndex = exports.slip10CurveFromString = exports.Slip10Curve = exports.Slip10 = exports.pathToString = exports.sha512 = exports.Sha512 = exports.sha256 = exports.Sha256 = exports.Secp256k1Signature = exports.ExtendedSecp256k1Signature = exports.Secp256k1 = exports.ripemd160 = exports.Ripemd160 = exports.Random = exports.Xchacha20poly1305Ietf = exports.xchacha20NonceLength = exports.isArgon2idOptions = exports.Ed25519Keypair = exports.Ed25519 = exports.Argon2id = exports.keccak256 = exports.Keccak256 = exports.Hmac = exports.EnglishMnemonic = exports.Bip39 = void 0;
	var bip39_1 = bip39;
	Object.defineProperty(exports, "Bip39", { enumerable: true, get: function () { return bip39_1.Bip39; } });
	Object.defineProperty(exports, "EnglishMnemonic", { enumerable: true, get: function () { return bip39_1.EnglishMnemonic; } });
	var hmac_1 = hmac$1;
	Object.defineProperty(exports, "Hmac", { enumerable: true, get: function () { return hmac_1.Hmac; } });
	var keccak_1 = keccak;
	Object.defineProperty(exports, "Keccak256", { enumerable: true, get: function () { return keccak_1.Keccak256; } });
	Object.defineProperty(exports, "keccak256", { enumerable: true, get: function () { return keccak_1.keccak256; } });
	var libsodium_1 = libsodium$1;
	Object.defineProperty(exports, "Argon2id", { enumerable: true, get: function () { return libsodium_1.Argon2id; } });
	Object.defineProperty(exports, "Ed25519", { enumerable: true, get: function () { return libsodium_1.Ed25519; } });
	Object.defineProperty(exports, "Ed25519Keypair", { enumerable: true, get: function () { return libsodium_1.Ed25519Keypair; } });
	Object.defineProperty(exports, "isArgon2idOptions", { enumerable: true, get: function () { return libsodium_1.isArgon2idOptions; } });
	Object.defineProperty(exports, "xchacha20NonceLength", { enumerable: true, get: function () { return libsodium_1.xchacha20NonceLength; } });
	Object.defineProperty(exports, "Xchacha20poly1305Ietf", { enumerable: true, get: function () { return libsodium_1.Xchacha20poly1305Ietf; } });
	var random_1 = random;
	Object.defineProperty(exports, "Random", { enumerable: true, get: function () { return random_1.Random; } });
	var ripemd_1 = ripemd$1;
	Object.defineProperty(exports, "Ripemd160", { enumerable: true, get: function () { return ripemd_1.Ripemd160; } });
	Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function () { return ripemd_1.ripemd160; } });
	var secp256k1_1 = secp256k1$2;
	Object.defineProperty(exports, "Secp256k1", { enumerable: true, get: function () { return secp256k1_1.Secp256k1; } });
	var secp256k1signature_1 = secp256k1signature;
	Object.defineProperty(exports, "ExtendedSecp256k1Signature", { enumerable: true, get: function () { return secp256k1signature_1.ExtendedSecp256k1Signature; } });
	Object.defineProperty(exports, "Secp256k1Signature", { enumerable: true, get: function () { return secp256k1signature_1.Secp256k1Signature; } });
	var sha_1 = sha$1;
	Object.defineProperty(exports, "Sha256", { enumerable: true, get: function () { return sha_1.Sha256; } });
	Object.defineProperty(exports, "sha256", { enumerable: true, get: function () { return sha_1.sha256; } });
	Object.defineProperty(exports, "Sha512", { enumerable: true, get: function () { return sha_1.Sha512; } });
	Object.defineProperty(exports, "sha512", { enumerable: true, get: function () { return sha_1.sha512; } });
	var slip10_1 = slip10;
	Object.defineProperty(exports, "pathToString", { enumerable: true, get: function () { return slip10_1.pathToString; } });
	Object.defineProperty(exports, "Slip10", { enumerable: true, get: function () { return slip10_1.Slip10; } });
	Object.defineProperty(exports, "Slip10Curve", { enumerable: true, get: function () { return slip10_1.Slip10Curve; } });
	Object.defineProperty(exports, "slip10CurveFromString", { enumerable: true, get: function () { return slip10_1.slip10CurveFromString; } });
	Object.defineProperty(exports, "Slip10RawIndex", { enumerable: true, get: function () { return slip10_1.Slip10RawIndex; } });
	Object.defineProperty(exports, "stringToPath", { enumerable: true, get: function () { return slip10_1.stringToPath; } });
	
} (build$7));

var encoding = {};

var pubkeys = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isMultisigThresholdPubkey = exports.isSinglePubkey = exports.pubkeyType = exports.isSecp256k1Pubkey = exports.isEd25519Pubkey = void 0;
	function isEd25519Pubkey(pubkey) {
	    return pubkey.type === "tendermint/PubKeyEd25519";
	}
	exports.isEd25519Pubkey = isEd25519Pubkey;
	function isSecp256k1Pubkey(pubkey) {
	    return pubkey.type === "tendermint/PubKeySecp256k1";
	}
	exports.isSecp256k1Pubkey = isSecp256k1Pubkey;
	exports.pubkeyType = {
	    /** @see https://github.com/tendermint/tendermint/blob/v0.33.0/crypto/ed25519/ed25519.go#L22 */
	    secp256k1: "tendermint/PubKeySecp256k1",
	    /** @see https://github.com/tendermint/tendermint/blob/v0.33.0/crypto/secp256k1/secp256k1.go#L23 */
	    ed25519: "tendermint/PubKeyEd25519",
	    /** @see https://github.com/tendermint/tendermint/blob/v0.33.0/crypto/sr25519/codec.go#L12 */
	    sr25519: "tendermint/PubKeySr25519",
	    multisigThreshold: "tendermint/PubKeyMultisigThreshold",
	};
	function isSinglePubkey(pubkey) {
	    const singPubkeyTypes = [exports.pubkeyType.ed25519, exports.pubkeyType.secp256k1, exports.pubkeyType.sr25519];
	    return singPubkeyTypes.includes(pubkey.type);
	}
	exports.isSinglePubkey = isSinglePubkey;
	function isMultisigThresholdPubkey(pubkey) {
	    return pubkey.type === "tendermint/PubKeyMultisigThreshold";
	}
	exports.isMultisigThresholdPubkey = isMultisigThresholdPubkey;
	
} (pubkeys));

Object.defineProperty(encoding, "__esModule", { value: true });
encoding.encodeBech32Pubkey = encoding.encodeAminoPubkey = encoding.decodeBech32Pubkey = encoding.decodeAminoPubkey = encoding.encodeEd25519Pubkey = encoding.encodeSecp256k1Pubkey = void 0;
const encoding_1$n = build$6;
const math_1$d = build$a;
const utils_1$d = build$5;
const pubkeys_1$2 = pubkeys;
/**
 * Takes a Secp256k1 public key as raw bytes and returns the Amino JSON
 * representation of it (the type/value wrapper object).
 */
function encodeSecp256k1Pubkey(pubkey) {
    if (pubkey.length !== 33 || (pubkey[0] !== 0x02 && pubkey[0] !== 0x03)) {
        throw new Error("Public key must be compressed secp256k1, i.e. 33 bytes starting with 0x02 or 0x03");
    }
    return {
        type: pubkeys_1$2.pubkeyType.secp256k1,
        value: (0, encoding_1$n.toBase64)(pubkey),
    };
}
encoding.encodeSecp256k1Pubkey = encodeSecp256k1Pubkey;
/**
 * Takes an Edd25519 public key as raw bytes and returns the Amino JSON
 * representation of it (the type/value wrapper object).
 */
function encodeEd25519Pubkey(pubkey) {
    if (pubkey.length !== 32) {
        throw new Error("Ed25519 public key must be 32 bytes long");
    }
    return {
        type: pubkeys_1$2.pubkeyType.ed25519,
        value: (0, encoding_1$n.toBase64)(pubkey),
    };
}
encoding.encodeEd25519Pubkey = encodeEd25519Pubkey;
// As discussed in https://github.com/binance-chain/javascript-sdk/issues/163
// Prefixes listed here: https://github.com/tendermint/tendermint/blob/d419fffe18531317c28c29a292ad7d253f6cafdf/docs/spec/blockchain/encoding.md#public-key-cryptography
// Last bytes is varint-encoded length prefix
const pubkeyAminoPrefixSecp256k1 = (0, encoding_1$n.fromHex)("eb5ae987" + "21" /* fixed length */);
const pubkeyAminoPrefixEd25519 = (0, encoding_1$n.fromHex)("1624de64" + "20" /* fixed length */);
const pubkeyAminoPrefixSr25519 = (0, encoding_1$n.fromHex)("0dfb1005" + "20" /* fixed length */);
/** See https://github.com/tendermint/tendermint/commit/38b401657e4ad7a7eeb3c30a3cbf512037df3740 */
const pubkeyAminoPrefixMultisigThreshold = (0, encoding_1$n.fromHex)("22c1f7e2" /* variable length not included */);
/**
 * Decodes a pubkey in the Amino binary format to a type/value object.
 */
function decodeAminoPubkey(data) {
    if ((0, utils_1$d.arrayContentStartsWith)(data, pubkeyAminoPrefixSecp256k1)) {
        const rest = data.slice(pubkeyAminoPrefixSecp256k1.length);
        if (rest.length !== 33) {
            throw new Error("Invalid rest data length. Expected 33 bytes (compressed secp256k1 pubkey).");
        }
        return {
            type: pubkeys_1$2.pubkeyType.secp256k1,
            value: (0, encoding_1$n.toBase64)(rest),
        };
    }
    else if ((0, utils_1$d.arrayContentStartsWith)(data, pubkeyAminoPrefixEd25519)) {
        const rest = data.slice(pubkeyAminoPrefixEd25519.length);
        if (rest.length !== 32) {
            throw new Error("Invalid rest data length. Expected 32 bytes (Ed25519 pubkey).");
        }
        return {
            type: pubkeys_1$2.pubkeyType.ed25519,
            value: (0, encoding_1$n.toBase64)(rest),
        };
    }
    else if ((0, utils_1$d.arrayContentStartsWith)(data, pubkeyAminoPrefixSr25519)) {
        const rest = data.slice(pubkeyAminoPrefixSr25519.length);
        if (rest.length !== 32) {
            throw new Error("Invalid rest data length. Expected 32 bytes (Sr25519 pubkey).");
        }
        return {
            type: pubkeys_1$2.pubkeyType.sr25519,
            value: (0, encoding_1$n.toBase64)(rest),
        };
    }
    else if ((0, utils_1$d.arrayContentStartsWith)(data, pubkeyAminoPrefixMultisigThreshold)) {
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        return decodeMultisigPubkey(data);
    }
    else {
        throw new Error("Unsupported public key type. Amino data starts with: " + (0, encoding_1$n.toHex)(data.slice(0, 5)));
    }
}
encoding.decodeAminoPubkey = decodeAminoPubkey;
/**
 * Decodes a bech32 pubkey to Amino binary, which is then decoded to a type/value object.
 * The bech32 prefix is ignored and discareded.
 *
 * @param bechEncoded the bech32 encoded pubkey
 */
function decodeBech32Pubkey(bechEncoded) {
    const { data } = (0, encoding_1$n.fromBech32)(bechEncoded);
    return decodeAminoPubkey(data);
}
encoding.decodeBech32Pubkey = decodeBech32Pubkey;
/**
 * Uvarint decoder for Amino.
 * @see https://github.com/tendermint/go-amino/blob/8e779b71f40d175/decoder.go#L64-76
 * @returns varint as number, and bytes count occupied by varaint
 */
function decodeUvarint(reader) {
    if (reader.length < 1) {
        throw new Error("Can't decode varint. EOF");
    }
    if (reader[0] > 127) {
        throw new Error("Decoding numbers > 127 is not supported here. Please tell those lazy CosmJS maintainers to port the binary.Varint implementation from the Go standard library and write some tests.");
    }
    return [reader[0], 1];
}
/**
 * Decodes a multisig pubkey to type object.
 * Pubkey structure [ prefix + const + threshold + loop:(const + pubkeyLength + pubkey            ) ]
 *                  [   4b   + 1b    +  varint   + loop:(1b    +    varint    + pubkeyLength bytes) ]
 * @param data encoded pubkey
 */
function decodeMultisigPubkey(data) {
    const reader = Array.from(data);
    // remove multisig amino prefix;
    const prefixFromReader = reader.splice(0, pubkeyAminoPrefixMultisigThreshold.length);
    if (!(0, utils_1$d.arrayContentStartsWith)(prefixFromReader, pubkeyAminoPrefixMultisigThreshold)) {
        throw new Error("Invalid multisig prefix.");
    }
    // remove 0x08 threshold prefix;
    if (reader.shift() != 0x08) {
        throw new Error("Invalid multisig data. Expecting 0x08 prefix before threshold.");
    }
    // read threshold
    const [threshold, thresholdBytesLength] = decodeUvarint(reader);
    reader.splice(0, thresholdBytesLength);
    // read participants pubkeys
    const pubkeys = [];
    while (reader.length > 0) {
        // remove 0x12 threshold prefix;
        if (reader.shift() != 0x12) {
            throw new Error("Invalid multisig data. Expecting 0x12 prefix before participant pubkey length.");
        }
        // read pubkey length
        const [pubkeyLength, pubkeyLengthBytesSize] = decodeUvarint(reader);
        reader.splice(0, pubkeyLengthBytesSize);
        // verify that we can read pubkey
        if (reader.length < pubkeyLength) {
            throw new Error("Invalid multisig data length.");
        }
        // read and decode participant pubkey
        const encodedPubkey = reader.splice(0, pubkeyLength);
        const pubkey = decodeAminoPubkey(Uint8Array.from(encodedPubkey));
        pubkeys.push(pubkey);
    }
    return {
        type: pubkeys_1$2.pubkeyType.multisigThreshold,
        value: {
            threshold: threshold.toString(),
            pubkeys: pubkeys,
        },
    };
}
/**
 * Uvarint encoder for Amino. This is the same encoding as `binary.PutUvarint` from the Go
 * standard library.
 *
 * @see https://github.com/tendermint/go-amino/blob/8e779b71f40d175/encoder.go#L77-L85
 */
function encodeUvarint$2(value) {
    const checked = math_1$d.Uint53.fromString(value.toString()).toNumber();
    if (checked > 127) {
        throw new Error("Encoding numbers > 127 is not supported here. Please tell those lazy CosmJS maintainers to port the binary.PutUvarint implementation from the Go standard library and write some tests.");
    }
    return [checked];
}
/**
 * Encodes a public key to binary Amino.
 */
function encodeAminoPubkey(pubkey) {
    if ((0, pubkeys_1$2.isMultisigThresholdPubkey)(pubkey)) {
        const out = Array.from(pubkeyAminoPrefixMultisigThreshold);
        out.push(0x08); // TODO: What is this?
        out.push(...encodeUvarint$2(pubkey.value.threshold));
        for (const pubkeyData of pubkey.value.pubkeys.map((p) => encodeAminoPubkey(p))) {
            out.push(0x12); // TODO: What is this?
            out.push(...encodeUvarint$2(pubkeyData.length));
            out.push(...pubkeyData);
        }
        return new Uint8Array(out);
    }
    else if ((0, pubkeys_1$2.isEd25519Pubkey)(pubkey)) {
        return new Uint8Array([...pubkeyAminoPrefixEd25519, ...(0, encoding_1$n.fromBase64)(pubkey.value)]);
    }
    else if ((0, pubkeys_1$2.isSecp256k1Pubkey)(pubkey)) {
        return new Uint8Array([...pubkeyAminoPrefixSecp256k1, ...(0, encoding_1$n.fromBase64)(pubkey.value)]);
    }
    else {
        throw new Error("Unsupported pubkey type");
    }
}
encoding.encodeAminoPubkey = encodeAminoPubkey;
/**
 * Encodes a public key to binary Amino and then to bech32.
 *
 * @param pubkey the public key to encode
 * @param prefix the bech32 prefix (human readable part)
 */
function encodeBech32Pubkey(pubkey, prefix) {
    return (0, encoding_1$n.toBech32)(prefix, encodeAminoPubkey(pubkey));
}
encoding.encodeBech32Pubkey = encodeBech32Pubkey;

// See https://github.com/tendermint/tendermint/blob/f2ada0a604b4c0763bda2f64fac53d506d3beca7/docs/spec/blockchain/encoding.md#public-key-cryptography
Object.defineProperty(addresses$1, "__esModule", { value: true });
addresses$1.pubkeyToAddress = addresses$1.pubkeyToRawAddress = addresses$1.rawSecp256k1PubkeyToRawAddress = addresses$1.rawEd25519PubkeyToRawAddress = void 0;
const crypto_1$9 = build$7;
const encoding_1$m = build$6;
const encoding_2$1 = encoding;
const pubkeys_1$1 = pubkeys;
function rawEd25519PubkeyToRawAddress$1(pubkeyData) {
    if (pubkeyData.length !== 32) {
        throw new Error(`Invalid Ed25519 pubkey length: ${pubkeyData.length}`);
    }
    return (0, crypto_1$9.sha256)(pubkeyData).slice(0, 20);
}
addresses$1.rawEd25519PubkeyToRawAddress = rawEd25519PubkeyToRawAddress$1;
function rawSecp256k1PubkeyToRawAddress$1(pubkeyData) {
    if (pubkeyData.length !== 33) {
        throw new Error(`Invalid Secp256k1 pubkey length (compressed): ${pubkeyData.length}`);
    }
    return (0, crypto_1$9.ripemd160)((0, crypto_1$9.sha256)(pubkeyData));
}
addresses$1.rawSecp256k1PubkeyToRawAddress = rawSecp256k1PubkeyToRawAddress$1;
// For secp256k1 this assumes we already have a compressed pubkey.
function pubkeyToRawAddress$1(pubkey) {
    if ((0, pubkeys_1$1.isSecp256k1Pubkey)(pubkey)) {
        const pubkeyData = (0, encoding_1$m.fromBase64)(pubkey.value);
        return rawSecp256k1PubkeyToRawAddress$1(pubkeyData);
    }
    else if ((0, pubkeys_1$1.isEd25519Pubkey)(pubkey)) {
        const pubkeyData = (0, encoding_1$m.fromBase64)(pubkey.value);
        return rawEd25519PubkeyToRawAddress$1(pubkeyData);
    }
    else if ((0, pubkeys_1$1.isMultisigThresholdPubkey)(pubkey)) {
        // https://github.com/tendermint/tendermint/blob/38b401657e4ad7a7eeb3c30a3cbf512037df3740/crypto/multisig/threshold_pubkey.go#L71-L74
        const pubkeyData = (0, encoding_2$1.encodeAminoPubkey)(pubkey);
        return (0, crypto_1$9.sha256)(pubkeyData).slice(0, 20);
    }
    else {
        throw new Error("Unsupported public key type");
    }
}
addresses$1.pubkeyToRawAddress = pubkeyToRawAddress$1;
function pubkeyToAddress$1(pubkey, prefix) {
    return (0, encoding_1$m.toBech32)(prefix, pubkeyToRawAddress$1(pubkey));
}
addresses$1.pubkeyToAddress = pubkeyToAddress$1;

var coins$1 = {};

Object.defineProperty(coins$1, "__esModule", { value: true });
coins$1.addCoins = coins$1.parseCoins = coins$1.coins = coins$1.coin = void 0;
const math_1$c = build$a;
/**
 * Creates a coin.
 *
 * If your values do not exceed the safe integer range of JS numbers (53 bit),
 * you can use the number type here. This is the case for all typical Cosmos SDK
 * chains that use the default 6 decimals.
 *
 * In case you need to supportr larger values, use unsigned integer strings instead.
 */
function coin(amount, denom) {
    let outAmount;
    if (typeof amount === "number") {
        try {
            outAmount = new math_1$c.Uint53(amount).toString();
        }
        catch (_err) {
            throw new Error("Given amount is not a safe integer. Consider using a string instead to overcome the limitations of JS numbers.");
        }
    }
    else {
        if (!amount.match(/^[0-9]+$/)) {
            throw new Error("Invalid unsigned integer string format");
        }
        outAmount = amount.replace(/^0*/, "") || "0";
    }
    return {
        amount: outAmount,
        denom: denom,
    };
}
coins$1.coin = coin;
/**
 * Creates a list of coins with one element.
 */
function coins(amount, denom) {
    return [coin(amount, denom)];
}
coins$1.coins = coins;
/**
 * Takes a coins list like "819966000ucosm,700000000ustake" and parses it.
 *
 * A Stargate-ready variant of this function is available via:
 *
 * ```
 * import { parseCoins } from "@cosmjs/proto-signing";
 * // or
 * import { parseCoins } from "@cosmjs/stargate";
 * ```
 */
function parseCoins(input) {
    return input
        .replace(/\s/g, "")
        .split(",")
        .filter(Boolean)
        .map((part) => {
        const match = part.match(/^([0-9]+)([a-zA-Z]+)/);
        if (!match)
            throw new Error("Got an invalid coin string");
        return {
            amount: match[1].replace(/^0+/, "") || "0",
            denom: match[2],
        };
    });
}
coins$1.parseCoins = parseCoins;
/**
 * Function to sum up coins with type Coin
 */
function addCoins(lhs, rhs) {
    if (lhs.denom !== rhs.denom)
        throw new Error("Trying to add two coins with different denoms");
    return {
        amount: math_1$c.Decimal.fromAtomics(lhs.amount, 0).plus(math_1$c.Decimal.fromAtomics(rhs.amount, 0)).atomics,
        denom: lhs.denom,
    };
}
coins$1.addCoins = addCoins;

var multisig = {};

Object.defineProperty(multisig, "__esModule", { value: true });
multisig.createMultisigThresholdPubkey = multisig.compareArrays = void 0;
const encoding_1$l = build$6;
const math_1$b = build$a;
const addresses_1$2 = addresses$1;
/**
 * Compare arrays lexicographically.
 *
 * Returns value < 0 if `a < b`.
 * Returns value > 0 if `a > b`.
 * Returns 0 if `a === b`.
 */
function compareArrays(a, b) {
    const aHex = (0, encoding_1$l.toHex)(a);
    const bHex = (0, encoding_1$l.toHex)(b);
    return aHex === bHex ? 0 : aHex < bHex ? -1 : 1;
}
multisig.compareArrays = compareArrays;
function createMultisigThresholdPubkey(pubkeys, threshold, nosort = false) {
    const uintThreshold = new math_1$b.Uint53(threshold);
    if (uintThreshold.toNumber() > pubkeys.length) {
        throw new Error(`Threshold k = ${uintThreshold.toNumber()} exceeds number of keys n = ${pubkeys.length}`);
    }
    const outPubkeys = nosort
        ? pubkeys
        : Array.from(pubkeys).sort((lhs, rhs) => {
            // https://github.com/cosmos/cosmos-sdk/blob/v0.42.2/client/keys/add.go#L172-L174
            const addressLhs = (0, addresses_1$2.pubkeyToRawAddress)(lhs);
            const addressRhs = (0, addresses_1$2.pubkeyToRawAddress)(rhs);
            return compareArrays(addressLhs, addressRhs);
        });
    return {
        type: "tendermint/PubKeyMultisigThreshold",
        value: {
            threshold: uintThreshold.toString(),
            pubkeys: outPubkeys,
        },
    };
}
multisig.createMultisigThresholdPubkey = createMultisigThresholdPubkey;

var paths$1 = {};

Object.defineProperty(paths$1, "__esModule", { value: true });
paths$1.makeCosmoshubPath = void 0;
const crypto_1$8 = build$7;
/**
 * The Cosmos Hub derivation path in the form `m/44'/118'/0'/0/a`
 * with 0-based account index `a`.
 */
function makeCosmoshubPath$1(a) {
    return [
        crypto_1$8.Slip10RawIndex.hardened(44),
        crypto_1$8.Slip10RawIndex.hardened(118),
        crypto_1$8.Slip10RawIndex.hardened(0),
        crypto_1$8.Slip10RawIndex.normal(0),
        crypto_1$8.Slip10RawIndex.normal(a),
    ];
}
paths$1.makeCosmoshubPath = makeCosmoshubPath$1;

var secp256k1hdwallet = {};

var signature = {};

Object.defineProperty(signature, "__esModule", { value: true });
signature.decodeSignature = signature.encodeSecp256k1Signature = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const encoding_1$k = build$6;
const encoding_2 = encoding;
const pubkeys_1 = pubkeys;
/**
 * Takes a binary pubkey and signature to create a signature object
 *
 * @param pubkey a compressed secp256k1 public key
 * @param signature a 64 byte fixed length representation of secp256k1 signature components r and s
 */
function encodeSecp256k1Signature(pubkey, signature) {
    if (signature.length !== 64) {
        throw new Error("Signature must be 64 bytes long. Cosmos SDK uses a 2x32 byte fixed length encoding for the secp256k1 signature integers r and s.");
    }
    return {
        pub_key: (0, encoding_2.encodeSecp256k1Pubkey)(pubkey),
        signature: (0, encoding_1$k.toBase64)(signature),
    };
}
signature.encodeSecp256k1Signature = encodeSecp256k1Signature;
function decodeSignature(signature) {
    switch (signature.pub_key.type) {
        // Note: please don't add cases here without writing additional unit tests
        case pubkeys_1.pubkeyType.secp256k1:
            return {
                pubkey: (0, encoding_1$k.fromBase64)(signature.pub_key.value),
                signature: (0, encoding_1$k.fromBase64)(signature.signature),
            };
        default:
            throw new Error("Unsupported pubkey type");
    }
}
signature.decodeSignature = decodeSignature;

var signdoc = {};

Object.defineProperty(signdoc, "__esModule", { value: true });
signdoc.serializeSignDoc = signdoc.escapeCharacters = signdoc.makeSignDoc = signdoc.sortedJsonStringify = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const encoding_1$j = build$6;
const math_1$a = build$a;
function sortedObject(obj) {
    if (typeof obj !== "object" || obj === null) {
        return obj;
    }
    if (Array.isArray(obj)) {
        return obj.map(sortedObject);
    }
    const sortedKeys = Object.keys(obj).sort();
    const result = {};
    // NOTE: Use forEach instead of reduce for performance with large objects eg Wasm code
    sortedKeys.forEach((key) => {
        result[key] = sortedObject(obj[key]);
    });
    return result;
}
/** Returns a JSON string with objects sorted by key */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function sortedJsonStringify(obj) {
    return JSON.stringify(sortedObject(obj));
}
signdoc.sortedJsonStringify = sortedJsonStringify;
function makeSignDoc$1(msgs, fee, chainId, memo, accountNumber, sequence) {
    return {
        chain_id: chainId,
        account_number: math_1$a.Uint53.fromString(accountNumber.toString()).toString(),
        sequence: math_1$a.Uint53.fromString(sequence.toString()).toString(),
        fee: fee,
        msgs: msgs,
        memo: memo || "",
    };
}
signdoc.makeSignDoc = makeSignDoc$1;
/**
 * Takes a valid JSON document and performs the following escapings in string values:
 *
 * `&` -> `\u0026`
 * `<` -> `\u003c`
 * `>` -> `\u003e`
 *
 * Since those characters do not occur in other places of the JSON document, only
 * string values are affected.
 *
 * If the input is invalid JSON, the behaviour is undefined.
 */
function escapeCharacters(input) {
    // When we migrate to target es2021 or above, we can use replaceAll instead of global patterns.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll
    const amp = /&/g;
    const lt = /</g;
    const gt = />/g;
    return input.replace(amp, "\\u0026").replace(lt, "\\u003c").replace(gt, "\\u003e");
}
signdoc.escapeCharacters = escapeCharacters;
function serializeSignDoc(signDoc) {
    const serialized = escapeCharacters(sortedJsonStringify(signDoc));
    return (0, encoding_1$j.toUtf8)(serialized);
}
signdoc.serializeSignDoc = serializeSignDoc;

var wallet$1 = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decrypt = exports.encrypt = exports.supportedAlgorithms = exports.executeKdf = exports.cosmjsSalt = void 0;
	const crypto_1 = build$7;
	const encoding_1 = build$6;
	/**
	 * A fixed salt is chosen to archive a deterministic password to key derivation.
	 * This reduces the scope of a potential rainbow attack to all CosmJS users.
	 * Must be 16 bytes due to implementation limitations.
	 */
	exports.cosmjsSalt = (0, encoding_1.toAscii)("The CosmJS salt.");
	async function executeKdf(password, configuration) {
	    switch (configuration.algorithm) {
	        case "argon2id": {
	            const options = configuration.params;
	            if (!(0, crypto_1.isArgon2idOptions)(options))
	                throw new Error("Invalid format of argon2id params");
	            return crypto_1.Argon2id.execute(password, exports.cosmjsSalt, options);
	        }
	        default:
	            throw new Error("Unsupported KDF algorithm");
	    }
	}
	exports.executeKdf = executeKdf;
	exports.supportedAlgorithms = {
	    xchacha20poly1305Ietf: "xchacha20poly1305-ietf",
	};
	async function encrypt(plaintext, encryptionKey, config) {
	    switch (config.algorithm) {
	        case exports.supportedAlgorithms.xchacha20poly1305Ietf: {
	            const nonce = crypto_1.Random.getBytes(crypto_1.xchacha20NonceLength);
	            // Prepend fixed-length nonce to ciphertext as suggested in the example from https://github.com/jedisct1/libsodium.js#api
	            return new Uint8Array([
	                ...nonce,
	                ...(await crypto_1.Xchacha20poly1305Ietf.encrypt(plaintext, encryptionKey, nonce)),
	            ]);
	        }
	        default:
	            throw new Error(`Unsupported encryption algorithm: '${config.algorithm}'`);
	    }
	}
	exports.encrypt = encrypt;
	async function decrypt(ciphertext, encryptionKey, config) {
	    switch (config.algorithm) {
	        case exports.supportedAlgorithms.xchacha20poly1305Ietf: {
	            const nonce = ciphertext.slice(0, crypto_1.xchacha20NonceLength);
	            return crypto_1.Xchacha20poly1305Ietf.decrypt(ciphertext.slice(crypto_1.xchacha20NonceLength), encryptionKey, nonce);
	        }
	        default:
	            throw new Error(`Unsupported encryption algorithm: '${config.algorithm}'`);
	    }
	}
	exports.decrypt = decrypt;
	
} (wallet$1));

Object.defineProperty(secp256k1hdwallet, "__esModule", { value: true });
secp256k1hdwallet.Secp256k1HdWallet = secp256k1hdwallet.extractKdfConfiguration = void 0;
const crypto_1$7 = build$7;
const encoding_1$i = build$6;
const utils_1$c = build$5;
const addresses_1$1 = addresses$1;
const paths_1 = paths$1;
const signature_1$1 = signature;
const signdoc_1$1 = signdoc;
const wallet_1$1 = wallet$1;
const serializationTypeV1$1 = "secp256k1wallet-v1";
/**
 * A KDF configuration that is not very strong but can be used on the main thread.
 * It takes about 1 second in Node.js 16.0.0 and should have similar runtimes in other modern Wasm hosts.
 */
const basicPasswordHashingOptions$1 = {
    algorithm: "argon2id",
    params: {
        outputLength: 32,
        opsLimit: 24,
        memLimitKib: 12 * 1024,
    },
};
function isDerivationJson$1(thing) {
    if (!(0, utils_1$c.isNonNullObject)(thing))
        return false;
    if (typeof thing.hdPath !== "string")
        return false;
    if (typeof thing.prefix !== "string")
        return false;
    return true;
}
function extractKdfConfigurationV1$1(doc) {
    return doc.kdf;
}
function extractKdfConfiguration$1(serialization) {
    const root = JSON.parse(serialization);
    if (!(0, utils_1$c.isNonNullObject)(root))
        throw new Error("Root document is not an object.");
    switch (root.type) {
        case serializationTypeV1$1:
            return extractKdfConfigurationV1$1(root);
        default:
            throw new Error("Unsupported serialization type");
    }
}
secp256k1hdwallet.extractKdfConfiguration = extractKdfConfiguration$1;
const defaultOptions$1 = {
    bip39Password: "",
    hdPaths: [(0, paths_1.makeCosmoshubPath)(0)],
    prefix: "cosmos",
};
class Secp256k1HdWallet {
    constructor(mnemonic, options) {
        const hdPaths = options.hdPaths ?? defaultOptions$1.hdPaths;
        const prefix = options.prefix ?? defaultOptions$1.prefix;
        this.secret = mnemonic;
        this.seed = options.seed;
        this.accounts = hdPaths.map((hdPath) => ({
            hdPath: hdPath,
            prefix,
        }));
    }
    /**
     * Restores a wallet from the given BIP39 mnemonic.
     *
     * @param mnemonic Any valid English mnemonic.
     * @param options An optional `Secp256k1HdWalletOptions` object optionally containing a bip39Password, hdPaths, and prefix.
     */
    static async fromMnemonic(mnemonic, options = {}) {
        const mnemonicChecked = new crypto_1$7.EnglishMnemonic(mnemonic);
        const seed = await crypto_1$7.Bip39.mnemonicToSeed(mnemonicChecked, options.bip39Password);
        return new Secp256k1HdWallet(mnemonicChecked, {
            ...options,
            seed: seed,
        });
    }
    /**
     * Generates a new wallet with a BIP39 mnemonic of the given length.
     *
     * @param length The number of words in the mnemonic (12, 15, 18, 21 or 24).
     * @param options An optional `Secp256k1HdWalletOptions` object optionally containing a bip39Password, hdPaths, and prefix.
     */
    static async generate(length = 12, options = {}) {
        const entropyLength = 4 * Math.floor((11 * length) / 33);
        const entropy = crypto_1$7.Random.getBytes(entropyLength);
        const mnemonic = crypto_1$7.Bip39.encode(entropy);
        return Secp256k1HdWallet.fromMnemonic(mnemonic.toString(), options);
    }
    /**
     * Restores a wallet from an encrypted serialization.
     *
     * @param password The user provided password used to generate an encryption key via a KDF.
     *                 This is not normalized internally (see "Unicode normalization" to learn more).
     */
    static async deserialize(serialization, password) {
        const root = JSON.parse(serialization);
        if (!(0, utils_1$c.isNonNullObject)(root))
            throw new Error("Root document is not an object.");
        switch (root.type) {
            case serializationTypeV1$1:
                return Secp256k1HdWallet.deserializeTypeV1(serialization, password);
            default:
                throw new Error("Unsupported serialization type");
        }
    }
    /**
     * Restores a wallet from an encrypted serialization.
     *
     * This is an advanced alternative to calling `deserialize(serialization, password)` directly, which allows
     * you to offload the KDF execution to a non-UI thread (e.g. in a WebWorker).
     *
     * The caller is responsible for ensuring the key was derived with the given KDF configuration. This can be
     * done using `extractKdfConfiguration(serialization)` and `executeKdf(password, kdfConfiguration)` from this package.
     */
    static async deserializeWithEncryptionKey(serialization, encryptionKey) {
        const root = JSON.parse(serialization);
        if (!(0, utils_1$c.isNonNullObject)(root))
            throw new Error("Root document is not an object.");
        const untypedRoot = root;
        switch (untypedRoot.type) {
            case serializationTypeV1$1: {
                const decryptedBytes = await (0, wallet_1$1.decrypt)((0, encoding_1$i.fromBase64)(untypedRoot.data), encryptionKey, untypedRoot.encryption);
                const decryptedDocument = JSON.parse((0, encoding_1$i.fromUtf8)(decryptedBytes));
                const { mnemonic, accounts } = decryptedDocument;
                (0, utils_1$c.assert)(typeof mnemonic === "string");
                if (!Array.isArray(accounts))
                    throw new Error("Property 'accounts' is not an array");
                if (!accounts.every((account) => isDerivationJson$1(account))) {
                    throw new Error("Account is not in the correct format.");
                }
                const firstPrefix = accounts[0].prefix;
                if (!accounts.every(({ prefix }) => prefix === firstPrefix)) {
                    throw new Error("Accounts do not all have the same prefix");
                }
                const hdPaths = accounts.map(({ hdPath }) => (0, crypto_1$7.stringToPath)(hdPath));
                return Secp256k1HdWallet.fromMnemonic(mnemonic, {
                    hdPaths: hdPaths,
                    prefix: firstPrefix,
                });
            }
            default:
                throw new Error("Unsupported serialization type");
        }
    }
    static async deserializeTypeV1(serialization, password) {
        const root = JSON.parse(serialization);
        if (!(0, utils_1$c.isNonNullObject)(root))
            throw new Error("Root document is not an object.");
        const encryptionKey = await (0, wallet_1$1.executeKdf)(password, root.kdf);
        return Secp256k1HdWallet.deserializeWithEncryptionKey(serialization, encryptionKey);
    }
    get mnemonic() {
        return this.secret.toString();
    }
    async getAccounts() {
        const accountsWithPrivkeys = await this.getAccountsWithPrivkeys();
        return accountsWithPrivkeys.map(({ algo, pubkey, address }) => ({
            algo: algo,
            pubkey: pubkey,
            address: address,
        }));
    }
    async signAmino(signerAddress, signDoc) {
        const accounts = await this.getAccountsWithPrivkeys();
        const account = accounts.find(({ address }) => address === signerAddress);
        if (account === undefined) {
            throw new Error(`Address ${signerAddress} not found in wallet`);
        }
        const { privkey, pubkey } = account;
        const message = (0, crypto_1$7.sha256)((0, signdoc_1$1.serializeSignDoc)(signDoc));
        const signature = await crypto_1$7.Secp256k1.createSignature(message, privkey);
        const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);
        return {
            signed: signDoc,
            signature: (0, signature_1$1.encodeSecp256k1Signature)(pubkey, signatureBytes),
        };
    }
    /**
     * Generates an encrypted serialization of this wallet.
     *
     * @param password The user provided password used to generate an encryption key via a KDF.
     *                 This is not normalized internally (see "Unicode normalization" to learn more).
     */
    async serialize(password) {
        const kdfConfiguration = basicPasswordHashingOptions$1;
        const encryptionKey = await (0, wallet_1$1.executeKdf)(password, kdfConfiguration);
        return this.serializeWithEncryptionKey(encryptionKey, kdfConfiguration);
    }
    /**
     * Generates an encrypted serialization of this wallet.
     *
     * This is an advanced alternative to calling `serialize(password)` directly, which allows you to
     * offload the KDF execution to a non-UI thread (e.g. in a WebWorker).
     *
     * The caller is responsible for ensuring the key was derived with the given KDF options. If this
     * is not the case, the wallet cannot be restored with the original password.
     */
    async serializeWithEncryptionKey(encryptionKey, kdfConfiguration) {
        const dataToEncrypt = {
            mnemonic: this.mnemonic,
            accounts: this.accounts.map(({ hdPath, prefix }) => ({
                hdPath: (0, crypto_1$7.pathToString)(hdPath),
                prefix: prefix,
            })),
        };
        const dataToEncryptRaw = (0, encoding_1$i.toUtf8)(JSON.stringify(dataToEncrypt));
        const encryptionConfiguration = {
            algorithm: wallet_1$1.supportedAlgorithms.xchacha20poly1305Ietf,
        };
        const encryptedData = await (0, wallet_1$1.encrypt)(dataToEncryptRaw, encryptionKey, encryptionConfiguration);
        const out = {
            type: serializationTypeV1$1,
            kdf: kdfConfiguration,
            encryption: encryptionConfiguration,
            data: (0, encoding_1$i.toBase64)(encryptedData),
        };
        return JSON.stringify(out);
    }
    async getKeyPair(hdPath) {
        const { privkey } = crypto_1$7.Slip10.derivePath(crypto_1$7.Slip10Curve.Secp256k1, this.seed, hdPath);
        const { pubkey } = await crypto_1$7.Secp256k1.makeKeypair(privkey);
        return {
            privkey: privkey,
            pubkey: crypto_1$7.Secp256k1.compressPubkey(pubkey),
        };
    }
    async getAccountsWithPrivkeys() {
        return Promise.all(this.accounts.map(async ({ hdPath, prefix }) => {
            const { privkey, pubkey } = await this.getKeyPair(hdPath);
            const address = (0, encoding_1$i.toBech32)(prefix, (0, addresses_1$1.rawSecp256k1PubkeyToRawAddress)(pubkey));
            return {
                algo: "secp256k1",
                privkey: privkey,
                pubkey: pubkey,
                address: address,
            };
        }));
    }
}
secp256k1hdwallet.Secp256k1HdWallet = Secp256k1HdWallet;

var secp256k1wallet = {};

Object.defineProperty(secp256k1wallet, "__esModule", { value: true });
secp256k1wallet.Secp256k1Wallet = void 0;
const crypto_1$6 = build$7;
const encoding_1$h = build$6;
const addresses_1 = addresses$1;
const signature_1 = signature;
const signdoc_1 = signdoc;
/**
 * A wallet that holds a single secp256k1 keypair.
 *
 * If you want to work with BIP39 mnemonics and multiple accounts, use Secp256k1HdWallet.
 */
class Secp256k1Wallet {
    constructor(privkey, pubkey, prefix) {
        this.privkey = privkey;
        this.pubkey = pubkey;
        this.prefix = prefix;
    }
    /**
     * Creates a Secp256k1Wallet from the given private key
     *
     * @param privkey The private key.
     * @param prefix The bech32 address prefix (human readable part). Defaults to "cosmos".
     */
    static async fromKey(privkey, prefix = "cosmos") {
        const uncompressed = (await crypto_1$6.Secp256k1.makeKeypair(privkey)).pubkey;
        return new Secp256k1Wallet(privkey, crypto_1$6.Secp256k1.compressPubkey(uncompressed), prefix);
    }
    get address() {
        return (0, encoding_1$h.toBech32)(this.prefix, (0, addresses_1.rawSecp256k1PubkeyToRawAddress)(this.pubkey));
    }
    async getAccounts() {
        return [
            {
                algo: "secp256k1",
                address: this.address,
                pubkey: this.pubkey,
            },
        ];
    }
    async signAmino(signerAddress, signDoc) {
        if (signerAddress !== this.address) {
            throw new Error(`Address ${signerAddress} not found in wallet`);
        }
        const message = new crypto_1$6.Sha256((0, signdoc_1.serializeSignDoc)(signDoc)).digest();
        const signature = await crypto_1$6.Secp256k1.createSignature(message, this.privkey);
        const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);
        return {
            signed: signDoc,
            signature: (0, signature_1.encodeSecp256k1Signature)(this.pubkey, signatureBytes),
        };
    }
}
secp256k1wallet.Secp256k1Wallet = Secp256k1Wallet;

var stdtx = {};

Object.defineProperty(stdtx, "__esModule", { value: true });
stdtx.makeStdTx = stdtx.isStdTx = void 0;
function isStdTx(txValue) {
    const { memo, msg, fee, signatures } = txValue;
    return (typeof memo === "string" && Array.isArray(msg) && typeof fee === "object" && Array.isArray(signatures));
}
stdtx.isStdTx = isStdTx;
function makeStdTx(content, signatures) {
    return {
        msg: content.msgs,
        fee: content.fee,
        memo: content.memo,
        signatures: Array.isArray(signatures) ? signatures : [signatures],
    };
}
stdtx.makeStdTx = makeStdTx;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.executeKdf = exports.makeStdTx = exports.isStdTx = exports.serializeSignDoc = exports.makeSignDoc = exports.encodeSecp256k1Signature = exports.decodeSignature = exports.Secp256k1Wallet = exports.Secp256k1HdWallet = exports.extractKdfConfiguration = exports.pubkeyType = exports.isSinglePubkey = exports.isSecp256k1Pubkey = exports.isMultisigThresholdPubkey = exports.isEd25519Pubkey = exports.makeCosmoshubPath = exports.createMultisigThresholdPubkey = exports.encodeSecp256k1Pubkey = exports.encodeEd25519Pubkey = exports.encodeBech32Pubkey = exports.encodeAminoPubkey = exports.decodeBech32Pubkey = exports.decodeAminoPubkey = exports.parseCoins = exports.coins = exports.coin = exports.addCoins = exports.rawSecp256k1PubkeyToRawAddress = exports.rawEd25519PubkeyToRawAddress = exports.pubkeyToRawAddress = exports.pubkeyToAddress = void 0;
	var addresses_1 = addresses$1;
	Object.defineProperty(exports, "pubkeyToAddress", { enumerable: true, get: function () { return addresses_1.pubkeyToAddress; } });
	Object.defineProperty(exports, "pubkeyToRawAddress", { enumerable: true, get: function () { return addresses_1.pubkeyToRawAddress; } });
	Object.defineProperty(exports, "rawEd25519PubkeyToRawAddress", { enumerable: true, get: function () { return addresses_1.rawEd25519PubkeyToRawAddress; } });
	Object.defineProperty(exports, "rawSecp256k1PubkeyToRawAddress", { enumerable: true, get: function () { return addresses_1.rawSecp256k1PubkeyToRawAddress; } });
	var coins_1 = coins$1;
	Object.defineProperty(exports, "addCoins", { enumerable: true, get: function () { return coins_1.addCoins; } });
	Object.defineProperty(exports, "coin", { enumerable: true, get: function () { return coins_1.coin; } });
	Object.defineProperty(exports, "coins", { enumerable: true, get: function () { return coins_1.coins; } });
	Object.defineProperty(exports, "parseCoins", { enumerable: true, get: function () { return coins_1.parseCoins; } });
	var encoding_1 = encoding;
	Object.defineProperty(exports, "decodeAminoPubkey", { enumerable: true, get: function () { return encoding_1.decodeAminoPubkey; } });
	Object.defineProperty(exports, "decodeBech32Pubkey", { enumerable: true, get: function () { return encoding_1.decodeBech32Pubkey; } });
	Object.defineProperty(exports, "encodeAminoPubkey", { enumerable: true, get: function () { return encoding_1.encodeAminoPubkey; } });
	Object.defineProperty(exports, "encodeBech32Pubkey", { enumerable: true, get: function () { return encoding_1.encodeBech32Pubkey; } });
	Object.defineProperty(exports, "encodeEd25519Pubkey", { enumerable: true, get: function () { return encoding_1.encodeEd25519Pubkey; } });
	Object.defineProperty(exports, "encodeSecp256k1Pubkey", { enumerable: true, get: function () { return encoding_1.encodeSecp256k1Pubkey; } });
	var multisig_1 = multisig;
	Object.defineProperty(exports, "createMultisigThresholdPubkey", { enumerable: true, get: function () { return multisig_1.createMultisigThresholdPubkey; } });
	var paths_1 = paths$1;
	Object.defineProperty(exports, "makeCosmoshubPath", { enumerable: true, get: function () { return paths_1.makeCosmoshubPath; } });
	var pubkeys_1 = pubkeys;
	Object.defineProperty(exports, "isEd25519Pubkey", { enumerable: true, get: function () { return pubkeys_1.isEd25519Pubkey; } });
	Object.defineProperty(exports, "isMultisigThresholdPubkey", { enumerable: true, get: function () { return pubkeys_1.isMultisigThresholdPubkey; } });
	Object.defineProperty(exports, "isSecp256k1Pubkey", { enumerable: true, get: function () { return pubkeys_1.isSecp256k1Pubkey; } });
	Object.defineProperty(exports, "isSinglePubkey", { enumerable: true, get: function () { return pubkeys_1.isSinglePubkey; } });
	Object.defineProperty(exports, "pubkeyType", { enumerable: true, get: function () { return pubkeys_1.pubkeyType; } });
	var secp256k1hdwallet_1 = secp256k1hdwallet;
	Object.defineProperty(exports, "extractKdfConfiguration", { enumerable: true, get: function () { return secp256k1hdwallet_1.extractKdfConfiguration; } });
	Object.defineProperty(exports, "Secp256k1HdWallet", { enumerable: true, get: function () { return secp256k1hdwallet_1.Secp256k1HdWallet; } });
	var secp256k1wallet_1 = secp256k1wallet;
	Object.defineProperty(exports, "Secp256k1Wallet", { enumerable: true, get: function () { return secp256k1wallet_1.Secp256k1Wallet; } });
	var signature_1 = signature;
	Object.defineProperty(exports, "decodeSignature", { enumerable: true, get: function () { return signature_1.decodeSignature; } });
	Object.defineProperty(exports, "encodeSecp256k1Signature", { enumerable: true, get: function () { return signature_1.encodeSecp256k1Signature; } });
	var signdoc_1 = signdoc;
	Object.defineProperty(exports, "makeSignDoc", { enumerable: true, get: function () { return signdoc_1.makeSignDoc; } });
	Object.defineProperty(exports, "serializeSignDoc", { enumerable: true, get: function () { return signdoc_1.serializeSignDoc; } });
	var stdtx_1 = stdtx;
	Object.defineProperty(exports, "isStdTx", { enumerable: true, get: function () { return stdtx_1.isStdTx; } });
	Object.defineProperty(exports, "makeStdTx", { enumerable: true, get: function () { return stdtx_1.makeStdTx; } });
	var wallet_1 = wallet$1;
	Object.defineProperty(exports, "executeKdf", { enumerable: true, get: function () { return wallet_1.executeKdf; } });
	
} (build$8));

var signing = {};

var __importDefault$b = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(signing, "__esModule", { value: true });
signing.makeSignBytes = signing.makeSignDoc = signing.makeAuthInfoBytes = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const utils_1$b = build$5;
const signing_1$4 = signing$1;
const tx_1$c = tx$e;
const long_1$9 = __importDefault$b(long);
/**
 * Create signer infos from the provided signers.
 *
 * This implementation does not support different signing modes for the different signers.
 */
function makeSignerInfos(signers, signMode) {
    return signers.map(({ pubkey, sequence }) => ({
        publicKey: pubkey,
        modeInfo: {
            single: { mode: signMode },
        },
        sequence: long_1$9.default.fromNumber(sequence),
    }));
}
/**
 * Creates and serializes an AuthInfo document.
 *
 * This implementation does not support different signing modes for the different signers.
 */
function makeAuthInfoBytes(signers, feeAmount, gasLimit, feeGranter, feePayer, signMode = signing_1$4.SignMode.SIGN_MODE_DIRECT) {
    // Required arguments 4 and 5 were added in CosmJS 0.29. Use runtime checks to help our non-TS users.
    (0, utils_1$b.assert)(feeGranter === undefined || typeof feeGranter === "string", "feeGranter must be undefined or string");
    (0, utils_1$b.assert)(feePayer === undefined || typeof feePayer === "string", "feePayer must be undefined or string");
    const authInfo = tx_1$c.AuthInfo.fromPartial({
        signerInfos: makeSignerInfos(signers, signMode),
        fee: {
            amount: [...feeAmount],
            gasLimit: long_1$9.default.fromNumber(gasLimit),
            granter: feeGranter,
            payer: feePayer,
        },
    });
    return tx_1$c.AuthInfo.encode(authInfo).finish();
}
signing.makeAuthInfoBytes = makeAuthInfoBytes;
function makeSignDoc(bodyBytes, authInfoBytes, chainId, accountNumber) {
    return {
        bodyBytes: bodyBytes,
        authInfoBytes: authInfoBytes,
        chainId: chainId,
        accountNumber: long_1$9.default.fromNumber(accountNumber),
    };
}
signing.makeSignDoc = makeSignDoc;
function makeSignBytes({ accountNumber, authInfoBytes, bodyBytes, chainId }) {
    const signDoc = tx_1$c.SignDoc.fromPartial({
        accountNumber: accountNumber,
        authInfoBytes: authInfoBytes,
        bodyBytes: bodyBytes,
        chainId: chainId,
    });
    return tx_1$c.SignDoc.encode(signDoc).finish();
}
signing.makeSignBytes = makeSignBytes;

var wallet = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decrypt = exports.encrypt = exports.supportedAlgorithms = exports.executeKdf = exports.cosmjsSalt = void 0;
	const crypto_1 = build$7;
	const encoding_1 = build$6;
	/**
	 * A fixed salt is chosen to archive a deterministic password to key derivation.
	 * This reduces the scope of a potential rainbow attack to all CosmJS users.
	 * Must be 16 bytes due to implementation limitations.
	 */
	exports.cosmjsSalt = (0, encoding_1.toAscii)("The CosmJS salt.");
	async function executeKdf(password, configuration) {
	    switch (configuration.algorithm) {
	        case "argon2id": {
	            const options = configuration.params;
	            if (!(0, crypto_1.isArgon2idOptions)(options))
	                throw new Error("Invalid format of argon2id params");
	            return crypto_1.Argon2id.execute(password, exports.cosmjsSalt, options);
	        }
	        default:
	            throw new Error("Unsupported KDF algorithm");
	    }
	}
	exports.executeKdf = executeKdf;
	exports.supportedAlgorithms = {
	    xchacha20poly1305Ietf: "xchacha20poly1305-ietf",
	};
	async function encrypt(plaintext, encryptionKey, config) {
	    switch (config.algorithm) {
	        case exports.supportedAlgorithms.xchacha20poly1305Ietf: {
	            const nonce = crypto_1.Random.getBytes(crypto_1.xchacha20NonceLength);
	            // Prepend fixed-length nonce to ciphertext as suggested in the example from https://github.com/jedisct1/libsodium.js#api
	            return new Uint8Array([
	                ...nonce,
	                ...(await crypto_1.Xchacha20poly1305Ietf.encrypt(plaintext, encryptionKey, nonce)),
	            ]);
	        }
	        default:
	            throw new Error(`Unsupported encryption algorithm: '${config.algorithm}'`);
	    }
	}
	exports.encrypt = encrypt;
	async function decrypt(ciphertext, encryptionKey, config) {
	    switch (config.algorithm) {
	        case exports.supportedAlgorithms.xchacha20poly1305Ietf: {
	            const nonce = ciphertext.slice(0, crypto_1.xchacha20NonceLength);
	            return crypto_1.Xchacha20poly1305Ietf.decrypt(ciphertext.slice(crypto_1.xchacha20NonceLength), encryptionKey, nonce);
	        }
	        default:
	            throw new Error(`Unsupported encryption algorithm: '${config.algorithm}'`);
	    }
	}
	exports.decrypt = decrypt;
	
} (wallet));

Object.defineProperty(directsecp256k1hdwallet, "__esModule", { value: true });
directsecp256k1hdwallet.DirectSecp256k1HdWallet = directsecp256k1hdwallet.extractKdfConfiguration = void 0;
const amino_1$4 = build$8;
const crypto_1$5 = build$7;
const encoding_1$g = build$6;
const utils_1$a = build$5;
const signing_1$3 = signing;
const wallet_1 = wallet;
const serializationTypeV1 = "directsecp256k1hdwallet-v1";
/**
 * A KDF configuration that is not very strong but can be used on the main thread.
 * It takes about 1 second in Node.js 16.0.0 and should have similar runtimes in other modern Wasm hosts.
 */
const basicPasswordHashingOptions = {
    algorithm: "argon2id",
    params: {
        outputLength: 32,
        opsLimit: 24,
        memLimitKib: 12 * 1024,
    },
};
function isDerivationJson(thing) {
    if (!(0, utils_1$a.isNonNullObject)(thing))
        return false;
    if (typeof thing.hdPath !== "string")
        return false;
    if (typeof thing.prefix !== "string")
        return false;
    return true;
}
function extractKdfConfigurationV1(doc) {
    return doc.kdf;
}
function extractKdfConfiguration(serialization) {
    const root = JSON.parse(serialization);
    if (!(0, utils_1$a.isNonNullObject)(root))
        throw new Error("Root document is not an object.");
    switch (root.type) {
        case serializationTypeV1:
            return extractKdfConfigurationV1(root);
        default:
            throw new Error("Unsupported serialization type");
    }
}
directsecp256k1hdwallet.extractKdfConfiguration = extractKdfConfiguration;
const defaultOptions = {
    bip39Password: "",
    hdPaths: [(0, amino_1$4.makeCosmoshubPath)(0)],
    prefix: "cosmos",
};
/** A wallet for protobuf based signing using SIGN_MODE_DIRECT */
class DirectSecp256k1HdWallet {
    constructor(mnemonic, options) {
        const prefix = options.prefix ?? defaultOptions.prefix;
        const hdPaths = options.hdPaths ?? defaultOptions.hdPaths;
        this.secret = mnemonic;
        this.seed = options.seed;
        this.accounts = hdPaths.map((hdPath) => ({
            hdPath: hdPath,
            prefix: prefix,
        }));
    }
    /**
     * Restores a wallet from the given BIP39 mnemonic.
     *
     * @param mnemonic Any valid English mnemonic.
     * @param options An optional `DirectSecp256k1HdWalletOptions` object optionally containing a bip39Password, hdPaths, and prefix.
     */
    static async fromMnemonic(mnemonic, options = {}) {
        const mnemonicChecked = new crypto_1$5.EnglishMnemonic(mnemonic);
        const seed = await crypto_1$5.Bip39.mnemonicToSeed(mnemonicChecked, options.bip39Password);
        return new DirectSecp256k1HdWallet(mnemonicChecked, {
            ...options,
            seed: seed,
        });
    }
    /**
     * Generates a new wallet with a BIP39 mnemonic of the given length.
     *
     * @param length The number of words in the mnemonic (12, 15, 18, 21 or 24).
     * @param options An optional `DirectSecp256k1HdWalletOptions` object optionally containing a bip39Password, hdPaths, and prefix.
     */
    static async generate(length = 12, options = {}) {
        const entropyLength = 4 * Math.floor((11 * length) / 33);
        const entropy = crypto_1$5.Random.getBytes(entropyLength);
        const mnemonic = crypto_1$5.Bip39.encode(entropy);
        return DirectSecp256k1HdWallet.fromMnemonic(mnemonic.toString(), options);
    }
    /**
     * Restores a wallet from an encrypted serialization.
     *
     * @param password The user provided password used to generate an encryption key via a KDF.
     *                 This is not normalized internally (see "Unicode normalization" to learn more).
     */
    static async deserialize(serialization, password) {
        const root = JSON.parse(serialization);
        if (!(0, utils_1$a.isNonNullObject)(root))
            throw new Error("Root document is not an object.");
        switch (root.type) {
            case serializationTypeV1:
                return DirectSecp256k1HdWallet.deserializeTypeV1(serialization, password);
            default:
                throw new Error("Unsupported serialization type");
        }
    }
    /**
     * Restores a wallet from an encrypted serialization.
     *
     * This is an advanced alternative to calling `deserialize(serialization, password)` directly, which allows
     * you to offload the KDF execution to a non-UI thread (e.g. in a WebWorker).
     *
     * The caller is responsible for ensuring the key was derived with the given KDF configuration. This can be
     * done using `extractKdfConfiguration(serialization)` and `executeKdf(password, kdfConfiguration)` from this package.
     */
    static async deserializeWithEncryptionKey(serialization, encryptionKey) {
        const root = JSON.parse(serialization);
        if (!(0, utils_1$a.isNonNullObject)(root))
            throw new Error("Root document is not an object.");
        const untypedRoot = root;
        switch (untypedRoot.type) {
            case serializationTypeV1: {
                const decryptedBytes = await (0, wallet_1.decrypt)((0, encoding_1$g.fromBase64)(untypedRoot.data), encryptionKey, untypedRoot.encryption);
                const decryptedDocument = JSON.parse((0, encoding_1$g.fromUtf8)(decryptedBytes));
                const { mnemonic, accounts } = decryptedDocument;
                (0, utils_1$a.assert)(typeof mnemonic === "string");
                if (!Array.isArray(accounts))
                    throw new Error("Property 'accounts' is not an array");
                if (!accounts.every((account) => isDerivationJson(account))) {
                    throw new Error("Account is not in the correct format.");
                }
                const firstPrefix = accounts[0].prefix;
                if (!accounts.every(({ prefix }) => prefix === firstPrefix)) {
                    throw new Error("Accounts do not all have the same prefix");
                }
                const hdPaths = accounts.map(({ hdPath }) => (0, crypto_1$5.stringToPath)(hdPath));
                return DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {
                    hdPaths: hdPaths,
                    prefix: firstPrefix,
                });
            }
            default:
                throw new Error("Unsupported serialization type");
        }
    }
    static async deserializeTypeV1(serialization, password) {
        const root = JSON.parse(serialization);
        if (!(0, utils_1$a.isNonNullObject)(root))
            throw new Error("Root document is not an object.");
        const encryptionKey = await (0, wallet_1.executeKdf)(password, root.kdf);
        return DirectSecp256k1HdWallet.deserializeWithEncryptionKey(serialization, encryptionKey);
    }
    get mnemonic() {
        return this.secret.toString();
    }
    async getAccounts() {
        const accountsWithPrivkeys = await this.getAccountsWithPrivkeys();
        return accountsWithPrivkeys.map(({ algo, pubkey, address }) => ({
            algo: algo,
            pubkey: pubkey,
            address: address,
        }));
    }
    async signDirect(signerAddress, signDoc) {
        const accounts = await this.getAccountsWithPrivkeys();
        const account = accounts.find(({ address }) => address === signerAddress);
        if (account === undefined) {
            throw new Error(`Address ${signerAddress} not found in wallet`);
        }
        const { privkey, pubkey } = account;
        const signBytes = (0, signing_1$3.makeSignBytes)(signDoc);
        const hashedMessage = (0, crypto_1$5.sha256)(signBytes);
        const signature = await crypto_1$5.Secp256k1.createSignature(hashedMessage, privkey);
        const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);
        const stdSignature = (0, amino_1$4.encodeSecp256k1Signature)(pubkey, signatureBytes);
        return {
            signed: signDoc,
            signature: stdSignature,
        };
    }
    /**
     * Generates an encrypted serialization of this wallet.
     *
     * @param password The user provided password used to generate an encryption key via a KDF.
     *                 This is not normalized internally (see "Unicode normalization" to learn more).
     */
    async serialize(password) {
        const kdfConfiguration = basicPasswordHashingOptions;
        const encryptionKey = await (0, wallet_1.executeKdf)(password, kdfConfiguration);
        return this.serializeWithEncryptionKey(encryptionKey, kdfConfiguration);
    }
    /**
     * Generates an encrypted serialization of this wallet.
     *
     * This is an advanced alternative to calling `serialize(password)` directly, which allows you to
     * offload the KDF execution to a non-UI thread (e.g. in a WebWorker).
     *
     * The caller is responsible for ensuring the key was derived with the given KDF options. If this
     * is not the case, the wallet cannot be restored with the original password.
     */
    async serializeWithEncryptionKey(encryptionKey, kdfConfiguration) {
        const dataToEncrypt = {
            mnemonic: this.mnemonic,
            accounts: this.accounts.map(({ hdPath, prefix }) => ({
                hdPath: (0, crypto_1$5.pathToString)(hdPath),
                prefix: prefix,
            })),
        };
        const dataToEncryptRaw = (0, encoding_1$g.toUtf8)(JSON.stringify(dataToEncrypt));
        const encryptionConfiguration = {
            algorithm: wallet_1.supportedAlgorithms.xchacha20poly1305Ietf,
        };
        const encryptedData = await (0, wallet_1.encrypt)(dataToEncryptRaw, encryptionKey, encryptionConfiguration);
        const out = {
            type: serializationTypeV1,
            kdf: kdfConfiguration,
            encryption: encryptionConfiguration,
            data: (0, encoding_1$g.toBase64)(encryptedData),
        };
        return JSON.stringify(out);
    }
    async getKeyPair(hdPath) {
        const { privkey } = crypto_1$5.Slip10.derivePath(crypto_1$5.Slip10Curve.Secp256k1, this.seed, hdPath);
        const { pubkey } = await crypto_1$5.Secp256k1.makeKeypair(privkey);
        return {
            privkey: privkey,
            pubkey: crypto_1$5.Secp256k1.compressPubkey(pubkey),
        };
    }
    async getAccountsWithPrivkeys() {
        return Promise.all(this.accounts.map(async ({ hdPath, prefix }) => {
            const { privkey, pubkey } = await this.getKeyPair(hdPath);
            const address = (0, encoding_1$g.toBech32)(prefix, (0, amino_1$4.rawSecp256k1PubkeyToRawAddress)(pubkey));
            return {
                algo: "secp256k1",
                privkey: privkey,
                pubkey: pubkey,
                address: address,
            };
        }));
    }
}
directsecp256k1hdwallet.DirectSecp256k1HdWallet = DirectSecp256k1HdWallet;

var directsecp256k1wallet = {};

Object.defineProperty(directsecp256k1wallet, "__esModule", { value: true });
directsecp256k1wallet.DirectSecp256k1Wallet = void 0;
const amino_1$3 = build$8;
const crypto_1$4 = build$7;
const encoding_1$f = build$6;
const signing_1$2 = signing;
/**
 * A wallet that holds a single secp256k1 keypair.
 *
 * If you want to work with BIP39 mnemonics and multiple accounts, use DirectSecp256k1HdWallet.
 */
class DirectSecp256k1Wallet {
    constructor(privkey, pubkey, prefix) {
        this.privkey = privkey;
        this.pubkey = pubkey;
        this.prefix = prefix;
    }
    /**
     * Creates a DirectSecp256k1Wallet from the given private key
     *
     * @param privkey The private key.
     * @param prefix The bech32 address prefix (human readable part). Defaults to "cosmos".
     */
    static async fromKey(privkey, prefix = "cosmos") {
        const uncompressed = (await crypto_1$4.Secp256k1.makeKeypair(privkey)).pubkey;
        return new DirectSecp256k1Wallet(privkey, crypto_1$4.Secp256k1.compressPubkey(uncompressed), prefix);
    }
    get address() {
        return (0, encoding_1$f.toBech32)(this.prefix, (0, amino_1$3.rawSecp256k1PubkeyToRawAddress)(this.pubkey));
    }
    async getAccounts() {
        return [
            {
                algo: "secp256k1",
                address: this.address,
                pubkey: this.pubkey,
            },
        ];
    }
    async signDirect(address, signDoc) {
        const signBytes = (0, signing_1$2.makeSignBytes)(signDoc);
        if (address !== this.address) {
            throw new Error(`Address ${address} not found in wallet`);
        }
        const hashedMessage = (0, crypto_1$4.sha256)(signBytes);
        const signature = await crypto_1$4.Secp256k1.createSignature(hashedMessage, this.privkey);
        const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);
        const stdSignature = (0, amino_1$3.encodeSecp256k1Signature)(this.pubkey, signatureBytes);
        return {
            signed: signDoc,
            signature: stdSignature,
        };
    }
}
directsecp256k1wallet.DirectSecp256k1Wallet = DirectSecp256k1Wallet;

var paths = {};

Object.defineProperty(paths, "__esModule", { value: true });
paths.makeCosmoshubPath = void 0;
const crypto_1$3 = build$7;
/**
 * The Cosmos Hub derivation path in the form `m/44'/118'/0'/0/a`
 * with 0-based account index `a`.
 */
function makeCosmoshubPath(a) {
    return [
        crypto_1$3.Slip10RawIndex.hardened(44),
        crypto_1$3.Slip10RawIndex.hardened(118),
        crypto_1$3.Slip10RawIndex.hardened(0),
        crypto_1$3.Slip10RawIndex.normal(0),
        crypto_1$3.Slip10RawIndex.normal(a),
    ];
}
paths.makeCosmoshubPath = makeCosmoshubPath;

var pubkey = {};

var keys$4 = {};

var __createBinding$h = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$h = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$h = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$h(result, mod, k);
    __setModuleDefault$h(result, mod);
    return result;
};
Object.defineProperty(keys$4, "__esModule", { value: true });
keys$4.PrivKey = keys$4.PubKey = keys$4.protobufPackage = void 0;
/* eslint-disable */
const _m0$d = __importStar$h(minimal);
const helpers_1$d = helpers;
keys$4.protobufPackage = "cosmos.crypto.ed25519";
function createBasePubKey$1() {
    return {
        key: new Uint8Array(),
    };
}
keys$4.PubKey = {
    encode(message, writer = _m0$d.Writer.create()) {
        if (message.key.length !== 0) {
            writer.uint32(10).bytes(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$d.Reader ? input : new _m0$d.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePubKey$1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: (0, helpers_1$d.isSet)(object.key) ? (0, helpers_1$d.bytesFromBase64)(object.key) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined &&
            (obj.key = (0, helpers_1$d.base64FromBytes)(message.key !== undefined ? message.key : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBasePubKey$1();
        message.key = object.key ?? new Uint8Array();
        return message;
    },
};
function createBasePrivKey$1() {
    return {
        key: new Uint8Array(),
    };
}
keys$4.PrivKey = {
    encode(message, writer = _m0$d.Writer.create()) {
        if (message.key.length !== 0) {
            writer.uint32(10).bytes(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$d.Reader ? input : new _m0$d.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePrivKey$1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: (0, helpers_1$d.isSet)(object.key) ? (0, helpers_1$d.bytesFromBase64)(object.key) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined &&
            (obj.key = (0, helpers_1$d.base64FromBytes)(message.key !== undefined ? message.key : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBasePrivKey$1();
        message.key = object.key ?? new Uint8Array();
        return message;
    },
};

var keys$3 = {};

var __createBinding$g = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$g = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$g = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$g(result, mod, k);
    __setModuleDefault$g(result, mod);
    return result;
};
Object.defineProperty(keys$3, "__esModule", { value: true });
keys$3.LegacyAminoPubKey = keys$3.protobufPackage = void 0;
/* eslint-disable */
const any_1$4 = any;
const _m0$c = __importStar$g(minimal);
const helpers_1$c = helpers;
keys$3.protobufPackage = "cosmos.crypto.multisig";
function createBaseLegacyAminoPubKey() {
    return {
        threshold: 0,
        publicKeys: [],
    };
}
keys$3.LegacyAminoPubKey = {
    encode(message, writer = _m0$c.Writer.create()) {
        if (message.threshold !== 0) {
            writer.uint32(8).uint32(message.threshold);
        }
        for (const v of message.publicKeys) {
            any_1$4.Any.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$c.Reader ? input : new _m0$c.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLegacyAminoPubKey();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.threshold = reader.uint32();
                    break;
                case 2:
                    message.publicKeys.push(any_1$4.Any.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            threshold: (0, helpers_1$c.isSet)(object.threshold) ? Number(object.threshold) : 0,
            publicKeys: Array.isArray(object?.publicKeys) ? object.publicKeys.map((e) => any_1$4.Any.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.threshold !== undefined && (obj.threshold = Math.round(message.threshold));
        if (message.publicKeys) {
            obj.publicKeys = message.publicKeys.map((e) => (e ? any_1$4.Any.toJSON(e) : undefined));
        }
        else {
            obj.publicKeys = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseLegacyAminoPubKey();
        message.threshold = object.threshold ?? 0;
        message.publicKeys = object.publicKeys?.map((e) => any_1$4.Any.fromPartial(e)) || [];
        return message;
    },
};

var keys$2 = {};

var __createBinding$f = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$f = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$f = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$f(result, mod, k);
    __setModuleDefault$f(result, mod);
    return result;
};
Object.defineProperty(keys$2, "__esModule", { value: true });
keys$2.PrivKey = keys$2.PubKey = keys$2.protobufPackage = void 0;
/* eslint-disable */
const _m0$b = __importStar$f(minimal);
const helpers_1$b = helpers;
keys$2.protobufPackage = "cosmos.crypto.secp256k1";
function createBasePubKey() {
    return {
        key: new Uint8Array(),
    };
}
keys$2.PubKey = {
    encode(message, writer = _m0$b.Writer.create()) {
        if (message.key.length !== 0) {
            writer.uint32(10).bytes(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$b.Reader ? input : new _m0$b.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePubKey();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: (0, helpers_1$b.isSet)(object.key) ? (0, helpers_1$b.bytesFromBase64)(object.key) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined &&
            (obj.key = (0, helpers_1$b.base64FromBytes)(message.key !== undefined ? message.key : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBasePubKey();
        message.key = object.key ?? new Uint8Array();
        return message;
    },
};
function createBasePrivKey() {
    return {
        key: new Uint8Array(),
    };
}
keys$2.PrivKey = {
    encode(message, writer = _m0$b.Writer.create()) {
        if (message.key.length !== 0) {
            writer.uint32(10).bytes(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$b.Reader ? input : new _m0$b.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePrivKey();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: (0, helpers_1$b.isSet)(object.key) ? (0, helpers_1$b.bytesFromBase64)(object.key) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined &&
            (obj.key = (0, helpers_1$b.base64FromBytes)(message.key !== undefined ? message.key : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBasePrivKey();
        message.key = object.key ?? new Uint8Array();
        return message;
    },
};

Object.defineProperty(pubkey, "__esModule", { value: true });
pubkey.decodePubkey = pubkey.anyToSinglePubkey = pubkey.encodePubkey = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const amino_1$2 = build$8;
const encoding_1$e = build$6;
const math_1$9 = build$a;
const keys_1 = keys$4;
const keys_2 = keys$3;
const keys_3 = keys$2;
const any_1$3 = any;
/**
 * Takes a pubkey in the Amino JSON object style (type/value wrapper)
 * and convertes it into a protobuf `Any`.
 *
 * This is the reverse operation to `decodePubkey`.
 */
function encodePubkey(pubkey) {
    if ((0, amino_1$2.isSecp256k1Pubkey)(pubkey)) {
        const pubkeyProto = keys_3.PubKey.fromPartial({
            key: (0, encoding_1$e.fromBase64)(pubkey.value),
        });
        return any_1$3.Any.fromPartial({
            typeUrl: "/cosmos.crypto.secp256k1.PubKey",
            value: Uint8Array.from(keys_3.PubKey.encode(pubkeyProto).finish()),
        });
    }
    else if ((0, amino_1$2.isEd25519Pubkey)(pubkey)) {
        const pubkeyProto = keys_1.PubKey.fromPartial({
            key: (0, encoding_1$e.fromBase64)(pubkey.value),
        });
        return any_1$3.Any.fromPartial({
            typeUrl: "/cosmos.crypto.ed25519.PubKey",
            value: Uint8Array.from(keys_1.PubKey.encode(pubkeyProto).finish()),
        });
    }
    else if ((0, amino_1$2.isMultisigThresholdPubkey)(pubkey)) {
        const pubkeyProto = keys_2.LegacyAminoPubKey.fromPartial({
            threshold: math_1$9.Uint53.fromString(pubkey.value.threshold).toNumber(),
            publicKeys: pubkey.value.pubkeys.map(encodePubkey),
        });
        return any_1$3.Any.fromPartial({
            typeUrl: "/cosmos.crypto.multisig.LegacyAminoPubKey",
            value: Uint8Array.from(keys_2.LegacyAminoPubKey.encode(pubkeyProto).finish()),
        });
    }
    else {
        throw new Error(`Pubkey type ${pubkey.type} not recognized`);
    }
}
pubkey.encodePubkey = encodePubkey;
/**
 * Decodes a single pubkey (i.e. not a multisig pubkey) from `Any` into
 * `SinglePubkey`.
 *
 * In most cases you probably want to use `decodePubkey`.
 */
function anyToSinglePubkey(pubkey) {
    switch (pubkey.typeUrl) {
        case "/cosmos.crypto.secp256k1.PubKey": {
            const { key } = keys_3.PubKey.decode(pubkey.value);
            return (0, amino_1$2.encodeSecp256k1Pubkey)(key);
        }
        case "/cosmos.crypto.ed25519.PubKey": {
            const { key } = keys_1.PubKey.decode(pubkey.value);
            return (0, amino_1$2.encodeEd25519Pubkey)(key);
        }
        default:
            throw new Error(`Pubkey type_url ${pubkey.typeUrl} not recognized as single public key type`);
    }
}
pubkey.anyToSinglePubkey = anyToSinglePubkey;
/**
 * Decodes a pubkey from a protobuf `Any` into `Pubkey`.
 * This supports single pubkeys such as Cosmos ed25519 and secp256k1 keys
 * as well as multisig threshold pubkeys.
 */
function decodePubkey$2(pubkey) {
    switch (pubkey.typeUrl) {
        case "/cosmos.crypto.secp256k1.PubKey":
        case "/cosmos.crypto.ed25519.PubKey": {
            return anyToSinglePubkey(pubkey);
        }
        case "/cosmos.crypto.multisig.LegacyAminoPubKey": {
            const { threshold, publicKeys } = keys_2.LegacyAminoPubKey.decode(pubkey.value);
            const out = {
                type: "tendermint/PubKeyMultisigThreshold",
                value: {
                    threshold: threshold.toString(),
                    pubkeys: publicKeys.map(anyToSinglePubkey),
                },
            };
            return out;
        }
        default:
            throw new Error(`Pubkey type_url ${pubkey.typeUrl} not recognized`);
    }
}
pubkey.decodePubkey = decodePubkey$2;

var registry = {};

var tx$d = {};

var bank = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Metadata = exports.DenomUnit = exports.Supply = exports.Output = exports.Input = exports.SendEnabled = exports.Params = exports.protobufPackage = void 0;
	/* eslint-disable */
	const coin_1 = coin$1;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.bank.v1beta1";
	function createBaseParams() {
	    return {
	        sendEnabled: [],
	        defaultSendEnabled: false,
	    };
	}
	exports.Params = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.sendEnabled) {
	            exports.SendEnabled.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.defaultSendEnabled === true) {
	            writer.uint32(16).bool(message.defaultSendEnabled);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseParams();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.sendEnabled.push(exports.SendEnabled.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.defaultSendEnabled = reader.bool();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            sendEnabled: Array.isArray(object?.sendEnabled)
	                ? object.sendEnabled.map((e) => exports.SendEnabled.fromJSON(e))
	                : [],
	            defaultSendEnabled: (0, helpers_1.isSet)(object.defaultSendEnabled) ? Boolean(object.defaultSendEnabled) : false,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.sendEnabled) {
	            obj.sendEnabled = message.sendEnabled.map((e) => (e ? exports.SendEnabled.toJSON(e) : undefined));
	        }
	        else {
	            obj.sendEnabled = [];
	        }
	        message.defaultSendEnabled !== undefined && (obj.defaultSendEnabled = message.defaultSendEnabled);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseParams();
	        message.sendEnabled = object.sendEnabled?.map((e) => exports.SendEnabled.fromPartial(e)) || [];
	        message.defaultSendEnabled = object.defaultSendEnabled ?? false;
	        return message;
	    },
	};
	function createBaseSendEnabled() {
	    return {
	        denom: "",
	        enabled: false,
	    };
	}
	exports.SendEnabled = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.denom !== "") {
	            writer.uint32(10).string(message.denom);
	        }
	        if (message.enabled === true) {
	            writer.uint32(16).bool(message.enabled);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseSendEnabled();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.denom = reader.string();
	                    break;
	                case 2:
	                    message.enabled = reader.bool();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            denom: (0, helpers_1.isSet)(object.denom) ? String(object.denom) : "",
	            enabled: (0, helpers_1.isSet)(object.enabled) ? Boolean(object.enabled) : false,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.denom !== undefined && (obj.denom = message.denom);
	        message.enabled !== undefined && (obj.enabled = message.enabled);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseSendEnabled();
	        message.denom = object.denom ?? "";
	        message.enabled = object.enabled ?? false;
	        return message;
	    },
	};
	function createBaseInput() {
	    return {
	        address: "",
	        coins: [],
	    };
	}
	exports.Input = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.address !== "") {
	            writer.uint32(10).string(message.address);
	        }
	        for (const v of message.coins) {
	            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseInput();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.address = reader.string();
	                    break;
	                case 2:
	                    message.coins.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            address: (0, helpers_1.isSet)(object.address) ? String(object.address) : "",
	            coins: Array.isArray(object?.coins) ? object.coins.map((e) => coin_1.Coin.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.address !== undefined && (obj.address = message.address);
	        if (message.coins) {
	            obj.coins = message.coins.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.coins = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseInput();
	        message.address = object.address ?? "";
	        message.coins = object.coins?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseOutput() {
	    return {
	        address: "",
	        coins: [],
	    };
	}
	exports.Output = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.address !== "") {
	            writer.uint32(10).string(message.address);
	        }
	        for (const v of message.coins) {
	            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseOutput();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.address = reader.string();
	                    break;
	                case 2:
	                    message.coins.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            address: (0, helpers_1.isSet)(object.address) ? String(object.address) : "",
	            coins: Array.isArray(object?.coins) ? object.coins.map((e) => coin_1.Coin.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.address !== undefined && (obj.address = message.address);
	        if (message.coins) {
	            obj.coins = message.coins.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.coins = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseOutput();
	        message.address = object.address ?? "";
	        message.coins = object.coins?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseSupply() {
	    return {
	        total: [],
	    };
	}
	exports.Supply = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.total) {
	            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseSupply();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.total.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            total: Array.isArray(object?.total) ? object.total.map((e) => coin_1.Coin.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.total) {
	            obj.total = message.total.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.total = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseSupply();
	        message.total = object.total?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseDenomUnit() {
	    return {
	        denom: "",
	        exponent: 0,
	        aliases: [],
	    };
	}
	exports.DenomUnit = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.denom !== "") {
	            writer.uint32(10).string(message.denom);
	        }
	        if (message.exponent !== 0) {
	            writer.uint32(16).uint32(message.exponent);
	        }
	        for (const v of message.aliases) {
	            writer.uint32(26).string(v);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseDenomUnit();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.denom = reader.string();
	                    break;
	                case 2:
	                    message.exponent = reader.uint32();
	                    break;
	                case 3:
	                    message.aliases.push(reader.string());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            denom: (0, helpers_1.isSet)(object.denom) ? String(object.denom) : "",
	            exponent: (0, helpers_1.isSet)(object.exponent) ? Number(object.exponent) : 0,
	            aliases: Array.isArray(object?.aliases) ? object.aliases.map((e) => String(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.denom !== undefined && (obj.denom = message.denom);
	        message.exponent !== undefined && (obj.exponent = Math.round(message.exponent));
	        if (message.aliases) {
	            obj.aliases = message.aliases.map((e) => e);
	        }
	        else {
	            obj.aliases = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseDenomUnit();
	        message.denom = object.denom ?? "";
	        message.exponent = object.exponent ?? 0;
	        message.aliases = object.aliases?.map((e) => e) || [];
	        return message;
	    },
	};
	function createBaseMetadata() {
	    return {
	        description: "",
	        denomUnits: [],
	        base: "",
	        display: "",
	        name: "",
	        symbol: "",
	    };
	}
	exports.Metadata = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.description !== "") {
	            writer.uint32(10).string(message.description);
	        }
	        for (const v of message.denomUnits) {
	            exports.DenomUnit.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.base !== "") {
	            writer.uint32(26).string(message.base);
	        }
	        if (message.display !== "") {
	            writer.uint32(34).string(message.display);
	        }
	        if (message.name !== "") {
	            writer.uint32(42).string(message.name);
	        }
	        if (message.symbol !== "") {
	            writer.uint32(50).string(message.symbol);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMetadata();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.description = reader.string();
	                    break;
	                case 2:
	                    message.denomUnits.push(exports.DenomUnit.decode(reader, reader.uint32()));
	                    break;
	                case 3:
	                    message.base = reader.string();
	                    break;
	                case 4:
	                    message.display = reader.string();
	                    break;
	                case 5:
	                    message.name = reader.string();
	                    break;
	                case 6:
	                    message.symbol = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            description: (0, helpers_1.isSet)(object.description) ? String(object.description) : "",
	            denomUnits: Array.isArray(object?.denomUnits)
	                ? object.denomUnits.map((e) => exports.DenomUnit.fromJSON(e))
	                : [],
	            base: (0, helpers_1.isSet)(object.base) ? String(object.base) : "",
	            display: (0, helpers_1.isSet)(object.display) ? String(object.display) : "",
	            name: (0, helpers_1.isSet)(object.name) ? String(object.name) : "",
	            symbol: (0, helpers_1.isSet)(object.symbol) ? String(object.symbol) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.description !== undefined && (obj.description = message.description);
	        if (message.denomUnits) {
	            obj.denomUnits = message.denomUnits.map((e) => (e ? exports.DenomUnit.toJSON(e) : undefined));
	        }
	        else {
	            obj.denomUnits = [];
	        }
	        message.base !== undefined && (obj.base = message.base);
	        message.display !== undefined && (obj.display = message.display);
	        message.name !== undefined && (obj.name = message.name);
	        message.symbol !== undefined && (obj.symbol = message.symbol);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMetadata();
	        message.description = object.description ?? "";
	        message.denomUnits = object.denomUnits?.map((e) => exports.DenomUnit.fromPartial(e)) || [];
	        message.base = object.base ?? "";
	        message.display = object.display ?? "";
	        message.name = object.name ?? "";
	        message.symbol = object.symbol ?? "";
	        return message;
	    },
	};
	
} (bank));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.MsgClientImpl = exports.MsgMultiSendResponse = exports.MsgMultiSend = exports.MsgSendResponse = exports.MsgSend = exports.protobufPackage = void 0;
	/* eslint-disable */
	const coin_1 = coin$1;
	const bank_1 = bank;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.bank.v1beta1";
	function createBaseMsgSend() {
	    return {
	        fromAddress: "",
	        toAddress: "",
	        amount: [],
	    };
	}
	exports.MsgSend = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.fromAddress !== "") {
	            writer.uint32(10).string(message.fromAddress);
	        }
	        if (message.toAddress !== "") {
	            writer.uint32(18).string(message.toAddress);
	        }
	        for (const v of message.amount) {
	            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgSend();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.fromAddress = reader.string();
	                    break;
	                case 2:
	                    message.toAddress = reader.string();
	                    break;
	                case 3:
	                    message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            fromAddress: (0, helpers_1.isSet)(object.fromAddress) ? String(object.fromAddress) : "",
	            toAddress: (0, helpers_1.isSet)(object.toAddress) ? String(object.toAddress) : "",
	            amount: Array.isArray(object?.amount) ? object.amount.map((e) => coin_1.Coin.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.fromAddress !== undefined && (obj.fromAddress = message.fromAddress);
	        message.toAddress !== undefined && (obj.toAddress = message.toAddress);
	        if (message.amount) {
	            obj.amount = message.amount.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.amount = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgSend();
	        message.fromAddress = object.fromAddress ?? "";
	        message.toAddress = object.toAddress ?? "";
	        message.amount = object.amount?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseMsgSendResponse() {
	    return {};
	}
	exports.MsgSendResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgSendResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgSendResponse();
	        return message;
	    },
	};
	function createBaseMsgMultiSend() {
	    return {
	        inputs: [],
	        outputs: [],
	    };
	}
	exports.MsgMultiSend = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.inputs) {
	            bank_1.Input.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        for (const v of message.outputs) {
	            bank_1.Output.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgMultiSend();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.inputs.push(bank_1.Input.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.outputs.push(bank_1.Output.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            inputs: Array.isArray(object?.inputs) ? object.inputs.map((e) => bank_1.Input.fromJSON(e)) : [],
	            outputs: Array.isArray(object?.outputs) ? object.outputs.map((e) => bank_1.Output.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.inputs) {
	            obj.inputs = message.inputs.map((e) => (e ? bank_1.Input.toJSON(e) : undefined));
	        }
	        else {
	            obj.inputs = [];
	        }
	        if (message.outputs) {
	            obj.outputs = message.outputs.map((e) => (e ? bank_1.Output.toJSON(e) : undefined));
	        }
	        else {
	            obj.outputs = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgMultiSend();
	        message.inputs = object.inputs?.map((e) => bank_1.Input.fromPartial(e)) || [];
	        message.outputs = object.outputs?.map((e) => bank_1.Output.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseMsgMultiSendResponse() {
	    return {};
	}
	exports.MsgMultiSendResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgMultiSendResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgMultiSendResponse();
	        return message;
	    },
	};
	class MsgClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.Send = this.Send.bind(this);
	        this.MultiSend = this.MultiSend.bind(this);
	    }
	    Send(request) {
	        const data = exports.MsgSend.encode(request).finish();
	        const promise = this.rpc.request("cosmos.bank.v1beta1.Msg", "Send", data);
	        return promise.then((data) => exports.MsgSendResponse.decode(new _m0.Reader(data)));
	    }
	    MultiSend(request) {
	        const data = exports.MsgMultiSend.encode(request).finish();
	        const promise = this.rpc.request("cosmos.bank.v1beta1.Msg", "MultiSend", data);
	        return promise.then((data) => exports.MsgMultiSendResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.MsgClientImpl = MsgClientImpl;
	
} (tx$d));

Object.defineProperty(registry, "__esModule", { value: true });
registry.Registry = registry.isTxBodyEncodeObject = registry.isPbjsGeneratedType = registry.isTsProtoGeneratedType = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const tx_1$b = tx$d;
const coin_1 = coin$1;
const tx_2$2 = tx$e;
const any_1$2 = any;
function isTsProtoGeneratedType(type) {
    return typeof type.fromPartial === "function";
}
registry.isTsProtoGeneratedType = isTsProtoGeneratedType;
function isPbjsGeneratedType(type) {
    return !isTsProtoGeneratedType(type);
}
registry.isPbjsGeneratedType = isPbjsGeneratedType;
const defaultTypeUrls = {
    cosmosCoin: "/cosmos.base.v1beta1.Coin",
    cosmosMsgSend: "/cosmos.bank.v1beta1.MsgSend",
    cosmosTxBody: "/cosmos.tx.v1beta1.TxBody",
    googleAny: "/google.protobuf.Any",
};
function isTxBodyEncodeObject(encodeObject) {
    return encodeObject.typeUrl === "/cosmos.tx.v1beta1.TxBody";
}
registry.isTxBodyEncodeObject = isTxBodyEncodeObject;
class Registry {
    /**
     * Creates a new Registry for mapping protobuf type identifiers/type URLs to
     * actual implementations. Those implementations are typically generated with ts-proto
     * but we also support protobuf.js as a type generator.
     *
     * If there is no parameter given, a `new Registry()` adds the types `Coin` and `MsgSend`
     * for historic reasons. Those can be overriden by customTypes.
     *
     * There are currently two methods for adding new types:
     * 1. Passing types to the constructor.
     * 2. Using the `register()` method
     */
    constructor(customTypes) {
        const { cosmosCoin, cosmosMsgSend } = defaultTypeUrls;
        this.types = customTypes
            ? new Map([...customTypes])
            : new Map([
                [cosmosCoin, coin_1.Coin],
                [cosmosMsgSend, tx_1$b.MsgSend],
            ]);
    }
    register(typeUrl, type) {
        this.types.set(typeUrl, type);
    }
    /**
     * Looks up a type that was previously added to the registry.
     *
     * The generator information (ts-proto or pbjs) gets lost along the way.
     * If you need to work with the result type in TypeScript, you can use:
     *
     * ```
     * import { assert } from "@cosmjs/utils";
     *
     * const Coin = registry.lookupType("/cosmos.base.v1beta1.Coin");
     * assert(Coin); // Ensures not unset
     * assert(isTsProtoGeneratedType(Coin)); // Ensures this is the type we expect
     *
     * // Coin is typed TsProtoGeneratedType now.
     * ```
     */
    lookupType(typeUrl) {
        return this.types.get(typeUrl);
    }
    lookupTypeWithError(typeUrl) {
        const type = this.lookupType(typeUrl);
        if (!type) {
            throw new Error(`Unregistered type url: ${typeUrl}`);
        }
        return type;
    }
    /**
     * Takes a typeUrl/value pair and encodes the value to protobuf if
     * the given type was previously registered.
     *
     * If the value has to be wrapped in an Any, this needs to be done
     * manually after this call. Or use `encodeAsAny` instead.
     */
    encode(encodeObject) {
        const { value, typeUrl } = encodeObject;
        if (isTxBodyEncodeObject(encodeObject)) {
            return this.encodeTxBody(value);
        }
        const type = this.lookupTypeWithError(typeUrl);
        const instance = isTsProtoGeneratedType(type) ? type.fromPartial(value) : type.create(value);
        return type.encode(instance).finish();
    }
    /**
     * Takes a typeUrl/value pair and encodes the value to an Any if
     * the given type was previously registered.
     */
    encodeAsAny(encodeObject) {
        const binaryValue = this.encode(encodeObject);
        return any_1$2.Any.fromPartial({
            typeUrl: encodeObject.typeUrl,
            value: binaryValue,
        });
    }
    encodeTxBody(txBodyFields) {
        const wrappedMessages = txBodyFields.messages.map((message) => this.encodeAsAny(message));
        const txBody = tx_2$2.TxBody.fromPartial({
            ...txBodyFields,
            messages: wrappedMessages,
        });
        return tx_2$2.TxBody.encode(txBody).finish();
    }
    decode({ typeUrl, value }) {
        if (typeUrl === defaultTypeUrls.cosmosTxBody) {
            return this.decodeTxBody(value);
        }
        const type = this.lookupTypeWithError(typeUrl);
        const decoded = type.decode(value);
        Object.entries(decoded).forEach(([key, val]) => {
            if (typeof Buffer !== "undefined" && typeof Buffer.isBuffer !== "undefined" && Buffer.isBuffer(val)) {
                decoded[key] = Uint8Array.from(val);
            }
        });
        return decoded;
    }
    decodeTxBody(txBody) {
        const decodedTxBody = tx_2$2.TxBody.decode(txBody);
        return {
            ...decodedTxBody,
            messages: decodedTxBody.messages.map(({ typeUrl: typeUrl, value }) => {
                if (!typeUrl) {
                    throw new Error("Missing type_url in Any");
                }
                if (!value) {
                    throw new Error("Missing value in Any");
                }
                return this.decode({ typeUrl, value });
            }),
        };
    }
}
registry.Registry = Registry;

var signer = {};

Object.defineProperty(signer, "__esModule", { value: true });
signer.isOfflineDirectSigner = void 0;
function isOfflineDirectSigner(signer) {
    return signer.signDirect !== undefined;
}
signer.isOfflineDirectSigner = isOfflineDirectSigner;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.coins = exports.coin = exports.executeKdf = exports.makeSignDoc = exports.makeSignBytes = exports.makeAuthInfoBytes = exports.isOfflineDirectSigner = exports.Registry = exports.isTxBodyEncodeObject = exports.isTsProtoGeneratedType = exports.isPbjsGeneratedType = exports.encodePubkey = exports.decodePubkey = exports.anyToSinglePubkey = exports.makeCosmoshubPath = exports.DirectSecp256k1Wallet = exports.extractKdfConfiguration = exports.DirectSecp256k1HdWallet = exports.decodeTxRaw = exports.parseCoins = void 0;
	// This type happens to be shared between Amino and Direct sign modes
	var coins_1 = coins$2;
	Object.defineProperty(exports, "parseCoins", { enumerable: true, get: function () { return coins_1.parseCoins; } });
	var decode_1 = decode$1;
	Object.defineProperty(exports, "decodeTxRaw", { enumerable: true, get: function () { return decode_1.decodeTxRaw; } });
	var directsecp256k1hdwallet_1 = directsecp256k1hdwallet;
	Object.defineProperty(exports, "DirectSecp256k1HdWallet", { enumerable: true, get: function () { return directsecp256k1hdwallet_1.DirectSecp256k1HdWallet; } });
	Object.defineProperty(exports, "extractKdfConfiguration", { enumerable: true, get: function () { return directsecp256k1hdwallet_1.extractKdfConfiguration; } });
	var directsecp256k1wallet_1 = directsecp256k1wallet;
	Object.defineProperty(exports, "DirectSecp256k1Wallet", { enumerable: true, get: function () { return directsecp256k1wallet_1.DirectSecp256k1Wallet; } });
	var paths_1 = paths;
	Object.defineProperty(exports, "makeCosmoshubPath", { enumerable: true, get: function () { return paths_1.makeCosmoshubPath; } });
	var pubkey_1 = pubkey;
	Object.defineProperty(exports, "anyToSinglePubkey", { enumerable: true, get: function () { return pubkey_1.anyToSinglePubkey; } });
	Object.defineProperty(exports, "decodePubkey", { enumerable: true, get: function () { return pubkey_1.decodePubkey; } });
	Object.defineProperty(exports, "encodePubkey", { enumerable: true, get: function () { return pubkey_1.encodePubkey; } });
	var registry_1 = registry;
	Object.defineProperty(exports, "isPbjsGeneratedType", { enumerable: true, get: function () { return registry_1.isPbjsGeneratedType; } });
	Object.defineProperty(exports, "isTsProtoGeneratedType", { enumerable: true, get: function () { return registry_1.isTsProtoGeneratedType; } });
	Object.defineProperty(exports, "isTxBodyEncodeObject", { enumerable: true, get: function () { return registry_1.isTxBodyEncodeObject; } });
	Object.defineProperty(exports, "Registry", { enumerable: true, get: function () { return registry_1.Registry; } });
	var signer_1 = signer;
	Object.defineProperty(exports, "isOfflineDirectSigner", { enumerable: true, get: function () { return signer_1.isOfflineDirectSigner; } });
	var signing_1 = signing;
	Object.defineProperty(exports, "makeAuthInfoBytes", { enumerable: true, get: function () { return signing_1.makeAuthInfoBytes; } });
	Object.defineProperty(exports, "makeSignBytes", { enumerable: true, get: function () { return signing_1.makeSignBytes; } });
	Object.defineProperty(exports, "makeSignDoc", { enumerable: true, get: function () { return signing_1.makeSignDoc; } });
	var wallet_1 = wallet;
	Object.defineProperty(exports, "executeKdf", { enumerable: true, get: function () { return wallet_1.executeKdf; } });
	var amino_1 = build$8;
	Object.defineProperty(exports, "coin", { enumerable: true, get: function () { return amino_1.coin; } });
	Object.defineProperty(exports, "coins", { enumerable: true, get: function () { return amino_1.coins; } });
	
} (build$9));

var auth = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Params = exports.ModuleAccount = exports.BaseAccount = exports.protobufPackage = void 0;
	/* eslint-disable */
	const any_1 = any;
	const helpers_1 = helpers;
	const _m0 = __importStar(minimal);
	exports.protobufPackage = "cosmos.auth.v1beta1";
	function createBaseBaseAccount() {
	    return {
	        address: "",
	        pubKey: undefined,
	        accountNumber: helpers_1.Long.UZERO,
	        sequence: helpers_1.Long.UZERO,
	    };
	}
	exports.BaseAccount = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.address !== "") {
	            writer.uint32(10).string(message.address);
	        }
	        if (message.pubKey !== undefined) {
	            any_1.Any.encode(message.pubKey, writer.uint32(18).fork()).ldelim();
	        }
	        if (!message.accountNumber.isZero()) {
	            writer.uint32(24).uint64(message.accountNumber);
	        }
	        if (!message.sequence.isZero()) {
	            writer.uint32(32).uint64(message.sequence);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseBaseAccount();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.address = reader.string();
	                    break;
	                case 2:
	                    message.pubKey = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.accountNumber = reader.uint64();
	                    break;
	                case 4:
	                    message.sequence = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            address: (0, helpers_1.isSet)(object.address) ? String(object.address) : "",
	            pubKey: (0, helpers_1.isSet)(object.pubKey) ? any_1.Any.fromJSON(object.pubKey) : undefined,
	            accountNumber: (0, helpers_1.isSet)(object.accountNumber) ? helpers_1.Long.fromValue(object.accountNumber) : helpers_1.Long.UZERO,
	            sequence: (0, helpers_1.isSet)(object.sequence) ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.address !== undefined && (obj.address = message.address);
	        message.pubKey !== undefined && (obj.pubKey = message.pubKey ? any_1.Any.toJSON(message.pubKey) : undefined);
	        message.accountNumber !== undefined &&
	            (obj.accountNumber = (message.accountNumber || helpers_1.Long.UZERO).toString());
	        message.sequence !== undefined && (obj.sequence = (message.sequence || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseBaseAccount();
	        message.address = object.address ?? "";
	        message.pubKey =
	            object.pubKey !== undefined && object.pubKey !== null ? any_1.Any.fromPartial(object.pubKey) : undefined;
	        message.accountNumber =
	            object.accountNumber !== undefined && object.accountNumber !== null
	                ? helpers_1.Long.fromValue(object.accountNumber)
	                : helpers_1.Long.UZERO;
	        message.sequence =
	            object.sequence !== undefined && object.sequence !== null
	                ? helpers_1.Long.fromValue(object.sequence)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseModuleAccount() {
	    return {
	        baseAccount: undefined,
	        name: "",
	        permissions: [],
	    };
	}
	exports.ModuleAccount = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.baseAccount !== undefined) {
	            exports.BaseAccount.encode(message.baseAccount, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.name !== "") {
	            writer.uint32(18).string(message.name);
	        }
	        for (const v of message.permissions) {
	            writer.uint32(26).string(v);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseModuleAccount();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.baseAccount = exports.BaseAccount.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.name = reader.string();
	                    break;
	                case 3:
	                    message.permissions.push(reader.string());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            baseAccount: (0, helpers_1.isSet)(object.baseAccount) ? exports.BaseAccount.fromJSON(object.baseAccount) : undefined,
	            name: (0, helpers_1.isSet)(object.name) ? String(object.name) : "",
	            permissions: Array.isArray(object?.permissions) ? object.permissions.map((e) => String(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.baseAccount !== undefined &&
	            (obj.baseAccount = message.baseAccount ? exports.BaseAccount.toJSON(message.baseAccount) : undefined);
	        message.name !== undefined && (obj.name = message.name);
	        if (message.permissions) {
	            obj.permissions = message.permissions.map((e) => e);
	        }
	        else {
	            obj.permissions = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseModuleAccount();
	        message.baseAccount =
	            object.baseAccount !== undefined && object.baseAccount !== null
	                ? exports.BaseAccount.fromPartial(object.baseAccount)
	                : undefined;
	        message.name = object.name ?? "";
	        message.permissions = object.permissions?.map((e) => e) || [];
	        return message;
	    },
	};
	function createBaseParams() {
	    return {
	        maxMemoCharacters: helpers_1.Long.UZERO,
	        txSigLimit: helpers_1.Long.UZERO,
	        txSizeCostPerByte: helpers_1.Long.UZERO,
	        sigVerifyCostEd25519: helpers_1.Long.UZERO,
	        sigVerifyCostSecp256k1: helpers_1.Long.UZERO,
	    };
	}
	exports.Params = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.maxMemoCharacters.isZero()) {
	            writer.uint32(8).uint64(message.maxMemoCharacters);
	        }
	        if (!message.txSigLimit.isZero()) {
	            writer.uint32(16).uint64(message.txSigLimit);
	        }
	        if (!message.txSizeCostPerByte.isZero()) {
	            writer.uint32(24).uint64(message.txSizeCostPerByte);
	        }
	        if (!message.sigVerifyCostEd25519.isZero()) {
	            writer.uint32(32).uint64(message.sigVerifyCostEd25519);
	        }
	        if (!message.sigVerifyCostSecp256k1.isZero()) {
	            writer.uint32(40).uint64(message.sigVerifyCostSecp256k1);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseParams();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.maxMemoCharacters = reader.uint64();
	                    break;
	                case 2:
	                    message.txSigLimit = reader.uint64();
	                    break;
	                case 3:
	                    message.txSizeCostPerByte = reader.uint64();
	                    break;
	                case 4:
	                    message.sigVerifyCostEd25519 = reader.uint64();
	                    break;
	                case 5:
	                    message.sigVerifyCostSecp256k1 = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            maxMemoCharacters: (0, helpers_1.isSet)(object.maxMemoCharacters)
	                ? helpers_1.Long.fromValue(object.maxMemoCharacters)
	                : helpers_1.Long.UZERO,
	            txSigLimit: (0, helpers_1.isSet)(object.txSigLimit) ? helpers_1.Long.fromValue(object.txSigLimit) : helpers_1.Long.UZERO,
	            txSizeCostPerByte: (0, helpers_1.isSet)(object.txSizeCostPerByte)
	                ? helpers_1.Long.fromValue(object.txSizeCostPerByte)
	                : helpers_1.Long.UZERO,
	            sigVerifyCostEd25519: (0, helpers_1.isSet)(object.sigVerifyCostEd25519)
	                ? helpers_1.Long.fromValue(object.sigVerifyCostEd25519)
	                : helpers_1.Long.UZERO,
	            sigVerifyCostSecp256k1: (0, helpers_1.isSet)(object.sigVerifyCostSecp256k1)
	                ? helpers_1.Long.fromValue(object.sigVerifyCostSecp256k1)
	                : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.maxMemoCharacters !== undefined &&
	            (obj.maxMemoCharacters = (message.maxMemoCharacters || helpers_1.Long.UZERO).toString());
	        message.txSigLimit !== undefined && (obj.txSigLimit = (message.txSigLimit || helpers_1.Long.UZERO).toString());
	        message.txSizeCostPerByte !== undefined &&
	            (obj.txSizeCostPerByte = (message.txSizeCostPerByte || helpers_1.Long.UZERO).toString());
	        message.sigVerifyCostEd25519 !== undefined &&
	            (obj.sigVerifyCostEd25519 = (message.sigVerifyCostEd25519 || helpers_1.Long.UZERO).toString());
	        message.sigVerifyCostSecp256k1 !== undefined &&
	            (obj.sigVerifyCostSecp256k1 = (message.sigVerifyCostSecp256k1 || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseParams();
	        message.maxMemoCharacters =
	            object.maxMemoCharacters !== undefined && object.maxMemoCharacters !== null
	                ? helpers_1.Long.fromValue(object.maxMemoCharacters)
	                : helpers_1.Long.UZERO;
	        message.txSigLimit =
	            object.txSigLimit !== undefined && object.txSigLimit !== null
	                ? helpers_1.Long.fromValue(object.txSigLimit)
	                : helpers_1.Long.UZERO;
	        message.txSizeCostPerByte =
	            object.txSizeCostPerByte !== undefined && object.txSizeCostPerByte !== null
	                ? helpers_1.Long.fromValue(object.txSizeCostPerByte)
	                : helpers_1.Long.UZERO;
	        message.sigVerifyCostEd25519 =
	            object.sigVerifyCostEd25519 !== undefined && object.sigVerifyCostEd25519 !== null
	                ? helpers_1.Long.fromValue(object.sigVerifyCostEd25519)
	                : helpers_1.Long.UZERO;
	        message.sigVerifyCostSecp256k1 =
	            object.sigVerifyCostSecp256k1 !== undefined && object.sigVerifyCostSecp256k1 !== null
	                ? helpers_1.Long.fromValue(object.sigVerifyCostSecp256k1)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	
} (auth));

var vesting = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.PermanentLockedAccount = exports.PeriodicVestingAccount = exports.Period = exports.DelayedVestingAccount = exports.ContinuousVestingAccount = exports.BaseVestingAccount = exports.protobufPackage = void 0;
	/* eslint-disable */
	const auth_1 = auth;
	const coin_1 = coin$1;
	const helpers_1 = helpers;
	const _m0 = __importStar(minimal);
	exports.protobufPackage = "cosmos.vesting.v1beta1";
	function createBaseBaseVestingAccount() {
	    return {
	        baseAccount: undefined,
	        originalVesting: [],
	        delegatedFree: [],
	        delegatedVesting: [],
	        endTime: helpers_1.Long.ZERO,
	    };
	}
	exports.BaseVestingAccount = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.baseAccount !== undefined) {
	            auth_1.BaseAccount.encode(message.baseAccount, writer.uint32(10).fork()).ldelim();
	        }
	        for (const v of message.originalVesting) {
	            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        for (const v of message.delegatedFree) {
	            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
	        }
	        for (const v of message.delegatedVesting) {
	            coin_1.Coin.encode(v, writer.uint32(34).fork()).ldelim();
	        }
	        if (!message.endTime.isZero()) {
	            writer.uint32(40).int64(message.endTime);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseBaseVestingAccount();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.baseAccount = auth_1.BaseAccount.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.originalVesting.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                case 3:
	                    message.delegatedFree.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                case 4:
	                    message.delegatedVesting.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                case 5:
	                    message.endTime = reader.int64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            baseAccount: (0, helpers_1.isSet)(object.baseAccount) ? auth_1.BaseAccount.fromJSON(object.baseAccount) : undefined,
	            originalVesting: Array.isArray(object?.originalVesting)
	                ? object.originalVesting.map((e) => coin_1.Coin.fromJSON(e))
	                : [],
	            delegatedFree: Array.isArray(object?.delegatedFree)
	                ? object.delegatedFree.map((e) => coin_1.Coin.fromJSON(e))
	                : [],
	            delegatedVesting: Array.isArray(object?.delegatedVesting)
	                ? object.delegatedVesting.map((e) => coin_1.Coin.fromJSON(e))
	                : [],
	            endTime: (0, helpers_1.isSet)(object.endTime) ? helpers_1.Long.fromValue(object.endTime) : helpers_1.Long.ZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.baseAccount !== undefined &&
	            (obj.baseAccount = message.baseAccount ? auth_1.BaseAccount.toJSON(message.baseAccount) : undefined);
	        if (message.originalVesting) {
	            obj.originalVesting = message.originalVesting.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.originalVesting = [];
	        }
	        if (message.delegatedFree) {
	            obj.delegatedFree = message.delegatedFree.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.delegatedFree = [];
	        }
	        if (message.delegatedVesting) {
	            obj.delegatedVesting = message.delegatedVesting.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.delegatedVesting = [];
	        }
	        message.endTime !== undefined && (obj.endTime = (message.endTime || helpers_1.Long.ZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseBaseVestingAccount();
	        message.baseAccount =
	            object.baseAccount !== undefined && object.baseAccount !== null
	                ? auth_1.BaseAccount.fromPartial(object.baseAccount)
	                : undefined;
	        message.originalVesting = object.originalVesting?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        message.delegatedFree = object.delegatedFree?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        message.delegatedVesting = object.delegatedVesting?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        message.endTime =
	            object.endTime !== undefined && object.endTime !== null ? helpers_1.Long.fromValue(object.endTime) : helpers_1.Long.ZERO;
	        return message;
	    },
	};
	function createBaseContinuousVestingAccount() {
	    return {
	        baseVestingAccount: undefined,
	        startTime: helpers_1.Long.ZERO,
	    };
	}
	exports.ContinuousVestingAccount = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.baseVestingAccount !== undefined) {
	            exports.BaseVestingAccount.encode(message.baseVestingAccount, writer.uint32(10).fork()).ldelim();
	        }
	        if (!message.startTime.isZero()) {
	            writer.uint32(16).int64(message.startTime);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseContinuousVestingAccount();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.baseVestingAccount = exports.BaseVestingAccount.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.startTime = reader.int64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            baseVestingAccount: (0, helpers_1.isSet)(object.baseVestingAccount)
	                ? exports.BaseVestingAccount.fromJSON(object.baseVestingAccount)
	                : undefined,
	            startTime: (0, helpers_1.isSet)(object.startTime) ? helpers_1.Long.fromValue(object.startTime) : helpers_1.Long.ZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.baseVestingAccount !== undefined &&
	            (obj.baseVestingAccount = message.baseVestingAccount
	                ? exports.BaseVestingAccount.toJSON(message.baseVestingAccount)
	                : undefined);
	        message.startTime !== undefined && (obj.startTime = (message.startTime || helpers_1.Long.ZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseContinuousVestingAccount();
	        message.baseVestingAccount =
	            object.baseVestingAccount !== undefined && object.baseVestingAccount !== null
	                ? exports.BaseVestingAccount.fromPartial(object.baseVestingAccount)
	                : undefined;
	        message.startTime =
	            object.startTime !== undefined && object.startTime !== null
	                ? helpers_1.Long.fromValue(object.startTime)
	                : helpers_1.Long.ZERO;
	        return message;
	    },
	};
	function createBaseDelayedVestingAccount() {
	    return {
	        baseVestingAccount: undefined,
	    };
	}
	exports.DelayedVestingAccount = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.baseVestingAccount !== undefined) {
	            exports.BaseVestingAccount.encode(message.baseVestingAccount, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseDelayedVestingAccount();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.baseVestingAccount = exports.BaseVestingAccount.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            baseVestingAccount: (0, helpers_1.isSet)(object.baseVestingAccount)
	                ? exports.BaseVestingAccount.fromJSON(object.baseVestingAccount)
	                : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.baseVestingAccount !== undefined &&
	            (obj.baseVestingAccount = message.baseVestingAccount
	                ? exports.BaseVestingAccount.toJSON(message.baseVestingAccount)
	                : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseDelayedVestingAccount();
	        message.baseVestingAccount =
	            object.baseVestingAccount !== undefined && object.baseVestingAccount !== null
	                ? exports.BaseVestingAccount.fromPartial(object.baseVestingAccount)
	                : undefined;
	        return message;
	    },
	};
	function createBasePeriod() {
	    return {
	        length: helpers_1.Long.ZERO,
	        amount: [],
	    };
	}
	exports.Period = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.length.isZero()) {
	            writer.uint32(8).int64(message.length);
	        }
	        for (const v of message.amount) {
	            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBasePeriod();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.length = reader.int64();
	                    break;
	                case 2:
	                    message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            length: (0, helpers_1.isSet)(object.length) ? helpers_1.Long.fromValue(object.length) : helpers_1.Long.ZERO,
	            amount: Array.isArray(object?.amount) ? object.amount.map((e) => coin_1.Coin.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.length !== undefined && (obj.length = (message.length || helpers_1.Long.ZERO).toString());
	        if (message.amount) {
	            obj.amount = message.amount.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.amount = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBasePeriod();
	        message.length =
	            object.length !== undefined && object.length !== null ? helpers_1.Long.fromValue(object.length) : helpers_1.Long.ZERO;
	        message.amount = object.amount?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBasePeriodicVestingAccount() {
	    return {
	        baseVestingAccount: undefined,
	        startTime: helpers_1.Long.ZERO,
	        vestingPeriods: [],
	    };
	}
	exports.PeriodicVestingAccount = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.baseVestingAccount !== undefined) {
	            exports.BaseVestingAccount.encode(message.baseVestingAccount, writer.uint32(10).fork()).ldelim();
	        }
	        if (!message.startTime.isZero()) {
	            writer.uint32(16).int64(message.startTime);
	        }
	        for (const v of message.vestingPeriods) {
	            exports.Period.encode(v, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBasePeriodicVestingAccount();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.baseVestingAccount = exports.BaseVestingAccount.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.startTime = reader.int64();
	                    break;
	                case 3:
	                    message.vestingPeriods.push(exports.Period.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            baseVestingAccount: (0, helpers_1.isSet)(object.baseVestingAccount)
	                ? exports.BaseVestingAccount.fromJSON(object.baseVestingAccount)
	                : undefined,
	            startTime: (0, helpers_1.isSet)(object.startTime) ? helpers_1.Long.fromValue(object.startTime) : helpers_1.Long.ZERO,
	            vestingPeriods: Array.isArray(object?.vestingPeriods)
	                ? object.vestingPeriods.map((e) => exports.Period.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.baseVestingAccount !== undefined &&
	            (obj.baseVestingAccount = message.baseVestingAccount
	                ? exports.BaseVestingAccount.toJSON(message.baseVestingAccount)
	                : undefined);
	        message.startTime !== undefined && (obj.startTime = (message.startTime || helpers_1.Long.ZERO).toString());
	        if (message.vestingPeriods) {
	            obj.vestingPeriods = message.vestingPeriods.map((e) => (e ? exports.Period.toJSON(e) : undefined));
	        }
	        else {
	            obj.vestingPeriods = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBasePeriodicVestingAccount();
	        message.baseVestingAccount =
	            object.baseVestingAccount !== undefined && object.baseVestingAccount !== null
	                ? exports.BaseVestingAccount.fromPartial(object.baseVestingAccount)
	                : undefined;
	        message.startTime =
	            object.startTime !== undefined && object.startTime !== null
	                ? helpers_1.Long.fromValue(object.startTime)
	                : helpers_1.Long.ZERO;
	        message.vestingPeriods = object.vestingPeriods?.map((e) => exports.Period.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBasePermanentLockedAccount() {
	    return {
	        baseVestingAccount: undefined,
	    };
	}
	exports.PermanentLockedAccount = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.baseVestingAccount !== undefined) {
	            exports.BaseVestingAccount.encode(message.baseVestingAccount, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBasePermanentLockedAccount();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.baseVestingAccount = exports.BaseVestingAccount.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            baseVestingAccount: (0, helpers_1.isSet)(object.baseVestingAccount)
	                ? exports.BaseVestingAccount.fromJSON(object.baseVestingAccount)
	                : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.baseVestingAccount !== undefined &&
	            (obj.baseVestingAccount = message.baseVestingAccount
	                ? exports.BaseVestingAccount.toJSON(message.baseVestingAccount)
	                : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBasePermanentLockedAccount();
	        message.baseVestingAccount =
	            object.baseVestingAccount !== undefined && object.baseVestingAccount !== null
	                ? exports.BaseVestingAccount.fromPartial(object.baseVestingAccount)
	                : undefined;
	        return message;
	    },
	};
	
} (vesting));

Object.defineProperty(accounts, "__esModule", { value: true });
accounts.accountFromAny = void 0;
const math_1$8 = build$a;
const proto_signing_1$4 = build$9;
const utils_1$9 = build$5;
const auth_1 = auth;
const vesting_1 = vesting;
function uint64FromProto(input) {
    return math_1$8.Uint64.fromString(input.toString());
}
function accountFromBaseAccount(input) {
    const { address, pubKey, accountNumber, sequence } = input;
    const pubkey = pubKey ? (0, proto_signing_1$4.decodePubkey)(pubKey) : null;
    return {
        address: address,
        pubkey: pubkey,
        accountNumber: uint64FromProto(accountNumber).toNumber(),
        sequence: uint64FromProto(sequence).toNumber(),
    };
}
/**
 * Basic implementation of AccountParser. This is supposed to support the most relevant
 * common Cosmos SDK account types. If you need support for exotic account types,
 * you'll need to write your own account decoder.
 */
function accountFromAny(input) {
    const { typeUrl, value } = input;
    switch (typeUrl) {
        // auth
        case "/cosmos.auth.v1beta1.BaseAccount":
            return accountFromBaseAccount(auth_1.BaseAccount.decode(value));
        case "/cosmos.auth.v1beta1.ModuleAccount": {
            const baseAccount = auth_1.ModuleAccount.decode(value).baseAccount;
            (0, utils_1$9.assert)(baseAccount);
            return accountFromBaseAccount(baseAccount);
        }
        // vesting
        case "/cosmos.vesting.v1beta1.BaseVestingAccount": {
            const baseAccount = vesting_1.BaseVestingAccount.decode(value)?.baseAccount;
            (0, utils_1$9.assert)(baseAccount);
            return accountFromBaseAccount(baseAccount);
        }
        case "/cosmos.vesting.v1beta1.ContinuousVestingAccount": {
            const baseAccount = vesting_1.ContinuousVestingAccount.decode(value)?.baseVestingAccount?.baseAccount;
            (0, utils_1$9.assert)(baseAccount);
            return accountFromBaseAccount(baseAccount);
        }
        case "/cosmos.vesting.v1beta1.DelayedVestingAccount": {
            const baseAccount = vesting_1.DelayedVestingAccount.decode(value)?.baseVestingAccount?.baseAccount;
            (0, utils_1$9.assert)(baseAccount);
            return accountFromBaseAccount(baseAccount);
        }
        case "/cosmos.vesting.v1beta1.PeriodicVestingAccount": {
            const baseAccount = vesting_1.PeriodicVestingAccount.decode(value)?.baseVestingAccount?.baseAccount;
            (0, utils_1$9.assert)(baseAccount);
            return accountFromBaseAccount(baseAccount);
        }
        default:
            throw new Error(`Unsupported type: '${typeUrl}'`);
    }
}
accounts.accountFromAny = accountFromAny;

var aminotypes = {};

Object.defineProperty(aminotypes, "__esModule", { value: true });
aminotypes.AminoTypes = void 0;
function isAminoConverter(converter) {
    return typeof converter[1] !== "string";
}
/**
 * A map from Stargate message types as used in the messages's `Any` type
 * to Amino types.
 */
class AminoTypes {
    constructor(types) {
        this.register = types;
    }
    toAmino({ typeUrl, value }) {
        const converter = this.register[typeUrl];
        if (converter === "not_supported_by_chain") {
            throw new Error(`The message type '${typeUrl}' cannot be signed using the Amino JSON sign mode because this is not supported by chain.`);
        }
        if (!converter) {
            throw new Error(`Type URL '${typeUrl}' does not exist in the Amino message type register. ` +
                "If you need support for this message type, you can pass in additional entries to the AminoTypes constructor. " +
                "If you think this message type should be included by default, please open an issue at https://github.com/cosmos/cosmjs/issues.");
        }
        return {
            type: converter.aminoType,
            value: converter.toAmino(value),
        };
    }
    fromAmino({ type, value }) {
        const matches = Object.entries(this.register)
            .filter(isAminoConverter)
            .filter(([_typeUrl, { aminoType }]) => aminoType === type);
        switch (matches.length) {
            case 0: {
                throw new Error(`Amino type identifier '${type}' does not exist in the Amino message type register. ` +
                    "If you need support for this message type, you can pass in additional entries to the AminoTypes constructor. " +
                    "If you think this message type should be included by default, please open an issue at https://github.com/cosmos/cosmjs/issues.");
            }
            case 1: {
                const [typeUrl, converter] = matches[0];
                return {
                    typeUrl: typeUrl,
                    value: converter.fromAmino(value),
                };
            }
            default:
                throw new Error(`Multiple types are registered with Amino type identifier '${type}': '` +
                    matches
                        .map(([key, _value]) => key)
                        .sort()
                        .join("', '") +
                    "'. Thus fromAmino cannot be performed.");
        }
    }
}
aminotypes.AminoTypes = AminoTypes;

var events = {};

Object.defineProperty(events, "__esModule", { value: true });
events.fromTendermintEvent = void 0;
const encoding_1$d = build$6;
/**
 * Takes a Tendermint 0.34 or 0.37 event with binary encoded key and value
 * and converts it into an `Event` with string attributes.
 */
function fromTendermintEvent(event) {
    return {
        type: event.type,
        attributes: event.attributes.map((attr) => ({
            key: typeof attr.key == "string" ? attr.key : (0, encoding_1$d.fromUtf8)(attr.key, true),
            value: typeof attr.value == "string" ? attr.value : (0, encoding_1$d.fromUtf8)(attr.value, true),
        })),
    };
}
events.fromTendermintEvent = fromTendermintEvent;

var fee = {};

Object.defineProperty(fee, "__esModule", { value: true });
fee.calculateFee = fee.GasPrice = void 0;
const math_1$7 = build$a;
const proto_signing_1$3 = build$9;
/**
 * Denom checker for the Cosmos SDK 0.42 denom pattern
 * (https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/types/coin.go#L599-L601).
 *
 * This is like a regexp but with helpful error messages.
 */
function checkDenom(denom) {
    if (denom.length < 3 || denom.length > 128) {
        throw new Error("Denom must be between 3 and 128 characters");
    }
}
/**
 * A gas price, i.e. the price of a single unit of gas. This is typically a fraction of
 * the smallest fee token unit, such as 0.012utoken.
 */
class GasPrice {
    constructor(amount, denom) {
        this.amount = amount;
        this.denom = denom;
    }
    /**
     * Parses a gas price formatted as `<amount><denom>`, e.g. `GasPrice.fromString("0.012utoken")`.
     *
     * The denom must match the Cosmos SDK 0.42 pattern (https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/types/coin.go#L599-L601).
     * See `GasPrice` in @cosmjs/stargate for a more generic matcher.
     *
     * Separators are not yet supported.
     */
    static fromString(gasPrice) {
        // Use Decimal.fromUserInput and checkDenom for detailed checks and helpful error messages
        const matchResult = gasPrice.match(/^([0-9.]+)([a-z][a-z0-9]*)$/i);
        if (!matchResult) {
            throw new Error("Invalid gas price string");
        }
        const [_, amount, denom] = matchResult;
        checkDenom(denom);
        const fractionalDigits = 18;
        const decimalAmount = math_1$7.Decimal.fromUserInput(amount, fractionalDigits);
        return new GasPrice(decimalAmount, denom);
    }
    /**
     * Returns a string representation of this gas price, e.g. "0.025uatom".
     * This can be used as an input to `GasPrice.fromString`.
     */
    toString() {
        return this.amount.toString() + this.denom;
    }
}
fee.GasPrice = GasPrice;
function calculateFee(gasLimit, gasPrice) {
    const processedGasPrice = typeof gasPrice === "string" ? GasPrice.fromString(gasPrice) : gasPrice;
    const { denom, amount: gasPriceAmount } = processedGasPrice;
    // Note: Amount can exceed the safe integer range (https://github.com/cosmos/cosmjs/issues/1134),
    // which we handle by converting from Decimal to string without going through number.
    const amount = gasPriceAmount.multiply(new math_1$7.Uint53(gasLimit)).ceil().toString();
    return {
        amount: (0, proto_signing_1$3.coins)(amount, denom),
        gas: gasLimit.toString(),
    };
}
fee.calculateFee = calculateFee;

var logs = {};

Object.defineProperty(logs, "__esModule", { value: true });
logs.findAttribute = logs.parseRawLog = logs.parseLogs = logs.parseLog = logs.parseEvent = logs.parseAttribute = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const utils_1$8 = build$5;
function parseAttribute(input) {
    if (!(0, utils_1$8.isNonNullObject)(input))
        throw new Error("Attribute must be a non-null object");
    const { key, value } = input;
    if (typeof key !== "string" || !key)
        throw new Error("Attribute's key must be a non-empty string");
    if (typeof value !== "string" && typeof value !== "undefined") {
        throw new Error("Attribute's value must be a string or unset");
    }
    return {
        key: key,
        value: value || "",
    };
}
logs.parseAttribute = parseAttribute;
function parseEvent(input) {
    if (!(0, utils_1$8.isNonNullObject)(input))
        throw new Error("Event must be a non-null object");
    const { type, attributes } = input;
    if (typeof type !== "string" || type === "") {
        throw new Error(`Event type must be a non-empty string`);
    }
    if (!Array.isArray(attributes))
        throw new Error("Event's attributes must be an array");
    return {
        type: type,
        attributes: attributes.map(parseAttribute),
    };
}
logs.parseEvent = parseEvent;
function parseLog(input) {
    if (!(0, utils_1$8.isNonNullObject)(input))
        throw new Error("Log must be a non-null object");
    const { msg_index, log, events } = input;
    if (typeof msg_index !== "number")
        throw new Error("Log's msg_index must be a number");
    if (typeof log !== "string")
        throw new Error("Log's log must be a string");
    if (!Array.isArray(events))
        throw new Error("Log's events must be an array");
    return {
        msg_index: msg_index,
        log: log,
        events: events.map(parseEvent),
    };
}
logs.parseLog = parseLog;
function parseLogs(input) {
    if (!Array.isArray(input))
        throw new Error("Logs must be an array");
    return input.map(parseLog);
}
logs.parseLogs = parseLogs;
function parseRawLog(input = "[]") {
    const logsToParse = JSON.parse(input).map(({ events }, i) => ({
        msg_index: i,
        events,
        log: "",
    }));
    return parseLogs(logsToParse);
}
logs.parseRawLog = parseRawLog;
/**
 * Searches in logs for the first event of the given event type and in that event
 * for the first first attribute with the given attribute key.
 *
 * Throws if the attribute was not found.
 */
function findAttribute(logs, eventType, attrKey) {
    const firstLogs = logs.find(() => true);
    const out = firstLogs?.events
        .find((event) => event.type === eventType)
        ?.attributes.find((attr) => attr.key === attrKey);
    if (!out) {
        throw new Error(`Could not find attribute '${attrKey}' in first event of type '${eventType}' in first log.`);
    }
    return out;
}
logs.findAttribute = findAttribute;

var modules = {};

var queries$a = {};

var query$c = {};

var pagination = {};

var __createBinding$e = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$e = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$e = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$e(result, mod, k);
    __setModuleDefault$e(result, mod);
    return result;
};
Object.defineProperty(pagination, "__esModule", { value: true });
pagination.PageResponse = pagination.PageRequest = pagination.protobufPackage = void 0;
/* eslint-disable */
const helpers_1$a = helpers;
const _m0$a = __importStar$e(minimal);
pagination.protobufPackage = "cosmos.base.query.v1beta1";
function createBasePageRequest$1() {
    return {
        key: new Uint8Array(),
        offset: helpers_1$a.Long.UZERO,
        limit: helpers_1$a.Long.UZERO,
        countTotal: false,
        reverse: false,
    };
}
pagination.PageRequest = {
    encode(message, writer = _m0$a.Writer.create()) {
        if (message.key.length !== 0) {
            writer.uint32(10).bytes(message.key);
        }
        if (!message.offset.isZero()) {
            writer.uint32(16).uint64(message.offset);
        }
        if (!message.limit.isZero()) {
            writer.uint32(24).uint64(message.limit);
        }
        if (message.countTotal === true) {
            writer.uint32(32).bool(message.countTotal);
        }
        if (message.reverse === true) {
            writer.uint32(40).bool(message.reverse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$a.Reader ? input : new _m0$a.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePageRequest$1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.bytes();
                    break;
                case 2:
                    message.offset = reader.uint64();
                    break;
                case 3:
                    message.limit = reader.uint64();
                    break;
                case 4:
                    message.countTotal = reader.bool();
                    break;
                case 5:
                    message.reverse = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: (0, helpers_1$a.isSet)(object.key) ? (0, helpers_1$a.bytesFromBase64)(object.key) : new Uint8Array(),
            offset: (0, helpers_1$a.isSet)(object.offset) ? helpers_1$a.Long.fromValue(object.offset) : helpers_1$a.Long.UZERO,
            limit: (0, helpers_1$a.isSet)(object.limit) ? helpers_1$a.Long.fromValue(object.limit) : helpers_1$a.Long.UZERO,
            countTotal: (0, helpers_1$a.isSet)(object.countTotal) ? Boolean(object.countTotal) : false,
            reverse: (0, helpers_1$a.isSet)(object.reverse) ? Boolean(object.reverse) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined &&
            (obj.key = (0, helpers_1$a.base64FromBytes)(message.key !== undefined ? message.key : new Uint8Array()));
        message.offset !== undefined && (obj.offset = (message.offset || helpers_1$a.Long.UZERO).toString());
        message.limit !== undefined && (obj.limit = (message.limit || helpers_1$a.Long.UZERO).toString());
        message.countTotal !== undefined && (obj.countTotal = message.countTotal);
        message.reverse !== undefined && (obj.reverse = message.reverse);
        return obj;
    },
    fromPartial(object) {
        const message = createBasePageRequest$1();
        message.key = object.key ?? new Uint8Array();
        message.offset =
            object.offset !== undefined && object.offset !== null ? helpers_1$a.Long.fromValue(object.offset) : helpers_1$a.Long.UZERO;
        message.limit =
            object.limit !== undefined && object.limit !== null ? helpers_1$a.Long.fromValue(object.limit) : helpers_1$a.Long.UZERO;
        message.countTotal = object.countTotal ?? false;
        message.reverse = object.reverse ?? false;
        return message;
    },
};
function createBasePageResponse$1() {
    return {
        nextKey: new Uint8Array(),
        total: helpers_1$a.Long.UZERO,
    };
}
pagination.PageResponse = {
    encode(message, writer = _m0$a.Writer.create()) {
        if (message.nextKey.length !== 0) {
            writer.uint32(10).bytes(message.nextKey);
        }
        if (!message.total.isZero()) {
            writer.uint32(16).uint64(message.total);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$a.Reader ? input : new _m0$a.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePageResponse$1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.nextKey = reader.bytes();
                    break;
                case 2:
                    message.total = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            nextKey: (0, helpers_1$a.isSet)(object.nextKey) ? (0, helpers_1$a.bytesFromBase64)(object.nextKey) : new Uint8Array(),
            total: (0, helpers_1$a.isSet)(object.total) ? helpers_1$a.Long.fromValue(object.total) : helpers_1$a.Long.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.nextKey !== undefined &&
            (obj.nextKey = (0, helpers_1$a.base64FromBytes)(message.nextKey !== undefined ? message.nextKey : new Uint8Array()));
        message.total !== undefined && (obj.total = (message.total || helpers_1$a.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBasePageResponse$1();
        message.nextKey = object.nextKey ?? new Uint8Array();
        message.total =
            object.total !== undefined && object.total !== null ? helpers_1$a.Long.fromValue(object.total) : helpers_1$a.Long.UZERO;
        return message;
    },
};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.QueryClientImpl = exports.QueryModuleAccountByNameResponse = exports.QueryModuleAccountByNameRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryAccountResponse = exports.QueryAccountRequest = exports.QueryAccountsResponse = exports.QueryAccountsRequest = exports.protobufPackage = void 0;
	/* eslint-disable */
	const pagination_1 = pagination;
	const any_1 = any;
	const auth_1 = auth;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.auth.v1beta1";
	function createBaseQueryAccountsRequest() {
	    return {
	        pagination: undefined,
	    };
	}
	exports.QueryAccountsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryAccountsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryAccountsRequest();
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryAccountsResponse() {
	    return {
	        accounts: [],
	        pagination: undefined,
	    };
	}
	exports.QueryAccountsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.accounts) {
	            any_1.Any.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryAccountsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.accounts.push(any_1.Any.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            accounts: Array.isArray(object?.accounts) ? object.accounts.map((e) => any_1.Any.fromJSON(e)) : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.accounts) {
	            obj.accounts = message.accounts.map((e) => (e ? any_1.Any.toJSON(e) : undefined));
	        }
	        else {
	            obj.accounts = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryAccountsResponse();
	        message.accounts = object.accounts?.map((e) => any_1.Any.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryAccountRequest() {
	    return {
	        address: "",
	    };
	}
	exports.QueryAccountRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.address !== "") {
	            writer.uint32(10).string(message.address);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryAccountRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.address = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            address: (0, helpers_1.isSet)(object.address) ? String(object.address) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.address !== undefined && (obj.address = message.address);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryAccountRequest();
	        message.address = object.address ?? "";
	        return message;
	    },
	};
	function createBaseQueryAccountResponse() {
	    return {
	        account: undefined,
	    };
	}
	exports.QueryAccountResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.account !== undefined) {
	            any_1.Any.encode(message.account, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryAccountResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.account = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            account: (0, helpers_1.isSet)(object.account) ? any_1.Any.fromJSON(object.account) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.account !== undefined &&
	            (obj.account = message.account ? any_1.Any.toJSON(message.account) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryAccountResponse();
	        message.account =
	            object.account !== undefined && object.account !== null ? any_1.Any.fromPartial(object.account) : undefined;
	        return message;
	    },
	};
	function createBaseQueryParamsRequest() {
	    return {};
	}
	exports.QueryParamsRequest = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryParamsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseQueryParamsRequest();
	        return message;
	    },
	};
	function createBaseQueryParamsResponse() {
	    return {
	        params: undefined,
	    };
	}
	exports.QueryParamsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.params !== undefined) {
	            auth_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryParamsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.params = auth_1.Params.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            params: (0, helpers_1.isSet)(object.params) ? auth_1.Params.fromJSON(object.params) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.params !== undefined && (obj.params = message.params ? auth_1.Params.toJSON(message.params) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryParamsResponse();
	        message.params =
	            object.params !== undefined && object.params !== null ? auth_1.Params.fromPartial(object.params) : undefined;
	        return message;
	    },
	};
	function createBaseQueryModuleAccountByNameRequest() {
	    return {
	        name: "",
	    };
	}
	exports.QueryModuleAccountByNameRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.name !== "") {
	            writer.uint32(10).string(message.name);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryModuleAccountByNameRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.name = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            name: (0, helpers_1.isSet)(object.name) ? String(object.name) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.name !== undefined && (obj.name = message.name);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryModuleAccountByNameRequest();
	        message.name = object.name ?? "";
	        return message;
	    },
	};
	function createBaseQueryModuleAccountByNameResponse() {
	    return {
	        account: undefined,
	    };
	}
	exports.QueryModuleAccountByNameResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.account !== undefined) {
	            any_1.Any.encode(message.account, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryModuleAccountByNameResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.account = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            account: (0, helpers_1.isSet)(object.account) ? any_1.Any.fromJSON(object.account) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.account !== undefined &&
	            (obj.account = message.account ? any_1.Any.toJSON(message.account) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryModuleAccountByNameResponse();
	        message.account =
	            object.account !== undefined && object.account !== null ? any_1.Any.fromPartial(object.account) : undefined;
	        return message;
	    },
	};
	class QueryClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.Accounts = this.Accounts.bind(this);
	        this.Account = this.Account.bind(this);
	        this.Params = this.Params.bind(this);
	        this.ModuleAccountByName = this.ModuleAccountByName.bind(this);
	    }
	    Accounts(request = {
	        pagination: undefined,
	    }) {
	        const data = exports.QueryAccountsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "Accounts", data);
	        return promise.then((data) => exports.QueryAccountsResponse.decode(new _m0.Reader(data)));
	    }
	    Account(request) {
	        const data = exports.QueryAccountRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "Account", data);
	        return promise.then((data) => exports.QueryAccountResponse.decode(new _m0.Reader(data)));
	    }
	    Params(request = {}) {
	        const data = exports.QueryParamsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "Params", data);
	        return promise.then((data) => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
	    }
	    ModuleAccountByName(request) {
	        const data = exports.QueryModuleAccountByNameRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.auth.v1beta1.Query", "ModuleAccountByName", data);
	        return promise.then((data) => exports.QueryModuleAccountByNameResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.QueryClientImpl = QueryClientImpl;
	
} (query$c));

var queryclient$1 = {};

var queryclient = {};

var build$4 = {};

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/

var $protobuf = minimal;

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.ics23 = (function() {

    /**
     * Namespace ics23.
     * @exports ics23
     * @namespace
     */
    var ics23 = {};

    /**
     * HashOp enum.
     * @name ics23.HashOp
     * @enum {string}
     * @property {number} NO_HASH=0 NO_HASH value
     * @property {number} SHA256=1 SHA256 value
     * @property {number} SHA512=2 SHA512 value
     * @property {number} KECCAK=3 KECCAK value
     * @property {number} RIPEMD160=4 RIPEMD160 value
     * @property {number} BITCOIN=5 BITCOIN value
     * @property {number} SHA512_256=6 SHA512_256 value
     */
    ics23.HashOp = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NO_HASH"] = 0;
        values[valuesById[1] = "SHA256"] = 1;
        values[valuesById[2] = "SHA512"] = 2;
        values[valuesById[3] = "KECCAK"] = 3;
        values[valuesById[4] = "RIPEMD160"] = 4;
        values[valuesById[5] = "BITCOIN"] = 5;
        values[valuesById[6] = "SHA512_256"] = 6;
        return values;
    })();

    /**
     * LengthOp defines how to process the key and value of the LeafOp
     * to include length information. After encoding the length with the given
     * algorithm, the length will be prepended to the key and value bytes.
     * (Each one with it's own encoded length)
     * @name ics23.LengthOp
     * @enum {string}
     * @property {number} NO_PREFIX=0 NO_PREFIX value
     * @property {number} VAR_PROTO=1 VAR_PROTO value
     * @property {number} VAR_RLP=2 VAR_RLP value
     * @property {number} FIXED32_BIG=3 FIXED32_BIG value
     * @property {number} FIXED32_LITTLE=4 FIXED32_LITTLE value
     * @property {number} FIXED64_BIG=5 FIXED64_BIG value
     * @property {number} FIXED64_LITTLE=6 FIXED64_LITTLE value
     * @property {number} REQUIRE_32_BYTES=7 REQUIRE_32_BYTES value
     * @property {number} REQUIRE_64_BYTES=8 REQUIRE_64_BYTES value
     */
    ics23.LengthOp = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NO_PREFIX"] = 0;
        values[valuesById[1] = "VAR_PROTO"] = 1;
        values[valuesById[2] = "VAR_RLP"] = 2;
        values[valuesById[3] = "FIXED32_BIG"] = 3;
        values[valuesById[4] = "FIXED32_LITTLE"] = 4;
        values[valuesById[5] = "FIXED64_BIG"] = 5;
        values[valuesById[6] = "FIXED64_LITTLE"] = 6;
        values[valuesById[7] = "REQUIRE_32_BYTES"] = 7;
        values[valuesById[8] = "REQUIRE_64_BYTES"] = 8;
        return values;
    })();

    ics23.ExistenceProof = (function() {

        /**
         * Properties of an ExistenceProof.
         * @memberof ics23
         * @interface IExistenceProof
         * @property {Uint8Array|null} [key] ExistenceProof key
         * @property {Uint8Array|null} [value] ExistenceProof value
         * @property {ics23.ILeafOp|null} [leaf] ExistenceProof leaf
         * @property {Array.<ics23.IInnerOp>|null} [path] ExistenceProof path
         */

        /**
         * Constructs a new ExistenceProof.
         * @memberof ics23
         * @classdesc ExistenceProof takes a key and a value and a set of steps to perform on it.
         * The result of peforming all these steps will provide a "root hash", which can
         * be compared to the value in a header.
         * 
         * Since it is computationally infeasible to produce a hash collission for any of the used
         * cryptographic hash functions, if someone can provide a series of operations to transform
         * a given key and value into a root hash that matches some trusted root, these key and values
         * must be in the referenced merkle tree.
         * 
         * The only possible issue is maliablity in LeafOp, such as providing extra prefix data,
         * which should be controlled by a spec. Eg. with lengthOp as NONE,
         * prefix = FOO, key = BAR, value = CHOICE
         * and
         * prefix = F, key = OOBAR, value = CHOICE
         * would produce the same value.
         * 
         * With LengthOp this is tricker but not impossible. Which is why the "leafPrefixEqual" field
         * in the ProofSpec is valuable to prevent this mutability. And why all trees should
         * length-prefix the data before hashing it.
         * @implements IExistenceProof
         * @constructor
         * @param {ics23.IExistenceProof=} [properties] Properties to set
         */
        function ExistenceProof(properties) {
            this.path = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ExistenceProof key.
         * @member {Uint8Array} key
         * @memberof ics23.ExistenceProof
         * @instance
         */
        ExistenceProof.prototype.key = $util.newBuffer([]);

        /**
         * ExistenceProof value.
         * @member {Uint8Array} value
         * @memberof ics23.ExistenceProof
         * @instance
         */
        ExistenceProof.prototype.value = $util.newBuffer([]);

        /**
         * ExistenceProof leaf.
         * @member {ics23.ILeafOp|null|undefined} leaf
         * @memberof ics23.ExistenceProof
         * @instance
         */
        ExistenceProof.prototype.leaf = null;

        /**
         * ExistenceProof path.
         * @member {Array.<ics23.IInnerOp>} path
         * @memberof ics23.ExistenceProof
         * @instance
         */
        ExistenceProof.prototype.path = $util.emptyArray;

        /**
         * Creates a new ExistenceProof instance using the specified properties.
         * @function create
         * @memberof ics23.ExistenceProof
         * @static
         * @param {ics23.IExistenceProof=} [properties] Properties to set
         * @returns {ics23.ExistenceProof} ExistenceProof instance
         */
        ExistenceProof.create = function create(properties) {
            return new ExistenceProof(properties);
        };

        /**
         * Encodes the specified ExistenceProof message. Does not implicitly {@link ics23.ExistenceProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.ExistenceProof
         * @static
         * @param {ics23.IExistenceProof} message ExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ExistenceProof.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key != null && message.hasOwnProperty("key"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
            if (message.value != null && message.hasOwnProperty("value"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
            if (message.leaf != null && message.hasOwnProperty("leaf"))
                $root.ics23.LeafOp.encode(message.leaf, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.path != null && message.path.length)
                for (var i = 0; i < message.path.length; ++i)
                    $root.ics23.InnerOp.encode(message.path[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ExistenceProof message, length delimited. Does not implicitly {@link ics23.ExistenceProof.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.ExistenceProof
         * @static
         * @param {ics23.IExistenceProof} message ExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ExistenceProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.ExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.ExistenceProof} ExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ExistenceProof.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.ExistenceProof();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.key = reader.bytes();
                    break;
                case 2:
                    message.value = reader.bytes();
                    break;
                case 3:
                    message.leaf = $root.ics23.LeafOp.decode(reader, reader.uint32());
                    break;
                case 4:
                    if (!(message.path && message.path.length))
                        message.path = [];
                    message.path.push($root.ics23.InnerOp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ExistenceProof message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.ExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.ExistenceProof} ExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ExistenceProof.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ExistenceProof message.
         * @function verify
         * @memberof ics23.ExistenceProof
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ExistenceProof.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key != null && message.hasOwnProperty("key"))
                if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                    return "key: buffer expected";
            if (message.value != null && message.hasOwnProperty("value"))
                if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                    return "value: buffer expected";
            if (message.leaf != null && message.hasOwnProperty("leaf")) {
                var error = $root.ics23.LeafOp.verify(message.leaf);
                if (error)
                    return "leaf." + error;
            }
            if (message.path != null && message.hasOwnProperty("path")) {
                if (!Array.isArray(message.path))
                    return "path: array expected";
                for (var i = 0; i < message.path.length; ++i) {
                    var error = $root.ics23.InnerOp.verify(message.path[i]);
                    if (error)
                        return "path." + error;
                }
            }
            return null;
        };

        /**
         * Creates an ExistenceProof message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.ExistenceProof
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.ExistenceProof} ExistenceProof
         */
        ExistenceProof.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.ExistenceProof)
                return object;
            var message = new $root.ics23.ExistenceProof();
            if (object.key != null)
                if (typeof object.key === "string")
                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                else if (object.key.length)
                    message.key = object.key;
            if (object.value != null)
                if (typeof object.value === "string")
                    $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                else if (object.value.length)
                    message.value = object.value;
            if (object.leaf != null) {
                if (typeof object.leaf !== "object")
                    throw TypeError(".ics23.ExistenceProof.leaf: object expected");
                message.leaf = $root.ics23.LeafOp.fromObject(object.leaf);
            }
            if (object.path) {
                if (!Array.isArray(object.path))
                    throw TypeError(".ics23.ExistenceProof.path: array expected");
                message.path = [];
                for (var i = 0; i < object.path.length; ++i) {
                    if (typeof object.path[i] !== "object")
                        throw TypeError(".ics23.ExistenceProof.path: object expected");
                    message.path[i] = $root.ics23.InnerOp.fromObject(object.path[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an ExistenceProof message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.ExistenceProof
         * @static
         * @param {ics23.ExistenceProof} message ExistenceProof
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ExistenceProof.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.path = [];
            if (options.defaults) {
                if (options.bytes === String)
                    object.key = "";
                else {
                    object.key = [];
                    if (options.bytes !== Array)
                        object.key = $util.newBuffer(object.key);
                }
                if (options.bytes === String)
                    object.value = "";
                else {
                    object.value = [];
                    if (options.bytes !== Array)
                        object.value = $util.newBuffer(object.value);
                }
                object.leaf = null;
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
            if (message.leaf != null && message.hasOwnProperty("leaf"))
                object.leaf = $root.ics23.LeafOp.toObject(message.leaf, options);
            if (message.path && message.path.length) {
                object.path = [];
                for (var j = 0; j < message.path.length; ++j)
                    object.path[j] = $root.ics23.InnerOp.toObject(message.path[j], options);
            }
            return object;
        };

        /**
         * Converts this ExistenceProof to JSON.
         * @function toJSON
         * @memberof ics23.ExistenceProof
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ExistenceProof.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ExistenceProof;
    })();

    ics23.NonExistenceProof = (function() {

        /**
         * Properties of a NonExistenceProof.
         * @memberof ics23
         * @interface INonExistenceProof
         * @property {Uint8Array|null} [key] NonExistenceProof key
         * @property {ics23.IExistenceProof|null} [left] NonExistenceProof left
         * @property {ics23.IExistenceProof|null} [right] NonExistenceProof right
         */

        /**
         * Constructs a new NonExistenceProof.
         * @memberof ics23
         * @classdesc Represents a NonExistenceProof.
         * @implements INonExistenceProof
         * @constructor
         * @param {ics23.INonExistenceProof=} [properties] Properties to set
         */
        function NonExistenceProof(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * NonExistenceProof key.
         * @member {Uint8Array} key
         * @memberof ics23.NonExistenceProof
         * @instance
         */
        NonExistenceProof.prototype.key = $util.newBuffer([]);

        /**
         * NonExistenceProof left.
         * @member {ics23.IExistenceProof|null|undefined} left
         * @memberof ics23.NonExistenceProof
         * @instance
         */
        NonExistenceProof.prototype.left = null;

        /**
         * NonExistenceProof right.
         * @member {ics23.IExistenceProof|null|undefined} right
         * @memberof ics23.NonExistenceProof
         * @instance
         */
        NonExistenceProof.prototype.right = null;

        /**
         * Creates a new NonExistenceProof instance using the specified properties.
         * @function create
         * @memberof ics23.NonExistenceProof
         * @static
         * @param {ics23.INonExistenceProof=} [properties] Properties to set
         * @returns {ics23.NonExistenceProof} NonExistenceProof instance
         */
        NonExistenceProof.create = function create(properties) {
            return new NonExistenceProof(properties);
        };

        /**
         * Encodes the specified NonExistenceProof message. Does not implicitly {@link ics23.NonExistenceProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.NonExistenceProof
         * @static
         * @param {ics23.INonExistenceProof} message NonExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NonExistenceProof.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key != null && message.hasOwnProperty("key"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
            if (message.left != null && message.hasOwnProperty("left"))
                $root.ics23.ExistenceProof.encode(message.left, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.right != null && message.hasOwnProperty("right"))
                $root.ics23.ExistenceProof.encode(message.right, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified NonExistenceProof message, length delimited. Does not implicitly {@link ics23.NonExistenceProof.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.NonExistenceProof
         * @static
         * @param {ics23.INonExistenceProof} message NonExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NonExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a NonExistenceProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.NonExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.NonExistenceProof} NonExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NonExistenceProof.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.NonExistenceProof();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.key = reader.bytes();
                    break;
                case 2:
                    message.left = $root.ics23.ExistenceProof.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.right = $root.ics23.ExistenceProof.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a NonExistenceProof message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.NonExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.NonExistenceProof} NonExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NonExistenceProof.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a NonExistenceProof message.
         * @function verify
         * @memberof ics23.NonExistenceProof
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NonExistenceProof.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key != null && message.hasOwnProperty("key"))
                if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                    return "key: buffer expected";
            if (message.left != null && message.hasOwnProperty("left")) {
                var error = $root.ics23.ExistenceProof.verify(message.left);
                if (error)
                    return "left." + error;
            }
            if (message.right != null && message.hasOwnProperty("right")) {
                var error = $root.ics23.ExistenceProof.verify(message.right);
                if (error)
                    return "right." + error;
            }
            return null;
        };

        /**
         * Creates a NonExistenceProof message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.NonExistenceProof
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.NonExistenceProof} NonExistenceProof
         */
        NonExistenceProof.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.NonExistenceProof)
                return object;
            var message = new $root.ics23.NonExistenceProof();
            if (object.key != null)
                if (typeof object.key === "string")
                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                else if (object.key.length)
                    message.key = object.key;
            if (object.left != null) {
                if (typeof object.left !== "object")
                    throw TypeError(".ics23.NonExistenceProof.left: object expected");
                message.left = $root.ics23.ExistenceProof.fromObject(object.left);
            }
            if (object.right != null) {
                if (typeof object.right !== "object")
                    throw TypeError(".ics23.NonExistenceProof.right: object expected");
                message.right = $root.ics23.ExistenceProof.fromObject(object.right);
            }
            return message;
        };

        /**
         * Creates a plain object from a NonExistenceProof message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.NonExistenceProof
         * @static
         * @param {ics23.NonExistenceProof} message NonExistenceProof
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NonExistenceProof.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if (options.bytes === String)
                    object.key = "";
                else {
                    object.key = [];
                    if (options.bytes !== Array)
                        object.key = $util.newBuffer(object.key);
                }
                object.left = null;
                object.right = null;
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
            if (message.left != null && message.hasOwnProperty("left"))
                object.left = $root.ics23.ExistenceProof.toObject(message.left, options);
            if (message.right != null && message.hasOwnProperty("right"))
                object.right = $root.ics23.ExistenceProof.toObject(message.right, options);
            return object;
        };

        /**
         * Converts this NonExistenceProof to JSON.
         * @function toJSON
         * @memberof ics23.NonExistenceProof
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NonExistenceProof.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return NonExistenceProof;
    })();

    ics23.CommitmentProof = (function() {

        /**
         * Properties of a CommitmentProof.
         * @memberof ics23
         * @interface ICommitmentProof
         * @property {ics23.IExistenceProof|null} [exist] CommitmentProof exist
         * @property {ics23.INonExistenceProof|null} [nonexist] CommitmentProof nonexist
         * @property {ics23.IBatchProof|null} [batch] CommitmentProof batch
         * @property {ics23.ICompressedBatchProof|null} [compressed] CommitmentProof compressed
         */

        /**
         * Constructs a new CommitmentProof.
         * @memberof ics23
         * @classdesc Represents a CommitmentProof.
         * @implements ICommitmentProof
         * @constructor
         * @param {ics23.ICommitmentProof=} [properties] Properties to set
         */
        function CommitmentProof(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CommitmentProof exist.
         * @member {ics23.IExistenceProof|null|undefined} exist
         * @memberof ics23.CommitmentProof
         * @instance
         */
        CommitmentProof.prototype.exist = null;

        /**
         * CommitmentProof nonexist.
         * @member {ics23.INonExistenceProof|null|undefined} nonexist
         * @memberof ics23.CommitmentProof
         * @instance
         */
        CommitmentProof.prototype.nonexist = null;

        /**
         * CommitmentProof batch.
         * @member {ics23.IBatchProof|null|undefined} batch
         * @memberof ics23.CommitmentProof
         * @instance
         */
        CommitmentProof.prototype.batch = null;

        /**
         * CommitmentProof compressed.
         * @member {ics23.ICompressedBatchProof|null|undefined} compressed
         * @memberof ics23.CommitmentProof
         * @instance
         */
        CommitmentProof.prototype.compressed = null;

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * CommitmentProof proof.
         * @member {"exist"|"nonexist"|"batch"|"compressed"|undefined} proof
         * @memberof ics23.CommitmentProof
         * @instance
         */
        Object.defineProperty(CommitmentProof.prototype, "proof", {
            get: $util.oneOfGetter($oneOfFields = ["exist", "nonexist", "batch", "compressed"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new CommitmentProof instance using the specified properties.
         * @function create
         * @memberof ics23.CommitmentProof
         * @static
         * @param {ics23.ICommitmentProof=} [properties] Properties to set
         * @returns {ics23.CommitmentProof} CommitmentProof instance
         */
        CommitmentProof.create = function create(properties) {
            return new CommitmentProof(properties);
        };

        /**
         * Encodes the specified CommitmentProof message. Does not implicitly {@link ics23.CommitmentProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.CommitmentProof
         * @static
         * @param {ics23.ICommitmentProof} message CommitmentProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CommitmentProof.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.exist != null && message.hasOwnProperty("exist"))
                $root.ics23.ExistenceProof.encode(message.exist, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.nonexist != null && message.hasOwnProperty("nonexist"))
                $root.ics23.NonExistenceProof.encode(message.nonexist, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.batch != null && message.hasOwnProperty("batch"))
                $root.ics23.BatchProof.encode(message.batch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.compressed != null && message.hasOwnProperty("compressed"))
                $root.ics23.CompressedBatchProof.encode(message.compressed, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CommitmentProof message, length delimited. Does not implicitly {@link ics23.CommitmentProof.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.CommitmentProof
         * @static
         * @param {ics23.ICommitmentProof} message CommitmentProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CommitmentProof.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CommitmentProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.CommitmentProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.CommitmentProof} CommitmentProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CommitmentProof.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CommitmentProof();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.exist = $root.ics23.ExistenceProof.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.nonexist = $root.ics23.NonExistenceProof.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.batch = $root.ics23.BatchProof.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.compressed = $root.ics23.CompressedBatchProof.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CommitmentProof message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.CommitmentProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.CommitmentProof} CommitmentProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CommitmentProof.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CommitmentProof message.
         * @function verify
         * @memberof ics23.CommitmentProof
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CommitmentProof.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.exist != null && message.hasOwnProperty("exist")) {
                properties.proof = 1;
                {
                    var error = $root.ics23.ExistenceProof.verify(message.exist);
                    if (error)
                        return "exist." + error;
                }
            }
            if (message.nonexist != null && message.hasOwnProperty("nonexist")) {
                if (properties.proof === 1)
                    return "proof: multiple values";
                properties.proof = 1;
                {
                    var error = $root.ics23.NonExistenceProof.verify(message.nonexist);
                    if (error)
                        return "nonexist." + error;
                }
            }
            if (message.batch != null && message.hasOwnProperty("batch")) {
                if (properties.proof === 1)
                    return "proof: multiple values";
                properties.proof = 1;
                {
                    var error = $root.ics23.BatchProof.verify(message.batch);
                    if (error)
                        return "batch." + error;
                }
            }
            if (message.compressed != null && message.hasOwnProperty("compressed")) {
                if (properties.proof === 1)
                    return "proof: multiple values";
                properties.proof = 1;
                {
                    var error = $root.ics23.CompressedBatchProof.verify(message.compressed);
                    if (error)
                        return "compressed." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CommitmentProof message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.CommitmentProof
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.CommitmentProof} CommitmentProof
         */
        CommitmentProof.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.CommitmentProof)
                return object;
            var message = new $root.ics23.CommitmentProof();
            if (object.exist != null) {
                if (typeof object.exist !== "object")
                    throw TypeError(".ics23.CommitmentProof.exist: object expected");
                message.exist = $root.ics23.ExistenceProof.fromObject(object.exist);
            }
            if (object.nonexist != null) {
                if (typeof object.nonexist !== "object")
                    throw TypeError(".ics23.CommitmentProof.nonexist: object expected");
                message.nonexist = $root.ics23.NonExistenceProof.fromObject(object.nonexist);
            }
            if (object.batch != null) {
                if (typeof object.batch !== "object")
                    throw TypeError(".ics23.CommitmentProof.batch: object expected");
                message.batch = $root.ics23.BatchProof.fromObject(object.batch);
            }
            if (object.compressed != null) {
                if (typeof object.compressed !== "object")
                    throw TypeError(".ics23.CommitmentProof.compressed: object expected");
                message.compressed = $root.ics23.CompressedBatchProof.fromObject(object.compressed);
            }
            return message;
        };

        /**
         * Creates a plain object from a CommitmentProof message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.CommitmentProof
         * @static
         * @param {ics23.CommitmentProof} message CommitmentProof
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CommitmentProof.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.exist != null && message.hasOwnProperty("exist")) {
                object.exist = $root.ics23.ExistenceProof.toObject(message.exist, options);
                if (options.oneofs)
                    object.proof = "exist";
            }
            if (message.nonexist != null && message.hasOwnProperty("nonexist")) {
                object.nonexist = $root.ics23.NonExistenceProof.toObject(message.nonexist, options);
                if (options.oneofs)
                    object.proof = "nonexist";
            }
            if (message.batch != null && message.hasOwnProperty("batch")) {
                object.batch = $root.ics23.BatchProof.toObject(message.batch, options);
                if (options.oneofs)
                    object.proof = "batch";
            }
            if (message.compressed != null && message.hasOwnProperty("compressed")) {
                object.compressed = $root.ics23.CompressedBatchProof.toObject(message.compressed, options);
                if (options.oneofs)
                    object.proof = "compressed";
            }
            return object;
        };

        /**
         * Converts this CommitmentProof to JSON.
         * @function toJSON
         * @memberof ics23.CommitmentProof
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CommitmentProof.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CommitmentProof;
    })();

    ics23.LeafOp = (function() {

        /**
         * Properties of a LeafOp.
         * @memberof ics23
         * @interface ILeafOp
         * @property {ics23.HashOp|null} [hash] LeafOp hash
         * @property {ics23.HashOp|null} [prehashKey] LeafOp prehashKey
         * @property {ics23.HashOp|null} [prehashValue] LeafOp prehashValue
         * @property {ics23.LengthOp|null} [length] LeafOp length
         * @property {Uint8Array|null} [prefix] LeafOp prefix
         */

        /**
         * Constructs a new LeafOp.
         * @memberof ics23
         * @classdesc LeafOp represents the raw key-value data we wish to prove, and
         * must be flexible to represent the internal transformation from
         * the original key-value pairs into the basis hash, for many existing
         * merkle trees.
         * 
         * key and value are passed in. So that the signature of this operation is:
         * leafOp(key, value) -> output
         * 
         * To process this, first prehash the keys and values if needed (ANY means no hash in this case):
         * hkey = prehashKey(key)
         * hvalue = prehashValue(value)
         * 
         * Then combine the bytes, and hash it
         * output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)
         * @implements ILeafOp
         * @constructor
         * @param {ics23.ILeafOp=} [properties] Properties to set
         */
        function LeafOp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LeafOp hash.
         * @member {ics23.HashOp} hash
         * @memberof ics23.LeafOp
         * @instance
         */
        LeafOp.prototype.hash = 0;

        /**
         * LeafOp prehashKey.
         * @member {ics23.HashOp} prehashKey
         * @memberof ics23.LeafOp
         * @instance
         */
        LeafOp.prototype.prehashKey = 0;

        /**
         * LeafOp prehashValue.
         * @member {ics23.HashOp} prehashValue
         * @memberof ics23.LeafOp
         * @instance
         */
        LeafOp.prototype.prehashValue = 0;

        /**
         * LeafOp length.
         * @member {ics23.LengthOp} length
         * @memberof ics23.LeafOp
         * @instance
         */
        LeafOp.prototype.length = 0;

        /**
         * LeafOp prefix.
         * @member {Uint8Array} prefix
         * @memberof ics23.LeafOp
         * @instance
         */
        LeafOp.prototype.prefix = $util.newBuffer([]);

        /**
         * Creates a new LeafOp instance using the specified properties.
         * @function create
         * @memberof ics23.LeafOp
         * @static
         * @param {ics23.ILeafOp=} [properties] Properties to set
         * @returns {ics23.LeafOp} LeafOp instance
         */
        LeafOp.create = function create(properties) {
            return new LeafOp(properties);
        };

        /**
         * Encodes the specified LeafOp message. Does not implicitly {@link ics23.LeafOp.verify|verify} messages.
         * @function encode
         * @memberof ics23.LeafOp
         * @static
         * @param {ics23.ILeafOp} message LeafOp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LeafOp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.hash != null && message.hasOwnProperty("hash"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.hash);
            if (message.prehashKey != null && message.hasOwnProperty("prehashKey"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.prehashKey);
            if (message.prehashValue != null && message.hasOwnProperty("prehashValue"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.prehashValue);
            if (message.length != null && message.hasOwnProperty("length"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.length);
            if (message.prefix != null && message.hasOwnProperty("prefix"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.prefix);
            return writer;
        };

        /**
         * Encodes the specified LeafOp message, length delimited. Does not implicitly {@link ics23.LeafOp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.LeafOp
         * @static
         * @param {ics23.ILeafOp} message LeafOp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LeafOp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LeafOp message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.LeafOp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.LeafOp} LeafOp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LeafOp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.LeafOp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.hash = reader.int32();
                    break;
                case 2:
                    message.prehashKey = reader.int32();
                    break;
                case 3:
                    message.prehashValue = reader.int32();
                    break;
                case 4:
                    message.length = reader.int32();
                    break;
                case 5:
                    message.prefix = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LeafOp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.LeafOp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.LeafOp} LeafOp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LeafOp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LeafOp message.
         * @function verify
         * @memberof ics23.LeafOp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LeafOp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.hash != null && message.hasOwnProperty("hash"))
                switch (message.hash) {
                default:
                    return "hash: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                }
            if (message.prehashKey != null && message.hasOwnProperty("prehashKey"))
                switch (message.prehashKey) {
                default:
                    return "prehashKey: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                }
            if (message.prehashValue != null && message.hasOwnProperty("prehashValue"))
                switch (message.prehashValue) {
                default:
                    return "prehashValue: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                }
            if (message.length != null && message.hasOwnProperty("length"))
                switch (message.length) {
                default:
                    return "length: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                    break;
                }
            if (message.prefix != null && message.hasOwnProperty("prefix"))
                if (!(message.prefix && typeof message.prefix.length === "number" || $util.isString(message.prefix)))
                    return "prefix: buffer expected";
            return null;
        };

        /**
         * Creates a LeafOp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.LeafOp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.LeafOp} LeafOp
         */
        LeafOp.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.LeafOp)
                return object;
            var message = new $root.ics23.LeafOp();
            switch (object.hash) {
            case "NO_HASH":
            case 0:
                message.hash = 0;
                break;
            case "SHA256":
            case 1:
                message.hash = 1;
                break;
            case "SHA512":
            case 2:
                message.hash = 2;
                break;
            case "KECCAK":
            case 3:
                message.hash = 3;
                break;
            case "RIPEMD160":
            case 4:
                message.hash = 4;
                break;
            case "BITCOIN":
            case 5:
                message.hash = 5;
                break;
            case "SHA512_256":
            case 6:
                message.hash = 6;
                break;
            }
            switch (object.prehashKey) {
            case "NO_HASH":
            case 0:
                message.prehashKey = 0;
                break;
            case "SHA256":
            case 1:
                message.prehashKey = 1;
                break;
            case "SHA512":
            case 2:
                message.prehashKey = 2;
                break;
            case "KECCAK":
            case 3:
                message.prehashKey = 3;
                break;
            case "RIPEMD160":
            case 4:
                message.prehashKey = 4;
                break;
            case "BITCOIN":
            case 5:
                message.prehashKey = 5;
                break;
            case "SHA512_256":
            case 6:
                message.prehashKey = 6;
                break;
            }
            switch (object.prehashValue) {
            case "NO_HASH":
            case 0:
                message.prehashValue = 0;
                break;
            case "SHA256":
            case 1:
                message.prehashValue = 1;
                break;
            case "SHA512":
            case 2:
                message.prehashValue = 2;
                break;
            case "KECCAK":
            case 3:
                message.prehashValue = 3;
                break;
            case "RIPEMD160":
            case 4:
                message.prehashValue = 4;
                break;
            case "BITCOIN":
            case 5:
                message.prehashValue = 5;
                break;
            case "SHA512_256":
            case 6:
                message.prehashValue = 6;
                break;
            }
            switch (object.length) {
            case "NO_PREFIX":
            case 0:
                message.length = 0;
                break;
            case "VAR_PROTO":
            case 1:
                message.length = 1;
                break;
            case "VAR_RLP":
            case 2:
                message.length = 2;
                break;
            case "FIXED32_BIG":
            case 3:
                message.length = 3;
                break;
            case "FIXED32_LITTLE":
            case 4:
                message.length = 4;
                break;
            case "FIXED64_BIG":
            case 5:
                message.length = 5;
                break;
            case "FIXED64_LITTLE":
            case 6:
                message.length = 6;
                break;
            case "REQUIRE_32_BYTES":
            case 7:
                message.length = 7;
                break;
            case "REQUIRE_64_BYTES":
            case 8:
                message.length = 8;
                break;
            }
            if (object.prefix != null)
                if (typeof object.prefix === "string")
                    $util.base64.decode(object.prefix, message.prefix = $util.newBuffer($util.base64.length(object.prefix)), 0);
                else if (object.prefix.length)
                    message.prefix = object.prefix;
            return message;
        };

        /**
         * Creates a plain object from a LeafOp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.LeafOp
         * @static
         * @param {ics23.LeafOp} message LeafOp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LeafOp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.hash = options.enums === String ? "NO_HASH" : 0;
                object.prehashKey = options.enums === String ? "NO_HASH" : 0;
                object.prehashValue = options.enums === String ? "NO_HASH" : 0;
                object.length = options.enums === String ? "NO_PREFIX" : 0;
                if (options.bytes === String)
                    object.prefix = "";
                else {
                    object.prefix = [];
                    if (options.bytes !== Array)
                        object.prefix = $util.newBuffer(object.prefix);
                }
            }
            if (message.hash != null && message.hasOwnProperty("hash"))
                object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;
            if (message.prehashKey != null && message.hasOwnProperty("prehashKey"))
                object.prehashKey = options.enums === String ? $root.ics23.HashOp[message.prehashKey] : message.prehashKey;
            if (message.prehashValue != null && message.hasOwnProperty("prehashValue"))
                object.prehashValue = options.enums === String ? $root.ics23.HashOp[message.prehashValue] : message.prehashValue;
            if (message.length != null && message.hasOwnProperty("length"))
                object.length = options.enums === String ? $root.ics23.LengthOp[message.length] : message.length;
            if (message.prefix != null && message.hasOwnProperty("prefix"))
                object.prefix = options.bytes === String ? $util.base64.encode(message.prefix, 0, message.prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.prefix) : message.prefix;
            return object;
        };

        /**
         * Converts this LeafOp to JSON.
         * @function toJSON
         * @memberof ics23.LeafOp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LeafOp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LeafOp;
    })();

    ics23.InnerOp = (function() {

        /**
         * Properties of an InnerOp.
         * @memberof ics23
         * @interface IInnerOp
         * @property {ics23.HashOp|null} [hash] InnerOp hash
         * @property {Uint8Array|null} [prefix] InnerOp prefix
         * @property {Uint8Array|null} [suffix] InnerOp suffix
         */

        /**
         * Constructs a new InnerOp.
         * @memberof ics23
         * @classdesc InnerOp represents a merkle-proof step that is not a leaf.
         * It represents concatenating two children and hashing them to provide the next result.
         * 
         * The result of the previous step is passed in, so the signature of this op is:
         * innerOp(child) -> output
         * 
         * The result of applying InnerOp should be:
         * output = op.hash(op.prefix || child || op.suffix)
         * 
         * where the || operator is concatenation of binary data,
         * and child is the result of hashing all the tree below this step.
         * 
         * Any special data, like prepending child with the length, or prepending the entire operation with
         * some value to differentiate from leaf nodes, should be included in prefix and suffix.
         * If either of prefix or suffix is empty, we just treat it as an empty string
         * @implements IInnerOp
         * @constructor
         * @param {ics23.IInnerOp=} [properties] Properties to set
         */
        function InnerOp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * InnerOp hash.
         * @member {ics23.HashOp} hash
         * @memberof ics23.InnerOp
         * @instance
         */
        InnerOp.prototype.hash = 0;

        /**
         * InnerOp prefix.
         * @member {Uint8Array} prefix
         * @memberof ics23.InnerOp
         * @instance
         */
        InnerOp.prototype.prefix = $util.newBuffer([]);

        /**
         * InnerOp suffix.
         * @member {Uint8Array} suffix
         * @memberof ics23.InnerOp
         * @instance
         */
        InnerOp.prototype.suffix = $util.newBuffer([]);

        /**
         * Creates a new InnerOp instance using the specified properties.
         * @function create
         * @memberof ics23.InnerOp
         * @static
         * @param {ics23.IInnerOp=} [properties] Properties to set
         * @returns {ics23.InnerOp} InnerOp instance
         */
        InnerOp.create = function create(properties) {
            return new InnerOp(properties);
        };

        /**
         * Encodes the specified InnerOp message. Does not implicitly {@link ics23.InnerOp.verify|verify} messages.
         * @function encode
         * @memberof ics23.InnerOp
         * @static
         * @param {ics23.IInnerOp} message InnerOp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InnerOp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.hash != null && message.hasOwnProperty("hash"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.hash);
            if (message.prefix != null && message.hasOwnProperty("prefix"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.prefix);
            if (message.suffix != null && message.hasOwnProperty("suffix"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.suffix);
            return writer;
        };

        /**
         * Encodes the specified InnerOp message, length delimited. Does not implicitly {@link ics23.InnerOp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.InnerOp
         * @static
         * @param {ics23.IInnerOp} message InnerOp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InnerOp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an InnerOp message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.InnerOp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.InnerOp} InnerOp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InnerOp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.InnerOp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.hash = reader.int32();
                    break;
                case 2:
                    message.prefix = reader.bytes();
                    break;
                case 3:
                    message.suffix = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an InnerOp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.InnerOp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.InnerOp} InnerOp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InnerOp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an InnerOp message.
         * @function verify
         * @memberof ics23.InnerOp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        InnerOp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.hash != null && message.hasOwnProperty("hash"))
                switch (message.hash) {
                default:
                    return "hash: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                }
            if (message.prefix != null && message.hasOwnProperty("prefix"))
                if (!(message.prefix && typeof message.prefix.length === "number" || $util.isString(message.prefix)))
                    return "prefix: buffer expected";
            if (message.suffix != null && message.hasOwnProperty("suffix"))
                if (!(message.suffix && typeof message.suffix.length === "number" || $util.isString(message.suffix)))
                    return "suffix: buffer expected";
            return null;
        };

        /**
         * Creates an InnerOp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.InnerOp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.InnerOp} InnerOp
         */
        InnerOp.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.InnerOp)
                return object;
            var message = new $root.ics23.InnerOp();
            switch (object.hash) {
            case "NO_HASH":
            case 0:
                message.hash = 0;
                break;
            case "SHA256":
            case 1:
                message.hash = 1;
                break;
            case "SHA512":
            case 2:
                message.hash = 2;
                break;
            case "KECCAK":
            case 3:
                message.hash = 3;
                break;
            case "RIPEMD160":
            case 4:
                message.hash = 4;
                break;
            case "BITCOIN":
            case 5:
                message.hash = 5;
                break;
            case "SHA512_256":
            case 6:
                message.hash = 6;
                break;
            }
            if (object.prefix != null)
                if (typeof object.prefix === "string")
                    $util.base64.decode(object.prefix, message.prefix = $util.newBuffer($util.base64.length(object.prefix)), 0);
                else if (object.prefix.length)
                    message.prefix = object.prefix;
            if (object.suffix != null)
                if (typeof object.suffix === "string")
                    $util.base64.decode(object.suffix, message.suffix = $util.newBuffer($util.base64.length(object.suffix)), 0);
                else if (object.suffix.length)
                    message.suffix = object.suffix;
            return message;
        };

        /**
         * Creates a plain object from an InnerOp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.InnerOp
         * @static
         * @param {ics23.InnerOp} message InnerOp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        InnerOp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.hash = options.enums === String ? "NO_HASH" : 0;
                if (options.bytes === String)
                    object.prefix = "";
                else {
                    object.prefix = [];
                    if (options.bytes !== Array)
                        object.prefix = $util.newBuffer(object.prefix);
                }
                if (options.bytes === String)
                    object.suffix = "";
                else {
                    object.suffix = [];
                    if (options.bytes !== Array)
                        object.suffix = $util.newBuffer(object.suffix);
                }
            }
            if (message.hash != null && message.hasOwnProperty("hash"))
                object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;
            if (message.prefix != null && message.hasOwnProperty("prefix"))
                object.prefix = options.bytes === String ? $util.base64.encode(message.prefix, 0, message.prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.prefix) : message.prefix;
            if (message.suffix != null && message.hasOwnProperty("suffix"))
                object.suffix = options.bytes === String ? $util.base64.encode(message.suffix, 0, message.suffix.length) : options.bytes === Array ? Array.prototype.slice.call(message.suffix) : message.suffix;
            return object;
        };

        /**
         * Converts this InnerOp to JSON.
         * @function toJSON
         * @memberof ics23.InnerOp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        InnerOp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return InnerOp;
    })();

    ics23.ProofSpec = (function() {

        /**
         * Properties of a ProofSpec.
         * @memberof ics23
         * @interface IProofSpec
         * @property {ics23.ILeafOp|null} [leafSpec] ProofSpec leafSpec
         * @property {ics23.IInnerSpec|null} [innerSpec] ProofSpec innerSpec
         * @property {number|null} [maxDepth] ProofSpec maxDepth
         * @property {number|null} [minDepth] ProofSpec minDepth
         */

        /**
         * Constructs a new ProofSpec.
         * @memberof ics23
         * @classdesc ProofSpec defines what the expected parameters are for a given proof type.
         * This can be stored in the client and used to validate any incoming proofs.
         * 
         * verify(ProofSpec, Proof) -> Proof | Error
         * 
         * As demonstrated in tests, if we don't fix the algorithm used to calculate the
         * LeafHash for a given tree, there are many possible key-value pairs that can
         * generate a given hash (by interpretting the preimage differently).
         * We need this for proper security, requires client knows a priori what
         * tree format server uses. But not in code, rather a configuration object.
         * @implements IProofSpec
         * @constructor
         * @param {ics23.IProofSpec=} [properties] Properties to set
         */
        function ProofSpec(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProofSpec leafSpec.
         * @member {ics23.ILeafOp|null|undefined} leafSpec
         * @memberof ics23.ProofSpec
         * @instance
         */
        ProofSpec.prototype.leafSpec = null;

        /**
         * ProofSpec innerSpec.
         * @member {ics23.IInnerSpec|null|undefined} innerSpec
         * @memberof ics23.ProofSpec
         * @instance
         */
        ProofSpec.prototype.innerSpec = null;

        /**
         * ProofSpec maxDepth.
         * @member {number} maxDepth
         * @memberof ics23.ProofSpec
         * @instance
         */
        ProofSpec.prototype.maxDepth = 0;

        /**
         * ProofSpec minDepth.
         * @member {number} minDepth
         * @memberof ics23.ProofSpec
         * @instance
         */
        ProofSpec.prototype.minDepth = 0;

        /**
         * Creates a new ProofSpec instance using the specified properties.
         * @function create
         * @memberof ics23.ProofSpec
         * @static
         * @param {ics23.IProofSpec=} [properties] Properties to set
         * @returns {ics23.ProofSpec} ProofSpec instance
         */
        ProofSpec.create = function create(properties) {
            return new ProofSpec(properties);
        };

        /**
         * Encodes the specified ProofSpec message. Does not implicitly {@link ics23.ProofSpec.verify|verify} messages.
         * @function encode
         * @memberof ics23.ProofSpec
         * @static
         * @param {ics23.IProofSpec} message ProofSpec message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProofSpec.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.leafSpec != null && message.hasOwnProperty("leafSpec"))
                $root.ics23.LeafOp.encode(message.leafSpec, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.innerSpec != null && message.hasOwnProperty("innerSpec"))
                $root.ics23.InnerSpec.encode(message.innerSpec, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.maxDepth != null && message.hasOwnProperty("maxDepth"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.maxDepth);
            if (message.minDepth != null && message.hasOwnProperty("minDepth"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.minDepth);
            return writer;
        };

        /**
         * Encodes the specified ProofSpec message, length delimited. Does not implicitly {@link ics23.ProofSpec.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.ProofSpec
         * @static
         * @param {ics23.IProofSpec} message ProofSpec message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProofSpec.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProofSpec message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.ProofSpec
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.ProofSpec} ProofSpec
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProofSpec.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.ProofSpec();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.leafSpec = $root.ics23.LeafOp.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.innerSpec = $root.ics23.InnerSpec.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.maxDepth = reader.int32();
                    break;
                case 4:
                    message.minDepth = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProofSpec message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.ProofSpec
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.ProofSpec} ProofSpec
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProofSpec.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProofSpec message.
         * @function verify
         * @memberof ics23.ProofSpec
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProofSpec.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.leafSpec != null && message.hasOwnProperty("leafSpec")) {
                var error = $root.ics23.LeafOp.verify(message.leafSpec);
                if (error)
                    return "leafSpec." + error;
            }
            if (message.innerSpec != null && message.hasOwnProperty("innerSpec")) {
                var error = $root.ics23.InnerSpec.verify(message.innerSpec);
                if (error)
                    return "innerSpec." + error;
            }
            if (message.maxDepth != null && message.hasOwnProperty("maxDepth"))
                if (!$util.isInteger(message.maxDepth))
                    return "maxDepth: integer expected";
            if (message.minDepth != null && message.hasOwnProperty("minDepth"))
                if (!$util.isInteger(message.minDepth))
                    return "minDepth: integer expected";
            return null;
        };

        /**
         * Creates a ProofSpec message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.ProofSpec
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.ProofSpec} ProofSpec
         */
        ProofSpec.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.ProofSpec)
                return object;
            var message = new $root.ics23.ProofSpec();
            if (object.leafSpec != null) {
                if (typeof object.leafSpec !== "object")
                    throw TypeError(".ics23.ProofSpec.leafSpec: object expected");
                message.leafSpec = $root.ics23.LeafOp.fromObject(object.leafSpec);
            }
            if (object.innerSpec != null) {
                if (typeof object.innerSpec !== "object")
                    throw TypeError(".ics23.ProofSpec.innerSpec: object expected");
                message.innerSpec = $root.ics23.InnerSpec.fromObject(object.innerSpec);
            }
            if (object.maxDepth != null)
                message.maxDepth = object.maxDepth | 0;
            if (object.minDepth != null)
                message.minDepth = object.minDepth | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProofSpec message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.ProofSpec
         * @static
         * @param {ics23.ProofSpec} message ProofSpec
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProofSpec.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.leafSpec = null;
                object.innerSpec = null;
                object.maxDepth = 0;
                object.minDepth = 0;
            }
            if (message.leafSpec != null && message.hasOwnProperty("leafSpec"))
                object.leafSpec = $root.ics23.LeafOp.toObject(message.leafSpec, options);
            if (message.innerSpec != null && message.hasOwnProperty("innerSpec"))
                object.innerSpec = $root.ics23.InnerSpec.toObject(message.innerSpec, options);
            if (message.maxDepth != null && message.hasOwnProperty("maxDepth"))
                object.maxDepth = message.maxDepth;
            if (message.minDepth != null && message.hasOwnProperty("minDepth"))
                object.minDepth = message.minDepth;
            return object;
        };

        /**
         * Converts this ProofSpec to JSON.
         * @function toJSON
         * @memberof ics23.ProofSpec
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProofSpec.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ProofSpec;
    })();

    ics23.InnerSpec = (function() {

        /**
         * Properties of an InnerSpec.
         * @memberof ics23
         * @interface IInnerSpec
         * @property {Array.<number>|null} [childOrder] InnerSpec childOrder
         * @property {number|null} [childSize] InnerSpec childSize
         * @property {number|null} [minPrefixLength] InnerSpec minPrefixLength
         * @property {number|null} [maxPrefixLength] InnerSpec maxPrefixLength
         * @property {Uint8Array|null} [emptyChild] InnerSpec emptyChild
         * @property {ics23.HashOp|null} [hash] InnerSpec hash
         */

        /**
         * Constructs a new InnerSpec.
         * @memberof ics23
         * @classdesc Represents an InnerSpec.
         * @implements IInnerSpec
         * @constructor
         * @param {ics23.IInnerSpec=} [properties] Properties to set
         */
        function InnerSpec(properties) {
            this.childOrder = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * InnerSpec childOrder.
         * @member {Array.<number>} childOrder
         * @memberof ics23.InnerSpec
         * @instance
         */
        InnerSpec.prototype.childOrder = $util.emptyArray;

        /**
         * InnerSpec childSize.
         * @member {number} childSize
         * @memberof ics23.InnerSpec
         * @instance
         */
        InnerSpec.prototype.childSize = 0;

        /**
         * InnerSpec minPrefixLength.
         * @member {number} minPrefixLength
         * @memberof ics23.InnerSpec
         * @instance
         */
        InnerSpec.prototype.minPrefixLength = 0;

        /**
         * InnerSpec maxPrefixLength.
         * @member {number} maxPrefixLength
         * @memberof ics23.InnerSpec
         * @instance
         */
        InnerSpec.prototype.maxPrefixLength = 0;

        /**
         * InnerSpec emptyChild.
         * @member {Uint8Array} emptyChild
         * @memberof ics23.InnerSpec
         * @instance
         */
        InnerSpec.prototype.emptyChild = $util.newBuffer([]);

        /**
         * InnerSpec hash.
         * @member {ics23.HashOp} hash
         * @memberof ics23.InnerSpec
         * @instance
         */
        InnerSpec.prototype.hash = 0;

        /**
         * Creates a new InnerSpec instance using the specified properties.
         * @function create
         * @memberof ics23.InnerSpec
         * @static
         * @param {ics23.IInnerSpec=} [properties] Properties to set
         * @returns {ics23.InnerSpec} InnerSpec instance
         */
        InnerSpec.create = function create(properties) {
            return new InnerSpec(properties);
        };

        /**
         * Encodes the specified InnerSpec message. Does not implicitly {@link ics23.InnerSpec.verify|verify} messages.
         * @function encode
         * @memberof ics23.InnerSpec
         * @static
         * @param {ics23.IInnerSpec} message InnerSpec message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InnerSpec.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.childOrder != null && message.childOrder.length) {
                writer.uint32(/* id 1, wireType 2 =*/10).fork();
                for (var i = 0; i < message.childOrder.length; ++i)
                    writer.int32(message.childOrder[i]);
                writer.ldelim();
            }
            if (message.childSize != null && message.hasOwnProperty("childSize"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.childSize);
            if (message.minPrefixLength != null && message.hasOwnProperty("minPrefixLength"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.minPrefixLength);
            if (message.maxPrefixLength != null && message.hasOwnProperty("maxPrefixLength"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.maxPrefixLength);
            if (message.emptyChild != null && message.hasOwnProperty("emptyChild"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.emptyChild);
            if (message.hash != null && message.hasOwnProperty("hash"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.hash);
            return writer;
        };

        /**
         * Encodes the specified InnerSpec message, length delimited. Does not implicitly {@link ics23.InnerSpec.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.InnerSpec
         * @static
         * @param {ics23.IInnerSpec} message InnerSpec message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InnerSpec.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an InnerSpec message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.InnerSpec
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.InnerSpec} InnerSpec
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InnerSpec.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.InnerSpec();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.childOrder && message.childOrder.length))
                        message.childOrder = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.childOrder.push(reader.int32());
                    } else
                        message.childOrder.push(reader.int32());
                    break;
                case 2:
                    message.childSize = reader.int32();
                    break;
                case 3:
                    message.minPrefixLength = reader.int32();
                    break;
                case 4:
                    message.maxPrefixLength = reader.int32();
                    break;
                case 5:
                    message.emptyChild = reader.bytes();
                    break;
                case 6:
                    message.hash = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an InnerSpec message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.InnerSpec
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.InnerSpec} InnerSpec
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InnerSpec.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an InnerSpec message.
         * @function verify
         * @memberof ics23.InnerSpec
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        InnerSpec.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.childOrder != null && message.hasOwnProperty("childOrder")) {
                if (!Array.isArray(message.childOrder))
                    return "childOrder: array expected";
                for (var i = 0; i < message.childOrder.length; ++i)
                    if (!$util.isInteger(message.childOrder[i]))
                        return "childOrder: integer[] expected";
            }
            if (message.childSize != null && message.hasOwnProperty("childSize"))
                if (!$util.isInteger(message.childSize))
                    return "childSize: integer expected";
            if (message.minPrefixLength != null && message.hasOwnProperty("minPrefixLength"))
                if (!$util.isInteger(message.minPrefixLength))
                    return "minPrefixLength: integer expected";
            if (message.maxPrefixLength != null && message.hasOwnProperty("maxPrefixLength"))
                if (!$util.isInteger(message.maxPrefixLength))
                    return "maxPrefixLength: integer expected";
            if (message.emptyChild != null && message.hasOwnProperty("emptyChild"))
                if (!(message.emptyChild && typeof message.emptyChild.length === "number" || $util.isString(message.emptyChild)))
                    return "emptyChild: buffer expected";
            if (message.hash != null && message.hasOwnProperty("hash"))
                switch (message.hash) {
                default:
                    return "hash: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                }
            return null;
        };

        /**
         * Creates an InnerSpec message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.InnerSpec
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.InnerSpec} InnerSpec
         */
        InnerSpec.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.InnerSpec)
                return object;
            var message = new $root.ics23.InnerSpec();
            if (object.childOrder) {
                if (!Array.isArray(object.childOrder))
                    throw TypeError(".ics23.InnerSpec.childOrder: array expected");
                message.childOrder = [];
                for (var i = 0; i < object.childOrder.length; ++i)
                    message.childOrder[i] = object.childOrder[i] | 0;
            }
            if (object.childSize != null)
                message.childSize = object.childSize | 0;
            if (object.minPrefixLength != null)
                message.minPrefixLength = object.minPrefixLength | 0;
            if (object.maxPrefixLength != null)
                message.maxPrefixLength = object.maxPrefixLength | 0;
            if (object.emptyChild != null)
                if (typeof object.emptyChild === "string")
                    $util.base64.decode(object.emptyChild, message.emptyChild = $util.newBuffer($util.base64.length(object.emptyChild)), 0);
                else if (object.emptyChild.length)
                    message.emptyChild = object.emptyChild;
            switch (object.hash) {
            case "NO_HASH":
            case 0:
                message.hash = 0;
                break;
            case "SHA256":
            case 1:
                message.hash = 1;
                break;
            case "SHA512":
            case 2:
                message.hash = 2;
                break;
            case "KECCAK":
            case 3:
                message.hash = 3;
                break;
            case "RIPEMD160":
            case 4:
                message.hash = 4;
                break;
            case "BITCOIN":
            case 5:
                message.hash = 5;
                break;
            case "SHA512_256":
            case 6:
                message.hash = 6;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an InnerSpec message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.InnerSpec
         * @static
         * @param {ics23.InnerSpec} message InnerSpec
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        InnerSpec.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.childOrder = [];
            if (options.defaults) {
                object.childSize = 0;
                object.minPrefixLength = 0;
                object.maxPrefixLength = 0;
                if (options.bytes === String)
                    object.emptyChild = "";
                else {
                    object.emptyChild = [];
                    if (options.bytes !== Array)
                        object.emptyChild = $util.newBuffer(object.emptyChild);
                }
                object.hash = options.enums === String ? "NO_HASH" : 0;
            }
            if (message.childOrder && message.childOrder.length) {
                object.childOrder = [];
                for (var j = 0; j < message.childOrder.length; ++j)
                    object.childOrder[j] = message.childOrder[j];
            }
            if (message.childSize != null && message.hasOwnProperty("childSize"))
                object.childSize = message.childSize;
            if (message.minPrefixLength != null && message.hasOwnProperty("minPrefixLength"))
                object.minPrefixLength = message.minPrefixLength;
            if (message.maxPrefixLength != null && message.hasOwnProperty("maxPrefixLength"))
                object.maxPrefixLength = message.maxPrefixLength;
            if (message.emptyChild != null && message.hasOwnProperty("emptyChild"))
                object.emptyChild = options.bytes === String ? $util.base64.encode(message.emptyChild, 0, message.emptyChild.length) : options.bytes === Array ? Array.prototype.slice.call(message.emptyChild) : message.emptyChild;
            if (message.hash != null && message.hasOwnProperty("hash"))
                object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;
            return object;
        };

        /**
         * Converts this InnerSpec to JSON.
         * @function toJSON
         * @memberof ics23.InnerSpec
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        InnerSpec.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return InnerSpec;
    })();

    ics23.BatchProof = (function() {

        /**
         * Properties of a BatchProof.
         * @memberof ics23
         * @interface IBatchProof
         * @property {Array.<ics23.IBatchEntry>|null} [entries] BatchProof entries
         */

        /**
         * Constructs a new BatchProof.
         * @memberof ics23
         * @classdesc Represents a BatchProof.
         * @implements IBatchProof
         * @constructor
         * @param {ics23.IBatchProof=} [properties] Properties to set
         */
        function BatchProof(properties) {
            this.entries = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BatchProof entries.
         * @member {Array.<ics23.IBatchEntry>} entries
         * @memberof ics23.BatchProof
         * @instance
         */
        BatchProof.prototype.entries = $util.emptyArray;

        /**
         * Creates a new BatchProof instance using the specified properties.
         * @function create
         * @memberof ics23.BatchProof
         * @static
         * @param {ics23.IBatchProof=} [properties] Properties to set
         * @returns {ics23.BatchProof} BatchProof instance
         */
        BatchProof.create = function create(properties) {
            return new BatchProof(properties);
        };

        /**
         * Encodes the specified BatchProof message. Does not implicitly {@link ics23.BatchProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.BatchProof
         * @static
         * @param {ics23.IBatchProof} message BatchProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BatchProof.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entries != null && message.entries.length)
                for (var i = 0; i < message.entries.length; ++i)
                    $root.ics23.BatchEntry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BatchProof message, length delimited. Does not implicitly {@link ics23.BatchProof.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.BatchProof
         * @static
         * @param {ics23.IBatchProof} message BatchProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BatchProof.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BatchProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.BatchProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.BatchProof} BatchProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BatchProof.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.BatchProof();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.entries && message.entries.length))
                        message.entries = [];
                    message.entries.push($root.ics23.BatchEntry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BatchProof message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.BatchProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.BatchProof} BatchProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BatchProof.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BatchProof message.
         * @function verify
         * @memberof ics23.BatchProof
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BatchProof.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entries != null && message.hasOwnProperty("entries")) {
                if (!Array.isArray(message.entries))
                    return "entries: array expected";
                for (var i = 0; i < message.entries.length; ++i) {
                    var error = $root.ics23.BatchEntry.verify(message.entries[i]);
                    if (error)
                        return "entries." + error;
                }
            }
            return null;
        };

        /**
         * Creates a BatchProof message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.BatchProof
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.BatchProof} BatchProof
         */
        BatchProof.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.BatchProof)
                return object;
            var message = new $root.ics23.BatchProof();
            if (object.entries) {
                if (!Array.isArray(object.entries))
                    throw TypeError(".ics23.BatchProof.entries: array expected");
                message.entries = [];
                for (var i = 0; i < object.entries.length; ++i) {
                    if (typeof object.entries[i] !== "object")
                        throw TypeError(".ics23.BatchProof.entries: object expected");
                    message.entries[i] = $root.ics23.BatchEntry.fromObject(object.entries[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a BatchProof message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.BatchProof
         * @static
         * @param {ics23.BatchProof} message BatchProof
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BatchProof.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.entries = [];
            if (message.entries && message.entries.length) {
                object.entries = [];
                for (var j = 0; j < message.entries.length; ++j)
                    object.entries[j] = $root.ics23.BatchEntry.toObject(message.entries[j], options);
            }
            return object;
        };

        /**
         * Converts this BatchProof to JSON.
         * @function toJSON
         * @memberof ics23.BatchProof
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BatchProof.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BatchProof;
    })();

    ics23.BatchEntry = (function() {

        /**
         * Properties of a BatchEntry.
         * @memberof ics23
         * @interface IBatchEntry
         * @property {ics23.IExistenceProof|null} [exist] BatchEntry exist
         * @property {ics23.INonExistenceProof|null} [nonexist] BatchEntry nonexist
         */

        /**
         * Constructs a new BatchEntry.
         * @memberof ics23
         * @classdesc Represents a BatchEntry.
         * @implements IBatchEntry
         * @constructor
         * @param {ics23.IBatchEntry=} [properties] Properties to set
         */
        function BatchEntry(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BatchEntry exist.
         * @member {ics23.IExistenceProof|null|undefined} exist
         * @memberof ics23.BatchEntry
         * @instance
         */
        BatchEntry.prototype.exist = null;

        /**
         * BatchEntry nonexist.
         * @member {ics23.INonExistenceProof|null|undefined} nonexist
         * @memberof ics23.BatchEntry
         * @instance
         */
        BatchEntry.prototype.nonexist = null;

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * BatchEntry proof.
         * @member {"exist"|"nonexist"|undefined} proof
         * @memberof ics23.BatchEntry
         * @instance
         */
        Object.defineProperty(BatchEntry.prototype, "proof", {
            get: $util.oneOfGetter($oneOfFields = ["exist", "nonexist"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new BatchEntry instance using the specified properties.
         * @function create
         * @memberof ics23.BatchEntry
         * @static
         * @param {ics23.IBatchEntry=} [properties] Properties to set
         * @returns {ics23.BatchEntry} BatchEntry instance
         */
        BatchEntry.create = function create(properties) {
            return new BatchEntry(properties);
        };

        /**
         * Encodes the specified BatchEntry message. Does not implicitly {@link ics23.BatchEntry.verify|verify} messages.
         * @function encode
         * @memberof ics23.BatchEntry
         * @static
         * @param {ics23.IBatchEntry} message BatchEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BatchEntry.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.exist != null && message.hasOwnProperty("exist"))
                $root.ics23.ExistenceProof.encode(message.exist, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.nonexist != null && message.hasOwnProperty("nonexist"))
                $root.ics23.NonExistenceProof.encode(message.nonexist, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BatchEntry message, length delimited. Does not implicitly {@link ics23.BatchEntry.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.BatchEntry
         * @static
         * @param {ics23.IBatchEntry} message BatchEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BatchEntry.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BatchEntry message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.BatchEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.BatchEntry} BatchEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BatchEntry.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.BatchEntry();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.exist = $root.ics23.ExistenceProof.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.nonexist = $root.ics23.NonExistenceProof.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BatchEntry message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.BatchEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.BatchEntry} BatchEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BatchEntry.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BatchEntry message.
         * @function verify
         * @memberof ics23.BatchEntry
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BatchEntry.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.exist != null && message.hasOwnProperty("exist")) {
                properties.proof = 1;
                {
                    var error = $root.ics23.ExistenceProof.verify(message.exist);
                    if (error)
                        return "exist." + error;
                }
            }
            if (message.nonexist != null && message.hasOwnProperty("nonexist")) {
                if (properties.proof === 1)
                    return "proof: multiple values";
                properties.proof = 1;
                {
                    var error = $root.ics23.NonExistenceProof.verify(message.nonexist);
                    if (error)
                        return "nonexist." + error;
                }
            }
            return null;
        };

        /**
         * Creates a BatchEntry message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.BatchEntry
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.BatchEntry} BatchEntry
         */
        BatchEntry.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.BatchEntry)
                return object;
            var message = new $root.ics23.BatchEntry();
            if (object.exist != null) {
                if (typeof object.exist !== "object")
                    throw TypeError(".ics23.BatchEntry.exist: object expected");
                message.exist = $root.ics23.ExistenceProof.fromObject(object.exist);
            }
            if (object.nonexist != null) {
                if (typeof object.nonexist !== "object")
                    throw TypeError(".ics23.BatchEntry.nonexist: object expected");
                message.nonexist = $root.ics23.NonExistenceProof.fromObject(object.nonexist);
            }
            return message;
        };

        /**
         * Creates a plain object from a BatchEntry message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.BatchEntry
         * @static
         * @param {ics23.BatchEntry} message BatchEntry
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BatchEntry.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.exist != null && message.hasOwnProperty("exist")) {
                object.exist = $root.ics23.ExistenceProof.toObject(message.exist, options);
                if (options.oneofs)
                    object.proof = "exist";
            }
            if (message.nonexist != null && message.hasOwnProperty("nonexist")) {
                object.nonexist = $root.ics23.NonExistenceProof.toObject(message.nonexist, options);
                if (options.oneofs)
                    object.proof = "nonexist";
            }
            return object;
        };

        /**
         * Converts this BatchEntry to JSON.
         * @function toJSON
         * @memberof ics23.BatchEntry
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BatchEntry.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BatchEntry;
    })();

    ics23.CompressedBatchProof = (function() {

        /**
         * Properties of a CompressedBatchProof.
         * @memberof ics23
         * @interface ICompressedBatchProof
         * @property {Array.<ics23.ICompressedBatchEntry>|null} [entries] CompressedBatchProof entries
         * @property {Array.<ics23.IInnerOp>|null} [lookupInners] CompressedBatchProof lookupInners
         */

        /**
         * Constructs a new CompressedBatchProof.
         * @memberof ics23
         * @classdesc Represents a CompressedBatchProof.
         * @implements ICompressedBatchProof
         * @constructor
         * @param {ics23.ICompressedBatchProof=} [properties] Properties to set
         */
        function CompressedBatchProof(properties) {
            this.entries = [];
            this.lookupInners = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CompressedBatchProof entries.
         * @member {Array.<ics23.ICompressedBatchEntry>} entries
         * @memberof ics23.CompressedBatchProof
         * @instance
         */
        CompressedBatchProof.prototype.entries = $util.emptyArray;

        /**
         * CompressedBatchProof lookupInners.
         * @member {Array.<ics23.IInnerOp>} lookupInners
         * @memberof ics23.CompressedBatchProof
         * @instance
         */
        CompressedBatchProof.prototype.lookupInners = $util.emptyArray;

        /**
         * Creates a new CompressedBatchProof instance using the specified properties.
         * @function create
         * @memberof ics23.CompressedBatchProof
         * @static
         * @param {ics23.ICompressedBatchProof=} [properties] Properties to set
         * @returns {ics23.CompressedBatchProof} CompressedBatchProof instance
         */
        CompressedBatchProof.create = function create(properties) {
            return new CompressedBatchProof(properties);
        };

        /**
         * Encodes the specified CompressedBatchProof message. Does not implicitly {@link ics23.CompressedBatchProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.CompressedBatchProof
         * @static
         * @param {ics23.ICompressedBatchProof} message CompressedBatchProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedBatchProof.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entries != null && message.entries.length)
                for (var i = 0; i < message.entries.length; ++i)
                    $root.ics23.CompressedBatchEntry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.lookupInners != null && message.lookupInners.length)
                for (var i = 0; i < message.lookupInners.length; ++i)
                    $root.ics23.InnerOp.encode(message.lookupInners[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CompressedBatchProof message, length delimited. Does not implicitly {@link ics23.CompressedBatchProof.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.CompressedBatchProof
         * @static
         * @param {ics23.ICompressedBatchProof} message CompressedBatchProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedBatchProof.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CompressedBatchProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.CompressedBatchProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.CompressedBatchProof} CompressedBatchProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedBatchProof.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedBatchProof();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.entries && message.entries.length))
                        message.entries = [];
                    message.entries.push($root.ics23.CompressedBatchEntry.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.lookupInners && message.lookupInners.length))
                        message.lookupInners = [];
                    message.lookupInners.push($root.ics23.InnerOp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CompressedBatchProof message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.CompressedBatchProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.CompressedBatchProof} CompressedBatchProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedBatchProof.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CompressedBatchProof message.
         * @function verify
         * @memberof ics23.CompressedBatchProof
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CompressedBatchProof.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entries != null && message.hasOwnProperty("entries")) {
                if (!Array.isArray(message.entries))
                    return "entries: array expected";
                for (var i = 0; i < message.entries.length; ++i) {
                    var error = $root.ics23.CompressedBatchEntry.verify(message.entries[i]);
                    if (error)
                        return "entries." + error;
                }
            }
            if (message.lookupInners != null && message.hasOwnProperty("lookupInners")) {
                if (!Array.isArray(message.lookupInners))
                    return "lookupInners: array expected";
                for (var i = 0; i < message.lookupInners.length; ++i) {
                    var error = $root.ics23.InnerOp.verify(message.lookupInners[i]);
                    if (error)
                        return "lookupInners." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CompressedBatchProof message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.CompressedBatchProof
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.CompressedBatchProof} CompressedBatchProof
         */
        CompressedBatchProof.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.CompressedBatchProof)
                return object;
            var message = new $root.ics23.CompressedBatchProof();
            if (object.entries) {
                if (!Array.isArray(object.entries))
                    throw TypeError(".ics23.CompressedBatchProof.entries: array expected");
                message.entries = [];
                for (var i = 0; i < object.entries.length; ++i) {
                    if (typeof object.entries[i] !== "object")
                        throw TypeError(".ics23.CompressedBatchProof.entries: object expected");
                    message.entries[i] = $root.ics23.CompressedBatchEntry.fromObject(object.entries[i]);
                }
            }
            if (object.lookupInners) {
                if (!Array.isArray(object.lookupInners))
                    throw TypeError(".ics23.CompressedBatchProof.lookupInners: array expected");
                message.lookupInners = [];
                for (var i = 0; i < object.lookupInners.length; ++i) {
                    if (typeof object.lookupInners[i] !== "object")
                        throw TypeError(".ics23.CompressedBatchProof.lookupInners: object expected");
                    message.lookupInners[i] = $root.ics23.InnerOp.fromObject(object.lookupInners[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a CompressedBatchProof message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.CompressedBatchProof
         * @static
         * @param {ics23.CompressedBatchProof} message CompressedBatchProof
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CompressedBatchProof.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.entries = [];
                object.lookupInners = [];
            }
            if (message.entries && message.entries.length) {
                object.entries = [];
                for (var j = 0; j < message.entries.length; ++j)
                    object.entries[j] = $root.ics23.CompressedBatchEntry.toObject(message.entries[j], options);
            }
            if (message.lookupInners && message.lookupInners.length) {
                object.lookupInners = [];
                for (var j = 0; j < message.lookupInners.length; ++j)
                    object.lookupInners[j] = $root.ics23.InnerOp.toObject(message.lookupInners[j], options);
            }
            return object;
        };

        /**
         * Converts this CompressedBatchProof to JSON.
         * @function toJSON
         * @memberof ics23.CompressedBatchProof
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CompressedBatchProof.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CompressedBatchProof;
    })();

    ics23.CompressedBatchEntry = (function() {

        /**
         * Properties of a CompressedBatchEntry.
         * @memberof ics23
         * @interface ICompressedBatchEntry
         * @property {ics23.ICompressedExistenceProof|null} [exist] CompressedBatchEntry exist
         * @property {ics23.ICompressedNonExistenceProof|null} [nonexist] CompressedBatchEntry nonexist
         */

        /**
         * Constructs a new CompressedBatchEntry.
         * @memberof ics23
         * @classdesc Represents a CompressedBatchEntry.
         * @implements ICompressedBatchEntry
         * @constructor
         * @param {ics23.ICompressedBatchEntry=} [properties] Properties to set
         */
        function CompressedBatchEntry(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CompressedBatchEntry exist.
         * @member {ics23.ICompressedExistenceProof|null|undefined} exist
         * @memberof ics23.CompressedBatchEntry
         * @instance
         */
        CompressedBatchEntry.prototype.exist = null;

        /**
         * CompressedBatchEntry nonexist.
         * @member {ics23.ICompressedNonExistenceProof|null|undefined} nonexist
         * @memberof ics23.CompressedBatchEntry
         * @instance
         */
        CompressedBatchEntry.prototype.nonexist = null;

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * CompressedBatchEntry proof.
         * @member {"exist"|"nonexist"|undefined} proof
         * @memberof ics23.CompressedBatchEntry
         * @instance
         */
        Object.defineProperty(CompressedBatchEntry.prototype, "proof", {
            get: $util.oneOfGetter($oneOfFields = ["exist", "nonexist"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new CompressedBatchEntry instance using the specified properties.
         * @function create
         * @memberof ics23.CompressedBatchEntry
         * @static
         * @param {ics23.ICompressedBatchEntry=} [properties] Properties to set
         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry instance
         */
        CompressedBatchEntry.create = function create(properties) {
            return new CompressedBatchEntry(properties);
        };

        /**
         * Encodes the specified CompressedBatchEntry message. Does not implicitly {@link ics23.CompressedBatchEntry.verify|verify} messages.
         * @function encode
         * @memberof ics23.CompressedBatchEntry
         * @static
         * @param {ics23.ICompressedBatchEntry} message CompressedBatchEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedBatchEntry.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.exist != null && message.hasOwnProperty("exist"))
                $root.ics23.CompressedExistenceProof.encode(message.exist, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.nonexist != null && message.hasOwnProperty("nonexist"))
                $root.ics23.CompressedNonExistenceProof.encode(message.nonexist, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CompressedBatchEntry message, length delimited. Does not implicitly {@link ics23.CompressedBatchEntry.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.CompressedBatchEntry
         * @static
         * @param {ics23.ICompressedBatchEntry} message CompressedBatchEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedBatchEntry.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CompressedBatchEntry message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.CompressedBatchEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedBatchEntry.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedBatchEntry();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.exist = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.nonexist = $root.ics23.CompressedNonExistenceProof.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CompressedBatchEntry message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.CompressedBatchEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedBatchEntry.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CompressedBatchEntry message.
         * @function verify
         * @memberof ics23.CompressedBatchEntry
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CompressedBatchEntry.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.exist != null && message.hasOwnProperty("exist")) {
                properties.proof = 1;
                {
                    var error = $root.ics23.CompressedExistenceProof.verify(message.exist);
                    if (error)
                        return "exist." + error;
                }
            }
            if (message.nonexist != null && message.hasOwnProperty("nonexist")) {
                if (properties.proof === 1)
                    return "proof: multiple values";
                properties.proof = 1;
                {
                    var error = $root.ics23.CompressedNonExistenceProof.verify(message.nonexist);
                    if (error)
                        return "nonexist." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CompressedBatchEntry message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.CompressedBatchEntry
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry
         */
        CompressedBatchEntry.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.CompressedBatchEntry)
                return object;
            var message = new $root.ics23.CompressedBatchEntry();
            if (object.exist != null) {
                if (typeof object.exist !== "object")
                    throw TypeError(".ics23.CompressedBatchEntry.exist: object expected");
                message.exist = $root.ics23.CompressedExistenceProof.fromObject(object.exist);
            }
            if (object.nonexist != null) {
                if (typeof object.nonexist !== "object")
                    throw TypeError(".ics23.CompressedBatchEntry.nonexist: object expected");
                message.nonexist = $root.ics23.CompressedNonExistenceProof.fromObject(object.nonexist);
            }
            return message;
        };

        /**
         * Creates a plain object from a CompressedBatchEntry message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.CompressedBatchEntry
         * @static
         * @param {ics23.CompressedBatchEntry} message CompressedBatchEntry
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CompressedBatchEntry.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.exist != null && message.hasOwnProperty("exist")) {
                object.exist = $root.ics23.CompressedExistenceProof.toObject(message.exist, options);
                if (options.oneofs)
                    object.proof = "exist";
            }
            if (message.nonexist != null && message.hasOwnProperty("nonexist")) {
                object.nonexist = $root.ics23.CompressedNonExistenceProof.toObject(message.nonexist, options);
                if (options.oneofs)
                    object.proof = "nonexist";
            }
            return object;
        };

        /**
         * Converts this CompressedBatchEntry to JSON.
         * @function toJSON
         * @memberof ics23.CompressedBatchEntry
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CompressedBatchEntry.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CompressedBatchEntry;
    })();

    ics23.CompressedExistenceProof = (function() {

        /**
         * Properties of a CompressedExistenceProof.
         * @memberof ics23
         * @interface ICompressedExistenceProof
         * @property {Uint8Array|null} [key] CompressedExistenceProof key
         * @property {Uint8Array|null} [value] CompressedExistenceProof value
         * @property {ics23.ILeafOp|null} [leaf] CompressedExistenceProof leaf
         * @property {Array.<number>|null} [path] CompressedExistenceProof path
         */

        /**
         * Constructs a new CompressedExistenceProof.
         * @memberof ics23
         * @classdesc Represents a CompressedExistenceProof.
         * @implements ICompressedExistenceProof
         * @constructor
         * @param {ics23.ICompressedExistenceProof=} [properties] Properties to set
         */
        function CompressedExistenceProof(properties) {
            this.path = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CompressedExistenceProof key.
         * @member {Uint8Array} key
         * @memberof ics23.CompressedExistenceProof
         * @instance
         */
        CompressedExistenceProof.prototype.key = $util.newBuffer([]);

        /**
         * CompressedExistenceProof value.
         * @member {Uint8Array} value
         * @memberof ics23.CompressedExistenceProof
         * @instance
         */
        CompressedExistenceProof.prototype.value = $util.newBuffer([]);

        /**
         * CompressedExistenceProof leaf.
         * @member {ics23.ILeafOp|null|undefined} leaf
         * @memberof ics23.CompressedExistenceProof
         * @instance
         */
        CompressedExistenceProof.prototype.leaf = null;

        /**
         * CompressedExistenceProof path.
         * @member {Array.<number>} path
         * @memberof ics23.CompressedExistenceProof
         * @instance
         */
        CompressedExistenceProof.prototype.path = $util.emptyArray;

        /**
         * Creates a new CompressedExistenceProof instance using the specified properties.
         * @function create
         * @memberof ics23.CompressedExistenceProof
         * @static
         * @param {ics23.ICompressedExistenceProof=} [properties] Properties to set
         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof instance
         */
        CompressedExistenceProof.create = function create(properties) {
            return new CompressedExistenceProof(properties);
        };

        /**
         * Encodes the specified CompressedExistenceProof message. Does not implicitly {@link ics23.CompressedExistenceProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.CompressedExistenceProof
         * @static
         * @param {ics23.ICompressedExistenceProof} message CompressedExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedExistenceProof.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key != null && message.hasOwnProperty("key"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
            if (message.value != null && message.hasOwnProperty("value"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
            if (message.leaf != null && message.hasOwnProperty("leaf"))
                $root.ics23.LeafOp.encode(message.leaf, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.path != null && message.path.length) {
                writer.uint32(/* id 4, wireType 2 =*/34).fork();
                for (var i = 0; i < message.path.length; ++i)
                    writer.int32(message.path[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified CompressedExistenceProof message, length delimited. Does not implicitly {@link ics23.CompressedExistenceProof.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.CompressedExistenceProof
         * @static
         * @param {ics23.ICompressedExistenceProof} message CompressedExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CompressedExistenceProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.CompressedExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedExistenceProof.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedExistenceProof();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.key = reader.bytes();
                    break;
                case 2:
                    message.value = reader.bytes();
                    break;
                case 3:
                    message.leaf = $root.ics23.LeafOp.decode(reader, reader.uint32());
                    break;
                case 4:
                    if (!(message.path && message.path.length))
                        message.path = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.path.push(reader.int32());
                    } else
                        message.path.push(reader.int32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CompressedExistenceProof message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.CompressedExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedExistenceProof.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CompressedExistenceProof message.
         * @function verify
         * @memberof ics23.CompressedExistenceProof
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CompressedExistenceProof.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key != null && message.hasOwnProperty("key"))
                if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                    return "key: buffer expected";
            if (message.value != null && message.hasOwnProperty("value"))
                if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                    return "value: buffer expected";
            if (message.leaf != null && message.hasOwnProperty("leaf")) {
                var error = $root.ics23.LeafOp.verify(message.leaf);
                if (error)
                    return "leaf." + error;
            }
            if (message.path != null && message.hasOwnProperty("path")) {
                if (!Array.isArray(message.path))
                    return "path: array expected";
                for (var i = 0; i < message.path.length; ++i)
                    if (!$util.isInteger(message.path[i]))
                        return "path: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a CompressedExistenceProof message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.CompressedExistenceProof
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof
         */
        CompressedExistenceProof.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.CompressedExistenceProof)
                return object;
            var message = new $root.ics23.CompressedExistenceProof();
            if (object.key != null)
                if (typeof object.key === "string")
                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                else if (object.key.length)
                    message.key = object.key;
            if (object.value != null)
                if (typeof object.value === "string")
                    $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                else if (object.value.length)
                    message.value = object.value;
            if (object.leaf != null) {
                if (typeof object.leaf !== "object")
                    throw TypeError(".ics23.CompressedExistenceProof.leaf: object expected");
                message.leaf = $root.ics23.LeafOp.fromObject(object.leaf);
            }
            if (object.path) {
                if (!Array.isArray(object.path))
                    throw TypeError(".ics23.CompressedExistenceProof.path: array expected");
                message.path = [];
                for (var i = 0; i < object.path.length; ++i)
                    message.path[i] = object.path[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a CompressedExistenceProof message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.CompressedExistenceProof
         * @static
         * @param {ics23.CompressedExistenceProof} message CompressedExistenceProof
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CompressedExistenceProof.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.path = [];
            if (options.defaults) {
                if (options.bytes === String)
                    object.key = "";
                else {
                    object.key = [];
                    if (options.bytes !== Array)
                        object.key = $util.newBuffer(object.key);
                }
                if (options.bytes === String)
                    object.value = "";
                else {
                    object.value = [];
                    if (options.bytes !== Array)
                        object.value = $util.newBuffer(object.value);
                }
                object.leaf = null;
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
            if (message.leaf != null && message.hasOwnProperty("leaf"))
                object.leaf = $root.ics23.LeafOp.toObject(message.leaf, options);
            if (message.path && message.path.length) {
                object.path = [];
                for (var j = 0; j < message.path.length; ++j)
                    object.path[j] = message.path[j];
            }
            return object;
        };

        /**
         * Converts this CompressedExistenceProof to JSON.
         * @function toJSON
         * @memberof ics23.CompressedExistenceProof
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CompressedExistenceProof.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CompressedExistenceProof;
    })();

    ics23.CompressedNonExistenceProof = (function() {

        /**
         * Properties of a CompressedNonExistenceProof.
         * @memberof ics23
         * @interface ICompressedNonExistenceProof
         * @property {Uint8Array|null} [key] CompressedNonExistenceProof key
         * @property {ics23.ICompressedExistenceProof|null} [left] CompressedNonExistenceProof left
         * @property {ics23.ICompressedExistenceProof|null} [right] CompressedNonExistenceProof right
         */

        /**
         * Constructs a new CompressedNonExistenceProof.
         * @memberof ics23
         * @classdesc Represents a CompressedNonExistenceProof.
         * @implements ICompressedNonExistenceProof
         * @constructor
         * @param {ics23.ICompressedNonExistenceProof=} [properties] Properties to set
         */
        function CompressedNonExistenceProof(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CompressedNonExistenceProof key.
         * @member {Uint8Array} key
         * @memberof ics23.CompressedNonExistenceProof
         * @instance
         */
        CompressedNonExistenceProof.prototype.key = $util.newBuffer([]);

        /**
         * CompressedNonExistenceProof left.
         * @member {ics23.ICompressedExistenceProof|null|undefined} left
         * @memberof ics23.CompressedNonExistenceProof
         * @instance
         */
        CompressedNonExistenceProof.prototype.left = null;

        /**
         * CompressedNonExistenceProof right.
         * @member {ics23.ICompressedExistenceProof|null|undefined} right
         * @memberof ics23.CompressedNonExistenceProof
         * @instance
         */
        CompressedNonExistenceProof.prototype.right = null;

        /**
         * Creates a new CompressedNonExistenceProof instance using the specified properties.
         * @function create
         * @memberof ics23.CompressedNonExistenceProof
         * @static
         * @param {ics23.ICompressedNonExistenceProof=} [properties] Properties to set
         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof instance
         */
        CompressedNonExistenceProof.create = function create(properties) {
            return new CompressedNonExistenceProof(properties);
        };

        /**
         * Encodes the specified CompressedNonExistenceProof message. Does not implicitly {@link ics23.CompressedNonExistenceProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.CompressedNonExistenceProof
         * @static
         * @param {ics23.ICompressedNonExistenceProof} message CompressedNonExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedNonExistenceProof.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key != null && message.hasOwnProperty("key"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
            if (message.left != null && message.hasOwnProperty("left"))
                $root.ics23.CompressedExistenceProof.encode(message.left, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.right != null && message.hasOwnProperty("right"))
                $root.ics23.CompressedExistenceProof.encode(message.right, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CompressedNonExistenceProof message, length delimited. Does not implicitly {@link ics23.CompressedNonExistenceProof.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.CompressedNonExistenceProof
         * @static
         * @param {ics23.ICompressedNonExistenceProof} message CompressedNonExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedNonExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CompressedNonExistenceProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.CompressedNonExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedNonExistenceProof.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedNonExistenceProof();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.key = reader.bytes();
                    break;
                case 2:
                    message.left = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.right = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CompressedNonExistenceProof message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.CompressedNonExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedNonExistenceProof.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CompressedNonExistenceProof message.
         * @function verify
         * @memberof ics23.CompressedNonExistenceProof
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CompressedNonExistenceProof.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key != null && message.hasOwnProperty("key"))
                if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                    return "key: buffer expected";
            if (message.left != null && message.hasOwnProperty("left")) {
                var error = $root.ics23.CompressedExistenceProof.verify(message.left);
                if (error)
                    return "left." + error;
            }
            if (message.right != null && message.hasOwnProperty("right")) {
                var error = $root.ics23.CompressedExistenceProof.verify(message.right);
                if (error)
                    return "right." + error;
            }
            return null;
        };

        /**
         * Creates a CompressedNonExistenceProof message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.CompressedNonExistenceProof
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof
         */
        CompressedNonExistenceProof.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.CompressedNonExistenceProof)
                return object;
            var message = new $root.ics23.CompressedNonExistenceProof();
            if (object.key != null)
                if (typeof object.key === "string")
                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                else if (object.key.length)
                    message.key = object.key;
            if (object.left != null) {
                if (typeof object.left !== "object")
                    throw TypeError(".ics23.CompressedNonExistenceProof.left: object expected");
                message.left = $root.ics23.CompressedExistenceProof.fromObject(object.left);
            }
            if (object.right != null) {
                if (typeof object.right !== "object")
                    throw TypeError(".ics23.CompressedNonExistenceProof.right: object expected");
                message.right = $root.ics23.CompressedExistenceProof.fromObject(object.right);
            }
            return message;
        };

        /**
         * Creates a plain object from a CompressedNonExistenceProof message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.CompressedNonExistenceProof
         * @static
         * @param {ics23.CompressedNonExistenceProof} message CompressedNonExistenceProof
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CompressedNonExistenceProof.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if (options.bytes === String)
                    object.key = "";
                else {
                    object.key = [];
                    if (options.bytes !== Array)
                        object.key = $util.newBuffer(object.key);
                }
                object.left = null;
                object.right = null;
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
            if (message.left != null && message.hasOwnProperty("left"))
                object.left = $root.ics23.CompressedExistenceProof.toObject(message.left, options);
            if (message.right != null && message.hasOwnProperty("right"))
                object.right = $root.ics23.CompressedExistenceProof.toObject(message.right, options);
            return object;
        };

        /**
         * Converts this CompressedNonExistenceProof to JSON.
         * @function toJSON
         * @memberof ics23.CompressedNonExistenceProof
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CompressedNonExistenceProof.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CompressedNonExistenceProof;
    })();

    return ics23;
})();

var codecimpl = $root;

var ics23 = {};

var compress$1 = {};

Object.defineProperty(compress$1, "__esModule", { value: true });
compress$1.decompress = compress$1.compress = void 0;
const codecimpl_1$2 = codecimpl;
function compress(proof) {
    if (!proof.batch) {
        return proof;
    }
    return { compressed: compressBatch(proof.batch) };
}
compress$1.compress = compress;
function decompress(proof) {
    if (!proof.compressed) {
        return proof;
    }
    return { batch: decompressBatch(proof.compressed) };
}
compress$1.decompress = decompress;
function compressBatch(proof) {
    const centries = [];
    const lookup = [];
    const registry = new Map();
    for (const entry of proof.entries) {
        if (entry.exist) {
            const centry = { exist: compressExist(entry.exist, lookup, registry) };
            centries.push(centry);
        }
        else if (entry.nonexist) {
            const non = entry.nonexist;
            const centry = {
                nonexist: {
                    key: non.key,
                    left: compressExist(non.left, lookup, registry),
                    right: compressExist(non.right, lookup, registry),
                },
            };
            centries.push(centry);
        }
        else {
            throw new Error("Unexpected batch entry during compress");
        }
    }
    return {
        entries: centries,
        lookupInners: lookup,
    };
}
function compressExist(exist, lookup, registry) {
    if (!exist) {
        return undefined;
    }
    const path = exist.path.map((inner) => {
        const sig = codecimpl_1$2.ics23.InnerOp.encode(inner).finish();
        let idx = registry.get(sig);
        if (idx === undefined) {
            idx = lookup.length;
            lookup.push(inner);
            registry.set(sig, idx);
        }
        return idx;
    });
    return {
        key: exist.key,
        value: exist.value,
        leaf: exist.leaf,
        path,
    };
}
function decompressBatch(proof) {
    const lookup = proof.lookupInners;
    const entries = proof.entries.map((comp) => {
        if (comp.exist) {
            return { exist: decompressExist(comp.exist, lookup) };
        }
        else if (comp.nonexist) {
            const non = comp.nonexist;
            return {
                nonexist: {
                    key: non.key,
                    left: decompressExist(non.left, lookup),
                    right: decompressExist(non.right, lookup),
                },
            };
        }
        else {
            throw new Error("Unexpected batch entry during compress");
        }
    });
    return {
        entries,
    };
}
function decompressExist(exist, lookup) {
    if (!exist) {
        return undefined;
    }
    const { key, value, leaf, path } = exist;
    const newPath = (path || []).map((idx) => lookup[idx]);
    return { key, value, leaf, path: newPath };
}

var proofs$1 = {};

var ops = {};

Object.defineProperty(ops, "__esModule", { value: true });
ops.doHash = ops.applyInner = ops.applyLeaf = void 0;
const ripemd160_1 = ripemd160$1;
const sha256_1 = sha256$1;
const sha512_1 = sha512$1;
const codecimpl_1$1 = codecimpl;
function applyLeaf(leaf, key, value) {
    if (key.length === 0) {
        throw new Error("Missing key");
    }
    if (value.length === 0) {
        throw new Error("Missing value");
    }
    const pkey = prepareLeafData(ensureHash(leaf.prehashKey), ensureLength(leaf.length), key);
    const pvalue = prepareLeafData(ensureHash(leaf.prehashValue), ensureLength(leaf.length), value);
    const data = new Uint8Array([
        ...ensureBytes(leaf.prefix),
        ...pkey,
        ...pvalue,
    ]);
    return doHash(ensureHash(leaf.hash), data);
}
ops.applyLeaf = applyLeaf;
function applyInner(inner, child) {
    if (child.length === 0) {
        throw new Error("Inner op needs child value");
    }
    const preimage = new Uint8Array([
        ...ensureBytes(inner.prefix),
        ...child,
        ...ensureBytes(inner.suffix),
    ]);
    return doHash(ensureHash(inner.hash), preimage);
}
ops.applyInner = applyInner;
function ensure(maybe, value) {
    return maybe === undefined || maybe === null ? value : maybe;
}
const ensureHash = (h) => ensure(h, codecimpl_1$1.ics23.HashOp.NO_HASH);
const ensureLength = (l) => ensure(l, codecimpl_1$1.ics23.LengthOp.NO_PREFIX);
const ensureBytes = (b) => ensure(b, new Uint8Array([]));
function prepareLeafData(hashOp, lengthOp, data) {
    const h = doHashOrNoop(hashOp, data);
    return doLengthOp(lengthOp, h);
}
// doHashOrNoop will return the preimage untouched if hashOp == NONE,
// otherwise, perform doHash
function doHashOrNoop(hashOp, preimage) {
    if (hashOp === codecimpl_1$1.ics23.HashOp.NO_HASH) {
        return preimage;
    }
    return doHash(hashOp, preimage);
}
// doHash will preform the specified hash on the preimage.
// if hashOp == NONE, it will return an error (use doHashOrNoop if you want different behavior)
function doHash(hashOp, preimage) {
    switch (hashOp) {
        case codecimpl_1$1.ics23.HashOp.SHA256:
            return (0, sha256_1.sha256)(preimage);
        case codecimpl_1$1.ics23.HashOp.SHA512:
            return (0, sha512_1.sha512)(preimage);
        case codecimpl_1$1.ics23.HashOp.RIPEMD160:
            return (0, ripemd160_1.ripemd160)(preimage);
        case codecimpl_1$1.ics23.HashOp.BITCOIN:
            return (0, ripemd160_1.ripemd160)((0, sha256_1.sha256)(preimage));
        case codecimpl_1$1.ics23.HashOp.SHA512_256:
            return (0, sha512_1.sha512_256)(preimage);
    }
    throw new Error(`Unsupported hashop: ${hashOp}`);
}
ops.doHash = doHash;
// doLengthOp will calculate the proper prefix and return it prepended
//   doLengthOp(op, data) -> length(data) || data
function doLengthOp(lengthOp, data) {
    switch (lengthOp) {
        case codecimpl_1$1.ics23.LengthOp.NO_PREFIX:
            return data;
        case codecimpl_1$1.ics23.LengthOp.VAR_PROTO:
            return new Uint8Array([...encodeVarintProto(data.length), ...data]);
        case codecimpl_1$1.ics23.LengthOp.REQUIRE_32_BYTES:
            if (data.length !== 32) {
                throw new Error(`Length is ${data.length}, not 32 bytes`);
            }
            return data;
        case codecimpl_1$1.ics23.LengthOp.REQUIRE_64_BYTES:
            if (data.length !== 64) {
                throw new Error(`Length is ${data.length}, not 64 bytes`);
            }
            return data;
        case codecimpl_1$1.ics23.LengthOp.FIXED32_LITTLE:
            return new Uint8Array([...encodeFixed32Le(data.length), ...data]);
        // TODO
        // case LengthOp_VAR_RLP:
        // case LengthOp_FIXED32_BIG:
        // case LengthOp_FIXED64_BIG:
        // case LengthOp_FIXED64_LITTLE:
    }
    throw new Error(`Unsupported lengthop: ${lengthOp}`);
}
function encodeVarintProto(n) {
    let enc = [];
    let l = n;
    while (l >= 128) {
        const b = (l % 128) + 128;
        enc = [...enc, b];
        l = l / 128;
    }
    enc = [...enc, l];
    return new Uint8Array(enc);
}
function encodeFixed32Le(n) {
    const enc = new Uint8Array(4);
    let l = n;
    for (let i = enc.length; i > 0; i--) {
        enc[Math.abs(i - enc.length)] = l % 256;
        l = Math.floor(l / 256);
    }
    return enc;
}

var specs = {};

Object.defineProperty(specs, "__esModule", { value: true });
specs.bytesBefore = specs.ensureBytesBefore = specs.bytesEqual = specs.ensureBytesEqual = specs.ensureInner = specs.ensureLeaf = void 0;
function ensureLeaf(leaf, spec) {
    if (leaf.hash !== spec.hash) {
        throw new Error(`Unexpected hashOp: ${leaf.hash}`);
    }
    if (leaf.prehashKey !== spec.prehashKey) {
        throw new Error(`Unexpected prehashKey: ${leaf.prehashKey}`);
    }
    if (leaf.prehashValue !== spec.prehashValue) {
        throw new Error(`Unexpected prehashValue: ${leaf.prehashValue}`);
    }
    if (leaf.length !== spec.length) {
        throw new Error(`Unexpected length op: ${leaf.length}`);
    }
    ensurePrefix(leaf.prefix, spec.prefix);
}
specs.ensureLeaf = ensureLeaf;
function ensureInner(inner, prefix, spec) {
    if (inner.hash !== spec.hash) {
        throw new Error(`Unexpected hashOp: ${inner.hash}`);
    }
    if (!inner.prefix) {
        throw new Error("No prefix set for inner node");
    }
    if (hasPrefix(inner.prefix, prefix)) {
        throw new Error(`Inner node has leaf prefix`);
    }
    if (inner.prefix.length < (spec.minPrefixLength || 0)) {
        throw new Error(`Prefix too short: ${inner.prefix.length} bytes`);
    }
    const maxLeftChildBytes = (spec.childOrder.length - 1) * spec.childSize;
    if (inner.prefix.length > (spec.maxPrefixLength || 0) + maxLeftChildBytes) {
        throw new Error(`Prefix too long: ${inner.prefix.length} bytes`);
    }
}
specs.ensureInner = ensureInner;
function ensurePrefix(check, prefix) {
    // no prefix supplied, means everything passes
    if (!prefix || prefix.length === 0) {
        return;
    }
    if (!check) {
        throw new Error(`Target bytes missing`);
    }
    ensureBytesEqual(prefix, check.slice(0, prefix.length));
}
// ensureBytesEqual throws an error if the arrays are different
function ensureBytesEqual(a, b) {
    if (a.length !== b.length) {
        throw new Error(`Different lengths ${a.length} vs ${b.length}`);
    }
    for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
            throw new Error(`Arrays differ at index ${i}: ${a[i]} vs ${b[i]}`);
        }
    }
}
specs.ensureBytesEqual = ensureBytesEqual;
function bytesEqual(a, b) {
    if (a.length !== b.length) {
        return false;
    }
    for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
            return false;
        }
    }
    return true;
}
specs.bytesEqual = bytesEqual;
function hasPrefix(check, prefix) {
    // no prefix supplied, means everything passes
    if (!prefix || prefix.length === 0) {
        return false;
    }
    if (!check) {
        return false;
    }
    if (check.length <= prefix.length) {
        return false;
    }
    for (let i = 0; i < prefix.length; i++) {
        if (check[i] !== prefix[i]) {
            return false;
        }
    }
    throw true;
}
// ensureBytesBefore throws an error if first >= last
// we compare byte by byte
function ensureBytesBefore(first, last) {
    if (!bytesBefore(first, last)) {
        throw new Error("first is after last");
    }
}
specs.ensureBytesBefore = ensureBytesBefore;
function bytesBefore(first, last) {
    const min = first.length < last.length ? first.length : last.length;
    for (let i = 0; i < min; i++) {
        if (first[i] < last[i]) {
            return true;
        }
        if (first[i] > last[i]) {
            return false;
        }
        // if they are equal, continue to next step
    }
    // if they match, ensure that last is longer than first..
    return first.length < last.length;
}
specs.bytesBefore = bytesBefore;

Object.defineProperty(proofs$1, "__esModule", { value: true });
proofs$1.ensureLeftNeighbor = proofs$1.ensureSpec = proofs$1.calculateExistenceRoot = proofs$1.verifyNonExistence = proofs$1.verifyExistence = proofs$1.smtSpec = proofs$1.tendermintSpec = proofs$1.iavlSpec = void 0;
const codecimpl_1 = codecimpl;
const ops_1 = ops;
const specs_1$1 = specs;
proofs$1.iavlSpec = {
    leafSpec: {
        prefix: Uint8Array.from([0]),
        hash: codecimpl_1.ics23.HashOp.SHA256,
        prehashValue: codecimpl_1.ics23.HashOp.SHA256,
        prehashKey: codecimpl_1.ics23.HashOp.NO_HASH,
        length: codecimpl_1.ics23.LengthOp.VAR_PROTO,
    },
    innerSpec: {
        childOrder: [0, 1],
        minPrefixLength: 4,
        maxPrefixLength: 12,
        childSize: 33,
        hash: codecimpl_1.ics23.HashOp.SHA256,
    },
};
proofs$1.tendermintSpec = {
    leafSpec: {
        prefix: Uint8Array.from([0]),
        hash: codecimpl_1.ics23.HashOp.SHA256,
        prehashValue: codecimpl_1.ics23.HashOp.SHA256,
        prehashKey: codecimpl_1.ics23.HashOp.NO_HASH,
        length: codecimpl_1.ics23.LengthOp.VAR_PROTO,
    },
    innerSpec: {
        childOrder: [0, 1],
        minPrefixLength: 1,
        maxPrefixLength: 1,
        childSize: 32,
        hash: codecimpl_1.ics23.HashOp.SHA256,
    },
};
proofs$1.smtSpec = {
    leafSpec: {
        hash: codecimpl_1.ics23.HashOp.SHA256,
        prehashKey: codecimpl_1.ics23.HashOp.NO_HASH,
        prehashValue: codecimpl_1.ics23.HashOp.SHA256,
        length: codecimpl_1.ics23.LengthOp.NO_PREFIX,
        prefix: Uint8Array.from([0]),
    },
    innerSpec: {
        childOrder: [0, 1],
        childSize: 32,
        minPrefixLength: 1,
        maxPrefixLength: 1,
        emptyChild: new Uint8Array(32),
        hash: codecimpl_1.ics23.HashOp.SHA256,
    },
    maxDepth: 256,
};
// verifyExistence will throw an error if the proof doesn't link key, value -> root
// or if it doesn't fulfill the spec
function verifyExistence(proof, spec, root, key, value) {
    ensureSpec(proof, spec);
    const calc = calculateExistenceRoot(proof);
    (0, specs_1$1.ensureBytesEqual)(calc, root);
    (0, specs_1$1.ensureBytesEqual)(key, proof.key);
    (0, specs_1$1.ensureBytesEqual)(value, proof.value);
}
proofs$1.verifyExistence = verifyExistence;
// Verify does all checks to ensure the proof has valid non-existence proofs,
// and they ensure the given key is not in the CommitmentState,
// throwing an error if there is an issue
function verifyNonExistence(proof, spec, root, key) {
    let leftKey;
    let rightKey;
    if (proof.left) {
        verifyExistence(proof.left, spec, root, proof.left.key, proof.left.value);
        leftKey = proof.left.key;
    }
    if (proof.right) {
        verifyExistence(proof.right, spec, root, proof.right.key, proof.right.value);
        rightKey = proof.right.key;
    }
    if (!leftKey && !rightKey) {
        throw new Error("neither left nor right proof defined");
    }
    if (leftKey) {
        (0, specs_1$1.ensureBytesBefore)(leftKey, key);
    }
    if (rightKey) {
        (0, specs_1$1.ensureBytesBefore)(key, rightKey);
    }
    if (!spec.innerSpec) {
        throw new Error("no inner spec");
    }
    if (!leftKey) {
        ensureLeftMost(spec.innerSpec, proof.right.path);
    }
    else if (!rightKey) {
        ensureRightMost(spec.innerSpec, proof.left.path);
    }
    else {
        ensureLeftNeighbor(spec.innerSpec, proof.left.path, proof.right.path);
    }
    return;
}
proofs$1.verifyNonExistence = verifyNonExistence;
// Calculate determines the root hash that matches the given proof.
// You must validate the result is what you have in a header.
// Returns error if the calculations cannot be performed.
function calculateExistenceRoot(proof) {
    if (!proof.key || !proof.value) {
        throw new Error("Existence proof needs key and value set");
    }
    if (!proof.leaf) {
        throw new Error("Existence proof must start with a leaf operation");
    }
    const path = proof.path || [];
    let res = (0, ops_1.applyLeaf)(proof.leaf, proof.key, proof.value);
    for (const inner of path) {
        res = (0, ops_1.applyInner)(inner, res);
    }
    return res;
}
proofs$1.calculateExistenceRoot = calculateExistenceRoot;
// ensureSpec throws an Error if proof doesn't fulfill spec
function ensureSpec(proof, spec) {
    if (!proof.leaf) {
        throw new Error("Existence proof must start with a leaf operation");
    }
    if (!spec.leafSpec) {
        throw new Error("Spec must include leafSpec");
    }
    if (!spec.innerSpec) {
        throw new Error("Spec must include innerSpec");
    }
    (0, specs_1$1.ensureLeaf)(proof.leaf, spec.leafSpec);
    const path = proof.path || [];
    if (spec.minDepth && path.length < spec.minDepth) {
        throw new Error(`Too few inner nodes ${path.length}`);
    }
    if (spec.maxDepth && path.length > spec.maxDepth) {
        throw new Error(`Too many inner nodes ${path.length}`);
    }
    for (const inner of path) {
        (0, specs_1$1.ensureInner)(inner, spec.leafSpec.prefix, spec.innerSpec);
    }
}
proofs$1.ensureSpec = ensureSpec;
function ensureLeftMost(spec, path) {
    const { minPrefix, maxPrefix, suffix } = getPadding(spec, 0);
    // ensure every step has a prefix and suffix defined to be leftmost
    for (const step of path) {
        if (!hasPadding(step, minPrefix, maxPrefix, suffix)) {
            throw new Error("Step not leftmost");
        }
    }
}
function ensureRightMost(spec, path) {
    const len = spec.childOrder.length - 1;
    const { minPrefix, maxPrefix, suffix } = getPadding(spec, len);
    // ensure every step has a prefix and suffix defined to be leftmost
    for (const step of path) {
        if (!hasPadding(step, minPrefix, maxPrefix, suffix)) {
            throw new Error("Step not leftmost");
        }
    }
}
function ensureLeftNeighbor(spec, left, right) {
    const mutleft = [...left];
    const mutright = [...right];
    let topleft = mutleft.pop();
    let topright = mutright.pop();
    while ((0, specs_1$1.bytesEqual)(topleft.prefix, topright.prefix) &&
        (0, specs_1$1.bytesEqual)(topleft.suffix, topright.suffix)) {
        topleft = mutleft.pop();
        topright = mutright.pop();
    }
    // now topleft and topright are the first divergent nodes
    // make sure they are left and right of each other
    if (!isLeftStep(spec, topleft, topright)) {
        throw new Error(`Not left neightbor at first divergent step`);
    }
    // make sure the paths are left and right most possibilities respectively
    ensureRightMost(spec, mutleft);
    ensureLeftMost(spec, mutright);
}
proofs$1.ensureLeftNeighbor = ensureLeftNeighbor;
// isLeftStep assumes left and right have common parents
// checks if left is exactly one slot to the left of right
function isLeftStep(spec, left, right) {
    const leftidx = orderFromPadding(spec, left);
    const rightidx = orderFromPadding(spec, right);
    return rightidx === leftidx + 1;
}
function orderFromPadding(spec, inner) {
    for (let branch = 0; branch < spec.childOrder.length; branch++) {
        const { minPrefix, maxPrefix, suffix } = getPadding(spec, branch);
        if (hasPadding(inner, minPrefix, maxPrefix, suffix)) {
            return branch;
        }
    }
    throw new Error(`Cannot find any valid spacing for this node`);
}
function hasPadding(op, minPrefix, maxPrefix, suffix) {
    if ((op.prefix || []).length < minPrefix) {
        return false;
    }
    if ((op.prefix || []).length > maxPrefix) {
        return false;
    }
    return (op.suffix || []).length === suffix;
}
function getPadding(spec, branch) {
    const idx = getPosition(spec.childOrder, branch);
    // count how many children are in the prefix
    const prefix = idx * spec.childSize;
    const minPrefix = prefix + spec.minPrefixLength;
    const maxPrefix = prefix + spec.maxPrefixLength;
    // count how many children are in the suffix
    const suffix = (spec.childOrder.length - 1 - idx) * spec.childSize;
    return { minPrefix, maxPrefix, suffix };
}
function getPosition(order, branch) {
    if (branch < 0 || branch >= order.length) {
        throw new Error(`Invalid branch: ${branch}`);
    }
    return order.findIndex((val) => val === branch);
}

Object.defineProperty(ics23, "__esModule", { value: true });
ics23.batchVerifyNonMembership = ics23.batchVerifyMembership = ics23.verifyNonMembership = ics23.verifyMembership = void 0;
const compress_1 = compress$1;
const proofs_1$1 = proofs$1;
const specs_1 = specs;
/*
This implements the client side functions as specified in
https://github.com/cosmos/ics/tree/master/spec/ics-023-vector-commitments

In particular:

  // Assumes ExistenceProof
  type verifyMembership = (root: CommitmentRoot, proof: CommitmentProof, key: Key, value: Value) => boolean

  // Assumes NonExistenceProof
  type verifyNonMembership = (root: CommitmentRoot, proof: CommitmentProof, key: Key) => boolean

  // Assumes BatchProof - required ExistenceProofs may be a subset of all items proven
  type batchVerifyMembership = (root: CommitmentRoot, proof: CommitmentProof, items: Map<Key, Value>) => boolean

  // Assumes BatchProof - required NonExistenceProofs may be a subset of all items proven
  type batchVerifyNonMembership = (root: CommitmentRoot, proof: CommitmentProof, keys: Set<Key>) => boolean

We make an adjustment to accept a Spec to ensure the provided proof is in the format of the expected merkle store.
This can avoid an range of attacks on fake preimages, as we need to be careful on how to map key, value -> leaf
and determine neighbors
*/
/**
 * verifyMembership ensures proof is (contains) a valid existence proof for the given
 */
function verifyMembership(proof, spec, root, key, value) {
    const norm = (0, compress_1.decompress)(proof);
    const exist = getExistForKey(norm, key);
    if (!exist) {
        return false;
    }
    try {
        (0, proofs_1$1.verifyExistence)(exist, spec, root, key, value);
        return true;
    }
    catch (_a) {
        return false;
    }
}
ics23.verifyMembership = verifyMembership;
/**
 * verifyNonMembership ensures proof is (contains) a valid non-existence proof for the given key
 */
function verifyNonMembership(proof, spec, root, key) {
    const norm = (0, compress_1.decompress)(proof);
    const nonexist = getNonExistForKey(norm, key);
    if (!nonexist) {
        return false;
    }
    try {
        (0, proofs_1$1.verifyNonExistence)(nonexist, spec, root, key);
        return true;
    }
    catch (_a) {
        return false;
    }
}
ics23.verifyNonMembership = verifyNonMembership;
/**
 * batchVerifyMembership ensures proof is (contains) a valid existence proof for the given
 */
function batchVerifyMembership(proof, spec, root, items) {
    const norm = (0, compress_1.decompress)(proof);
    for (const [key, value] of items.entries()) {
        if (!verifyMembership(norm, spec, root, key, value)) {
            return false;
        }
    }
    return true;
}
ics23.batchVerifyMembership = batchVerifyMembership;
/**
 * batchVerifyNonMembership ensures proof is (contains) a valid existence proof for the given
 */
function batchVerifyNonMembership(proof, spec, root, keys) {
    const norm = (0, compress_1.decompress)(proof);
    for (const key of keys) {
        if (!verifyNonMembership(norm, spec, root, key)) {
            return false;
        }
    }
    return true;
}
ics23.batchVerifyNonMembership = batchVerifyNonMembership;
function getExistForKey(proof, key) {
    const match = (p) => !!p && (0, specs_1.bytesEqual)(key, p.key);
    if (match(proof.exist)) {
        return proof.exist;
    }
    else if (proof.batch) {
        return proof.batch.entries.map((x) => x.exist || null).find(match);
    }
    return undefined;
}
function getNonExistForKey(proof, key) {
    const match = (p) => {
        return (!!p &&
            (!p.left || (0, specs_1.bytesBefore)(p.left.key, key)) &&
            (!p.right || (0, specs_1.bytesBefore)(key, p.right.key)));
    };
    if (match(proof.nonexist)) {
        return proof.nonexist;
    }
    else if (proof.batch) {
        return proof.batch.entries.map((x) => x.nonexist || null).find(match);
    }
    return undefined;
}

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.verifyNonExistence = exports.verifyExistence = exports.tendermintSpec = exports.iavlSpec = exports.calculateExistenceRoot = exports.verifyNonMembership = exports.verifyMembership = exports.ics23 = void 0;
	var codecimpl_1 = codecimpl;
	Object.defineProperty(exports, "ics23", { enumerable: true, get: function () { return codecimpl_1.ics23; } });
	var ics23_1 = ics23;
	Object.defineProperty(exports, "verifyMembership", { enumerable: true, get: function () { return ics23_1.verifyMembership; } });
	Object.defineProperty(exports, "verifyNonMembership", { enumerable: true, get: function () { return ics23_1.verifyNonMembership; } });
	var proofs_1 = proofs$1;
	Object.defineProperty(exports, "calculateExistenceRoot", { enumerable: true, get: function () { return proofs_1.calculateExistenceRoot; } });
	Object.defineProperty(exports, "iavlSpec", { enumerable: true, get: function () { return proofs_1.iavlSpec; } });
	Object.defineProperty(exports, "tendermintSpec", { enumerable: true, get: function () { return proofs_1.tendermintSpec; } });
	Object.defineProperty(exports, "verifyExistence", { enumerable: true, get: function () { return proofs_1.verifyExistence; } });
	Object.defineProperty(exports, "verifyNonExistence", { enumerable: true, get: function () { return proofs_1.verifyNonExistence; } });
	
} (build$4));

var build$3 = {};

var concat$4 = {};

var xstream = {};

var ponyfill$1 = {};

(function (exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports['default'] = symbolObservablePonyfill;
	function symbolObservablePonyfill(root) {
		var result;
		var _Symbol = root.Symbol;

		if (typeof _Symbol === 'function') {
			if (_Symbol.observable) {
				result = _Symbol.observable;
			} else {

				// This just needs to be something that won't trample other user's Symbol.for use
				// It also will guide people to the source of their issues, if this is problematic.
				// META: It's a resource locator!
				result = _Symbol['for']('https://github.com/benlesh/symbol-observable');
				try {
					_Symbol.observable = result;
				} catch (err) {
					// Do nothing. In some environments, users have frozen `Symbol` for security reasons,
					// if it is frozen assigning to it will throw. In this case, we don't care, because
					// they will need to use the returned value from the ponyfill.
				}
			}
		} else {
			result = '@@observable';
		}

		return result;
	}} (ponyfill$1));

var ponyfill = ponyfill$1;

var toStr$2 = Object.prototype.toString;

var isArguments = function isArguments(value) {
	var str = toStr$2.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr$2.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

var implementation$5;
var hasRequiredImplementation;

function requireImplementation () {
	if (hasRequiredImplementation) return implementation$5;
	hasRequiredImplementation = 1;

	var keysShim;
	if (!Object.keys) {
		// modified from https://github.com/es-shims/es5-shim
		var has = Object.prototype.hasOwnProperty;
		var toStr = Object.prototype.toString;
		var isArgs = isArguments; // eslint-disable-line global-require
		var isEnumerable = Object.prototype.propertyIsEnumerable;
		var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
		var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
		var dontEnums = [
			'toString',
			'toLocaleString',
			'valueOf',
			'hasOwnProperty',
			'isPrototypeOf',
			'propertyIsEnumerable',
			'constructor'
		];
		var equalsConstructorPrototype = function (o) {
			var ctor = o.constructor;
			return ctor && ctor.prototype === o;
		};
		var excludedKeys = {
			$applicationCache: true,
			$console: true,
			$external: true,
			$frame: true,
			$frameElement: true,
			$frames: true,
			$innerHeight: true,
			$innerWidth: true,
			$onmozfullscreenchange: true,
			$onmozfullscreenerror: true,
			$outerHeight: true,
			$outerWidth: true,
			$pageXOffset: true,
			$pageYOffset: true,
			$parent: true,
			$scrollLeft: true,
			$scrollTop: true,
			$scrollX: true,
			$scrollY: true,
			$self: true,
			$webkitIndexedDB: true,
			$webkitStorageInfo: true,
			$window: true
		};
		var hasAutomationEqualityBug = (function () {
			/* global window */
			if (typeof window === 'undefined') { return false; }
			for (var k in window) {
				try {
					if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
						try {
							equalsConstructorPrototype(window[k]);
						} catch (e) {
							return true;
						}
					}
				} catch (e) {
					return true;
				}
			}
			return false;
		}());
		var equalsConstructorPrototypeIfNotBuggy = function (o) {
			/* global window */
			if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
				return equalsConstructorPrototype(o);
			}
			try {
				return equalsConstructorPrototype(o);
			} catch (e) {
				return false;
			}
		};

		keysShim = function keys(object) {
			var isObject = object !== null && typeof object === 'object';
			var isFunction = toStr.call(object) === '[object Function]';
			var isArguments = isArgs(object);
			var isString = isObject && toStr.call(object) === '[object String]';
			var theKeys = [];

			if (!isObject && !isFunction && !isArguments) {
				throw new TypeError('Object.keys called on a non-object');
			}

			var skipProto = hasProtoEnumBug && isFunction;
			if (isString && object.length > 0 && !has.call(object, 0)) {
				for (var i = 0; i < object.length; ++i) {
					theKeys.push(String(i));
				}
			}

			if (isArguments && object.length > 0) {
				for (var j = 0; j < object.length; ++j) {
					theKeys.push(String(j));
				}
			} else {
				for (var name in object) {
					if (!(skipProto && name === 'prototype') && has.call(object, name)) {
						theKeys.push(String(name));
					}
				}
			}

			if (hasDontEnumBug) {
				var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

				for (var k = 0; k < dontEnums.length; ++k) {
					if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
						theKeys.push(dontEnums[k]);
					}
				}
			}
			return theKeys;
		};
	}
	implementation$5 = keysShim;
	return implementation$5;
}

var slice$1 = Array.prototype.slice;
var isArgs = isArguments;

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : requireImplementation();

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice$1.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

var objectKeys = keysShim;

/* eslint complexity: [2, 18], max-statements: [2, 33] */
var shams = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = shams;

var hasSymbols$2 = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr$1 = Object.prototype.toString;
var funcType = '[object Function]';

var implementation$4 = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr$1.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

var implementation$3 = implementation$4;

var functionBind = Function.prototype.bind || implementation$3;

var bind$4 = functionBind;

var src$1 = bind$4.call(Function.call, Object.prototype.hasOwnProperty);

var undefined$1;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols$1 = hasSymbols$2();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols$1 ? getProto([][Symbol.iterator]()) : undefined$1,
	'%AsyncFromSyncIteratorPrototype%': undefined$1,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined$1 : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined$1 : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols$1 ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
	'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$1 ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$1 ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols$1 ? getProto(''[Symbol.iterator]()) : undefined$1,
	'%Symbol%': hasSymbols$1 ? Symbol : undefined$1,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
};

try {
	null.error; // eslint-disable-line no-unused-expressions
} catch (e) {
	// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
	var errorProto = getProto(getProto(e));
	INTRINSICS['%Error.prototype%'] = errorProto;
}

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind$3 = functionBind;
var hasOwn = src$1;
var $concat = bind$3.call(Function.call, Array.prototype.concat);
var $spliceApply = bind$3.call(Function.apply, Array.prototype.splice);
var $replace = bind$3.call(Function.call, String.prototype.replace);
var $strSlice = bind$3.call(Function.call, String.prototype.slice);
var $exec = bind$3.call(Function.call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

var getIntrinsic = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined$1;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

var GetIntrinsic = getIntrinsic;

var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

var hasPropertyDescriptors$1 = function hasPropertyDescriptors() {
	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
			return true;
		} catch (e) {
			// IE 8 has a broken defineProperty
			return false;
		}
	}
	return false;
};

hasPropertyDescriptors$1.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
	// node v0.6 has a bug where array lengths can be Set but not Defined
	if (!hasPropertyDescriptors$1()) {
		return null;
	}
	try {
		return $defineProperty([], 'length', { value: 1 }).length !== 1;
	} catch (e) {
		// In Firefox 4-22, defining length on an array throws an exception.
		return true;
	}
};

var hasPropertyDescriptors_1 = hasPropertyDescriptors$1;

var keys$1 = objectKeys;
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat$3 = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction$1 = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var hasPropertyDescriptors = hasPropertyDescriptors_1();

var supportsDescriptors = origDefineProperty && hasPropertyDescriptors;

var defineProperty = function (object, name, value, predicate) {
	if (name in object) {
		if (predicate === true) {
			if (object[name] === value) {
				return;
			}
		} else if (!isFunction$1(predicate) || !predicate()) {
			return;
		}
	}
	if (supportsDescriptors) {
		origDefineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value; // eslint-disable-line no-param-reassign
	}
};

var defineProperties$1 = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys$1(map);
	if (hasSymbols) {
		props = concat$3.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties$1.supportsDescriptors = !!supportsDescriptors;

var defineProperties_1 = defineProperties$1;

var implementation$2 = commonjsGlobal;

var implementation$1 = implementation$2;

var polyfill$1 = function getPolyfill() {
	if (typeof commonjsGlobal !== 'object' || !commonjsGlobal || commonjsGlobal.Math !== Math || commonjsGlobal.Array !== Array) {
		return implementation$1;
	}
	return commonjsGlobal;
};

var define = defineProperties_1;
var getPolyfill$1 = polyfill$1;

var shim$1 = function shimGlobal() {
	var polyfill = getPolyfill$1();
	if (define.supportsDescriptors) {
		var descriptor = Object.getOwnPropertyDescriptor(polyfill, 'globalThis');
		if (!descriptor || (descriptor.configurable && (descriptor.enumerable || !descriptor.writable || globalThis !== polyfill))) { // eslint-disable-line max-len
			Object.defineProperty(polyfill, 'globalThis', {
				configurable: true,
				enumerable: false,
				value: polyfill,
				writable: true
			});
		}
	} else if (typeof globalThis !== 'object' || globalThis !== polyfill) {
		polyfill.globalThis = polyfill;
	}
	return polyfill;
};

var defineProperties = defineProperties_1;

var implementation = implementation$2;
var getPolyfill = polyfill$1;
var shim = shim$1;

var polyfill = getPolyfill();

var getGlobal = function () { return polyfill; };

defineProperties(getGlobal, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

var globalthis = getGlobal;

var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(xstream, "__esModule", { value: true });
xstream.NO_IL = xstream.NO = xstream.MemoryStream = xstream.Stream = void 0;
var ponyfill_1 = ponyfill;
var globalthis_1 = globalthis;
var $$observable = ponyfill_1.default(globalthis_1.getPolyfill());
var NO = {};
xstream.NO = NO;
function noop() { }
function cp(a) {
    var l = a.length;
    var b = Array(l);
    for (var i = 0; i < l; ++i)
        b[i] = a[i];
    return b;
}
function and(f1, f2) {
    return function andFn(t) {
        return f1(t) && f2(t);
    };
}
function _try(c, t, u) {
    try {
        return c.f(t);
    }
    catch (e) {
        u._e(e);
        return NO;
    }
}
var NO_IL = {
    _n: noop,
    _e: noop,
    _c: noop,
};
xstream.NO_IL = NO_IL;
// mutates the input
function internalizeProducer(producer) {
    producer._start = function _start(il) {
        il.next = il._n;
        il.error = il._e;
        il.complete = il._c;
        this.start(il);
    };
    producer._stop = producer.stop;
}
var StreamSub = /** @class */ (function () {
    function StreamSub(_stream, _listener) {
        this._stream = _stream;
        this._listener = _listener;
    }
    StreamSub.prototype.unsubscribe = function () {
        this._stream._remove(this._listener);
    };
    return StreamSub;
}());
var Observer = /** @class */ (function () {
    function Observer(_listener) {
        this._listener = _listener;
    }
    Observer.prototype.next = function (value) {
        this._listener._n(value);
    };
    Observer.prototype.error = function (err) {
        this._listener._e(err);
    };
    Observer.prototype.complete = function () {
        this._listener._c();
    };
    return Observer;
}());
var FromObservable = /** @class */ (function () {
    function FromObservable(observable) {
        this.type = 'fromObservable';
        this.ins = observable;
        this.active = false;
    }
    FromObservable.prototype._start = function (out) {
        this.out = out;
        this.active = true;
        this._sub = this.ins.subscribe(new Observer(out));
        if (!this.active)
            this._sub.unsubscribe();
    };
    FromObservable.prototype._stop = function () {
        if (this._sub)
            this._sub.unsubscribe();
        this.active = false;
    };
    return FromObservable;
}());
var Merge = /** @class */ (function () {
    function Merge(insArr) {
        this.type = 'merge';
        this.insArr = insArr;
        this.out = NO;
        this.ac = 0;
    }
    Merge.prototype._start = function (out) {
        this.out = out;
        var s = this.insArr;
        var L = s.length;
        this.ac = L;
        for (var i = 0; i < L; i++)
            s[i]._add(this);
    };
    Merge.prototype._stop = function () {
        var s = this.insArr;
        var L = s.length;
        for (var i = 0; i < L; i++)
            s[i]._remove(this);
        this.out = NO;
    };
    Merge.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        u._n(t);
    };
    Merge.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Merge.prototype._c = function () {
        if (--this.ac <= 0) {
            var u = this.out;
            if (u === NO)
                return;
            u._c();
        }
    };
    return Merge;
}());
var CombineListener = /** @class */ (function () {
    function CombineListener(i, out, p) {
        this.i = i;
        this.out = out;
        this.p = p;
        p.ils.push(this);
    }
    CombineListener.prototype._n = function (t) {
        var p = this.p, out = this.out;
        if (out === NO)
            return;
        if (p.up(t, this.i)) {
            var b = cp(p.vals);
            out._n(b);
        }
    };
    CombineListener.prototype._e = function (err) {
        var out = this.out;
        if (out === NO)
            return;
        out._e(err);
    };
    CombineListener.prototype._c = function () {
        var p = this.p;
        if (p.out === NO)
            return;
        if (--p.Nc === 0)
            p.out._c();
    };
    return CombineListener;
}());
var Combine = /** @class */ (function () {
    function Combine(insArr) {
        this.type = 'combine';
        this.insArr = insArr;
        this.out = NO;
        this.ils = [];
        this.Nc = this.Nn = 0;
        this.vals = [];
    }
    Combine.prototype.up = function (t, i) {
        var v = this.vals[i];
        var Nn = !this.Nn ? 0 : v === NO ? --this.Nn : this.Nn;
        this.vals[i] = t;
        return Nn === 0;
    };
    Combine.prototype._start = function (out) {
        this.out = out;
        var s = this.insArr;
        var n = this.Nc = this.Nn = s.length;
        var vals = this.vals = new Array(n);
        if (n === 0) {
            out._n([]);
            out._c();
        }
        else {
            for (var i = 0; i < n; i++) {
                vals[i] = NO;
                s[i]._add(new CombineListener(i, out, this));
            }
        }
    };
    Combine.prototype._stop = function () {
        var s = this.insArr;
        var n = s.length;
        var ils = this.ils;
        for (var i = 0; i < n; i++)
            s[i]._remove(ils[i]);
        this.out = NO;
        this.ils = [];
        this.vals = [];
    };
    return Combine;
}());
var FromArray = /** @class */ (function () {
    function FromArray(a) {
        this.type = 'fromArray';
        this.a = a;
    }
    FromArray.prototype._start = function (out) {
        var a = this.a;
        for (var i = 0, n = a.length; i < n; i++)
            out._n(a[i]);
        out._c();
    };
    FromArray.prototype._stop = function () {
    };
    return FromArray;
}());
var FromPromise = /** @class */ (function () {
    function FromPromise(p) {
        this.type = 'fromPromise';
        this.on = false;
        this.p = p;
    }
    FromPromise.prototype._start = function (out) {
        var prod = this;
        this.on = true;
        this.p.then(function (v) {
            if (prod.on) {
                out._n(v);
                out._c();
            }
        }, function (e) {
            out._e(e);
        }).then(noop, function (err) {
            setTimeout(function () { throw err; });
        });
    };
    FromPromise.prototype._stop = function () {
        this.on = false;
    };
    return FromPromise;
}());
var Periodic = /** @class */ (function () {
    function Periodic(period) {
        this.type = 'periodic';
        this.period = period;
        this.intervalID = -1;
        this.i = 0;
    }
    Periodic.prototype._start = function (out) {
        var self = this;
        function intervalHandler() { out._n(self.i++); }
        this.intervalID = setInterval(intervalHandler, this.period);
    };
    Periodic.prototype._stop = function () {
        if (this.intervalID !== -1)
            clearInterval(this.intervalID);
        this.intervalID = -1;
        this.i = 0;
    };
    return Periodic;
}());
var Debug = /** @class */ (function () {
    function Debug(ins, arg) {
        this.type = 'debug';
        this.ins = ins;
        this.out = NO;
        this.s = noop;
        this.l = '';
        if (typeof arg === 'string')
            this.l = arg;
        else if (typeof arg === 'function')
            this.s = arg;
    }
    Debug.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    Debug.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
    };
    Debug.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        var s = this.s, l = this.l;
        if (s !== noop) {
            try {
                s(t);
            }
            catch (e) {
                u._e(e);
            }
        }
        else if (l)
            console.log(l + ':', t);
        else
            console.log(t);
        u._n(t);
    };
    Debug.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Debug.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return Debug;
}());
var Drop = /** @class */ (function () {
    function Drop(max, ins) {
        this.type = 'drop';
        this.ins = ins;
        this.out = NO;
        this.max = max;
        this.dropped = 0;
    }
    Drop.prototype._start = function (out) {
        this.out = out;
        this.dropped = 0;
        this.ins._add(this);
    };
    Drop.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
    };
    Drop.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        if (this.dropped++ >= this.max)
            u._n(t);
    };
    Drop.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Drop.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return Drop;
}());
var EndWhenListener = /** @class */ (function () {
    function EndWhenListener(out, op) {
        this.out = out;
        this.op = op;
    }
    EndWhenListener.prototype._n = function () {
        this.op.end();
    };
    EndWhenListener.prototype._e = function (err) {
        this.out._e(err);
    };
    EndWhenListener.prototype._c = function () {
        this.op.end();
    };
    return EndWhenListener;
}());
var EndWhen = /** @class */ (function () {
    function EndWhen(o, ins) {
        this.type = 'endWhen';
        this.ins = ins;
        this.out = NO;
        this.o = o;
        this.oil = NO_IL;
    }
    EndWhen.prototype._start = function (out) {
        this.out = out;
        this.o._add(this.oil = new EndWhenListener(out, this));
        this.ins._add(this);
    };
    EndWhen.prototype._stop = function () {
        this.ins._remove(this);
        this.o._remove(this.oil);
        this.out = NO;
        this.oil = NO_IL;
    };
    EndWhen.prototype.end = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    EndWhen.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        u._n(t);
    };
    EndWhen.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    EndWhen.prototype._c = function () {
        this.end();
    };
    return EndWhen;
}());
var Filter = /** @class */ (function () {
    function Filter(passes, ins) {
        this.type = 'filter';
        this.ins = ins;
        this.out = NO;
        this.f = passes;
    }
    Filter.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    Filter.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
    };
    Filter.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        var r = _try(this, t, u);
        if (r === NO || !r)
            return;
        u._n(t);
    };
    Filter.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Filter.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return Filter;
}());
var FlattenListener = /** @class */ (function () {
    function FlattenListener(out, op) {
        this.out = out;
        this.op = op;
    }
    FlattenListener.prototype._n = function (t) {
        this.out._n(t);
    };
    FlattenListener.prototype._e = function (err) {
        this.out._e(err);
    };
    FlattenListener.prototype._c = function () {
        this.op.inner = NO;
        this.op.less();
    };
    return FlattenListener;
}());
var Flatten = /** @class */ (function () {
    function Flatten(ins) {
        this.type = 'flatten';
        this.ins = ins;
        this.out = NO;
        this.open = true;
        this.inner = NO;
        this.il = NO_IL;
    }
    Flatten.prototype._start = function (out) {
        this.out = out;
        this.open = true;
        this.inner = NO;
        this.il = NO_IL;
        this.ins._add(this);
    };
    Flatten.prototype._stop = function () {
        this.ins._remove(this);
        if (this.inner !== NO)
            this.inner._remove(this.il);
        this.out = NO;
        this.open = true;
        this.inner = NO;
        this.il = NO_IL;
    };
    Flatten.prototype.less = function () {
        var u = this.out;
        if (u === NO)
            return;
        if (!this.open && this.inner === NO)
            u._c();
    };
    Flatten.prototype._n = function (s) {
        var u = this.out;
        if (u === NO)
            return;
        var _a = this, inner = _a.inner, il = _a.il;
        if (inner !== NO && il !== NO_IL)
            inner._remove(il);
        (this.inner = s)._add(this.il = new FlattenListener(u, this));
    };
    Flatten.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Flatten.prototype._c = function () {
        this.open = false;
        this.less();
    };
    return Flatten;
}());
var Fold = /** @class */ (function () {
    function Fold(f, seed, ins) {
        var _this = this;
        this.type = 'fold';
        this.ins = ins;
        this.out = NO;
        this.f = function (t) { return f(_this.acc, t); };
        this.acc = this.seed = seed;
    }
    Fold.prototype._start = function (out) {
        this.out = out;
        this.acc = this.seed;
        out._n(this.acc);
        this.ins._add(this);
    };
    Fold.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
        this.acc = this.seed;
    };
    Fold.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        var r = _try(this, t, u);
        if (r === NO)
            return;
        u._n(this.acc = r);
    };
    Fold.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Fold.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return Fold;
}());
var Last = /** @class */ (function () {
    function Last(ins) {
        this.type = 'last';
        this.ins = ins;
        this.out = NO;
        this.has = false;
        this.val = NO;
    }
    Last.prototype._start = function (out) {
        this.out = out;
        this.has = false;
        this.ins._add(this);
    };
    Last.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
        this.val = NO;
    };
    Last.prototype._n = function (t) {
        this.has = true;
        this.val = t;
    };
    Last.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Last.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        if (this.has) {
            u._n(this.val);
            u._c();
        }
        else
            u._e(new Error('last() failed because input stream completed'));
    };
    return Last;
}());
var MapOp = /** @class */ (function () {
    function MapOp(project, ins) {
        this.type = 'map';
        this.ins = ins;
        this.out = NO;
        this.f = project;
    }
    MapOp.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    MapOp.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
    };
    MapOp.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        var r = _try(this, t, u);
        if (r === NO)
            return;
        u._n(r);
    };
    MapOp.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    MapOp.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return MapOp;
}());
var Remember = /** @class */ (function () {
    function Remember(ins) {
        this.type = 'remember';
        this.ins = ins;
        this.out = NO;
    }
    Remember.prototype._start = function (out) {
        this.out = out;
        this.ins._add(out);
    };
    Remember.prototype._stop = function () {
        this.ins._remove(this.out);
        this.out = NO;
    };
    return Remember;
}());
var ReplaceError = /** @class */ (function () {
    function ReplaceError(replacer, ins) {
        this.type = 'replaceError';
        this.ins = ins;
        this.out = NO;
        this.f = replacer;
    }
    ReplaceError.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    ReplaceError.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
    };
    ReplaceError.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        u._n(t);
    };
    ReplaceError.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        try {
            this.ins._remove(this);
            (this.ins = this.f(err))._add(this);
        }
        catch (e) {
            u._e(e);
        }
    };
    ReplaceError.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return ReplaceError;
}());
var StartWith = /** @class */ (function () {
    function StartWith(ins, val) {
        this.type = 'startWith';
        this.ins = ins;
        this.out = NO;
        this.val = val;
    }
    StartWith.prototype._start = function (out) {
        this.out = out;
        this.out._n(this.val);
        this.ins._add(out);
    };
    StartWith.prototype._stop = function () {
        this.ins._remove(this.out);
        this.out = NO;
    };
    return StartWith;
}());
var Take = /** @class */ (function () {
    function Take(max, ins) {
        this.type = 'take';
        this.ins = ins;
        this.out = NO;
        this.max = max;
        this.taken = 0;
    }
    Take.prototype._start = function (out) {
        this.out = out;
        this.taken = 0;
        if (this.max <= 0)
            out._c();
        else
            this.ins._add(this);
    };
    Take.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
    };
    Take.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        var m = ++this.taken;
        if (m < this.max)
            u._n(t);
        else if (m === this.max) {
            u._n(t);
            u._c();
        }
    };
    Take.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Take.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return Take;
}());
var Stream = /** @class */ (function () {
    function Stream(producer) {
        this._prod = producer || NO;
        this._ils = [];
        this._stopID = NO;
        this._dl = NO;
        this._d = false;
        this._target = null;
        this._err = NO;
    }
    Stream.prototype._n = function (t) {
        var a = this._ils;
        var L = a.length;
        if (this._d)
            this._dl._n(t);
        if (L == 1)
            a[0]._n(t);
        else if (L == 0)
            return;
        else {
            var b = cp(a);
            for (var i = 0; i < L; i++)
                b[i]._n(t);
        }
    };
    Stream.prototype._e = function (err) {
        if (this._err !== NO)
            return;
        this._err = err;
        var a = this._ils;
        var L = a.length;
        this._x();
        if (this._d)
            this._dl._e(err);
        if (L == 1)
            a[0]._e(err);
        else if (L == 0)
            return;
        else {
            var b = cp(a);
            for (var i = 0; i < L; i++)
                b[i]._e(err);
        }
        if (!this._d && L == 0)
            throw this._err;
    };
    Stream.prototype._c = function () {
        var a = this._ils;
        var L = a.length;
        this._x();
        if (this._d)
            this._dl._c();
        if (L == 1)
            a[0]._c();
        else if (L == 0)
            return;
        else {
            var b = cp(a);
            for (var i = 0; i < L; i++)
                b[i]._c();
        }
    };
    Stream.prototype._x = function () {
        if (this._ils.length === 0)
            return;
        if (this._prod !== NO)
            this._prod._stop();
        this._err = NO;
        this._ils = [];
    };
    Stream.prototype._stopNow = function () {
        // WARNING: code that calls this method should
        // first check if this._prod is valid (not `NO`)
        this._prod._stop();
        this._err = NO;
        this._stopID = NO;
    };
    Stream.prototype._add = function (il) {
        var ta = this._target;
        if (ta)
            return ta._add(il);
        var a = this._ils;
        a.push(il);
        if (a.length > 1)
            return;
        if (this._stopID !== NO) {
            clearTimeout(this._stopID);
            this._stopID = NO;
        }
        else {
            var p = this._prod;
            if (p !== NO)
                p._start(this);
        }
    };
    Stream.prototype._remove = function (il) {
        var _this = this;
        var ta = this._target;
        if (ta)
            return ta._remove(il);
        var a = this._ils;
        var i = a.indexOf(il);
        if (i > -1) {
            a.splice(i, 1);
            if (this._prod !== NO && a.length <= 0) {
                this._err = NO;
                this._stopID = setTimeout(function () { return _this._stopNow(); });
            }
            else if (a.length === 1) {
                this._pruneCycles();
            }
        }
    };
    // If all paths stemming from `this` stream eventually end at `this`
    // stream, then we remove the single listener of `this` stream, to
    // force it to end its execution and dispose resources. This method
    // assumes as a precondition that this._ils has just one listener.
    Stream.prototype._pruneCycles = function () {
        if (this._hasNoSinks(this, []))
            this._remove(this._ils[0]);
    };
    // Checks whether *there is no* path starting from `x` that leads to an end
    // listener (sink) in the stream graph, following edges A->B where B is a
    // listener of A. This means these paths constitute a cycle somehow. Is given
    // a trace of all visited nodes so far.
    Stream.prototype._hasNoSinks = function (x, trace) {
        if (trace.indexOf(x) !== -1)
            return true;
        else if (x.out === this)
            return true;
        else if (x.out && x.out !== NO)
            return this._hasNoSinks(x.out, trace.concat(x));
        else if (x._ils) {
            for (var i = 0, N = x._ils.length; i < N; i++)
                if (!this._hasNoSinks(x._ils[i], trace.concat(x)))
                    return false;
            return true;
        }
        else
            return false;
    };
    Stream.prototype.ctor = function () {
        return this instanceof MemoryStream ? MemoryStream : Stream;
    };
    /**
     * Adds a Listener to the Stream.
     *
     * @param {Listener} listener
     */
    Stream.prototype.addListener = function (listener) {
        listener._n = listener.next || noop;
        listener._e = listener.error || noop;
        listener._c = listener.complete || noop;
        this._add(listener);
    };
    /**
     * Removes a Listener from the Stream, assuming the Listener was added to it.
     *
     * @param {Listener<T>} listener
     */
    Stream.prototype.removeListener = function (listener) {
        this._remove(listener);
    };
    /**
     * Adds a Listener to the Stream returning a Subscription to remove that
     * listener.
     *
     * @param {Listener} listener
     * @returns {Subscription}
     */
    Stream.prototype.subscribe = function (listener) {
        this.addListener(listener);
        return new StreamSub(this, listener);
    };
    /**
     * Add interop between most.js and RxJS 5
     *
     * @returns {Stream}
     */
    Stream.prototype[$$observable] = function () {
        return this;
    };
    /**
     * Creates a new Stream given a Producer.
     *
     * @factory true
     * @param {Producer} producer An optional Producer that dictates how to
     * start, generate events, and stop the Stream.
     * @return {Stream}
     */
    Stream.create = function (producer) {
        if (producer) {
            if (typeof producer.start !== 'function'
                || typeof producer.stop !== 'function')
                throw new Error('producer requires both start and stop functions');
            internalizeProducer(producer); // mutates the input
        }
        return new Stream(producer);
    };
    /**
     * Creates a new MemoryStream given a Producer.
     *
     * @factory true
     * @param {Producer} producer An optional Producer that dictates how to
     * start, generate events, and stop the Stream.
     * @return {MemoryStream}
     */
    Stream.createWithMemory = function (producer) {
        if (producer)
            internalizeProducer(producer); // mutates the input
        return new MemoryStream(producer);
    };
    /**
     * Creates a Stream that does nothing when started. It never emits any event.
     *
     * Marble diagram:
     *
     * ```text
     *          never
     * -----------------------
     * ```
     *
     * @factory true
     * @return {Stream}
     */
    Stream.never = function () {
        return new Stream({ _start: noop, _stop: noop });
    };
    /**
     * Creates a Stream that immediately emits the "complete" notification when
     * started, and that's it.
     *
     * Marble diagram:
     *
     * ```text
     * empty
     * -|
     * ```
     *
     * @factory true
     * @return {Stream}
     */
    Stream.empty = function () {
        return new Stream({
            _start: function (il) { il._c(); },
            _stop: noop,
        });
    };
    /**
     * Creates a Stream that immediately emits an "error" notification with the
     * value you passed as the `error` argument when the stream starts, and that's
     * it.
     *
     * Marble diagram:
     *
     * ```text
     * throw(X)
     * -X
     * ```
     *
     * @factory true
     * @param error The error event to emit on the created stream.
     * @return {Stream}
     */
    Stream.throw = function (error) {
        return new Stream({
            _start: function (il) { il._e(error); },
            _stop: noop,
        });
    };
    /**
     * Creates a stream from an Array, Promise, or an Observable.
     *
     * @factory true
     * @param {Array|PromiseLike|Observable} input The input to make a stream from.
     * @return {Stream}
     */
    Stream.from = function (input) {
        if (typeof input[$$observable] === 'function')
            return Stream.fromObservable(input);
        else if (typeof input.then === 'function')
            return Stream.fromPromise(input);
        else if (Array.isArray(input))
            return Stream.fromArray(input);
        throw new TypeError("Type of input to from() must be an Array, Promise, or Observable");
    };
    /**
     * Creates a Stream that immediately emits the arguments that you give to
     * *of*, then completes.
     *
     * Marble diagram:
     *
     * ```text
     * of(1,2,3)
     * 123|
     * ```
     *
     * @factory true
     * @param a The first value you want to emit as an event on the stream.
     * @param b The second value you want to emit as an event on the stream. One
     * or more of these values may be given as arguments.
     * @return {Stream}
     */
    Stream.of = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        return Stream.fromArray(items);
    };
    /**
     * Converts an array to a stream. The returned stream will emit synchronously
     * all the items in the array, and then complete.
     *
     * Marble diagram:
     *
     * ```text
     * fromArray([1,2,3])
     * 123|
     * ```
     *
     * @factory true
     * @param {Array} array The array to be converted as a stream.
     * @return {Stream}
     */
    Stream.fromArray = function (array) {
        return new Stream(new FromArray(array));
    };
    /**
     * Converts a promise to a stream. The returned stream will emit the resolved
     * value of the promise, and then complete. However, if the promise is
     * rejected, the stream will emit the corresponding error.
     *
     * Marble diagram:
     *
     * ```text
     * fromPromise( ----42 )
     * -----------------42|
     * ```
     *
     * @factory true
     * @param {PromiseLike} promise The promise to be converted as a stream.
     * @return {Stream}
     */
    Stream.fromPromise = function (promise) {
        return new Stream(new FromPromise(promise));
    };
    /**
     * Converts an Observable into a Stream.
     *
     * @factory true
     * @param {any} observable The observable to be converted as a stream.
     * @return {Stream}
     */
    Stream.fromObservable = function (obs) {
        if (obs.endWhen !== undefined)
            return obs;
        var o = typeof obs[$$observable] === 'function' ? obs[$$observable]() : obs;
        return new Stream(new FromObservable(o));
    };
    /**
     * Creates a stream that periodically emits incremental numbers, every
     * `period` milliseconds.
     *
     * Marble diagram:
     *
     * ```text
     *     periodic(1000)
     * ---0---1---2---3---4---...
     * ```
     *
     * @factory true
     * @param {number} period The interval in milliseconds to use as a rate of
     * emission.
     * @return {Stream}
     */
    Stream.periodic = function (period) {
        return new Stream(new Periodic(period));
    };
    Stream.prototype._map = function (project) {
        return new (this.ctor())(new MapOp(project, this));
    };
    /**
     * Transforms each event from the input Stream through a `project` function,
     * to get a Stream that emits those transformed events.
     *
     * Marble diagram:
     *
     * ```text
     * --1---3--5-----7------
     *    map(i => i * 10)
     * --10--30-50----70-----
     * ```
     *
     * @param {Function} project A function of type `(t: T) => U` that takes event
     * `t` of type `T` from the input Stream and produces an event of type `U`, to
     * be emitted on the output Stream.
     * @return {Stream}
     */
    Stream.prototype.map = function (project) {
        return this._map(project);
    };
    /**
     * It's like `map`, but transforms each input event to always the same
     * constant value on the output Stream.
     *
     * Marble diagram:
     *
     * ```text
     * --1---3--5-----7-----
     *       mapTo(10)
     * --10--10-10----10----
     * ```
     *
     * @param projectedValue A value to emit on the output Stream whenever the
     * input Stream emits any value.
     * @return {Stream}
     */
    Stream.prototype.mapTo = function (projectedValue) {
        var s = this.map(function () { return projectedValue; });
        var op = s._prod;
        op.type = 'mapTo';
        return s;
    };
    /**
     * Only allows events that pass the test given by the `passes` argument.
     *
     * Each event from the input stream is given to the `passes` function. If the
     * function returns `true`, the event is forwarded to the output stream,
     * otherwise it is ignored and not forwarded.
     *
     * Marble diagram:
     *
     * ```text
     * --1---2--3-----4-----5---6--7-8--
     *     filter(i => i % 2 === 0)
     * ------2--------4---------6----8--
     * ```
     *
     * @param {Function} passes A function of type `(t: T) => boolean` that takes
     * an event from the input stream and checks if it passes, by returning a
     * boolean.
     * @return {Stream}
     */
    Stream.prototype.filter = function (passes) {
        var p = this._prod;
        if (p instanceof Filter)
            return new Stream(new Filter(and(p.f, passes), p.ins));
        return new Stream(new Filter(passes, this));
    };
    /**
     * Lets the first `amount` many events from the input stream pass to the
     * output stream, then makes the output stream complete.
     *
     * Marble diagram:
     *
     * ```text
     * --a---b--c----d---e--
     *    take(3)
     * --a---b--c|
     * ```
     *
     * @param {number} amount How many events to allow from the input stream
     * before completing the output stream.
     * @return {Stream}
     */
    Stream.prototype.take = function (amount) {
        return new (this.ctor())(new Take(amount, this));
    };
    /**
     * Ignores the first `amount` many events from the input stream, and then
     * after that starts forwarding events from the input stream to the output
     * stream.
     *
     * Marble diagram:
     *
     * ```text
     * --a---b--c----d---e--
     *       drop(3)
     * --------------d---e--
     * ```
     *
     * @param {number} amount How many events to ignore from the input stream
     * before forwarding all events from the input stream to the output stream.
     * @return {Stream}
     */
    Stream.prototype.drop = function (amount) {
        return new Stream(new Drop(amount, this));
    };
    /**
     * When the input stream completes, the output stream will emit the last event
     * emitted by the input stream, and then will also complete.
     *
     * Marble diagram:
     *
     * ```text
     * --a---b--c--d----|
     *       last()
     * -----------------d|
     * ```
     *
     * @return {Stream}
     */
    Stream.prototype.last = function () {
        return new Stream(new Last(this));
    };
    /**
     * Prepends the given `initial` value to the sequence of events emitted by the
     * input stream. The returned stream is a MemoryStream, which means it is
     * already `remember()`'d.
     *
     * Marble diagram:
     *
     * ```text
     * ---1---2-----3---
     *   startWith(0)
     * 0--1---2-----3---
     * ```
     *
     * @param initial The value or event to prepend.
     * @return {MemoryStream}
     */
    Stream.prototype.startWith = function (initial) {
        return new MemoryStream(new StartWith(this, initial));
    };
    /**
     * Uses another stream to determine when to complete the current stream.
     *
     * When the given `other` stream emits an event or completes, the output
     * stream will complete. Before that happens, the output stream will behaves
     * like the input stream.
     *
     * Marble diagram:
     *
     * ```text
     * ---1---2-----3--4----5----6---
     *   endWhen( --------a--b--| )
     * ---1---2-----3--4--|
     * ```
     *
     * @param other Some other stream that is used to know when should the output
     * stream of this operator complete.
     * @return {Stream}
     */
    Stream.prototype.endWhen = function (other) {
        return new (this.ctor())(new EndWhen(other, this));
    };
    /**
     * "Folds" the stream onto itself.
     *
     * Combines events from the past throughout
     * the entire execution of the input stream, allowing you to accumulate them
     * together. It's essentially like `Array.prototype.reduce`. The returned
     * stream is a MemoryStream, which means it is already `remember()`'d.
     *
     * The output stream starts by emitting the `seed` which you give as argument.
     * Then, when an event happens on the input stream, it is combined with that
     * seed value through the `accumulate` function, and the output value is
     * emitted on the output stream. `fold` remembers that output value as `acc`
     * ("accumulator"), and then when a new input event `t` happens, `acc` will be
     * combined with that to produce the new `acc` and so forth.
     *
     * Marble diagram:
     *
     * ```text
     * ------1-----1--2----1----1------
     *   fold((acc, x) => acc + x, 3)
     * 3-----4-----5--7----8----9------
     * ```
     *
     * @param {Function} accumulate A function of type `(acc: R, t: T) => R` that
     * takes the previous accumulated value `acc` and the incoming event from the
     * input stream and produces the new accumulated value.
     * @param seed The initial accumulated value, of type `R`.
     * @return {MemoryStream}
     */
    Stream.prototype.fold = function (accumulate, seed) {
        return new MemoryStream(new Fold(accumulate, seed, this));
    };
    /**
     * Replaces an error with another stream.
     *
     * When (and if) an error happens on the input stream, instead of forwarding
     * that error to the output stream, *replaceError* will call the `replace`
     * function which returns the stream that the output stream will replicate.
     * And, in case that new stream also emits an error, `replace` will be called
     * again to get another stream to start replicating.
     *
     * Marble diagram:
     *
     * ```text
     * --1---2-----3--4-----X
     *   replaceError( () => --10--| )
     * --1---2-----3--4--------10--|
     * ```
     *
     * @param {Function} replace A function of type `(err) => Stream` that takes
     * the error that occurred on the input stream or on the previous replacement
     * stream and returns a new stream. The output stream will behave like the
     * stream that this function returns.
     * @return {Stream}
     */
    Stream.prototype.replaceError = function (replace) {
        return new (this.ctor())(new ReplaceError(replace, this));
    };
    /**
     * Flattens a "stream of streams", handling only one nested stream at a time
     * (no concurrency).
     *
     * If the input stream is a stream that emits streams, then this operator will
     * return an output stream which is a flat stream: emits regular events. The
     * flattening happens without concurrency. It works like this: when the input
     * stream emits a nested stream, *flatten* will start imitating that nested
     * one. However, as soon as the next nested stream is emitted on the input
     * stream, *flatten* will forget the previous nested one it was imitating, and
     * will start imitating the new nested one.
     *
     * Marble diagram:
     *
     * ```text
     * --+--------+---------------
     *   \        \
     *    \       ----1----2---3--
     *    --a--b----c----d--------
     *           flatten
     * -----a--b------1----2---3--
     * ```
     *
     * @return {Stream}
     */
    Stream.prototype.flatten = function () {
        return new Stream(new Flatten(this));
    };
    /**
     * Passes the input stream to a custom operator, to produce an output stream.
     *
     * *compose* is a handy way of using an existing function in a chained style.
     * Instead of writing `outStream = f(inStream)` you can write
     * `outStream = inStream.compose(f)`.
     *
     * @param {function} operator A function that takes a stream as input and
     * returns a stream as well.
     * @return {Stream}
     */
    Stream.prototype.compose = function (operator) {
        return operator(this);
    };
    /**
     * Returns an output stream that behaves like the input stream, but also
     * remembers the most recent event that happens on the input stream, so that a
     * newly added listener will immediately receive that memorised event.
     *
     * @return {MemoryStream}
     */
    Stream.prototype.remember = function () {
        return new MemoryStream(new Remember(this));
    };
    /**
     * Returns an output stream that identically behaves like the input stream,
     * but also runs a `spy` function for each event, to help you debug your app.
     *
     * *debug* takes a `spy` function as argument, and runs that for each event
     * happening on the input stream. If you don't provide the `spy` argument,
     * then *debug* will just `console.log` each event. This helps you to
     * understand the flow of events through some operator chain.
     *
     * Please note that if the output stream has no listeners, then it will not
     * start, which means `spy` will never run because no actual event happens in
     * that case.
     *
     * Marble diagram:
     *
     * ```text
     * --1----2-----3-----4--
     *         debug
     * --1----2-----3-----4--
     * ```
     *
     * @param {function} labelOrSpy A string to use as the label when printing
     * debug information on the console, or a 'spy' function that takes an event
     * as argument, and does not need to return anything.
     * @return {Stream}
     */
    Stream.prototype.debug = function (labelOrSpy) {
        return new (this.ctor())(new Debug(this, labelOrSpy));
    };
    /**
     * *imitate* changes this current Stream to emit the same events that the
     * `other` given Stream does. This method returns nothing.
     *
     * This method exists to allow one thing: **circular dependency of streams**.
     * For instance, let's imagine that for some reason you need to create a
     * circular dependency where stream `first$` depends on stream `second$`
     * which in turn depends on `first$`:
     *
     * <!-- skip-example -->
     * ```js
     * import delay from 'xstream/extra/delay'
     *
     * var first$ = second$.map(x => x * 10).take(3);
     * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));
     * ```
     *
     * However, that is invalid JavaScript, because `second$` is undefined
     * on the first line. This is how *imitate* can help solve it:
     *
     * ```js
     * import delay from 'xstream/extra/delay'
     *
     * var secondProxy$ = xs.create();
     * var first$ = secondProxy$.map(x => x * 10).take(3);
     * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));
     * secondProxy$.imitate(second$);
     * ```
     *
     * We create `secondProxy$` before the others, so it can be used in the
     * declaration of `first$`. Then, after both `first$` and `second$` are
     * defined, we hook `secondProxy$` with `second$` with `imitate()` to tell
     * that they are "the same". `imitate` will not trigger the start of any
     * stream, it just binds `secondProxy$` and `second$` together.
     *
     * The following is an example where `imitate()` is important in Cycle.js
     * applications. A parent component contains some child components. A child
     * has an action stream which is given to the parent to define its state:
     *
     * <!-- skip-example -->
     * ```js
     * const childActionProxy$ = xs.create();
     * const parent = Parent({...sources, childAction$: childActionProxy$});
     * const childAction$ = parent.state$.map(s => s.child.action$).flatten();
     * childActionProxy$.imitate(childAction$);
     * ```
     *
     * Note, though, that **`imitate()` does not support MemoryStreams**. If we
     * would attempt to imitate a MemoryStream in a circular dependency, we would
     * either get a race condition (where the symptom would be "nothing happens")
     * or an infinite cyclic emission of values. It's useful to think about
     * MemoryStreams as cells in a spreadsheet. It doesn't make any sense to
     * define a spreadsheet cell `A1` with a formula that depends on `B1` and
     * cell `B1` defined with a formula that depends on `A1`.
     *
     * If you find yourself wanting to use `imitate()` with a
     * MemoryStream, you should rework your code around `imitate()` to use a
     * Stream instead. Look for the stream in the circular dependency that
     * represents an event stream, and that would be a candidate for creating a
     * proxy Stream which then imitates the target Stream.
     *
     * @param {Stream} target The other stream to imitate on the current one. Must
     * not be a MemoryStream.
     */
    Stream.prototype.imitate = function (target) {
        if (target instanceof MemoryStream)
            throw new Error('A MemoryStream was given to imitate(), but it only ' +
                'supports a Stream. Read more about this restriction here: ' +
                'https://github.com/staltz/xstream#faq');
        this._target = target;
        for (var ils = this._ils, N = ils.length, i = 0; i < N; i++)
            target._add(ils[i]);
        this._ils = [];
    };
    /**
     * Forces the Stream to emit the given value to its listeners.
     *
     * As the name indicates, if you use this, you are most likely doing something
     * The Wrong Way. Please try to understand the reactive way before using this
     * method. Use it only when you know what you are doing.
     *
     * @param value The "next" value you want to broadcast to all listeners of
     * this Stream.
     */
    Stream.prototype.shamefullySendNext = function (value) {
        this._n(value);
    };
    /**
     * Forces the Stream to emit the given error to its listeners.
     *
     * As the name indicates, if you use this, you are most likely doing something
     * The Wrong Way. Please try to understand the reactive way before using this
     * method. Use it only when you know what you are doing.
     *
     * @param {any} error The error you want to broadcast to all the listeners of
     * this Stream.
     */
    Stream.prototype.shamefullySendError = function (error) {
        this._e(error);
    };
    /**
     * Forces the Stream to emit the "completed" event to its listeners.
     *
     * As the name indicates, if you use this, you are most likely doing something
     * The Wrong Way. Please try to understand the reactive way before using this
     * method. Use it only when you know what you are doing.
     */
    Stream.prototype.shamefullySendComplete = function () {
        this._c();
    };
    /**
     * Adds a "debug" listener to the stream. There can only be one debug
     * listener, that's why this is 'setDebugListener'. To remove the debug
     * listener, just call setDebugListener(null).
     *
     * A debug listener is like any other listener. The only difference is that a
     * debug listener is "stealthy": its presence/absence does not trigger the
     * start/stop of the stream (or the producer inside the stream). This is
     * useful so you can inspect what is going on without changing the behavior
     * of the program. If you have an idle stream and you add a normal listener to
     * it, the stream will start executing. But if you set a debug listener on an
     * idle stream, it won't start executing (not until the first normal listener
     * is added).
     *
     * As the name indicates, we don't recommend using this method to build app
     * logic. In fact, in most cases the debug operator works just fine. Only use
     * this one if you know what you're doing.
     *
     * @param {Listener<T>} listener
     */
    Stream.prototype.setDebugListener = function (listener) {
        if (!listener) {
            this._d = false;
            this._dl = NO;
        }
        else {
            this._d = true;
            listener._n = listener.next || noop;
            listener._e = listener.error || noop;
            listener._c = listener.complete || noop;
            this._dl = listener;
        }
    };
    /**
     * Blends multiple streams together, emitting events from all of them
     * concurrently.
     *
     * *merge* takes multiple streams as arguments, and creates a stream that
     * behaves like each of the argument streams, in parallel.
     *
     * Marble diagram:
     *
     * ```text
     * --1----2-----3--------4---
     * ----a-----b----c---d------
     *            merge
     * --1-a--2--b--3-c---d--4---
     * ```
     *
     * @factory true
     * @param {Stream} stream1 A stream to merge together with other streams.
     * @param {Stream} stream2 A stream to merge together with other streams. Two
     * or more streams may be given as arguments.
     * @return {Stream}
     */
    Stream.merge = function merge() {
        var streams = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            streams[_i] = arguments[_i];
        }
        return new Stream(new Merge(streams));
    };
    /**
     * Combines multiple input streams together to return a stream whose events
     * are arrays that collect the latest events from each input stream.
     *
     * *combine* internally remembers the most recent event from each of the input
     * streams. When any of the input streams emits an event, that event together
     * with all the other saved events are combined into an array. That array will
     * be emitted on the output stream. It's essentially a way of joining together
     * the events from multiple streams.
     *
     * Marble diagram:
     *
     * ```text
     * --1----2-----3--------4---
     * ----a-----b-----c--d------
     *          combine
     * ----1a-2a-2b-3b-3c-3d-4d--
     * ```
     *
     * @factory true
     * @param {Stream} stream1 A stream to combine together with other streams.
     * @param {Stream} stream2 A stream to combine together with other streams.
     * Multiple streams, not just two, may be given as arguments.
     * @return {Stream}
     */
    Stream.combine = function combine() {
        var streams = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            streams[_i] = arguments[_i];
        }
        return new Stream(new Combine(streams));
    };
    return Stream;
}());
xstream.Stream = Stream;
var MemoryStream = /** @class */ (function (_super) {
    __extends(MemoryStream, _super);
    function MemoryStream(producer) {
        var _this = _super.call(this, producer) || this;
        _this._has = false;
        return _this;
    }
    MemoryStream.prototype._n = function (x) {
        this._v = x;
        this._has = true;
        _super.prototype._n.call(this, x);
    };
    MemoryStream.prototype._add = function (il) {
        var ta = this._target;
        if (ta)
            return ta._add(il);
        var a = this._ils;
        a.push(il);
        if (a.length > 1) {
            if (this._has)
                il._n(this._v);
            return;
        }
        if (this._stopID !== NO) {
            if (this._has)
                il._n(this._v);
            clearTimeout(this._stopID);
            this._stopID = NO;
        }
        else if (this._has)
            il._n(this._v);
        else {
            var p = this._prod;
            if (p !== NO)
                p._start(this);
        }
    };
    MemoryStream.prototype._stopNow = function () {
        this._has = false;
        _super.prototype._stopNow.call(this);
    };
    MemoryStream.prototype._x = function () {
        this._has = false;
        _super.prototype._x.call(this);
    };
    MemoryStream.prototype.map = function (project) {
        return this._map(project);
    };
    MemoryStream.prototype.mapTo = function (projectedValue) {
        return _super.prototype.mapTo.call(this, projectedValue);
    };
    MemoryStream.prototype.take = function (amount) {
        return _super.prototype.take.call(this, amount);
    };
    MemoryStream.prototype.endWhen = function (other) {
        return _super.prototype.endWhen.call(this, other);
    };
    MemoryStream.prototype.replaceError = function (replace) {
        return _super.prototype.replaceError.call(this, replace);
    };
    MemoryStream.prototype.remember = function () {
        return this;
    };
    MemoryStream.prototype.debug = function (labelOrSpy) {
        return _super.prototype.debug.call(this, labelOrSpy);
    };
    return MemoryStream;
}(Stream));
xstream.MemoryStream = MemoryStream;
var xs = Stream;
xstream.default = xs;

Object.defineProperty(concat$4, "__esModule", { value: true });
concat$4.concat = void 0;
const xstream_1$5 = xstream;
/**
 * An implementation of concat that buffers all source stream events
 *
 * Marble diagram:
 *
 * ```text
 * --1--2---3---4-|
 * -a--b-c--d-|
 * --------X---------Y---------Z-
 *           concat
 * --1--2---3---4-abcdXY-------Z-
 * ```
 *
 * This is inspired by RxJS's concat as documented at http://rxmarbles.com/#concat and behaves
 * differently than xstream's concat as discussed in https://github.com/staltz/xstream/issues/170.
 *
 */
function concat$2(...streams) {
    const subscriptions = new Array();
    const queues = new Array(); // one queue per stream
    const completedStreams = new Set();
    let activeStreamIndex = 0;
    function reset() {
        while (subscriptions.length > 0) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const subscription = subscriptions.shift();
            subscription.unsubscribe();
        }
        queues.length = 0;
        completedStreams.clear();
        activeStreamIndex = 0;
    }
    const producer = {
        start: (listener) => {
            streams.forEach((_) => queues.push([]));
            function emitAllQueuesEvents(streamIndex) {
                // eslint-disable-next-line no-constant-condition
                while (true) {
                    const element = queues[streamIndex].shift();
                    if (element === undefined) {
                        return;
                    }
                    listener.next(element);
                }
            }
            function isDone() {
                return activeStreamIndex >= streams.length;
            }
            if (isDone()) {
                listener.complete();
                return;
            }
            streams.forEach((stream, index) => {
                subscriptions.push(stream.subscribe({
                    next: (value) => {
                        if (index === activeStreamIndex) {
                            listener.next(value);
                        }
                        else {
                            queues[index].push(value);
                        }
                    },
                    complete: () => {
                        completedStreams.add(index);
                        while (completedStreams.has(activeStreamIndex)) {
                            // this stream completed: emit all and move on
                            emitAllQueuesEvents(activeStreamIndex);
                            activeStreamIndex++;
                        }
                        if (isDone()) {
                            listener.complete();
                        }
                        else {
                            // now active stream can have some events queued but did not yet complete
                            emitAllQueuesEvents(activeStreamIndex);
                        }
                    },
                    error: (error) => {
                        listener.error(error);
                        reset();
                    },
                }));
            });
        },
        stop: () => {
            reset();
        },
    };
    return xstream_1$5.Stream.create(producer);
}
concat$4.concat = concat$2;

var defaultvalueproducer = {};

Object.defineProperty(defaultvalueproducer, "__esModule", { value: true });
defaultvalueproducer.DefaultValueProducer = void 0;
// allows pre-producing values before anyone is listening
class DefaultValueProducer {
    constructor(value, callbacks) {
        this.callbacks = callbacks;
        this.internalValue = value;
    }
    get value() {
        return this.internalValue;
    }
    /**
     * Update the current value.
     *
     * If producer is active (i.e. someone is listening), this emits an event.
     * If not, just the current value is updated.
     */
    update(value) {
        this.internalValue = value;
        if (this.listener) {
            this.listener.next(value);
        }
    }
    /**
     * Produce an error
     */
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    error(error) {
        if (this.listener) {
            this.listener.error(error);
        }
    }
    /**
     * Called by the stream. Do not call this directly.
     */
    start(listener) {
        this.listener = listener;
        listener.next(this.internalValue);
        if (this.callbacks) {
            this.callbacks.onStarted();
        }
    }
    /**
     * Called by the stream. Do not call this directly.
     */
    stop() {
        if (this.callbacks) {
            this.callbacks.onStop();
        }
        this.listener = undefined;
    }
}
defaultvalueproducer.DefaultValueProducer = DefaultValueProducer;

var dropduplicates = {};

Object.defineProperty(dropduplicates, "__esModule", { value: true });
dropduplicates.dropDuplicates = void 0;
/**
 * Drops duplicate values in a stream.
 *
 * Marble diagram:
 *
 * ```text
 * -1-1-1-2-4-3-3-4--
 *   dropDuplicates
 * -1-----2-4-3------
 * ```
 *
 * Each value must be uniquely identified by a string given by
 * valueToKey(value).
 *
 * Internally this maintains a set of keys that have been processed already,
 * i.e. memory consumption and Set lookup times should be considered when
 * using this function.
 */
function dropDuplicates(valueToKey) {
    const operand = (instream) => {
        const emittedKeys = new Set();
        const deduplicatedStream = instream
            .filter((value) => !emittedKeys.has(valueToKey(value)))
            .debug((value) => emittedKeys.add(valueToKey(value)));
        return deduplicatedStream;
    };
    return operand;
}
dropduplicates.dropDuplicates = dropDuplicates;

var promise = {};

Object.defineProperty(promise, "__esModule", { value: true });
promise.firstEvent = promise.toListPromise = promise.fromListPromise = void 0;
const xstream_1$4 = xstream;
/**
 * Emits one event for each list element as soon as the promise resolves
 */
function fromListPromise(promise) {
    const producer = {
        start: (listener) => {
            // the code in `start` runs as soon as anyone listens to the stream
            promise
                .then((iterable) => {
                for (const element of iterable) {
                    listener.next(element);
                }
                listener.complete();
            })
                .catch((error) => listener.error(error));
        },
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        stop: () => { },
    };
    return xstream_1$4.Stream.create(producer);
}
promise.fromListPromise = fromListPromise;
/**
 * Listens to stream and collects events. When `count` events are collected,
 * the promise resolves with an array of events.
 *
 * Rejects if stream completes before `count` events are collected.
 */
async function toListPromise(stream, count) {
    return new Promise((resolve, reject) => {
        if (count === 0) {
            resolve([]);
            return;
        }
        const events = new Array();
        // take() unsubscribes from source stream automatically
        stream.take(count).subscribe({
            next: (event) => {
                events.push(event);
                if (events.length === count) {
                    resolve(events);
                }
            },
            complete: () => {
                reject(`Stream completed before all events could be collected. ` +
                    `Collected ${events.length}, expected ${count}`);
            },
            error: (error) => reject(error),
        });
    });
}
promise.toListPromise = toListPromise;
/**
 * Listens to stream, collects one event and revolves.
 *
 * Rejects if stream completes before one event was fired.
 */
async function firstEvent(stream) {
    return (await toListPromise(stream, 1))[0];
}
promise.firstEvent = firstEvent;

var reducer = {};

Object.defineProperty(reducer, "__esModule", { value: true });
reducer.lastValue = reducer.asArray = reducer.countStream = reducer.Reducer = void 0;
// Reducer takes a stream of events T and a ReducerFunc, that
// materializes a state of type U.
class Reducer {
    constructor(stream, reducer, initState) {
        this.stream = stream;
        this.reducer = reducer;
        this.state = initState;
        this.completed = new Promise((resolve, reject) => {
            const subscription = this.stream.subscribe({
                next: (evt) => {
                    this.state = this.reducer(this.state, evt);
                },
                complete: () => {
                    resolve();
                    // this must happen after resolve, to ensure stream.subscribe() has finished
                    subscription.unsubscribe();
                },
                error: (err) => {
                    reject(err);
                    // the stream already closed on error, but unsubscribe to be safe
                    subscription.unsubscribe();
                },
            });
        });
    }
    // value returns current materialized state
    value() {
        return this.state;
    }
    // finished resolves on completed stream, rejects on stream error
    async finished() {
        return this.completed;
    }
}
reducer.Reducer = Reducer;
function increment(sum, _) {
    return sum + 1;
}
// countStream returns a reducer that contains current count
// of events on the stream
function countStream(stream) {
    return new Reducer(stream, increment, 0);
}
reducer.countStream = countStream;
function append(list, evt) {
    return [...list, evt];
}
// asArray maintains an array containing all events that have
// occurred on the stream
function asArray(stream) {
    return new Reducer(stream, append, []);
}
reducer.asArray = asArray;
function last(_, event) {
    return event;
}
// lastValue returns the last value read from the stream, or undefined if no values sent
function lastValue(stream) {
    return new Reducer(stream, last, undefined);
}
reducer.lastValue = lastValue;

var valueandupdates = {};

Object.defineProperty(valueandupdates, "__esModule", { value: true });
valueandupdates.ValueAndUpdates = void 0;
const xstream_1$3 = xstream;
/**
 * A read only wrapper around DefaultValueProducer that allows
 * to synchronously get the current value using the .value property
 * and listen to to updates by suscribing to the .updates stream
 */
class ValueAndUpdates {
    constructor(producer) {
        this.producer = producer;
        this.updates = xstream_1$3.MemoryStream.createWithMemory(this.producer);
    }
    get value() {
        return this.producer.value;
    }
    /**
     * Resolves as soon as search value is found.
     *
     * @param search either a value or a function that must return true when found
     * @returns the value of the update that caused the search match
     */
    async waitFor(search) {
        const searchImplementation = typeof search === "function" ? search : (value) => value === search;
        return new Promise((resolve, reject) => {
            const subscription = this.updates.subscribe({
                next: (newValue) => {
                    if (searchImplementation(newValue)) {
                        resolve(newValue);
                        // MemoryStream.subscribe() calls next with the last value.
                        // Make async to ensure the subscription exists
                        setTimeout(() => subscription.unsubscribe(), 0);
                    }
                },
                complete: () => {
                    subscription.unsubscribe();
                    reject("Update stream completed without expected value");
                },
                error: (error) => {
                    reject(error);
                },
            });
        });
    }
}
valueandupdates.ValueAndUpdates = ValueAndUpdates;

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ValueAndUpdates = exports.toListPromise = exports.fromListPromise = exports.firstEvent = exports.dropDuplicates = exports.DefaultValueProducer = exports.concat = void 0;
	var concat_1 = concat$4;
	Object.defineProperty(exports, "concat", { enumerable: true, get: function () { return concat_1.concat; } });
	var defaultvalueproducer_1 = defaultvalueproducer;
	Object.defineProperty(exports, "DefaultValueProducer", { enumerable: true, get: function () { return defaultvalueproducer_1.DefaultValueProducer; } });
	var dropduplicates_1 = dropduplicates;
	Object.defineProperty(exports, "dropDuplicates", { enumerable: true, get: function () { return dropduplicates_1.dropDuplicates; } });
	var promise_1 = promise;
	Object.defineProperty(exports, "firstEvent", { enumerable: true, get: function () { return promise_1.firstEvent; } });
	Object.defineProperty(exports, "fromListPromise", { enumerable: true, get: function () { return promise_1.fromListPromise; } });
	Object.defineProperty(exports, "toListPromise", { enumerable: true, get: function () { return promise_1.toListPromise; } });
	__exportStar(reducer, exports);
	var valueandupdates_1 = valueandupdates;
	Object.defineProperty(exports, "ValueAndUpdates", { enumerable: true, get: function () { return valueandupdates_1.ValueAndUpdates; } });
	
} (build$3));

Object.defineProperty(queryclient, "__esModule", { value: true });
queryclient.QueryClient = void 0;
/* eslint-disable no-dupe-class-members, @typescript-eslint/ban-types, @typescript-eslint/naming-convention */
const ics23_1 = build$4;
const encoding_1$c = build$6;
const stream_1$2 = build$3;
const utils_1$7 = build$5;
function checkAndParseOp(op, kind, key) {
    if (op.type !== kind) {
        throw new Error(`Op expected to be ${kind}, got "${op.type}`);
    }
    if (!(0, utils_1$7.arrayContentEquals)(key, op.key)) {
        throw new Error(`Proven key different than queried key.\nQuery: ${(0, encoding_1$c.toHex)(key)}\nProven: ${(0, encoding_1$c.toHex)(op.key)}`);
    }
    return ics23_1.ics23.CommitmentProof.decode(op.data);
}
class QueryClient {
    constructor(tmClient) {
        this.tmClient = tmClient;
    }
    static withExtensions(tmClient, ...extensionSetups) {
        const client = new QueryClient(tmClient);
        const extensions = extensionSetups.map((setupExtension) => setupExtension(client));
        for (const extension of extensions) {
            (0, utils_1$7.assert)((0, utils_1$7.isNonNullObject)(extension), `Extension must be a non-null object`);
            for (const [moduleKey, moduleValue] of Object.entries(extension)) {
                (0, utils_1$7.assert)((0, utils_1$7.isNonNullObject)(moduleValue), `Module must be a non-null object. Found type ${typeof moduleValue} for module "${moduleKey}".`);
                const current = client[moduleKey] || {};
                client[moduleKey] = {
                    ...current,
                    ...moduleValue,
                };
            }
        }
        return client;
    }
    /**
     * @deprecated use queryStoreVerified instead
     */
    async queryVerified(store, queryKey, desiredHeight) {
        const { value } = await this.queryStoreVerified(store, queryKey, desiredHeight);
        return value;
    }
    /**
     * Queries the database store with a proof, which is then verified.
     *
     * Please note: the current implementation trusts block headers it gets from the PRC endpoint.
     */
    async queryStoreVerified(store, queryKey, desiredHeight) {
        const { height, proof, key, value } = await this.queryRawProof(store, queryKey, desiredHeight);
        const subProof = checkAndParseOp(proof.ops[0], "ics23:iavl", queryKey);
        const storeProof = checkAndParseOp(proof.ops[1], "ics23:simple", (0, encoding_1$c.toAscii)(store));
        // this must always be existence, if the store is not a typo
        (0, utils_1$7.assert)(storeProof.exist);
        (0, utils_1$7.assert)(storeProof.exist.value);
        // this may be exist or non-exist, depends on response
        if (!value || value.length === 0) {
            // non-existence check
            (0, utils_1$7.assert)(subProof.nonexist);
            // the subproof must map the desired key to the "value" of the storeProof
            (0, ics23_1.verifyNonExistence)(subProof.nonexist, ics23_1.iavlSpec, storeProof.exist.value, queryKey);
        }
        else {
            // existence check
            (0, utils_1$7.assert)(subProof.exist);
            (0, utils_1$7.assert)(subProof.exist.value);
            // the subproof must map the desired key to the "value" of the storeProof
            (0, ics23_1.verifyExistence)(subProof.exist, ics23_1.iavlSpec, storeProof.exist.value, queryKey, value);
        }
        // the store proof must map its declared value (root of subProof) to the appHash of the next block
        const header = await this.getNextHeader(height);
        (0, ics23_1.verifyExistence)(storeProof.exist, ics23_1.tendermintSpec, header.appHash, (0, encoding_1$c.toAscii)(store), storeProof.exist.value);
        return { key, value, height };
    }
    async queryRawProof(store, queryKey, desiredHeight) {
        const { key, value, height, proof, code, log } = await this.tmClient.abciQuery({
            // we need the StoreKey for the module, not the module name
            // https://github.com/cosmos/cosmos-sdk/blob/8cab43c8120fec5200c3459cbf4a92017bb6f287/x/auth/types/keys.go#L12
            path: `/store/${store}/key`,
            data: queryKey,
            prove: true,
            height: desiredHeight,
        });
        if (code) {
            throw new Error(`Query failed with (${code}): ${log}`);
        }
        if (!(0, utils_1$7.arrayContentEquals)(queryKey, key)) {
            throw new Error(`Response key ${(0, encoding_1$c.toHex)(key)} doesn't match query key ${(0, encoding_1$c.toHex)(queryKey)}`);
        }
        if (!height) {
            throw new Error("No query height returned");
        }
        if (!proof || proof.ops.length !== 2) {
            throw new Error(`Expected 2 proof ops, got ${proof?.ops.length ?? 0}. Are you using stargate?`);
        }
        // we don't need the results, but we can ensure the data is the proper format
        checkAndParseOp(proof.ops[0], "ics23:iavl", key);
        checkAndParseOp(proof.ops[1], "ics23:simple", (0, encoding_1$c.toAscii)(store));
        return {
            key: key,
            value: value,
            height: height,
            // need to clone this: readonly input / writeable output
            proof: {
                ops: [...proof.ops],
            },
        };
    }
    /**
     * Performs an ABCI query to Tendermint without requesting a proof.
     *
     * @deprecated use queryAbci instead
     */
    async queryUnverified(path, request, desiredHeight) {
        const response = await this.queryAbci(path, request, desiredHeight);
        return response.value;
    }
    /**
     * Performs an ABCI query to Tendermint without requesting a proof.
     *
     * If the `desiredHeight` is set, a particular height is requested. Otherwise
     * the latest height is requested. The response contains the actual height of
     * the query.
     */
    async queryAbci(path, request, desiredHeight) {
        const response = await this.tmClient.abciQuery({
            path: path,
            data: request,
            prove: false,
            height: desiredHeight,
        });
        if (response.code) {
            throw new Error(`Query failed with (${response.code}): ${response.log}`);
        }
        if (!response.height) {
            throw new Error("No query height returned");
        }
        return {
            value: response.value,
            height: response.height,
        };
    }
    // this must return the header for height+1
    // throws an error if height is 0 or undefined
    async getNextHeader(height) {
        (0, utils_1$7.assertDefined)(height);
        if (height === 0) {
            throw new Error("Query returned height 0, cannot prove it");
        }
        const searchHeight = height + 1;
        let nextHeader;
        let headersSubscription;
        try {
            headersSubscription = this.tmClient.subscribeNewBlockHeader();
        }
        catch {
            // Ignore exception caused by non-WebSocket Tendermint clients
        }
        if (headersSubscription) {
            const firstHeader = await (0, stream_1$2.firstEvent)(headersSubscription);
            // The first header we get might not be n+1 but n+2 or even higher. In such cases we fall back on a query.
            if (firstHeader.height === searchHeight) {
                nextHeader = firstHeader;
            }
        }
        while (!nextHeader) {
            // start from current height to avoid backend error for minHeight in the future
            const correctHeader = (await this.tmClient.blockchain(height, searchHeight)).blockMetas
                .map((meta) => meta.header)
                .find((h) => h.height === searchHeight);
            if (correctHeader) {
                nextHeader = correctHeader;
            }
            else {
                await (0, utils_1$7.sleep)(1000);
            }
        }
        (0, utils_1$7.assert)(nextHeader.height === searchHeight, "Got wrong header. This is a bug in the logic above.");
        return nextHeader;
    }
}
queryclient.QueryClient = QueryClient;

var utils$a = {};

var __importDefault$a = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(utils$a, "__esModule", { value: true });
utils$a.decodeCosmosSdkDecFromProto = utils$a.longify = utils$a.createProtobufRpcClient = utils$a.createPagination = utils$a.toAccAddress = void 0;
const encoding_1$b = build$6;
const math_1$6 = build$a;
const pagination_1 = pagination;
const long_1$8 = __importDefault$a(long);
/**
 * Takes a bech32 encoded address and returns the data part. The prefix is ignored and discarded.
 * This is called AccAddress in Cosmos SDK, which is basically an alias for raw binary data.
 * The result is typically 20 bytes long but not restricted to that.
 */
function toAccAddress(address) {
    return (0, encoding_1$b.fromBech32)(address).data;
}
utils$a.toAccAddress = toAccAddress;
/**
 * If paginationKey is set, return a `PageRequest` with the given key.
 * If paginationKey is unset, return `undefined`.
 *
 * Use this with a query response's pagination next key to
 * request the next page.
 */
function createPagination(paginationKey) {
    return paginationKey ? pagination_1.PageRequest.fromPartial({ key: paginationKey }) : undefined;
}
utils$a.createPagination = createPagination;
function createProtobufRpcClient(base) {
    return {
        request: async (service, method, data) => {
            const path = `/${service}/${method}`;
            const response = await base.queryAbci(path, data, undefined);
            return response.value;
        },
    };
}
utils$a.createProtobufRpcClient = createProtobufRpcClient;
/**
 * Takes a uint64 value as string, number, Long or Uint64 and returns an unsigned Long instance
 * of it.
 */
function longify(value) {
    const checkedValue = math_1$6.Uint64.fromString(value.toString());
    return long_1$8.default.fromBytesBE([...checkedValue.toBytesBigEndian()], true);
}
utils$a.longify = longify;
/**
 * Takes a string or binary encoded `github.com/cosmos/cosmos-sdk/types.Dec` from the
 * protobuf API and converts it into a `Decimal` with 18 fractional digits.
 *
 * See https://github.com/cosmos/cosmos-sdk/issues/10863 for more context why this is needed.
 */
function decodeCosmosSdkDecFromProto(input) {
    const asString = typeof input === "string" ? input : (0, encoding_1$b.fromAscii)(input);
    return math_1$6.Decimal.fromAtomics(asString, 18);
}
utils$a.decodeCosmosSdkDecFromProto = decodeCosmosSdkDecFromProto;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.longify = exports.decodeCosmosSdkDecFromProto = exports.createProtobufRpcClient = exports.createPagination = exports.QueryClient = void 0;
	var queryclient_1 = queryclient;
	Object.defineProperty(exports, "QueryClient", { enumerable: true, get: function () { return queryclient_1.QueryClient; } });
	var utils_1 = utils$a;
	Object.defineProperty(exports, "createPagination", { enumerable: true, get: function () { return utils_1.createPagination; } });
	Object.defineProperty(exports, "createProtobufRpcClient", { enumerable: true, get: function () { return utils_1.createProtobufRpcClient; } });
	Object.defineProperty(exports, "decodeCosmosSdkDecFromProto", { enumerable: true, get: function () { return utils_1.decodeCosmosSdkDecFromProto; } });
	Object.defineProperty(exports, "longify", { enumerable: true, get: function () { return utils_1.longify; } });
	
} (queryclient$1));

Object.defineProperty(queries$a, "__esModule", { value: true });
queries$a.setupAuthExtension = void 0;
const query_1$9 = query$c;
const queryclient_1$c = queryclient$1;
function setupAuthExtension(base) {
    const rpc = (0, queryclient_1$c.createProtobufRpcClient)(base);
    // Use this service to get easy typed access to query methods
    // This cannot be used for proof verification
    const queryService = new query_1$9.QueryClientImpl(rpc);
    return {
        auth: {
            account: async (address) => {
                const { account } = await queryService.Account({ address: address });
                return account ?? null;
            },
        },
    };
}
queries$a.setupAuthExtension = setupAuthExtension;

var aminomessages$a = {};

Object.defineProperty(aminomessages$a, "__esModule", { value: true });
aminomessages$a.createAuthzAminoConverters = void 0;
function createAuthzAminoConverters() {
    return {
        "/cosmos.authz.v1beta1.MsgGrant": "not_supported_by_chain",
        "/cosmos.authz.v1beta1.MsgExec": "not_supported_by_chain",
        "/cosmos.authz.v1beta1.MsgRevoke": "not_supported_by_chain",
    };
}
aminomessages$a.createAuthzAminoConverters = createAuthzAminoConverters;

var messages$7 = {};

var tx$c = {};

var authz = {};

var timestamp = {};

var __createBinding$d = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$d = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$d = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$d(result, mod, k);
    __setModuleDefault$d(result, mod);
    return result;
};
Object.defineProperty(timestamp, "__esModule", { value: true });
timestamp.Timestamp = timestamp.protobufPackage = void 0;
/* eslint-disable */
const helpers_1$9 = helpers;
const _m0$9 = __importStar$d(minimal);
timestamp.protobufPackage = "google.protobuf";
function createBaseTimestamp() {
    return {
        seconds: helpers_1$9.Long.ZERO,
        nanos: 0,
    };
}
timestamp.Timestamp = {
    encode(message, writer = _m0$9.Writer.create()) {
        if (!message.seconds.isZero()) {
            writer.uint32(8).int64(message.seconds);
        }
        if (message.nanos !== 0) {
            writer.uint32(16).int32(message.nanos);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$9.Reader ? input : new _m0$9.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTimestamp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.seconds = reader.int64();
                    break;
                case 2:
                    message.nanos = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            seconds: (0, helpers_1$9.isSet)(object.seconds) ? helpers_1$9.Long.fromValue(object.seconds) : helpers_1$9.Long.ZERO,
            nanos: (0, helpers_1$9.isSet)(object.nanos) ? Number(object.nanos) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.seconds !== undefined && (obj.seconds = (message.seconds || helpers_1$9.Long.ZERO).toString());
        message.nanos !== undefined && (obj.nanos = Math.round(message.nanos));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseTimestamp();
        message.seconds =
            object.seconds !== undefined && object.seconds !== null ? helpers_1$9.Long.fromValue(object.seconds) : helpers_1$9.Long.ZERO;
        message.nanos = object.nanos ?? 0;
        return message;
    },
};

var __createBinding$c = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$c = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$c = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$c(result, mod, k);
    __setModuleDefault$c(result, mod);
    return result;
};
Object.defineProperty(authz, "__esModule", { value: true });
authz.GrantAuthorization = authz.Grant = authz.GenericAuthorization = authz.protobufPackage = void 0;
/* eslint-disable */
const any_1$1 = any;
const timestamp_1$1 = timestamp;
const _m0$8 = __importStar$c(minimal);
const helpers_1$8 = helpers;
authz.protobufPackage = "cosmos.authz.v1beta1";
function createBaseGenericAuthorization() {
    return {
        msg: "",
    };
}
authz.GenericAuthorization = {
    encode(message, writer = _m0$8.Writer.create()) {
        if (message.msg !== "") {
            writer.uint32(10).string(message.msg);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$8.Reader ? input : new _m0$8.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenericAuthorization();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.msg = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            msg: (0, helpers_1$8.isSet)(object.msg) ? String(object.msg) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.msg !== undefined && (obj.msg = message.msg);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGenericAuthorization();
        message.msg = object.msg ?? "";
        return message;
    },
};
function createBaseGrant() {
    return {
        authorization: undefined,
        expiration: undefined,
    };
}
authz.Grant = {
    encode(message, writer = _m0$8.Writer.create()) {
        if (message.authorization !== undefined) {
            any_1$1.Any.encode(message.authorization, writer.uint32(10).fork()).ldelim();
        }
        if (message.expiration !== undefined) {
            timestamp_1$1.Timestamp.encode(message.expiration, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$8.Reader ? input : new _m0$8.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGrant();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.authorization = any_1$1.Any.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.expiration = timestamp_1$1.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            authorization: (0, helpers_1$8.isSet)(object.authorization) ? any_1$1.Any.fromJSON(object.authorization) : undefined,
            expiration: (0, helpers_1$8.isSet)(object.expiration) ? (0, helpers_1$8.fromJsonTimestamp)(object.expiration) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.authorization !== undefined &&
            (obj.authorization = message.authorization ? any_1$1.Any.toJSON(message.authorization) : undefined);
        message.expiration !== undefined && (obj.expiration = (0, helpers_1$8.fromTimestamp)(message.expiration).toISOString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGrant();
        message.authorization =
            object.authorization !== undefined && object.authorization !== null
                ? any_1$1.Any.fromPartial(object.authorization)
                : undefined;
        message.expiration =
            object.expiration !== undefined && object.expiration !== null
                ? timestamp_1$1.Timestamp.fromPartial(object.expiration)
                : undefined;
        return message;
    },
};
function createBaseGrantAuthorization() {
    return {
        granter: "",
        grantee: "",
        authorization: undefined,
        expiration: undefined,
    };
}
authz.GrantAuthorization = {
    encode(message, writer = _m0$8.Writer.create()) {
        if (message.granter !== "") {
            writer.uint32(10).string(message.granter);
        }
        if (message.grantee !== "") {
            writer.uint32(18).string(message.grantee);
        }
        if (message.authorization !== undefined) {
            any_1$1.Any.encode(message.authorization, writer.uint32(26).fork()).ldelim();
        }
        if (message.expiration !== undefined) {
            timestamp_1$1.Timestamp.encode(message.expiration, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$8.Reader ? input : new _m0$8.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGrantAuthorization();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.granter = reader.string();
                    break;
                case 2:
                    message.grantee = reader.string();
                    break;
                case 3:
                    message.authorization = any_1$1.Any.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.expiration = timestamp_1$1.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            granter: (0, helpers_1$8.isSet)(object.granter) ? String(object.granter) : "",
            grantee: (0, helpers_1$8.isSet)(object.grantee) ? String(object.grantee) : "",
            authorization: (0, helpers_1$8.isSet)(object.authorization) ? any_1$1.Any.fromJSON(object.authorization) : undefined,
            expiration: (0, helpers_1$8.isSet)(object.expiration) ? (0, helpers_1$8.fromJsonTimestamp)(object.expiration) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.granter !== undefined && (obj.granter = message.granter);
        message.grantee !== undefined && (obj.grantee = message.grantee);
        message.authorization !== undefined &&
            (obj.authorization = message.authorization ? any_1$1.Any.toJSON(message.authorization) : undefined);
        message.expiration !== undefined && (obj.expiration = (0, helpers_1$8.fromTimestamp)(message.expiration).toISOString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGrantAuthorization();
        message.granter = object.granter ?? "";
        message.grantee = object.grantee ?? "";
        message.authorization =
            object.authorization !== undefined && object.authorization !== null
                ? any_1$1.Any.fromPartial(object.authorization)
                : undefined;
        message.expiration =
            object.expiration !== undefined && object.expiration !== null
                ? timestamp_1$1.Timestamp.fromPartial(object.expiration)
                : undefined;
        return message;
    },
};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.MsgClientImpl = exports.MsgRevokeResponse = exports.MsgRevoke = exports.MsgGrantResponse = exports.MsgExec = exports.MsgExecResponse = exports.MsgGrant = exports.protobufPackage = void 0;
	/* eslint-disable */
	const authz_1 = authz;
	const any_1 = any;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.authz.v1beta1";
	function createBaseMsgGrant() {
	    return {
	        granter: "",
	        grantee: "",
	        grant: undefined,
	    };
	}
	exports.MsgGrant = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.granter !== "") {
	            writer.uint32(10).string(message.granter);
	        }
	        if (message.grantee !== "") {
	            writer.uint32(18).string(message.grantee);
	        }
	        if (message.grant !== undefined) {
	            authz_1.Grant.encode(message.grant, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgGrant();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.granter = reader.string();
	                    break;
	                case 2:
	                    message.grantee = reader.string();
	                    break;
	                case 3:
	                    message.grant = authz_1.Grant.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            granter: (0, helpers_1.isSet)(object.granter) ? String(object.granter) : "",
	            grantee: (0, helpers_1.isSet)(object.grantee) ? String(object.grantee) : "",
	            grant: (0, helpers_1.isSet)(object.grant) ? authz_1.Grant.fromJSON(object.grant) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.granter !== undefined && (obj.granter = message.granter);
	        message.grantee !== undefined && (obj.grantee = message.grantee);
	        message.grant !== undefined && (obj.grant = message.grant ? authz_1.Grant.toJSON(message.grant) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgGrant();
	        message.granter = object.granter ?? "";
	        message.grantee = object.grantee ?? "";
	        message.grant =
	            object.grant !== undefined && object.grant !== null ? authz_1.Grant.fromPartial(object.grant) : undefined;
	        return message;
	    },
	};
	function createBaseMsgExecResponse() {
	    return {
	        results: [],
	    };
	}
	exports.MsgExecResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.results) {
	            writer.uint32(10).bytes(v);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgExecResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.results.push(reader.bytes());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            results: Array.isArray(object?.results) ? object.results.map((e) => (0, helpers_1.bytesFromBase64)(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.results) {
	            obj.results = message.results.map((e) => (0, helpers_1.base64FromBytes)(e !== undefined ? e : new Uint8Array()));
	        }
	        else {
	            obj.results = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgExecResponse();
	        message.results = object.results?.map((e) => e) || [];
	        return message;
	    },
	};
	function createBaseMsgExec() {
	    return {
	        grantee: "",
	        msgs: [],
	    };
	}
	exports.MsgExec = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.grantee !== "") {
	            writer.uint32(10).string(message.grantee);
	        }
	        for (const v of message.msgs) {
	            any_1.Any.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgExec();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.grantee = reader.string();
	                    break;
	                case 2:
	                    message.msgs.push(any_1.Any.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            grantee: (0, helpers_1.isSet)(object.grantee) ? String(object.grantee) : "",
	            msgs: Array.isArray(object?.msgs) ? object.msgs.map((e) => any_1.Any.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.grantee !== undefined && (obj.grantee = message.grantee);
	        if (message.msgs) {
	            obj.msgs = message.msgs.map((e) => (e ? any_1.Any.toJSON(e) : undefined));
	        }
	        else {
	            obj.msgs = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgExec();
	        message.grantee = object.grantee ?? "";
	        message.msgs = object.msgs?.map((e) => any_1.Any.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseMsgGrantResponse() {
	    return {};
	}
	exports.MsgGrantResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgGrantResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgGrantResponse();
	        return message;
	    },
	};
	function createBaseMsgRevoke() {
	    return {
	        granter: "",
	        grantee: "",
	        msgTypeUrl: "",
	    };
	}
	exports.MsgRevoke = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.granter !== "") {
	            writer.uint32(10).string(message.granter);
	        }
	        if (message.grantee !== "") {
	            writer.uint32(18).string(message.grantee);
	        }
	        if (message.msgTypeUrl !== "") {
	            writer.uint32(26).string(message.msgTypeUrl);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgRevoke();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.granter = reader.string();
	                    break;
	                case 2:
	                    message.grantee = reader.string();
	                    break;
	                case 3:
	                    message.msgTypeUrl = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            granter: (0, helpers_1.isSet)(object.granter) ? String(object.granter) : "",
	            grantee: (0, helpers_1.isSet)(object.grantee) ? String(object.grantee) : "",
	            msgTypeUrl: (0, helpers_1.isSet)(object.msgTypeUrl) ? String(object.msgTypeUrl) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.granter !== undefined && (obj.granter = message.granter);
	        message.grantee !== undefined && (obj.grantee = message.grantee);
	        message.msgTypeUrl !== undefined && (obj.msgTypeUrl = message.msgTypeUrl);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgRevoke();
	        message.granter = object.granter ?? "";
	        message.grantee = object.grantee ?? "";
	        message.msgTypeUrl = object.msgTypeUrl ?? "";
	        return message;
	    },
	};
	function createBaseMsgRevokeResponse() {
	    return {};
	}
	exports.MsgRevokeResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgRevokeResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgRevokeResponse();
	        return message;
	    },
	};
	class MsgClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.Grant = this.Grant.bind(this);
	        this.Exec = this.Exec.bind(this);
	        this.Revoke = this.Revoke.bind(this);
	    }
	    Grant(request) {
	        const data = exports.MsgGrant.encode(request).finish();
	        const promise = this.rpc.request("cosmos.authz.v1beta1.Msg", "Grant", data);
	        return promise.then((data) => exports.MsgGrantResponse.decode(new _m0.Reader(data)));
	    }
	    Exec(request) {
	        const data = exports.MsgExec.encode(request).finish();
	        const promise = this.rpc.request("cosmos.authz.v1beta1.Msg", "Exec", data);
	        return promise.then((data) => exports.MsgExecResponse.decode(new _m0.Reader(data)));
	    }
	    Revoke(request) {
	        const data = exports.MsgRevoke.encode(request).finish();
	        const promise = this.rpc.request("cosmos.authz.v1beta1.Msg", "Revoke", data);
	        return promise.then((data) => exports.MsgRevokeResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.MsgClientImpl = MsgClientImpl;
	
} (tx$c));

Object.defineProperty(messages$7, "__esModule", { value: true });
messages$7.authzTypes = void 0;
const tx_1$a = tx$c;
messages$7.authzTypes = [
    ["/cosmos.authz.v1beta1.MsgExec", tx_1$a.MsgExec],
    ["/cosmos.authz.v1beta1.MsgGrant", tx_1$a.MsgGrant],
    ["/cosmos.authz.v1beta1.MsgRevoke", tx_1$a.MsgRevoke],
];

var queries$9 = {};

var query$b = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.QueryClientImpl = exports.QueryGranteeGrantsResponse = exports.QueryGranteeGrantsRequest = exports.QueryGranterGrantsResponse = exports.QueryGranterGrantsRequest = exports.QueryGrantsResponse = exports.QueryGrantsRequest = exports.protobufPackage = void 0;
	/* eslint-disable */
	const pagination_1 = pagination;
	const authz_1 = authz;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.authz.v1beta1";
	function createBaseQueryGrantsRequest() {
	    return {
	        granter: "",
	        grantee: "",
	        msgTypeUrl: "",
	        pagination: undefined,
	    };
	}
	exports.QueryGrantsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.granter !== "") {
	            writer.uint32(10).string(message.granter);
	        }
	        if (message.grantee !== "") {
	            writer.uint32(18).string(message.grantee);
	        }
	        if (message.msgTypeUrl !== "") {
	            writer.uint32(26).string(message.msgTypeUrl);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryGrantsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.granter = reader.string();
	                    break;
	                case 2:
	                    message.grantee = reader.string();
	                    break;
	                case 3:
	                    message.msgTypeUrl = reader.string();
	                    break;
	                case 4:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            granter: (0, helpers_1.isSet)(object.granter) ? String(object.granter) : "",
	            grantee: (0, helpers_1.isSet)(object.grantee) ? String(object.grantee) : "",
	            msgTypeUrl: (0, helpers_1.isSet)(object.msgTypeUrl) ? String(object.msgTypeUrl) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.granter !== undefined && (obj.granter = message.granter);
	        message.grantee !== undefined && (obj.grantee = message.grantee);
	        message.msgTypeUrl !== undefined && (obj.msgTypeUrl = message.msgTypeUrl);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryGrantsRequest();
	        message.granter = object.granter ?? "";
	        message.grantee = object.grantee ?? "";
	        message.msgTypeUrl = object.msgTypeUrl ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryGrantsResponse() {
	    return {
	        grants: [],
	        pagination: undefined,
	    };
	}
	exports.QueryGrantsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.grants) {
	            authz_1.Grant.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryGrantsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.grants.push(authz_1.Grant.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            grants: Array.isArray(object?.grants) ? object.grants.map((e) => authz_1.Grant.fromJSON(e)) : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.grants) {
	            obj.grants = message.grants.map((e) => (e ? authz_1.Grant.toJSON(e) : undefined));
	        }
	        else {
	            obj.grants = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryGrantsResponse();
	        message.grants = object.grants?.map((e) => authz_1.Grant.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryGranterGrantsRequest() {
	    return {
	        granter: "",
	        pagination: undefined,
	    };
	}
	exports.QueryGranterGrantsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.granter !== "") {
	            writer.uint32(10).string(message.granter);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryGranterGrantsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.granter = reader.string();
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            granter: (0, helpers_1.isSet)(object.granter) ? String(object.granter) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.granter !== undefined && (obj.granter = message.granter);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryGranterGrantsRequest();
	        message.granter = object.granter ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryGranterGrantsResponse() {
	    return {
	        grants: [],
	        pagination: undefined,
	    };
	}
	exports.QueryGranterGrantsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.grants) {
	            authz_1.GrantAuthorization.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryGranterGrantsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.grants.push(authz_1.GrantAuthorization.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            grants: Array.isArray(object?.grants)
	                ? object.grants.map((e) => authz_1.GrantAuthorization.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.grants) {
	            obj.grants = message.grants.map((e) => (e ? authz_1.GrantAuthorization.toJSON(e) : undefined));
	        }
	        else {
	            obj.grants = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryGranterGrantsResponse();
	        message.grants = object.grants?.map((e) => authz_1.GrantAuthorization.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryGranteeGrantsRequest() {
	    return {
	        grantee: "",
	        pagination: undefined,
	    };
	}
	exports.QueryGranteeGrantsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.grantee !== "") {
	            writer.uint32(10).string(message.grantee);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryGranteeGrantsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.grantee = reader.string();
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            grantee: (0, helpers_1.isSet)(object.grantee) ? String(object.grantee) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.grantee !== undefined && (obj.grantee = message.grantee);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryGranteeGrantsRequest();
	        message.grantee = object.grantee ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryGranteeGrantsResponse() {
	    return {
	        grants: [],
	        pagination: undefined,
	    };
	}
	exports.QueryGranteeGrantsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.grants) {
	            authz_1.GrantAuthorization.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryGranteeGrantsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.grants.push(authz_1.GrantAuthorization.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            grants: Array.isArray(object?.grants)
	                ? object.grants.map((e) => authz_1.GrantAuthorization.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.grants) {
	            obj.grants = message.grants.map((e) => (e ? authz_1.GrantAuthorization.toJSON(e) : undefined));
	        }
	        else {
	            obj.grants = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryGranteeGrantsResponse();
	        message.grants = object.grants?.map((e) => authz_1.GrantAuthorization.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	class QueryClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.Grants = this.Grants.bind(this);
	        this.GranterGrants = this.GranterGrants.bind(this);
	        this.GranteeGrants = this.GranteeGrants.bind(this);
	    }
	    Grants(request) {
	        const data = exports.QueryGrantsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.authz.v1beta1.Query", "Grants", data);
	        return promise.then((data) => exports.QueryGrantsResponse.decode(new _m0.Reader(data)));
	    }
	    GranterGrants(request) {
	        const data = exports.QueryGranterGrantsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.authz.v1beta1.Query", "GranterGrants", data);
	        return promise.then((data) => exports.QueryGranterGrantsResponse.decode(new _m0.Reader(data)));
	    }
	    GranteeGrants(request) {
	        const data = exports.QueryGranteeGrantsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.authz.v1beta1.Query", "GranteeGrants", data);
	        return promise.then((data) => exports.QueryGranteeGrantsResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.QueryClientImpl = QueryClientImpl;
	
} (query$b));

Object.defineProperty(queries$9, "__esModule", { value: true });
queries$9.setupAuthzExtension = void 0;
const query_1$8 = query$b;
const queryclient_1$b = queryclient$1;
function setupAuthzExtension(base) {
    // Use this service to get easy typed access to query methods
    // This cannot be used for proof verification
    const rpc = (0, queryclient_1$b.createProtobufRpcClient)(base);
    const queryService = new query_1$8.QueryClientImpl(rpc);
    return {
        authz: {
            grants: async (granter, grantee, msgTypeUrl, paginationKey) => {
                return await queryService.Grants({
                    granter: granter,
                    grantee: grantee,
                    msgTypeUrl: msgTypeUrl,
                    pagination: (0, queryclient_1$b.createPagination)(paginationKey),
                });
            },
            granteeGrants: async (grantee, paginationKey) => {
                return await queryService.GranteeGrants({
                    grantee: grantee,
                    pagination: (0, queryclient_1$b.createPagination)(paginationKey),
                });
            },
            granterGrants: async (granter, paginationKey) => {
                return await queryService.GranterGrants({
                    granter: granter,
                    pagination: (0, queryclient_1$b.createPagination)(paginationKey),
                });
            },
        },
    };
}
queries$9.setupAuthzExtension = setupAuthzExtension;

var aminomessages$9 = {};

Object.defineProperty(aminomessages$9, "__esModule", { value: true });
aminomessages$9.createBankAminoConverters = aminomessages$9.isAminoMsgMultiSend = aminomessages$9.isAminoMsgSend = void 0;
function isAminoMsgSend(msg) {
    return msg.type === "cosmos-sdk/MsgSend";
}
aminomessages$9.isAminoMsgSend = isAminoMsgSend;
function isAminoMsgMultiSend(msg) {
    return msg.type === "cosmos-sdk/MsgMultiSend";
}
aminomessages$9.isAminoMsgMultiSend = isAminoMsgMultiSend;
function createBankAminoConverters() {
    return {
        "/cosmos.bank.v1beta1.MsgSend": {
            aminoType: "cosmos-sdk/MsgSend",
            toAmino: ({ fromAddress, toAddress, amount }) => ({
                from_address: fromAddress,
                to_address: toAddress,
                amount: [...amount],
            }),
            fromAmino: ({ from_address, to_address, amount }) => ({
                fromAddress: from_address,
                toAddress: to_address,
                amount: [...amount],
            }),
        },
        "/cosmos.bank.v1beta1.MsgMultiSend": {
            aminoType: "cosmos-sdk/MsgMultiSend",
            toAmino: ({ inputs, outputs }) => ({
                inputs: inputs.map((input) => ({
                    address: input.address,
                    coins: [...input.coins],
                })),
                outputs: outputs.map((output) => ({
                    address: output.address,
                    coins: [...output.coins],
                })),
            }),
            fromAmino: ({ inputs, outputs }) => ({
                inputs: inputs.map((input) => ({
                    address: input.address,
                    coins: [...input.coins],
                })),
                outputs: outputs.map((output) => ({
                    address: output.address,
                    coins: [...output.coins],
                })),
            }),
        },
    };
}
aminomessages$9.createBankAminoConverters = createBankAminoConverters;

var messages$6 = {};

Object.defineProperty(messages$6, "__esModule", { value: true });
messages$6.isMsgSendEncodeObject = messages$6.bankTypes = void 0;
const tx_1$9 = tx$d;
messages$6.bankTypes = [
    ["/cosmos.bank.v1beta1.MsgMultiSend", tx_1$9.MsgMultiSend],
    ["/cosmos.bank.v1beta1.MsgSend", tx_1$9.MsgSend],
];
function isMsgSendEncodeObject(encodeObject) {
    return encodeObject.typeUrl === "/cosmos.bank.v1beta1.MsgSend";
}
messages$6.isMsgSendEncodeObject = isMsgSendEncodeObject;

var queries$8 = {};

var query$a = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.QueryClientImpl = exports.QueryDenomMetadataResponse = exports.QueryDenomMetadataRequest = exports.QueryDenomsMetadataResponse = exports.QueryDenomsMetadataRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QuerySupplyOfResponse = exports.QuerySupplyOfRequest = exports.QueryTotalSupplyResponse = exports.QueryTotalSupplyRequest = exports.QuerySpendableBalancesResponse = exports.QuerySpendableBalancesRequest = exports.QueryAllBalancesResponse = exports.QueryAllBalancesRequest = exports.QueryBalanceResponse = exports.QueryBalanceRequest = exports.protobufPackage = void 0;
	/* eslint-disable */
	const pagination_1 = pagination;
	const coin_1 = coin$1;
	const bank_1 = bank;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.bank.v1beta1";
	function createBaseQueryBalanceRequest() {
	    return {
	        address: "",
	        denom: "",
	    };
	}
	exports.QueryBalanceRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.address !== "") {
	            writer.uint32(10).string(message.address);
	        }
	        if (message.denom !== "") {
	            writer.uint32(18).string(message.denom);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryBalanceRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.address = reader.string();
	                    break;
	                case 2:
	                    message.denom = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            address: (0, helpers_1.isSet)(object.address) ? String(object.address) : "",
	            denom: (0, helpers_1.isSet)(object.denom) ? String(object.denom) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.address !== undefined && (obj.address = message.address);
	        message.denom !== undefined && (obj.denom = message.denom);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryBalanceRequest();
	        message.address = object.address ?? "";
	        message.denom = object.denom ?? "";
	        return message;
	    },
	};
	function createBaseQueryBalanceResponse() {
	    return {
	        balance: undefined,
	    };
	}
	exports.QueryBalanceResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.balance !== undefined) {
	            coin_1.Coin.encode(message.balance, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryBalanceResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.balance = coin_1.Coin.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            balance: (0, helpers_1.isSet)(object.balance) ? coin_1.Coin.fromJSON(object.balance) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.balance !== undefined &&
	            (obj.balance = message.balance ? coin_1.Coin.toJSON(message.balance) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryBalanceResponse();
	        message.balance =
	            object.balance !== undefined && object.balance !== null ? coin_1.Coin.fromPartial(object.balance) : undefined;
	        return message;
	    },
	};
	function createBaseQueryAllBalancesRequest() {
	    return {
	        address: "",
	        pagination: undefined,
	    };
	}
	exports.QueryAllBalancesRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.address !== "") {
	            writer.uint32(10).string(message.address);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryAllBalancesRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.address = reader.string();
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            address: (0, helpers_1.isSet)(object.address) ? String(object.address) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.address !== undefined && (obj.address = message.address);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryAllBalancesRequest();
	        message.address = object.address ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryAllBalancesResponse() {
	    return {
	        balances: [],
	        pagination: undefined,
	    };
	}
	exports.QueryAllBalancesResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.balances) {
	            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryAllBalancesResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.balances.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            balances: Array.isArray(object?.balances) ? object.balances.map((e) => coin_1.Coin.fromJSON(e)) : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.balances) {
	            obj.balances = message.balances.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.balances = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryAllBalancesResponse();
	        message.balances = object.balances?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQuerySpendableBalancesRequest() {
	    return {
	        address: "",
	        pagination: undefined,
	    };
	}
	exports.QuerySpendableBalancesRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.address !== "") {
	            writer.uint32(10).string(message.address);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQuerySpendableBalancesRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.address = reader.string();
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            address: (0, helpers_1.isSet)(object.address) ? String(object.address) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.address !== undefined && (obj.address = message.address);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQuerySpendableBalancesRequest();
	        message.address = object.address ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQuerySpendableBalancesResponse() {
	    return {
	        balances: [],
	        pagination: undefined,
	    };
	}
	exports.QuerySpendableBalancesResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.balances) {
	            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQuerySpendableBalancesResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.balances.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            balances: Array.isArray(object?.balances) ? object.balances.map((e) => coin_1.Coin.fromJSON(e)) : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.balances) {
	            obj.balances = message.balances.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.balances = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQuerySpendableBalancesResponse();
	        message.balances = object.balances?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryTotalSupplyRequest() {
	    return {
	        pagination: undefined,
	    };
	}
	exports.QueryTotalSupplyRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryTotalSupplyRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryTotalSupplyRequest();
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryTotalSupplyResponse() {
	    return {
	        supply: [],
	        pagination: undefined,
	    };
	}
	exports.QueryTotalSupplyResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.supply) {
	            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryTotalSupplyResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.supply.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            supply: Array.isArray(object?.supply) ? object.supply.map((e) => coin_1.Coin.fromJSON(e)) : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.supply) {
	            obj.supply = message.supply.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.supply = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryTotalSupplyResponse();
	        message.supply = object.supply?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQuerySupplyOfRequest() {
	    return {
	        denom: "",
	    };
	}
	exports.QuerySupplyOfRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.denom !== "") {
	            writer.uint32(10).string(message.denom);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQuerySupplyOfRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.denom = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            denom: (0, helpers_1.isSet)(object.denom) ? String(object.denom) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.denom !== undefined && (obj.denom = message.denom);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQuerySupplyOfRequest();
	        message.denom = object.denom ?? "";
	        return message;
	    },
	};
	function createBaseQuerySupplyOfResponse() {
	    return {
	        amount: undefined,
	    };
	}
	exports.QuerySupplyOfResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.amount !== undefined) {
	            coin_1.Coin.encode(message.amount, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQuerySupplyOfResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            amount: (0, helpers_1.isSet)(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQuerySupplyOfResponse();
	        message.amount =
	            object.amount !== undefined && object.amount !== null ? coin_1.Coin.fromPartial(object.amount) : undefined;
	        return message;
	    },
	};
	function createBaseQueryParamsRequest() {
	    return {};
	}
	exports.QueryParamsRequest = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryParamsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseQueryParamsRequest();
	        return message;
	    },
	};
	function createBaseQueryParamsResponse() {
	    return {
	        params: undefined,
	    };
	}
	exports.QueryParamsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.params !== undefined) {
	            bank_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryParamsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.params = bank_1.Params.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            params: (0, helpers_1.isSet)(object.params) ? bank_1.Params.fromJSON(object.params) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.params !== undefined && (obj.params = message.params ? bank_1.Params.toJSON(message.params) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryParamsResponse();
	        message.params =
	            object.params !== undefined && object.params !== null ? bank_1.Params.fromPartial(object.params) : undefined;
	        return message;
	    },
	};
	function createBaseQueryDenomsMetadataRequest() {
	    return {
	        pagination: undefined,
	    };
	}
	exports.QueryDenomsMetadataRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDenomsMetadataRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDenomsMetadataRequest();
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryDenomsMetadataResponse() {
	    return {
	        metadatas: [],
	        pagination: undefined,
	    };
	}
	exports.QueryDenomsMetadataResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.metadatas) {
	            bank_1.Metadata.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDenomsMetadataResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.metadatas.push(bank_1.Metadata.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            metadatas: Array.isArray(object?.metadatas)
	                ? object.metadatas.map((e) => bank_1.Metadata.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.metadatas) {
	            obj.metadatas = message.metadatas.map((e) => (e ? bank_1.Metadata.toJSON(e) : undefined));
	        }
	        else {
	            obj.metadatas = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDenomsMetadataResponse();
	        message.metadatas = object.metadatas?.map((e) => bank_1.Metadata.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryDenomMetadataRequest() {
	    return {
	        denom: "",
	    };
	}
	exports.QueryDenomMetadataRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.denom !== "") {
	            writer.uint32(10).string(message.denom);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDenomMetadataRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.denom = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            denom: (0, helpers_1.isSet)(object.denom) ? String(object.denom) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.denom !== undefined && (obj.denom = message.denom);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDenomMetadataRequest();
	        message.denom = object.denom ?? "";
	        return message;
	    },
	};
	function createBaseQueryDenomMetadataResponse() {
	    return {
	        metadata: undefined,
	    };
	}
	exports.QueryDenomMetadataResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.metadata !== undefined) {
	            bank_1.Metadata.encode(message.metadata, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDenomMetadataResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.metadata = bank_1.Metadata.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            metadata: (0, helpers_1.isSet)(object.metadata) ? bank_1.Metadata.fromJSON(object.metadata) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.metadata !== undefined &&
	            (obj.metadata = message.metadata ? bank_1.Metadata.toJSON(message.metadata) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDenomMetadataResponse();
	        message.metadata =
	            object.metadata !== undefined && object.metadata !== null
	                ? bank_1.Metadata.fromPartial(object.metadata)
	                : undefined;
	        return message;
	    },
	};
	class QueryClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.Balance = this.Balance.bind(this);
	        this.AllBalances = this.AllBalances.bind(this);
	        this.SpendableBalances = this.SpendableBalances.bind(this);
	        this.TotalSupply = this.TotalSupply.bind(this);
	        this.SupplyOf = this.SupplyOf.bind(this);
	        this.Params = this.Params.bind(this);
	        this.DenomMetadata = this.DenomMetadata.bind(this);
	        this.DenomsMetadata = this.DenomsMetadata.bind(this);
	    }
	    Balance(request) {
	        const data = exports.QueryBalanceRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "Balance", data);
	        return promise.then((data) => exports.QueryBalanceResponse.decode(new _m0.Reader(data)));
	    }
	    AllBalances(request) {
	        const data = exports.QueryAllBalancesRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "AllBalances", data);
	        return promise.then((data) => exports.QueryAllBalancesResponse.decode(new _m0.Reader(data)));
	    }
	    SpendableBalances(request) {
	        const data = exports.QuerySpendableBalancesRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "SpendableBalances", data);
	        return promise.then((data) => exports.QuerySpendableBalancesResponse.decode(new _m0.Reader(data)));
	    }
	    TotalSupply(request = {
	        pagination: undefined,
	    }) {
	        const data = exports.QueryTotalSupplyRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "TotalSupply", data);
	        return promise.then((data) => exports.QueryTotalSupplyResponse.decode(new _m0.Reader(data)));
	    }
	    SupplyOf(request) {
	        const data = exports.QuerySupplyOfRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "SupplyOf", data);
	        return promise.then((data) => exports.QuerySupplyOfResponse.decode(new _m0.Reader(data)));
	    }
	    Params(request = {}) {
	        const data = exports.QueryParamsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "Params", data);
	        return promise.then((data) => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
	    }
	    DenomMetadata(request) {
	        const data = exports.QueryDenomMetadataRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "DenomMetadata", data);
	        return promise.then((data) => exports.QueryDenomMetadataResponse.decode(new _m0.Reader(data)));
	    }
	    DenomsMetadata(request = {
	        pagination: undefined,
	    }) {
	        const data = exports.QueryDenomsMetadataRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.bank.v1beta1.Query", "DenomsMetadata", data);
	        return promise.then((data) => exports.QueryDenomsMetadataResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.QueryClientImpl = QueryClientImpl;
	
} (query$a));

Object.defineProperty(queries$8, "__esModule", { value: true });
queries$8.setupBankExtension = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const utils_1$6 = build$5;
const query_1$7 = query$a;
const queryclient_1$a = queryclient$1;
function setupBankExtension(base) {
    const rpc = (0, queryclient_1$a.createProtobufRpcClient)(base);
    // Use this service to get easy typed access to query methods
    // This cannot be used for proof verification
    const queryService = new query_1$7.QueryClientImpl(rpc);
    return {
        bank: {
            balance: async (address, denom) => {
                const { balance } = await queryService.Balance({ address: address, denom: denom });
                (0, utils_1$6.assert)(balance);
                return balance;
            },
            allBalances: async (address) => {
                const { balances } = await queryService.AllBalances({ address: address });
                return balances;
            },
            totalSupply: async (paginationKey) => {
                const response = await queryService.TotalSupply({
                    pagination: (0, queryclient_1$a.createPagination)(paginationKey),
                });
                return response;
            },
            supplyOf: async (denom) => {
                const { amount } = await queryService.SupplyOf({ denom: denom });
                (0, utils_1$6.assert)(amount);
                return amount;
            },
            denomMetadata: async (denom) => {
                const { metadata } = await queryService.DenomMetadata({ denom });
                (0, utils_1$6.assert)(metadata);
                return metadata;
            },
            denomsMetadata: async () => {
                const { metadatas } = await queryService.DenomsMetadata({
                    pagination: undefined, // Not implemented
                });
                return metadatas;
            },
        },
    };
}
queries$8.setupBankExtension = setupBankExtension;

var aminomessages$8 = {};

Object.defineProperty(aminomessages$8, "__esModule", { value: true });
aminomessages$8.createCrysisAminoConverters = aminomessages$8.isAminoMsgVerifyInvariant = void 0;
function isAminoMsgVerifyInvariant(msg) {
    return msg.type === "cosmos-sdk/MsgVerifyInvariant";
}
aminomessages$8.isAminoMsgVerifyInvariant = isAminoMsgVerifyInvariant;
function createCrysisAminoConverters() {
    throw new Error("Not implemented");
}
aminomessages$8.createCrysisAminoConverters = createCrysisAminoConverters;

var aminomessages$7 = {};

Object.defineProperty(aminomessages$7, "__esModule", { value: true });
aminomessages$7.createDistributionAminoConverters = aminomessages$7.isAminoMsgFundCommunityPool = aminomessages$7.isAminoMsgWithdrawValidatorCommission = aminomessages$7.isAminoMsgWithdrawDelegatorReward = aminomessages$7.isAminoMsgSetWithdrawAddress = void 0;
function isAminoMsgSetWithdrawAddress(msg) {
    // NOTE: Type string and names diverge here!
    return msg.type === "cosmos-sdk/MsgModifyWithdrawAddress";
}
aminomessages$7.isAminoMsgSetWithdrawAddress = isAminoMsgSetWithdrawAddress;
function isAminoMsgWithdrawDelegatorReward(msg) {
    // NOTE: Type string and names diverge here!
    return msg.type === "cosmos-sdk/MsgWithdrawDelegationReward";
}
aminomessages$7.isAminoMsgWithdrawDelegatorReward = isAminoMsgWithdrawDelegatorReward;
function isAminoMsgWithdrawValidatorCommission(msg) {
    return msg.type === "cosmos-sdk/MsgWithdrawValidatorCommission";
}
aminomessages$7.isAminoMsgWithdrawValidatorCommission = isAminoMsgWithdrawValidatorCommission;
function isAminoMsgFundCommunityPool(msg) {
    return msg.type === "cosmos-sdk/MsgFundCommunityPool";
}
aminomessages$7.isAminoMsgFundCommunityPool = isAminoMsgFundCommunityPool;
function createDistributionAminoConverters() {
    return {
        "/cosmos.distribution.v1beta1.MsgFundCommunityPool": {
            aminoType: "cosmos-sdk/MsgFundCommunityPool",
            toAmino: ({ amount, depositor }) => ({
                amount: [...amount],
                depositor: depositor,
            }),
            fromAmino: ({ amount, depositor }) => ({
                amount: [...amount],
                depositor: depositor,
            }),
        },
        "/cosmos.distribution.v1beta1.MsgSetWithdrawAddress": {
            aminoType: "cosmos-sdk/MsgModifyWithdrawAddress",
            toAmino: ({ delegatorAddress, withdrawAddress, }) => ({
                delegator_address: delegatorAddress,
                withdraw_address: withdrawAddress,
            }),
            fromAmino: ({ delegator_address, withdraw_address, }) => ({
                delegatorAddress: delegator_address,
                withdrawAddress: withdraw_address,
            }),
        },
        "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward": {
            aminoType: "cosmos-sdk/MsgWithdrawDelegationReward",
            toAmino: ({ delegatorAddress, validatorAddress, }) => ({
                delegator_address: delegatorAddress,
                validator_address: validatorAddress,
            }),
            fromAmino: ({ delegator_address, validator_address, }) => ({
                delegatorAddress: delegator_address,
                validatorAddress: validator_address,
            }),
        },
        "/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission": {
            aminoType: "cosmos-sdk/MsgWithdrawValidatorCommission",
            toAmino: ({ validatorAddress, }) => ({
                validator_address: validatorAddress,
            }),
            fromAmino: ({ validator_address, }) => ({
                validatorAddress: validator_address,
            }),
        },
    };
}
aminomessages$7.createDistributionAminoConverters = createDistributionAminoConverters;

var messages$5 = {};

var tx$b = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.MsgClientImpl = exports.MsgFundCommunityPoolResponse = exports.MsgFundCommunityPool = exports.MsgWithdrawValidatorCommissionResponse = exports.MsgWithdrawValidatorCommission = exports.MsgWithdrawDelegatorRewardResponse = exports.MsgWithdrawDelegatorReward = exports.MsgSetWithdrawAddressResponse = exports.MsgSetWithdrawAddress = exports.protobufPackage = void 0;
	/* eslint-disable */
	const coin_1 = coin$1;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.distribution.v1beta1";
	function createBaseMsgSetWithdrawAddress() {
	    return {
	        delegatorAddress: "",
	        withdrawAddress: "",
	    };
	}
	exports.MsgSetWithdrawAddress = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddress !== "") {
	            writer.uint32(10).string(message.delegatorAddress);
	        }
	        if (message.withdrawAddress !== "") {
	            writer.uint32(18).string(message.withdrawAddress);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgSetWithdrawAddress();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddress = reader.string();
	                    break;
	                case 2:
	                    message.withdrawAddress = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddress: (0, helpers_1.isSet)(object.delegatorAddress) ? String(object.delegatorAddress) : "",
	            withdrawAddress: (0, helpers_1.isSet)(object.withdrawAddress) ? String(object.withdrawAddress) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);
	        message.withdrawAddress !== undefined && (obj.withdrawAddress = message.withdrawAddress);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgSetWithdrawAddress();
	        message.delegatorAddress = object.delegatorAddress ?? "";
	        message.withdrawAddress = object.withdrawAddress ?? "";
	        return message;
	    },
	};
	function createBaseMsgSetWithdrawAddressResponse() {
	    return {};
	}
	exports.MsgSetWithdrawAddressResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgSetWithdrawAddressResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgSetWithdrawAddressResponse();
	        return message;
	    },
	};
	function createBaseMsgWithdrawDelegatorReward() {
	    return {
	        delegatorAddress: "",
	        validatorAddress: "",
	    };
	}
	exports.MsgWithdrawDelegatorReward = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddress !== "") {
	            writer.uint32(10).string(message.delegatorAddress);
	        }
	        if (message.validatorAddress !== "") {
	            writer.uint32(18).string(message.validatorAddress);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgWithdrawDelegatorReward();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddress = reader.string();
	                    break;
	                case 2:
	                    message.validatorAddress = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddress: (0, helpers_1.isSet)(object.delegatorAddress) ? String(object.delegatorAddress) : "",
	            validatorAddress: (0, helpers_1.isSet)(object.validatorAddress) ? String(object.validatorAddress) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);
	        message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgWithdrawDelegatorReward();
	        message.delegatorAddress = object.delegatorAddress ?? "";
	        message.validatorAddress = object.validatorAddress ?? "";
	        return message;
	    },
	};
	function createBaseMsgWithdrawDelegatorRewardResponse() {
	    return {};
	}
	exports.MsgWithdrawDelegatorRewardResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgWithdrawDelegatorRewardResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgWithdrawDelegatorRewardResponse();
	        return message;
	    },
	};
	function createBaseMsgWithdrawValidatorCommission() {
	    return {
	        validatorAddress: "",
	    };
	}
	exports.MsgWithdrawValidatorCommission = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.validatorAddress !== "") {
	            writer.uint32(10).string(message.validatorAddress);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgWithdrawValidatorCommission();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.validatorAddress = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            validatorAddress: (0, helpers_1.isSet)(object.validatorAddress) ? String(object.validatorAddress) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgWithdrawValidatorCommission();
	        message.validatorAddress = object.validatorAddress ?? "";
	        return message;
	    },
	};
	function createBaseMsgWithdrawValidatorCommissionResponse() {
	    return {};
	}
	exports.MsgWithdrawValidatorCommissionResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgWithdrawValidatorCommissionResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgWithdrawValidatorCommissionResponse();
	        return message;
	    },
	};
	function createBaseMsgFundCommunityPool() {
	    return {
	        amount: [],
	        depositor: "",
	    };
	}
	exports.MsgFundCommunityPool = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.amount) {
	            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.depositor !== "") {
	            writer.uint32(18).string(message.depositor);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgFundCommunityPool();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.depositor = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            amount: Array.isArray(object?.amount) ? object.amount.map((e) => coin_1.Coin.fromJSON(e)) : [],
	            depositor: (0, helpers_1.isSet)(object.depositor) ? String(object.depositor) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.amount) {
	            obj.amount = message.amount.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.amount = [];
	        }
	        message.depositor !== undefined && (obj.depositor = message.depositor);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgFundCommunityPool();
	        message.amount = object.amount?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        message.depositor = object.depositor ?? "";
	        return message;
	    },
	};
	function createBaseMsgFundCommunityPoolResponse() {
	    return {};
	}
	exports.MsgFundCommunityPoolResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgFundCommunityPoolResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgFundCommunityPoolResponse();
	        return message;
	    },
	};
	class MsgClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.SetWithdrawAddress = this.SetWithdrawAddress.bind(this);
	        this.WithdrawDelegatorReward = this.WithdrawDelegatorReward.bind(this);
	        this.WithdrawValidatorCommission = this.WithdrawValidatorCommission.bind(this);
	        this.FundCommunityPool = this.FundCommunityPool.bind(this);
	    }
	    SetWithdrawAddress(request) {
	        const data = exports.MsgSetWithdrawAddress.encode(request).finish();
	        const promise = this.rpc.request("cosmos.distribution.v1beta1.Msg", "SetWithdrawAddress", data);
	        return promise.then((data) => exports.MsgSetWithdrawAddressResponse.decode(new _m0.Reader(data)));
	    }
	    WithdrawDelegatorReward(request) {
	        const data = exports.MsgWithdrawDelegatorReward.encode(request).finish();
	        const promise = this.rpc.request("cosmos.distribution.v1beta1.Msg", "WithdrawDelegatorReward", data);
	        return promise.then((data) => exports.MsgWithdrawDelegatorRewardResponse.decode(new _m0.Reader(data)));
	    }
	    WithdrawValidatorCommission(request) {
	        const data = exports.MsgWithdrawValidatorCommission.encode(request).finish();
	        const promise = this.rpc.request("cosmos.distribution.v1beta1.Msg", "WithdrawValidatorCommission", data);
	        return promise.then((data) => exports.MsgWithdrawValidatorCommissionResponse.decode(new _m0.Reader(data)));
	    }
	    FundCommunityPool(request) {
	        const data = exports.MsgFundCommunityPool.encode(request).finish();
	        const promise = this.rpc.request("cosmos.distribution.v1beta1.Msg", "FundCommunityPool", data);
	        return promise.then((data) => exports.MsgFundCommunityPoolResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.MsgClientImpl = MsgClientImpl;
	
} (tx$b));

Object.defineProperty(messages$5, "__esModule", { value: true });
messages$5.isMsgWithdrawDelegatorRewardEncodeObject = messages$5.distributionTypes = void 0;
const tx_1$8 = tx$b;
messages$5.distributionTypes = [
    ["/cosmos.distribution.v1beta1.MsgFundCommunityPool", tx_1$8.MsgFundCommunityPool],
    ["/cosmos.distribution.v1beta1.MsgSetWithdrawAddress", tx_1$8.MsgSetWithdrawAddress],
    ["/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward", tx_1$8.MsgWithdrawDelegatorReward],
    ["/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission", tx_1$8.MsgWithdrawValidatorCommission],
];
function isMsgWithdrawDelegatorRewardEncodeObject(object) {
    return (object.typeUrl ===
        "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward");
}
messages$5.isMsgWithdrawDelegatorRewardEncodeObject = isMsgWithdrawDelegatorRewardEncodeObject;

var queries$7 = {};

var query$9 = {};

var distribution = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CommunityPoolSpendProposalWithDeposit = exports.DelegationDelegatorReward = exports.DelegatorStartingInfo = exports.CommunityPoolSpendProposal = exports.FeePool = exports.ValidatorSlashEvents = exports.ValidatorSlashEvent = exports.ValidatorOutstandingRewards = exports.ValidatorAccumulatedCommission = exports.ValidatorCurrentRewards = exports.ValidatorHistoricalRewards = exports.Params = exports.protobufPackage = void 0;
	/* eslint-disable */
	const coin_1 = coin$1;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.distribution.v1beta1";
	function createBaseParams() {
	    return {
	        communityTax: "",
	        baseProposerReward: "",
	        bonusProposerReward: "",
	        withdrawAddrEnabled: false,
	    };
	}
	exports.Params = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.communityTax !== "") {
	            writer.uint32(10).string(message.communityTax);
	        }
	        if (message.baseProposerReward !== "") {
	            writer.uint32(18).string(message.baseProposerReward);
	        }
	        if (message.bonusProposerReward !== "") {
	            writer.uint32(26).string(message.bonusProposerReward);
	        }
	        if (message.withdrawAddrEnabled === true) {
	            writer.uint32(32).bool(message.withdrawAddrEnabled);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseParams();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.communityTax = reader.string();
	                    break;
	                case 2:
	                    message.baseProposerReward = reader.string();
	                    break;
	                case 3:
	                    message.bonusProposerReward = reader.string();
	                    break;
	                case 4:
	                    message.withdrawAddrEnabled = reader.bool();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            communityTax: (0, helpers_1.isSet)(object.communityTax) ? String(object.communityTax) : "",
	            baseProposerReward: (0, helpers_1.isSet)(object.baseProposerReward) ? String(object.baseProposerReward) : "",
	            bonusProposerReward: (0, helpers_1.isSet)(object.bonusProposerReward) ? String(object.bonusProposerReward) : "",
	            withdrawAddrEnabled: (0, helpers_1.isSet)(object.withdrawAddrEnabled) ? Boolean(object.withdrawAddrEnabled) : false,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.communityTax !== undefined && (obj.communityTax = message.communityTax);
	        message.baseProposerReward !== undefined && (obj.baseProposerReward = message.baseProposerReward);
	        message.bonusProposerReward !== undefined && (obj.bonusProposerReward = message.bonusProposerReward);
	        message.withdrawAddrEnabled !== undefined && (obj.withdrawAddrEnabled = message.withdrawAddrEnabled);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseParams();
	        message.communityTax = object.communityTax ?? "";
	        message.baseProposerReward = object.baseProposerReward ?? "";
	        message.bonusProposerReward = object.bonusProposerReward ?? "";
	        message.withdrawAddrEnabled = object.withdrawAddrEnabled ?? false;
	        return message;
	    },
	};
	function createBaseValidatorHistoricalRewards() {
	    return {
	        cumulativeRewardRatio: [],
	        referenceCount: 0,
	    };
	}
	exports.ValidatorHistoricalRewards = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.cumulativeRewardRatio) {
	            coin_1.DecCoin.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.referenceCount !== 0) {
	            writer.uint32(16).uint32(message.referenceCount);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseValidatorHistoricalRewards();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.cumulativeRewardRatio.push(coin_1.DecCoin.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.referenceCount = reader.uint32();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            cumulativeRewardRatio: Array.isArray(object?.cumulativeRewardRatio)
	                ? object.cumulativeRewardRatio.map((e) => coin_1.DecCoin.fromJSON(e))
	                : [],
	            referenceCount: (0, helpers_1.isSet)(object.referenceCount) ? Number(object.referenceCount) : 0,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.cumulativeRewardRatio) {
	            obj.cumulativeRewardRatio = message.cumulativeRewardRatio.map((e) => e ? coin_1.DecCoin.toJSON(e) : undefined);
	        }
	        else {
	            obj.cumulativeRewardRatio = [];
	        }
	        message.referenceCount !== undefined && (obj.referenceCount = Math.round(message.referenceCount));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseValidatorHistoricalRewards();
	        message.cumulativeRewardRatio = object.cumulativeRewardRatio?.map((e) => coin_1.DecCoin.fromPartial(e)) || [];
	        message.referenceCount = object.referenceCount ?? 0;
	        return message;
	    },
	};
	function createBaseValidatorCurrentRewards() {
	    return {
	        rewards: [],
	        period: helpers_1.Long.UZERO,
	    };
	}
	exports.ValidatorCurrentRewards = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.rewards) {
	            coin_1.DecCoin.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (!message.period.isZero()) {
	            writer.uint32(16).uint64(message.period);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseValidatorCurrentRewards();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.rewards.push(coin_1.DecCoin.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.period = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            rewards: Array.isArray(object?.rewards) ? object.rewards.map((e) => coin_1.DecCoin.fromJSON(e)) : [],
	            period: (0, helpers_1.isSet)(object.period) ? helpers_1.Long.fromValue(object.period) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.rewards) {
	            obj.rewards = message.rewards.map((e) => (e ? coin_1.DecCoin.toJSON(e) : undefined));
	        }
	        else {
	            obj.rewards = [];
	        }
	        message.period !== undefined && (obj.period = (message.period || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseValidatorCurrentRewards();
	        message.rewards = object.rewards?.map((e) => coin_1.DecCoin.fromPartial(e)) || [];
	        message.period =
	            object.period !== undefined && object.period !== null ? helpers_1.Long.fromValue(object.period) : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseValidatorAccumulatedCommission() {
	    return {
	        commission: [],
	    };
	}
	exports.ValidatorAccumulatedCommission = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.commission) {
	            coin_1.DecCoin.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseValidatorAccumulatedCommission();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.commission.push(coin_1.DecCoin.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            commission: Array.isArray(object?.commission)
	                ? object.commission.map((e) => coin_1.DecCoin.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.commission) {
	            obj.commission = message.commission.map((e) => (e ? coin_1.DecCoin.toJSON(e) : undefined));
	        }
	        else {
	            obj.commission = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseValidatorAccumulatedCommission();
	        message.commission = object.commission?.map((e) => coin_1.DecCoin.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseValidatorOutstandingRewards() {
	    return {
	        rewards: [],
	    };
	}
	exports.ValidatorOutstandingRewards = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.rewards) {
	            coin_1.DecCoin.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseValidatorOutstandingRewards();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.rewards.push(coin_1.DecCoin.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            rewards: Array.isArray(object?.rewards) ? object.rewards.map((e) => coin_1.DecCoin.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.rewards) {
	            obj.rewards = message.rewards.map((e) => (e ? coin_1.DecCoin.toJSON(e) : undefined));
	        }
	        else {
	            obj.rewards = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseValidatorOutstandingRewards();
	        message.rewards = object.rewards?.map((e) => coin_1.DecCoin.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseValidatorSlashEvent() {
	    return {
	        validatorPeriod: helpers_1.Long.UZERO,
	        fraction: "",
	    };
	}
	exports.ValidatorSlashEvent = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.validatorPeriod.isZero()) {
	            writer.uint32(8).uint64(message.validatorPeriod);
	        }
	        if (message.fraction !== "") {
	            writer.uint32(18).string(message.fraction);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseValidatorSlashEvent();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.validatorPeriod = reader.uint64();
	                    break;
	                case 2:
	                    message.fraction = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            validatorPeriod: (0, helpers_1.isSet)(object.validatorPeriod) ? helpers_1.Long.fromValue(object.validatorPeriod) : helpers_1.Long.UZERO,
	            fraction: (0, helpers_1.isSet)(object.fraction) ? String(object.fraction) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.validatorPeriod !== undefined &&
	            (obj.validatorPeriod = (message.validatorPeriod || helpers_1.Long.UZERO).toString());
	        message.fraction !== undefined && (obj.fraction = message.fraction);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseValidatorSlashEvent();
	        message.validatorPeriod =
	            object.validatorPeriod !== undefined && object.validatorPeriod !== null
	                ? helpers_1.Long.fromValue(object.validatorPeriod)
	                : helpers_1.Long.UZERO;
	        message.fraction = object.fraction ?? "";
	        return message;
	    },
	};
	function createBaseValidatorSlashEvents() {
	    return {
	        validatorSlashEvents: [],
	    };
	}
	exports.ValidatorSlashEvents = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.validatorSlashEvents) {
	            exports.ValidatorSlashEvent.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseValidatorSlashEvents();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.validatorSlashEvents.push(exports.ValidatorSlashEvent.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            validatorSlashEvents: Array.isArray(object?.validatorSlashEvents)
	                ? object.validatorSlashEvents.map((e) => exports.ValidatorSlashEvent.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.validatorSlashEvents) {
	            obj.validatorSlashEvents = message.validatorSlashEvents.map((e) => e ? exports.ValidatorSlashEvent.toJSON(e) : undefined);
	        }
	        else {
	            obj.validatorSlashEvents = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseValidatorSlashEvents();
	        message.validatorSlashEvents =
	            object.validatorSlashEvents?.map((e) => exports.ValidatorSlashEvent.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseFeePool() {
	    return {
	        communityPool: [],
	    };
	}
	exports.FeePool = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.communityPool) {
	            coin_1.DecCoin.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseFeePool();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.communityPool.push(coin_1.DecCoin.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            communityPool: Array.isArray(object?.communityPool)
	                ? object.communityPool.map((e) => coin_1.DecCoin.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.communityPool) {
	            obj.communityPool = message.communityPool.map((e) => (e ? coin_1.DecCoin.toJSON(e) : undefined));
	        }
	        else {
	            obj.communityPool = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseFeePool();
	        message.communityPool = object.communityPool?.map((e) => coin_1.DecCoin.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseCommunityPoolSpendProposal() {
	    return {
	        title: "",
	        description: "",
	        recipient: "",
	        amount: [],
	    };
	}
	exports.CommunityPoolSpendProposal = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.title !== "") {
	            writer.uint32(10).string(message.title);
	        }
	        if (message.description !== "") {
	            writer.uint32(18).string(message.description);
	        }
	        if (message.recipient !== "") {
	            writer.uint32(26).string(message.recipient);
	        }
	        for (const v of message.amount) {
	            coin_1.Coin.encode(v, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseCommunityPoolSpendProposal();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.title = reader.string();
	                    break;
	                case 2:
	                    message.description = reader.string();
	                    break;
	                case 3:
	                    message.recipient = reader.string();
	                    break;
	                case 4:
	                    message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            title: (0, helpers_1.isSet)(object.title) ? String(object.title) : "",
	            description: (0, helpers_1.isSet)(object.description) ? String(object.description) : "",
	            recipient: (0, helpers_1.isSet)(object.recipient) ? String(object.recipient) : "",
	            amount: Array.isArray(object?.amount) ? object.amount.map((e) => coin_1.Coin.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.title !== undefined && (obj.title = message.title);
	        message.description !== undefined && (obj.description = message.description);
	        message.recipient !== undefined && (obj.recipient = message.recipient);
	        if (message.amount) {
	            obj.amount = message.amount.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.amount = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseCommunityPoolSpendProposal();
	        message.title = object.title ?? "";
	        message.description = object.description ?? "";
	        message.recipient = object.recipient ?? "";
	        message.amount = object.amount?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseDelegatorStartingInfo() {
	    return {
	        previousPeriod: helpers_1.Long.UZERO,
	        stake: "",
	        height: helpers_1.Long.UZERO,
	    };
	}
	exports.DelegatorStartingInfo = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.previousPeriod.isZero()) {
	            writer.uint32(8).uint64(message.previousPeriod);
	        }
	        if (message.stake !== "") {
	            writer.uint32(18).string(message.stake);
	        }
	        if (!message.height.isZero()) {
	            writer.uint32(24).uint64(message.height);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseDelegatorStartingInfo();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.previousPeriod = reader.uint64();
	                    break;
	                case 2:
	                    message.stake = reader.string();
	                    break;
	                case 3:
	                    message.height = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            previousPeriod: (0, helpers_1.isSet)(object.previousPeriod) ? helpers_1.Long.fromValue(object.previousPeriod) : helpers_1.Long.UZERO,
	            stake: (0, helpers_1.isSet)(object.stake) ? String(object.stake) : "",
	            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.previousPeriod !== undefined &&
	            (obj.previousPeriod = (message.previousPeriod || helpers_1.Long.UZERO).toString());
	        message.stake !== undefined && (obj.stake = message.stake);
	        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseDelegatorStartingInfo();
	        message.previousPeriod =
	            object.previousPeriod !== undefined && object.previousPeriod !== null
	                ? helpers_1.Long.fromValue(object.previousPeriod)
	                : helpers_1.Long.UZERO;
	        message.stake = object.stake ?? "";
	        message.height =
	            object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseDelegationDelegatorReward() {
	    return {
	        validatorAddress: "",
	        reward: [],
	    };
	}
	exports.DelegationDelegatorReward = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.validatorAddress !== "") {
	            writer.uint32(10).string(message.validatorAddress);
	        }
	        for (const v of message.reward) {
	            coin_1.DecCoin.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseDelegationDelegatorReward();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.validatorAddress = reader.string();
	                    break;
	                case 2:
	                    message.reward.push(coin_1.DecCoin.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            validatorAddress: (0, helpers_1.isSet)(object.validatorAddress) ? String(object.validatorAddress) : "",
	            reward: Array.isArray(object?.reward) ? object.reward.map((e) => coin_1.DecCoin.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);
	        if (message.reward) {
	            obj.reward = message.reward.map((e) => (e ? coin_1.DecCoin.toJSON(e) : undefined));
	        }
	        else {
	            obj.reward = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseDelegationDelegatorReward();
	        message.validatorAddress = object.validatorAddress ?? "";
	        message.reward = object.reward?.map((e) => coin_1.DecCoin.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseCommunityPoolSpendProposalWithDeposit() {
	    return {
	        title: "",
	        description: "",
	        recipient: "",
	        amount: "",
	        deposit: "",
	    };
	}
	exports.CommunityPoolSpendProposalWithDeposit = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.title !== "") {
	            writer.uint32(10).string(message.title);
	        }
	        if (message.description !== "") {
	            writer.uint32(18).string(message.description);
	        }
	        if (message.recipient !== "") {
	            writer.uint32(26).string(message.recipient);
	        }
	        if (message.amount !== "") {
	            writer.uint32(34).string(message.amount);
	        }
	        if (message.deposit !== "") {
	            writer.uint32(42).string(message.deposit);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseCommunityPoolSpendProposalWithDeposit();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.title = reader.string();
	                    break;
	                case 2:
	                    message.description = reader.string();
	                    break;
	                case 3:
	                    message.recipient = reader.string();
	                    break;
	                case 4:
	                    message.amount = reader.string();
	                    break;
	                case 5:
	                    message.deposit = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            title: (0, helpers_1.isSet)(object.title) ? String(object.title) : "",
	            description: (0, helpers_1.isSet)(object.description) ? String(object.description) : "",
	            recipient: (0, helpers_1.isSet)(object.recipient) ? String(object.recipient) : "",
	            amount: (0, helpers_1.isSet)(object.amount) ? String(object.amount) : "",
	            deposit: (0, helpers_1.isSet)(object.deposit) ? String(object.deposit) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.title !== undefined && (obj.title = message.title);
	        message.description !== undefined && (obj.description = message.description);
	        message.recipient !== undefined && (obj.recipient = message.recipient);
	        message.amount !== undefined && (obj.amount = message.amount);
	        message.deposit !== undefined && (obj.deposit = message.deposit);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseCommunityPoolSpendProposalWithDeposit();
	        message.title = object.title ?? "";
	        message.description = object.description ?? "";
	        message.recipient = object.recipient ?? "";
	        message.amount = object.amount ?? "";
	        message.deposit = object.deposit ?? "";
	        return message;
	    },
	};
	
} (distribution));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.QueryClientImpl = exports.QueryCommunityPoolResponse = exports.QueryCommunityPoolRequest = exports.QueryDelegatorWithdrawAddressResponse = exports.QueryDelegatorWithdrawAddressRequest = exports.QueryDelegatorValidatorsResponse = exports.QueryDelegatorValidatorsRequest = exports.QueryDelegationTotalRewardsResponse = exports.QueryDelegationTotalRewardsRequest = exports.QueryDelegationRewardsResponse = exports.QueryDelegationRewardsRequest = exports.QueryValidatorSlashesResponse = exports.QueryValidatorSlashesRequest = exports.QueryValidatorCommissionResponse = exports.QueryValidatorCommissionRequest = exports.QueryValidatorOutstandingRewardsResponse = exports.QueryValidatorOutstandingRewardsRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
	/* eslint-disable */
	const pagination_1 = pagination;
	const distribution_1 = distribution;
	const coin_1 = coin$1;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.distribution.v1beta1";
	function createBaseQueryParamsRequest() {
	    return {};
	}
	exports.QueryParamsRequest = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryParamsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseQueryParamsRequest();
	        return message;
	    },
	};
	function createBaseQueryParamsResponse() {
	    return {
	        params: undefined,
	    };
	}
	exports.QueryParamsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.params !== undefined) {
	            distribution_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryParamsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.params = distribution_1.Params.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            params: (0, helpers_1.isSet)(object.params) ? distribution_1.Params.fromJSON(object.params) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.params !== undefined && (obj.params = message.params ? distribution_1.Params.toJSON(message.params) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryParamsResponse();
	        message.params =
	            object.params !== undefined && object.params !== null ? distribution_1.Params.fromPartial(object.params) : undefined;
	        return message;
	    },
	};
	function createBaseQueryValidatorOutstandingRewardsRequest() {
	    return {
	        validatorAddress: "",
	    };
	}
	exports.QueryValidatorOutstandingRewardsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.validatorAddress !== "") {
	            writer.uint32(10).string(message.validatorAddress);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryValidatorOutstandingRewardsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.validatorAddress = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            validatorAddress: (0, helpers_1.isSet)(object.validatorAddress) ? String(object.validatorAddress) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryValidatorOutstandingRewardsRequest();
	        message.validatorAddress = object.validatorAddress ?? "";
	        return message;
	    },
	};
	function createBaseQueryValidatorOutstandingRewardsResponse() {
	    return {
	        rewards: undefined,
	    };
	}
	exports.QueryValidatorOutstandingRewardsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.rewards !== undefined) {
	            distribution_1.ValidatorOutstandingRewards.encode(message.rewards, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryValidatorOutstandingRewardsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.rewards = distribution_1.ValidatorOutstandingRewards.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            rewards: (0, helpers_1.isSet)(object.rewards) ? distribution_1.ValidatorOutstandingRewards.fromJSON(object.rewards) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.rewards !== undefined &&
	            (obj.rewards = message.rewards ? distribution_1.ValidatorOutstandingRewards.toJSON(message.rewards) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryValidatorOutstandingRewardsResponse();
	        message.rewards =
	            object.rewards !== undefined && object.rewards !== null
	                ? distribution_1.ValidatorOutstandingRewards.fromPartial(object.rewards)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryValidatorCommissionRequest() {
	    return {
	        validatorAddress: "",
	    };
	}
	exports.QueryValidatorCommissionRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.validatorAddress !== "") {
	            writer.uint32(10).string(message.validatorAddress);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryValidatorCommissionRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.validatorAddress = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            validatorAddress: (0, helpers_1.isSet)(object.validatorAddress) ? String(object.validatorAddress) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryValidatorCommissionRequest();
	        message.validatorAddress = object.validatorAddress ?? "";
	        return message;
	    },
	};
	function createBaseQueryValidatorCommissionResponse() {
	    return {
	        commission: undefined,
	    };
	}
	exports.QueryValidatorCommissionResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.commission !== undefined) {
	            distribution_1.ValidatorAccumulatedCommission.encode(message.commission, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryValidatorCommissionResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.commission = distribution_1.ValidatorAccumulatedCommission.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            commission: (0, helpers_1.isSet)(object.commission)
	                ? distribution_1.ValidatorAccumulatedCommission.fromJSON(object.commission)
	                : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.commission !== undefined &&
	            (obj.commission = message.commission
	                ? distribution_1.ValidatorAccumulatedCommission.toJSON(message.commission)
	                : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryValidatorCommissionResponse();
	        message.commission =
	            object.commission !== undefined && object.commission !== null
	                ? distribution_1.ValidatorAccumulatedCommission.fromPartial(object.commission)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryValidatorSlashesRequest() {
	    return {
	        validatorAddress: "",
	        startingHeight: helpers_1.Long.UZERO,
	        endingHeight: helpers_1.Long.UZERO,
	        pagination: undefined,
	    };
	}
	exports.QueryValidatorSlashesRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.validatorAddress !== "") {
	            writer.uint32(10).string(message.validatorAddress);
	        }
	        if (!message.startingHeight.isZero()) {
	            writer.uint32(16).uint64(message.startingHeight);
	        }
	        if (!message.endingHeight.isZero()) {
	            writer.uint32(24).uint64(message.endingHeight);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryValidatorSlashesRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.validatorAddress = reader.string();
	                    break;
	                case 2:
	                    message.startingHeight = reader.uint64();
	                    break;
	                case 3:
	                    message.endingHeight = reader.uint64();
	                    break;
	                case 4:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            validatorAddress: (0, helpers_1.isSet)(object.validatorAddress) ? String(object.validatorAddress) : "",
	            startingHeight: (0, helpers_1.isSet)(object.startingHeight) ? helpers_1.Long.fromValue(object.startingHeight) : helpers_1.Long.UZERO,
	            endingHeight: (0, helpers_1.isSet)(object.endingHeight) ? helpers_1.Long.fromValue(object.endingHeight) : helpers_1.Long.UZERO,
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);
	        message.startingHeight !== undefined &&
	            (obj.startingHeight = (message.startingHeight || helpers_1.Long.UZERO).toString());
	        message.endingHeight !== undefined &&
	            (obj.endingHeight = (message.endingHeight || helpers_1.Long.UZERO).toString());
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryValidatorSlashesRequest();
	        message.validatorAddress = object.validatorAddress ?? "";
	        message.startingHeight =
	            object.startingHeight !== undefined && object.startingHeight !== null
	                ? helpers_1.Long.fromValue(object.startingHeight)
	                : helpers_1.Long.UZERO;
	        message.endingHeight =
	            object.endingHeight !== undefined && object.endingHeight !== null
	                ? helpers_1.Long.fromValue(object.endingHeight)
	                : helpers_1.Long.UZERO;
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryValidatorSlashesResponse() {
	    return {
	        slashes: [],
	        pagination: undefined,
	    };
	}
	exports.QueryValidatorSlashesResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.slashes) {
	            distribution_1.ValidatorSlashEvent.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryValidatorSlashesResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.slashes.push(distribution_1.ValidatorSlashEvent.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            slashes: Array.isArray(object?.slashes)
	                ? object.slashes.map((e) => distribution_1.ValidatorSlashEvent.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.slashes) {
	            obj.slashes = message.slashes.map((e) => (e ? distribution_1.ValidatorSlashEvent.toJSON(e) : undefined));
	        }
	        else {
	            obj.slashes = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryValidatorSlashesResponse();
	        message.slashes = object.slashes?.map((e) => distribution_1.ValidatorSlashEvent.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryDelegationRewardsRequest() {
	    return {
	        delegatorAddress: "",
	        validatorAddress: "",
	    };
	}
	exports.QueryDelegationRewardsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddress !== "") {
	            writer.uint32(10).string(message.delegatorAddress);
	        }
	        if (message.validatorAddress !== "") {
	            writer.uint32(18).string(message.validatorAddress);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDelegationRewardsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddress = reader.string();
	                    break;
	                case 2:
	                    message.validatorAddress = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddress: (0, helpers_1.isSet)(object.delegatorAddress) ? String(object.delegatorAddress) : "",
	            validatorAddress: (0, helpers_1.isSet)(object.validatorAddress) ? String(object.validatorAddress) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);
	        message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDelegationRewardsRequest();
	        message.delegatorAddress = object.delegatorAddress ?? "";
	        message.validatorAddress = object.validatorAddress ?? "";
	        return message;
	    },
	};
	function createBaseQueryDelegationRewardsResponse() {
	    return {
	        rewards: [],
	    };
	}
	exports.QueryDelegationRewardsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.rewards) {
	            coin_1.DecCoin.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDelegationRewardsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.rewards.push(coin_1.DecCoin.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            rewards: Array.isArray(object?.rewards) ? object.rewards.map((e) => coin_1.DecCoin.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.rewards) {
	            obj.rewards = message.rewards.map((e) => (e ? coin_1.DecCoin.toJSON(e) : undefined));
	        }
	        else {
	            obj.rewards = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDelegationRewardsResponse();
	        message.rewards = object.rewards?.map((e) => coin_1.DecCoin.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseQueryDelegationTotalRewardsRequest() {
	    return {
	        delegatorAddress: "",
	    };
	}
	exports.QueryDelegationTotalRewardsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddress !== "") {
	            writer.uint32(10).string(message.delegatorAddress);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDelegationTotalRewardsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddress = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddress: (0, helpers_1.isSet)(object.delegatorAddress) ? String(object.delegatorAddress) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDelegationTotalRewardsRequest();
	        message.delegatorAddress = object.delegatorAddress ?? "";
	        return message;
	    },
	};
	function createBaseQueryDelegationTotalRewardsResponse() {
	    return {
	        rewards: [],
	        total: [],
	    };
	}
	exports.QueryDelegationTotalRewardsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.rewards) {
	            distribution_1.DelegationDelegatorReward.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        for (const v of message.total) {
	            coin_1.DecCoin.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDelegationTotalRewardsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.rewards.push(distribution_1.DelegationDelegatorReward.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.total.push(coin_1.DecCoin.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            rewards: Array.isArray(object?.rewards)
	                ? object.rewards.map((e) => distribution_1.DelegationDelegatorReward.fromJSON(e))
	                : [],
	            total: Array.isArray(object?.total) ? object.total.map((e) => coin_1.DecCoin.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.rewards) {
	            obj.rewards = message.rewards.map((e) => (e ? distribution_1.DelegationDelegatorReward.toJSON(e) : undefined));
	        }
	        else {
	            obj.rewards = [];
	        }
	        if (message.total) {
	            obj.total = message.total.map((e) => (e ? coin_1.DecCoin.toJSON(e) : undefined));
	        }
	        else {
	            obj.total = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDelegationTotalRewardsResponse();
	        message.rewards = object.rewards?.map((e) => distribution_1.DelegationDelegatorReward.fromPartial(e)) || [];
	        message.total = object.total?.map((e) => coin_1.DecCoin.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseQueryDelegatorValidatorsRequest() {
	    return {
	        delegatorAddress: "",
	    };
	}
	exports.QueryDelegatorValidatorsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddress !== "") {
	            writer.uint32(10).string(message.delegatorAddress);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDelegatorValidatorsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddress = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddress: (0, helpers_1.isSet)(object.delegatorAddress) ? String(object.delegatorAddress) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDelegatorValidatorsRequest();
	        message.delegatorAddress = object.delegatorAddress ?? "";
	        return message;
	    },
	};
	function createBaseQueryDelegatorValidatorsResponse() {
	    return {
	        validators: [],
	    };
	}
	exports.QueryDelegatorValidatorsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.validators) {
	            writer.uint32(10).string(v);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDelegatorValidatorsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.validators.push(reader.string());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            validators: Array.isArray(object?.validators) ? object.validators.map((e) => String(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.validators) {
	            obj.validators = message.validators.map((e) => e);
	        }
	        else {
	            obj.validators = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDelegatorValidatorsResponse();
	        message.validators = object.validators?.map((e) => e) || [];
	        return message;
	    },
	};
	function createBaseQueryDelegatorWithdrawAddressRequest() {
	    return {
	        delegatorAddress: "",
	    };
	}
	exports.QueryDelegatorWithdrawAddressRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddress !== "") {
	            writer.uint32(10).string(message.delegatorAddress);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDelegatorWithdrawAddressRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddress = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddress: (0, helpers_1.isSet)(object.delegatorAddress) ? String(object.delegatorAddress) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDelegatorWithdrawAddressRequest();
	        message.delegatorAddress = object.delegatorAddress ?? "";
	        return message;
	    },
	};
	function createBaseQueryDelegatorWithdrawAddressResponse() {
	    return {
	        withdrawAddress: "",
	    };
	}
	exports.QueryDelegatorWithdrawAddressResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.withdrawAddress !== "") {
	            writer.uint32(10).string(message.withdrawAddress);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDelegatorWithdrawAddressResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.withdrawAddress = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            withdrawAddress: (0, helpers_1.isSet)(object.withdrawAddress) ? String(object.withdrawAddress) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.withdrawAddress !== undefined && (obj.withdrawAddress = message.withdrawAddress);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDelegatorWithdrawAddressResponse();
	        message.withdrawAddress = object.withdrawAddress ?? "";
	        return message;
	    },
	};
	function createBaseQueryCommunityPoolRequest() {
	    return {};
	}
	exports.QueryCommunityPoolRequest = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryCommunityPoolRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseQueryCommunityPoolRequest();
	        return message;
	    },
	};
	function createBaseQueryCommunityPoolResponse() {
	    return {
	        pool: [],
	    };
	}
	exports.QueryCommunityPoolResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.pool) {
	            coin_1.DecCoin.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryCommunityPoolResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.pool.push(coin_1.DecCoin.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            pool: Array.isArray(object?.pool) ? object.pool.map((e) => coin_1.DecCoin.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.pool) {
	            obj.pool = message.pool.map((e) => (e ? coin_1.DecCoin.toJSON(e) : undefined));
	        }
	        else {
	            obj.pool = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryCommunityPoolResponse();
	        message.pool = object.pool?.map((e) => coin_1.DecCoin.fromPartial(e)) || [];
	        return message;
	    },
	};
	class QueryClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.Params = this.Params.bind(this);
	        this.ValidatorOutstandingRewards = this.ValidatorOutstandingRewards.bind(this);
	        this.ValidatorCommission = this.ValidatorCommission.bind(this);
	        this.ValidatorSlashes = this.ValidatorSlashes.bind(this);
	        this.DelegationRewards = this.DelegationRewards.bind(this);
	        this.DelegationTotalRewards = this.DelegationTotalRewards.bind(this);
	        this.DelegatorValidators = this.DelegatorValidators.bind(this);
	        this.DelegatorWithdrawAddress = this.DelegatorWithdrawAddress.bind(this);
	        this.CommunityPool = this.CommunityPool.bind(this);
	    }
	    Params(request = {}) {
	        const data = exports.QueryParamsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.distribution.v1beta1.Query", "Params", data);
	        return promise.then((data) => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
	    }
	    ValidatorOutstandingRewards(request) {
	        const data = exports.QueryValidatorOutstandingRewardsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.distribution.v1beta1.Query", "ValidatorOutstandingRewards", data);
	        return promise.then((data) => exports.QueryValidatorOutstandingRewardsResponse.decode(new _m0.Reader(data)));
	    }
	    ValidatorCommission(request) {
	        const data = exports.QueryValidatorCommissionRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.distribution.v1beta1.Query", "ValidatorCommission", data);
	        return promise.then((data) => exports.QueryValidatorCommissionResponse.decode(new _m0.Reader(data)));
	    }
	    ValidatorSlashes(request) {
	        const data = exports.QueryValidatorSlashesRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.distribution.v1beta1.Query", "ValidatorSlashes", data);
	        return promise.then((data) => exports.QueryValidatorSlashesResponse.decode(new _m0.Reader(data)));
	    }
	    DelegationRewards(request) {
	        const data = exports.QueryDelegationRewardsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.distribution.v1beta1.Query", "DelegationRewards", data);
	        return promise.then((data) => exports.QueryDelegationRewardsResponse.decode(new _m0.Reader(data)));
	    }
	    DelegationTotalRewards(request) {
	        const data = exports.QueryDelegationTotalRewardsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.distribution.v1beta1.Query", "DelegationTotalRewards", data);
	        return promise.then((data) => exports.QueryDelegationTotalRewardsResponse.decode(new _m0.Reader(data)));
	    }
	    DelegatorValidators(request) {
	        const data = exports.QueryDelegatorValidatorsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.distribution.v1beta1.Query", "DelegatorValidators", data);
	        return promise.then((data) => exports.QueryDelegatorValidatorsResponse.decode(new _m0.Reader(data)));
	    }
	    DelegatorWithdrawAddress(request) {
	        const data = exports.QueryDelegatorWithdrawAddressRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.distribution.v1beta1.Query", "DelegatorWithdrawAddress", data);
	        return promise.then((data) => exports.QueryDelegatorWithdrawAddressResponse.decode(new _m0.Reader(data)));
	    }
	    CommunityPool(request = {}) {
	        const data = exports.QueryCommunityPoolRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.distribution.v1beta1.Query", "CommunityPool", data);
	        return promise.then((data) => exports.QueryCommunityPoolResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.QueryClientImpl = QueryClientImpl;
	
} (query$9));

var __importDefault$9 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(queries$7, "__esModule", { value: true });
queries$7.setupDistributionExtension = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const query_1$6 = query$9;
const long_1$7 = __importDefault$9(long);
const queryclient_1$9 = queryclient$1;
function setupDistributionExtension(base) {
    const rpc = (0, queryclient_1$9.createProtobufRpcClient)(base);
    // Use this service to get easy typed access to query methods
    // This cannot be used for proof verification
    const queryService = new query_1$6.QueryClientImpl(rpc);
    return {
        distribution: {
            communityPool: async () => {
                const response = await queryService.CommunityPool({});
                return response;
            },
            delegationRewards: async (delegatorAddress, validatorAddress) => {
                const response = await queryService.DelegationRewards({
                    delegatorAddress: delegatorAddress,
                    validatorAddress: validatorAddress,
                });
                return response;
            },
            delegationTotalRewards: async (delegatorAddress) => {
                const response = await queryService.DelegationTotalRewards({
                    delegatorAddress: delegatorAddress,
                });
                return response;
            },
            delegatorValidators: async (delegatorAddress) => {
                const response = await queryService.DelegatorValidators({
                    delegatorAddress: delegatorAddress,
                });
                return response;
            },
            delegatorWithdrawAddress: async (delegatorAddress) => {
                const response = await queryService.DelegatorWithdrawAddress({
                    delegatorAddress: delegatorAddress,
                });
                return response;
            },
            params: async () => {
                const response = await queryService.Params({});
                return response;
            },
            validatorCommission: async (validatorAddress) => {
                const response = await queryService.ValidatorCommission({
                    validatorAddress: validatorAddress,
                });
                return response;
            },
            validatorOutstandingRewards: async (validatorAddress) => {
                const response = await queryService.ValidatorOutstandingRewards({
                    validatorAddress: validatorAddress,
                });
                return response;
            },
            validatorSlashes: async (validatorAddress, startingHeight, endingHeight, paginationKey) => {
                const response = await queryService.ValidatorSlashes({
                    validatorAddress: validatorAddress,
                    startingHeight: long_1$7.default.fromNumber(startingHeight, true),
                    endingHeight: long_1$7.default.fromNumber(endingHeight, true),
                    pagination: (0, queryclient_1$9.createPagination)(paginationKey),
                });
                return response;
            },
        },
    };
}
queries$7.setupDistributionExtension = setupDistributionExtension;

var aminomessages$6 = {};

Object.defineProperty(aminomessages$6, "__esModule", { value: true });
aminomessages$6.createEvidenceAminoConverters = aminomessages$6.isAminoMsgSubmitEvidence = void 0;
function isAminoMsgSubmitEvidence(msg) {
    return msg.type === "cosmos-sdk/MsgSubmitEvidence";
}
aminomessages$6.isAminoMsgSubmitEvidence = isAminoMsgSubmitEvidence;
function createEvidenceAminoConverters() {
    throw new Error("Not implemented");
}
aminomessages$6.createEvidenceAminoConverters = createEvidenceAminoConverters;

var aminomessages$5 = {};

Object.defineProperty(aminomessages$5, "__esModule", { value: true });
aminomessages$5.createFeegrantAminoConverters = void 0;
function createFeegrantAminoConverters() {
    return {
        "/cosmos.feegrant.v1beta1.MsgGrantAllowance": "not_supported_by_chain",
        "/cosmos.feegrant.v1beta1.MsgRevokeAllowance": "not_supported_by_chain",
    };
}
aminomessages$5.createFeegrantAminoConverters = createFeegrantAminoConverters;

var messages$4 = {};

var tx$a = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.MsgClientImpl = exports.MsgRevokeAllowanceResponse = exports.MsgRevokeAllowance = exports.MsgGrantAllowanceResponse = exports.MsgGrantAllowance = exports.protobufPackage = void 0;
	/* eslint-disable */
	const any_1 = any;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.feegrant.v1beta1";
	function createBaseMsgGrantAllowance() {
	    return {
	        granter: "",
	        grantee: "",
	        allowance: undefined,
	    };
	}
	exports.MsgGrantAllowance = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.granter !== "") {
	            writer.uint32(10).string(message.granter);
	        }
	        if (message.grantee !== "") {
	            writer.uint32(18).string(message.grantee);
	        }
	        if (message.allowance !== undefined) {
	            any_1.Any.encode(message.allowance, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgGrantAllowance();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.granter = reader.string();
	                    break;
	                case 2:
	                    message.grantee = reader.string();
	                    break;
	                case 3:
	                    message.allowance = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            granter: (0, helpers_1.isSet)(object.granter) ? String(object.granter) : "",
	            grantee: (0, helpers_1.isSet)(object.grantee) ? String(object.grantee) : "",
	            allowance: (0, helpers_1.isSet)(object.allowance) ? any_1.Any.fromJSON(object.allowance) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.granter !== undefined && (obj.granter = message.granter);
	        message.grantee !== undefined && (obj.grantee = message.grantee);
	        message.allowance !== undefined &&
	            (obj.allowance = message.allowance ? any_1.Any.toJSON(message.allowance) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgGrantAllowance();
	        message.granter = object.granter ?? "";
	        message.grantee = object.grantee ?? "";
	        message.allowance =
	            object.allowance !== undefined && object.allowance !== null
	                ? any_1.Any.fromPartial(object.allowance)
	                : undefined;
	        return message;
	    },
	};
	function createBaseMsgGrantAllowanceResponse() {
	    return {};
	}
	exports.MsgGrantAllowanceResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgGrantAllowanceResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgGrantAllowanceResponse();
	        return message;
	    },
	};
	function createBaseMsgRevokeAllowance() {
	    return {
	        granter: "",
	        grantee: "",
	    };
	}
	exports.MsgRevokeAllowance = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.granter !== "") {
	            writer.uint32(10).string(message.granter);
	        }
	        if (message.grantee !== "") {
	            writer.uint32(18).string(message.grantee);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgRevokeAllowance();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.granter = reader.string();
	                    break;
	                case 2:
	                    message.grantee = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            granter: (0, helpers_1.isSet)(object.granter) ? String(object.granter) : "",
	            grantee: (0, helpers_1.isSet)(object.grantee) ? String(object.grantee) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.granter !== undefined && (obj.granter = message.granter);
	        message.grantee !== undefined && (obj.grantee = message.grantee);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgRevokeAllowance();
	        message.granter = object.granter ?? "";
	        message.grantee = object.grantee ?? "";
	        return message;
	    },
	};
	function createBaseMsgRevokeAllowanceResponse() {
	    return {};
	}
	exports.MsgRevokeAllowanceResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgRevokeAllowanceResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgRevokeAllowanceResponse();
	        return message;
	    },
	};
	class MsgClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.GrantAllowance = this.GrantAllowance.bind(this);
	        this.RevokeAllowance = this.RevokeAllowance.bind(this);
	    }
	    GrantAllowance(request) {
	        const data = exports.MsgGrantAllowance.encode(request).finish();
	        const promise = this.rpc.request("cosmos.feegrant.v1beta1.Msg", "GrantAllowance", data);
	        return promise.then((data) => exports.MsgGrantAllowanceResponse.decode(new _m0.Reader(data)));
	    }
	    RevokeAllowance(request) {
	        const data = exports.MsgRevokeAllowance.encode(request).finish();
	        const promise = this.rpc.request("cosmos.feegrant.v1beta1.Msg", "RevokeAllowance", data);
	        return promise.then((data) => exports.MsgRevokeAllowanceResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.MsgClientImpl = MsgClientImpl;
	
} (tx$a));

Object.defineProperty(messages$4, "__esModule", { value: true });
messages$4.feegrantTypes = void 0;
const tx_1$7 = tx$a;
messages$4.feegrantTypes = [
    ["/cosmos.feegrant.v1beta1.MsgGrantAllowance", tx_1$7.MsgGrantAllowance],
    ["/cosmos.feegrant.v1beta1.MsgRevokeAllowance", tx_1$7.MsgRevokeAllowance],
];

var queries$6 = {};

var query$8 = {};

var feegrant = {};

var duration = {};

var __createBinding$b = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$b = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$b = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$b(result, mod, k);
    __setModuleDefault$b(result, mod);
    return result;
};
Object.defineProperty(duration, "__esModule", { value: true });
duration.Duration = duration.protobufPackage = void 0;
/* eslint-disable */
const helpers_1$7 = helpers;
const _m0$7 = __importStar$b(minimal);
duration.protobufPackage = "google.protobuf";
function createBaseDuration() {
    return {
        seconds: helpers_1$7.Long.ZERO,
        nanos: 0,
    };
}
duration.Duration = {
    encode(message, writer = _m0$7.Writer.create()) {
        if (!message.seconds.isZero()) {
            writer.uint32(8).int64(message.seconds);
        }
        if (message.nanos !== 0) {
            writer.uint32(16).int32(message.nanos);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$7.Reader ? input : new _m0$7.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDuration();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.seconds = reader.int64();
                    break;
                case 2:
                    message.nanos = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            seconds: (0, helpers_1$7.isSet)(object.seconds) ? helpers_1$7.Long.fromValue(object.seconds) : helpers_1$7.Long.ZERO,
            nanos: (0, helpers_1$7.isSet)(object.nanos) ? Number(object.nanos) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.seconds !== undefined && (obj.seconds = (message.seconds || helpers_1$7.Long.ZERO).toString());
        message.nanos !== undefined && (obj.nanos = Math.round(message.nanos));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDuration();
        message.seconds =
            object.seconds !== undefined && object.seconds !== null ? helpers_1$7.Long.fromValue(object.seconds) : helpers_1$7.Long.ZERO;
        message.nanos = object.nanos ?? 0;
        return message;
    },
};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Grant = exports.AllowedMsgAllowance = exports.PeriodicAllowance = exports.BasicAllowance = exports.protobufPackage = void 0;
	/* eslint-disable */
	const coin_1 = coin$1;
	const timestamp_1 = timestamp;
	const duration_1 = duration;
	const any_1 = any;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.feegrant.v1beta1";
	function createBaseBasicAllowance() {
	    return {
	        spendLimit: [],
	        expiration: undefined,
	    };
	}
	exports.BasicAllowance = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.spendLimit) {
	            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.expiration !== undefined) {
	            timestamp_1.Timestamp.encode(message.expiration, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseBasicAllowance();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.spendLimit.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.expiration = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            spendLimit: Array.isArray(object?.spendLimit)
	                ? object.spendLimit.map((e) => coin_1.Coin.fromJSON(e))
	                : [],
	            expiration: (0, helpers_1.isSet)(object.expiration) ? (0, helpers_1.fromJsonTimestamp)(object.expiration) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.spendLimit) {
	            obj.spendLimit = message.spendLimit.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.spendLimit = [];
	        }
	        message.expiration !== undefined && (obj.expiration = (0, helpers_1.fromTimestamp)(message.expiration).toISOString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseBasicAllowance();
	        message.spendLimit = object.spendLimit?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        message.expiration =
	            object.expiration !== undefined && object.expiration !== null
	                ? timestamp_1.Timestamp.fromPartial(object.expiration)
	                : undefined;
	        return message;
	    },
	};
	function createBasePeriodicAllowance() {
	    return {
	        basic: undefined,
	        period: undefined,
	        periodSpendLimit: [],
	        periodCanSpend: [],
	        periodReset: undefined,
	    };
	}
	exports.PeriodicAllowance = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.basic !== undefined) {
	            exports.BasicAllowance.encode(message.basic, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.period !== undefined) {
	            duration_1.Duration.encode(message.period, writer.uint32(18).fork()).ldelim();
	        }
	        for (const v of message.periodSpendLimit) {
	            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
	        }
	        for (const v of message.periodCanSpend) {
	            coin_1.Coin.encode(v, writer.uint32(34).fork()).ldelim();
	        }
	        if (message.periodReset !== undefined) {
	            timestamp_1.Timestamp.encode(message.periodReset, writer.uint32(42).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBasePeriodicAllowance();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.basic = exports.BasicAllowance.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.period = duration_1.Duration.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.periodSpendLimit.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                case 4:
	                    message.periodCanSpend.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                case 5:
	                    message.periodReset = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            basic: (0, helpers_1.isSet)(object.basic) ? exports.BasicAllowance.fromJSON(object.basic) : undefined,
	            period: (0, helpers_1.isSet)(object.period) ? duration_1.Duration.fromJSON(object.period) : undefined,
	            periodSpendLimit: Array.isArray(object?.periodSpendLimit)
	                ? object.periodSpendLimit.map((e) => coin_1.Coin.fromJSON(e))
	                : [],
	            periodCanSpend: Array.isArray(object?.periodCanSpend)
	                ? object.periodCanSpend.map((e) => coin_1.Coin.fromJSON(e))
	                : [],
	            periodReset: (0, helpers_1.isSet)(object.periodReset) ? (0, helpers_1.fromJsonTimestamp)(object.periodReset) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.basic !== undefined &&
	            (obj.basic = message.basic ? exports.BasicAllowance.toJSON(message.basic) : undefined);
	        message.period !== undefined &&
	            (obj.period = message.period ? duration_1.Duration.toJSON(message.period) : undefined);
	        if (message.periodSpendLimit) {
	            obj.periodSpendLimit = message.periodSpendLimit.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.periodSpendLimit = [];
	        }
	        if (message.periodCanSpend) {
	            obj.periodCanSpend = message.periodCanSpend.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.periodCanSpend = [];
	        }
	        message.periodReset !== undefined && (obj.periodReset = (0, helpers_1.fromTimestamp)(message.periodReset).toISOString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBasePeriodicAllowance();
	        message.basic =
	            object.basic !== undefined && object.basic !== null
	                ? exports.BasicAllowance.fromPartial(object.basic)
	                : undefined;
	        message.period =
	            object.period !== undefined && object.period !== null ? duration_1.Duration.fromPartial(object.period) : undefined;
	        message.periodSpendLimit = object.periodSpendLimit?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        message.periodCanSpend = object.periodCanSpend?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        message.periodReset =
	            object.periodReset !== undefined && object.periodReset !== null
	                ? timestamp_1.Timestamp.fromPartial(object.periodReset)
	                : undefined;
	        return message;
	    },
	};
	function createBaseAllowedMsgAllowance() {
	    return {
	        allowance: undefined,
	        allowedMessages: [],
	    };
	}
	exports.AllowedMsgAllowance = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.allowance !== undefined) {
	            any_1.Any.encode(message.allowance, writer.uint32(10).fork()).ldelim();
	        }
	        for (const v of message.allowedMessages) {
	            writer.uint32(18).string(v);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseAllowedMsgAllowance();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.allowance = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.allowedMessages.push(reader.string());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            allowance: (0, helpers_1.isSet)(object.allowance) ? any_1.Any.fromJSON(object.allowance) : undefined,
	            allowedMessages: Array.isArray(object?.allowedMessages)
	                ? object.allowedMessages.map((e) => String(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.allowance !== undefined &&
	            (obj.allowance = message.allowance ? any_1.Any.toJSON(message.allowance) : undefined);
	        if (message.allowedMessages) {
	            obj.allowedMessages = message.allowedMessages.map((e) => e);
	        }
	        else {
	            obj.allowedMessages = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseAllowedMsgAllowance();
	        message.allowance =
	            object.allowance !== undefined && object.allowance !== null
	                ? any_1.Any.fromPartial(object.allowance)
	                : undefined;
	        message.allowedMessages = object.allowedMessages?.map((e) => e) || [];
	        return message;
	    },
	};
	function createBaseGrant() {
	    return {
	        granter: "",
	        grantee: "",
	        allowance: undefined,
	    };
	}
	exports.Grant = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.granter !== "") {
	            writer.uint32(10).string(message.granter);
	        }
	        if (message.grantee !== "") {
	            writer.uint32(18).string(message.grantee);
	        }
	        if (message.allowance !== undefined) {
	            any_1.Any.encode(message.allowance, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseGrant();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.granter = reader.string();
	                    break;
	                case 2:
	                    message.grantee = reader.string();
	                    break;
	                case 3:
	                    message.allowance = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            granter: (0, helpers_1.isSet)(object.granter) ? String(object.granter) : "",
	            grantee: (0, helpers_1.isSet)(object.grantee) ? String(object.grantee) : "",
	            allowance: (0, helpers_1.isSet)(object.allowance) ? any_1.Any.fromJSON(object.allowance) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.granter !== undefined && (obj.granter = message.granter);
	        message.grantee !== undefined && (obj.grantee = message.grantee);
	        message.allowance !== undefined &&
	            (obj.allowance = message.allowance ? any_1.Any.toJSON(message.allowance) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseGrant();
	        message.granter = object.granter ?? "";
	        message.grantee = object.grantee ?? "";
	        message.allowance =
	            object.allowance !== undefined && object.allowance !== null
	                ? any_1.Any.fromPartial(object.allowance)
	                : undefined;
	        return message;
	    },
	};
	
} (feegrant));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.QueryClientImpl = exports.QueryAllowancesByGranterResponse = exports.QueryAllowancesByGranterRequest = exports.QueryAllowancesResponse = exports.QueryAllowancesRequest = exports.QueryAllowanceResponse = exports.QueryAllowanceRequest = exports.protobufPackage = void 0;
	/* eslint-disable */
	const pagination_1 = pagination;
	const feegrant_1 = feegrant;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.feegrant.v1beta1";
	function createBaseQueryAllowanceRequest() {
	    return {
	        granter: "",
	        grantee: "",
	    };
	}
	exports.QueryAllowanceRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.granter !== "") {
	            writer.uint32(10).string(message.granter);
	        }
	        if (message.grantee !== "") {
	            writer.uint32(18).string(message.grantee);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryAllowanceRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.granter = reader.string();
	                    break;
	                case 2:
	                    message.grantee = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            granter: (0, helpers_1.isSet)(object.granter) ? String(object.granter) : "",
	            grantee: (0, helpers_1.isSet)(object.grantee) ? String(object.grantee) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.granter !== undefined && (obj.granter = message.granter);
	        message.grantee !== undefined && (obj.grantee = message.grantee);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryAllowanceRequest();
	        message.granter = object.granter ?? "";
	        message.grantee = object.grantee ?? "";
	        return message;
	    },
	};
	function createBaseQueryAllowanceResponse() {
	    return {
	        allowance: undefined,
	    };
	}
	exports.QueryAllowanceResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.allowance !== undefined) {
	            feegrant_1.Grant.encode(message.allowance, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryAllowanceResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.allowance = feegrant_1.Grant.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            allowance: (0, helpers_1.isSet)(object.allowance) ? feegrant_1.Grant.fromJSON(object.allowance) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.allowance !== undefined &&
	            (obj.allowance = message.allowance ? feegrant_1.Grant.toJSON(message.allowance) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryAllowanceResponse();
	        message.allowance =
	            object.allowance !== undefined && object.allowance !== null
	                ? feegrant_1.Grant.fromPartial(object.allowance)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryAllowancesRequest() {
	    return {
	        grantee: "",
	        pagination: undefined,
	    };
	}
	exports.QueryAllowancesRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.grantee !== "") {
	            writer.uint32(10).string(message.grantee);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryAllowancesRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.grantee = reader.string();
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            grantee: (0, helpers_1.isSet)(object.grantee) ? String(object.grantee) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.grantee !== undefined && (obj.grantee = message.grantee);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryAllowancesRequest();
	        message.grantee = object.grantee ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryAllowancesResponse() {
	    return {
	        allowances: [],
	        pagination: undefined,
	    };
	}
	exports.QueryAllowancesResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.allowances) {
	            feegrant_1.Grant.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryAllowancesResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.allowances.push(feegrant_1.Grant.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            allowances: Array.isArray(object?.allowances)
	                ? object.allowances.map((e) => feegrant_1.Grant.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.allowances) {
	            obj.allowances = message.allowances.map((e) => (e ? feegrant_1.Grant.toJSON(e) : undefined));
	        }
	        else {
	            obj.allowances = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryAllowancesResponse();
	        message.allowances = object.allowances?.map((e) => feegrant_1.Grant.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryAllowancesByGranterRequest() {
	    return {
	        granter: "",
	        pagination: undefined,
	    };
	}
	exports.QueryAllowancesByGranterRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.granter !== "") {
	            writer.uint32(10).string(message.granter);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryAllowancesByGranterRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.granter = reader.string();
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            granter: (0, helpers_1.isSet)(object.granter) ? String(object.granter) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.granter !== undefined && (obj.granter = message.granter);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryAllowancesByGranterRequest();
	        message.granter = object.granter ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryAllowancesByGranterResponse() {
	    return {
	        allowances: [],
	        pagination: undefined,
	    };
	}
	exports.QueryAllowancesByGranterResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.allowances) {
	            feegrant_1.Grant.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryAllowancesByGranterResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.allowances.push(feegrant_1.Grant.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            allowances: Array.isArray(object?.allowances)
	                ? object.allowances.map((e) => feegrant_1.Grant.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.allowances) {
	            obj.allowances = message.allowances.map((e) => (e ? feegrant_1.Grant.toJSON(e) : undefined));
	        }
	        else {
	            obj.allowances = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryAllowancesByGranterResponse();
	        message.allowances = object.allowances?.map((e) => feegrant_1.Grant.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	class QueryClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.Allowance = this.Allowance.bind(this);
	        this.Allowances = this.Allowances.bind(this);
	        this.AllowancesByGranter = this.AllowancesByGranter.bind(this);
	    }
	    Allowance(request) {
	        const data = exports.QueryAllowanceRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.feegrant.v1beta1.Query", "Allowance", data);
	        return promise.then((data) => exports.QueryAllowanceResponse.decode(new _m0.Reader(data)));
	    }
	    Allowances(request) {
	        const data = exports.QueryAllowancesRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.feegrant.v1beta1.Query", "Allowances", data);
	        return promise.then((data) => exports.QueryAllowancesResponse.decode(new _m0.Reader(data)));
	    }
	    AllowancesByGranter(request) {
	        const data = exports.QueryAllowancesByGranterRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.feegrant.v1beta1.Query", "AllowancesByGranter", data);
	        return promise.then((data) => exports.QueryAllowancesByGranterResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.QueryClientImpl = QueryClientImpl;
	
} (query$8));

Object.defineProperty(queries$6, "__esModule", { value: true });
queries$6.setupFeegrantExtension = void 0;
const query_1$5 = query$8;
const queryclient_1$8 = queryclient$1;
function setupFeegrantExtension(base) {
    // Use this service to get easy typed access to query methods
    // This cannot be used for proof verification
    const rpc = (0, queryclient_1$8.createProtobufRpcClient)(base);
    const queryService = new query_1$5.QueryClientImpl(rpc);
    return {
        feegrant: {
            allowance: async (granter, grantee) => {
                const response = await queryService.Allowance({
                    granter: granter,
                    grantee: grantee,
                });
                return response;
            },
            allowances: async (grantee, paginationKey) => {
                const response = await queryService.Allowances({
                    grantee: grantee,
                    pagination: (0, queryclient_1$8.createPagination)(paginationKey),
                });
                return response;
            },
        },
    };
}
queries$6.setupFeegrantExtension = setupFeegrantExtension;

var aminomessages$4 = {};

var gov = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TallyParams = exports.VotingParams = exports.DepositParams = exports.Vote = exports.TallyResult = exports.Proposal = exports.Deposit = exports.TextProposal = exports.WeightedVoteOption = exports.proposalStatusToJSON = exports.proposalStatusFromJSON = exports.ProposalStatus = exports.voteOptionToJSON = exports.voteOptionFromJSON = exports.VoteOption = exports.protobufPackage = void 0;
	/* eslint-disable */
	const coin_1 = coin$1;
	const any_1 = any;
	const timestamp_1 = timestamp;
	const duration_1 = duration;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.gov.v1beta1";
	/** VoteOption enumerates the valid vote options for a given governance proposal. */
	var VoteOption;
	(function (VoteOption) {
	    /** VOTE_OPTION_UNSPECIFIED - VOTE_OPTION_UNSPECIFIED defines a no-op vote option. */
	    VoteOption[VoteOption["VOTE_OPTION_UNSPECIFIED"] = 0] = "VOTE_OPTION_UNSPECIFIED";
	    /** VOTE_OPTION_YES - VOTE_OPTION_YES defines a yes vote option. */
	    VoteOption[VoteOption["VOTE_OPTION_YES"] = 1] = "VOTE_OPTION_YES";
	    /** VOTE_OPTION_ABSTAIN - VOTE_OPTION_ABSTAIN defines an abstain vote option. */
	    VoteOption[VoteOption["VOTE_OPTION_ABSTAIN"] = 2] = "VOTE_OPTION_ABSTAIN";
	    /** VOTE_OPTION_NO - VOTE_OPTION_NO defines a no vote option. */
	    VoteOption[VoteOption["VOTE_OPTION_NO"] = 3] = "VOTE_OPTION_NO";
	    /** VOTE_OPTION_NO_WITH_VETO - VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option. */
	    VoteOption[VoteOption["VOTE_OPTION_NO_WITH_VETO"] = 4] = "VOTE_OPTION_NO_WITH_VETO";
	    VoteOption[VoteOption["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
	})(VoteOption = exports.VoteOption || (exports.VoteOption = {}));
	function voteOptionFromJSON(object) {
	    switch (object) {
	        case 0:
	        case "VOTE_OPTION_UNSPECIFIED":
	            return VoteOption.VOTE_OPTION_UNSPECIFIED;
	        case 1:
	        case "VOTE_OPTION_YES":
	            return VoteOption.VOTE_OPTION_YES;
	        case 2:
	        case "VOTE_OPTION_ABSTAIN":
	            return VoteOption.VOTE_OPTION_ABSTAIN;
	        case 3:
	        case "VOTE_OPTION_NO":
	            return VoteOption.VOTE_OPTION_NO;
	        case 4:
	        case "VOTE_OPTION_NO_WITH_VETO":
	            return VoteOption.VOTE_OPTION_NO_WITH_VETO;
	        case -1:
	        case "UNRECOGNIZED":
	        default:
	            return VoteOption.UNRECOGNIZED;
	    }
	}
	exports.voteOptionFromJSON = voteOptionFromJSON;
	function voteOptionToJSON(object) {
	    switch (object) {
	        case VoteOption.VOTE_OPTION_UNSPECIFIED:
	            return "VOTE_OPTION_UNSPECIFIED";
	        case VoteOption.VOTE_OPTION_YES:
	            return "VOTE_OPTION_YES";
	        case VoteOption.VOTE_OPTION_ABSTAIN:
	            return "VOTE_OPTION_ABSTAIN";
	        case VoteOption.VOTE_OPTION_NO:
	            return "VOTE_OPTION_NO";
	        case VoteOption.VOTE_OPTION_NO_WITH_VETO:
	            return "VOTE_OPTION_NO_WITH_VETO";
	        case VoteOption.UNRECOGNIZED:
	        default:
	            return "UNRECOGNIZED";
	    }
	}
	exports.voteOptionToJSON = voteOptionToJSON;
	/** ProposalStatus enumerates the valid statuses of a proposal. */
	var ProposalStatus;
	(function (ProposalStatus) {
	    /** PROPOSAL_STATUS_UNSPECIFIED - PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status. */
	    ProposalStatus[ProposalStatus["PROPOSAL_STATUS_UNSPECIFIED"] = 0] = "PROPOSAL_STATUS_UNSPECIFIED";
	    /**
	     * PROPOSAL_STATUS_DEPOSIT_PERIOD - PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
	     * period.
	     */
	    ProposalStatus[ProposalStatus["PROPOSAL_STATUS_DEPOSIT_PERIOD"] = 1] = "PROPOSAL_STATUS_DEPOSIT_PERIOD";
	    /**
	     * PROPOSAL_STATUS_VOTING_PERIOD - PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
	     * period.
	     */
	    ProposalStatus[ProposalStatus["PROPOSAL_STATUS_VOTING_PERIOD"] = 2] = "PROPOSAL_STATUS_VOTING_PERIOD";
	    /**
	     * PROPOSAL_STATUS_PASSED - PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
	     * passed.
	     */
	    ProposalStatus[ProposalStatus["PROPOSAL_STATUS_PASSED"] = 3] = "PROPOSAL_STATUS_PASSED";
	    /**
	     * PROPOSAL_STATUS_REJECTED - PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
	     * been rejected.
	     */
	    ProposalStatus[ProposalStatus["PROPOSAL_STATUS_REJECTED"] = 4] = "PROPOSAL_STATUS_REJECTED";
	    /**
	     * PROPOSAL_STATUS_FAILED - PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
	     * failed.
	     */
	    ProposalStatus[ProposalStatus["PROPOSAL_STATUS_FAILED"] = 5] = "PROPOSAL_STATUS_FAILED";
	    ProposalStatus[ProposalStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
	})(ProposalStatus = exports.ProposalStatus || (exports.ProposalStatus = {}));
	function proposalStatusFromJSON(object) {
	    switch (object) {
	        case 0:
	        case "PROPOSAL_STATUS_UNSPECIFIED":
	            return ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED;
	        case 1:
	        case "PROPOSAL_STATUS_DEPOSIT_PERIOD":
	            return ProposalStatus.PROPOSAL_STATUS_DEPOSIT_PERIOD;
	        case 2:
	        case "PROPOSAL_STATUS_VOTING_PERIOD":
	            return ProposalStatus.PROPOSAL_STATUS_VOTING_PERIOD;
	        case 3:
	        case "PROPOSAL_STATUS_PASSED":
	            return ProposalStatus.PROPOSAL_STATUS_PASSED;
	        case 4:
	        case "PROPOSAL_STATUS_REJECTED":
	            return ProposalStatus.PROPOSAL_STATUS_REJECTED;
	        case 5:
	        case "PROPOSAL_STATUS_FAILED":
	            return ProposalStatus.PROPOSAL_STATUS_FAILED;
	        case -1:
	        case "UNRECOGNIZED":
	        default:
	            return ProposalStatus.UNRECOGNIZED;
	    }
	}
	exports.proposalStatusFromJSON = proposalStatusFromJSON;
	function proposalStatusToJSON(object) {
	    switch (object) {
	        case ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED:
	            return "PROPOSAL_STATUS_UNSPECIFIED";
	        case ProposalStatus.PROPOSAL_STATUS_DEPOSIT_PERIOD:
	            return "PROPOSAL_STATUS_DEPOSIT_PERIOD";
	        case ProposalStatus.PROPOSAL_STATUS_VOTING_PERIOD:
	            return "PROPOSAL_STATUS_VOTING_PERIOD";
	        case ProposalStatus.PROPOSAL_STATUS_PASSED:
	            return "PROPOSAL_STATUS_PASSED";
	        case ProposalStatus.PROPOSAL_STATUS_REJECTED:
	            return "PROPOSAL_STATUS_REJECTED";
	        case ProposalStatus.PROPOSAL_STATUS_FAILED:
	            return "PROPOSAL_STATUS_FAILED";
	        case ProposalStatus.UNRECOGNIZED:
	        default:
	            return "UNRECOGNIZED";
	    }
	}
	exports.proposalStatusToJSON = proposalStatusToJSON;
	function createBaseWeightedVoteOption() {
	    return {
	        option: 0,
	        weight: "",
	    };
	}
	exports.WeightedVoteOption = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.option !== 0) {
	            writer.uint32(8).int32(message.option);
	        }
	        if (message.weight !== "") {
	            writer.uint32(18).string(message.weight);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseWeightedVoteOption();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.option = reader.int32();
	                    break;
	                case 2:
	                    message.weight = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            option: (0, helpers_1.isSet)(object.option) ? voteOptionFromJSON(object.option) : 0,
	            weight: (0, helpers_1.isSet)(object.weight) ? String(object.weight) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.option !== undefined && (obj.option = voteOptionToJSON(message.option));
	        message.weight !== undefined && (obj.weight = message.weight);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseWeightedVoteOption();
	        message.option = object.option ?? 0;
	        message.weight = object.weight ?? "";
	        return message;
	    },
	};
	function createBaseTextProposal() {
	    return {
	        title: "",
	        description: "",
	    };
	}
	exports.TextProposal = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.title !== "") {
	            writer.uint32(10).string(message.title);
	        }
	        if (message.description !== "") {
	            writer.uint32(18).string(message.description);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseTextProposal();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.title = reader.string();
	                    break;
	                case 2:
	                    message.description = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            title: (0, helpers_1.isSet)(object.title) ? String(object.title) : "",
	            description: (0, helpers_1.isSet)(object.description) ? String(object.description) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.title !== undefined && (obj.title = message.title);
	        message.description !== undefined && (obj.description = message.description);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseTextProposal();
	        message.title = object.title ?? "";
	        message.description = object.description ?? "";
	        return message;
	    },
	};
	function createBaseDeposit() {
	    return {
	        proposalId: helpers_1.Long.UZERO,
	        depositor: "",
	        amount: [],
	    };
	}
	exports.Deposit = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.proposalId.isZero()) {
	            writer.uint32(8).uint64(message.proposalId);
	        }
	        if (message.depositor !== "") {
	            writer.uint32(18).string(message.depositor);
	        }
	        for (const v of message.amount) {
	            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseDeposit();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.proposalId = reader.uint64();
	                    break;
	                case 2:
	                    message.depositor = reader.string();
	                    break;
	                case 3:
	                    message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            proposalId: (0, helpers_1.isSet)(object.proposalId) ? helpers_1.Long.fromValue(object.proposalId) : helpers_1.Long.UZERO,
	            depositor: (0, helpers_1.isSet)(object.depositor) ? String(object.depositor) : "",
	            amount: Array.isArray(object?.amount) ? object.amount.map((e) => coin_1.Coin.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.proposalId !== undefined && (obj.proposalId = (message.proposalId || helpers_1.Long.UZERO).toString());
	        message.depositor !== undefined && (obj.depositor = message.depositor);
	        if (message.amount) {
	            obj.amount = message.amount.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.amount = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseDeposit();
	        message.proposalId =
	            object.proposalId !== undefined && object.proposalId !== null
	                ? helpers_1.Long.fromValue(object.proposalId)
	                : helpers_1.Long.UZERO;
	        message.depositor = object.depositor ?? "";
	        message.amount = object.amount?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseProposal() {
	    return {
	        proposalId: helpers_1.Long.UZERO,
	        content: undefined,
	        status: 0,
	        finalTallyResult: undefined,
	        submitTime: undefined,
	        depositEndTime: undefined,
	        totalDeposit: [],
	        votingStartTime: undefined,
	        votingEndTime: undefined,
	    };
	}
	exports.Proposal = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.proposalId.isZero()) {
	            writer.uint32(8).uint64(message.proposalId);
	        }
	        if (message.content !== undefined) {
	            any_1.Any.encode(message.content, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.status !== 0) {
	            writer.uint32(24).int32(message.status);
	        }
	        if (message.finalTallyResult !== undefined) {
	            exports.TallyResult.encode(message.finalTallyResult, writer.uint32(34).fork()).ldelim();
	        }
	        if (message.submitTime !== undefined) {
	            timestamp_1.Timestamp.encode(message.submitTime, writer.uint32(42).fork()).ldelim();
	        }
	        if (message.depositEndTime !== undefined) {
	            timestamp_1.Timestamp.encode(message.depositEndTime, writer.uint32(50).fork()).ldelim();
	        }
	        for (const v of message.totalDeposit) {
	            coin_1.Coin.encode(v, writer.uint32(58).fork()).ldelim();
	        }
	        if (message.votingStartTime !== undefined) {
	            timestamp_1.Timestamp.encode(message.votingStartTime, writer.uint32(66).fork()).ldelim();
	        }
	        if (message.votingEndTime !== undefined) {
	            timestamp_1.Timestamp.encode(message.votingEndTime, writer.uint32(74).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseProposal();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.proposalId = reader.uint64();
	                    break;
	                case 2:
	                    message.content = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.status = reader.int32();
	                    break;
	                case 4:
	                    message.finalTallyResult = exports.TallyResult.decode(reader, reader.uint32());
	                    break;
	                case 5:
	                    message.submitTime = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                case 6:
	                    message.depositEndTime = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                case 7:
	                    message.totalDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                case 8:
	                    message.votingStartTime = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                case 9:
	                    message.votingEndTime = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            proposalId: (0, helpers_1.isSet)(object.proposalId) ? helpers_1.Long.fromValue(object.proposalId) : helpers_1.Long.UZERO,
	            content: (0, helpers_1.isSet)(object.content) ? any_1.Any.fromJSON(object.content) : undefined,
	            status: (0, helpers_1.isSet)(object.status) ? proposalStatusFromJSON(object.status) : 0,
	            finalTallyResult: (0, helpers_1.isSet)(object.finalTallyResult)
	                ? exports.TallyResult.fromJSON(object.finalTallyResult)
	                : undefined,
	            submitTime: (0, helpers_1.isSet)(object.submitTime) ? (0, helpers_1.fromJsonTimestamp)(object.submitTime) : undefined,
	            depositEndTime: (0, helpers_1.isSet)(object.depositEndTime) ? (0, helpers_1.fromJsonTimestamp)(object.depositEndTime) : undefined,
	            totalDeposit: Array.isArray(object?.totalDeposit)
	                ? object.totalDeposit.map((e) => coin_1.Coin.fromJSON(e))
	                : [],
	            votingStartTime: (0, helpers_1.isSet)(object.votingStartTime) ? (0, helpers_1.fromJsonTimestamp)(object.votingStartTime) : undefined,
	            votingEndTime: (0, helpers_1.isSet)(object.votingEndTime) ? (0, helpers_1.fromJsonTimestamp)(object.votingEndTime) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.proposalId !== undefined && (obj.proposalId = (message.proposalId || helpers_1.Long.UZERO).toString());
	        message.content !== undefined &&
	            (obj.content = message.content ? any_1.Any.toJSON(message.content) : undefined);
	        message.status !== undefined && (obj.status = proposalStatusToJSON(message.status));
	        message.finalTallyResult !== undefined &&
	            (obj.finalTallyResult = message.finalTallyResult
	                ? exports.TallyResult.toJSON(message.finalTallyResult)
	                : undefined);
	        message.submitTime !== undefined && (obj.submitTime = (0, helpers_1.fromTimestamp)(message.submitTime).toISOString());
	        message.depositEndTime !== undefined &&
	            (obj.depositEndTime = (0, helpers_1.fromTimestamp)(message.depositEndTime).toISOString());
	        if (message.totalDeposit) {
	            obj.totalDeposit = message.totalDeposit.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.totalDeposit = [];
	        }
	        message.votingStartTime !== undefined &&
	            (obj.votingStartTime = (0, helpers_1.fromTimestamp)(message.votingStartTime).toISOString());
	        message.votingEndTime !== undefined &&
	            (obj.votingEndTime = (0, helpers_1.fromTimestamp)(message.votingEndTime).toISOString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseProposal();
	        message.proposalId =
	            object.proposalId !== undefined && object.proposalId !== null
	                ? helpers_1.Long.fromValue(object.proposalId)
	                : helpers_1.Long.UZERO;
	        message.content =
	            object.content !== undefined && object.content !== null ? any_1.Any.fromPartial(object.content) : undefined;
	        message.status = object.status ?? 0;
	        message.finalTallyResult =
	            object.finalTallyResult !== undefined && object.finalTallyResult !== null
	                ? exports.TallyResult.fromPartial(object.finalTallyResult)
	                : undefined;
	        message.submitTime =
	            object.submitTime !== undefined && object.submitTime !== null
	                ? timestamp_1.Timestamp.fromPartial(object.submitTime)
	                : undefined;
	        message.depositEndTime =
	            object.depositEndTime !== undefined && object.depositEndTime !== null
	                ? timestamp_1.Timestamp.fromPartial(object.depositEndTime)
	                : undefined;
	        message.totalDeposit = object.totalDeposit?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        message.votingStartTime =
	            object.votingStartTime !== undefined && object.votingStartTime !== null
	                ? timestamp_1.Timestamp.fromPartial(object.votingStartTime)
	                : undefined;
	        message.votingEndTime =
	            object.votingEndTime !== undefined && object.votingEndTime !== null
	                ? timestamp_1.Timestamp.fromPartial(object.votingEndTime)
	                : undefined;
	        return message;
	    },
	};
	function createBaseTallyResult() {
	    return {
	        yes: "",
	        abstain: "",
	        no: "",
	        noWithVeto: "",
	    };
	}
	exports.TallyResult = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.yes !== "") {
	            writer.uint32(10).string(message.yes);
	        }
	        if (message.abstain !== "") {
	            writer.uint32(18).string(message.abstain);
	        }
	        if (message.no !== "") {
	            writer.uint32(26).string(message.no);
	        }
	        if (message.noWithVeto !== "") {
	            writer.uint32(34).string(message.noWithVeto);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseTallyResult();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.yes = reader.string();
	                    break;
	                case 2:
	                    message.abstain = reader.string();
	                    break;
	                case 3:
	                    message.no = reader.string();
	                    break;
	                case 4:
	                    message.noWithVeto = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            yes: (0, helpers_1.isSet)(object.yes) ? String(object.yes) : "",
	            abstain: (0, helpers_1.isSet)(object.abstain) ? String(object.abstain) : "",
	            no: (0, helpers_1.isSet)(object.no) ? String(object.no) : "",
	            noWithVeto: (0, helpers_1.isSet)(object.noWithVeto) ? String(object.noWithVeto) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.yes !== undefined && (obj.yes = message.yes);
	        message.abstain !== undefined && (obj.abstain = message.abstain);
	        message.no !== undefined && (obj.no = message.no);
	        message.noWithVeto !== undefined && (obj.noWithVeto = message.noWithVeto);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseTallyResult();
	        message.yes = object.yes ?? "";
	        message.abstain = object.abstain ?? "";
	        message.no = object.no ?? "";
	        message.noWithVeto = object.noWithVeto ?? "";
	        return message;
	    },
	};
	function createBaseVote() {
	    return {
	        proposalId: helpers_1.Long.UZERO,
	        voter: "",
	        option: 0,
	        options: [],
	    };
	}
	exports.Vote = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.proposalId.isZero()) {
	            writer.uint32(8).uint64(message.proposalId);
	        }
	        if (message.voter !== "") {
	            writer.uint32(18).string(message.voter);
	        }
	        if (message.option !== 0) {
	            writer.uint32(24).int32(message.option);
	        }
	        for (const v of message.options) {
	            exports.WeightedVoteOption.encode(v, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseVote();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.proposalId = reader.uint64();
	                    break;
	                case 2:
	                    message.voter = reader.string();
	                    break;
	                case 3:
	                    message.option = reader.int32();
	                    break;
	                case 4:
	                    message.options.push(exports.WeightedVoteOption.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            proposalId: (0, helpers_1.isSet)(object.proposalId) ? helpers_1.Long.fromValue(object.proposalId) : helpers_1.Long.UZERO,
	            voter: (0, helpers_1.isSet)(object.voter) ? String(object.voter) : "",
	            option: (0, helpers_1.isSet)(object.option) ? voteOptionFromJSON(object.option) : 0,
	            options: Array.isArray(object?.options)
	                ? object.options.map((e) => exports.WeightedVoteOption.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.proposalId !== undefined && (obj.proposalId = (message.proposalId || helpers_1.Long.UZERO).toString());
	        message.voter !== undefined && (obj.voter = message.voter);
	        message.option !== undefined && (obj.option = voteOptionToJSON(message.option));
	        if (message.options) {
	            obj.options = message.options.map((e) => (e ? exports.WeightedVoteOption.toJSON(e) : undefined));
	        }
	        else {
	            obj.options = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseVote();
	        message.proposalId =
	            object.proposalId !== undefined && object.proposalId !== null
	                ? helpers_1.Long.fromValue(object.proposalId)
	                : helpers_1.Long.UZERO;
	        message.voter = object.voter ?? "";
	        message.option = object.option ?? 0;
	        message.options = object.options?.map((e) => exports.WeightedVoteOption.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseDepositParams() {
	    return {
	        minDeposit: [],
	        maxDepositPeriod: undefined,
	    };
	}
	exports.DepositParams = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.minDeposit) {
	            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.maxDepositPeriod !== undefined) {
	            duration_1.Duration.encode(message.maxDepositPeriod, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseDepositParams();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.minDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.maxDepositPeriod = duration_1.Duration.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            minDeposit: Array.isArray(object?.minDeposit)
	                ? object.minDeposit.map((e) => coin_1.Coin.fromJSON(e))
	                : [],
	            maxDepositPeriod: (0, helpers_1.isSet)(object.maxDepositPeriod)
	                ? duration_1.Duration.fromJSON(object.maxDepositPeriod)
	                : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.minDeposit) {
	            obj.minDeposit = message.minDeposit.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.minDeposit = [];
	        }
	        message.maxDepositPeriod !== undefined &&
	            (obj.maxDepositPeriod = message.maxDepositPeriod
	                ? duration_1.Duration.toJSON(message.maxDepositPeriod)
	                : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseDepositParams();
	        message.minDeposit = object.minDeposit?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        message.maxDepositPeriod =
	            object.maxDepositPeriod !== undefined && object.maxDepositPeriod !== null
	                ? duration_1.Duration.fromPartial(object.maxDepositPeriod)
	                : undefined;
	        return message;
	    },
	};
	function createBaseVotingParams() {
	    return {
	        votingPeriod: undefined,
	    };
	}
	exports.VotingParams = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.votingPeriod !== undefined) {
	            duration_1.Duration.encode(message.votingPeriod, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseVotingParams();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.votingPeriod = duration_1.Duration.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            votingPeriod: (0, helpers_1.isSet)(object.votingPeriod) ? duration_1.Duration.fromJSON(object.votingPeriod) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.votingPeriod !== undefined &&
	            (obj.votingPeriod = message.votingPeriod ? duration_1.Duration.toJSON(message.votingPeriod) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseVotingParams();
	        message.votingPeriod =
	            object.votingPeriod !== undefined && object.votingPeriod !== null
	                ? duration_1.Duration.fromPartial(object.votingPeriod)
	                : undefined;
	        return message;
	    },
	};
	function createBaseTallyParams() {
	    return {
	        quorum: new Uint8Array(),
	        threshold: new Uint8Array(),
	        vetoThreshold: new Uint8Array(),
	    };
	}
	exports.TallyParams = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.quorum.length !== 0) {
	            writer.uint32(10).bytes(message.quorum);
	        }
	        if (message.threshold.length !== 0) {
	            writer.uint32(18).bytes(message.threshold);
	        }
	        if (message.vetoThreshold.length !== 0) {
	            writer.uint32(26).bytes(message.vetoThreshold);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseTallyParams();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.quorum = reader.bytes();
	                    break;
	                case 2:
	                    message.threshold = reader.bytes();
	                    break;
	                case 3:
	                    message.vetoThreshold = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            quorum: (0, helpers_1.isSet)(object.quorum) ? (0, helpers_1.bytesFromBase64)(object.quorum) : new Uint8Array(),
	            threshold: (0, helpers_1.isSet)(object.threshold) ? (0, helpers_1.bytesFromBase64)(object.threshold) : new Uint8Array(),
	            vetoThreshold: (0, helpers_1.isSet)(object.vetoThreshold) ? (0, helpers_1.bytesFromBase64)(object.vetoThreshold) : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.quorum !== undefined &&
	            (obj.quorum = (0, helpers_1.base64FromBytes)(message.quorum !== undefined ? message.quorum : new Uint8Array()));
	        message.threshold !== undefined &&
	            (obj.threshold = (0, helpers_1.base64FromBytes)(message.threshold !== undefined ? message.threshold : new Uint8Array()));
	        message.vetoThreshold !== undefined &&
	            (obj.vetoThreshold = (0, helpers_1.base64FromBytes)(message.vetoThreshold !== undefined ? message.vetoThreshold : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseTallyParams();
	        message.quorum = object.quorum ?? new Uint8Array();
	        message.threshold = object.threshold ?? new Uint8Array();
	        message.vetoThreshold = object.vetoThreshold ?? new Uint8Array();
	        return message;
	    },
	};
	
} (gov));

var __importDefault$8 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(aminomessages$4, "__esModule", { value: true });
aminomessages$4.createGovAminoConverters = aminomessages$4.isAminoMsgDeposit = aminomessages$4.isAminoMsgVoteWeighted = aminomessages$4.isAminoMsgVote = aminomessages$4.isAminoMsgSubmitProposal = void 0;
const math_1$5 = build$a;
const utils_1$5 = build$5;
const gov_1 = gov;
const any_1 = any;
const long_1$6 = __importDefault$8(long);
const queryclient_1$7 = queryclient$1;
function isAminoMsgSubmitProposal(msg) {
    return msg.type === "cosmos-sdk/MsgSubmitProposal";
}
aminomessages$4.isAminoMsgSubmitProposal = isAminoMsgSubmitProposal;
function isAminoMsgVote(msg) {
    return msg.type === "cosmos-sdk/MsgVote";
}
aminomessages$4.isAminoMsgVote = isAminoMsgVote;
function isAminoMsgVoteWeighted(msg) {
    return msg.type === "cosmos-sdk/MsgVoteWeighted";
}
aminomessages$4.isAminoMsgVoteWeighted = isAminoMsgVoteWeighted;
function isAminoMsgDeposit(msg) {
    return msg.type === "cosmos-sdk/MsgDeposit";
}
aminomessages$4.isAminoMsgDeposit = isAminoMsgDeposit;
function createGovAminoConverters() {
    return {
        "/cosmos.gov.v1beta1.MsgDeposit": {
            aminoType: "cosmos-sdk/MsgDeposit",
            toAmino: ({ amount, depositor, proposalId }) => {
                return {
                    amount,
                    depositor,
                    proposal_id: proposalId.toString(),
                };
            },
            fromAmino: ({ amount, depositor, proposal_id }) => {
                return {
                    amount: Array.from(amount),
                    depositor,
                    proposalId: long_1$6.default.fromString(proposal_id),
                };
            },
        },
        "/cosmos.gov.v1beta1.MsgVote": {
            aminoType: "cosmos-sdk/MsgVote",
            toAmino: ({ option, proposalId, voter }) => {
                return {
                    option: option,
                    proposal_id: proposalId.toString(),
                    voter: voter,
                };
            },
            fromAmino: ({ option, proposal_id, voter }) => {
                return {
                    option: (0, gov_1.voteOptionFromJSON)(option),
                    proposalId: long_1$6.default.fromString(proposal_id),
                    voter: voter,
                };
            },
        },
        "/cosmos.gov.v1beta1.MsgVoteWeighted": {
            aminoType: "cosmos-sdk/MsgVoteWeighted",
            toAmino: ({ options, proposalId, voter }) => {
                return {
                    options: options.map((o) => ({
                        option: o.option,
                        // Weight is between 0 and 1, so we always have 20 characters when printing all trailing
                        // zeros (e.g. "0.700000000000000000" or "1.000000000000000000")
                        weight: (0, queryclient_1$7.decodeCosmosSdkDecFromProto)(o.weight).toString().padEnd(20, "0"),
                    })),
                    proposal_id: proposalId.toString(),
                    voter: voter,
                };
            },
            fromAmino: ({ options, proposal_id, voter }) => {
                return {
                    proposalId: long_1$6.default.fromString(proposal_id),
                    voter: voter,
                    options: options.map((o) => ({
                        option: (0, gov_1.voteOptionFromJSON)(o.option),
                        weight: math_1$5.Decimal.fromUserInput(o.weight, 18).atomics,
                    })),
                };
            },
        },
        "/cosmos.gov.v1beta1.MsgSubmitProposal": {
            aminoType: "cosmos-sdk/MsgSubmitProposal",
            toAmino: ({ initialDeposit, proposer, content, }) => {
                (0, utils_1$5.assertDefinedAndNotNull)(content);
                let proposal;
                switch (content.typeUrl) {
                    case "/cosmos.gov.v1beta1.TextProposal": {
                        const textProposal = gov_1.TextProposal.decode(content.value);
                        proposal = {
                            type: "cosmos-sdk/TextProposal",
                            value: {
                                description: textProposal.description,
                                title: textProposal.title,
                            },
                        };
                        break;
                    }
                    default:
                        throw new Error(`Unsupported proposal type: '${content.typeUrl}'`);
                }
                return {
                    initial_deposit: initialDeposit,
                    proposer: proposer,
                    content: proposal,
                };
            },
            fromAmino: ({ initial_deposit, proposer, content, }) => {
                let any_content;
                switch (content.type) {
                    case "cosmos-sdk/TextProposal": {
                        const { value } = content;
                        (0, utils_1$5.assert)((0, utils_1$5.isNonNullObject)(value));
                        const { title, description } = value;
                        (0, utils_1$5.assert)(typeof title === "string");
                        (0, utils_1$5.assert)(typeof description === "string");
                        any_content = any_1.Any.fromPartial({
                            typeUrl: "/cosmos.gov.v1beta1.TextProposal",
                            value: gov_1.TextProposal.encode(gov_1.TextProposal.fromPartial({
                                title: title,
                                description: description,
                            })).finish(),
                        });
                        break;
                    }
                    default:
                        throw new Error(`Unsupported proposal type: '${content.type}'`);
                }
                return {
                    initialDeposit: Array.from(initial_deposit),
                    proposer: proposer,
                    content: any_content,
                };
            },
        },
    };
}
aminomessages$4.createGovAminoConverters = createGovAminoConverters;

var messages$3 = {};

var tx$9 = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.MsgClientImpl = exports.MsgDepositResponse = exports.MsgDeposit = exports.MsgVoteWeightedResponse = exports.MsgVoteWeighted = exports.MsgVoteResponse = exports.MsgVote = exports.MsgSubmitProposalResponse = exports.MsgSubmitProposal = exports.protobufPackage = void 0;
	/* eslint-disable */
	const any_1 = any;
	const coin_1 = coin$1;
	const gov_1 = gov;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.gov.v1beta1";
	function createBaseMsgSubmitProposal() {
	    return {
	        content: undefined,
	        initialDeposit: [],
	        proposer: "",
	    };
	}
	exports.MsgSubmitProposal = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.content !== undefined) {
	            any_1.Any.encode(message.content, writer.uint32(10).fork()).ldelim();
	        }
	        for (const v of message.initialDeposit) {
	            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.proposer !== "") {
	            writer.uint32(26).string(message.proposer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgSubmitProposal();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.content = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.initialDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                case 3:
	                    message.proposer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            content: (0, helpers_1.isSet)(object.content) ? any_1.Any.fromJSON(object.content) : undefined,
	            initialDeposit: Array.isArray(object?.initialDeposit)
	                ? object.initialDeposit.map((e) => coin_1.Coin.fromJSON(e))
	                : [],
	            proposer: (0, helpers_1.isSet)(object.proposer) ? String(object.proposer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.content !== undefined &&
	            (obj.content = message.content ? any_1.Any.toJSON(message.content) : undefined);
	        if (message.initialDeposit) {
	            obj.initialDeposit = message.initialDeposit.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.initialDeposit = [];
	        }
	        message.proposer !== undefined && (obj.proposer = message.proposer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgSubmitProposal();
	        message.content =
	            object.content !== undefined && object.content !== null ? any_1.Any.fromPartial(object.content) : undefined;
	        message.initialDeposit = object.initialDeposit?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        message.proposer = object.proposer ?? "";
	        return message;
	    },
	};
	function createBaseMsgSubmitProposalResponse() {
	    return {
	        proposalId: helpers_1.Long.UZERO,
	    };
	}
	exports.MsgSubmitProposalResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.proposalId.isZero()) {
	            writer.uint32(8).uint64(message.proposalId);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgSubmitProposalResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.proposalId = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            proposalId: (0, helpers_1.isSet)(object.proposalId) ? helpers_1.Long.fromValue(object.proposalId) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.proposalId !== undefined && (obj.proposalId = (message.proposalId || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgSubmitProposalResponse();
	        message.proposalId =
	            object.proposalId !== undefined && object.proposalId !== null
	                ? helpers_1.Long.fromValue(object.proposalId)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseMsgVote() {
	    return {
	        proposalId: helpers_1.Long.UZERO,
	        voter: "",
	        option: 0,
	    };
	}
	exports.MsgVote = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.proposalId.isZero()) {
	            writer.uint32(8).uint64(message.proposalId);
	        }
	        if (message.voter !== "") {
	            writer.uint32(18).string(message.voter);
	        }
	        if (message.option !== 0) {
	            writer.uint32(24).int32(message.option);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgVote();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.proposalId = reader.uint64();
	                    break;
	                case 2:
	                    message.voter = reader.string();
	                    break;
	                case 3:
	                    message.option = reader.int32();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            proposalId: (0, helpers_1.isSet)(object.proposalId) ? helpers_1.Long.fromValue(object.proposalId) : helpers_1.Long.UZERO,
	            voter: (0, helpers_1.isSet)(object.voter) ? String(object.voter) : "",
	            option: (0, helpers_1.isSet)(object.option) ? (0, gov_1.voteOptionFromJSON)(object.option) : 0,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.proposalId !== undefined && (obj.proposalId = (message.proposalId || helpers_1.Long.UZERO).toString());
	        message.voter !== undefined && (obj.voter = message.voter);
	        message.option !== undefined && (obj.option = (0, gov_1.voteOptionToJSON)(message.option));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgVote();
	        message.proposalId =
	            object.proposalId !== undefined && object.proposalId !== null
	                ? helpers_1.Long.fromValue(object.proposalId)
	                : helpers_1.Long.UZERO;
	        message.voter = object.voter ?? "";
	        message.option = object.option ?? 0;
	        return message;
	    },
	};
	function createBaseMsgVoteResponse() {
	    return {};
	}
	exports.MsgVoteResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgVoteResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgVoteResponse();
	        return message;
	    },
	};
	function createBaseMsgVoteWeighted() {
	    return {
	        proposalId: helpers_1.Long.UZERO,
	        voter: "",
	        options: [],
	    };
	}
	exports.MsgVoteWeighted = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.proposalId.isZero()) {
	            writer.uint32(8).uint64(message.proposalId);
	        }
	        if (message.voter !== "") {
	            writer.uint32(18).string(message.voter);
	        }
	        for (const v of message.options) {
	            gov_1.WeightedVoteOption.encode(v, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgVoteWeighted();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.proposalId = reader.uint64();
	                    break;
	                case 2:
	                    message.voter = reader.string();
	                    break;
	                case 3:
	                    message.options.push(gov_1.WeightedVoteOption.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            proposalId: (0, helpers_1.isSet)(object.proposalId) ? helpers_1.Long.fromValue(object.proposalId) : helpers_1.Long.UZERO,
	            voter: (0, helpers_1.isSet)(object.voter) ? String(object.voter) : "",
	            options: Array.isArray(object?.options)
	                ? object.options.map((e) => gov_1.WeightedVoteOption.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.proposalId !== undefined && (obj.proposalId = (message.proposalId || helpers_1.Long.UZERO).toString());
	        message.voter !== undefined && (obj.voter = message.voter);
	        if (message.options) {
	            obj.options = message.options.map((e) => (e ? gov_1.WeightedVoteOption.toJSON(e) : undefined));
	        }
	        else {
	            obj.options = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgVoteWeighted();
	        message.proposalId =
	            object.proposalId !== undefined && object.proposalId !== null
	                ? helpers_1.Long.fromValue(object.proposalId)
	                : helpers_1.Long.UZERO;
	        message.voter = object.voter ?? "";
	        message.options = object.options?.map((e) => gov_1.WeightedVoteOption.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseMsgVoteWeightedResponse() {
	    return {};
	}
	exports.MsgVoteWeightedResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgVoteWeightedResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgVoteWeightedResponse();
	        return message;
	    },
	};
	function createBaseMsgDeposit() {
	    return {
	        proposalId: helpers_1.Long.UZERO,
	        depositor: "",
	        amount: [],
	    };
	}
	exports.MsgDeposit = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.proposalId.isZero()) {
	            writer.uint32(8).uint64(message.proposalId);
	        }
	        if (message.depositor !== "") {
	            writer.uint32(18).string(message.depositor);
	        }
	        for (const v of message.amount) {
	            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgDeposit();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.proposalId = reader.uint64();
	                    break;
	                case 2:
	                    message.depositor = reader.string();
	                    break;
	                case 3:
	                    message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            proposalId: (0, helpers_1.isSet)(object.proposalId) ? helpers_1.Long.fromValue(object.proposalId) : helpers_1.Long.UZERO,
	            depositor: (0, helpers_1.isSet)(object.depositor) ? String(object.depositor) : "",
	            amount: Array.isArray(object?.amount) ? object.amount.map((e) => coin_1.Coin.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.proposalId !== undefined && (obj.proposalId = (message.proposalId || helpers_1.Long.UZERO).toString());
	        message.depositor !== undefined && (obj.depositor = message.depositor);
	        if (message.amount) {
	            obj.amount = message.amount.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.amount = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgDeposit();
	        message.proposalId =
	            object.proposalId !== undefined && object.proposalId !== null
	                ? helpers_1.Long.fromValue(object.proposalId)
	                : helpers_1.Long.UZERO;
	        message.depositor = object.depositor ?? "";
	        message.amount = object.amount?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseMsgDepositResponse() {
	    return {};
	}
	exports.MsgDepositResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgDepositResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgDepositResponse();
	        return message;
	    },
	};
	class MsgClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.SubmitProposal = this.SubmitProposal.bind(this);
	        this.Vote = this.Vote.bind(this);
	        this.VoteWeighted = this.VoteWeighted.bind(this);
	        this.Deposit = this.Deposit.bind(this);
	    }
	    SubmitProposal(request) {
	        const data = exports.MsgSubmitProposal.encode(request).finish();
	        const promise = this.rpc.request("cosmos.gov.v1beta1.Msg", "SubmitProposal", data);
	        return promise.then((data) => exports.MsgSubmitProposalResponse.decode(new _m0.Reader(data)));
	    }
	    Vote(request) {
	        const data = exports.MsgVote.encode(request).finish();
	        const promise = this.rpc.request("cosmos.gov.v1beta1.Msg", "Vote", data);
	        return promise.then((data) => exports.MsgVoteResponse.decode(new _m0.Reader(data)));
	    }
	    VoteWeighted(request) {
	        const data = exports.MsgVoteWeighted.encode(request).finish();
	        const promise = this.rpc.request("cosmos.gov.v1beta1.Msg", "VoteWeighted", data);
	        return promise.then((data) => exports.MsgVoteWeightedResponse.decode(new _m0.Reader(data)));
	    }
	    Deposit(request) {
	        const data = exports.MsgDeposit.encode(request).finish();
	        const promise = this.rpc.request("cosmos.gov.v1beta1.Msg", "Deposit", data);
	        return promise.then((data) => exports.MsgDepositResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.MsgClientImpl = MsgClientImpl;
	
} (tx$9));

Object.defineProperty(messages$3, "__esModule", { value: true });
messages$3.isMsgVoteWeightedEncodeObject = messages$3.isMsgVoteEncodeObject = messages$3.isMsgSubmitProposalEncodeObject = messages$3.isMsgDepositEncodeObject = messages$3.govTypes = void 0;
const tx_1$6 = tx$9;
messages$3.govTypes = [
    ["/cosmos.gov.v1beta1.MsgDeposit", tx_1$6.MsgDeposit],
    ["/cosmos.gov.v1beta1.MsgSubmitProposal", tx_1$6.MsgSubmitProposal],
    ["/cosmos.gov.v1beta1.MsgVote", tx_1$6.MsgVote],
    ["/cosmos.gov.v1beta1.MsgVoteWeighted", tx_1$6.MsgVoteWeighted],
];
function isMsgDepositEncodeObject(object) {
    return object.typeUrl === "/cosmos.gov.v1beta1.MsgDeposit";
}
messages$3.isMsgDepositEncodeObject = isMsgDepositEncodeObject;
function isMsgSubmitProposalEncodeObject(object) {
    return object.typeUrl === "/cosmos.gov.v1beta1.MsgSubmitProposal";
}
messages$3.isMsgSubmitProposalEncodeObject = isMsgSubmitProposalEncodeObject;
function isMsgVoteEncodeObject(object) {
    return object.typeUrl === "/cosmos.gov.v1beta1.MsgVote";
}
messages$3.isMsgVoteEncodeObject = isMsgVoteEncodeObject;
function isMsgVoteWeightedEncodeObject(object) {
    return object.typeUrl === "/cosmos.gov.v1beta1.MsgVoteWeighted";
}
messages$3.isMsgVoteWeightedEncodeObject = isMsgVoteWeightedEncodeObject;

var queries$5 = {};

var query$7 = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.QueryClientImpl = exports.QueryTallyResultResponse = exports.QueryTallyResultRequest = exports.QueryDepositsResponse = exports.QueryDepositsRequest = exports.QueryDepositResponse = exports.QueryDepositRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryVotesResponse = exports.QueryVotesRequest = exports.QueryVoteResponse = exports.QueryVoteRequest = exports.QueryProposalsResponse = exports.QueryProposalsRequest = exports.QueryProposalResponse = exports.QueryProposalRequest = exports.protobufPackage = void 0;
	/* eslint-disable */
	const gov_1 = gov;
	const pagination_1 = pagination;
	const helpers_1 = helpers;
	const _m0 = __importStar(minimal);
	exports.protobufPackage = "cosmos.gov.v1beta1";
	function createBaseQueryProposalRequest() {
	    return {
	        proposalId: helpers_1.Long.UZERO,
	    };
	}
	exports.QueryProposalRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.proposalId.isZero()) {
	            writer.uint32(8).uint64(message.proposalId);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryProposalRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.proposalId = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            proposalId: (0, helpers_1.isSet)(object.proposalId) ? helpers_1.Long.fromValue(object.proposalId) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.proposalId !== undefined && (obj.proposalId = (message.proposalId || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryProposalRequest();
	        message.proposalId =
	            object.proposalId !== undefined && object.proposalId !== null
	                ? helpers_1.Long.fromValue(object.proposalId)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseQueryProposalResponse() {
	    return {
	        proposal: undefined,
	    };
	}
	exports.QueryProposalResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.proposal !== undefined) {
	            gov_1.Proposal.encode(message.proposal, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryProposalResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.proposal = gov_1.Proposal.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            proposal: (0, helpers_1.isSet)(object.proposal) ? gov_1.Proposal.fromJSON(object.proposal) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.proposal !== undefined &&
	            (obj.proposal = message.proposal ? gov_1.Proposal.toJSON(message.proposal) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryProposalResponse();
	        message.proposal =
	            object.proposal !== undefined && object.proposal !== null
	                ? gov_1.Proposal.fromPartial(object.proposal)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryProposalsRequest() {
	    return {
	        proposalStatus: 0,
	        voter: "",
	        depositor: "",
	        pagination: undefined,
	    };
	}
	exports.QueryProposalsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.proposalStatus !== 0) {
	            writer.uint32(8).int32(message.proposalStatus);
	        }
	        if (message.voter !== "") {
	            writer.uint32(18).string(message.voter);
	        }
	        if (message.depositor !== "") {
	            writer.uint32(26).string(message.depositor);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryProposalsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.proposalStatus = reader.int32();
	                    break;
	                case 2:
	                    message.voter = reader.string();
	                    break;
	                case 3:
	                    message.depositor = reader.string();
	                    break;
	                case 4:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            proposalStatus: (0, helpers_1.isSet)(object.proposalStatus) ? (0, gov_1.proposalStatusFromJSON)(object.proposalStatus) : 0,
	            voter: (0, helpers_1.isSet)(object.voter) ? String(object.voter) : "",
	            depositor: (0, helpers_1.isSet)(object.depositor) ? String(object.depositor) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.proposalStatus !== undefined &&
	            (obj.proposalStatus = (0, gov_1.proposalStatusToJSON)(message.proposalStatus));
	        message.voter !== undefined && (obj.voter = message.voter);
	        message.depositor !== undefined && (obj.depositor = message.depositor);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryProposalsRequest();
	        message.proposalStatus = object.proposalStatus ?? 0;
	        message.voter = object.voter ?? "";
	        message.depositor = object.depositor ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryProposalsResponse() {
	    return {
	        proposals: [],
	        pagination: undefined,
	    };
	}
	exports.QueryProposalsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.proposals) {
	            gov_1.Proposal.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryProposalsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.proposals.push(gov_1.Proposal.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            proposals: Array.isArray(object?.proposals)
	                ? object.proposals.map((e) => gov_1.Proposal.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.proposals) {
	            obj.proposals = message.proposals.map((e) => (e ? gov_1.Proposal.toJSON(e) : undefined));
	        }
	        else {
	            obj.proposals = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryProposalsResponse();
	        message.proposals = object.proposals?.map((e) => gov_1.Proposal.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryVoteRequest() {
	    return {
	        proposalId: helpers_1.Long.UZERO,
	        voter: "",
	    };
	}
	exports.QueryVoteRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.proposalId.isZero()) {
	            writer.uint32(8).uint64(message.proposalId);
	        }
	        if (message.voter !== "") {
	            writer.uint32(18).string(message.voter);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryVoteRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.proposalId = reader.uint64();
	                    break;
	                case 2:
	                    message.voter = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            proposalId: (0, helpers_1.isSet)(object.proposalId) ? helpers_1.Long.fromValue(object.proposalId) : helpers_1.Long.UZERO,
	            voter: (0, helpers_1.isSet)(object.voter) ? String(object.voter) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.proposalId !== undefined && (obj.proposalId = (message.proposalId || helpers_1.Long.UZERO).toString());
	        message.voter !== undefined && (obj.voter = message.voter);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryVoteRequest();
	        message.proposalId =
	            object.proposalId !== undefined && object.proposalId !== null
	                ? helpers_1.Long.fromValue(object.proposalId)
	                : helpers_1.Long.UZERO;
	        message.voter = object.voter ?? "";
	        return message;
	    },
	};
	function createBaseQueryVoteResponse() {
	    return {
	        vote: undefined,
	    };
	}
	exports.QueryVoteResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.vote !== undefined) {
	            gov_1.Vote.encode(message.vote, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryVoteResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.vote = gov_1.Vote.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            vote: (0, helpers_1.isSet)(object.vote) ? gov_1.Vote.fromJSON(object.vote) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.vote !== undefined && (obj.vote = message.vote ? gov_1.Vote.toJSON(message.vote) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryVoteResponse();
	        message.vote =
	            object.vote !== undefined && object.vote !== null ? gov_1.Vote.fromPartial(object.vote) : undefined;
	        return message;
	    },
	};
	function createBaseQueryVotesRequest() {
	    return {
	        proposalId: helpers_1.Long.UZERO,
	        pagination: undefined,
	    };
	}
	exports.QueryVotesRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.proposalId.isZero()) {
	            writer.uint32(8).uint64(message.proposalId);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryVotesRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.proposalId = reader.uint64();
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            proposalId: (0, helpers_1.isSet)(object.proposalId) ? helpers_1.Long.fromValue(object.proposalId) : helpers_1.Long.UZERO,
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.proposalId !== undefined && (obj.proposalId = (message.proposalId || helpers_1.Long.UZERO).toString());
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryVotesRequest();
	        message.proposalId =
	            object.proposalId !== undefined && object.proposalId !== null
	                ? helpers_1.Long.fromValue(object.proposalId)
	                : helpers_1.Long.UZERO;
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryVotesResponse() {
	    return {
	        votes: [],
	        pagination: undefined,
	    };
	}
	exports.QueryVotesResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.votes) {
	            gov_1.Vote.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryVotesResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.votes.push(gov_1.Vote.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            votes: Array.isArray(object?.votes) ? object.votes.map((e) => gov_1.Vote.fromJSON(e)) : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.votes) {
	            obj.votes = message.votes.map((e) => (e ? gov_1.Vote.toJSON(e) : undefined));
	        }
	        else {
	            obj.votes = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryVotesResponse();
	        message.votes = object.votes?.map((e) => gov_1.Vote.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryParamsRequest() {
	    return {
	        paramsType: "",
	    };
	}
	exports.QueryParamsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.paramsType !== "") {
	            writer.uint32(10).string(message.paramsType);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryParamsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.paramsType = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            paramsType: (0, helpers_1.isSet)(object.paramsType) ? String(object.paramsType) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.paramsType !== undefined && (obj.paramsType = message.paramsType);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryParamsRequest();
	        message.paramsType = object.paramsType ?? "";
	        return message;
	    },
	};
	function createBaseQueryParamsResponse() {
	    return {
	        votingParams: undefined,
	        depositParams: undefined,
	        tallyParams: undefined,
	    };
	}
	exports.QueryParamsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.votingParams !== undefined) {
	            gov_1.VotingParams.encode(message.votingParams, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.depositParams !== undefined) {
	            gov_1.DepositParams.encode(message.depositParams, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.tallyParams !== undefined) {
	            gov_1.TallyParams.encode(message.tallyParams, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryParamsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.votingParams = gov_1.VotingParams.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.depositParams = gov_1.DepositParams.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.tallyParams = gov_1.TallyParams.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            votingParams: (0, helpers_1.isSet)(object.votingParams) ? gov_1.VotingParams.fromJSON(object.votingParams) : undefined,
	            depositParams: (0, helpers_1.isSet)(object.depositParams) ? gov_1.DepositParams.fromJSON(object.depositParams) : undefined,
	            tallyParams: (0, helpers_1.isSet)(object.tallyParams) ? gov_1.TallyParams.fromJSON(object.tallyParams) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.votingParams !== undefined &&
	            (obj.votingParams = message.votingParams ? gov_1.VotingParams.toJSON(message.votingParams) : undefined);
	        message.depositParams !== undefined &&
	            (obj.depositParams = message.depositParams ? gov_1.DepositParams.toJSON(message.depositParams) : undefined);
	        message.tallyParams !== undefined &&
	            (obj.tallyParams = message.tallyParams ? gov_1.TallyParams.toJSON(message.tallyParams) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryParamsResponse();
	        message.votingParams =
	            object.votingParams !== undefined && object.votingParams !== null
	                ? gov_1.VotingParams.fromPartial(object.votingParams)
	                : undefined;
	        message.depositParams =
	            object.depositParams !== undefined && object.depositParams !== null
	                ? gov_1.DepositParams.fromPartial(object.depositParams)
	                : undefined;
	        message.tallyParams =
	            object.tallyParams !== undefined && object.tallyParams !== null
	                ? gov_1.TallyParams.fromPartial(object.tallyParams)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryDepositRequest() {
	    return {
	        proposalId: helpers_1.Long.UZERO,
	        depositor: "",
	    };
	}
	exports.QueryDepositRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.proposalId.isZero()) {
	            writer.uint32(8).uint64(message.proposalId);
	        }
	        if (message.depositor !== "") {
	            writer.uint32(18).string(message.depositor);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDepositRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.proposalId = reader.uint64();
	                    break;
	                case 2:
	                    message.depositor = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            proposalId: (0, helpers_1.isSet)(object.proposalId) ? helpers_1.Long.fromValue(object.proposalId) : helpers_1.Long.UZERO,
	            depositor: (0, helpers_1.isSet)(object.depositor) ? String(object.depositor) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.proposalId !== undefined && (obj.proposalId = (message.proposalId || helpers_1.Long.UZERO).toString());
	        message.depositor !== undefined && (obj.depositor = message.depositor);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDepositRequest();
	        message.proposalId =
	            object.proposalId !== undefined && object.proposalId !== null
	                ? helpers_1.Long.fromValue(object.proposalId)
	                : helpers_1.Long.UZERO;
	        message.depositor = object.depositor ?? "";
	        return message;
	    },
	};
	function createBaseQueryDepositResponse() {
	    return {
	        deposit: undefined,
	    };
	}
	exports.QueryDepositResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.deposit !== undefined) {
	            gov_1.Deposit.encode(message.deposit, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDepositResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.deposit = gov_1.Deposit.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            deposit: (0, helpers_1.isSet)(object.deposit) ? gov_1.Deposit.fromJSON(object.deposit) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.deposit !== undefined &&
	            (obj.deposit = message.deposit ? gov_1.Deposit.toJSON(message.deposit) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDepositResponse();
	        message.deposit =
	            object.deposit !== undefined && object.deposit !== null
	                ? gov_1.Deposit.fromPartial(object.deposit)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryDepositsRequest() {
	    return {
	        proposalId: helpers_1.Long.UZERO,
	        pagination: undefined,
	    };
	}
	exports.QueryDepositsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.proposalId.isZero()) {
	            writer.uint32(8).uint64(message.proposalId);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDepositsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.proposalId = reader.uint64();
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            proposalId: (0, helpers_1.isSet)(object.proposalId) ? helpers_1.Long.fromValue(object.proposalId) : helpers_1.Long.UZERO,
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.proposalId !== undefined && (obj.proposalId = (message.proposalId || helpers_1.Long.UZERO).toString());
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDepositsRequest();
	        message.proposalId =
	            object.proposalId !== undefined && object.proposalId !== null
	                ? helpers_1.Long.fromValue(object.proposalId)
	                : helpers_1.Long.UZERO;
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryDepositsResponse() {
	    return {
	        deposits: [],
	        pagination: undefined,
	    };
	}
	exports.QueryDepositsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.deposits) {
	            gov_1.Deposit.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDepositsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.deposits.push(gov_1.Deposit.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            deposits: Array.isArray(object?.deposits) ? object.deposits.map((e) => gov_1.Deposit.fromJSON(e)) : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.deposits) {
	            obj.deposits = message.deposits.map((e) => (e ? gov_1.Deposit.toJSON(e) : undefined));
	        }
	        else {
	            obj.deposits = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDepositsResponse();
	        message.deposits = object.deposits?.map((e) => gov_1.Deposit.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryTallyResultRequest() {
	    return {
	        proposalId: helpers_1.Long.UZERO,
	    };
	}
	exports.QueryTallyResultRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.proposalId.isZero()) {
	            writer.uint32(8).uint64(message.proposalId);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryTallyResultRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.proposalId = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            proposalId: (0, helpers_1.isSet)(object.proposalId) ? helpers_1.Long.fromValue(object.proposalId) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.proposalId !== undefined && (obj.proposalId = (message.proposalId || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryTallyResultRequest();
	        message.proposalId =
	            object.proposalId !== undefined && object.proposalId !== null
	                ? helpers_1.Long.fromValue(object.proposalId)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseQueryTallyResultResponse() {
	    return {
	        tally: undefined,
	    };
	}
	exports.QueryTallyResultResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.tally !== undefined) {
	            gov_1.TallyResult.encode(message.tally, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryTallyResultResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.tally = gov_1.TallyResult.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            tally: (0, helpers_1.isSet)(object.tally) ? gov_1.TallyResult.fromJSON(object.tally) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.tally !== undefined &&
	            (obj.tally = message.tally ? gov_1.TallyResult.toJSON(message.tally) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryTallyResultResponse();
	        message.tally =
	            object.tally !== undefined && object.tally !== null ? gov_1.TallyResult.fromPartial(object.tally) : undefined;
	        return message;
	    },
	};
	class QueryClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.Proposal = this.Proposal.bind(this);
	        this.Proposals = this.Proposals.bind(this);
	        this.Vote = this.Vote.bind(this);
	        this.Votes = this.Votes.bind(this);
	        this.Params = this.Params.bind(this);
	        this.Deposit = this.Deposit.bind(this);
	        this.Deposits = this.Deposits.bind(this);
	        this.TallyResult = this.TallyResult.bind(this);
	    }
	    Proposal(request) {
	        const data = exports.QueryProposalRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.gov.v1beta1.Query", "Proposal", data);
	        return promise.then((data) => exports.QueryProposalResponse.decode(new _m0.Reader(data)));
	    }
	    Proposals(request) {
	        const data = exports.QueryProposalsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.gov.v1beta1.Query", "Proposals", data);
	        return promise.then((data) => exports.QueryProposalsResponse.decode(new _m0.Reader(data)));
	    }
	    Vote(request) {
	        const data = exports.QueryVoteRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.gov.v1beta1.Query", "Vote", data);
	        return promise.then((data) => exports.QueryVoteResponse.decode(new _m0.Reader(data)));
	    }
	    Votes(request) {
	        const data = exports.QueryVotesRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.gov.v1beta1.Query", "Votes", data);
	        return promise.then((data) => exports.QueryVotesResponse.decode(new _m0.Reader(data)));
	    }
	    Params(request) {
	        const data = exports.QueryParamsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.gov.v1beta1.Query", "Params", data);
	        return promise.then((data) => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
	    }
	    Deposit(request) {
	        const data = exports.QueryDepositRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.gov.v1beta1.Query", "Deposit", data);
	        return promise.then((data) => exports.QueryDepositResponse.decode(new _m0.Reader(data)));
	    }
	    Deposits(request) {
	        const data = exports.QueryDepositsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.gov.v1beta1.Query", "Deposits", data);
	        return promise.then((data) => exports.QueryDepositsResponse.decode(new _m0.Reader(data)));
	    }
	    TallyResult(request) {
	        const data = exports.QueryTallyResultRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.gov.v1beta1.Query", "TallyResult", data);
	        return promise.then((data) => exports.QueryTallyResultResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.QueryClientImpl = QueryClientImpl;
	
} (query$7));

Object.defineProperty(queries$5, "__esModule", { value: true });
queries$5.setupGovExtension = void 0;
const query_1$4 = query$7;
const queryclient_1$6 = queryclient$1;
function setupGovExtension(base) {
    const rpc = (0, queryclient_1$6.createProtobufRpcClient)(base);
    // Use this service to get easy typed access to query methods
    // This cannot be used for proof verification
    const queryService = new query_1$4.QueryClientImpl(rpc);
    return {
        gov: {
            params: async (parametersType) => {
                const response = await queryService.Params({ paramsType: parametersType });
                return response;
            },
            proposals: async (proposalStatus, depositorAddress, voterAddress, paginationKey) => {
                const response = await queryService.Proposals({
                    proposalStatus,
                    depositor: depositorAddress,
                    voter: voterAddress,
                    pagination: (0, queryclient_1$6.createPagination)(paginationKey),
                });
                return response;
            },
            proposal: async (proposalId) => {
                const response = await queryService.Proposal({ proposalId: (0, queryclient_1$6.longify)(proposalId) });
                return response;
            },
            deposits: async (proposalId, paginationKey) => {
                const response = await queryService.Deposits({
                    proposalId: (0, queryclient_1$6.longify)(proposalId),
                    pagination: (0, queryclient_1$6.createPagination)(paginationKey),
                });
                return response;
            },
            deposit: async (proposalId, depositorAddress) => {
                const response = await queryService.Deposit({
                    proposalId: (0, queryclient_1$6.longify)(proposalId),
                    depositor: depositorAddress,
                });
                return response;
            },
            tally: async (proposalId) => {
                const response = await queryService.TallyResult({
                    proposalId: (0, queryclient_1$6.longify)(proposalId),
                });
                return response;
            },
            votes: async (proposalId, paginationKey) => {
                const response = await queryService.Votes({
                    proposalId: (0, queryclient_1$6.longify)(proposalId),
                    pagination: (0, queryclient_1$6.createPagination)(paginationKey),
                });
                return response;
            },
            vote: async (proposalId, voterAddress) => {
                const response = await queryService.Vote({
                    proposalId: (0, queryclient_1$6.longify)(proposalId),
                    voter: voterAddress,
                });
                return response;
            },
        },
    };
}
queries$5.setupGovExtension = setupGovExtension;

var aminomessages$3 = {};

var tx$8 = {};

var client = {};

var upgrade = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ModuleVersion = exports.CancelSoftwareUpgradeProposal = exports.SoftwareUpgradeProposal = exports.Plan = exports.protobufPackage = void 0;
	/* eslint-disable */
	const timestamp_1 = timestamp;
	const any_1 = any;
	const helpers_1 = helpers;
	const _m0 = __importStar(minimal);
	exports.protobufPackage = "cosmos.upgrade.v1beta1";
	function createBasePlan() {
	    return {
	        name: "",
	        time: undefined,
	        height: helpers_1.Long.ZERO,
	        info: "",
	        upgradedClientState: undefined,
	    };
	}
	exports.Plan = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.name !== "") {
	            writer.uint32(10).string(message.name);
	        }
	        if (message.time !== undefined) {
	            timestamp_1.Timestamp.encode(message.time, writer.uint32(18).fork()).ldelim();
	        }
	        if (!message.height.isZero()) {
	            writer.uint32(24).int64(message.height);
	        }
	        if (message.info !== "") {
	            writer.uint32(34).string(message.info);
	        }
	        if (message.upgradedClientState !== undefined) {
	            any_1.Any.encode(message.upgradedClientState, writer.uint32(42).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBasePlan();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.name = reader.string();
	                    break;
	                case 2:
	                    message.time = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.height = reader.int64();
	                    break;
	                case 4:
	                    message.info = reader.string();
	                    break;
	                case 5:
	                    message.upgradedClientState = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            name: (0, helpers_1.isSet)(object.name) ? String(object.name) : "",
	            time: (0, helpers_1.isSet)(object.time) ? (0, helpers_1.fromJsonTimestamp)(object.time) : undefined,
	            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO,
	            info: (0, helpers_1.isSet)(object.info) ? String(object.info) : "",
	            upgradedClientState: (0, helpers_1.isSet)(object.upgradedClientState)
	                ? any_1.Any.fromJSON(object.upgradedClientState)
	                : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.name !== undefined && (obj.name = message.name);
	        message.time !== undefined && (obj.time = (0, helpers_1.fromTimestamp)(message.time).toISOString());
	        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.ZERO).toString());
	        message.info !== undefined && (obj.info = message.info);
	        message.upgradedClientState !== undefined &&
	            (obj.upgradedClientState = message.upgradedClientState
	                ? any_1.Any.toJSON(message.upgradedClientState)
	                : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBasePlan();
	        message.name = object.name ?? "";
	        message.time =
	            object.time !== undefined && object.time !== null ? timestamp_1.Timestamp.fromPartial(object.time) : undefined;
	        message.height =
	            object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO;
	        message.info = object.info ?? "";
	        message.upgradedClientState =
	            object.upgradedClientState !== undefined && object.upgradedClientState !== null
	                ? any_1.Any.fromPartial(object.upgradedClientState)
	                : undefined;
	        return message;
	    },
	};
	function createBaseSoftwareUpgradeProposal() {
	    return {
	        title: "",
	        description: "",
	        plan: undefined,
	    };
	}
	exports.SoftwareUpgradeProposal = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.title !== "") {
	            writer.uint32(10).string(message.title);
	        }
	        if (message.description !== "") {
	            writer.uint32(18).string(message.description);
	        }
	        if (message.plan !== undefined) {
	            exports.Plan.encode(message.plan, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseSoftwareUpgradeProposal();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.title = reader.string();
	                    break;
	                case 2:
	                    message.description = reader.string();
	                    break;
	                case 3:
	                    message.plan = exports.Plan.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            title: (0, helpers_1.isSet)(object.title) ? String(object.title) : "",
	            description: (0, helpers_1.isSet)(object.description) ? String(object.description) : "",
	            plan: (0, helpers_1.isSet)(object.plan) ? exports.Plan.fromJSON(object.plan) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.title !== undefined && (obj.title = message.title);
	        message.description !== undefined && (obj.description = message.description);
	        message.plan !== undefined && (obj.plan = message.plan ? exports.Plan.toJSON(message.plan) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseSoftwareUpgradeProposal();
	        message.title = object.title ?? "";
	        message.description = object.description ?? "";
	        message.plan =
	            object.plan !== undefined && object.plan !== null ? exports.Plan.fromPartial(object.plan) : undefined;
	        return message;
	    },
	};
	function createBaseCancelSoftwareUpgradeProposal() {
	    return {
	        title: "",
	        description: "",
	    };
	}
	exports.CancelSoftwareUpgradeProposal = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.title !== "") {
	            writer.uint32(10).string(message.title);
	        }
	        if (message.description !== "") {
	            writer.uint32(18).string(message.description);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseCancelSoftwareUpgradeProposal();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.title = reader.string();
	                    break;
	                case 2:
	                    message.description = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            title: (0, helpers_1.isSet)(object.title) ? String(object.title) : "",
	            description: (0, helpers_1.isSet)(object.description) ? String(object.description) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.title !== undefined && (obj.title = message.title);
	        message.description !== undefined && (obj.description = message.description);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseCancelSoftwareUpgradeProposal();
	        message.title = object.title ?? "";
	        message.description = object.description ?? "";
	        return message;
	    },
	};
	function createBaseModuleVersion() {
	    return {
	        name: "",
	        version: helpers_1.Long.UZERO,
	    };
	}
	exports.ModuleVersion = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.name !== "") {
	            writer.uint32(10).string(message.name);
	        }
	        if (!message.version.isZero()) {
	            writer.uint32(16).uint64(message.version);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseModuleVersion();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.name = reader.string();
	                    break;
	                case 2:
	                    message.version = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            name: (0, helpers_1.isSet)(object.name) ? String(object.name) : "",
	            version: (0, helpers_1.isSet)(object.version) ? helpers_1.Long.fromValue(object.version) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.name !== undefined && (obj.name = message.name);
	        message.version !== undefined && (obj.version = (message.version || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseModuleVersion();
	        message.name = object.name ?? "";
	        message.version =
	            object.version !== undefined && object.version !== null ? helpers_1.Long.fromValue(object.version) : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	
} (upgrade));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Params = exports.Height = exports.UpgradeProposal = exports.ClientUpdateProposal = exports.ClientConsensusStates = exports.ConsensusStateWithHeight = exports.IdentifiedClientState = exports.protobufPackage = void 0;
	/* eslint-disable */
	const any_1 = any;
	const upgrade_1 = upgrade;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "ibc.core.client.v1";
	function createBaseIdentifiedClientState() {
	    return {
	        clientId: "",
	        clientState: undefined,
	    };
	}
	exports.IdentifiedClientState = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientId !== "") {
	            writer.uint32(10).string(message.clientId);
	        }
	        if (message.clientState !== undefined) {
	            any_1.Any.encode(message.clientState, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseIdentifiedClientState();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientId = reader.string();
	                    break;
	                case 2:
	                    message.clientState = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	            clientState: (0, helpers_1.isSet)(object.clientState) ? any_1.Any.fromJSON(object.clientState) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        message.clientState !== undefined &&
	            (obj.clientState = message.clientState ? any_1.Any.toJSON(message.clientState) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseIdentifiedClientState();
	        message.clientId = object.clientId ?? "";
	        message.clientState =
	            object.clientState !== undefined && object.clientState !== null
	                ? any_1.Any.fromPartial(object.clientState)
	                : undefined;
	        return message;
	    },
	};
	function createBaseConsensusStateWithHeight() {
	    return {
	        height: undefined,
	        consensusState: undefined,
	    };
	}
	exports.ConsensusStateWithHeight = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.height !== undefined) {
	            exports.Height.encode(message.height, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.consensusState !== undefined) {
	            any_1.Any.encode(message.consensusState, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseConsensusStateWithHeight();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.height = exports.Height.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.consensusState = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            height: (0, helpers_1.isSet)(object.height) ? exports.Height.fromJSON(object.height) : undefined,
	            consensusState: (0, helpers_1.isSet)(object.consensusState) ? any_1.Any.fromJSON(object.consensusState) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.height !== undefined && (obj.height = message.height ? exports.Height.toJSON(message.height) : undefined);
	        message.consensusState !== undefined &&
	            (obj.consensusState = message.consensusState ? any_1.Any.toJSON(message.consensusState) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseConsensusStateWithHeight();
	        message.height =
	            object.height !== undefined && object.height !== null ? exports.Height.fromPartial(object.height) : undefined;
	        message.consensusState =
	            object.consensusState !== undefined && object.consensusState !== null
	                ? any_1.Any.fromPartial(object.consensusState)
	                : undefined;
	        return message;
	    },
	};
	function createBaseClientConsensusStates() {
	    return {
	        clientId: "",
	        consensusStates: [],
	    };
	}
	exports.ClientConsensusStates = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientId !== "") {
	            writer.uint32(10).string(message.clientId);
	        }
	        for (const v of message.consensusStates) {
	            exports.ConsensusStateWithHeight.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseClientConsensusStates();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientId = reader.string();
	                    break;
	                case 2:
	                    message.consensusStates.push(exports.ConsensusStateWithHeight.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	            consensusStates: Array.isArray(object?.consensusStates)
	                ? object.consensusStates.map((e) => exports.ConsensusStateWithHeight.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        if (message.consensusStates) {
	            obj.consensusStates = message.consensusStates.map((e) => e ? exports.ConsensusStateWithHeight.toJSON(e) : undefined);
	        }
	        else {
	            obj.consensusStates = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseClientConsensusStates();
	        message.clientId = object.clientId ?? "";
	        message.consensusStates =
	            object.consensusStates?.map((e) => exports.ConsensusStateWithHeight.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseClientUpdateProposal() {
	    return {
	        title: "",
	        description: "",
	        subjectClientId: "",
	        substituteClientId: "",
	    };
	}
	exports.ClientUpdateProposal = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.title !== "") {
	            writer.uint32(10).string(message.title);
	        }
	        if (message.description !== "") {
	            writer.uint32(18).string(message.description);
	        }
	        if (message.subjectClientId !== "") {
	            writer.uint32(26).string(message.subjectClientId);
	        }
	        if (message.substituteClientId !== "") {
	            writer.uint32(34).string(message.substituteClientId);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseClientUpdateProposal();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.title = reader.string();
	                    break;
	                case 2:
	                    message.description = reader.string();
	                    break;
	                case 3:
	                    message.subjectClientId = reader.string();
	                    break;
	                case 4:
	                    message.substituteClientId = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            title: (0, helpers_1.isSet)(object.title) ? String(object.title) : "",
	            description: (0, helpers_1.isSet)(object.description) ? String(object.description) : "",
	            subjectClientId: (0, helpers_1.isSet)(object.subjectClientId) ? String(object.subjectClientId) : "",
	            substituteClientId: (0, helpers_1.isSet)(object.substituteClientId) ? String(object.substituteClientId) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.title !== undefined && (obj.title = message.title);
	        message.description !== undefined && (obj.description = message.description);
	        message.subjectClientId !== undefined && (obj.subjectClientId = message.subjectClientId);
	        message.substituteClientId !== undefined && (obj.substituteClientId = message.substituteClientId);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseClientUpdateProposal();
	        message.title = object.title ?? "";
	        message.description = object.description ?? "";
	        message.subjectClientId = object.subjectClientId ?? "";
	        message.substituteClientId = object.substituteClientId ?? "";
	        return message;
	    },
	};
	function createBaseUpgradeProposal() {
	    return {
	        title: "",
	        description: "",
	        plan: undefined,
	        upgradedClientState: undefined,
	    };
	}
	exports.UpgradeProposal = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.title !== "") {
	            writer.uint32(10).string(message.title);
	        }
	        if (message.description !== "") {
	            writer.uint32(18).string(message.description);
	        }
	        if (message.plan !== undefined) {
	            upgrade_1.Plan.encode(message.plan, writer.uint32(26).fork()).ldelim();
	        }
	        if (message.upgradedClientState !== undefined) {
	            any_1.Any.encode(message.upgradedClientState, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseUpgradeProposal();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.title = reader.string();
	                    break;
	                case 2:
	                    message.description = reader.string();
	                    break;
	                case 3:
	                    message.plan = upgrade_1.Plan.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.upgradedClientState = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            title: (0, helpers_1.isSet)(object.title) ? String(object.title) : "",
	            description: (0, helpers_1.isSet)(object.description) ? String(object.description) : "",
	            plan: (0, helpers_1.isSet)(object.plan) ? upgrade_1.Plan.fromJSON(object.plan) : undefined,
	            upgradedClientState: (0, helpers_1.isSet)(object.upgradedClientState)
	                ? any_1.Any.fromJSON(object.upgradedClientState)
	                : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.title !== undefined && (obj.title = message.title);
	        message.description !== undefined && (obj.description = message.description);
	        message.plan !== undefined && (obj.plan = message.plan ? upgrade_1.Plan.toJSON(message.plan) : undefined);
	        message.upgradedClientState !== undefined &&
	            (obj.upgradedClientState = message.upgradedClientState
	                ? any_1.Any.toJSON(message.upgradedClientState)
	                : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseUpgradeProposal();
	        message.title = object.title ?? "";
	        message.description = object.description ?? "";
	        message.plan =
	            object.plan !== undefined && object.plan !== null ? upgrade_1.Plan.fromPartial(object.plan) : undefined;
	        message.upgradedClientState =
	            object.upgradedClientState !== undefined && object.upgradedClientState !== null
	                ? any_1.Any.fromPartial(object.upgradedClientState)
	                : undefined;
	        return message;
	    },
	};
	function createBaseHeight() {
	    return {
	        revisionNumber: helpers_1.Long.UZERO,
	        revisionHeight: helpers_1.Long.UZERO,
	    };
	}
	exports.Height = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.revisionNumber.isZero()) {
	            writer.uint32(8).uint64(message.revisionNumber);
	        }
	        if (!message.revisionHeight.isZero()) {
	            writer.uint32(16).uint64(message.revisionHeight);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseHeight();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.revisionNumber = reader.uint64();
	                    break;
	                case 2:
	                    message.revisionHeight = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            revisionNumber: (0, helpers_1.isSet)(object.revisionNumber) ? helpers_1.Long.fromValue(object.revisionNumber) : helpers_1.Long.UZERO,
	            revisionHeight: (0, helpers_1.isSet)(object.revisionHeight) ? helpers_1.Long.fromValue(object.revisionHeight) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.revisionNumber !== undefined &&
	            (obj.revisionNumber = (message.revisionNumber || helpers_1.Long.UZERO).toString());
	        message.revisionHeight !== undefined &&
	            (obj.revisionHeight = (message.revisionHeight || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseHeight();
	        message.revisionNumber =
	            object.revisionNumber !== undefined && object.revisionNumber !== null
	                ? helpers_1.Long.fromValue(object.revisionNumber)
	                : helpers_1.Long.UZERO;
	        message.revisionHeight =
	            object.revisionHeight !== undefined && object.revisionHeight !== null
	                ? helpers_1.Long.fromValue(object.revisionHeight)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseParams() {
	    return {
	        allowedClients: [],
	    };
	}
	exports.Params = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.allowedClients) {
	            writer.uint32(10).string(v);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseParams();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.allowedClients.push(reader.string());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            allowedClients: Array.isArray(object?.allowedClients)
	                ? object.allowedClients.map((e) => String(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.allowedClients) {
	            obj.allowedClients = message.allowedClients.map((e) => e);
	        }
	        else {
	            obj.allowedClients = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseParams();
	        message.allowedClients = object.allowedClients?.map((e) => e) || [];
	        return message;
	    },
	};
	
} (client));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.MsgClientImpl = exports.MsgTransferResponse = exports.MsgTransfer = exports.protobufPackage = void 0;
	/* eslint-disable */
	const coin_1 = coin$1;
	const client_1 = client;
	const helpers_1 = helpers;
	const _m0 = __importStar(minimal);
	exports.protobufPackage = "ibc.applications.transfer.v1";
	function createBaseMsgTransfer() {
	    return {
	        sourcePort: "",
	        sourceChannel: "",
	        token: undefined,
	        sender: "",
	        receiver: "",
	        timeoutHeight: undefined,
	        timeoutTimestamp: helpers_1.Long.UZERO,
	        memo: "",
	    };
	}
	exports.MsgTransfer = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.sourcePort !== "") {
	            writer.uint32(10).string(message.sourcePort);
	        }
	        if (message.sourceChannel !== "") {
	            writer.uint32(18).string(message.sourceChannel);
	        }
	        if (message.token !== undefined) {
	            coin_1.Coin.encode(message.token, writer.uint32(26).fork()).ldelim();
	        }
	        if (message.sender !== "") {
	            writer.uint32(34).string(message.sender);
	        }
	        if (message.receiver !== "") {
	            writer.uint32(42).string(message.receiver);
	        }
	        if (message.timeoutHeight !== undefined) {
	            client_1.Height.encode(message.timeoutHeight, writer.uint32(50).fork()).ldelim();
	        }
	        if (!message.timeoutTimestamp.isZero()) {
	            writer.uint32(56).uint64(message.timeoutTimestamp);
	        }
	        if (message.memo !== "") {
	            writer.uint32(66).string(message.memo);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgTransfer();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.sourcePort = reader.string();
	                    break;
	                case 2:
	                    message.sourceChannel = reader.string();
	                    break;
	                case 3:
	                    message.token = coin_1.Coin.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.sender = reader.string();
	                    break;
	                case 5:
	                    message.receiver = reader.string();
	                    break;
	                case 6:
	                    message.timeoutHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                case 7:
	                    message.timeoutTimestamp = reader.uint64();
	                    break;
	                case 8:
	                    message.memo = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            sourcePort: (0, helpers_1.isSet)(object.sourcePort) ? String(object.sourcePort) : "",
	            sourceChannel: (0, helpers_1.isSet)(object.sourceChannel) ? String(object.sourceChannel) : "",
	            token: (0, helpers_1.isSet)(object.token) ? coin_1.Coin.fromJSON(object.token) : undefined,
	            sender: (0, helpers_1.isSet)(object.sender) ? String(object.sender) : "",
	            receiver: (0, helpers_1.isSet)(object.receiver) ? String(object.receiver) : "",
	            timeoutHeight: (0, helpers_1.isSet)(object.timeoutHeight) ? client_1.Height.fromJSON(object.timeoutHeight) : undefined,
	            timeoutTimestamp: (0, helpers_1.isSet)(object.timeoutTimestamp) ? helpers_1.Long.fromValue(object.timeoutTimestamp) : helpers_1.Long.UZERO,
	            memo: (0, helpers_1.isSet)(object.memo) ? String(object.memo) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.sourcePort !== undefined && (obj.sourcePort = message.sourcePort);
	        message.sourceChannel !== undefined && (obj.sourceChannel = message.sourceChannel);
	        message.token !== undefined && (obj.token = message.token ? coin_1.Coin.toJSON(message.token) : undefined);
	        message.sender !== undefined && (obj.sender = message.sender);
	        message.receiver !== undefined && (obj.receiver = message.receiver);
	        message.timeoutHeight !== undefined &&
	            (obj.timeoutHeight = message.timeoutHeight ? client_1.Height.toJSON(message.timeoutHeight) : undefined);
	        message.timeoutTimestamp !== undefined &&
	            (obj.timeoutTimestamp = (message.timeoutTimestamp || helpers_1.Long.UZERO).toString());
	        message.memo !== undefined && (obj.memo = message.memo);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgTransfer();
	        message.sourcePort = object.sourcePort ?? "";
	        message.sourceChannel = object.sourceChannel ?? "";
	        message.token =
	            object.token !== undefined && object.token !== null ? coin_1.Coin.fromPartial(object.token) : undefined;
	        message.sender = object.sender ?? "";
	        message.receiver = object.receiver ?? "";
	        message.timeoutHeight =
	            object.timeoutHeight !== undefined && object.timeoutHeight !== null
	                ? client_1.Height.fromPartial(object.timeoutHeight)
	                : undefined;
	        message.timeoutTimestamp =
	            object.timeoutTimestamp !== undefined && object.timeoutTimestamp !== null
	                ? helpers_1.Long.fromValue(object.timeoutTimestamp)
	                : helpers_1.Long.UZERO;
	        message.memo = object.memo ?? "";
	        return message;
	    },
	};
	function createBaseMsgTransferResponse() {
	    return {
	        sequence: helpers_1.Long.UZERO,
	    };
	}
	exports.MsgTransferResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.sequence.isZero()) {
	            writer.uint32(8).uint64(message.sequence);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgTransferResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.sequence = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            sequence: (0, helpers_1.isSet)(object.sequence) ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.sequence !== undefined && (obj.sequence = (message.sequence || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgTransferResponse();
	        message.sequence =
	            object.sequence !== undefined && object.sequence !== null
	                ? helpers_1.Long.fromValue(object.sequence)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	class MsgClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.Transfer = this.Transfer.bind(this);
	    }
	    Transfer(request) {
	        const data = exports.MsgTransfer.encode(request).finish();
	        const promise = this.rpc.request("ibc.applications.transfer.v1.Msg", "Transfer", data);
	        return promise.then((data) => exports.MsgTransferResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.MsgClientImpl = MsgClientImpl;
	
} (tx$8));

var __importDefault$7 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(aminomessages$3, "__esModule", { value: true });
aminomessages$3.createIbcAminoConverters = aminomessages$3.isAminoMsgTransfer = void 0;
const tx_1$5 = tx$8;
const long_1$5 = __importDefault$7(long);
function isAminoMsgTransfer(msg) {
    return msg.type === "cosmos-sdk/MsgTransfer";
}
aminomessages$3.isAminoMsgTransfer = isAminoMsgTransfer;
function omitDefault(input) {
    if (typeof input === "string") {
        return input === "" ? undefined : input;
    }
    if (typeof input === "number") {
        return input === 0 ? undefined : input;
    }
    if (long_1$5.default.isLong(input)) {
        return input.isZero() ? undefined : input;
    }
    throw new Error(`Got unsupported type '${typeof input}'`);
}
function createIbcAminoConverters() {
    return {
        "/ibc.applications.transfer.v1.MsgTransfer": {
            aminoType: "cosmos-sdk/MsgTransfer",
            toAmino: ({ sourcePort, sourceChannel, token, sender, receiver, timeoutHeight, timeoutTimestamp, }) => ({
                source_port: sourcePort,
                source_channel: sourceChannel,
                token: token,
                sender: sender,
                receiver: receiver,
                timeout_height: timeoutHeight
                    ? {
                        revision_height: omitDefault(timeoutHeight.revisionHeight)?.toString(),
                        revision_number: omitDefault(timeoutHeight.revisionNumber)?.toString(),
                    }
                    : {},
                timeout_timestamp: omitDefault(timeoutTimestamp)?.toString(),
            }),
            fromAmino: ({ source_port, source_channel, token, sender, receiver, timeout_height, timeout_timestamp, }) => tx_1$5.MsgTransfer.fromPartial({
                sourcePort: source_port,
                sourceChannel: source_channel,
                token: token,
                sender: sender,
                receiver: receiver,
                timeoutHeight: timeout_height
                    ? {
                        revisionHeight: long_1$5.default.fromString(timeout_height.revision_height || "0", true),
                        revisionNumber: long_1$5.default.fromString(timeout_height.revision_number || "0", true),
                    }
                    : undefined,
                timeoutTimestamp: long_1$5.default.fromString(timeout_timestamp || "0", true),
            }),
        },
    };
}
aminomessages$3.createIbcAminoConverters = createIbcAminoConverters;

var messages$2 = {};

var tx$7 = {};

var channel = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Acknowledgement = exports.PacketId = exports.PacketState = exports.Packet = exports.Counterparty = exports.IdentifiedChannel = exports.Channel = exports.orderToJSON = exports.orderFromJSON = exports.Order = exports.stateToJSON = exports.stateFromJSON = exports.State = exports.protobufPackage = void 0;
	/* eslint-disable */
	const client_1 = client;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "ibc.core.channel.v1";
	/**
	 * State defines if a channel is in one of the following states:
	 * CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.
	 */
	var State;
	(function (State) {
	    /** STATE_UNINITIALIZED_UNSPECIFIED - Default State */
	    State[State["STATE_UNINITIALIZED_UNSPECIFIED"] = 0] = "STATE_UNINITIALIZED_UNSPECIFIED";
	    /** STATE_INIT - A channel has just started the opening handshake. */
	    State[State["STATE_INIT"] = 1] = "STATE_INIT";
	    /** STATE_TRYOPEN - A channel has acknowledged the handshake step on the counterparty chain. */
	    State[State["STATE_TRYOPEN"] = 2] = "STATE_TRYOPEN";
	    /**
	     * STATE_OPEN - A channel has completed the handshake. Open channels are
	     * ready to send and receive packets.
	     */
	    State[State["STATE_OPEN"] = 3] = "STATE_OPEN";
	    /**
	     * STATE_CLOSED - A channel has been closed and can no longer be used to send or receive
	     * packets.
	     */
	    State[State["STATE_CLOSED"] = 4] = "STATE_CLOSED";
	    State[State["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
	})(State = exports.State || (exports.State = {}));
	function stateFromJSON(object) {
	    switch (object) {
	        case 0:
	        case "STATE_UNINITIALIZED_UNSPECIFIED":
	            return State.STATE_UNINITIALIZED_UNSPECIFIED;
	        case 1:
	        case "STATE_INIT":
	            return State.STATE_INIT;
	        case 2:
	        case "STATE_TRYOPEN":
	            return State.STATE_TRYOPEN;
	        case 3:
	        case "STATE_OPEN":
	            return State.STATE_OPEN;
	        case 4:
	        case "STATE_CLOSED":
	            return State.STATE_CLOSED;
	        case -1:
	        case "UNRECOGNIZED":
	        default:
	            return State.UNRECOGNIZED;
	    }
	}
	exports.stateFromJSON = stateFromJSON;
	function stateToJSON(object) {
	    switch (object) {
	        case State.STATE_UNINITIALIZED_UNSPECIFIED:
	            return "STATE_UNINITIALIZED_UNSPECIFIED";
	        case State.STATE_INIT:
	            return "STATE_INIT";
	        case State.STATE_TRYOPEN:
	            return "STATE_TRYOPEN";
	        case State.STATE_OPEN:
	            return "STATE_OPEN";
	        case State.STATE_CLOSED:
	            return "STATE_CLOSED";
	        case State.UNRECOGNIZED:
	        default:
	            return "UNRECOGNIZED";
	    }
	}
	exports.stateToJSON = stateToJSON;
	/** Order defines if a channel is ORDERED or UNORDERED */
	var Order;
	(function (Order) {
	    /** ORDER_NONE_UNSPECIFIED - zero-value for channel ordering */
	    Order[Order["ORDER_NONE_UNSPECIFIED"] = 0] = "ORDER_NONE_UNSPECIFIED";
	    /**
	     * ORDER_UNORDERED - packets can be delivered in any order, which may differ from the order in
	     * which they were sent.
	     */
	    Order[Order["ORDER_UNORDERED"] = 1] = "ORDER_UNORDERED";
	    /** ORDER_ORDERED - packets are delivered exactly in the order which they were sent */
	    Order[Order["ORDER_ORDERED"] = 2] = "ORDER_ORDERED";
	    Order[Order["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
	})(Order = exports.Order || (exports.Order = {}));
	function orderFromJSON(object) {
	    switch (object) {
	        case 0:
	        case "ORDER_NONE_UNSPECIFIED":
	            return Order.ORDER_NONE_UNSPECIFIED;
	        case 1:
	        case "ORDER_UNORDERED":
	            return Order.ORDER_UNORDERED;
	        case 2:
	        case "ORDER_ORDERED":
	            return Order.ORDER_ORDERED;
	        case -1:
	        case "UNRECOGNIZED":
	        default:
	            return Order.UNRECOGNIZED;
	    }
	}
	exports.orderFromJSON = orderFromJSON;
	function orderToJSON(object) {
	    switch (object) {
	        case Order.ORDER_NONE_UNSPECIFIED:
	            return "ORDER_NONE_UNSPECIFIED";
	        case Order.ORDER_UNORDERED:
	            return "ORDER_UNORDERED";
	        case Order.ORDER_ORDERED:
	            return "ORDER_ORDERED";
	        case Order.UNRECOGNIZED:
	        default:
	            return "UNRECOGNIZED";
	    }
	}
	exports.orderToJSON = orderToJSON;
	function createBaseChannel() {
	    return {
	        state: 0,
	        ordering: 0,
	        counterparty: undefined,
	        connectionHops: [],
	        version: "",
	    };
	}
	exports.Channel = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.state !== 0) {
	            writer.uint32(8).int32(message.state);
	        }
	        if (message.ordering !== 0) {
	            writer.uint32(16).int32(message.ordering);
	        }
	        if (message.counterparty !== undefined) {
	            exports.Counterparty.encode(message.counterparty, writer.uint32(26).fork()).ldelim();
	        }
	        for (const v of message.connectionHops) {
	            writer.uint32(34).string(v);
	        }
	        if (message.version !== "") {
	            writer.uint32(42).string(message.version);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseChannel();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.state = reader.int32();
	                    break;
	                case 2:
	                    message.ordering = reader.int32();
	                    break;
	                case 3:
	                    message.counterparty = exports.Counterparty.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.connectionHops.push(reader.string());
	                    break;
	                case 5:
	                    message.version = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            state: (0, helpers_1.isSet)(object.state) ? stateFromJSON(object.state) : 0,
	            ordering: (0, helpers_1.isSet)(object.ordering) ? orderFromJSON(object.ordering) : 0,
	            counterparty: (0, helpers_1.isSet)(object.counterparty) ? exports.Counterparty.fromJSON(object.counterparty) : undefined,
	            connectionHops: Array.isArray(object?.connectionHops)
	                ? object.connectionHops.map((e) => String(e))
	                : [],
	            version: (0, helpers_1.isSet)(object.version) ? String(object.version) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.state !== undefined && (obj.state = stateToJSON(message.state));
	        message.ordering !== undefined && (obj.ordering = orderToJSON(message.ordering));
	        message.counterparty !== undefined &&
	            (obj.counterparty = message.counterparty ? exports.Counterparty.toJSON(message.counterparty) : undefined);
	        if (message.connectionHops) {
	            obj.connectionHops = message.connectionHops.map((e) => e);
	        }
	        else {
	            obj.connectionHops = [];
	        }
	        message.version !== undefined && (obj.version = message.version);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseChannel();
	        message.state = object.state ?? 0;
	        message.ordering = object.ordering ?? 0;
	        message.counterparty =
	            object.counterparty !== undefined && object.counterparty !== null
	                ? exports.Counterparty.fromPartial(object.counterparty)
	                : undefined;
	        message.connectionHops = object.connectionHops?.map((e) => e) || [];
	        message.version = object.version ?? "";
	        return message;
	    },
	};
	function createBaseIdentifiedChannel() {
	    return {
	        state: 0,
	        ordering: 0,
	        counterparty: undefined,
	        connectionHops: [],
	        version: "",
	        portId: "",
	        channelId: "",
	    };
	}
	exports.IdentifiedChannel = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.state !== 0) {
	            writer.uint32(8).int32(message.state);
	        }
	        if (message.ordering !== 0) {
	            writer.uint32(16).int32(message.ordering);
	        }
	        if (message.counterparty !== undefined) {
	            exports.Counterparty.encode(message.counterparty, writer.uint32(26).fork()).ldelim();
	        }
	        for (const v of message.connectionHops) {
	            writer.uint32(34).string(v);
	        }
	        if (message.version !== "") {
	            writer.uint32(42).string(message.version);
	        }
	        if (message.portId !== "") {
	            writer.uint32(50).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(58).string(message.channelId);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseIdentifiedChannel();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.state = reader.int32();
	                    break;
	                case 2:
	                    message.ordering = reader.int32();
	                    break;
	                case 3:
	                    message.counterparty = exports.Counterparty.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.connectionHops.push(reader.string());
	                    break;
	                case 5:
	                    message.version = reader.string();
	                    break;
	                case 6:
	                    message.portId = reader.string();
	                    break;
	                case 7:
	                    message.channelId = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            state: (0, helpers_1.isSet)(object.state) ? stateFromJSON(object.state) : 0,
	            ordering: (0, helpers_1.isSet)(object.ordering) ? orderFromJSON(object.ordering) : 0,
	            counterparty: (0, helpers_1.isSet)(object.counterparty) ? exports.Counterparty.fromJSON(object.counterparty) : undefined,
	            connectionHops: Array.isArray(object?.connectionHops)
	                ? object.connectionHops.map((e) => String(e))
	                : [],
	            version: (0, helpers_1.isSet)(object.version) ? String(object.version) : "",
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.state !== undefined && (obj.state = stateToJSON(message.state));
	        message.ordering !== undefined && (obj.ordering = orderToJSON(message.ordering));
	        message.counterparty !== undefined &&
	            (obj.counterparty = message.counterparty ? exports.Counterparty.toJSON(message.counterparty) : undefined);
	        if (message.connectionHops) {
	            obj.connectionHops = message.connectionHops.map((e) => e);
	        }
	        else {
	            obj.connectionHops = [];
	        }
	        message.version !== undefined && (obj.version = message.version);
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseIdentifiedChannel();
	        message.state = object.state ?? 0;
	        message.ordering = object.ordering ?? 0;
	        message.counterparty =
	            object.counterparty !== undefined && object.counterparty !== null
	                ? exports.Counterparty.fromPartial(object.counterparty)
	                : undefined;
	        message.connectionHops = object.connectionHops?.map((e) => e) || [];
	        message.version = object.version ?? "";
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        return message;
	    },
	};
	function createBaseCounterparty() {
	    return {
	        portId: "",
	        channelId: "",
	    };
	}
	exports.Counterparty = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseCounterparty();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseCounterparty();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        return message;
	    },
	};
	function createBasePacket() {
	    return {
	        sequence: helpers_1.Long.UZERO,
	        sourcePort: "",
	        sourceChannel: "",
	        destinationPort: "",
	        destinationChannel: "",
	        data: new Uint8Array(),
	        timeoutHeight: undefined,
	        timeoutTimestamp: helpers_1.Long.UZERO,
	    };
	}
	exports.Packet = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.sequence.isZero()) {
	            writer.uint32(8).uint64(message.sequence);
	        }
	        if (message.sourcePort !== "") {
	            writer.uint32(18).string(message.sourcePort);
	        }
	        if (message.sourceChannel !== "") {
	            writer.uint32(26).string(message.sourceChannel);
	        }
	        if (message.destinationPort !== "") {
	            writer.uint32(34).string(message.destinationPort);
	        }
	        if (message.destinationChannel !== "") {
	            writer.uint32(42).string(message.destinationChannel);
	        }
	        if (message.data.length !== 0) {
	            writer.uint32(50).bytes(message.data);
	        }
	        if (message.timeoutHeight !== undefined) {
	            client_1.Height.encode(message.timeoutHeight, writer.uint32(58).fork()).ldelim();
	        }
	        if (!message.timeoutTimestamp.isZero()) {
	            writer.uint32(64).uint64(message.timeoutTimestamp);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBasePacket();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.sequence = reader.uint64();
	                    break;
	                case 2:
	                    message.sourcePort = reader.string();
	                    break;
	                case 3:
	                    message.sourceChannel = reader.string();
	                    break;
	                case 4:
	                    message.destinationPort = reader.string();
	                    break;
	                case 5:
	                    message.destinationChannel = reader.string();
	                    break;
	                case 6:
	                    message.data = reader.bytes();
	                    break;
	                case 7:
	                    message.timeoutHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                case 8:
	                    message.timeoutTimestamp = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            sequence: (0, helpers_1.isSet)(object.sequence) ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO,
	            sourcePort: (0, helpers_1.isSet)(object.sourcePort) ? String(object.sourcePort) : "",
	            sourceChannel: (0, helpers_1.isSet)(object.sourceChannel) ? String(object.sourceChannel) : "",
	            destinationPort: (0, helpers_1.isSet)(object.destinationPort) ? String(object.destinationPort) : "",
	            destinationChannel: (0, helpers_1.isSet)(object.destinationChannel) ? String(object.destinationChannel) : "",
	            data: (0, helpers_1.isSet)(object.data) ? (0, helpers_1.bytesFromBase64)(object.data) : new Uint8Array(),
	            timeoutHeight: (0, helpers_1.isSet)(object.timeoutHeight) ? client_1.Height.fromJSON(object.timeoutHeight) : undefined,
	            timeoutTimestamp: (0, helpers_1.isSet)(object.timeoutTimestamp) ? helpers_1.Long.fromValue(object.timeoutTimestamp) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.sequence !== undefined && (obj.sequence = (message.sequence || helpers_1.Long.UZERO).toString());
	        message.sourcePort !== undefined && (obj.sourcePort = message.sourcePort);
	        message.sourceChannel !== undefined && (obj.sourceChannel = message.sourceChannel);
	        message.destinationPort !== undefined && (obj.destinationPort = message.destinationPort);
	        message.destinationChannel !== undefined && (obj.destinationChannel = message.destinationChannel);
	        message.data !== undefined &&
	            (obj.data = (0, helpers_1.base64FromBytes)(message.data !== undefined ? message.data : new Uint8Array()));
	        message.timeoutHeight !== undefined &&
	            (obj.timeoutHeight = message.timeoutHeight ? client_1.Height.toJSON(message.timeoutHeight) : undefined);
	        message.timeoutTimestamp !== undefined &&
	            (obj.timeoutTimestamp = (message.timeoutTimestamp || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBasePacket();
	        message.sequence =
	            object.sequence !== undefined && object.sequence !== null
	                ? helpers_1.Long.fromValue(object.sequence)
	                : helpers_1.Long.UZERO;
	        message.sourcePort = object.sourcePort ?? "";
	        message.sourceChannel = object.sourceChannel ?? "";
	        message.destinationPort = object.destinationPort ?? "";
	        message.destinationChannel = object.destinationChannel ?? "";
	        message.data = object.data ?? new Uint8Array();
	        message.timeoutHeight =
	            object.timeoutHeight !== undefined && object.timeoutHeight !== null
	                ? client_1.Height.fromPartial(object.timeoutHeight)
	                : undefined;
	        message.timeoutTimestamp =
	            object.timeoutTimestamp !== undefined && object.timeoutTimestamp !== null
	                ? helpers_1.Long.fromValue(object.timeoutTimestamp)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBasePacketState() {
	    return {
	        portId: "",
	        channelId: "",
	        sequence: helpers_1.Long.UZERO,
	        data: new Uint8Array(),
	    };
	}
	exports.PacketState = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        if (!message.sequence.isZero()) {
	            writer.uint32(24).uint64(message.sequence);
	        }
	        if (message.data.length !== 0) {
	            writer.uint32(34).bytes(message.data);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBasePacketState();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                case 3:
	                    message.sequence = reader.uint64();
	                    break;
	                case 4:
	                    message.data = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	            sequence: (0, helpers_1.isSet)(object.sequence) ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO,
	            data: (0, helpers_1.isSet)(object.data) ? (0, helpers_1.bytesFromBase64)(object.data) : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        message.sequence !== undefined && (obj.sequence = (message.sequence || helpers_1.Long.UZERO).toString());
	        message.data !== undefined &&
	            (obj.data = (0, helpers_1.base64FromBytes)(message.data !== undefined ? message.data : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBasePacketState();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        message.sequence =
	            object.sequence !== undefined && object.sequence !== null
	                ? helpers_1.Long.fromValue(object.sequence)
	                : helpers_1.Long.UZERO;
	        message.data = object.data ?? new Uint8Array();
	        return message;
	    },
	};
	function createBasePacketId() {
	    return {
	        portId: "",
	        channelId: "",
	        sequence: helpers_1.Long.UZERO,
	    };
	}
	exports.PacketId = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        if (!message.sequence.isZero()) {
	            writer.uint32(24).uint64(message.sequence);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBasePacketId();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                case 3:
	                    message.sequence = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	            sequence: (0, helpers_1.isSet)(object.sequence) ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        message.sequence !== undefined && (obj.sequence = (message.sequence || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBasePacketId();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        message.sequence =
	            object.sequence !== undefined && object.sequence !== null
	                ? helpers_1.Long.fromValue(object.sequence)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseAcknowledgement() {
	    return {
	        result: undefined,
	        error: undefined,
	    };
	}
	exports.Acknowledgement = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.result !== undefined) {
	            writer.uint32(170).bytes(message.result);
	        }
	        if (message.error !== undefined) {
	            writer.uint32(178).string(message.error);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseAcknowledgement();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 21:
	                    message.result = reader.bytes();
	                    break;
	                case 22:
	                    message.error = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            result: (0, helpers_1.isSet)(object.result) ? (0, helpers_1.bytesFromBase64)(object.result) : undefined,
	            error: (0, helpers_1.isSet)(object.error) ? String(object.error) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.result !== undefined &&
	            (obj.result = message.result !== undefined ? (0, helpers_1.base64FromBytes)(message.result) : undefined);
	        message.error !== undefined && (obj.error = message.error);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseAcknowledgement();
	        message.result = object.result ?? undefined;
	        message.error = object.error ?? undefined;
	        return message;
	    },
	};
	
} (channel));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.MsgClientImpl = exports.MsgAcknowledgementResponse = exports.MsgAcknowledgement = exports.MsgTimeoutOnCloseResponse = exports.MsgTimeoutOnClose = exports.MsgTimeoutResponse = exports.MsgTimeout = exports.MsgRecvPacketResponse = exports.MsgRecvPacket = exports.MsgChannelCloseConfirmResponse = exports.MsgChannelCloseConfirm = exports.MsgChannelCloseInitResponse = exports.MsgChannelCloseInit = exports.MsgChannelOpenConfirmResponse = exports.MsgChannelOpenConfirm = exports.MsgChannelOpenAckResponse = exports.MsgChannelOpenAck = exports.MsgChannelOpenTryResponse = exports.MsgChannelOpenTry = exports.MsgChannelOpenInitResponse = exports.MsgChannelOpenInit = exports.responseResultTypeToJSON = exports.responseResultTypeFromJSON = exports.ResponseResultType = exports.protobufPackage = void 0;
	/* eslint-disable */
	const channel_1 = channel;
	const client_1 = client;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "ibc.core.channel.v1";
	/** ResponseResultType defines the possible outcomes of the execution of a message */
	var ResponseResultType;
	(function (ResponseResultType) {
	    /** RESPONSE_RESULT_TYPE_UNSPECIFIED - Default zero value enumeration */
	    ResponseResultType[ResponseResultType["RESPONSE_RESULT_TYPE_UNSPECIFIED"] = 0] = "RESPONSE_RESULT_TYPE_UNSPECIFIED";
	    /** RESPONSE_RESULT_TYPE_NOOP - The message did not call the IBC application callbacks (because, for example, the packet had already been relayed) */
	    ResponseResultType[ResponseResultType["RESPONSE_RESULT_TYPE_NOOP"] = 1] = "RESPONSE_RESULT_TYPE_NOOP";
	    /** RESPONSE_RESULT_TYPE_SUCCESS - The message was executed successfully */
	    ResponseResultType[ResponseResultType["RESPONSE_RESULT_TYPE_SUCCESS"] = 2] = "RESPONSE_RESULT_TYPE_SUCCESS";
	    ResponseResultType[ResponseResultType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
	})(ResponseResultType = exports.ResponseResultType || (exports.ResponseResultType = {}));
	function responseResultTypeFromJSON(object) {
	    switch (object) {
	        case 0:
	        case "RESPONSE_RESULT_TYPE_UNSPECIFIED":
	            return ResponseResultType.RESPONSE_RESULT_TYPE_UNSPECIFIED;
	        case 1:
	        case "RESPONSE_RESULT_TYPE_NOOP":
	            return ResponseResultType.RESPONSE_RESULT_TYPE_NOOP;
	        case 2:
	        case "RESPONSE_RESULT_TYPE_SUCCESS":
	            return ResponseResultType.RESPONSE_RESULT_TYPE_SUCCESS;
	        case -1:
	        case "UNRECOGNIZED":
	        default:
	            return ResponseResultType.UNRECOGNIZED;
	    }
	}
	exports.responseResultTypeFromJSON = responseResultTypeFromJSON;
	function responseResultTypeToJSON(object) {
	    switch (object) {
	        case ResponseResultType.RESPONSE_RESULT_TYPE_UNSPECIFIED:
	            return "RESPONSE_RESULT_TYPE_UNSPECIFIED";
	        case ResponseResultType.RESPONSE_RESULT_TYPE_NOOP:
	            return "RESPONSE_RESULT_TYPE_NOOP";
	        case ResponseResultType.RESPONSE_RESULT_TYPE_SUCCESS:
	            return "RESPONSE_RESULT_TYPE_SUCCESS";
	        case ResponseResultType.UNRECOGNIZED:
	        default:
	            return "UNRECOGNIZED";
	    }
	}
	exports.responseResultTypeToJSON = responseResultTypeToJSON;
	function createBaseMsgChannelOpenInit() {
	    return {
	        portId: "",
	        channel: undefined,
	        signer: "",
	    };
	}
	exports.MsgChannelOpenInit = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channel !== undefined) {
	            channel_1.Channel.encode(message.channel, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.signer !== "") {
	            writer.uint32(26).string(message.signer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgChannelOpenInit();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channel = channel_1.Channel.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.signer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channel: (0, helpers_1.isSet)(object.channel) ? channel_1.Channel.fromJSON(object.channel) : undefined,
	            signer: (0, helpers_1.isSet)(object.signer) ? String(object.signer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channel !== undefined &&
	            (obj.channel = message.channel ? channel_1.Channel.toJSON(message.channel) : undefined);
	        message.signer !== undefined && (obj.signer = message.signer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgChannelOpenInit();
	        message.portId = object.portId ?? "";
	        message.channel =
	            object.channel !== undefined && object.channel !== null
	                ? channel_1.Channel.fromPartial(object.channel)
	                : undefined;
	        message.signer = object.signer ?? "";
	        return message;
	    },
	};
	function createBaseMsgChannelOpenInitResponse() {
	    return {
	        channelId: "",
	        version: "",
	    };
	}
	exports.MsgChannelOpenInitResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.channelId !== "") {
	            writer.uint32(10).string(message.channelId);
	        }
	        if (message.version !== "") {
	            writer.uint32(18).string(message.version);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgChannelOpenInitResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.channelId = reader.string();
	                    break;
	                case 2:
	                    message.version = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	            version: (0, helpers_1.isSet)(object.version) ? String(object.version) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        message.version !== undefined && (obj.version = message.version);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgChannelOpenInitResponse();
	        message.channelId = object.channelId ?? "";
	        message.version = object.version ?? "";
	        return message;
	    },
	};
	function createBaseMsgChannelOpenTry() {
	    return {
	        portId: "",
	        previousChannelId: "",
	        channel: undefined,
	        counterpartyVersion: "",
	        proofInit: new Uint8Array(),
	        proofHeight: undefined,
	        signer: "",
	    };
	}
	exports.MsgChannelOpenTry = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.previousChannelId !== "") {
	            writer.uint32(18).string(message.previousChannelId);
	        }
	        if (message.channel !== undefined) {
	            channel_1.Channel.encode(message.channel, writer.uint32(26).fork()).ldelim();
	        }
	        if (message.counterpartyVersion !== "") {
	            writer.uint32(34).string(message.counterpartyVersion);
	        }
	        if (message.proofInit.length !== 0) {
	            writer.uint32(42).bytes(message.proofInit);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(50).fork()).ldelim();
	        }
	        if (message.signer !== "") {
	            writer.uint32(58).string(message.signer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgChannelOpenTry();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.previousChannelId = reader.string();
	                    break;
	                case 3:
	                    message.channel = channel_1.Channel.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.counterpartyVersion = reader.string();
	                    break;
	                case 5:
	                    message.proofInit = reader.bytes();
	                    break;
	                case 6:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                case 7:
	                    message.signer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            previousChannelId: (0, helpers_1.isSet)(object.previousChannelId) ? String(object.previousChannelId) : "",
	            channel: (0, helpers_1.isSet)(object.channel) ? channel_1.Channel.fromJSON(object.channel) : undefined,
	            counterpartyVersion: (0, helpers_1.isSet)(object.counterpartyVersion) ? String(object.counterpartyVersion) : "",
	            proofInit: (0, helpers_1.isSet)(object.proofInit) ? (0, helpers_1.bytesFromBase64)(object.proofInit) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	            signer: (0, helpers_1.isSet)(object.signer) ? String(object.signer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.previousChannelId !== undefined && (obj.previousChannelId = message.previousChannelId);
	        message.channel !== undefined &&
	            (obj.channel = message.channel ? channel_1.Channel.toJSON(message.channel) : undefined);
	        message.counterpartyVersion !== undefined && (obj.counterpartyVersion = message.counterpartyVersion);
	        message.proofInit !== undefined &&
	            (obj.proofInit = (0, helpers_1.base64FromBytes)(message.proofInit !== undefined ? message.proofInit : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        message.signer !== undefined && (obj.signer = message.signer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgChannelOpenTry();
	        message.portId = object.portId ?? "";
	        message.previousChannelId = object.previousChannelId ?? "";
	        message.channel =
	            object.channel !== undefined && object.channel !== null
	                ? channel_1.Channel.fromPartial(object.channel)
	                : undefined;
	        message.counterpartyVersion = object.counterpartyVersion ?? "";
	        message.proofInit = object.proofInit ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        message.signer = object.signer ?? "";
	        return message;
	    },
	};
	function createBaseMsgChannelOpenTryResponse() {
	    return {
	        version: "",
	    };
	}
	exports.MsgChannelOpenTryResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.version !== "") {
	            writer.uint32(10).string(message.version);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgChannelOpenTryResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.version = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            version: (0, helpers_1.isSet)(object.version) ? String(object.version) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.version !== undefined && (obj.version = message.version);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgChannelOpenTryResponse();
	        message.version = object.version ?? "";
	        return message;
	    },
	};
	function createBaseMsgChannelOpenAck() {
	    return {
	        portId: "",
	        channelId: "",
	        counterpartyChannelId: "",
	        counterpartyVersion: "",
	        proofTry: new Uint8Array(),
	        proofHeight: undefined,
	        signer: "",
	    };
	}
	exports.MsgChannelOpenAck = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        if (message.counterpartyChannelId !== "") {
	            writer.uint32(26).string(message.counterpartyChannelId);
	        }
	        if (message.counterpartyVersion !== "") {
	            writer.uint32(34).string(message.counterpartyVersion);
	        }
	        if (message.proofTry.length !== 0) {
	            writer.uint32(42).bytes(message.proofTry);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(50).fork()).ldelim();
	        }
	        if (message.signer !== "") {
	            writer.uint32(58).string(message.signer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgChannelOpenAck();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                case 3:
	                    message.counterpartyChannelId = reader.string();
	                    break;
	                case 4:
	                    message.counterpartyVersion = reader.string();
	                    break;
	                case 5:
	                    message.proofTry = reader.bytes();
	                    break;
	                case 6:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                case 7:
	                    message.signer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	            counterpartyChannelId: (0, helpers_1.isSet)(object.counterpartyChannelId) ? String(object.counterpartyChannelId) : "",
	            counterpartyVersion: (0, helpers_1.isSet)(object.counterpartyVersion) ? String(object.counterpartyVersion) : "",
	            proofTry: (0, helpers_1.isSet)(object.proofTry) ? (0, helpers_1.bytesFromBase64)(object.proofTry) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	            signer: (0, helpers_1.isSet)(object.signer) ? String(object.signer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        message.counterpartyChannelId !== undefined &&
	            (obj.counterpartyChannelId = message.counterpartyChannelId);
	        message.counterpartyVersion !== undefined && (obj.counterpartyVersion = message.counterpartyVersion);
	        message.proofTry !== undefined &&
	            (obj.proofTry = (0, helpers_1.base64FromBytes)(message.proofTry !== undefined ? message.proofTry : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        message.signer !== undefined && (obj.signer = message.signer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgChannelOpenAck();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        message.counterpartyChannelId = object.counterpartyChannelId ?? "";
	        message.counterpartyVersion = object.counterpartyVersion ?? "";
	        message.proofTry = object.proofTry ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        message.signer = object.signer ?? "";
	        return message;
	    },
	};
	function createBaseMsgChannelOpenAckResponse() {
	    return {};
	}
	exports.MsgChannelOpenAckResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgChannelOpenAckResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgChannelOpenAckResponse();
	        return message;
	    },
	};
	function createBaseMsgChannelOpenConfirm() {
	    return {
	        portId: "",
	        channelId: "",
	        proofAck: new Uint8Array(),
	        proofHeight: undefined,
	        signer: "",
	    };
	}
	exports.MsgChannelOpenConfirm = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        if (message.proofAck.length !== 0) {
	            writer.uint32(26).bytes(message.proofAck);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();
	        }
	        if (message.signer !== "") {
	            writer.uint32(42).string(message.signer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgChannelOpenConfirm();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                case 3:
	                    message.proofAck = reader.bytes();
	                    break;
	                case 4:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                case 5:
	                    message.signer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	            proofAck: (0, helpers_1.isSet)(object.proofAck) ? (0, helpers_1.bytesFromBase64)(object.proofAck) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	            signer: (0, helpers_1.isSet)(object.signer) ? String(object.signer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        message.proofAck !== undefined &&
	            (obj.proofAck = (0, helpers_1.base64FromBytes)(message.proofAck !== undefined ? message.proofAck : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        message.signer !== undefined && (obj.signer = message.signer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgChannelOpenConfirm();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        message.proofAck = object.proofAck ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        message.signer = object.signer ?? "";
	        return message;
	    },
	};
	function createBaseMsgChannelOpenConfirmResponse() {
	    return {};
	}
	exports.MsgChannelOpenConfirmResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgChannelOpenConfirmResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgChannelOpenConfirmResponse();
	        return message;
	    },
	};
	function createBaseMsgChannelCloseInit() {
	    return {
	        portId: "",
	        channelId: "",
	        signer: "",
	    };
	}
	exports.MsgChannelCloseInit = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        if (message.signer !== "") {
	            writer.uint32(26).string(message.signer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgChannelCloseInit();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                case 3:
	                    message.signer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	            signer: (0, helpers_1.isSet)(object.signer) ? String(object.signer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        message.signer !== undefined && (obj.signer = message.signer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgChannelCloseInit();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        message.signer = object.signer ?? "";
	        return message;
	    },
	};
	function createBaseMsgChannelCloseInitResponse() {
	    return {};
	}
	exports.MsgChannelCloseInitResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgChannelCloseInitResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgChannelCloseInitResponse();
	        return message;
	    },
	};
	function createBaseMsgChannelCloseConfirm() {
	    return {
	        portId: "",
	        channelId: "",
	        proofInit: new Uint8Array(),
	        proofHeight: undefined,
	        signer: "",
	    };
	}
	exports.MsgChannelCloseConfirm = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        if (message.proofInit.length !== 0) {
	            writer.uint32(26).bytes(message.proofInit);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();
	        }
	        if (message.signer !== "") {
	            writer.uint32(42).string(message.signer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgChannelCloseConfirm();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                case 3:
	                    message.proofInit = reader.bytes();
	                    break;
	                case 4:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                case 5:
	                    message.signer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	            proofInit: (0, helpers_1.isSet)(object.proofInit) ? (0, helpers_1.bytesFromBase64)(object.proofInit) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	            signer: (0, helpers_1.isSet)(object.signer) ? String(object.signer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        message.proofInit !== undefined &&
	            (obj.proofInit = (0, helpers_1.base64FromBytes)(message.proofInit !== undefined ? message.proofInit : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        message.signer !== undefined && (obj.signer = message.signer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgChannelCloseConfirm();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        message.proofInit = object.proofInit ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        message.signer = object.signer ?? "";
	        return message;
	    },
	};
	function createBaseMsgChannelCloseConfirmResponse() {
	    return {};
	}
	exports.MsgChannelCloseConfirmResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgChannelCloseConfirmResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgChannelCloseConfirmResponse();
	        return message;
	    },
	};
	function createBaseMsgRecvPacket() {
	    return {
	        packet: undefined,
	        proofCommitment: new Uint8Array(),
	        proofHeight: undefined,
	        signer: "",
	    };
	}
	exports.MsgRecvPacket = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.packet !== undefined) {
	            channel_1.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.proofCommitment.length !== 0) {
	            writer.uint32(18).bytes(message.proofCommitment);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();
	        }
	        if (message.signer !== "") {
	            writer.uint32(34).string(message.signer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgRecvPacket();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.packet = channel_1.Packet.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.proofCommitment = reader.bytes();
	                    break;
	                case 3:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.signer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            packet: (0, helpers_1.isSet)(object.packet) ? channel_1.Packet.fromJSON(object.packet) : undefined,
	            proofCommitment: (0, helpers_1.isSet)(object.proofCommitment)
	                ? (0, helpers_1.bytesFromBase64)(object.proofCommitment)
	                : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	            signer: (0, helpers_1.isSet)(object.signer) ? String(object.signer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.packet !== undefined && (obj.packet = message.packet ? channel_1.Packet.toJSON(message.packet) : undefined);
	        message.proofCommitment !== undefined &&
	            (obj.proofCommitment = (0, helpers_1.base64FromBytes)(message.proofCommitment !== undefined ? message.proofCommitment : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        message.signer !== undefined && (obj.signer = message.signer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgRecvPacket();
	        message.packet =
	            object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromPartial(object.packet) : undefined;
	        message.proofCommitment = object.proofCommitment ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        message.signer = object.signer ?? "";
	        return message;
	    },
	};
	function createBaseMsgRecvPacketResponse() {
	    return {
	        result: 0,
	    };
	}
	exports.MsgRecvPacketResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.result !== 0) {
	            writer.uint32(8).int32(message.result);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgRecvPacketResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.result = reader.int32();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            result: (0, helpers_1.isSet)(object.result) ? responseResultTypeFromJSON(object.result) : 0,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.result !== undefined && (obj.result = responseResultTypeToJSON(message.result));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgRecvPacketResponse();
	        message.result = object.result ?? 0;
	        return message;
	    },
	};
	function createBaseMsgTimeout() {
	    return {
	        packet: undefined,
	        proofUnreceived: new Uint8Array(),
	        proofHeight: undefined,
	        nextSequenceRecv: helpers_1.Long.UZERO,
	        signer: "",
	    };
	}
	exports.MsgTimeout = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.packet !== undefined) {
	            channel_1.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.proofUnreceived.length !== 0) {
	            writer.uint32(18).bytes(message.proofUnreceived);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();
	        }
	        if (!message.nextSequenceRecv.isZero()) {
	            writer.uint32(32).uint64(message.nextSequenceRecv);
	        }
	        if (message.signer !== "") {
	            writer.uint32(42).string(message.signer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgTimeout();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.packet = channel_1.Packet.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.proofUnreceived = reader.bytes();
	                    break;
	                case 3:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.nextSequenceRecv = reader.uint64();
	                    break;
	                case 5:
	                    message.signer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            packet: (0, helpers_1.isSet)(object.packet) ? channel_1.Packet.fromJSON(object.packet) : undefined,
	            proofUnreceived: (0, helpers_1.isSet)(object.proofUnreceived)
	                ? (0, helpers_1.bytesFromBase64)(object.proofUnreceived)
	                : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	            nextSequenceRecv: (0, helpers_1.isSet)(object.nextSequenceRecv) ? helpers_1.Long.fromValue(object.nextSequenceRecv) : helpers_1.Long.UZERO,
	            signer: (0, helpers_1.isSet)(object.signer) ? String(object.signer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.packet !== undefined && (obj.packet = message.packet ? channel_1.Packet.toJSON(message.packet) : undefined);
	        message.proofUnreceived !== undefined &&
	            (obj.proofUnreceived = (0, helpers_1.base64FromBytes)(message.proofUnreceived !== undefined ? message.proofUnreceived : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        message.nextSequenceRecv !== undefined &&
	            (obj.nextSequenceRecv = (message.nextSequenceRecv || helpers_1.Long.UZERO).toString());
	        message.signer !== undefined && (obj.signer = message.signer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgTimeout();
	        message.packet =
	            object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromPartial(object.packet) : undefined;
	        message.proofUnreceived = object.proofUnreceived ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        message.nextSequenceRecv =
	            object.nextSequenceRecv !== undefined && object.nextSequenceRecv !== null
	                ? helpers_1.Long.fromValue(object.nextSequenceRecv)
	                : helpers_1.Long.UZERO;
	        message.signer = object.signer ?? "";
	        return message;
	    },
	};
	function createBaseMsgTimeoutResponse() {
	    return {
	        result: 0,
	    };
	}
	exports.MsgTimeoutResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.result !== 0) {
	            writer.uint32(8).int32(message.result);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgTimeoutResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.result = reader.int32();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            result: (0, helpers_1.isSet)(object.result) ? responseResultTypeFromJSON(object.result) : 0,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.result !== undefined && (obj.result = responseResultTypeToJSON(message.result));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgTimeoutResponse();
	        message.result = object.result ?? 0;
	        return message;
	    },
	};
	function createBaseMsgTimeoutOnClose() {
	    return {
	        packet: undefined,
	        proofUnreceived: new Uint8Array(),
	        proofClose: new Uint8Array(),
	        proofHeight: undefined,
	        nextSequenceRecv: helpers_1.Long.UZERO,
	        signer: "",
	    };
	}
	exports.MsgTimeoutOnClose = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.packet !== undefined) {
	            channel_1.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.proofUnreceived.length !== 0) {
	            writer.uint32(18).bytes(message.proofUnreceived);
	        }
	        if (message.proofClose.length !== 0) {
	            writer.uint32(26).bytes(message.proofClose);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();
	        }
	        if (!message.nextSequenceRecv.isZero()) {
	            writer.uint32(40).uint64(message.nextSequenceRecv);
	        }
	        if (message.signer !== "") {
	            writer.uint32(50).string(message.signer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgTimeoutOnClose();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.packet = channel_1.Packet.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.proofUnreceived = reader.bytes();
	                    break;
	                case 3:
	                    message.proofClose = reader.bytes();
	                    break;
	                case 4:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                case 5:
	                    message.nextSequenceRecv = reader.uint64();
	                    break;
	                case 6:
	                    message.signer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            packet: (0, helpers_1.isSet)(object.packet) ? channel_1.Packet.fromJSON(object.packet) : undefined,
	            proofUnreceived: (0, helpers_1.isSet)(object.proofUnreceived)
	                ? (0, helpers_1.bytesFromBase64)(object.proofUnreceived)
	                : new Uint8Array(),
	            proofClose: (0, helpers_1.isSet)(object.proofClose) ? (0, helpers_1.bytesFromBase64)(object.proofClose) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	            nextSequenceRecv: (0, helpers_1.isSet)(object.nextSequenceRecv) ? helpers_1.Long.fromValue(object.nextSequenceRecv) : helpers_1.Long.UZERO,
	            signer: (0, helpers_1.isSet)(object.signer) ? String(object.signer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.packet !== undefined && (obj.packet = message.packet ? channel_1.Packet.toJSON(message.packet) : undefined);
	        message.proofUnreceived !== undefined &&
	            (obj.proofUnreceived = (0, helpers_1.base64FromBytes)(message.proofUnreceived !== undefined ? message.proofUnreceived : new Uint8Array()));
	        message.proofClose !== undefined &&
	            (obj.proofClose = (0, helpers_1.base64FromBytes)(message.proofClose !== undefined ? message.proofClose : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        message.nextSequenceRecv !== undefined &&
	            (obj.nextSequenceRecv = (message.nextSequenceRecv || helpers_1.Long.UZERO).toString());
	        message.signer !== undefined && (obj.signer = message.signer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgTimeoutOnClose();
	        message.packet =
	            object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromPartial(object.packet) : undefined;
	        message.proofUnreceived = object.proofUnreceived ?? new Uint8Array();
	        message.proofClose = object.proofClose ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        message.nextSequenceRecv =
	            object.nextSequenceRecv !== undefined && object.nextSequenceRecv !== null
	                ? helpers_1.Long.fromValue(object.nextSequenceRecv)
	                : helpers_1.Long.UZERO;
	        message.signer = object.signer ?? "";
	        return message;
	    },
	};
	function createBaseMsgTimeoutOnCloseResponse() {
	    return {
	        result: 0,
	    };
	}
	exports.MsgTimeoutOnCloseResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.result !== 0) {
	            writer.uint32(8).int32(message.result);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgTimeoutOnCloseResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.result = reader.int32();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            result: (0, helpers_1.isSet)(object.result) ? responseResultTypeFromJSON(object.result) : 0,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.result !== undefined && (obj.result = responseResultTypeToJSON(message.result));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgTimeoutOnCloseResponse();
	        message.result = object.result ?? 0;
	        return message;
	    },
	};
	function createBaseMsgAcknowledgement() {
	    return {
	        packet: undefined,
	        acknowledgement: new Uint8Array(),
	        proofAcked: new Uint8Array(),
	        proofHeight: undefined,
	        signer: "",
	    };
	}
	exports.MsgAcknowledgement = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.packet !== undefined) {
	            channel_1.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.acknowledgement.length !== 0) {
	            writer.uint32(18).bytes(message.acknowledgement);
	        }
	        if (message.proofAcked.length !== 0) {
	            writer.uint32(26).bytes(message.proofAcked);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();
	        }
	        if (message.signer !== "") {
	            writer.uint32(42).string(message.signer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgAcknowledgement();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.packet = channel_1.Packet.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.acknowledgement = reader.bytes();
	                    break;
	                case 3:
	                    message.proofAcked = reader.bytes();
	                    break;
	                case 4:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                case 5:
	                    message.signer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            packet: (0, helpers_1.isSet)(object.packet) ? channel_1.Packet.fromJSON(object.packet) : undefined,
	            acknowledgement: (0, helpers_1.isSet)(object.acknowledgement)
	                ? (0, helpers_1.bytesFromBase64)(object.acknowledgement)
	                : new Uint8Array(),
	            proofAcked: (0, helpers_1.isSet)(object.proofAcked) ? (0, helpers_1.bytesFromBase64)(object.proofAcked) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	            signer: (0, helpers_1.isSet)(object.signer) ? String(object.signer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.packet !== undefined && (obj.packet = message.packet ? channel_1.Packet.toJSON(message.packet) : undefined);
	        message.acknowledgement !== undefined &&
	            (obj.acknowledgement = (0, helpers_1.base64FromBytes)(message.acknowledgement !== undefined ? message.acknowledgement : new Uint8Array()));
	        message.proofAcked !== undefined &&
	            (obj.proofAcked = (0, helpers_1.base64FromBytes)(message.proofAcked !== undefined ? message.proofAcked : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        message.signer !== undefined && (obj.signer = message.signer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgAcknowledgement();
	        message.packet =
	            object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromPartial(object.packet) : undefined;
	        message.acknowledgement = object.acknowledgement ?? new Uint8Array();
	        message.proofAcked = object.proofAcked ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        message.signer = object.signer ?? "";
	        return message;
	    },
	};
	function createBaseMsgAcknowledgementResponse() {
	    return {
	        result: 0,
	    };
	}
	exports.MsgAcknowledgementResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.result !== 0) {
	            writer.uint32(8).int32(message.result);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgAcknowledgementResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.result = reader.int32();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            result: (0, helpers_1.isSet)(object.result) ? responseResultTypeFromJSON(object.result) : 0,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.result !== undefined && (obj.result = responseResultTypeToJSON(message.result));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgAcknowledgementResponse();
	        message.result = object.result ?? 0;
	        return message;
	    },
	};
	class MsgClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.ChannelOpenInit = this.ChannelOpenInit.bind(this);
	        this.ChannelOpenTry = this.ChannelOpenTry.bind(this);
	        this.ChannelOpenAck = this.ChannelOpenAck.bind(this);
	        this.ChannelOpenConfirm = this.ChannelOpenConfirm.bind(this);
	        this.ChannelCloseInit = this.ChannelCloseInit.bind(this);
	        this.ChannelCloseConfirm = this.ChannelCloseConfirm.bind(this);
	        this.RecvPacket = this.RecvPacket.bind(this);
	        this.Timeout = this.Timeout.bind(this);
	        this.TimeoutOnClose = this.TimeoutOnClose.bind(this);
	        this.Acknowledgement = this.Acknowledgement.bind(this);
	    }
	    ChannelOpenInit(request) {
	        const data = exports.MsgChannelOpenInit.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "ChannelOpenInit", data);
	        return promise.then((data) => exports.MsgChannelOpenInitResponse.decode(new _m0.Reader(data)));
	    }
	    ChannelOpenTry(request) {
	        const data = exports.MsgChannelOpenTry.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "ChannelOpenTry", data);
	        return promise.then((data) => exports.MsgChannelOpenTryResponse.decode(new _m0.Reader(data)));
	    }
	    ChannelOpenAck(request) {
	        const data = exports.MsgChannelOpenAck.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "ChannelOpenAck", data);
	        return promise.then((data) => exports.MsgChannelOpenAckResponse.decode(new _m0.Reader(data)));
	    }
	    ChannelOpenConfirm(request) {
	        const data = exports.MsgChannelOpenConfirm.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "ChannelOpenConfirm", data);
	        return promise.then((data) => exports.MsgChannelOpenConfirmResponse.decode(new _m0.Reader(data)));
	    }
	    ChannelCloseInit(request) {
	        const data = exports.MsgChannelCloseInit.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "ChannelCloseInit", data);
	        return promise.then((data) => exports.MsgChannelCloseInitResponse.decode(new _m0.Reader(data)));
	    }
	    ChannelCloseConfirm(request) {
	        const data = exports.MsgChannelCloseConfirm.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "ChannelCloseConfirm", data);
	        return promise.then((data) => exports.MsgChannelCloseConfirmResponse.decode(new _m0.Reader(data)));
	    }
	    RecvPacket(request) {
	        const data = exports.MsgRecvPacket.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "RecvPacket", data);
	        return promise.then((data) => exports.MsgRecvPacketResponse.decode(new _m0.Reader(data)));
	    }
	    Timeout(request) {
	        const data = exports.MsgTimeout.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "Timeout", data);
	        return promise.then((data) => exports.MsgTimeoutResponse.decode(new _m0.Reader(data)));
	    }
	    TimeoutOnClose(request) {
	        const data = exports.MsgTimeoutOnClose.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "TimeoutOnClose", data);
	        return promise.then((data) => exports.MsgTimeoutOnCloseResponse.decode(new _m0.Reader(data)));
	    }
	    Acknowledgement(request) {
	        const data = exports.MsgAcknowledgement.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Msg", "Acknowledgement", data);
	        return promise.then((data) => exports.MsgAcknowledgementResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.MsgClientImpl = MsgClientImpl;
	
} (tx$7));

var tx$6 = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.MsgClientImpl = exports.MsgSubmitMisbehaviourResponse = exports.MsgSubmitMisbehaviour = exports.MsgUpgradeClientResponse = exports.MsgUpgradeClient = exports.MsgUpdateClientResponse = exports.MsgUpdateClient = exports.MsgCreateClientResponse = exports.MsgCreateClient = exports.protobufPackage = void 0;
	/* eslint-disable */
	const any_1 = any;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "ibc.core.client.v1";
	function createBaseMsgCreateClient() {
	    return {
	        clientState: undefined,
	        consensusState: undefined,
	        signer: "",
	    };
	}
	exports.MsgCreateClient = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientState !== undefined) {
	            any_1.Any.encode(message.clientState, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.consensusState !== undefined) {
	            any_1.Any.encode(message.consensusState, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.signer !== "") {
	            writer.uint32(26).string(message.signer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgCreateClient();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientState = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.consensusState = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.signer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientState: (0, helpers_1.isSet)(object.clientState) ? any_1.Any.fromJSON(object.clientState) : undefined,
	            consensusState: (0, helpers_1.isSet)(object.consensusState) ? any_1.Any.fromJSON(object.consensusState) : undefined,
	            signer: (0, helpers_1.isSet)(object.signer) ? String(object.signer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientState !== undefined &&
	            (obj.clientState = message.clientState ? any_1.Any.toJSON(message.clientState) : undefined);
	        message.consensusState !== undefined &&
	            (obj.consensusState = message.consensusState ? any_1.Any.toJSON(message.consensusState) : undefined);
	        message.signer !== undefined && (obj.signer = message.signer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgCreateClient();
	        message.clientState =
	            object.clientState !== undefined && object.clientState !== null
	                ? any_1.Any.fromPartial(object.clientState)
	                : undefined;
	        message.consensusState =
	            object.consensusState !== undefined && object.consensusState !== null
	                ? any_1.Any.fromPartial(object.consensusState)
	                : undefined;
	        message.signer = object.signer ?? "";
	        return message;
	    },
	};
	function createBaseMsgCreateClientResponse() {
	    return {};
	}
	exports.MsgCreateClientResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgCreateClientResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgCreateClientResponse();
	        return message;
	    },
	};
	function createBaseMsgUpdateClient() {
	    return {
	        clientId: "",
	        header: undefined,
	        signer: "",
	    };
	}
	exports.MsgUpdateClient = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientId !== "") {
	            writer.uint32(10).string(message.clientId);
	        }
	        if (message.header !== undefined) {
	            any_1.Any.encode(message.header, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.signer !== "") {
	            writer.uint32(26).string(message.signer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgUpdateClient();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientId = reader.string();
	                    break;
	                case 2:
	                    message.header = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.signer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	            header: (0, helpers_1.isSet)(object.header) ? any_1.Any.fromJSON(object.header) : undefined,
	            signer: (0, helpers_1.isSet)(object.signer) ? String(object.signer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        message.header !== undefined && (obj.header = message.header ? any_1.Any.toJSON(message.header) : undefined);
	        message.signer !== undefined && (obj.signer = message.signer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgUpdateClient();
	        message.clientId = object.clientId ?? "";
	        message.header =
	            object.header !== undefined && object.header !== null ? any_1.Any.fromPartial(object.header) : undefined;
	        message.signer = object.signer ?? "";
	        return message;
	    },
	};
	function createBaseMsgUpdateClientResponse() {
	    return {};
	}
	exports.MsgUpdateClientResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgUpdateClientResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgUpdateClientResponse();
	        return message;
	    },
	};
	function createBaseMsgUpgradeClient() {
	    return {
	        clientId: "",
	        clientState: undefined,
	        consensusState: undefined,
	        proofUpgradeClient: new Uint8Array(),
	        proofUpgradeConsensusState: new Uint8Array(),
	        signer: "",
	    };
	}
	exports.MsgUpgradeClient = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientId !== "") {
	            writer.uint32(10).string(message.clientId);
	        }
	        if (message.clientState !== undefined) {
	            any_1.Any.encode(message.clientState, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.consensusState !== undefined) {
	            any_1.Any.encode(message.consensusState, writer.uint32(26).fork()).ldelim();
	        }
	        if (message.proofUpgradeClient.length !== 0) {
	            writer.uint32(34).bytes(message.proofUpgradeClient);
	        }
	        if (message.proofUpgradeConsensusState.length !== 0) {
	            writer.uint32(42).bytes(message.proofUpgradeConsensusState);
	        }
	        if (message.signer !== "") {
	            writer.uint32(50).string(message.signer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgUpgradeClient();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientId = reader.string();
	                    break;
	                case 2:
	                    message.clientState = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.consensusState = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.proofUpgradeClient = reader.bytes();
	                    break;
	                case 5:
	                    message.proofUpgradeConsensusState = reader.bytes();
	                    break;
	                case 6:
	                    message.signer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	            clientState: (0, helpers_1.isSet)(object.clientState) ? any_1.Any.fromJSON(object.clientState) : undefined,
	            consensusState: (0, helpers_1.isSet)(object.consensusState) ? any_1.Any.fromJSON(object.consensusState) : undefined,
	            proofUpgradeClient: (0, helpers_1.isSet)(object.proofUpgradeClient)
	                ? (0, helpers_1.bytesFromBase64)(object.proofUpgradeClient)
	                : new Uint8Array(),
	            proofUpgradeConsensusState: (0, helpers_1.isSet)(object.proofUpgradeConsensusState)
	                ? (0, helpers_1.bytesFromBase64)(object.proofUpgradeConsensusState)
	                : new Uint8Array(),
	            signer: (0, helpers_1.isSet)(object.signer) ? String(object.signer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        message.clientState !== undefined &&
	            (obj.clientState = message.clientState ? any_1.Any.toJSON(message.clientState) : undefined);
	        message.consensusState !== undefined &&
	            (obj.consensusState = message.consensusState ? any_1.Any.toJSON(message.consensusState) : undefined);
	        message.proofUpgradeClient !== undefined &&
	            (obj.proofUpgradeClient = (0, helpers_1.base64FromBytes)(message.proofUpgradeClient !== undefined ? message.proofUpgradeClient : new Uint8Array()));
	        message.proofUpgradeConsensusState !== undefined &&
	            (obj.proofUpgradeConsensusState = (0, helpers_1.base64FromBytes)(message.proofUpgradeConsensusState !== undefined
	                ? message.proofUpgradeConsensusState
	                : new Uint8Array()));
	        message.signer !== undefined && (obj.signer = message.signer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgUpgradeClient();
	        message.clientId = object.clientId ?? "";
	        message.clientState =
	            object.clientState !== undefined && object.clientState !== null
	                ? any_1.Any.fromPartial(object.clientState)
	                : undefined;
	        message.consensusState =
	            object.consensusState !== undefined && object.consensusState !== null
	                ? any_1.Any.fromPartial(object.consensusState)
	                : undefined;
	        message.proofUpgradeClient = object.proofUpgradeClient ?? new Uint8Array();
	        message.proofUpgradeConsensusState = object.proofUpgradeConsensusState ?? new Uint8Array();
	        message.signer = object.signer ?? "";
	        return message;
	    },
	};
	function createBaseMsgUpgradeClientResponse() {
	    return {};
	}
	exports.MsgUpgradeClientResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgUpgradeClientResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgUpgradeClientResponse();
	        return message;
	    },
	};
	function createBaseMsgSubmitMisbehaviour() {
	    return {
	        clientId: "",
	        misbehaviour: undefined,
	        signer: "",
	    };
	}
	exports.MsgSubmitMisbehaviour = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientId !== "") {
	            writer.uint32(10).string(message.clientId);
	        }
	        if (message.misbehaviour !== undefined) {
	            any_1.Any.encode(message.misbehaviour, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.signer !== "") {
	            writer.uint32(26).string(message.signer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgSubmitMisbehaviour();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientId = reader.string();
	                    break;
	                case 2:
	                    message.misbehaviour = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.signer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	            misbehaviour: (0, helpers_1.isSet)(object.misbehaviour) ? any_1.Any.fromJSON(object.misbehaviour) : undefined,
	            signer: (0, helpers_1.isSet)(object.signer) ? String(object.signer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        message.misbehaviour !== undefined &&
	            (obj.misbehaviour = message.misbehaviour ? any_1.Any.toJSON(message.misbehaviour) : undefined);
	        message.signer !== undefined && (obj.signer = message.signer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgSubmitMisbehaviour();
	        message.clientId = object.clientId ?? "";
	        message.misbehaviour =
	            object.misbehaviour !== undefined && object.misbehaviour !== null
	                ? any_1.Any.fromPartial(object.misbehaviour)
	                : undefined;
	        message.signer = object.signer ?? "";
	        return message;
	    },
	};
	function createBaseMsgSubmitMisbehaviourResponse() {
	    return {};
	}
	exports.MsgSubmitMisbehaviourResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgSubmitMisbehaviourResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgSubmitMisbehaviourResponse();
	        return message;
	    },
	};
	class MsgClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.CreateClient = this.CreateClient.bind(this);
	        this.UpdateClient = this.UpdateClient.bind(this);
	        this.UpgradeClient = this.UpgradeClient.bind(this);
	        this.SubmitMisbehaviour = this.SubmitMisbehaviour.bind(this);
	    }
	    CreateClient(request) {
	        const data = exports.MsgCreateClient.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.client.v1.Msg", "CreateClient", data);
	        return promise.then((data) => exports.MsgCreateClientResponse.decode(new _m0.Reader(data)));
	    }
	    UpdateClient(request) {
	        const data = exports.MsgUpdateClient.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.client.v1.Msg", "UpdateClient", data);
	        return promise.then((data) => exports.MsgUpdateClientResponse.decode(new _m0.Reader(data)));
	    }
	    UpgradeClient(request) {
	        const data = exports.MsgUpgradeClient.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.client.v1.Msg", "UpgradeClient", data);
	        return promise.then((data) => exports.MsgUpgradeClientResponse.decode(new _m0.Reader(data)));
	    }
	    SubmitMisbehaviour(request) {
	        const data = exports.MsgSubmitMisbehaviour.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.client.v1.Msg", "SubmitMisbehaviour", data);
	        return promise.then((data) => exports.MsgSubmitMisbehaviourResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.MsgClientImpl = MsgClientImpl;
	
} (tx$6));

var tx$5 = {};

var connection = {};

var commitment = {};

var proofs = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CompressedNonExistenceProof = exports.CompressedExistenceProof = exports.CompressedBatchEntry = exports.CompressedBatchProof = exports.BatchEntry = exports.BatchProof = exports.InnerSpec = exports.ProofSpec = exports.InnerOp = exports.LeafOp = exports.CommitmentProof = exports.NonExistenceProof = exports.ExistenceProof = exports.lengthOpToJSON = exports.lengthOpFromJSON = exports.LengthOp = exports.hashOpToJSON = exports.hashOpFromJSON = exports.HashOp = exports.protobufPackage = void 0;
	/* eslint-disable */
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "ics23";
	var HashOp;
	(function (HashOp) {
	    /** NO_HASH - NO_HASH is the default if no data passed. Note this is an illegal argument some places. */
	    HashOp[HashOp["NO_HASH"] = 0] = "NO_HASH";
	    HashOp[HashOp["SHA256"] = 1] = "SHA256";
	    HashOp[HashOp["SHA512"] = 2] = "SHA512";
	    HashOp[HashOp["KECCAK"] = 3] = "KECCAK";
	    HashOp[HashOp["RIPEMD160"] = 4] = "RIPEMD160";
	    /** BITCOIN - ripemd160(sha256(x)) */
	    HashOp[HashOp["BITCOIN"] = 5] = "BITCOIN";
	    HashOp[HashOp["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
	})(HashOp = exports.HashOp || (exports.HashOp = {}));
	function hashOpFromJSON(object) {
	    switch (object) {
	        case 0:
	        case "NO_HASH":
	            return HashOp.NO_HASH;
	        case 1:
	        case "SHA256":
	            return HashOp.SHA256;
	        case 2:
	        case "SHA512":
	            return HashOp.SHA512;
	        case 3:
	        case "KECCAK":
	            return HashOp.KECCAK;
	        case 4:
	        case "RIPEMD160":
	            return HashOp.RIPEMD160;
	        case 5:
	        case "BITCOIN":
	            return HashOp.BITCOIN;
	        case -1:
	        case "UNRECOGNIZED":
	        default:
	            return HashOp.UNRECOGNIZED;
	    }
	}
	exports.hashOpFromJSON = hashOpFromJSON;
	function hashOpToJSON(object) {
	    switch (object) {
	        case HashOp.NO_HASH:
	            return "NO_HASH";
	        case HashOp.SHA256:
	            return "SHA256";
	        case HashOp.SHA512:
	            return "SHA512";
	        case HashOp.KECCAK:
	            return "KECCAK";
	        case HashOp.RIPEMD160:
	            return "RIPEMD160";
	        case HashOp.BITCOIN:
	            return "BITCOIN";
	        case HashOp.UNRECOGNIZED:
	        default:
	            return "UNRECOGNIZED";
	    }
	}
	exports.hashOpToJSON = hashOpToJSON;
	/**
	 * LengthOp defines how to process the key and value of the LeafOp
	 * to include length information. After encoding the length with the given
	 * algorithm, the length will be prepended to the key and value bytes.
	 * (Each one with it's own encoded length)
	 */
	var LengthOp;
	(function (LengthOp) {
	    /** NO_PREFIX - NO_PREFIX don't include any length info */
	    LengthOp[LengthOp["NO_PREFIX"] = 0] = "NO_PREFIX";
	    /** VAR_PROTO - VAR_PROTO uses protobuf (and go-amino) varint encoding of the length */
	    LengthOp[LengthOp["VAR_PROTO"] = 1] = "VAR_PROTO";
	    /** VAR_RLP - VAR_RLP uses rlp int encoding of the length */
	    LengthOp[LengthOp["VAR_RLP"] = 2] = "VAR_RLP";
	    /** FIXED32_BIG - FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer */
	    LengthOp[LengthOp["FIXED32_BIG"] = 3] = "FIXED32_BIG";
	    /** FIXED32_LITTLE - FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer */
	    LengthOp[LengthOp["FIXED32_LITTLE"] = 4] = "FIXED32_LITTLE";
	    /** FIXED64_BIG - FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer */
	    LengthOp[LengthOp["FIXED64_BIG"] = 5] = "FIXED64_BIG";
	    /** FIXED64_LITTLE - FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer */
	    LengthOp[LengthOp["FIXED64_LITTLE"] = 6] = "FIXED64_LITTLE";
	    /** REQUIRE_32_BYTES - REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output) */
	    LengthOp[LengthOp["REQUIRE_32_BYTES"] = 7] = "REQUIRE_32_BYTES";
	    /** REQUIRE_64_BYTES - REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output) */
	    LengthOp[LengthOp["REQUIRE_64_BYTES"] = 8] = "REQUIRE_64_BYTES";
	    LengthOp[LengthOp["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
	})(LengthOp = exports.LengthOp || (exports.LengthOp = {}));
	function lengthOpFromJSON(object) {
	    switch (object) {
	        case 0:
	        case "NO_PREFIX":
	            return LengthOp.NO_PREFIX;
	        case 1:
	        case "VAR_PROTO":
	            return LengthOp.VAR_PROTO;
	        case 2:
	        case "VAR_RLP":
	            return LengthOp.VAR_RLP;
	        case 3:
	        case "FIXED32_BIG":
	            return LengthOp.FIXED32_BIG;
	        case 4:
	        case "FIXED32_LITTLE":
	            return LengthOp.FIXED32_LITTLE;
	        case 5:
	        case "FIXED64_BIG":
	            return LengthOp.FIXED64_BIG;
	        case 6:
	        case "FIXED64_LITTLE":
	            return LengthOp.FIXED64_LITTLE;
	        case 7:
	        case "REQUIRE_32_BYTES":
	            return LengthOp.REQUIRE_32_BYTES;
	        case 8:
	        case "REQUIRE_64_BYTES":
	            return LengthOp.REQUIRE_64_BYTES;
	        case -1:
	        case "UNRECOGNIZED":
	        default:
	            return LengthOp.UNRECOGNIZED;
	    }
	}
	exports.lengthOpFromJSON = lengthOpFromJSON;
	function lengthOpToJSON(object) {
	    switch (object) {
	        case LengthOp.NO_PREFIX:
	            return "NO_PREFIX";
	        case LengthOp.VAR_PROTO:
	            return "VAR_PROTO";
	        case LengthOp.VAR_RLP:
	            return "VAR_RLP";
	        case LengthOp.FIXED32_BIG:
	            return "FIXED32_BIG";
	        case LengthOp.FIXED32_LITTLE:
	            return "FIXED32_LITTLE";
	        case LengthOp.FIXED64_BIG:
	            return "FIXED64_BIG";
	        case LengthOp.FIXED64_LITTLE:
	            return "FIXED64_LITTLE";
	        case LengthOp.REQUIRE_32_BYTES:
	            return "REQUIRE_32_BYTES";
	        case LengthOp.REQUIRE_64_BYTES:
	            return "REQUIRE_64_BYTES";
	        case LengthOp.UNRECOGNIZED:
	        default:
	            return "UNRECOGNIZED";
	    }
	}
	exports.lengthOpToJSON = lengthOpToJSON;
	function createBaseExistenceProof() {
	    return {
	        key: new Uint8Array(),
	        value: new Uint8Array(),
	        leaf: undefined,
	        path: [],
	    };
	}
	exports.ExistenceProof = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.key.length !== 0) {
	            writer.uint32(10).bytes(message.key);
	        }
	        if (message.value.length !== 0) {
	            writer.uint32(18).bytes(message.value);
	        }
	        if (message.leaf !== undefined) {
	            exports.LeafOp.encode(message.leaf, writer.uint32(26).fork()).ldelim();
	        }
	        for (const v of message.path) {
	            exports.InnerOp.encode(v, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseExistenceProof();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.key = reader.bytes();
	                    break;
	                case 2:
	                    message.value = reader.bytes();
	                    break;
	                case 3:
	                    message.leaf = exports.LeafOp.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.path.push(exports.InnerOp.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            key: (0, helpers_1.isSet)(object.key) ? (0, helpers_1.bytesFromBase64)(object.key) : new Uint8Array(),
	            value: (0, helpers_1.isSet)(object.value) ? (0, helpers_1.bytesFromBase64)(object.value) : new Uint8Array(),
	            leaf: (0, helpers_1.isSet)(object.leaf) ? exports.LeafOp.fromJSON(object.leaf) : undefined,
	            path: Array.isArray(object?.path) ? object.path.map((e) => exports.InnerOp.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.key !== undefined &&
	            (obj.key = (0, helpers_1.base64FromBytes)(message.key !== undefined ? message.key : new Uint8Array()));
	        message.value !== undefined &&
	            (obj.value = (0, helpers_1.base64FromBytes)(message.value !== undefined ? message.value : new Uint8Array()));
	        message.leaf !== undefined && (obj.leaf = message.leaf ? exports.LeafOp.toJSON(message.leaf) : undefined);
	        if (message.path) {
	            obj.path = message.path.map((e) => (e ? exports.InnerOp.toJSON(e) : undefined));
	        }
	        else {
	            obj.path = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseExistenceProof();
	        message.key = object.key ?? new Uint8Array();
	        message.value = object.value ?? new Uint8Array();
	        message.leaf =
	            object.leaf !== undefined && object.leaf !== null ? exports.LeafOp.fromPartial(object.leaf) : undefined;
	        message.path = object.path?.map((e) => exports.InnerOp.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseNonExistenceProof() {
	    return {
	        key: new Uint8Array(),
	        left: undefined,
	        right: undefined,
	    };
	}
	exports.NonExistenceProof = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.key.length !== 0) {
	            writer.uint32(10).bytes(message.key);
	        }
	        if (message.left !== undefined) {
	            exports.ExistenceProof.encode(message.left, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.right !== undefined) {
	            exports.ExistenceProof.encode(message.right, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseNonExistenceProof();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.key = reader.bytes();
	                    break;
	                case 2:
	                    message.left = exports.ExistenceProof.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.right = exports.ExistenceProof.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            key: (0, helpers_1.isSet)(object.key) ? (0, helpers_1.bytesFromBase64)(object.key) : new Uint8Array(),
	            left: (0, helpers_1.isSet)(object.left) ? exports.ExistenceProof.fromJSON(object.left) : undefined,
	            right: (0, helpers_1.isSet)(object.right) ? exports.ExistenceProof.fromJSON(object.right) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.key !== undefined &&
	            (obj.key = (0, helpers_1.base64FromBytes)(message.key !== undefined ? message.key : new Uint8Array()));
	        message.left !== undefined && (obj.left = message.left ? exports.ExistenceProof.toJSON(message.left) : undefined);
	        message.right !== undefined &&
	            (obj.right = message.right ? exports.ExistenceProof.toJSON(message.right) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseNonExistenceProof();
	        message.key = object.key ?? new Uint8Array();
	        message.left =
	            object.left !== undefined && object.left !== null ? exports.ExistenceProof.fromPartial(object.left) : undefined;
	        message.right =
	            object.right !== undefined && object.right !== null
	                ? exports.ExistenceProof.fromPartial(object.right)
	                : undefined;
	        return message;
	    },
	};
	function createBaseCommitmentProof() {
	    return {
	        exist: undefined,
	        nonexist: undefined,
	        batch: undefined,
	        compressed: undefined,
	    };
	}
	exports.CommitmentProof = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.exist !== undefined) {
	            exports.ExistenceProof.encode(message.exist, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.nonexist !== undefined) {
	            exports.NonExistenceProof.encode(message.nonexist, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.batch !== undefined) {
	            exports.BatchProof.encode(message.batch, writer.uint32(26).fork()).ldelim();
	        }
	        if (message.compressed !== undefined) {
	            exports.CompressedBatchProof.encode(message.compressed, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseCommitmentProof();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.exist = exports.ExistenceProof.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.nonexist = exports.NonExistenceProof.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.batch = exports.BatchProof.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.compressed = exports.CompressedBatchProof.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            exist: (0, helpers_1.isSet)(object.exist) ? exports.ExistenceProof.fromJSON(object.exist) : undefined,
	            nonexist: (0, helpers_1.isSet)(object.nonexist) ? exports.NonExistenceProof.fromJSON(object.nonexist) : undefined,
	            batch: (0, helpers_1.isSet)(object.batch) ? exports.BatchProof.fromJSON(object.batch) : undefined,
	            compressed: (0, helpers_1.isSet)(object.compressed) ? exports.CompressedBatchProof.fromJSON(object.compressed) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.exist !== undefined &&
	            (obj.exist = message.exist ? exports.ExistenceProof.toJSON(message.exist) : undefined);
	        message.nonexist !== undefined &&
	            (obj.nonexist = message.nonexist ? exports.NonExistenceProof.toJSON(message.nonexist) : undefined);
	        message.batch !== undefined && (obj.batch = message.batch ? exports.BatchProof.toJSON(message.batch) : undefined);
	        message.compressed !== undefined &&
	            (obj.compressed = message.compressed ? exports.CompressedBatchProof.toJSON(message.compressed) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseCommitmentProof();
	        message.exist =
	            object.exist !== undefined && object.exist !== null
	                ? exports.ExistenceProof.fromPartial(object.exist)
	                : undefined;
	        message.nonexist =
	            object.nonexist !== undefined && object.nonexist !== null
	                ? exports.NonExistenceProof.fromPartial(object.nonexist)
	                : undefined;
	        message.batch =
	            object.batch !== undefined && object.batch !== null ? exports.BatchProof.fromPartial(object.batch) : undefined;
	        message.compressed =
	            object.compressed !== undefined && object.compressed !== null
	                ? exports.CompressedBatchProof.fromPartial(object.compressed)
	                : undefined;
	        return message;
	    },
	};
	function createBaseLeafOp() {
	    return {
	        hash: 0,
	        prehashKey: 0,
	        prehashValue: 0,
	        length: 0,
	        prefix: new Uint8Array(),
	    };
	}
	exports.LeafOp = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.hash !== 0) {
	            writer.uint32(8).int32(message.hash);
	        }
	        if (message.prehashKey !== 0) {
	            writer.uint32(16).int32(message.prehashKey);
	        }
	        if (message.prehashValue !== 0) {
	            writer.uint32(24).int32(message.prehashValue);
	        }
	        if (message.length !== 0) {
	            writer.uint32(32).int32(message.length);
	        }
	        if (message.prefix.length !== 0) {
	            writer.uint32(42).bytes(message.prefix);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseLeafOp();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.hash = reader.int32();
	                    break;
	                case 2:
	                    message.prehashKey = reader.int32();
	                    break;
	                case 3:
	                    message.prehashValue = reader.int32();
	                    break;
	                case 4:
	                    message.length = reader.int32();
	                    break;
	                case 5:
	                    message.prefix = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            hash: (0, helpers_1.isSet)(object.hash) ? hashOpFromJSON(object.hash) : 0,
	            prehashKey: (0, helpers_1.isSet)(object.prehashKey) ? hashOpFromJSON(object.prehashKey) : 0,
	            prehashValue: (0, helpers_1.isSet)(object.prehashValue) ? hashOpFromJSON(object.prehashValue) : 0,
	            length: (0, helpers_1.isSet)(object.length) ? lengthOpFromJSON(object.length) : 0,
	            prefix: (0, helpers_1.isSet)(object.prefix) ? (0, helpers_1.bytesFromBase64)(object.prefix) : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.hash !== undefined && (obj.hash = hashOpToJSON(message.hash));
	        message.prehashKey !== undefined && (obj.prehashKey = hashOpToJSON(message.prehashKey));
	        message.prehashValue !== undefined && (obj.prehashValue = hashOpToJSON(message.prehashValue));
	        message.length !== undefined && (obj.length = lengthOpToJSON(message.length));
	        message.prefix !== undefined &&
	            (obj.prefix = (0, helpers_1.base64FromBytes)(message.prefix !== undefined ? message.prefix : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseLeafOp();
	        message.hash = object.hash ?? 0;
	        message.prehashKey = object.prehashKey ?? 0;
	        message.prehashValue = object.prehashValue ?? 0;
	        message.length = object.length ?? 0;
	        message.prefix = object.prefix ?? new Uint8Array();
	        return message;
	    },
	};
	function createBaseInnerOp() {
	    return {
	        hash: 0,
	        prefix: new Uint8Array(),
	        suffix: new Uint8Array(),
	    };
	}
	exports.InnerOp = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.hash !== 0) {
	            writer.uint32(8).int32(message.hash);
	        }
	        if (message.prefix.length !== 0) {
	            writer.uint32(18).bytes(message.prefix);
	        }
	        if (message.suffix.length !== 0) {
	            writer.uint32(26).bytes(message.suffix);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseInnerOp();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.hash = reader.int32();
	                    break;
	                case 2:
	                    message.prefix = reader.bytes();
	                    break;
	                case 3:
	                    message.suffix = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            hash: (0, helpers_1.isSet)(object.hash) ? hashOpFromJSON(object.hash) : 0,
	            prefix: (0, helpers_1.isSet)(object.prefix) ? (0, helpers_1.bytesFromBase64)(object.prefix) : new Uint8Array(),
	            suffix: (0, helpers_1.isSet)(object.suffix) ? (0, helpers_1.bytesFromBase64)(object.suffix) : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.hash !== undefined && (obj.hash = hashOpToJSON(message.hash));
	        message.prefix !== undefined &&
	            (obj.prefix = (0, helpers_1.base64FromBytes)(message.prefix !== undefined ? message.prefix : new Uint8Array()));
	        message.suffix !== undefined &&
	            (obj.suffix = (0, helpers_1.base64FromBytes)(message.suffix !== undefined ? message.suffix : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseInnerOp();
	        message.hash = object.hash ?? 0;
	        message.prefix = object.prefix ?? new Uint8Array();
	        message.suffix = object.suffix ?? new Uint8Array();
	        return message;
	    },
	};
	function createBaseProofSpec() {
	    return {
	        leafSpec: undefined,
	        innerSpec: undefined,
	        maxDepth: 0,
	        minDepth: 0,
	    };
	}
	exports.ProofSpec = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.leafSpec !== undefined) {
	            exports.LeafOp.encode(message.leafSpec, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.innerSpec !== undefined) {
	            exports.InnerSpec.encode(message.innerSpec, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.maxDepth !== 0) {
	            writer.uint32(24).int32(message.maxDepth);
	        }
	        if (message.minDepth !== 0) {
	            writer.uint32(32).int32(message.minDepth);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseProofSpec();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.leafSpec = exports.LeafOp.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.innerSpec = exports.InnerSpec.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.maxDepth = reader.int32();
	                    break;
	                case 4:
	                    message.minDepth = reader.int32();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            leafSpec: (0, helpers_1.isSet)(object.leafSpec) ? exports.LeafOp.fromJSON(object.leafSpec) : undefined,
	            innerSpec: (0, helpers_1.isSet)(object.innerSpec) ? exports.InnerSpec.fromJSON(object.innerSpec) : undefined,
	            maxDepth: (0, helpers_1.isSet)(object.maxDepth) ? Number(object.maxDepth) : 0,
	            minDepth: (0, helpers_1.isSet)(object.minDepth) ? Number(object.minDepth) : 0,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.leafSpec !== undefined &&
	            (obj.leafSpec = message.leafSpec ? exports.LeafOp.toJSON(message.leafSpec) : undefined);
	        message.innerSpec !== undefined &&
	            (obj.innerSpec = message.innerSpec ? exports.InnerSpec.toJSON(message.innerSpec) : undefined);
	        message.maxDepth !== undefined && (obj.maxDepth = Math.round(message.maxDepth));
	        message.minDepth !== undefined && (obj.minDepth = Math.round(message.minDepth));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseProofSpec();
	        message.leafSpec =
	            object.leafSpec !== undefined && object.leafSpec !== null
	                ? exports.LeafOp.fromPartial(object.leafSpec)
	                : undefined;
	        message.innerSpec =
	            object.innerSpec !== undefined && object.innerSpec !== null
	                ? exports.InnerSpec.fromPartial(object.innerSpec)
	                : undefined;
	        message.maxDepth = object.maxDepth ?? 0;
	        message.minDepth = object.minDepth ?? 0;
	        return message;
	    },
	};
	function createBaseInnerSpec() {
	    return {
	        childOrder: [],
	        childSize: 0,
	        minPrefixLength: 0,
	        maxPrefixLength: 0,
	        emptyChild: new Uint8Array(),
	        hash: 0,
	    };
	}
	exports.InnerSpec = {
	    encode(message, writer = _m0.Writer.create()) {
	        writer.uint32(10).fork();
	        for (const v of message.childOrder) {
	            writer.int32(v);
	        }
	        writer.ldelim();
	        if (message.childSize !== 0) {
	            writer.uint32(16).int32(message.childSize);
	        }
	        if (message.minPrefixLength !== 0) {
	            writer.uint32(24).int32(message.minPrefixLength);
	        }
	        if (message.maxPrefixLength !== 0) {
	            writer.uint32(32).int32(message.maxPrefixLength);
	        }
	        if (message.emptyChild.length !== 0) {
	            writer.uint32(42).bytes(message.emptyChild);
	        }
	        if (message.hash !== 0) {
	            writer.uint32(48).int32(message.hash);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseInnerSpec();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    if ((tag & 7) === 2) {
	                        const end2 = reader.uint32() + reader.pos;
	                        while (reader.pos < end2) {
	                            message.childOrder.push(reader.int32());
	                        }
	                    }
	                    else {
	                        message.childOrder.push(reader.int32());
	                    }
	                    break;
	                case 2:
	                    message.childSize = reader.int32();
	                    break;
	                case 3:
	                    message.minPrefixLength = reader.int32();
	                    break;
	                case 4:
	                    message.maxPrefixLength = reader.int32();
	                    break;
	                case 5:
	                    message.emptyChild = reader.bytes();
	                    break;
	                case 6:
	                    message.hash = reader.int32();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            childOrder: Array.isArray(object?.childOrder) ? object.childOrder.map((e) => Number(e)) : [],
	            childSize: (0, helpers_1.isSet)(object.childSize) ? Number(object.childSize) : 0,
	            minPrefixLength: (0, helpers_1.isSet)(object.minPrefixLength) ? Number(object.minPrefixLength) : 0,
	            maxPrefixLength: (0, helpers_1.isSet)(object.maxPrefixLength) ? Number(object.maxPrefixLength) : 0,
	            emptyChild: (0, helpers_1.isSet)(object.emptyChild) ? (0, helpers_1.bytesFromBase64)(object.emptyChild) : new Uint8Array(),
	            hash: (0, helpers_1.isSet)(object.hash) ? hashOpFromJSON(object.hash) : 0,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.childOrder) {
	            obj.childOrder = message.childOrder.map((e) => Math.round(e));
	        }
	        else {
	            obj.childOrder = [];
	        }
	        message.childSize !== undefined && (obj.childSize = Math.round(message.childSize));
	        message.minPrefixLength !== undefined && (obj.minPrefixLength = Math.round(message.minPrefixLength));
	        message.maxPrefixLength !== undefined && (obj.maxPrefixLength = Math.round(message.maxPrefixLength));
	        message.emptyChild !== undefined &&
	            (obj.emptyChild = (0, helpers_1.base64FromBytes)(message.emptyChild !== undefined ? message.emptyChild : new Uint8Array()));
	        message.hash !== undefined && (obj.hash = hashOpToJSON(message.hash));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseInnerSpec();
	        message.childOrder = object.childOrder?.map((e) => e) || [];
	        message.childSize = object.childSize ?? 0;
	        message.minPrefixLength = object.minPrefixLength ?? 0;
	        message.maxPrefixLength = object.maxPrefixLength ?? 0;
	        message.emptyChild = object.emptyChild ?? new Uint8Array();
	        message.hash = object.hash ?? 0;
	        return message;
	    },
	};
	function createBaseBatchProof() {
	    return {
	        entries: [],
	    };
	}
	exports.BatchProof = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.entries) {
	            exports.BatchEntry.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseBatchProof();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.entries.push(exports.BatchEntry.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            entries: Array.isArray(object?.entries) ? object.entries.map((e) => exports.BatchEntry.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.entries) {
	            obj.entries = message.entries.map((e) => (e ? exports.BatchEntry.toJSON(e) : undefined));
	        }
	        else {
	            obj.entries = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseBatchProof();
	        message.entries = object.entries?.map((e) => exports.BatchEntry.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseBatchEntry() {
	    return {
	        exist: undefined,
	        nonexist: undefined,
	    };
	}
	exports.BatchEntry = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.exist !== undefined) {
	            exports.ExistenceProof.encode(message.exist, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.nonexist !== undefined) {
	            exports.NonExistenceProof.encode(message.nonexist, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseBatchEntry();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.exist = exports.ExistenceProof.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.nonexist = exports.NonExistenceProof.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            exist: (0, helpers_1.isSet)(object.exist) ? exports.ExistenceProof.fromJSON(object.exist) : undefined,
	            nonexist: (0, helpers_1.isSet)(object.nonexist) ? exports.NonExistenceProof.fromJSON(object.nonexist) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.exist !== undefined &&
	            (obj.exist = message.exist ? exports.ExistenceProof.toJSON(message.exist) : undefined);
	        message.nonexist !== undefined &&
	            (obj.nonexist = message.nonexist ? exports.NonExistenceProof.toJSON(message.nonexist) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseBatchEntry();
	        message.exist =
	            object.exist !== undefined && object.exist !== null
	                ? exports.ExistenceProof.fromPartial(object.exist)
	                : undefined;
	        message.nonexist =
	            object.nonexist !== undefined && object.nonexist !== null
	                ? exports.NonExistenceProof.fromPartial(object.nonexist)
	                : undefined;
	        return message;
	    },
	};
	function createBaseCompressedBatchProof() {
	    return {
	        entries: [],
	        lookupInners: [],
	    };
	}
	exports.CompressedBatchProof = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.entries) {
	            exports.CompressedBatchEntry.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        for (const v of message.lookupInners) {
	            exports.InnerOp.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseCompressedBatchProof();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.entries.push(exports.CompressedBatchEntry.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.lookupInners.push(exports.InnerOp.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            entries: Array.isArray(object?.entries)
	                ? object.entries.map((e) => exports.CompressedBatchEntry.fromJSON(e))
	                : [],
	            lookupInners: Array.isArray(object?.lookupInners)
	                ? object.lookupInners.map((e) => exports.InnerOp.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.entries) {
	            obj.entries = message.entries.map((e) => (e ? exports.CompressedBatchEntry.toJSON(e) : undefined));
	        }
	        else {
	            obj.entries = [];
	        }
	        if (message.lookupInners) {
	            obj.lookupInners = message.lookupInners.map((e) => (e ? exports.InnerOp.toJSON(e) : undefined));
	        }
	        else {
	            obj.lookupInners = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseCompressedBatchProof();
	        message.entries = object.entries?.map((e) => exports.CompressedBatchEntry.fromPartial(e)) || [];
	        message.lookupInners = object.lookupInners?.map((e) => exports.InnerOp.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseCompressedBatchEntry() {
	    return {
	        exist: undefined,
	        nonexist: undefined,
	    };
	}
	exports.CompressedBatchEntry = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.exist !== undefined) {
	            exports.CompressedExistenceProof.encode(message.exist, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.nonexist !== undefined) {
	            exports.CompressedNonExistenceProof.encode(message.nonexist, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseCompressedBatchEntry();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.exist = exports.CompressedExistenceProof.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.nonexist = exports.CompressedNonExistenceProof.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            exist: (0, helpers_1.isSet)(object.exist) ? exports.CompressedExistenceProof.fromJSON(object.exist) : undefined,
	            nonexist: (0, helpers_1.isSet)(object.nonexist) ? exports.CompressedNonExistenceProof.fromJSON(object.nonexist) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.exist !== undefined &&
	            (obj.exist = message.exist ? exports.CompressedExistenceProof.toJSON(message.exist) : undefined);
	        message.nonexist !== undefined &&
	            (obj.nonexist = message.nonexist ? exports.CompressedNonExistenceProof.toJSON(message.nonexist) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseCompressedBatchEntry();
	        message.exist =
	            object.exist !== undefined && object.exist !== null
	                ? exports.CompressedExistenceProof.fromPartial(object.exist)
	                : undefined;
	        message.nonexist =
	            object.nonexist !== undefined && object.nonexist !== null
	                ? exports.CompressedNonExistenceProof.fromPartial(object.nonexist)
	                : undefined;
	        return message;
	    },
	};
	function createBaseCompressedExistenceProof() {
	    return {
	        key: new Uint8Array(),
	        value: new Uint8Array(),
	        leaf: undefined,
	        path: [],
	    };
	}
	exports.CompressedExistenceProof = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.key.length !== 0) {
	            writer.uint32(10).bytes(message.key);
	        }
	        if (message.value.length !== 0) {
	            writer.uint32(18).bytes(message.value);
	        }
	        if (message.leaf !== undefined) {
	            exports.LeafOp.encode(message.leaf, writer.uint32(26).fork()).ldelim();
	        }
	        writer.uint32(34).fork();
	        for (const v of message.path) {
	            writer.int32(v);
	        }
	        writer.ldelim();
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseCompressedExistenceProof();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.key = reader.bytes();
	                    break;
	                case 2:
	                    message.value = reader.bytes();
	                    break;
	                case 3:
	                    message.leaf = exports.LeafOp.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    if ((tag & 7) === 2) {
	                        const end2 = reader.uint32() + reader.pos;
	                        while (reader.pos < end2) {
	                            message.path.push(reader.int32());
	                        }
	                    }
	                    else {
	                        message.path.push(reader.int32());
	                    }
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            key: (0, helpers_1.isSet)(object.key) ? (0, helpers_1.bytesFromBase64)(object.key) : new Uint8Array(),
	            value: (0, helpers_1.isSet)(object.value) ? (0, helpers_1.bytesFromBase64)(object.value) : new Uint8Array(),
	            leaf: (0, helpers_1.isSet)(object.leaf) ? exports.LeafOp.fromJSON(object.leaf) : undefined,
	            path: Array.isArray(object?.path) ? object.path.map((e) => Number(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.key !== undefined &&
	            (obj.key = (0, helpers_1.base64FromBytes)(message.key !== undefined ? message.key : new Uint8Array()));
	        message.value !== undefined &&
	            (obj.value = (0, helpers_1.base64FromBytes)(message.value !== undefined ? message.value : new Uint8Array()));
	        message.leaf !== undefined && (obj.leaf = message.leaf ? exports.LeafOp.toJSON(message.leaf) : undefined);
	        if (message.path) {
	            obj.path = message.path.map((e) => Math.round(e));
	        }
	        else {
	            obj.path = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseCompressedExistenceProof();
	        message.key = object.key ?? new Uint8Array();
	        message.value = object.value ?? new Uint8Array();
	        message.leaf =
	            object.leaf !== undefined && object.leaf !== null ? exports.LeafOp.fromPartial(object.leaf) : undefined;
	        message.path = object.path?.map((e) => e) || [];
	        return message;
	    },
	};
	function createBaseCompressedNonExistenceProof() {
	    return {
	        key: new Uint8Array(),
	        left: undefined,
	        right: undefined,
	    };
	}
	exports.CompressedNonExistenceProof = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.key.length !== 0) {
	            writer.uint32(10).bytes(message.key);
	        }
	        if (message.left !== undefined) {
	            exports.CompressedExistenceProof.encode(message.left, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.right !== undefined) {
	            exports.CompressedExistenceProof.encode(message.right, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseCompressedNonExistenceProof();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.key = reader.bytes();
	                    break;
	                case 2:
	                    message.left = exports.CompressedExistenceProof.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.right = exports.CompressedExistenceProof.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            key: (0, helpers_1.isSet)(object.key) ? (0, helpers_1.bytesFromBase64)(object.key) : new Uint8Array(),
	            left: (0, helpers_1.isSet)(object.left) ? exports.CompressedExistenceProof.fromJSON(object.left) : undefined,
	            right: (0, helpers_1.isSet)(object.right) ? exports.CompressedExistenceProof.fromJSON(object.right) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.key !== undefined &&
	            (obj.key = (0, helpers_1.base64FromBytes)(message.key !== undefined ? message.key : new Uint8Array()));
	        message.left !== undefined &&
	            (obj.left = message.left ? exports.CompressedExistenceProof.toJSON(message.left) : undefined);
	        message.right !== undefined &&
	            (obj.right = message.right ? exports.CompressedExistenceProof.toJSON(message.right) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseCompressedNonExistenceProof();
	        message.key = object.key ?? new Uint8Array();
	        message.left =
	            object.left !== undefined && object.left !== null
	                ? exports.CompressedExistenceProof.fromPartial(object.left)
	                : undefined;
	        message.right =
	            object.right !== undefined && object.right !== null
	                ? exports.CompressedExistenceProof.fromPartial(object.right)
	                : undefined;
	        return message;
	    },
	};
	
} (proofs));

var __createBinding$a = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$a = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$a = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$a(result, mod, k);
    __setModuleDefault$a(result, mod);
    return result;
};
Object.defineProperty(commitment, "__esModule", { value: true });
commitment.MerkleProof = commitment.MerklePath = commitment.MerklePrefix = commitment.MerkleRoot = commitment.protobufPackage = void 0;
/* eslint-disable */
const proofs_1 = proofs;
const _m0$6 = __importStar$a(minimal);
const helpers_1$6 = helpers;
commitment.protobufPackage = "ibc.core.commitment.v1";
function createBaseMerkleRoot() {
    return {
        hash: new Uint8Array(),
    };
}
commitment.MerkleRoot = {
    encode(message, writer = _m0$6.Writer.create()) {
        if (message.hash.length !== 0) {
            writer.uint32(10).bytes(message.hash);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$6.Reader ? input : new _m0$6.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMerkleRoot();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.hash = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            hash: (0, helpers_1$6.isSet)(object.hash) ? (0, helpers_1$6.bytesFromBase64)(object.hash) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.hash !== undefined &&
            (obj.hash = (0, helpers_1$6.base64FromBytes)(message.hash !== undefined ? message.hash : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMerkleRoot();
        message.hash = object.hash ?? new Uint8Array();
        return message;
    },
};
function createBaseMerklePrefix() {
    return {
        keyPrefix: new Uint8Array(),
    };
}
commitment.MerklePrefix = {
    encode(message, writer = _m0$6.Writer.create()) {
        if (message.keyPrefix.length !== 0) {
            writer.uint32(10).bytes(message.keyPrefix);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$6.Reader ? input : new _m0$6.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMerklePrefix();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.keyPrefix = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            keyPrefix: (0, helpers_1$6.isSet)(object.keyPrefix) ? (0, helpers_1$6.bytesFromBase64)(object.keyPrefix) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.keyPrefix !== undefined &&
            (obj.keyPrefix = (0, helpers_1$6.base64FromBytes)(message.keyPrefix !== undefined ? message.keyPrefix : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMerklePrefix();
        message.keyPrefix = object.keyPrefix ?? new Uint8Array();
        return message;
    },
};
function createBaseMerklePath() {
    return {
        keyPath: [],
    };
}
commitment.MerklePath = {
    encode(message, writer = _m0$6.Writer.create()) {
        for (const v of message.keyPath) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$6.Reader ? input : new _m0$6.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMerklePath();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.keyPath.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            keyPath: Array.isArray(object?.keyPath) ? object.keyPath.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.keyPath) {
            obj.keyPath = message.keyPath.map((e) => e);
        }
        else {
            obj.keyPath = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMerklePath();
        message.keyPath = object.keyPath?.map((e) => e) || [];
        return message;
    },
};
function createBaseMerkleProof() {
    return {
        proofs: [],
    };
}
commitment.MerkleProof = {
    encode(message, writer = _m0$6.Writer.create()) {
        for (const v of message.proofs) {
            proofs_1.CommitmentProof.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$6.Reader ? input : new _m0$6.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMerkleProof();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.proofs.push(proofs_1.CommitmentProof.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            proofs: Array.isArray(object?.proofs) ? object.proofs.map((e) => proofs_1.CommitmentProof.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.proofs) {
            obj.proofs = message.proofs.map((e) => (e ? proofs_1.CommitmentProof.toJSON(e) : undefined));
        }
        else {
            obj.proofs = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMerkleProof();
        message.proofs = object.proofs?.map((e) => proofs_1.CommitmentProof.fromPartial(e)) || [];
        return message;
    },
};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Params = exports.Version = exports.ConnectionPaths = exports.ClientPaths = exports.Counterparty = exports.IdentifiedConnection = exports.ConnectionEnd = exports.stateToJSON = exports.stateFromJSON = exports.State = exports.protobufPackage = void 0;
	/* eslint-disable */
	const commitment_1 = commitment;
	const helpers_1 = helpers;
	const _m0 = __importStar(minimal);
	exports.protobufPackage = "ibc.core.connection.v1";
	/**
	 * State defines if a connection is in one of the following states:
	 * INIT, TRYOPEN, OPEN or UNINITIALIZED.
	 */
	var State;
	(function (State) {
	    /** STATE_UNINITIALIZED_UNSPECIFIED - Default State */
	    State[State["STATE_UNINITIALIZED_UNSPECIFIED"] = 0] = "STATE_UNINITIALIZED_UNSPECIFIED";
	    /** STATE_INIT - A connection end has just started the opening handshake. */
	    State[State["STATE_INIT"] = 1] = "STATE_INIT";
	    /**
	     * STATE_TRYOPEN - A connection end has acknowledged the handshake step on the counterparty
	     * chain.
	     */
	    State[State["STATE_TRYOPEN"] = 2] = "STATE_TRYOPEN";
	    /** STATE_OPEN - A connection end has completed the handshake. */
	    State[State["STATE_OPEN"] = 3] = "STATE_OPEN";
	    State[State["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
	})(State = exports.State || (exports.State = {}));
	function stateFromJSON(object) {
	    switch (object) {
	        case 0:
	        case "STATE_UNINITIALIZED_UNSPECIFIED":
	            return State.STATE_UNINITIALIZED_UNSPECIFIED;
	        case 1:
	        case "STATE_INIT":
	            return State.STATE_INIT;
	        case 2:
	        case "STATE_TRYOPEN":
	            return State.STATE_TRYOPEN;
	        case 3:
	        case "STATE_OPEN":
	            return State.STATE_OPEN;
	        case -1:
	        case "UNRECOGNIZED":
	        default:
	            return State.UNRECOGNIZED;
	    }
	}
	exports.stateFromJSON = stateFromJSON;
	function stateToJSON(object) {
	    switch (object) {
	        case State.STATE_UNINITIALIZED_UNSPECIFIED:
	            return "STATE_UNINITIALIZED_UNSPECIFIED";
	        case State.STATE_INIT:
	            return "STATE_INIT";
	        case State.STATE_TRYOPEN:
	            return "STATE_TRYOPEN";
	        case State.STATE_OPEN:
	            return "STATE_OPEN";
	        case State.UNRECOGNIZED:
	        default:
	            return "UNRECOGNIZED";
	    }
	}
	exports.stateToJSON = stateToJSON;
	function createBaseConnectionEnd() {
	    return {
	        clientId: "",
	        versions: [],
	        state: 0,
	        counterparty: undefined,
	        delayPeriod: helpers_1.Long.UZERO,
	    };
	}
	exports.ConnectionEnd = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientId !== "") {
	            writer.uint32(10).string(message.clientId);
	        }
	        for (const v of message.versions) {
	            exports.Version.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.state !== 0) {
	            writer.uint32(24).int32(message.state);
	        }
	        if (message.counterparty !== undefined) {
	            exports.Counterparty.encode(message.counterparty, writer.uint32(34).fork()).ldelim();
	        }
	        if (!message.delayPeriod.isZero()) {
	            writer.uint32(40).uint64(message.delayPeriod);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseConnectionEnd();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientId = reader.string();
	                    break;
	                case 2:
	                    message.versions.push(exports.Version.decode(reader, reader.uint32()));
	                    break;
	                case 3:
	                    message.state = reader.int32();
	                    break;
	                case 4:
	                    message.counterparty = exports.Counterparty.decode(reader, reader.uint32());
	                    break;
	                case 5:
	                    message.delayPeriod = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	            versions: Array.isArray(object?.versions) ? object.versions.map((e) => exports.Version.fromJSON(e)) : [],
	            state: (0, helpers_1.isSet)(object.state) ? stateFromJSON(object.state) : 0,
	            counterparty: (0, helpers_1.isSet)(object.counterparty) ? exports.Counterparty.fromJSON(object.counterparty) : undefined,
	            delayPeriod: (0, helpers_1.isSet)(object.delayPeriod) ? helpers_1.Long.fromValue(object.delayPeriod) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        if (message.versions) {
	            obj.versions = message.versions.map((e) => (e ? exports.Version.toJSON(e) : undefined));
	        }
	        else {
	            obj.versions = [];
	        }
	        message.state !== undefined && (obj.state = stateToJSON(message.state));
	        message.counterparty !== undefined &&
	            (obj.counterparty = message.counterparty ? exports.Counterparty.toJSON(message.counterparty) : undefined);
	        message.delayPeriod !== undefined && (obj.delayPeriod = (message.delayPeriod || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseConnectionEnd();
	        message.clientId = object.clientId ?? "";
	        message.versions = object.versions?.map((e) => exports.Version.fromPartial(e)) || [];
	        message.state = object.state ?? 0;
	        message.counterparty =
	            object.counterparty !== undefined && object.counterparty !== null
	                ? exports.Counterparty.fromPartial(object.counterparty)
	                : undefined;
	        message.delayPeriod =
	            object.delayPeriod !== undefined && object.delayPeriod !== null
	                ? helpers_1.Long.fromValue(object.delayPeriod)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseIdentifiedConnection() {
	    return {
	        id: "",
	        clientId: "",
	        versions: [],
	        state: 0,
	        counterparty: undefined,
	        delayPeriod: helpers_1.Long.UZERO,
	    };
	}
	exports.IdentifiedConnection = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.id !== "") {
	            writer.uint32(10).string(message.id);
	        }
	        if (message.clientId !== "") {
	            writer.uint32(18).string(message.clientId);
	        }
	        for (const v of message.versions) {
	            exports.Version.encode(v, writer.uint32(26).fork()).ldelim();
	        }
	        if (message.state !== 0) {
	            writer.uint32(32).int32(message.state);
	        }
	        if (message.counterparty !== undefined) {
	            exports.Counterparty.encode(message.counterparty, writer.uint32(42).fork()).ldelim();
	        }
	        if (!message.delayPeriod.isZero()) {
	            writer.uint32(48).uint64(message.delayPeriod);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseIdentifiedConnection();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.id = reader.string();
	                    break;
	                case 2:
	                    message.clientId = reader.string();
	                    break;
	                case 3:
	                    message.versions.push(exports.Version.decode(reader, reader.uint32()));
	                    break;
	                case 4:
	                    message.state = reader.int32();
	                    break;
	                case 5:
	                    message.counterparty = exports.Counterparty.decode(reader, reader.uint32());
	                    break;
	                case 6:
	                    message.delayPeriod = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            id: (0, helpers_1.isSet)(object.id) ? String(object.id) : "",
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	            versions: Array.isArray(object?.versions) ? object.versions.map((e) => exports.Version.fromJSON(e)) : [],
	            state: (0, helpers_1.isSet)(object.state) ? stateFromJSON(object.state) : 0,
	            counterparty: (0, helpers_1.isSet)(object.counterparty) ? exports.Counterparty.fromJSON(object.counterparty) : undefined,
	            delayPeriod: (0, helpers_1.isSet)(object.delayPeriod) ? helpers_1.Long.fromValue(object.delayPeriod) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.id !== undefined && (obj.id = message.id);
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        if (message.versions) {
	            obj.versions = message.versions.map((e) => (e ? exports.Version.toJSON(e) : undefined));
	        }
	        else {
	            obj.versions = [];
	        }
	        message.state !== undefined && (obj.state = stateToJSON(message.state));
	        message.counterparty !== undefined &&
	            (obj.counterparty = message.counterparty ? exports.Counterparty.toJSON(message.counterparty) : undefined);
	        message.delayPeriod !== undefined && (obj.delayPeriod = (message.delayPeriod || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseIdentifiedConnection();
	        message.id = object.id ?? "";
	        message.clientId = object.clientId ?? "";
	        message.versions = object.versions?.map((e) => exports.Version.fromPartial(e)) || [];
	        message.state = object.state ?? 0;
	        message.counterparty =
	            object.counterparty !== undefined && object.counterparty !== null
	                ? exports.Counterparty.fromPartial(object.counterparty)
	                : undefined;
	        message.delayPeriod =
	            object.delayPeriod !== undefined && object.delayPeriod !== null
	                ? helpers_1.Long.fromValue(object.delayPeriod)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseCounterparty() {
	    return {
	        clientId: "",
	        connectionId: "",
	        prefix: undefined,
	    };
	}
	exports.Counterparty = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientId !== "") {
	            writer.uint32(10).string(message.clientId);
	        }
	        if (message.connectionId !== "") {
	            writer.uint32(18).string(message.connectionId);
	        }
	        if (message.prefix !== undefined) {
	            commitment_1.MerklePrefix.encode(message.prefix, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseCounterparty();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientId = reader.string();
	                    break;
	                case 2:
	                    message.connectionId = reader.string();
	                    break;
	                case 3:
	                    message.prefix = commitment_1.MerklePrefix.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	            connectionId: (0, helpers_1.isSet)(object.connectionId) ? String(object.connectionId) : "",
	            prefix: (0, helpers_1.isSet)(object.prefix) ? commitment_1.MerklePrefix.fromJSON(object.prefix) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        message.connectionId !== undefined && (obj.connectionId = message.connectionId);
	        message.prefix !== undefined &&
	            (obj.prefix = message.prefix ? commitment_1.MerklePrefix.toJSON(message.prefix) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseCounterparty();
	        message.clientId = object.clientId ?? "";
	        message.connectionId = object.connectionId ?? "";
	        message.prefix =
	            object.prefix !== undefined && object.prefix !== null
	                ? commitment_1.MerklePrefix.fromPartial(object.prefix)
	                : undefined;
	        return message;
	    },
	};
	function createBaseClientPaths() {
	    return {
	        paths: [],
	    };
	}
	exports.ClientPaths = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.paths) {
	            writer.uint32(10).string(v);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseClientPaths();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.paths.push(reader.string());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            paths: Array.isArray(object?.paths) ? object.paths.map((e) => String(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.paths) {
	            obj.paths = message.paths.map((e) => e);
	        }
	        else {
	            obj.paths = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseClientPaths();
	        message.paths = object.paths?.map((e) => e) || [];
	        return message;
	    },
	};
	function createBaseConnectionPaths() {
	    return {
	        clientId: "",
	        paths: [],
	    };
	}
	exports.ConnectionPaths = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientId !== "") {
	            writer.uint32(10).string(message.clientId);
	        }
	        for (const v of message.paths) {
	            writer.uint32(18).string(v);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseConnectionPaths();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientId = reader.string();
	                    break;
	                case 2:
	                    message.paths.push(reader.string());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	            paths: Array.isArray(object?.paths) ? object.paths.map((e) => String(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        if (message.paths) {
	            obj.paths = message.paths.map((e) => e);
	        }
	        else {
	            obj.paths = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseConnectionPaths();
	        message.clientId = object.clientId ?? "";
	        message.paths = object.paths?.map((e) => e) || [];
	        return message;
	    },
	};
	function createBaseVersion() {
	    return {
	        identifier: "",
	        features: [],
	    };
	}
	exports.Version = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.identifier !== "") {
	            writer.uint32(10).string(message.identifier);
	        }
	        for (const v of message.features) {
	            writer.uint32(18).string(v);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseVersion();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.identifier = reader.string();
	                    break;
	                case 2:
	                    message.features.push(reader.string());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            identifier: (0, helpers_1.isSet)(object.identifier) ? String(object.identifier) : "",
	            features: Array.isArray(object?.features) ? object.features.map((e) => String(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.identifier !== undefined && (obj.identifier = message.identifier);
	        if (message.features) {
	            obj.features = message.features.map((e) => e);
	        }
	        else {
	            obj.features = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseVersion();
	        message.identifier = object.identifier ?? "";
	        message.features = object.features?.map((e) => e) || [];
	        return message;
	    },
	};
	function createBaseParams() {
	    return {
	        maxExpectedTimePerBlock: helpers_1.Long.UZERO,
	    };
	}
	exports.Params = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.maxExpectedTimePerBlock.isZero()) {
	            writer.uint32(8).uint64(message.maxExpectedTimePerBlock);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseParams();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.maxExpectedTimePerBlock = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            maxExpectedTimePerBlock: (0, helpers_1.isSet)(object.maxExpectedTimePerBlock)
	                ? helpers_1.Long.fromValue(object.maxExpectedTimePerBlock)
	                : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.maxExpectedTimePerBlock !== undefined &&
	            (obj.maxExpectedTimePerBlock = (message.maxExpectedTimePerBlock || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseParams();
	        message.maxExpectedTimePerBlock =
	            object.maxExpectedTimePerBlock !== undefined && object.maxExpectedTimePerBlock !== null
	                ? helpers_1.Long.fromValue(object.maxExpectedTimePerBlock)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	
} (connection));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.MsgClientImpl = exports.MsgConnectionOpenConfirmResponse = exports.MsgConnectionOpenConfirm = exports.MsgConnectionOpenAckResponse = exports.MsgConnectionOpenAck = exports.MsgConnectionOpenTryResponse = exports.MsgConnectionOpenTry = exports.MsgConnectionOpenInitResponse = exports.MsgConnectionOpenInit = exports.protobufPackage = void 0;
	/* eslint-disable */
	const connection_1 = connection;
	const any_1 = any;
	const client_1 = client;
	const helpers_1 = helpers;
	const _m0 = __importStar(minimal);
	exports.protobufPackage = "ibc.core.connection.v1";
	function createBaseMsgConnectionOpenInit() {
	    return {
	        clientId: "",
	        counterparty: undefined,
	        version: undefined,
	        delayPeriod: helpers_1.Long.UZERO,
	        signer: "",
	    };
	}
	exports.MsgConnectionOpenInit = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientId !== "") {
	            writer.uint32(10).string(message.clientId);
	        }
	        if (message.counterparty !== undefined) {
	            connection_1.Counterparty.encode(message.counterparty, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.version !== undefined) {
	            connection_1.Version.encode(message.version, writer.uint32(26).fork()).ldelim();
	        }
	        if (!message.delayPeriod.isZero()) {
	            writer.uint32(32).uint64(message.delayPeriod);
	        }
	        if (message.signer !== "") {
	            writer.uint32(42).string(message.signer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgConnectionOpenInit();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientId = reader.string();
	                    break;
	                case 2:
	                    message.counterparty = connection_1.Counterparty.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.version = connection_1.Version.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.delayPeriod = reader.uint64();
	                    break;
	                case 5:
	                    message.signer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	            counterparty: (0, helpers_1.isSet)(object.counterparty) ? connection_1.Counterparty.fromJSON(object.counterparty) : undefined,
	            version: (0, helpers_1.isSet)(object.version) ? connection_1.Version.fromJSON(object.version) : undefined,
	            delayPeriod: (0, helpers_1.isSet)(object.delayPeriod) ? helpers_1.Long.fromValue(object.delayPeriod) : helpers_1.Long.UZERO,
	            signer: (0, helpers_1.isSet)(object.signer) ? String(object.signer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        message.counterparty !== undefined &&
	            (obj.counterparty = message.counterparty ? connection_1.Counterparty.toJSON(message.counterparty) : undefined);
	        message.version !== undefined &&
	            (obj.version = message.version ? connection_1.Version.toJSON(message.version) : undefined);
	        message.delayPeriod !== undefined && (obj.delayPeriod = (message.delayPeriod || helpers_1.Long.UZERO).toString());
	        message.signer !== undefined && (obj.signer = message.signer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgConnectionOpenInit();
	        message.clientId = object.clientId ?? "";
	        message.counterparty =
	            object.counterparty !== undefined && object.counterparty !== null
	                ? connection_1.Counterparty.fromPartial(object.counterparty)
	                : undefined;
	        message.version =
	            object.version !== undefined && object.version !== null
	                ? connection_1.Version.fromPartial(object.version)
	                : undefined;
	        message.delayPeriod =
	            object.delayPeriod !== undefined && object.delayPeriod !== null
	                ? helpers_1.Long.fromValue(object.delayPeriod)
	                : helpers_1.Long.UZERO;
	        message.signer = object.signer ?? "";
	        return message;
	    },
	};
	function createBaseMsgConnectionOpenInitResponse() {
	    return {};
	}
	exports.MsgConnectionOpenInitResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgConnectionOpenInitResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgConnectionOpenInitResponse();
	        return message;
	    },
	};
	function createBaseMsgConnectionOpenTry() {
	    return {
	        clientId: "",
	        previousConnectionId: "",
	        clientState: undefined,
	        counterparty: undefined,
	        delayPeriod: helpers_1.Long.UZERO,
	        counterpartyVersions: [],
	        proofHeight: undefined,
	        proofInit: new Uint8Array(),
	        proofClient: new Uint8Array(),
	        proofConsensus: new Uint8Array(),
	        consensusHeight: undefined,
	        signer: "",
	    };
	}
	exports.MsgConnectionOpenTry = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientId !== "") {
	            writer.uint32(10).string(message.clientId);
	        }
	        if (message.previousConnectionId !== "") {
	            writer.uint32(18).string(message.previousConnectionId);
	        }
	        if (message.clientState !== undefined) {
	            any_1.Any.encode(message.clientState, writer.uint32(26).fork()).ldelim();
	        }
	        if (message.counterparty !== undefined) {
	            connection_1.Counterparty.encode(message.counterparty, writer.uint32(34).fork()).ldelim();
	        }
	        if (!message.delayPeriod.isZero()) {
	            writer.uint32(40).uint64(message.delayPeriod);
	        }
	        for (const v of message.counterpartyVersions) {
	            connection_1.Version.encode(v, writer.uint32(50).fork()).ldelim();
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(58).fork()).ldelim();
	        }
	        if (message.proofInit.length !== 0) {
	            writer.uint32(66).bytes(message.proofInit);
	        }
	        if (message.proofClient.length !== 0) {
	            writer.uint32(74).bytes(message.proofClient);
	        }
	        if (message.proofConsensus.length !== 0) {
	            writer.uint32(82).bytes(message.proofConsensus);
	        }
	        if (message.consensusHeight !== undefined) {
	            client_1.Height.encode(message.consensusHeight, writer.uint32(90).fork()).ldelim();
	        }
	        if (message.signer !== "") {
	            writer.uint32(98).string(message.signer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgConnectionOpenTry();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientId = reader.string();
	                    break;
	                case 2:
	                    message.previousConnectionId = reader.string();
	                    break;
	                case 3:
	                    message.clientState = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.counterparty = connection_1.Counterparty.decode(reader, reader.uint32());
	                    break;
	                case 5:
	                    message.delayPeriod = reader.uint64();
	                    break;
	                case 6:
	                    message.counterpartyVersions.push(connection_1.Version.decode(reader, reader.uint32()));
	                    break;
	                case 7:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                case 8:
	                    message.proofInit = reader.bytes();
	                    break;
	                case 9:
	                    message.proofClient = reader.bytes();
	                    break;
	                case 10:
	                    message.proofConsensus = reader.bytes();
	                    break;
	                case 11:
	                    message.consensusHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                case 12:
	                    message.signer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	            previousConnectionId: (0, helpers_1.isSet)(object.previousConnectionId) ? String(object.previousConnectionId) : "",
	            clientState: (0, helpers_1.isSet)(object.clientState) ? any_1.Any.fromJSON(object.clientState) : undefined,
	            counterparty: (0, helpers_1.isSet)(object.counterparty) ? connection_1.Counterparty.fromJSON(object.counterparty) : undefined,
	            delayPeriod: (0, helpers_1.isSet)(object.delayPeriod) ? helpers_1.Long.fromValue(object.delayPeriod) : helpers_1.Long.UZERO,
	            counterpartyVersions: Array.isArray(object?.counterpartyVersions)
	                ? object.counterpartyVersions.map((e) => connection_1.Version.fromJSON(e))
	                : [],
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	            proofInit: (0, helpers_1.isSet)(object.proofInit) ? (0, helpers_1.bytesFromBase64)(object.proofInit) : new Uint8Array(),
	            proofClient: (0, helpers_1.isSet)(object.proofClient) ? (0, helpers_1.bytesFromBase64)(object.proofClient) : new Uint8Array(),
	            proofConsensus: (0, helpers_1.isSet)(object.proofConsensus)
	                ? (0, helpers_1.bytesFromBase64)(object.proofConsensus)
	                : new Uint8Array(),
	            consensusHeight: (0, helpers_1.isSet)(object.consensusHeight) ? client_1.Height.fromJSON(object.consensusHeight) : undefined,
	            signer: (0, helpers_1.isSet)(object.signer) ? String(object.signer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        message.previousConnectionId !== undefined && (obj.previousConnectionId = message.previousConnectionId);
	        message.clientState !== undefined &&
	            (obj.clientState = message.clientState ? any_1.Any.toJSON(message.clientState) : undefined);
	        message.counterparty !== undefined &&
	            (obj.counterparty = message.counterparty ? connection_1.Counterparty.toJSON(message.counterparty) : undefined);
	        message.delayPeriod !== undefined && (obj.delayPeriod = (message.delayPeriod || helpers_1.Long.UZERO).toString());
	        if (message.counterpartyVersions) {
	            obj.counterpartyVersions = message.counterpartyVersions.map((e) => (e ? connection_1.Version.toJSON(e) : undefined));
	        }
	        else {
	            obj.counterpartyVersions = [];
	        }
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        message.proofInit !== undefined &&
	            (obj.proofInit = (0, helpers_1.base64FromBytes)(message.proofInit !== undefined ? message.proofInit : new Uint8Array()));
	        message.proofClient !== undefined &&
	            (obj.proofClient = (0, helpers_1.base64FromBytes)(message.proofClient !== undefined ? message.proofClient : new Uint8Array()));
	        message.proofConsensus !== undefined &&
	            (obj.proofConsensus = (0, helpers_1.base64FromBytes)(message.proofConsensus !== undefined ? message.proofConsensus : new Uint8Array()));
	        message.consensusHeight !== undefined &&
	            (obj.consensusHeight = message.consensusHeight ? client_1.Height.toJSON(message.consensusHeight) : undefined);
	        message.signer !== undefined && (obj.signer = message.signer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgConnectionOpenTry();
	        message.clientId = object.clientId ?? "";
	        message.previousConnectionId = object.previousConnectionId ?? "";
	        message.clientState =
	            object.clientState !== undefined && object.clientState !== null
	                ? any_1.Any.fromPartial(object.clientState)
	                : undefined;
	        message.counterparty =
	            object.counterparty !== undefined && object.counterparty !== null
	                ? connection_1.Counterparty.fromPartial(object.counterparty)
	                : undefined;
	        message.delayPeriod =
	            object.delayPeriod !== undefined && object.delayPeriod !== null
	                ? helpers_1.Long.fromValue(object.delayPeriod)
	                : helpers_1.Long.UZERO;
	        message.counterpartyVersions = object.counterpartyVersions?.map((e) => connection_1.Version.fromPartial(e)) || [];
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        message.proofInit = object.proofInit ?? new Uint8Array();
	        message.proofClient = object.proofClient ?? new Uint8Array();
	        message.proofConsensus = object.proofConsensus ?? new Uint8Array();
	        message.consensusHeight =
	            object.consensusHeight !== undefined && object.consensusHeight !== null
	                ? client_1.Height.fromPartial(object.consensusHeight)
	                : undefined;
	        message.signer = object.signer ?? "";
	        return message;
	    },
	};
	function createBaseMsgConnectionOpenTryResponse() {
	    return {};
	}
	exports.MsgConnectionOpenTryResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgConnectionOpenTryResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgConnectionOpenTryResponse();
	        return message;
	    },
	};
	function createBaseMsgConnectionOpenAck() {
	    return {
	        connectionId: "",
	        counterpartyConnectionId: "",
	        version: undefined,
	        clientState: undefined,
	        proofHeight: undefined,
	        proofTry: new Uint8Array(),
	        proofClient: new Uint8Array(),
	        proofConsensus: new Uint8Array(),
	        consensusHeight: undefined,
	        signer: "",
	    };
	}
	exports.MsgConnectionOpenAck = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.connectionId !== "") {
	            writer.uint32(10).string(message.connectionId);
	        }
	        if (message.counterpartyConnectionId !== "") {
	            writer.uint32(18).string(message.counterpartyConnectionId);
	        }
	        if (message.version !== undefined) {
	            connection_1.Version.encode(message.version, writer.uint32(26).fork()).ldelim();
	        }
	        if (message.clientState !== undefined) {
	            any_1.Any.encode(message.clientState, writer.uint32(34).fork()).ldelim();
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(42).fork()).ldelim();
	        }
	        if (message.proofTry.length !== 0) {
	            writer.uint32(50).bytes(message.proofTry);
	        }
	        if (message.proofClient.length !== 0) {
	            writer.uint32(58).bytes(message.proofClient);
	        }
	        if (message.proofConsensus.length !== 0) {
	            writer.uint32(66).bytes(message.proofConsensus);
	        }
	        if (message.consensusHeight !== undefined) {
	            client_1.Height.encode(message.consensusHeight, writer.uint32(74).fork()).ldelim();
	        }
	        if (message.signer !== "") {
	            writer.uint32(82).string(message.signer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgConnectionOpenAck();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.connectionId = reader.string();
	                    break;
	                case 2:
	                    message.counterpartyConnectionId = reader.string();
	                    break;
	                case 3:
	                    message.version = connection_1.Version.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.clientState = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 5:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                case 6:
	                    message.proofTry = reader.bytes();
	                    break;
	                case 7:
	                    message.proofClient = reader.bytes();
	                    break;
	                case 8:
	                    message.proofConsensus = reader.bytes();
	                    break;
	                case 9:
	                    message.consensusHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                case 10:
	                    message.signer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            connectionId: (0, helpers_1.isSet)(object.connectionId) ? String(object.connectionId) : "",
	            counterpartyConnectionId: (0, helpers_1.isSet)(object.counterpartyConnectionId)
	                ? String(object.counterpartyConnectionId)
	                : "",
	            version: (0, helpers_1.isSet)(object.version) ? connection_1.Version.fromJSON(object.version) : undefined,
	            clientState: (0, helpers_1.isSet)(object.clientState) ? any_1.Any.fromJSON(object.clientState) : undefined,
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	            proofTry: (0, helpers_1.isSet)(object.proofTry) ? (0, helpers_1.bytesFromBase64)(object.proofTry) : new Uint8Array(),
	            proofClient: (0, helpers_1.isSet)(object.proofClient) ? (0, helpers_1.bytesFromBase64)(object.proofClient) : new Uint8Array(),
	            proofConsensus: (0, helpers_1.isSet)(object.proofConsensus)
	                ? (0, helpers_1.bytesFromBase64)(object.proofConsensus)
	                : new Uint8Array(),
	            consensusHeight: (0, helpers_1.isSet)(object.consensusHeight) ? client_1.Height.fromJSON(object.consensusHeight) : undefined,
	            signer: (0, helpers_1.isSet)(object.signer) ? String(object.signer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.connectionId !== undefined && (obj.connectionId = message.connectionId);
	        message.counterpartyConnectionId !== undefined &&
	            (obj.counterpartyConnectionId = message.counterpartyConnectionId);
	        message.version !== undefined &&
	            (obj.version = message.version ? connection_1.Version.toJSON(message.version) : undefined);
	        message.clientState !== undefined &&
	            (obj.clientState = message.clientState ? any_1.Any.toJSON(message.clientState) : undefined);
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        message.proofTry !== undefined &&
	            (obj.proofTry = (0, helpers_1.base64FromBytes)(message.proofTry !== undefined ? message.proofTry : new Uint8Array()));
	        message.proofClient !== undefined &&
	            (obj.proofClient = (0, helpers_1.base64FromBytes)(message.proofClient !== undefined ? message.proofClient : new Uint8Array()));
	        message.proofConsensus !== undefined &&
	            (obj.proofConsensus = (0, helpers_1.base64FromBytes)(message.proofConsensus !== undefined ? message.proofConsensus : new Uint8Array()));
	        message.consensusHeight !== undefined &&
	            (obj.consensusHeight = message.consensusHeight ? client_1.Height.toJSON(message.consensusHeight) : undefined);
	        message.signer !== undefined && (obj.signer = message.signer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgConnectionOpenAck();
	        message.connectionId = object.connectionId ?? "";
	        message.counterpartyConnectionId = object.counterpartyConnectionId ?? "";
	        message.version =
	            object.version !== undefined && object.version !== null
	                ? connection_1.Version.fromPartial(object.version)
	                : undefined;
	        message.clientState =
	            object.clientState !== undefined && object.clientState !== null
	                ? any_1.Any.fromPartial(object.clientState)
	                : undefined;
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        message.proofTry = object.proofTry ?? new Uint8Array();
	        message.proofClient = object.proofClient ?? new Uint8Array();
	        message.proofConsensus = object.proofConsensus ?? new Uint8Array();
	        message.consensusHeight =
	            object.consensusHeight !== undefined && object.consensusHeight !== null
	                ? client_1.Height.fromPartial(object.consensusHeight)
	                : undefined;
	        message.signer = object.signer ?? "";
	        return message;
	    },
	};
	function createBaseMsgConnectionOpenAckResponse() {
	    return {};
	}
	exports.MsgConnectionOpenAckResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgConnectionOpenAckResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgConnectionOpenAckResponse();
	        return message;
	    },
	};
	function createBaseMsgConnectionOpenConfirm() {
	    return {
	        connectionId: "",
	        proofAck: new Uint8Array(),
	        proofHeight: undefined,
	        signer: "",
	    };
	}
	exports.MsgConnectionOpenConfirm = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.connectionId !== "") {
	            writer.uint32(10).string(message.connectionId);
	        }
	        if (message.proofAck.length !== 0) {
	            writer.uint32(18).bytes(message.proofAck);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();
	        }
	        if (message.signer !== "") {
	            writer.uint32(34).string(message.signer);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgConnectionOpenConfirm();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.connectionId = reader.string();
	                    break;
	                case 2:
	                    message.proofAck = reader.bytes();
	                    break;
	                case 3:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.signer = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            connectionId: (0, helpers_1.isSet)(object.connectionId) ? String(object.connectionId) : "",
	            proofAck: (0, helpers_1.isSet)(object.proofAck) ? (0, helpers_1.bytesFromBase64)(object.proofAck) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	            signer: (0, helpers_1.isSet)(object.signer) ? String(object.signer) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.connectionId !== undefined && (obj.connectionId = message.connectionId);
	        message.proofAck !== undefined &&
	            (obj.proofAck = (0, helpers_1.base64FromBytes)(message.proofAck !== undefined ? message.proofAck : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        message.signer !== undefined && (obj.signer = message.signer);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgConnectionOpenConfirm();
	        message.connectionId = object.connectionId ?? "";
	        message.proofAck = object.proofAck ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        message.signer = object.signer ?? "";
	        return message;
	    },
	};
	function createBaseMsgConnectionOpenConfirmResponse() {
	    return {};
	}
	exports.MsgConnectionOpenConfirmResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgConnectionOpenConfirmResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgConnectionOpenConfirmResponse();
	        return message;
	    },
	};
	class MsgClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.ConnectionOpenInit = this.ConnectionOpenInit.bind(this);
	        this.ConnectionOpenTry = this.ConnectionOpenTry.bind(this);
	        this.ConnectionOpenAck = this.ConnectionOpenAck.bind(this);
	        this.ConnectionOpenConfirm = this.ConnectionOpenConfirm.bind(this);
	    }
	    ConnectionOpenInit(request) {
	        const data = exports.MsgConnectionOpenInit.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.connection.v1.Msg", "ConnectionOpenInit", data);
	        return promise.then((data) => exports.MsgConnectionOpenInitResponse.decode(new _m0.Reader(data)));
	    }
	    ConnectionOpenTry(request) {
	        const data = exports.MsgConnectionOpenTry.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.connection.v1.Msg", "ConnectionOpenTry", data);
	        return promise.then((data) => exports.MsgConnectionOpenTryResponse.decode(new _m0.Reader(data)));
	    }
	    ConnectionOpenAck(request) {
	        const data = exports.MsgConnectionOpenAck.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.connection.v1.Msg", "ConnectionOpenAck", data);
	        return promise.then((data) => exports.MsgConnectionOpenAckResponse.decode(new _m0.Reader(data)));
	    }
	    ConnectionOpenConfirm(request) {
	        const data = exports.MsgConnectionOpenConfirm.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.connection.v1.Msg", "ConnectionOpenConfirm", data);
	        return promise.then((data) => exports.MsgConnectionOpenConfirmResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.MsgClientImpl = MsgClientImpl;
	
} (tx$5));

Object.defineProperty(messages$2, "__esModule", { value: true });
messages$2.isMsgTransferEncodeObject = messages$2.ibcTypes = void 0;
const tx_1$4 = tx$8;
const tx_2$1 = tx$7;
const tx_3 = tx$6;
const tx_4 = tx$5;
messages$2.ibcTypes = [
    ["/ibc.applications.transfer.v1.MsgTransfer", tx_1$4.MsgTransfer],
    ["/ibc.core.channel.v1.MsgAcknowledgement", tx_2$1.MsgAcknowledgement],
    ["/ibc.core.channel.v1.MsgChannelCloseConfirm", tx_2$1.MsgChannelCloseConfirm],
    ["/ibc.core.channel.v1.MsgChannelCloseInit", tx_2$1.MsgChannelCloseInit],
    ["/ibc.core.channel.v1.MsgChannelOpenAck", tx_2$1.MsgChannelOpenAck],
    ["/ibc.core.channel.v1.MsgChannelOpenConfirm", tx_2$1.MsgChannelOpenConfirm],
    ["/ibc.core.channel.v1.MsgChannelOpenInit", tx_2$1.MsgChannelOpenInit],
    ["/ibc.core.channel.v1.MsgChannelOpenTry", tx_2$1.MsgChannelOpenTry],
    ["/ibc.core.channel.v1.MsgRecvPacket", tx_2$1.MsgRecvPacket],
    ["/ibc.core.channel.v1.MsgTimeout", tx_2$1.MsgTimeout],
    ["/ibc.core.channel.v1.MsgTimeoutOnClose", tx_2$1.MsgTimeoutOnClose],
    ["/ibc.core.client.v1.MsgCreateClient", tx_3.MsgCreateClient],
    ["/ibc.core.client.v1.MsgSubmitMisbehaviour", tx_3.MsgSubmitMisbehaviour],
    ["/ibc.core.client.v1.MsgUpdateClient", tx_3.MsgUpdateClient],
    ["/ibc.core.client.v1.MsgUpgradeClient", tx_3.MsgUpgradeClient],
    ["/ibc.core.connection.v1.MsgConnectionOpenAck", tx_4.MsgConnectionOpenAck],
    ["/ibc.core.connection.v1.MsgConnectionOpenConfirm", tx_4.MsgConnectionOpenConfirm],
    ["/ibc.core.connection.v1.MsgConnectionOpenInit", tx_4.MsgConnectionOpenInit],
    ["/ibc.core.connection.v1.MsgConnectionOpenTry", tx_4.MsgConnectionOpenTry],
];
function isMsgTransferEncodeObject(object) {
    return object.typeUrl === "/ibc.applications.transfer.v1.MsgTransfer";
}
messages$2.isMsgTransferEncodeObject = isMsgTransferEncodeObject;

var queries$4 = {};

var query$6 = {};

var transfer = {};

var __createBinding$9 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$9 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$9 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$9(result, mod, k);
    __setModuleDefault$9(result, mod);
    return result;
};
Object.defineProperty(transfer, "__esModule", { value: true });
transfer.Params = transfer.DenomTrace = transfer.protobufPackage = void 0;
/* eslint-disable */
const _m0$5 = __importStar$9(minimal);
const helpers_1$5 = helpers;
transfer.protobufPackage = "ibc.applications.transfer.v1";
function createBaseDenomTrace() {
    return {
        path: "",
        baseDenom: "",
    };
}
transfer.DenomTrace = {
    encode(message, writer = _m0$5.Writer.create()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        if (message.baseDenom !== "") {
            writer.uint32(18).string(message.baseDenom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$5.Reader ? input : new _m0$5.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDenomTrace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.path = reader.string();
                    break;
                case 2:
                    message.baseDenom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            path: (0, helpers_1$5.isSet)(object.path) ? String(object.path) : "",
            baseDenom: (0, helpers_1$5.isSet)(object.baseDenom) ? String(object.baseDenom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.path !== undefined && (obj.path = message.path);
        message.baseDenom !== undefined && (obj.baseDenom = message.baseDenom);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDenomTrace();
        message.path = object.path ?? "";
        message.baseDenom = object.baseDenom ?? "";
        return message;
    },
};
function createBaseParams$5() {
    return {
        sendEnabled: false,
        receiveEnabled: false,
    };
}
transfer.Params = {
    encode(message, writer = _m0$5.Writer.create()) {
        if (message.sendEnabled === true) {
            writer.uint32(8).bool(message.sendEnabled);
        }
        if (message.receiveEnabled === true) {
            writer.uint32(16).bool(message.receiveEnabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$5.Reader ? input : new _m0$5.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams$5();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sendEnabled = reader.bool();
                    break;
                case 2:
                    message.receiveEnabled = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sendEnabled: (0, helpers_1$5.isSet)(object.sendEnabled) ? Boolean(object.sendEnabled) : false,
            receiveEnabled: (0, helpers_1$5.isSet)(object.receiveEnabled) ? Boolean(object.receiveEnabled) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.sendEnabled !== undefined && (obj.sendEnabled = message.sendEnabled);
        message.receiveEnabled !== undefined && (obj.receiveEnabled = message.receiveEnabled);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseParams$5();
        message.sendEnabled = object.sendEnabled ?? false;
        message.receiveEnabled = object.receiveEnabled ?? false;
        return message;
    },
};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.QueryClientImpl = exports.QueryEscrowAddressResponse = exports.QueryEscrowAddressRequest = exports.QueryDenomHashResponse = exports.QueryDenomHashRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryDenomTracesResponse = exports.QueryDenomTracesRequest = exports.QueryDenomTraceResponse = exports.QueryDenomTraceRequest = exports.protobufPackage = void 0;
	/* eslint-disable */
	const pagination_1 = pagination;
	const transfer_1 = transfer;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "ibc.applications.transfer.v1";
	function createBaseQueryDenomTraceRequest() {
	    return {
	        hash: "",
	    };
	}
	exports.QueryDenomTraceRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.hash !== "") {
	            writer.uint32(10).string(message.hash);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDenomTraceRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.hash = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            hash: (0, helpers_1.isSet)(object.hash) ? String(object.hash) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.hash !== undefined && (obj.hash = message.hash);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDenomTraceRequest();
	        message.hash = object.hash ?? "";
	        return message;
	    },
	};
	function createBaseQueryDenomTraceResponse() {
	    return {
	        denomTrace: undefined,
	    };
	}
	exports.QueryDenomTraceResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.denomTrace !== undefined) {
	            transfer_1.DenomTrace.encode(message.denomTrace, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDenomTraceResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.denomTrace = transfer_1.DenomTrace.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            denomTrace: (0, helpers_1.isSet)(object.denomTrace) ? transfer_1.DenomTrace.fromJSON(object.denomTrace) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.denomTrace !== undefined &&
	            (obj.denomTrace = message.denomTrace ? transfer_1.DenomTrace.toJSON(message.denomTrace) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDenomTraceResponse();
	        message.denomTrace =
	            object.denomTrace !== undefined && object.denomTrace !== null
	                ? transfer_1.DenomTrace.fromPartial(object.denomTrace)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryDenomTracesRequest() {
	    return {
	        pagination: undefined,
	    };
	}
	exports.QueryDenomTracesRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDenomTracesRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDenomTracesRequest();
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryDenomTracesResponse() {
	    return {
	        denomTraces: [],
	        pagination: undefined,
	    };
	}
	exports.QueryDenomTracesResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.denomTraces) {
	            transfer_1.DenomTrace.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDenomTracesResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.denomTraces.push(transfer_1.DenomTrace.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            denomTraces: Array.isArray(object?.denomTraces)
	                ? object.denomTraces.map((e) => transfer_1.DenomTrace.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.denomTraces) {
	            obj.denomTraces = message.denomTraces.map((e) => (e ? transfer_1.DenomTrace.toJSON(e) : undefined));
	        }
	        else {
	            obj.denomTraces = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDenomTracesResponse();
	        message.denomTraces = object.denomTraces?.map((e) => transfer_1.DenomTrace.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryParamsRequest() {
	    return {};
	}
	exports.QueryParamsRequest = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryParamsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseQueryParamsRequest();
	        return message;
	    },
	};
	function createBaseQueryParamsResponse() {
	    return {
	        params: undefined,
	    };
	}
	exports.QueryParamsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.params !== undefined) {
	            transfer_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryParamsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.params = transfer_1.Params.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            params: (0, helpers_1.isSet)(object.params) ? transfer_1.Params.fromJSON(object.params) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.params !== undefined && (obj.params = message.params ? transfer_1.Params.toJSON(message.params) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryParamsResponse();
	        message.params =
	            object.params !== undefined && object.params !== null ? transfer_1.Params.fromPartial(object.params) : undefined;
	        return message;
	    },
	};
	function createBaseQueryDenomHashRequest() {
	    return {
	        trace: "",
	    };
	}
	exports.QueryDenomHashRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.trace !== "") {
	            writer.uint32(10).string(message.trace);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDenomHashRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.trace = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            trace: (0, helpers_1.isSet)(object.trace) ? String(object.trace) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.trace !== undefined && (obj.trace = message.trace);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDenomHashRequest();
	        message.trace = object.trace ?? "";
	        return message;
	    },
	};
	function createBaseQueryDenomHashResponse() {
	    return {
	        hash: "",
	    };
	}
	exports.QueryDenomHashResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.hash !== "") {
	            writer.uint32(10).string(message.hash);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDenomHashResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.hash = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            hash: (0, helpers_1.isSet)(object.hash) ? String(object.hash) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.hash !== undefined && (obj.hash = message.hash);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDenomHashResponse();
	        message.hash = object.hash ?? "";
	        return message;
	    },
	};
	function createBaseQueryEscrowAddressRequest() {
	    return {
	        portId: "",
	        channelId: "",
	    };
	}
	exports.QueryEscrowAddressRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryEscrowAddressRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryEscrowAddressRequest();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        return message;
	    },
	};
	function createBaseQueryEscrowAddressResponse() {
	    return {
	        escrowAddress: "",
	    };
	}
	exports.QueryEscrowAddressResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.escrowAddress !== "") {
	            writer.uint32(10).string(message.escrowAddress);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryEscrowAddressResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.escrowAddress = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            escrowAddress: (0, helpers_1.isSet)(object.escrowAddress) ? String(object.escrowAddress) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.escrowAddress !== undefined && (obj.escrowAddress = message.escrowAddress);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryEscrowAddressResponse();
	        message.escrowAddress = object.escrowAddress ?? "";
	        return message;
	    },
	};
	class QueryClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.DenomTrace = this.DenomTrace.bind(this);
	        this.DenomTraces = this.DenomTraces.bind(this);
	        this.Params = this.Params.bind(this);
	        this.DenomHash = this.DenomHash.bind(this);
	        this.EscrowAddress = this.EscrowAddress.bind(this);
	    }
	    DenomTrace(request) {
	        const data = exports.QueryDenomTraceRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.applications.transfer.v1.Query", "DenomTrace", data);
	        return promise.then((data) => exports.QueryDenomTraceResponse.decode(new _m0.Reader(data)));
	    }
	    DenomTraces(request = {
	        pagination: undefined,
	    }) {
	        const data = exports.QueryDenomTracesRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.applications.transfer.v1.Query", "DenomTraces", data);
	        return promise.then((data) => exports.QueryDenomTracesResponse.decode(new _m0.Reader(data)));
	    }
	    Params(request = {}) {
	        const data = exports.QueryParamsRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.applications.transfer.v1.Query", "Params", data);
	        return promise.then((data) => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
	    }
	    DenomHash(request) {
	        const data = exports.QueryDenomHashRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.applications.transfer.v1.Query", "DenomHash", data);
	        return promise.then((data) => exports.QueryDenomHashResponse.decode(new _m0.Reader(data)));
	    }
	    EscrowAddress(request) {
	        const data = exports.QueryEscrowAddressRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.applications.transfer.v1.Query", "EscrowAddress", data);
	        return promise.then((data) => exports.QueryEscrowAddressResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.QueryClientImpl = QueryClientImpl;
	
} (query$6));

var query$5 = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.QueryClientImpl = exports.QueryNextSequenceReceiveResponse = exports.QueryNextSequenceReceiveRequest = exports.QueryUnreceivedAcksResponse = exports.QueryUnreceivedAcksRequest = exports.QueryUnreceivedPacketsResponse = exports.QueryUnreceivedPacketsRequest = exports.QueryPacketAcknowledgementsResponse = exports.QueryPacketAcknowledgementsRequest = exports.QueryPacketAcknowledgementResponse = exports.QueryPacketAcknowledgementRequest = exports.QueryPacketReceiptResponse = exports.QueryPacketReceiptRequest = exports.QueryPacketCommitmentsResponse = exports.QueryPacketCommitmentsRequest = exports.QueryPacketCommitmentResponse = exports.QueryPacketCommitmentRequest = exports.QueryChannelConsensusStateResponse = exports.QueryChannelConsensusStateRequest = exports.QueryChannelClientStateResponse = exports.QueryChannelClientStateRequest = exports.QueryConnectionChannelsResponse = exports.QueryConnectionChannelsRequest = exports.QueryChannelsResponse = exports.QueryChannelsRequest = exports.QueryChannelResponse = exports.QueryChannelRequest = exports.protobufPackage = void 0;
	/* eslint-disable */
	const pagination_1 = pagination;
	const channel_1 = channel;
	const client_1 = client;
	const any_1 = any;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "ibc.core.channel.v1";
	function createBaseQueryChannelRequest() {
	    return {
	        portId: "",
	        channelId: "",
	    };
	}
	exports.QueryChannelRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryChannelRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryChannelRequest();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        return message;
	    },
	};
	function createBaseQueryChannelResponse() {
	    return {
	        channel: undefined,
	        proof: new Uint8Array(),
	        proofHeight: undefined,
	    };
	}
	exports.QueryChannelResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.channel !== undefined) {
	            channel_1.Channel.encode(message.channel, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.proof.length !== 0) {
	            writer.uint32(18).bytes(message.proof);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryChannelResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.channel = channel_1.Channel.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.proof = reader.bytes();
	                    break;
	                case 3:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            channel: (0, helpers_1.isSet)(object.channel) ? channel_1.Channel.fromJSON(object.channel) : undefined,
	            proof: (0, helpers_1.isSet)(object.proof) ? (0, helpers_1.bytesFromBase64)(object.proof) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.channel !== undefined &&
	            (obj.channel = message.channel ? channel_1.Channel.toJSON(message.channel) : undefined);
	        message.proof !== undefined &&
	            (obj.proof = (0, helpers_1.base64FromBytes)(message.proof !== undefined ? message.proof : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryChannelResponse();
	        message.channel =
	            object.channel !== undefined && object.channel !== null
	                ? channel_1.Channel.fromPartial(object.channel)
	                : undefined;
	        message.proof = object.proof ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryChannelsRequest() {
	    return {
	        pagination: undefined,
	    };
	}
	exports.QueryChannelsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryChannelsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryChannelsRequest();
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryChannelsResponse() {
	    return {
	        channels: [],
	        pagination: undefined,
	        height: undefined,
	    };
	}
	exports.QueryChannelsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.channels) {
	            channel_1.IdentifiedChannel.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.height !== undefined) {
	            client_1.Height.encode(message.height, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryChannelsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.channels.push(channel_1.IdentifiedChannel.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.height = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            channels: Array.isArray(object?.channels)
	                ? object.channels.map((e) => channel_1.IdentifiedChannel.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	            height: (0, helpers_1.isSet)(object.height) ? client_1.Height.fromJSON(object.height) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.channels) {
	            obj.channels = message.channels.map((e) => (e ? channel_1.IdentifiedChannel.toJSON(e) : undefined));
	        }
	        else {
	            obj.channels = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryChannelsResponse();
	        message.channels = object.channels?.map((e) => channel_1.IdentifiedChannel.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        message.height =
	            object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;
	        return message;
	    },
	};
	function createBaseQueryConnectionChannelsRequest() {
	    return {
	        connection: "",
	        pagination: undefined,
	    };
	}
	exports.QueryConnectionChannelsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.connection !== "") {
	            writer.uint32(10).string(message.connection);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryConnectionChannelsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.connection = reader.string();
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            connection: (0, helpers_1.isSet)(object.connection) ? String(object.connection) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.connection !== undefined && (obj.connection = message.connection);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryConnectionChannelsRequest();
	        message.connection = object.connection ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryConnectionChannelsResponse() {
	    return {
	        channels: [],
	        pagination: undefined,
	        height: undefined,
	    };
	}
	exports.QueryConnectionChannelsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.channels) {
	            channel_1.IdentifiedChannel.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.height !== undefined) {
	            client_1.Height.encode(message.height, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryConnectionChannelsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.channels.push(channel_1.IdentifiedChannel.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.height = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            channels: Array.isArray(object?.channels)
	                ? object.channels.map((e) => channel_1.IdentifiedChannel.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	            height: (0, helpers_1.isSet)(object.height) ? client_1.Height.fromJSON(object.height) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.channels) {
	            obj.channels = message.channels.map((e) => (e ? channel_1.IdentifiedChannel.toJSON(e) : undefined));
	        }
	        else {
	            obj.channels = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryConnectionChannelsResponse();
	        message.channels = object.channels?.map((e) => channel_1.IdentifiedChannel.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        message.height =
	            object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;
	        return message;
	    },
	};
	function createBaseQueryChannelClientStateRequest() {
	    return {
	        portId: "",
	        channelId: "",
	    };
	}
	exports.QueryChannelClientStateRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryChannelClientStateRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryChannelClientStateRequest();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        return message;
	    },
	};
	function createBaseQueryChannelClientStateResponse() {
	    return {
	        identifiedClientState: undefined,
	        proof: new Uint8Array(),
	        proofHeight: undefined,
	    };
	}
	exports.QueryChannelClientStateResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.identifiedClientState !== undefined) {
	            client_1.IdentifiedClientState.encode(message.identifiedClientState, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.proof.length !== 0) {
	            writer.uint32(18).bytes(message.proof);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryChannelClientStateResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.identifiedClientState = client_1.IdentifiedClientState.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.proof = reader.bytes();
	                    break;
	                case 3:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            identifiedClientState: (0, helpers_1.isSet)(object.identifiedClientState)
	                ? client_1.IdentifiedClientState.fromJSON(object.identifiedClientState)
	                : undefined,
	            proof: (0, helpers_1.isSet)(object.proof) ? (0, helpers_1.bytesFromBase64)(object.proof) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.identifiedClientState !== undefined &&
	            (obj.identifiedClientState = message.identifiedClientState
	                ? client_1.IdentifiedClientState.toJSON(message.identifiedClientState)
	                : undefined);
	        message.proof !== undefined &&
	            (obj.proof = (0, helpers_1.base64FromBytes)(message.proof !== undefined ? message.proof : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryChannelClientStateResponse();
	        message.identifiedClientState =
	            object.identifiedClientState !== undefined && object.identifiedClientState !== null
	                ? client_1.IdentifiedClientState.fromPartial(object.identifiedClientState)
	                : undefined;
	        message.proof = object.proof ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryChannelConsensusStateRequest() {
	    return {
	        portId: "",
	        channelId: "",
	        revisionNumber: helpers_1.Long.UZERO,
	        revisionHeight: helpers_1.Long.UZERO,
	    };
	}
	exports.QueryChannelConsensusStateRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        if (!message.revisionNumber.isZero()) {
	            writer.uint32(24).uint64(message.revisionNumber);
	        }
	        if (!message.revisionHeight.isZero()) {
	            writer.uint32(32).uint64(message.revisionHeight);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryChannelConsensusStateRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                case 3:
	                    message.revisionNumber = reader.uint64();
	                    break;
	                case 4:
	                    message.revisionHeight = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	            revisionNumber: (0, helpers_1.isSet)(object.revisionNumber) ? helpers_1.Long.fromValue(object.revisionNumber) : helpers_1.Long.UZERO,
	            revisionHeight: (0, helpers_1.isSet)(object.revisionHeight) ? helpers_1.Long.fromValue(object.revisionHeight) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        message.revisionNumber !== undefined &&
	            (obj.revisionNumber = (message.revisionNumber || helpers_1.Long.UZERO).toString());
	        message.revisionHeight !== undefined &&
	            (obj.revisionHeight = (message.revisionHeight || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryChannelConsensusStateRequest();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        message.revisionNumber =
	            object.revisionNumber !== undefined && object.revisionNumber !== null
	                ? helpers_1.Long.fromValue(object.revisionNumber)
	                : helpers_1.Long.UZERO;
	        message.revisionHeight =
	            object.revisionHeight !== undefined && object.revisionHeight !== null
	                ? helpers_1.Long.fromValue(object.revisionHeight)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseQueryChannelConsensusStateResponse() {
	    return {
	        consensusState: undefined,
	        clientId: "",
	        proof: new Uint8Array(),
	        proofHeight: undefined,
	    };
	}
	exports.QueryChannelConsensusStateResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.consensusState !== undefined) {
	            any_1.Any.encode(message.consensusState, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.clientId !== "") {
	            writer.uint32(18).string(message.clientId);
	        }
	        if (message.proof.length !== 0) {
	            writer.uint32(26).bytes(message.proof);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryChannelConsensusStateResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.consensusState = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.clientId = reader.string();
	                    break;
	                case 3:
	                    message.proof = reader.bytes();
	                    break;
	                case 4:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            consensusState: (0, helpers_1.isSet)(object.consensusState) ? any_1.Any.fromJSON(object.consensusState) : undefined,
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	            proof: (0, helpers_1.isSet)(object.proof) ? (0, helpers_1.bytesFromBase64)(object.proof) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.consensusState !== undefined &&
	            (obj.consensusState = message.consensusState ? any_1.Any.toJSON(message.consensusState) : undefined);
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        message.proof !== undefined &&
	            (obj.proof = (0, helpers_1.base64FromBytes)(message.proof !== undefined ? message.proof : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryChannelConsensusStateResponse();
	        message.consensusState =
	            object.consensusState !== undefined && object.consensusState !== null
	                ? any_1.Any.fromPartial(object.consensusState)
	                : undefined;
	        message.clientId = object.clientId ?? "";
	        message.proof = object.proof ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryPacketCommitmentRequest() {
	    return {
	        portId: "",
	        channelId: "",
	        sequence: helpers_1.Long.UZERO,
	    };
	}
	exports.QueryPacketCommitmentRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        if (!message.sequence.isZero()) {
	            writer.uint32(24).uint64(message.sequence);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryPacketCommitmentRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                case 3:
	                    message.sequence = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	            sequence: (0, helpers_1.isSet)(object.sequence) ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        message.sequence !== undefined && (obj.sequence = (message.sequence || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryPacketCommitmentRequest();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        message.sequence =
	            object.sequence !== undefined && object.sequence !== null
	                ? helpers_1.Long.fromValue(object.sequence)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseQueryPacketCommitmentResponse() {
	    return {
	        commitment: new Uint8Array(),
	        proof: new Uint8Array(),
	        proofHeight: undefined,
	    };
	}
	exports.QueryPacketCommitmentResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.commitment.length !== 0) {
	            writer.uint32(10).bytes(message.commitment);
	        }
	        if (message.proof.length !== 0) {
	            writer.uint32(18).bytes(message.proof);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryPacketCommitmentResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.commitment = reader.bytes();
	                    break;
	                case 2:
	                    message.proof = reader.bytes();
	                    break;
	                case 3:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            commitment: (0, helpers_1.isSet)(object.commitment) ? (0, helpers_1.bytesFromBase64)(object.commitment) : new Uint8Array(),
	            proof: (0, helpers_1.isSet)(object.proof) ? (0, helpers_1.bytesFromBase64)(object.proof) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.commitment !== undefined &&
	            (obj.commitment = (0, helpers_1.base64FromBytes)(message.commitment !== undefined ? message.commitment : new Uint8Array()));
	        message.proof !== undefined &&
	            (obj.proof = (0, helpers_1.base64FromBytes)(message.proof !== undefined ? message.proof : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryPacketCommitmentResponse();
	        message.commitment = object.commitment ?? new Uint8Array();
	        message.proof = object.proof ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryPacketCommitmentsRequest() {
	    return {
	        portId: "",
	        channelId: "",
	        pagination: undefined,
	    };
	}
	exports.QueryPacketCommitmentsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryPacketCommitmentsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                case 3:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryPacketCommitmentsRequest();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryPacketCommitmentsResponse() {
	    return {
	        commitments: [],
	        pagination: undefined,
	        height: undefined,
	    };
	}
	exports.QueryPacketCommitmentsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.commitments) {
	            channel_1.PacketState.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.height !== undefined) {
	            client_1.Height.encode(message.height, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryPacketCommitmentsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.commitments.push(channel_1.PacketState.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.height = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            commitments: Array.isArray(object?.commitments)
	                ? object.commitments.map((e) => channel_1.PacketState.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	            height: (0, helpers_1.isSet)(object.height) ? client_1.Height.fromJSON(object.height) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.commitments) {
	            obj.commitments = message.commitments.map((e) => (e ? channel_1.PacketState.toJSON(e) : undefined));
	        }
	        else {
	            obj.commitments = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryPacketCommitmentsResponse();
	        message.commitments = object.commitments?.map((e) => channel_1.PacketState.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        message.height =
	            object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;
	        return message;
	    },
	};
	function createBaseQueryPacketReceiptRequest() {
	    return {
	        portId: "",
	        channelId: "",
	        sequence: helpers_1.Long.UZERO,
	    };
	}
	exports.QueryPacketReceiptRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        if (!message.sequence.isZero()) {
	            writer.uint32(24).uint64(message.sequence);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryPacketReceiptRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                case 3:
	                    message.sequence = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	            sequence: (0, helpers_1.isSet)(object.sequence) ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        message.sequence !== undefined && (obj.sequence = (message.sequence || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryPacketReceiptRequest();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        message.sequence =
	            object.sequence !== undefined && object.sequence !== null
	                ? helpers_1.Long.fromValue(object.sequence)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseQueryPacketReceiptResponse() {
	    return {
	        received: false,
	        proof: new Uint8Array(),
	        proofHeight: undefined,
	    };
	}
	exports.QueryPacketReceiptResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.received === true) {
	            writer.uint32(16).bool(message.received);
	        }
	        if (message.proof.length !== 0) {
	            writer.uint32(26).bytes(message.proof);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryPacketReceiptResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 2:
	                    message.received = reader.bool();
	                    break;
	                case 3:
	                    message.proof = reader.bytes();
	                    break;
	                case 4:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            received: (0, helpers_1.isSet)(object.received) ? Boolean(object.received) : false,
	            proof: (0, helpers_1.isSet)(object.proof) ? (0, helpers_1.bytesFromBase64)(object.proof) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.received !== undefined && (obj.received = message.received);
	        message.proof !== undefined &&
	            (obj.proof = (0, helpers_1.base64FromBytes)(message.proof !== undefined ? message.proof : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryPacketReceiptResponse();
	        message.received = object.received ?? false;
	        message.proof = object.proof ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryPacketAcknowledgementRequest() {
	    return {
	        portId: "",
	        channelId: "",
	        sequence: helpers_1.Long.UZERO,
	    };
	}
	exports.QueryPacketAcknowledgementRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        if (!message.sequence.isZero()) {
	            writer.uint32(24).uint64(message.sequence);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryPacketAcknowledgementRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                case 3:
	                    message.sequence = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	            sequence: (0, helpers_1.isSet)(object.sequence) ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        message.sequence !== undefined && (obj.sequence = (message.sequence || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryPacketAcknowledgementRequest();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        message.sequence =
	            object.sequence !== undefined && object.sequence !== null
	                ? helpers_1.Long.fromValue(object.sequence)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseQueryPacketAcknowledgementResponse() {
	    return {
	        acknowledgement: new Uint8Array(),
	        proof: new Uint8Array(),
	        proofHeight: undefined,
	    };
	}
	exports.QueryPacketAcknowledgementResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.acknowledgement.length !== 0) {
	            writer.uint32(10).bytes(message.acknowledgement);
	        }
	        if (message.proof.length !== 0) {
	            writer.uint32(18).bytes(message.proof);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryPacketAcknowledgementResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.acknowledgement = reader.bytes();
	                    break;
	                case 2:
	                    message.proof = reader.bytes();
	                    break;
	                case 3:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            acknowledgement: (0, helpers_1.isSet)(object.acknowledgement)
	                ? (0, helpers_1.bytesFromBase64)(object.acknowledgement)
	                : new Uint8Array(),
	            proof: (0, helpers_1.isSet)(object.proof) ? (0, helpers_1.bytesFromBase64)(object.proof) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.acknowledgement !== undefined &&
	            (obj.acknowledgement = (0, helpers_1.base64FromBytes)(message.acknowledgement !== undefined ? message.acknowledgement : new Uint8Array()));
	        message.proof !== undefined &&
	            (obj.proof = (0, helpers_1.base64FromBytes)(message.proof !== undefined ? message.proof : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryPacketAcknowledgementResponse();
	        message.acknowledgement = object.acknowledgement ?? new Uint8Array();
	        message.proof = object.proof ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryPacketAcknowledgementsRequest() {
	    return {
	        portId: "",
	        channelId: "",
	        pagination: undefined,
	        packetCommitmentSequences: [],
	    };
	}
	exports.QueryPacketAcknowledgementsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(26).fork()).ldelim();
	        }
	        writer.uint32(34).fork();
	        for (const v of message.packetCommitmentSequences) {
	            writer.uint64(v);
	        }
	        writer.ldelim();
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryPacketAcknowledgementsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                case 3:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    if ((tag & 7) === 2) {
	                        const end2 = reader.uint32() + reader.pos;
	                        while (reader.pos < end2) {
	                            message.packetCommitmentSequences.push(reader.uint64());
	                        }
	                    }
	                    else {
	                        message.packetCommitmentSequences.push(reader.uint64());
	                    }
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	            packetCommitmentSequences: Array.isArray(object?.packetCommitmentSequences)
	                ? object.packetCommitmentSequences.map((e) => helpers_1.Long.fromValue(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        if (message.packetCommitmentSequences) {
	            obj.packetCommitmentSequences = message.packetCommitmentSequences.map((e) => (e || helpers_1.Long.UZERO).toString());
	        }
	        else {
	            obj.packetCommitmentSequences = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryPacketAcknowledgementsRequest();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        message.packetCommitmentSequences = object.packetCommitmentSequences?.map((e) => helpers_1.Long.fromValue(e)) || [];
	        return message;
	    },
	};
	function createBaseQueryPacketAcknowledgementsResponse() {
	    return {
	        acknowledgements: [],
	        pagination: undefined,
	        height: undefined,
	    };
	}
	exports.QueryPacketAcknowledgementsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.acknowledgements) {
	            channel_1.PacketState.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.height !== undefined) {
	            client_1.Height.encode(message.height, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryPacketAcknowledgementsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.acknowledgements.push(channel_1.PacketState.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.height = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            acknowledgements: Array.isArray(object?.acknowledgements)
	                ? object.acknowledgements.map((e) => channel_1.PacketState.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	            height: (0, helpers_1.isSet)(object.height) ? client_1.Height.fromJSON(object.height) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.acknowledgements) {
	            obj.acknowledgements = message.acknowledgements.map((e) => (e ? channel_1.PacketState.toJSON(e) : undefined));
	        }
	        else {
	            obj.acknowledgements = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryPacketAcknowledgementsResponse();
	        message.acknowledgements = object.acknowledgements?.map((e) => channel_1.PacketState.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        message.height =
	            object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;
	        return message;
	    },
	};
	function createBaseQueryUnreceivedPacketsRequest() {
	    return {
	        portId: "",
	        channelId: "",
	        packetCommitmentSequences: [],
	    };
	}
	exports.QueryUnreceivedPacketsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        writer.uint32(26).fork();
	        for (const v of message.packetCommitmentSequences) {
	            writer.uint64(v);
	        }
	        writer.ldelim();
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryUnreceivedPacketsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                case 3:
	                    if ((tag & 7) === 2) {
	                        const end2 = reader.uint32() + reader.pos;
	                        while (reader.pos < end2) {
	                            message.packetCommitmentSequences.push(reader.uint64());
	                        }
	                    }
	                    else {
	                        message.packetCommitmentSequences.push(reader.uint64());
	                    }
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	            packetCommitmentSequences: Array.isArray(object?.packetCommitmentSequences)
	                ? object.packetCommitmentSequences.map((e) => helpers_1.Long.fromValue(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        if (message.packetCommitmentSequences) {
	            obj.packetCommitmentSequences = message.packetCommitmentSequences.map((e) => (e || helpers_1.Long.UZERO).toString());
	        }
	        else {
	            obj.packetCommitmentSequences = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryUnreceivedPacketsRequest();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        message.packetCommitmentSequences = object.packetCommitmentSequences?.map((e) => helpers_1.Long.fromValue(e)) || [];
	        return message;
	    },
	};
	function createBaseQueryUnreceivedPacketsResponse() {
	    return {
	        sequences: [],
	        height: undefined,
	    };
	}
	exports.QueryUnreceivedPacketsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        writer.uint32(10).fork();
	        for (const v of message.sequences) {
	            writer.uint64(v);
	        }
	        writer.ldelim();
	        if (message.height !== undefined) {
	            client_1.Height.encode(message.height, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryUnreceivedPacketsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    if ((tag & 7) === 2) {
	                        const end2 = reader.uint32() + reader.pos;
	                        while (reader.pos < end2) {
	                            message.sequences.push(reader.uint64());
	                        }
	                    }
	                    else {
	                        message.sequences.push(reader.uint64());
	                    }
	                    break;
	                case 2:
	                    message.height = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            sequences: Array.isArray(object?.sequences) ? object.sequences.map((e) => helpers_1.Long.fromValue(e)) : [],
	            height: (0, helpers_1.isSet)(object.height) ? client_1.Height.fromJSON(object.height) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.sequences) {
	            obj.sequences = message.sequences.map((e) => (e || helpers_1.Long.UZERO).toString());
	        }
	        else {
	            obj.sequences = [];
	        }
	        message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryUnreceivedPacketsResponse();
	        message.sequences = object.sequences?.map((e) => helpers_1.Long.fromValue(e)) || [];
	        message.height =
	            object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;
	        return message;
	    },
	};
	function createBaseQueryUnreceivedAcksRequest() {
	    return {
	        portId: "",
	        channelId: "",
	        packetAckSequences: [],
	    };
	}
	exports.QueryUnreceivedAcksRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        writer.uint32(26).fork();
	        for (const v of message.packetAckSequences) {
	            writer.uint64(v);
	        }
	        writer.ldelim();
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryUnreceivedAcksRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                case 3:
	                    if ((tag & 7) === 2) {
	                        const end2 = reader.uint32() + reader.pos;
	                        while (reader.pos < end2) {
	                            message.packetAckSequences.push(reader.uint64());
	                        }
	                    }
	                    else {
	                        message.packetAckSequences.push(reader.uint64());
	                    }
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	            packetAckSequences: Array.isArray(object?.packetAckSequences)
	                ? object.packetAckSequences.map((e) => helpers_1.Long.fromValue(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        if (message.packetAckSequences) {
	            obj.packetAckSequences = message.packetAckSequences.map((e) => (e || helpers_1.Long.UZERO).toString());
	        }
	        else {
	            obj.packetAckSequences = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryUnreceivedAcksRequest();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        message.packetAckSequences = object.packetAckSequences?.map((e) => helpers_1.Long.fromValue(e)) || [];
	        return message;
	    },
	};
	function createBaseQueryUnreceivedAcksResponse() {
	    return {
	        sequences: [],
	        height: undefined,
	    };
	}
	exports.QueryUnreceivedAcksResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        writer.uint32(10).fork();
	        for (const v of message.sequences) {
	            writer.uint64(v);
	        }
	        writer.ldelim();
	        if (message.height !== undefined) {
	            client_1.Height.encode(message.height, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryUnreceivedAcksResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    if ((tag & 7) === 2) {
	                        const end2 = reader.uint32() + reader.pos;
	                        while (reader.pos < end2) {
	                            message.sequences.push(reader.uint64());
	                        }
	                    }
	                    else {
	                        message.sequences.push(reader.uint64());
	                    }
	                    break;
	                case 2:
	                    message.height = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            sequences: Array.isArray(object?.sequences) ? object.sequences.map((e) => helpers_1.Long.fromValue(e)) : [],
	            height: (0, helpers_1.isSet)(object.height) ? client_1.Height.fromJSON(object.height) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.sequences) {
	            obj.sequences = message.sequences.map((e) => (e || helpers_1.Long.UZERO).toString());
	        }
	        else {
	            obj.sequences = [];
	        }
	        message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryUnreceivedAcksResponse();
	        message.sequences = object.sequences?.map((e) => helpers_1.Long.fromValue(e)) || [];
	        message.height =
	            object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;
	        return message;
	    },
	};
	function createBaseQueryNextSequenceReceiveRequest() {
	    return {
	        portId: "",
	        channelId: "",
	    };
	}
	exports.QueryNextSequenceReceiveRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.portId !== "") {
	            writer.uint32(10).string(message.portId);
	        }
	        if (message.channelId !== "") {
	            writer.uint32(18).string(message.channelId);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryNextSequenceReceiveRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.portId = reader.string();
	                    break;
	                case 2:
	                    message.channelId = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            portId: (0, helpers_1.isSet)(object.portId) ? String(object.portId) : "",
	            channelId: (0, helpers_1.isSet)(object.channelId) ? String(object.channelId) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.portId !== undefined && (obj.portId = message.portId);
	        message.channelId !== undefined && (obj.channelId = message.channelId);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryNextSequenceReceiveRequest();
	        message.portId = object.portId ?? "";
	        message.channelId = object.channelId ?? "";
	        return message;
	    },
	};
	function createBaseQueryNextSequenceReceiveResponse() {
	    return {
	        nextSequenceReceive: helpers_1.Long.UZERO,
	        proof: new Uint8Array(),
	        proofHeight: undefined,
	    };
	}
	exports.QueryNextSequenceReceiveResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.nextSequenceReceive.isZero()) {
	            writer.uint32(8).uint64(message.nextSequenceReceive);
	        }
	        if (message.proof.length !== 0) {
	            writer.uint32(18).bytes(message.proof);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryNextSequenceReceiveResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.nextSequenceReceive = reader.uint64();
	                    break;
	                case 2:
	                    message.proof = reader.bytes();
	                    break;
	                case 3:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            nextSequenceReceive: (0, helpers_1.isSet)(object.nextSequenceReceive)
	                ? helpers_1.Long.fromValue(object.nextSequenceReceive)
	                : helpers_1.Long.UZERO,
	            proof: (0, helpers_1.isSet)(object.proof) ? (0, helpers_1.bytesFromBase64)(object.proof) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.nextSequenceReceive !== undefined &&
	            (obj.nextSequenceReceive = (message.nextSequenceReceive || helpers_1.Long.UZERO).toString());
	        message.proof !== undefined &&
	            (obj.proof = (0, helpers_1.base64FromBytes)(message.proof !== undefined ? message.proof : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryNextSequenceReceiveResponse();
	        message.nextSequenceReceive =
	            object.nextSequenceReceive !== undefined && object.nextSequenceReceive !== null
	                ? helpers_1.Long.fromValue(object.nextSequenceReceive)
	                : helpers_1.Long.UZERO;
	        message.proof = object.proof ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        return message;
	    },
	};
	class QueryClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.Channel = this.Channel.bind(this);
	        this.Channels = this.Channels.bind(this);
	        this.ConnectionChannels = this.ConnectionChannels.bind(this);
	        this.ChannelClientState = this.ChannelClientState.bind(this);
	        this.ChannelConsensusState = this.ChannelConsensusState.bind(this);
	        this.PacketCommitment = this.PacketCommitment.bind(this);
	        this.PacketCommitments = this.PacketCommitments.bind(this);
	        this.PacketReceipt = this.PacketReceipt.bind(this);
	        this.PacketAcknowledgement = this.PacketAcknowledgement.bind(this);
	        this.PacketAcknowledgements = this.PacketAcknowledgements.bind(this);
	        this.UnreceivedPackets = this.UnreceivedPackets.bind(this);
	        this.UnreceivedAcks = this.UnreceivedAcks.bind(this);
	        this.NextSequenceReceive = this.NextSequenceReceive.bind(this);
	    }
	    Channel(request) {
	        const data = exports.QueryChannelRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Query", "Channel", data);
	        return promise.then((data) => exports.QueryChannelResponse.decode(new _m0.Reader(data)));
	    }
	    Channels(request = {
	        pagination: undefined,
	    }) {
	        const data = exports.QueryChannelsRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Query", "Channels", data);
	        return promise.then((data) => exports.QueryChannelsResponse.decode(new _m0.Reader(data)));
	    }
	    ConnectionChannels(request) {
	        const data = exports.QueryConnectionChannelsRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Query", "ConnectionChannels", data);
	        return promise.then((data) => exports.QueryConnectionChannelsResponse.decode(new _m0.Reader(data)));
	    }
	    ChannelClientState(request) {
	        const data = exports.QueryChannelClientStateRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Query", "ChannelClientState", data);
	        return promise.then((data) => exports.QueryChannelClientStateResponse.decode(new _m0.Reader(data)));
	    }
	    ChannelConsensusState(request) {
	        const data = exports.QueryChannelConsensusStateRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Query", "ChannelConsensusState", data);
	        return promise.then((data) => exports.QueryChannelConsensusStateResponse.decode(new _m0.Reader(data)));
	    }
	    PacketCommitment(request) {
	        const data = exports.QueryPacketCommitmentRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Query", "PacketCommitment", data);
	        return promise.then((data) => exports.QueryPacketCommitmentResponse.decode(new _m0.Reader(data)));
	    }
	    PacketCommitments(request) {
	        const data = exports.QueryPacketCommitmentsRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Query", "PacketCommitments", data);
	        return promise.then((data) => exports.QueryPacketCommitmentsResponse.decode(new _m0.Reader(data)));
	    }
	    PacketReceipt(request) {
	        const data = exports.QueryPacketReceiptRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Query", "PacketReceipt", data);
	        return promise.then((data) => exports.QueryPacketReceiptResponse.decode(new _m0.Reader(data)));
	    }
	    PacketAcknowledgement(request) {
	        const data = exports.QueryPacketAcknowledgementRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Query", "PacketAcknowledgement", data);
	        return promise.then((data) => exports.QueryPacketAcknowledgementResponse.decode(new _m0.Reader(data)));
	    }
	    PacketAcknowledgements(request) {
	        const data = exports.QueryPacketAcknowledgementsRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Query", "PacketAcknowledgements", data);
	        return promise.then((data) => exports.QueryPacketAcknowledgementsResponse.decode(new _m0.Reader(data)));
	    }
	    UnreceivedPackets(request) {
	        const data = exports.QueryUnreceivedPacketsRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Query", "UnreceivedPackets", data);
	        return promise.then((data) => exports.QueryUnreceivedPacketsResponse.decode(new _m0.Reader(data)));
	    }
	    UnreceivedAcks(request) {
	        const data = exports.QueryUnreceivedAcksRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Query", "UnreceivedAcks", data);
	        return promise.then((data) => exports.QueryUnreceivedAcksResponse.decode(new _m0.Reader(data)));
	    }
	    NextSequenceReceive(request) {
	        const data = exports.QueryNextSequenceReceiveRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.channel.v1.Query", "NextSequenceReceive", data);
	        return promise.then((data) => exports.QueryNextSequenceReceiveResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.QueryClientImpl = QueryClientImpl;
	
} (query$5));

var query$4 = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.QueryClientImpl = exports.QueryUpgradedConsensusStateResponse = exports.QueryUpgradedConsensusStateRequest = exports.QueryUpgradedClientStateResponse = exports.QueryUpgradedClientStateRequest = exports.QueryClientParamsResponse = exports.QueryClientParamsRequest = exports.QueryClientStatusResponse = exports.QueryClientStatusRequest = exports.QueryConsensusStateHeightsResponse = exports.QueryConsensusStateHeightsRequest = exports.QueryConsensusStatesResponse = exports.QueryConsensusStatesRequest = exports.QueryConsensusStateResponse = exports.QueryConsensusStateRequest = exports.QueryClientStatesResponse = exports.QueryClientStatesRequest = exports.QueryClientStateResponse = exports.QueryClientStateRequest = exports.protobufPackage = void 0;
	/* eslint-disable */
	const pagination_1 = pagination;
	const any_1 = any;
	const client_1 = client;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "ibc.core.client.v1";
	function createBaseQueryClientStateRequest() {
	    return {
	        clientId: "",
	    };
	}
	exports.QueryClientStateRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientId !== "") {
	            writer.uint32(10).string(message.clientId);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryClientStateRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientId = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryClientStateRequest();
	        message.clientId = object.clientId ?? "";
	        return message;
	    },
	};
	function createBaseQueryClientStateResponse() {
	    return {
	        clientState: undefined,
	        proof: new Uint8Array(),
	        proofHeight: undefined,
	    };
	}
	exports.QueryClientStateResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientState !== undefined) {
	            any_1.Any.encode(message.clientState, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.proof.length !== 0) {
	            writer.uint32(18).bytes(message.proof);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryClientStateResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientState = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.proof = reader.bytes();
	                    break;
	                case 3:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientState: (0, helpers_1.isSet)(object.clientState) ? any_1.Any.fromJSON(object.clientState) : undefined,
	            proof: (0, helpers_1.isSet)(object.proof) ? (0, helpers_1.bytesFromBase64)(object.proof) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientState !== undefined &&
	            (obj.clientState = message.clientState ? any_1.Any.toJSON(message.clientState) : undefined);
	        message.proof !== undefined &&
	            (obj.proof = (0, helpers_1.base64FromBytes)(message.proof !== undefined ? message.proof : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryClientStateResponse();
	        message.clientState =
	            object.clientState !== undefined && object.clientState !== null
	                ? any_1.Any.fromPartial(object.clientState)
	                : undefined;
	        message.proof = object.proof ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryClientStatesRequest() {
	    return {
	        pagination: undefined,
	    };
	}
	exports.QueryClientStatesRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryClientStatesRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryClientStatesRequest();
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryClientStatesResponse() {
	    return {
	        clientStates: [],
	        pagination: undefined,
	    };
	}
	exports.QueryClientStatesResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.clientStates) {
	            client_1.IdentifiedClientState.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryClientStatesResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientStates.push(client_1.IdentifiedClientState.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientStates: Array.isArray(object?.clientStates)
	                ? object.clientStates.map((e) => client_1.IdentifiedClientState.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.clientStates) {
	            obj.clientStates = message.clientStates.map((e) => (e ? client_1.IdentifiedClientState.toJSON(e) : undefined));
	        }
	        else {
	            obj.clientStates = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryClientStatesResponse();
	        message.clientStates = object.clientStates?.map((e) => client_1.IdentifiedClientState.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryConsensusStateRequest() {
	    return {
	        clientId: "",
	        revisionNumber: helpers_1.Long.UZERO,
	        revisionHeight: helpers_1.Long.UZERO,
	        latestHeight: false,
	    };
	}
	exports.QueryConsensusStateRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientId !== "") {
	            writer.uint32(10).string(message.clientId);
	        }
	        if (!message.revisionNumber.isZero()) {
	            writer.uint32(16).uint64(message.revisionNumber);
	        }
	        if (!message.revisionHeight.isZero()) {
	            writer.uint32(24).uint64(message.revisionHeight);
	        }
	        if (message.latestHeight === true) {
	            writer.uint32(32).bool(message.latestHeight);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryConsensusStateRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientId = reader.string();
	                    break;
	                case 2:
	                    message.revisionNumber = reader.uint64();
	                    break;
	                case 3:
	                    message.revisionHeight = reader.uint64();
	                    break;
	                case 4:
	                    message.latestHeight = reader.bool();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	            revisionNumber: (0, helpers_1.isSet)(object.revisionNumber) ? helpers_1.Long.fromValue(object.revisionNumber) : helpers_1.Long.UZERO,
	            revisionHeight: (0, helpers_1.isSet)(object.revisionHeight) ? helpers_1.Long.fromValue(object.revisionHeight) : helpers_1.Long.UZERO,
	            latestHeight: (0, helpers_1.isSet)(object.latestHeight) ? Boolean(object.latestHeight) : false,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        message.revisionNumber !== undefined &&
	            (obj.revisionNumber = (message.revisionNumber || helpers_1.Long.UZERO).toString());
	        message.revisionHeight !== undefined &&
	            (obj.revisionHeight = (message.revisionHeight || helpers_1.Long.UZERO).toString());
	        message.latestHeight !== undefined && (obj.latestHeight = message.latestHeight);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryConsensusStateRequest();
	        message.clientId = object.clientId ?? "";
	        message.revisionNumber =
	            object.revisionNumber !== undefined && object.revisionNumber !== null
	                ? helpers_1.Long.fromValue(object.revisionNumber)
	                : helpers_1.Long.UZERO;
	        message.revisionHeight =
	            object.revisionHeight !== undefined && object.revisionHeight !== null
	                ? helpers_1.Long.fromValue(object.revisionHeight)
	                : helpers_1.Long.UZERO;
	        message.latestHeight = object.latestHeight ?? false;
	        return message;
	    },
	};
	function createBaseQueryConsensusStateResponse() {
	    return {
	        consensusState: undefined,
	        proof: new Uint8Array(),
	        proofHeight: undefined,
	    };
	}
	exports.QueryConsensusStateResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.consensusState !== undefined) {
	            any_1.Any.encode(message.consensusState, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.proof.length !== 0) {
	            writer.uint32(18).bytes(message.proof);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryConsensusStateResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.consensusState = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.proof = reader.bytes();
	                    break;
	                case 3:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            consensusState: (0, helpers_1.isSet)(object.consensusState) ? any_1.Any.fromJSON(object.consensusState) : undefined,
	            proof: (0, helpers_1.isSet)(object.proof) ? (0, helpers_1.bytesFromBase64)(object.proof) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.consensusState !== undefined &&
	            (obj.consensusState = message.consensusState ? any_1.Any.toJSON(message.consensusState) : undefined);
	        message.proof !== undefined &&
	            (obj.proof = (0, helpers_1.base64FromBytes)(message.proof !== undefined ? message.proof : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryConsensusStateResponse();
	        message.consensusState =
	            object.consensusState !== undefined && object.consensusState !== null
	                ? any_1.Any.fromPartial(object.consensusState)
	                : undefined;
	        message.proof = object.proof ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryConsensusStatesRequest() {
	    return {
	        clientId: "",
	        pagination: undefined,
	    };
	}
	exports.QueryConsensusStatesRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientId !== "") {
	            writer.uint32(10).string(message.clientId);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryConsensusStatesRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientId = reader.string();
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryConsensusStatesRequest();
	        message.clientId = object.clientId ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryConsensusStatesResponse() {
	    return {
	        consensusStates: [],
	        pagination: undefined,
	    };
	}
	exports.QueryConsensusStatesResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.consensusStates) {
	            client_1.ConsensusStateWithHeight.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryConsensusStatesResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.consensusStates.push(client_1.ConsensusStateWithHeight.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            consensusStates: Array.isArray(object?.consensusStates)
	                ? object.consensusStates.map((e) => client_1.ConsensusStateWithHeight.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.consensusStates) {
	            obj.consensusStates = message.consensusStates.map((e) => e ? client_1.ConsensusStateWithHeight.toJSON(e) : undefined);
	        }
	        else {
	            obj.consensusStates = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryConsensusStatesResponse();
	        message.consensusStates =
	            object.consensusStates?.map((e) => client_1.ConsensusStateWithHeight.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryConsensusStateHeightsRequest() {
	    return {
	        clientId: "",
	        pagination: undefined,
	    };
	}
	exports.QueryConsensusStateHeightsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientId !== "") {
	            writer.uint32(10).string(message.clientId);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryConsensusStateHeightsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientId = reader.string();
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryConsensusStateHeightsRequest();
	        message.clientId = object.clientId ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryConsensusStateHeightsResponse() {
	    return {
	        consensusStateHeights: [],
	        pagination: undefined,
	    };
	}
	exports.QueryConsensusStateHeightsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.consensusStateHeights) {
	            client_1.Height.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryConsensusStateHeightsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.consensusStateHeights.push(client_1.Height.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            consensusStateHeights: Array.isArray(object?.consensusStateHeights)
	                ? object.consensusStateHeights.map((e) => client_1.Height.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.consensusStateHeights) {
	            obj.consensusStateHeights = message.consensusStateHeights.map((e) => e ? client_1.Height.toJSON(e) : undefined);
	        }
	        else {
	            obj.consensusStateHeights = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryConsensusStateHeightsResponse();
	        message.consensusStateHeights = object.consensusStateHeights?.map((e) => client_1.Height.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryClientStatusRequest() {
	    return {
	        clientId: "",
	    };
	}
	exports.QueryClientStatusRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientId !== "") {
	            writer.uint32(10).string(message.clientId);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryClientStatusRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientId = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryClientStatusRequest();
	        message.clientId = object.clientId ?? "";
	        return message;
	    },
	};
	function createBaseQueryClientStatusResponse() {
	    return {
	        status: "",
	    };
	}
	exports.QueryClientStatusResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.status !== "") {
	            writer.uint32(10).string(message.status);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryClientStatusResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.status = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            status: (0, helpers_1.isSet)(object.status) ? String(object.status) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.status !== undefined && (obj.status = message.status);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryClientStatusResponse();
	        message.status = object.status ?? "";
	        return message;
	    },
	};
	function createBaseQueryClientParamsRequest() {
	    return {};
	}
	exports.QueryClientParamsRequest = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryClientParamsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseQueryClientParamsRequest();
	        return message;
	    },
	};
	function createBaseQueryClientParamsResponse() {
	    return {
	        params: undefined,
	    };
	}
	exports.QueryClientParamsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.params !== undefined) {
	            client_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryClientParamsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.params = client_1.Params.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            params: (0, helpers_1.isSet)(object.params) ? client_1.Params.fromJSON(object.params) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.params !== undefined && (obj.params = message.params ? client_1.Params.toJSON(message.params) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryClientParamsResponse();
	        message.params =
	            object.params !== undefined && object.params !== null ? client_1.Params.fromPartial(object.params) : undefined;
	        return message;
	    },
	};
	function createBaseQueryUpgradedClientStateRequest() {
	    return {};
	}
	exports.QueryUpgradedClientStateRequest = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryUpgradedClientStateRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseQueryUpgradedClientStateRequest();
	        return message;
	    },
	};
	function createBaseQueryUpgradedClientStateResponse() {
	    return {
	        upgradedClientState: undefined,
	    };
	}
	exports.QueryUpgradedClientStateResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.upgradedClientState !== undefined) {
	            any_1.Any.encode(message.upgradedClientState, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryUpgradedClientStateResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.upgradedClientState = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            upgradedClientState: (0, helpers_1.isSet)(object.upgradedClientState)
	                ? any_1.Any.fromJSON(object.upgradedClientState)
	                : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.upgradedClientState !== undefined &&
	            (obj.upgradedClientState = message.upgradedClientState
	                ? any_1.Any.toJSON(message.upgradedClientState)
	                : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryUpgradedClientStateResponse();
	        message.upgradedClientState =
	            object.upgradedClientState !== undefined && object.upgradedClientState !== null
	                ? any_1.Any.fromPartial(object.upgradedClientState)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryUpgradedConsensusStateRequest() {
	    return {};
	}
	exports.QueryUpgradedConsensusStateRequest = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryUpgradedConsensusStateRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseQueryUpgradedConsensusStateRequest();
	        return message;
	    },
	};
	function createBaseQueryUpgradedConsensusStateResponse() {
	    return {
	        upgradedConsensusState: undefined,
	    };
	}
	exports.QueryUpgradedConsensusStateResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.upgradedConsensusState !== undefined) {
	            any_1.Any.encode(message.upgradedConsensusState, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryUpgradedConsensusStateResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.upgradedConsensusState = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            upgradedConsensusState: (0, helpers_1.isSet)(object.upgradedConsensusState)
	                ? any_1.Any.fromJSON(object.upgradedConsensusState)
	                : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.upgradedConsensusState !== undefined &&
	            (obj.upgradedConsensusState = message.upgradedConsensusState
	                ? any_1.Any.toJSON(message.upgradedConsensusState)
	                : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryUpgradedConsensusStateResponse();
	        message.upgradedConsensusState =
	            object.upgradedConsensusState !== undefined && object.upgradedConsensusState !== null
	                ? any_1.Any.fromPartial(object.upgradedConsensusState)
	                : undefined;
	        return message;
	    },
	};
	class QueryClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.ClientState = this.ClientState.bind(this);
	        this.ClientStates = this.ClientStates.bind(this);
	        this.ConsensusState = this.ConsensusState.bind(this);
	        this.ConsensusStates = this.ConsensusStates.bind(this);
	        this.ConsensusStateHeights = this.ConsensusStateHeights.bind(this);
	        this.ClientStatus = this.ClientStatus.bind(this);
	        this.ClientParams = this.ClientParams.bind(this);
	        this.UpgradedClientState = this.UpgradedClientState.bind(this);
	        this.UpgradedConsensusState = this.UpgradedConsensusState.bind(this);
	    }
	    ClientState(request) {
	        const data = exports.QueryClientStateRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.client.v1.Query", "ClientState", data);
	        return promise.then((data) => exports.QueryClientStateResponse.decode(new _m0.Reader(data)));
	    }
	    ClientStates(request = {
	        pagination: undefined,
	    }) {
	        const data = exports.QueryClientStatesRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.client.v1.Query", "ClientStates", data);
	        return promise.then((data) => exports.QueryClientStatesResponse.decode(new _m0.Reader(data)));
	    }
	    ConsensusState(request) {
	        const data = exports.QueryConsensusStateRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.client.v1.Query", "ConsensusState", data);
	        return promise.then((data) => exports.QueryConsensusStateResponse.decode(new _m0.Reader(data)));
	    }
	    ConsensusStates(request) {
	        const data = exports.QueryConsensusStatesRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.client.v1.Query", "ConsensusStates", data);
	        return promise.then((data) => exports.QueryConsensusStatesResponse.decode(new _m0.Reader(data)));
	    }
	    ConsensusStateHeights(request) {
	        const data = exports.QueryConsensusStateHeightsRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.client.v1.Query", "ConsensusStateHeights", data);
	        return promise.then((data) => exports.QueryConsensusStateHeightsResponse.decode(new _m0.Reader(data)));
	    }
	    ClientStatus(request) {
	        const data = exports.QueryClientStatusRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.client.v1.Query", "ClientStatus", data);
	        return promise.then((data) => exports.QueryClientStatusResponse.decode(new _m0.Reader(data)));
	    }
	    ClientParams(request = {}) {
	        const data = exports.QueryClientParamsRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.client.v1.Query", "ClientParams", data);
	        return promise.then((data) => exports.QueryClientParamsResponse.decode(new _m0.Reader(data)));
	    }
	    UpgradedClientState(request = {}) {
	        const data = exports.QueryUpgradedClientStateRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.client.v1.Query", "UpgradedClientState", data);
	        return promise.then((data) => exports.QueryUpgradedClientStateResponse.decode(new _m0.Reader(data)));
	    }
	    UpgradedConsensusState(request = {}) {
	        const data = exports.QueryUpgradedConsensusStateRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.client.v1.Query", "UpgradedConsensusState", data);
	        return promise.then((data) => exports.QueryUpgradedConsensusStateResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.QueryClientImpl = QueryClientImpl;
	
} (query$4));

var query$3 = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.QueryClientImpl = exports.QueryConnectionConsensusStateResponse = exports.QueryConnectionConsensusStateRequest = exports.QueryConnectionClientStateResponse = exports.QueryConnectionClientStateRequest = exports.QueryClientConnectionsResponse = exports.QueryClientConnectionsRequest = exports.QueryConnectionsResponse = exports.QueryConnectionsRequest = exports.QueryConnectionResponse = exports.QueryConnectionRequest = exports.protobufPackage = void 0;
	/* eslint-disable */
	const pagination_1 = pagination;
	const connection_1 = connection;
	const client_1 = client;
	const any_1 = any;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "ibc.core.connection.v1";
	function createBaseQueryConnectionRequest() {
	    return {
	        connectionId: "",
	    };
	}
	exports.QueryConnectionRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.connectionId !== "") {
	            writer.uint32(10).string(message.connectionId);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryConnectionRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.connectionId = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            connectionId: (0, helpers_1.isSet)(object.connectionId) ? String(object.connectionId) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.connectionId !== undefined && (obj.connectionId = message.connectionId);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryConnectionRequest();
	        message.connectionId = object.connectionId ?? "";
	        return message;
	    },
	};
	function createBaseQueryConnectionResponse() {
	    return {
	        connection: undefined,
	        proof: new Uint8Array(),
	        proofHeight: undefined,
	    };
	}
	exports.QueryConnectionResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.connection !== undefined) {
	            connection_1.ConnectionEnd.encode(message.connection, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.proof.length !== 0) {
	            writer.uint32(18).bytes(message.proof);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryConnectionResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.connection = connection_1.ConnectionEnd.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.proof = reader.bytes();
	                    break;
	                case 3:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            connection: (0, helpers_1.isSet)(object.connection) ? connection_1.ConnectionEnd.fromJSON(object.connection) : undefined,
	            proof: (0, helpers_1.isSet)(object.proof) ? (0, helpers_1.bytesFromBase64)(object.proof) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.connection !== undefined &&
	            (obj.connection = message.connection ? connection_1.ConnectionEnd.toJSON(message.connection) : undefined);
	        message.proof !== undefined &&
	            (obj.proof = (0, helpers_1.base64FromBytes)(message.proof !== undefined ? message.proof : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryConnectionResponse();
	        message.connection =
	            object.connection !== undefined && object.connection !== null
	                ? connection_1.ConnectionEnd.fromPartial(object.connection)
	                : undefined;
	        message.proof = object.proof ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryConnectionsRequest() {
	    return {
	        pagination: undefined,
	    };
	}
	exports.QueryConnectionsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryConnectionsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryConnectionsRequest();
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryConnectionsResponse() {
	    return {
	        connections: [],
	        pagination: undefined,
	        height: undefined,
	    };
	}
	exports.QueryConnectionsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.connections) {
	            connection_1.IdentifiedConnection.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.height !== undefined) {
	            client_1.Height.encode(message.height, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryConnectionsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.connections.push(connection_1.IdentifiedConnection.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.height = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            connections: Array.isArray(object?.connections)
	                ? object.connections.map((e) => connection_1.IdentifiedConnection.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	            height: (0, helpers_1.isSet)(object.height) ? client_1.Height.fromJSON(object.height) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.connections) {
	            obj.connections = message.connections.map((e) => (e ? connection_1.IdentifiedConnection.toJSON(e) : undefined));
	        }
	        else {
	            obj.connections = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryConnectionsResponse();
	        message.connections = object.connections?.map((e) => connection_1.IdentifiedConnection.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        message.height =
	            object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;
	        return message;
	    },
	};
	function createBaseQueryClientConnectionsRequest() {
	    return {
	        clientId: "",
	    };
	}
	exports.QueryClientConnectionsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientId !== "") {
	            writer.uint32(10).string(message.clientId);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryClientConnectionsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientId = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryClientConnectionsRequest();
	        message.clientId = object.clientId ?? "";
	        return message;
	    },
	};
	function createBaseQueryClientConnectionsResponse() {
	    return {
	        connectionPaths: [],
	        proof: new Uint8Array(),
	        proofHeight: undefined,
	    };
	}
	exports.QueryClientConnectionsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.connectionPaths) {
	            writer.uint32(10).string(v);
	        }
	        if (message.proof.length !== 0) {
	            writer.uint32(18).bytes(message.proof);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryClientConnectionsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.connectionPaths.push(reader.string());
	                    break;
	                case 2:
	                    message.proof = reader.bytes();
	                    break;
	                case 3:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            connectionPaths: Array.isArray(object?.connectionPaths)
	                ? object.connectionPaths.map((e) => String(e))
	                : [],
	            proof: (0, helpers_1.isSet)(object.proof) ? (0, helpers_1.bytesFromBase64)(object.proof) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.connectionPaths) {
	            obj.connectionPaths = message.connectionPaths.map((e) => e);
	        }
	        else {
	            obj.connectionPaths = [];
	        }
	        message.proof !== undefined &&
	            (obj.proof = (0, helpers_1.base64FromBytes)(message.proof !== undefined ? message.proof : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryClientConnectionsResponse();
	        message.connectionPaths = object.connectionPaths?.map((e) => e) || [];
	        message.proof = object.proof ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryConnectionClientStateRequest() {
	    return {
	        connectionId: "",
	    };
	}
	exports.QueryConnectionClientStateRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.connectionId !== "") {
	            writer.uint32(10).string(message.connectionId);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryConnectionClientStateRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.connectionId = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            connectionId: (0, helpers_1.isSet)(object.connectionId) ? String(object.connectionId) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.connectionId !== undefined && (obj.connectionId = message.connectionId);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryConnectionClientStateRequest();
	        message.connectionId = object.connectionId ?? "";
	        return message;
	    },
	};
	function createBaseQueryConnectionClientStateResponse() {
	    return {
	        identifiedClientState: undefined,
	        proof: new Uint8Array(),
	        proofHeight: undefined,
	    };
	}
	exports.QueryConnectionClientStateResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.identifiedClientState !== undefined) {
	            client_1.IdentifiedClientState.encode(message.identifiedClientState, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.proof.length !== 0) {
	            writer.uint32(18).bytes(message.proof);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryConnectionClientStateResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.identifiedClientState = client_1.IdentifiedClientState.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.proof = reader.bytes();
	                    break;
	                case 3:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            identifiedClientState: (0, helpers_1.isSet)(object.identifiedClientState)
	                ? client_1.IdentifiedClientState.fromJSON(object.identifiedClientState)
	                : undefined,
	            proof: (0, helpers_1.isSet)(object.proof) ? (0, helpers_1.bytesFromBase64)(object.proof) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.identifiedClientState !== undefined &&
	            (obj.identifiedClientState = message.identifiedClientState
	                ? client_1.IdentifiedClientState.toJSON(message.identifiedClientState)
	                : undefined);
	        message.proof !== undefined &&
	            (obj.proof = (0, helpers_1.base64FromBytes)(message.proof !== undefined ? message.proof : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryConnectionClientStateResponse();
	        message.identifiedClientState =
	            object.identifiedClientState !== undefined && object.identifiedClientState !== null
	                ? client_1.IdentifiedClientState.fromPartial(object.identifiedClientState)
	                : undefined;
	        message.proof = object.proof ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryConnectionConsensusStateRequest() {
	    return {
	        connectionId: "",
	        revisionNumber: helpers_1.Long.UZERO,
	        revisionHeight: helpers_1.Long.UZERO,
	    };
	}
	exports.QueryConnectionConsensusStateRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.connectionId !== "") {
	            writer.uint32(10).string(message.connectionId);
	        }
	        if (!message.revisionNumber.isZero()) {
	            writer.uint32(16).uint64(message.revisionNumber);
	        }
	        if (!message.revisionHeight.isZero()) {
	            writer.uint32(24).uint64(message.revisionHeight);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryConnectionConsensusStateRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.connectionId = reader.string();
	                    break;
	                case 2:
	                    message.revisionNumber = reader.uint64();
	                    break;
	                case 3:
	                    message.revisionHeight = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            connectionId: (0, helpers_1.isSet)(object.connectionId) ? String(object.connectionId) : "",
	            revisionNumber: (0, helpers_1.isSet)(object.revisionNumber) ? helpers_1.Long.fromValue(object.revisionNumber) : helpers_1.Long.UZERO,
	            revisionHeight: (0, helpers_1.isSet)(object.revisionHeight) ? helpers_1.Long.fromValue(object.revisionHeight) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.connectionId !== undefined && (obj.connectionId = message.connectionId);
	        message.revisionNumber !== undefined &&
	            (obj.revisionNumber = (message.revisionNumber || helpers_1.Long.UZERO).toString());
	        message.revisionHeight !== undefined &&
	            (obj.revisionHeight = (message.revisionHeight || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryConnectionConsensusStateRequest();
	        message.connectionId = object.connectionId ?? "";
	        message.revisionNumber =
	            object.revisionNumber !== undefined && object.revisionNumber !== null
	                ? helpers_1.Long.fromValue(object.revisionNumber)
	                : helpers_1.Long.UZERO;
	        message.revisionHeight =
	            object.revisionHeight !== undefined && object.revisionHeight !== null
	                ? helpers_1.Long.fromValue(object.revisionHeight)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseQueryConnectionConsensusStateResponse() {
	    return {
	        consensusState: undefined,
	        clientId: "",
	        proof: new Uint8Array(),
	        proofHeight: undefined,
	    };
	}
	exports.QueryConnectionConsensusStateResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.consensusState !== undefined) {
	            any_1.Any.encode(message.consensusState, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.clientId !== "") {
	            writer.uint32(18).string(message.clientId);
	        }
	        if (message.proof.length !== 0) {
	            writer.uint32(26).bytes(message.proof);
	        }
	        if (message.proofHeight !== undefined) {
	            client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryConnectionConsensusStateResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.consensusState = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.clientId = reader.string();
	                    break;
	                case 3:
	                    message.proof = reader.bytes();
	                    break;
	                case 4:
	                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            consensusState: (0, helpers_1.isSet)(object.consensusState) ? any_1.Any.fromJSON(object.consensusState) : undefined,
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	            proof: (0, helpers_1.isSet)(object.proof) ? (0, helpers_1.bytesFromBase64)(object.proof) : new Uint8Array(),
	            proofHeight: (0, helpers_1.isSet)(object.proofHeight) ? client_1.Height.fromJSON(object.proofHeight) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.consensusState !== undefined &&
	            (obj.consensusState = message.consensusState ? any_1.Any.toJSON(message.consensusState) : undefined);
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        message.proof !== undefined &&
	            (obj.proof = (0, helpers_1.base64FromBytes)(message.proof !== undefined ? message.proof : new Uint8Array()));
	        message.proofHeight !== undefined &&
	            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryConnectionConsensusStateResponse();
	        message.consensusState =
	            object.consensusState !== undefined && object.consensusState !== null
	                ? any_1.Any.fromPartial(object.consensusState)
	                : undefined;
	        message.clientId = object.clientId ?? "";
	        message.proof = object.proof ?? new Uint8Array();
	        message.proofHeight =
	            object.proofHeight !== undefined && object.proofHeight !== null
	                ? client_1.Height.fromPartial(object.proofHeight)
	                : undefined;
	        return message;
	    },
	};
	class QueryClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.Connection = this.Connection.bind(this);
	        this.Connections = this.Connections.bind(this);
	        this.ClientConnections = this.ClientConnections.bind(this);
	        this.ConnectionClientState = this.ConnectionClientState.bind(this);
	        this.ConnectionConsensusState = this.ConnectionConsensusState.bind(this);
	    }
	    Connection(request) {
	        const data = exports.QueryConnectionRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.connection.v1.Query", "Connection", data);
	        return promise.then((data) => exports.QueryConnectionResponse.decode(new _m0.Reader(data)));
	    }
	    Connections(request = {
	        pagination: undefined,
	    }) {
	        const data = exports.QueryConnectionsRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.connection.v1.Query", "Connections", data);
	        return promise.then((data) => exports.QueryConnectionsResponse.decode(new _m0.Reader(data)));
	    }
	    ClientConnections(request) {
	        const data = exports.QueryClientConnectionsRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.connection.v1.Query", "ClientConnections", data);
	        return promise.then((data) => exports.QueryClientConnectionsResponse.decode(new _m0.Reader(data)));
	    }
	    ConnectionClientState(request) {
	        const data = exports.QueryConnectionClientStateRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.connection.v1.Query", "ConnectionClientState", data);
	        return promise.then((data) => exports.QueryConnectionClientStateResponse.decode(new _m0.Reader(data)));
	    }
	    ConnectionConsensusState(request) {
	        const data = exports.QueryConnectionConsensusStateRequest.encode(request).finish();
	        const promise = this.rpc.request("ibc.core.connection.v1.Query", "ConnectionConsensusState", data);
	        return promise.then((data) => exports.QueryConnectionConsensusStateResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.QueryClientImpl = QueryClientImpl;
	
} (query$3));

var tendermint = {};

var types$4 = {};

var proof = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ProofOps = exports.ProofOp = exports.DominoOp = exports.ValueOp = exports.Proof = exports.protobufPackage = void 0;
	/* eslint-disable */
	const helpers_1 = helpers;
	const _m0 = __importStar(minimal);
	exports.protobufPackage = "tendermint.crypto";
	function createBaseProof() {
	    return {
	        total: helpers_1.Long.ZERO,
	        index: helpers_1.Long.ZERO,
	        leafHash: new Uint8Array(),
	        aunts: [],
	    };
	}
	exports.Proof = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.total.isZero()) {
	            writer.uint32(8).int64(message.total);
	        }
	        if (!message.index.isZero()) {
	            writer.uint32(16).int64(message.index);
	        }
	        if (message.leafHash.length !== 0) {
	            writer.uint32(26).bytes(message.leafHash);
	        }
	        for (const v of message.aunts) {
	            writer.uint32(34).bytes(v);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseProof();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.total = reader.int64();
	                    break;
	                case 2:
	                    message.index = reader.int64();
	                    break;
	                case 3:
	                    message.leafHash = reader.bytes();
	                    break;
	                case 4:
	                    message.aunts.push(reader.bytes());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            total: (0, helpers_1.isSet)(object.total) ? helpers_1.Long.fromValue(object.total) : helpers_1.Long.ZERO,
	            index: (0, helpers_1.isSet)(object.index) ? helpers_1.Long.fromValue(object.index) : helpers_1.Long.ZERO,
	            leafHash: (0, helpers_1.isSet)(object.leafHash) ? (0, helpers_1.bytesFromBase64)(object.leafHash) : new Uint8Array(),
	            aunts: Array.isArray(object?.aunts) ? object.aunts.map((e) => (0, helpers_1.bytesFromBase64)(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.total !== undefined && (obj.total = (message.total || helpers_1.Long.ZERO).toString());
	        message.index !== undefined && (obj.index = (message.index || helpers_1.Long.ZERO).toString());
	        message.leafHash !== undefined &&
	            (obj.leafHash = (0, helpers_1.base64FromBytes)(message.leafHash !== undefined ? message.leafHash : new Uint8Array()));
	        if (message.aunts) {
	            obj.aunts = message.aunts.map((e) => (0, helpers_1.base64FromBytes)(e !== undefined ? e : new Uint8Array()));
	        }
	        else {
	            obj.aunts = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseProof();
	        message.total =
	            object.total !== undefined && object.total !== null ? helpers_1.Long.fromValue(object.total) : helpers_1.Long.ZERO;
	        message.index =
	            object.index !== undefined && object.index !== null ? helpers_1.Long.fromValue(object.index) : helpers_1.Long.ZERO;
	        message.leafHash = object.leafHash ?? new Uint8Array();
	        message.aunts = object.aunts?.map((e) => e) || [];
	        return message;
	    },
	};
	function createBaseValueOp() {
	    return {
	        key: new Uint8Array(),
	        proof: undefined,
	    };
	}
	exports.ValueOp = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.key.length !== 0) {
	            writer.uint32(10).bytes(message.key);
	        }
	        if (message.proof !== undefined) {
	            exports.Proof.encode(message.proof, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseValueOp();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.key = reader.bytes();
	                    break;
	                case 2:
	                    message.proof = exports.Proof.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            key: (0, helpers_1.isSet)(object.key) ? (0, helpers_1.bytesFromBase64)(object.key) : new Uint8Array(),
	            proof: (0, helpers_1.isSet)(object.proof) ? exports.Proof.fromJSON(object.proof) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.key !== undefined &&
	            (obj.key = (0, helpers_1.base64FromBytes)(message.key !== undefined ? message.key : new Uint8Array()));
	        message.proof !== undefined && (obj.proof = message.proof ? exports.Proof.toJSON(message.proof) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseValueOp();
	        message.key = object.key ?? new Uint8Array();
	        message.proof =
	            object.proof !== undefined && object.proof !== null ? exports.Proof.fromPartial(object.proof) : undefined;
	        return message;
	    },
	};
	function createBaseDominoOp() {
	    return {
	        key: "",
	        input: "",
	        output: "",
	    };
	}
	exports.DominoOp = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.key !== "") {
	            writer.uint32(10).string(message.key);
	        }
	        if (message.input !== "") {
	            writer.uint32(18).string(message.input);
	        }
	        if (message.output !== "") {
	            writer.uint32(26).string(message.output);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseDominoOp();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.key = reader.string();
	                    break;
	                case 2:
	                    message.input = reader.string();
	                    break;
	                case 3:
	                    message.output = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            key: (0, helpers_1.isSet)(object.key) ? String(object.key) : "",
	            input: (0, helpers_1.isSet)(object.input) ? String(object.input) : "",
	            output: (0, helpers_1.isSet)(object.output) ? String(object.output) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.key !== undefined && (obj.key = message.key);
	        message.input !== undefined && (obj.input = message.input);
	        message.output !== undefined && (obj.output = message.output);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseDominoOp();
	        message.key = object.key ?? "";
	        message.input = object.input ?? "";
	        message.output = object.output ?? "";
	        return message;
	    },
	};
	function createBaseProofOp() {
	    return {
	        type: "",
	        key: new Uint8Array(),
	        data: new Uint8Array(),
	    };
	}
	exports.ProofOp = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.type !== "") {
	            writer.uint32(10).string(message.type);
	        }
	        if (message.key.length !== 0) {
	            writer.uint32(18).bytes(message.key);
	        }
	        if (message.data.length !== 0) {
	            writer.uint32(26).bytes(message.data);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseProofOp();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.type = reader.string();
	                    break;
	                case 2:
	                    message.key = reader.bytes();
	                    break;
	                case 3:
	                    message.data = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            type: (0, helpers_1.isSet)(object.type) ? String(object.type) : "",
	            key: (0, helpers_1.isSet)(object.key) ? (0, helpers_1.bytesFromBase64)(object.key) : new Uint8Array(),
	            data: (0, helpers_1.isSet)(object.data) ? (0, helpers_1.bytesFromBase64)(object.data) : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.type !== undefined && (obj.type = message.type);
	        message.key !== undefined &&
	            (obj.key = (0, helpers_1.base64FromBytes)(message.key !== undefined ? message.key : new Uint8Array()));
	        message.data !== undefined &&
	            (obj.data = (0, helpers_1.base64FromBytes)(message.data !== undefined ? message.data : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseProofOp();
	        message.type = object.type ?? "";
	        message.key = object.key ?? new Uint8Array();
	        message.data = object.data ?? new Uint8Array();
	        return message;
	    },
	};
	function createBaseProofOps() {
	    return {
	        ops: [],
	    };
	}
	exports.ProofOps = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.ops) {
	            exports.ProofOp.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseProofOps();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.ops.push(exports.ProofOp.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            ops: Array.isArray(object?.ops) ? object.ops.map((e) => exports.ProofOp.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.ops) {
	            obj.ops = message.ops.map((e) => (e ? exports.ProofOp.toJSON(e) : undefined));
	        }
	        else {
	            obj.ops = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseProofOps();
	        message.ops = object.ops?.map((e) => exports.ProofOp.fromPartial(e)) || [];
	        return message;
	    },
	};
	
} (proof));

var types$3 = {};

var __createBinding$8 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$8 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$8 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$8(result, mod, k);
    __setModuleDefault$8(result, mod);
    return result;
};
Object.defineProperty(types$3, "__esModule", { value: true });
types$3.Consensus = types$3.App = types$3.protobufPackage = void 0;
/* eslint-disable */
const helpers_1$4 = helpers;
const _m0$4 = __importStar$8(minimal);
types$3.protobufPackage = "tendermint.version";
function createBaseApp() {
    return {
        protocol: helpers_1$4.Long.UZERO,
        software: "",
    };
}
types$3.App = {
    encode(message, writer = _m0$4.Writer.create()) {
        if (!message.protocol.isZero()) {
            writer.uint32(8).uint64(message.protocol);
        }
        if (message.software !== "") {
            writer.uint32(18).string(message.software);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$4.Reader ? input : new _m0$4.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseApp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.protocol = reader.uint64();
                    break;
                case 2:
                    message.software = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            protocol: (0, helpers_1$4.isSet)(object.protocol) ? helpers_1$4.Long.fromValue(object.protocol) : helpers_1$4.Long.UZERO,
            software: (0, helpers_1$4.isSet)(object.software) ? String(object.software) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.protocol !== undefined && (obj.protocol = (message.protocol || helpers_1$4.Long.UZERO).toString());
        message.software !== undefined && (obj.software = message.software);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseApp();
        message.protocol =
            object.protocol !== undefined && object.protocol !== null
                ? helpers_1$4.Long.fromValue(object.protocol)
                : helpers_1$4.Long.UZERO;
        message.software = object.software ?? "";
        return message;
    },
};
function createBaseConsensus() {
    return {
        block: helpers_1$4.Long.UZERO,
        app: helpers_1$4.Long.UZERO,
    };
}
types$3.Consensus = {
    encode(message, writer = _m0$4.Writer.create()) {
        if (!message.block.isZero()) {
            writer.uint32(8).uint64(message.block);
        }
        if (!message.app.isZero()) {
            writer.uint32(16).uint64(message.app);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$4.Reader ? input : new _m0$4.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConsensus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.block = reader.uint64();
                    break;
                case 2:
                    message.app = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            block: (0, helpers_1$4.isSet)(object.block) ? helpers_1$4.Long.fromValue(object.block) : helpers_1$4.Long.UZERO,
            app: (0, helpers_1$4.isSet)(object.app) ? helpers_1$4.Long.fromValue(object.app) : helpers_1$4.Long.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.block !== undefined && (obj.block = (message.block || helpers_1$4.Long.UZERO).toString());
        message.app !== undefined && (obj.app = (message.app || helpers_1$4.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseConsensus();
        message.block =
            object.block !== undefined && object.block !== null ? helpers_1$4.Long.fromValue(object.block) : helpers_1$4.Long.UZERO;
        message.app = object.app !== undefined && object.app !== null ? helpers_1$4.Long.fromValue(object.app) : helpers_1$4.Long.UZERO;
        return message;
    },
};

var validator$2 = {};

var keys = {};

var __createBinding$7 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$7 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$7 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$7(result, mod, k);
    __setModuleDefault$7(result, mod);
    return result;
};
Object.defineProperty(keys, "__esModule", { value: true });
keys.PublicKey = keys.protobufPackage = void 0;
/* eslint-disable */
const _m0$3 = __importStar$7(minimal);
const helpers_1$3 = helpers;
keys.protobufPackage = "tendermint.crypto";
function createBasePublicKey() {
    return {
        ed25519: undefined,
        secp256k1: undefined,
    };
}
keys.PublicKey = {
    encode(message, writer = _m0$3.Writer.create()) {
        if (message.ed25519 !== undefined) {
            writer.uint32(10).bytes(message.ed25519);
        }
        if (message.secp256k1 !== undefined) {
            writer.uint32(18).bytes(message.secp256k1);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$3.Reader ? input : new _m0$3.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublicKey();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.ed25519 = reader.bytes();
                    break;
                case 2:
                    message.secp256k1 = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            ed25519: (0, helpers_1$3.isSet)(object.ed25519) ? (0, helpers_1$3.bytesFromBase64)(object.ed25519) : undefined,
            secp256k1: (0, helpers_1$3.isSet)(object.secp256k1) ? (0, helpers_1$3.bytesFromBase64)(object.secp256k1) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.ed25519 !== undefined &&
            (obj.ed25519 = message.ed25519 !== undefined ? (0, helpers_1$3.base64FromBytes)(message.ed25519) : undefined);
        message.secp256k1 !== undefined &&
            (obj.secp256k1 = message.secp256k1 !== undefined ? (0, helpers_1$3.base64FromBytes)(message.secp256k1) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBasePublicKey();
        message.ed25519 = object.ed25519 ?? undefined;
        message.secp256k1 = object.secp256k1 ?? undefined;
        return message;
    },
};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SimpleValidator = exports.Validator = exports.ValidatorSet = exports.protobufPackage = void 0;
	/* eslint-disable */
	const keys_1 = keys;
	const helpers_1 = helpers;
	const _m0 = __importStar(minimal);
	exports.protobufPackage = "tendermint.types";
	function createBaseValidatorSet() {
	    return {
	        validators: [],
	        proposer: undefined,
	        totalVotingPower: helpers_1.Long.ZERO,
	    };
	}
	exports.ValidatorSet = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.validators) {
	            exports.Validator.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.proposer !== undefined) {
	            exports.Validator.encode(message.proposer, writer.uint32(18).fork()).ldelim();
	        }
	        if (!message.totalVotingPower.isZero()) {
	            writer.uint32(24).int64(message.totalVotingPower);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseValidatorSet();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.validators.push(exports.Validator.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.proposer = exports.Validator.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.totalVotingPower = reader.int64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            validators: Array.isArray(object?.validators)
	                ? object.validators.map((e) => exports.Validator.fromJSON(e))
	                : [],
	            proposer: (0, helpers_1.isSet)(object.proposer) ? exports.Validator.fromJSON(object.proposer) : undefined,
	            totalVotingPower: (0, helpers_1.isSet)(object.totalVotingPower) ? helpers_1.Long.fromValue(object.totalVotingPower) : helpers_1.Long.ZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.validators) {
	            obj.validators = message.validators.map((e) => (e ? exports.Validator.toJSON(e) : undefined));
	        }
	        else {
	            obj.validators = [];
	        }
	        message.proposer !== undefined &&
	            (obj.proposer = message.proposer ? exports.Validator.toJSON(message.proposer) : undefined);
	        message.totalVotingPower !== undefined &&
	            (obj.totalVotingPower = (message.totalVotingPower || helpers_1.Long.ZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseValidatorSet();
	        message.validators = object.validators?.map((e) => exports.Validator.fromPartial(e)) || [];
	        message.proposer =
	            object.proposer !== undefined && object.proposer !== null
	                ? exports.Validator.fromPartial(object.proposer)
	                : undefined;
	        message.totalVotingPower =
	            object.totalVotingPower !== undefined && object.totalVotingPower !== null
	                ? helpers_1.Long.fromValue(object.totalVotingPower)
	                : helpers_1.Long.ZERO;
	        return message;
	    },
	};
	function createBaseValidator() {
	    return {
	        address: new Uint8Array(),
	        pubKey: undefined,
	        votingPower: helpers_1.Long.ZERO,
	        proposerPriority: helpers_1.Long.ZERO,
	    };
	}
	exports.Validator = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.address.length !== 0) {
	            writer.uint32(10).bytes(message.address);
	        }
	        if (message.pubKey !== undefined) {
	            keys_1.PublicKey.encode(message.pubKey, writer.uint32(18).fork()).ldelim();
	        }
	        if (!message.votingPower.isZero()) {
	            writer.uint32(24).int64(message.votingPower);
	        }
	        if (!message.proposerPriority.isZero()) {
	            writer.uint32(32).int64(message.proposerPriority);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseValidator();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.address = reader.bytes();
	                    break;
	                case 2:
	                    message.pubKey = keys_1.PublicKey.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.votingPower = reader.int64();
	                    break;
	                case 4:
	                    message.proposerPriority = reader.int64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            address: (0, helpers_1.isSet)(object.address) ? (0, helpers_1.bytesFromBase64)(object.address) : new Uint8Array(),
	            pubKey: (0, helpers_1.isSet)(object.pubKey) ? keys_1.PublicKey.fromJSON(object.pubKey) : undefined,
	            votingPower: (0, helpers_1.isSet)(object.votingPower) ? helpers_1.Long.fromValue(object.votingPower) : helpers_1.Long.ZERO,
	            proposerPriority: (0, helpers_1.isSet)(object.proposerPriority) ? helpers_1.Long.fromValue(object.proposerPriority) : helpers_1.Long.ZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.address !== undefined &&
	            (obj.address = (0, helpers_1.base64FromBytes)(message.address !== undefined ? message.address : new Uint8Array()));
	        message.pubKey !== undefined &&
	            (obj.pubKey = message.pubKey ? keys_1.PublicKey.toJSON(message.pubKey) : undefined);
	        message.votingPower !== undefined && (obj.votingPower = (message.votingPower || helpers_1.Long.ZERO).toString());
	        message.proposerPriority !== undefined &&
	            (obj.proposerPriority = (message.proposerPriority || helpers_1.Long.ZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseValidator();
	        message.address = object.address ?? new Uint8Array();
	        message.pubKey =
	            object.pubKey !== undefined && object.pubKey !== null
	                ? keys_1.PublicKey.fromPartial(object.pubKey)
	                : undefined;
	        message.votingPower =
	            object.votingPower !== undefined && object.votingPower !== null
	                ? helpers_1.Long.fromValue(object.votingPower)
	                : helpers_1.Long.ZERO;
	        message.proposerPriority =
	            object.proposerPriority !== undefined && object.proposerPriority !== null
	                ? helpers_1.Long.fromValue(object.proposerPriority)
	                : helpers_1.Long.ZERO;
	        return message;
	    },
	};
	function createBaseSimpleValidator() {
	    return {
	        pubKey: undefined,
	        votingPower: helpers_1.Long.ZERO,
	    };
	}
	exports.SimpleValidator = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.pubKey !== undefined) {
	            keys_1.PublicKey.encode(message.pubKey, writer.uint32(10).fork()).ldelim();
	        }
	        if (!message.votingPower.isZero()) {
	            writer.uint32(16).int64(message.votingPower);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseSimpleValidator();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.pubKey = keys_1.PublicKey.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.votingPower = reader.int64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            pubKey: (0, helpers_1.isSet)(object.pubKey) ? keys_1.PublicKey.fromJSON(object.pubKey) : undefined,
	            votingPower: (0, helpers_1.isSet)(object.votingPower) ? helpers_1.Long.fromValue(object.votingPower) : helpers_1.Long.ZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.pubKey !== undefined &&
	            (obj.pubKey = message.pubKey ? keys_1.PublicKey.toJSON(message.pubKey) : undefined);
	        message.votingPower !== undefined && (obj.votingPower = (message.votingPower || helpers_1.Long.ZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseSimpleValidator();
	        message.pubKey =
	            object.pubKey !== undefined && object.pubKey !== null
	                ? keys_1.PublicKey.fromPartial(object.pubKey)
	                : undefined;
	        message.votingPower =
	            object.votingPower !== undefined && object.votingPower !== null
	                ? helpers_1.Long.fromValue(object.votingPower)
	                : helpers_1.Long.ZERO;
	        return message;
	    },
	};
	
} (validator$2));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TxProof = exports.BlockMeta = exports.LightBlock = exports.SignedHeader = exports.Proposal = exports.CommitSig = exports.Commit = exports.Vote = exports.Data = exports.Header = exports.BlockID = exports.Part = exports.PartSetHeader = exports.signedMsgTypeToJSON = exports.signedMsgTypeFromJSON = exports.SignedMsgType = exports.blockIDFlagToJSON = exports.blockIDFlagFromJSON = exports.BlockIDFlag = exports.protobufPackage = void 0;
	/* eslint-disable */
	const proof_1 = proof;
	const types_1 = types$3;
	const timestamp_1 = timestamp;
	const validator_1 = validator$2;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "tendermint.types";
	/** BlockIdFlag indicates which BlcokID the signature is for */
	var BlockIDFlag;
	(function (BlockIDFlag) {
	    BlockIDFlag[BlockIDFlag["BLOCK_ID_FLAG_UNKNOWN"] = 0] = "BLOCK_ID_FLAG_UNKNOWN";
	    BlockIDFlag[BlockIDFlag["BLOCK_ID_FLAG_ABSENT"] = 1] = "BLOCK_ID_FLAG_ABSENT";
	    BlockIDFlag[BlockIDFlag["BLOCK_ID_FLAG_COMMIT"] = 2] = "BLOCK_ID_FLAG_COMMIT";
	    BlockIDFlag[BlockIDFlag["BLOCK_ID_FLAG_NIL"] = 3] = "BLOCK_ID_FLAG_NIL";
	    BlockIDFlag[BlockIDFlag["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
	})(BlockIDFlag = exports.BlockIDFlag || (exports.BlockIDFlag = {}));
	function blockIDFlagFromJSON(object) {
	    switch (object) {
	        case 0:
	        case "BLOCK_ID_FLAG_UNKNOWN":
	            return BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN;
	        case 1:
	        case "BLOCK_ID_FLAG_ABSENT":
	            return BlockIDFlag.BLOCK_ID_FLAG_ABSENT;
	        case 2:
	        case "BLOCK_ID_FLAG_COMMIT":
	            return BlockIDFlag.BLOCK_ID_FLAG_COMMIT;
	        case 3:
	        case "BLOCK_ID_FLAG_NIL":
	            return BlockIDFlag.BLOCK_ID_FLAG_NIL;
	        case -1:
	        case "UNRECOGNIZED":
	        default:
	            return BlockIDFlag.UNRECOGNIZED;
	    }
	}
	exports.blockIDFlagFromJSON = blockIDFlagFromJSON;
	function blockIDFlagToJSON(object) {
	    switch (object) {
	        case BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN:
	            return "BLOCK_ID_FLAG_UNKNOWN";
	        case BlockIDFlag.BLOCK_ID_FLAG_ABSENT:
	            return "BLOCK_ID_FLAG_ABSENT";
	        case BlockIDFlag.BLOCK_ID_FLAG_COMMIT:
	            return "BLOCK_ID_FLAG_COMMIT";
	        case BlockIDFlag.BLOCK_ID_FLAG_NIL:
	            return "BLOCK_ID_FLAG_NIL";
	        case BlockIDFlag.UNRECOGNIZED:
	        default:
	            return "UNRECOGNIZED";
	    }
	}
	exports.blockIDFlagToJSON = blockIDFlagToJSON;
	/** SignedMsgType is a type of signed message in the consensus. */
	var SignedMsgType;
	(function (SignedMsgType) {
	    SignedMsgType[SignedMsgType["SIGNED_MSG_TYPE_UNKNOWN"] = 0] = "SIGNED_MSG_TYPE_UNKNOWN";
	    /** SIGNED_MSG_TYPE_PREVOTE - Votes */
	    SignedMsgType[SignedMsgType["SIGNED_MSG_TYPE_PREVOTE"] = 1] = "SIGNED_MSG_TYPE_PREVOTE";
	    SignedMsgType[SignedMsgType["SIGNED_MSG_TYPE_PRECOMMIT"] = 2] = "SIGNED_MSG_TYPE_PRECOMMIT";
	    /** SIGNED_MSG_TYPE_PROPOSAL - Proposals */
	    SignedMsgType[SignedMsgType["SIGNED_MSG_TYPE_PROPOSAL"] = 32] = "SIGNED_MSG_TYPE_PROPOSAL";
	    SignedMsgType[SignedMsgType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
	})(SignedMsgType = exports.SignedMsgType || (exports.SignedMsgType = {}));
	function signedMsgTypeFromJSON(object) {
	    switch (object) {
	        case 0:
	        case "SIGNED_MSG_TYPE_UNKNOWN":
	            return SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN;
	        case 1:
	        case "SIGNED_MSG_TYPE_PREVOTE":
	            return SignedMsgType.SIGNED_MSG_TYPE_PREVOTE;
	        case 2:
	        case "SIGNED_MSG_TYPE_PRECOMMIT":
	            return SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT;
	        case 32:
	        case "SIGNED_MSG_TYPE_PROPOSAL":
	            return SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL;
	        case -1:
	        case "UNRECOGNIZED":
	        default:
	            return SignedMsgType.UNRECOGNIZED;
	    }
	}
	exports.signedMsgTypeFromJSON = signedMsgTypeFromJSON;
	function signedMsgTypeToJSON(object) {
	    switch (object) {
	        case SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN:
	            return "SIGNED_MSG_TYPE_UNKNOWN";
	        case SignedMsgType.SIGNED_MSG_TYPE_PREVOTE:
	            return "SIGNED_MSG_TYPE_PREVOTE";
	        case SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT:
	            return "SIGNED_MSG_TYPE_PRECOMMIT";
	        case SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL:
	            return "SIGNED_MSG_TYPE_PROPOSAL";
	        case SignedMsgType.UNRECOGNIZED:
	        default:
	            return "UNRECOGNIZED";
	    }
	}
	exports.signedMsgTypeToJSON = signedMsgTypeToJSON;
	function createBasePartSetHeader() {
	    return {
	        total: 0,
	        hash: new Uint8Array(),
	    };
	}
	exports.PartSetHeader = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.total !== 0) {
	            writer.uint32(8).uint32(message.total);
	        }
	        if (message.hash.length !== 0) {
	            writer.uint32(18).bytes(message.hash);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBasePartSetHeader();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.total = reader.uint32();
	                    break;
	                case 2:
	                    message.hash = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            total: (0, helpers_1.isSet)(object.total) ? Number(object.total) : 0,
	            hash: (0, helpers_1.isSet)(object.hash) ? (0, helpers_1.bytesFromBase64)(object.hash) : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.total !== undefined && (obj.total = Math.round(message.total));
	        message.hash !== undefined &&
	            (obj.hash = (0, helpers_1.base64FromBytes)(message.hash !== undefined ? message.hash : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBasePartSetHeader();
	        message.total = object.total ?? 0;
	        message.hash = object.hash ?? new Uint8Array();
	        return message;
	    },
	};
	function createBasePart() {
	    return {
	        index: 0,
	        bytes: new Uint8Array(),
	        proof: undefined,
	    };
	}
	exports.Part = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.index !== 0) {
	            writer.uint32(8).uint32(message.index);
	        }
	        if (message.bytes.length !== 0) {
	            writer.uint32(18).bytes(message.bytes);
	        }
	        if (message.proof !== undefined) {
	            proof_1.Proof.encode(message.proof, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBasePart();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.index = reader.uint32();
	                    break;
	                case 2:
	                    message.bytes = reader.bytes();
	                    break;
	                case 3:
	                    message.proof = proof_1.Proof.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            index: (0, helpers_1.isSet)(object.index) ? Number(object.index) : 0,
	            bytes: (0, helpers_1.isSet)(object.bytes) ? (0, helpers_1.bytesFromBase64)(object.bytes) : new Uint8Array(),
	            proof: (0, helpers_1.isSet)(object.proof) ? proof_1.Proof.fromJSON(object.proof) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.index !== undefined && (obj.index = Math.round(message.index));
	        message.bytes !== undefined &&
	            (obj.bytes = (0, helpers_1.base64FromBytes)(message.bytes !== undefined ? message.bytes : new Uint8Array()));
	        message.proof !== undefined && (obj.proof = message.proof ? proof_1.Proof.toJSON(message.proof) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBasePart();
	        message.index = object.index ?? 0;
	        message.bytes = object.bytes ?? new Uint8Array();
	        message.proof =
	            object.proof !== undefined && object.proof !== null ? proof_1.Proof.fromPartial(object.proof) : undefined;
	        return message;
	    },
	};
	function createBaseBlockID() {
	    return {
	        hash: new Uint8Array(),
	        partSetHeader: undefined,
	    };
	}
	exports.BlockID = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.hash.length !== 0) {
	            writer.uint32(10).bytes(message.hash);
	        }
	        if (message.partSetHeader !== undefined) {
	            exports.PartSetHeader.encode(message.partSetHeader, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseBlockID();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.hash = reader.bytes();
	                    break;
	                case 2:
	                    message.partSetHeader = exports.PartSetHeader.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            hash: (0, helpers_1.isSet)(object.hash) ? (0, helpers_1.bytesFromBase64)(object.hash) : new Uint8Array(),
	            partSetHeader: (0, helpers_1.isSet)(object.partSetHeader) ? exports.PartSetHeader.fromJSON(object.partSetHeader) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.hash !== undefined &&
	            (obj.hash = (0, helpers_1.base64FromBytes)(message.hash !== undefined ? message.hash : new Uint8Array()));
	        message.partSetHeader !== undefined &&
	            (obj.partSetHeader = message.partSetHeader ? exports.PartSetHeader.toJSON(message.partSetHeader) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseBlockID();
	        message.hash = object.hash ?? new Uint8Array();
	        message.partSetHeader =
	            object.partSetHeader !== undefined && object.partSetHeader !== null
	                ? exports.PartSetHeader.fromPartial(object.partSetHeader)
	                : undefined;
	        return message;
	    },
	};
	function createBaseHeader() {
	    return {
	        version: undefined,
	        chainId: "",
	        height: helpers_1.Long.ZERO,
	        time: undefined,
	        lastBlockId: undefined,
	        lastCommitHash: new Uint8Array(),
	        dataHash: new Uint8Array(),
	        validatorsHash: new Uint8Array(),
	        nextValidatorsHash: new Uint8Array(),
	        consensusHash: new Uint8Array(),
	        appHash: new Uint8Array(),
	        lastResultsHash: new Uint8Array(),
	        evidenceHash: new Uint8Array(),
	        proposerAddress: new Uint8Array(),
	    };
	}
	exports.Header = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.version !== undefined) {
	            types_1.Consensus.encode(message.version, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.chainId !== "") {
	            writer.uint32(18).string(message.chainId);
	        }
	        if (!message.height.isZero()) {
	            writer.uint32(24).int64(message.height);
	        }
	        if (message.time !== undefined) {
	            timestamp_1.Timestamp.encode(message.time, writer.uint32(34).fork()).ldelim();
	        }
	        if (message.lastBlockId !== undefined) {
	            exports.BlockID.encode(message.lastBlockId, writer.uint32(42).fork()).ldelim();
	        }
	        if (message.lastCommitHash.length !== 0) {
	            writer.uint32(50).bytes(message.lastCommitHash);
	        }
	        if (message.dataHash.length !== 0) {
	            writer.uint32(58).bytes(message.dataHash);
	        }
	        if (message.validatorsHash.length !== 0) {
	            writer.uint32(66).bytes(message.validatorsHash);
	        }
	        if (message.nextValidatorsHash.length !== 0) {
	            writer.uint32(74).bytes(message.nextValidatorsHash);
	        }
	        if (message.consensusHash.length !== 0) {
	            writer.uint32(82).bytes(message.consensusHash);
	        }
	        if (message.appHash.length !== 0) {
	            writer.uint32(90).bytes(message.appHash);
	        }
	        if (message.lastResultsHash.length !== 0) {
	            writer.uint32(98).bytes(message.lastResultsHash);
	        }
	        if (message.evidenceHash.length !== 0) {
	            writer.uint32(106).bytes(message.evidenceHash);
	        }
	        if (message.proposerAddress.length !== 0) {
	            writer.uint32(114).bytes(message.proposerAddress);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseHeader();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.version = types_1.Consensus.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.chainId = reader.string();
	                    break;
	                case 3:
	                    message.height = reader.int64();
	                    break;
	                case 4:
	                    message.time = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                case 5:
	                    message.lastBlockId = exports.BlockID.decode(reader, reader.uint32());
	                    break;
	                case 6:
	                    message.lastCommitHash = reader.bytes();
	                    break;
	                case 7:
	                    message.dataHash = reader.bytes();
	                    break;
	                case 8:
	                    message.validatorsHash = reader.bytes();
	                    break;
	                case 9:
	                    message.nextValidatorsHash = reader.bytes();
	                    break;
	                case 10:
	                    message.consensusHash = reader.bytes();
	                    break;
	                case 11:
	                    message.appHash = reader.bytes();
	                    break;
	                case 12:
	                    message.lastResultsHash = reader.bytes();
	                    break;
	                case 13:
	                    message.evidenceHash = reader.bytes();
	                    break;
	                case 14:
	                    message.proposerAddress = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            version: (0, helpers_1.isSet)(object.version) ? types_1.Consensus.fromJSON(object.version) : undefined,
	            chainId: (0, helpers_1.isSet)(object.chainId) ? String(object.chainId) : "",
	            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO,
	            time: (0, helpers_1.isSet)(object.time) ? (0, helpers_1.fromJsonTimestamp)(object.time) : undefined,
	            lastBlockId: (0, helpers_1.isSet)(object.lastBlockId) ? exports.BlockID.fromJSON(object.lastBlockId) : undefined,
	            lastCommitHash: (0, helpers_1.isSet)(object.lastCommitHash)
	                ? (0, helpers_1.bytesFromBase64)(object.lastCommitHash)
	                : new Uint8Array(),
	            dataHash: (0, helpers_1.isSet)(object.dataHash) ? (0, helpers_1.bytesFromBase64)(object.dataHash) : new Uint8Array(),
	            validatorsHash: (0, helpers_1.isSet)(object.validatorsHash)
	                ? (0, helpers_1.bytesFromBase64)(object.validatorsHash)
	                : new Uint8Array(),
	            nextValidatorsHash: (0, helpers_1.isSet)(object.nextValidatorsHash)
	                ? (0, helpers_1.bytesFromBase64)(object.nextValidatorsHash)
	                : new Uint8Array(),
	            consensusHash: (0, helpers_1.isSet)(object.consensusHash) ? (0, helpers_1.bytesFromBase64)(object.consensusHash) : new Uint8Array(),
	            appHash: (0, helpers_1.isSet)(object.appHash) ? (0, helpers_1.bytesFromBase64)(object.appHash) : new Uint8Array(),
	            lastResultsHash: (0, helpers_1.isSet)(object.lastResultsHash)
	                ? (0, helpers_1.bytesFromBase64)(object.lastResultsHash)
	                : new Uint8Array(),
	            evidenceHash: (0, helpers_1.isSet)(object.evidenceHash) ? (0, helpers_1.bytesFromBase64)(object.evidenceHash) : new Uint8Array(),
	            proposerAddress: (0, helpers_1.isSet)(object.proposerAddress)
	                ? (0, helpers_1.bytesFromBase64)(object.proposerAddress)
	                : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.version !== undefined &&
	            (obj.version = message.version ? types_1.Consensus.toJSON(message.version) : undefined);
	        message.chainId !== undefined && (obj.chainId = message.chainId);
	        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.ZERO).toString());
	        message.time !== undefined && (obj.time = (0, helpers_1.fromTimestamp)(message.time).toISOString());
	        message.lastBlockId !== undefined &&
	            (obj.lastBlockId = message.lastBlockId ? exports.BlockID.toJSON(message.lastBlockId) : undefined);
	        message.lastCommitHash !== undefined &&
	            (obj.lastCommitHash = (0, helpers_1.base64FromBytes)(message.lastCommitHash !== undefined ? message.lastCommitHash : new Uint8Array()));
	        message.dataHash !== undefined &&
	            (obj.dataHash = (0, helpers_1.base64FromBytes)(message.dataHash !== undefined ? message.dataHash : new Uint8Array()));
	        message.validatorsHash !== undefined &&
	            (obj.validatorsHash = (0, helpers_1.base64FromBytes)(message.validatorsHash !== undefined ? message.validatorsHash : new Uint8Array()));
	        message.nextValidatorsHash !== undefined &&
	            (obj.nextValidatorsHash = (0, helpers_1.base64FromBytes)(message.nextValidatorsHash !== undefined ? message.nextValidatorsHash : new Uint8Array()));
	        message.consensusHash !== undefined &&
	            (obj.consensusHash = (0, helpers_1.base64FromBytes)(message.consensusHash !== undefined ? message.consensusHash : new Uint8Array()));
	        message.appHash !== undefined &&
	            (obj.appHash = (0, helpers_1.base64FromBytes)(message.appHash !== undefined ? message.appHash : new Uint8Array()));
	        message.lastResultsHash !== undefined &&
	            (obj.lastResultsHash = (0, helpers_1.base64FromBytes)(message.lastResultsHash !== undefined ? message.lastResultsHash : new Uint8Array()));
	        message.evidenceHash !== undefined &&
	            (obj.evidenceHash = (0, helpers_1.base64FromBytes)(message.evidenceHash !== undefined ? message.evidenceHash : new Uint8Array()));
	        message.proposerAddress !== undefined &&
	            (obj.proposerAddress = (0, helpers_1.base64FromBytes)(message.proposerAddress !== undefined ? message.proposerAddress : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseHeader();
	        message.version =
	            object.version !== undefined && object.version !== null
	                ? types_1.Consensus.fromPartial(object.version)
	                : undefined;
	        message.chainId = object.chainId ?? "";
	        message.height =
	            object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO;
	        message.time =
	            object.time !== undefined && object.time !== null ? timestamp_1.Timestamp.fromPartial(object.time) : undefined;
	        message.lastBlockId =
	            object.lastBlockId !== undefined && object.lastBlockId !== null
	                ? exports.BlockID.fromPartial(object.lastBlockId)
	                : undefined;
	        message.lastCommitHash = object.lastCommitHash ?? new Uint8Array();
	        message.dataHash = object.dataHash ?? new Uint8Array();
	        message.validatorsHash = object.validatorsHash ?? new Uint8Array();
	        message.nextValidatorsHash = object.nextValidatorsHash ?? new Uint8Array();
	        message.consensusHash = object.consensusHash ?? new Uint8Array();
	        message.appHash = object.appHash ?? new Uint8Array();
	        message.lastResultsHash = object.lastResultsHash ?? new Uint8Array();
	        message.evidenceHash = object.evidenceHash ?? new Uint8Array();
	        message.proposerAddress = object.proposerAddress ?? new Uint8Array();
	        return message;
	    },
	};
	function createBaseData() {
	    return {
	        txs: [],
	    };
	}
	exports.Data = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.txs) {
	            writer.uint32(10).bytes(v);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseData();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.txs.push(reader.bytes());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            txs: Array.isArray(object?.txs) ? object.txs.map((e) => (0, helpers_1.bytesFromBase64)(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.txs) {
	            obj.txs = message.txs.map((e) => (0, helpers_1.base64FromBytes)(e !== undefined ? e : new Uint8Array()));
	        }
	        else {
	            obj.txs = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseData();
	        message.txs = object.txs?.map((e) => e) || [];
	        return message;
	    },
	};
	function createBaseVote() {
	    return {
	        type: 0,
	        height: helpers_1.Long.ZERO,
	        round: 0,
	        blockId: undefined,
	        timestamp: undefined,
	        validatorAddress: new Uint8Array(),
	        validatorIndex: 0,
	        signature: new Uint8Array(),
	    };
	}
	exports.Vote = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.type !== 0) {
	            writer.uint32(8).int32(message.type);
	        }
	        if (!message.height.isZero()) {
	            writer.uint32(16).int64(message.height);
	        }
	        if (message.round !== 0) {
	            writer.uint32(24).int32(message.round);
	        }
	        if (message.blockId !== undefined) {
	            exports.BlockID.encode(message.blockId, writer.uint32(34).fork()).ldelim();
	        }
	        if (message.timestamp !== undefined) {
	            timestamp_1.Timestamp.encode(message.timestamp, writer.uint32(42).fork()).ldelim();
	        }
	        if (message.validatorAddress.length !== 0) {
	            writer.uint32(50).bytes(message.validatorAddress);
	        }
	        if (message.validatorIndex !== 0) {
	            writer.uint32(56).int32(message.validatorIndex);
	        }
	        if (message.signature.length !== 0) {
	            writer.uint32(66).bytes(message.signature);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseVote();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.type = reader.int32();
	                    break;
	                case 2:
	                    message.height = reader.int64();
	                    break;
	                case 3:
	                    message.round = reader.int32();
	                    break;
	                case 4:
	                    message.blockId = exports.BlockID.decode(reader, reader.uint32());
	                    break;
	                case 5:
	                    message.timestamp = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                case 6:
	                    message.validatorAddress = reader.bytes();
	                    break;
	                case 7:
	                    message.validatorIndex = reader.int32();
	                    break;
	                case 8:
	                    message.signature = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            type: (0, helpers_1.isSet)(object.type) ? signedMsgTypeFromJSON(object.type) : 0,
	            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO,
	            round: (0, helpers_1.isSet)(object.round) ? Number(object.round) : 0,
	            blockId: (0, helpers_1.isSet)(object.blockId) ? exports.BlockID.fromJSON(object.blockId) : undefined,
	            timestamp: (0, helpers_1.isSet)(object.timestamp) ? (0, helpers_1.fromJsonTimestamp)(object.timestamp) : undefined,
	            validatorAddress: (0, helpers_1.isSet)(object.validatorAddress)
	                ? (0, helpers_1.bytesFromBase64)(object.validatorAddress)
	                : new Uint8Array(),
	            validatorIndex: (0, helpers_1.isSet)(object.validatorIndex) ? Number(object.validatorIndex) : 0,
	            signature: (0, helpers_1.isSet)(object.signature) ? (0, helpers_1.bytesFromBase64)(object.signature) : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.type !== undefined && (obj.type = signedMsgTypeToJSON(message.type));
	        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.ZERO).toString());
	        message.round !== undefined && (obj.round = Math.round(message.round));
	        message.blockId !== undefined &&
	            (obj.blockId = message.blockId ? exports.BlockID.toJSON(message.blockId) : undefined);
	        message.timestamp !== undefined && (obj.timestamp = (0, helpers_1.fromTimestamp)(message.timestamp).toISOString());
	        message.validatorAddress !== undefined &&
	            (obj.validatorAddress = (0, helpers_1.base64FromBytes)(message.validatorAddress !== undefined ? message.validatorAddress : new Uint8Array()));
	        message.validatorIndex !== undefined && (obj.validatorIndex = Math.round(message.validatorIndex));
	        message.signature !== undefined &&
	            (obj.signature = (0, helpers_1.base64FromBytes)(message.signature !== undefined ? message.signature : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseVote();
	        message.type = object.type ?? 0;
	        message.height =
	            object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO;
	        message.round = object.round ?? 0;
	        message.blockId =
	            object.blockId !== undefined && object.blockId !== null
	                ? exports.BlockID.fromPartial(object.blockId)
	                : undefined;
	        message.timestamp =
	            object.timestamp !== undefined && object.timestamp !== null
	                ? timestamp_1.Timestamp.fromPartial(object.timestamp)
	                : undefined;
	        message.validatorAddress = object.validatorAddress ?? new Uint8Array();
	        message.validatorIndex = object.validatorIndex ?? 0;
	        message.signature = object.signature ?? new Uint8Array();
	        return message;
	    },
	};
	function createBaseCommit() {
	    return {
	        height: helpers_1.Long.ZERO,
	        round: 0,
	        blockId: undefined,
	        signatures: [],
	    };
	}
	exports.Commit = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.height.isZero()) {
	            writer.uint32(8).int64(message.height);
	        }
	        if (message.round !== 0) {
	            writer.uint32(16).int32(message.round);
	        }
	        if (message.blockId !== undefined) {
	            exports.BlockID.encode(message.blockId, writer.uint32(26).fork()).ldelim();
	        }
	        for (const v of message.signatures) {
	            exports.CommitSig.encode(v, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseCommit();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.height = reader.int64();
	                    break;
	                case 2:
	                    message.round = reader.int32();
	                    break;
	                case 3:
	                    message.blockId = exports.BlockID.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.signatures.push(exports.CommitSig.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO,
	            round: (0, helpers_1.isSet)(object.round) ? Number(object.round) : 0,
	            blockId: (0, helpers_1.isSet)(object.blockId) ? exports.BlockID.fromJSON(object.blockId) : undefined,
	            signatures: Array.isArray(object?.signatures)
	                ? object.signatures.map((e) => exports.CommitSig.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.ZERO).toString());
	        message.round !== undefined && (obj.round = Math.round(message.round));
	        message.blockId !== undefined &&
	            (obj.blockId = message.blockId ? exports.BlockID.toJSON(message.blockId) : undefined);
	        if (message.signatures) {
	            obj.signatures = message.signatures.map((e) => (e ? exports.CommitSig.toJSON(e) : undefined));
	        }
	        else {
	            obj.signatures = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseCommit();
	        message.height =
	            object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO;
	        message.round = object.round ?? 0;
	        message.blockId =
	            object.blockId !== undefined && object.blockId !== null
	                ? exports.BlockID.fromPartial(object.blockId)
	                : undefined;
	        message.signatures = object.signatures?.map((e) => exports.CommitSig.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseCommitSig() {
	    return {
	        blockIdFlag: 0,
	        validatorAddress: new Uint8Array(),
	        timestamp: undefined,
	        signature: new Uint8Array(),
	    };
	}
	exports.CommitSig = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.blockIdFlag !== 0) {
	            writer.uint32(8).int32(message.blockIdFlag);
	        }
	        if (message.validatorAddress.length !== 0) {
	            writer.uint32(18).bytes(message.validatorAddress);
	        }
	        if (message.timestamp !== undefined) {
	            timestamp_1.Timestamp.encode(message.timestamp, writer.uint32(26).fork()).ldelim();
	        }
	        if (message.signature.length !== 0) {
	            writer.uint32(34).bytes(message.signature);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseCommitSig();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.blockIdFlag = reader.int32();
	                    break;
	                case 2:
	                    message.validatorAddress = reader.bytes();
	                    break;
	                case 3:
	                    message.timestamp = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.signature = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            blockIdFlag: (0, helpers_1.isSet)(object.blockIdFlag) ? blockIDFlagFromJSON(object.blockIdFlag) : 0,
	            validatorAddress: (0, helpers_1.isSet)(object.validatorAddress)
	                ? (0, helpers_1.bytesFromBase64)(object.validatorAddress)
	                : new Uint8Array(),
	            timestamp: (0, helpers_1.isSet)(object.timestamp) ? (0, helpers_1.fromJsonTimestamp)(object.timestamp) : undefined,
	            signature: (0, helpers_1.isSet)(object.signature) ? (0, helpers_1.bytesFromBase64)(object.signature) : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.blockIdFlag !== undefined && (obj.blockIdFlag = blockIDFlagToJSON(message.blockIdFlag));
	        message.validatorAddress !== undefined &&
	            (obj.validatorAddress = (0, helpers_1.base64FromBytes)(message.validatorAddress !== undefined ? message.validatorAddress : new Uint8Array()));
	        message.timestamp !== undefined && (obj.timestamp = (0, helpers_1.fromTimestamp)(message.timestamp).toISOString());
	        message.signature !== undefined &&
	            (obj.signature = (0, helpers_1.base64FromBytes)(message.signature !== undefined ? message.signature : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseCommitSig();
	        message.blockIdFlag = object.blockIdFlag ?? 0;
	        message.validatorAddress = object.validatorAddress ?? new Uint8Array();
	        message.timestamp =
	            object.timestamp !== undefined && object.timestamp !== null
	                ? timestamp_1.Timestamp.fromPartial(object.timestamp)
	                : undefined;
	        message.signature = object.signature ?? new Uint8Array();
	        return message;
	    },
	};
	function createBaseProposal() {
	    return {
	        type: 0,
	        height: helpers_1.Long.ZERO,
	        round: 0,
	        polRound: 0,
	        blockId: undefined,
	        timestamp: undefined,
	        signature: new Uint8Array(),
	    };
	}
	exports.Proposal = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.type !== 0) {
	            writer.uint32(8).int32(message.type);
	        }
	        if (!message.height.isZero()) {
	            writer.uint32(16).int64(message.height);
	        }
	        if (message.round !== 0) {
	            writer.uint32(24).int32(message.round);
	        }
	        if (message.polRound !== 0) {
	            writer.uint32(32).int32(message.polRound);
	        }
	        if (message.blockId !== undefined) {
	            exports.BlockID.encode(message.blockId, writer.uint32(42).fork()).ldelim();
	        }
	        if (message.timestamp !== undefined) {
	            timestamp_1.Timestamp.encode(message.timestamp, writer.uint32(50).fork()).ldelim();
	        }
	        if (message.signature.length !== 0) {
	            writer.uint32(58).bytes(message.signature);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseProposal();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.type = reader.int32();
	                    break;
	                case 2:
	                    message.height = reader.int64();
	                    break;
	                case 3:
	                    message.round = reader.int32();
	                    break;
	                case 4:
	                    message.polRound = reader.int32();
	                    break;
	                case 5:
	                    message.blockId = exports.BlockID.decode(reader, reader.uint32());
	                    break;
	                case 6:
	                    message.timestamp = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                case 7:
	                    message.signature = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            type: (0, helpers_1.isSet)(object.type) ? signedMsgTypeFromJSON(object.type) : 0,
	            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO,
	            round: (0, helpers_1.isSet)(object.round) ? Number(object.round) : 0,
	            polRound: (0, helpers_1.isSet)(object.polRound) ? Number(object.polRound) : 0,
	            blockId: (0, helpers_1.isSet)(object.blockId) ? exports.BlockID.fromJSON(object.blockId) : undefined,
	            timestamp: (0, helpers_1.isSet)(object.timestamp) ? (0, helpers_1.fromJsonTimestamp)(object.timestamp) : undefined,
	            signature: (0, helpers_1.isSet)(object.signature) ? (0, helpers_1.bytesFromBase64)(object.signature) : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.type !== undefined && (obj.type = signedMsgTypeToJSON(message.type));
	        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.ZERO).toString());
	        message.round !== undefined && (obj.round = Math.round(message.round));
	        message.polRound !== undefined && (obj.polRound = Math.round(message.polRound));
	        message.blockId !== undefined &&
	            (obj.blockId = message.blockId ? exports.BlockID.toJSON(message.blockId) : undefined);
	        message.timestamp !== undefined && (obj.timestamp = (0, helpers_1.fromTimestamp)(message.timestamp).toISOString());
	        message.signature !== undefined &&
	            (obj.signature = (0, helpers_1.base64FromBytes)(message.signature !== undefined ? message.signature : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseProposal();
	        message.type = object.type ?? 0;
	        message.height =
	            object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO;
	        message.round = object.round ?? 0;
	        message.polRound = object.polRound ?? 0;
	        message.blockId =
	            object.blockId !== undefined && object.blockId !== null
	                ? exports.BlockID.fromPartial(object.blockId)
	                : undefined;
	        message.timestamp =
	            object.timestamp !== undefined && object.timestamp !== null
	                ? timestamp_1.Timestamp.fromPartial(object.timestamp)
	                : undefined;
	        message.signature = object.signature ?? new Uint8Array();
	        return message;
	    },
	};
	function createBaseSignedHeader() {
	    return {
	        header: undefined,
	        commit: undefined,
	    };
	}
	exports.SignedHeader = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.header !== undefined) {
	            exports.Header.encode(message.header, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.commit !== undefined) {
	            exports.Commit.encode(message.commit, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseSignedHeader();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.header = exports.Header.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.commit = exports.Commit.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            header: (0, helpers_1.isSet)(object.header) ? exports.Header.fromJSON(object.header) : undefined,
	            commit: (0, helpers_1.isSet)(object.commit) ? exports.Commit.fromJSON(object.commit) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.header !== undefined && (obj.header = message.header ? exports.Header.toJSON(message.header) : undefined);
	        message.commit !== undefined && (obj.commit = message.commit ? exports.Commit.toJSON(message.commit) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseSignedHeader();
	        message.header =
	            object.header !== undefined && object.header !== null ? exports.Header.fromPartial(object.header) : undefined;
	        message.commit =
	            object.commit !== undefined && object.commit !== null ? exports.Commit.fromPartial(object.commit) : undefined;
	        return message;
	    },
	};
	function createBaseLightBlock() {
	    return {
	        signedHeader: undefined,
	        validatorSet: undefined,
	    };
	}
	exports.LightBlock = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.signedHeader !== undefined) {
	            exports.SignedHeader.encode(message.signedHeader, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.validatorSet !== undefined) {
	            validator_1.ValidatorSet.encode(message.validatorSet, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseLightBlock();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.signedHeader = exports.SignedHeader.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.validatorSet = validator_1.ValidatorSet.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            signedHeader: (0, helpers_1.isSet)(object.signedHeader) ? exports.SignedHeader.fromJSON(object.signedHeader) : undefined,
	            validatorSet: (0, helpers_1.isSet)(object.validatorSet) ? validator_1.ValidatorSet.fromJSON(object.validatorSet) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.signedHeader !== undefined &&
	            (obj.signedHeader = message.signedHeader ? exports.SignedHeader.toJSON(message.signedHeader) : undefined);
	        message.validatorSet !== undefined &&
	            (obj.validatorSet = message.validatorSet ? validator_1.ValidatorSet.toJSON(message.validatorSet) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseLightBlock();
	        message.signedHeader =
	            object.signedHeader !== undefined && object.signedHeader !== null
	                ? exports.SignedHeader.fromPartial(object.signedHeader)
	                : undefined;
	        message.validatorSet =
	            object.validatorSet !== undefined && object.validatorSet !== null
	                ? validator_1.ValidatorSet.fromPartial(object.validatorSet)
	                : undefined;
	        return message;
	    },
	};
	function createBaseBlockMeta() {
	    return {
	        blockId: undefined,
	        blockSize: helpers_1.Long.ZERO,
	        header: undefined,
	        numTxs: helpers_1.Long.ZERO,
	    };
	}
	exports.BlockMeta = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.blockId !== undefined) {
	            exports.BlockID.encode(message.blockId, writer.uint32(10).fork()).ldelim();
	        }
	        if (!message.blockSize.isZero()) {
	            writer.uint32(16).int64(message.blockSize);
	        }
	        if (message.header !== undefined) {
	            exports.Header.encode(message.header, writer.uint32(26).fork()).ldelim();
	        }
	        if (!message.numTxs.isZero()) {
	            writer.uint32(32).int64(message.numTxs);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseBlockMeta();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.blockId = exports.BlockID.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.blockSize = reader.int64();
	                    break;
	                case 3:
	                    message.header = exports.Header.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.numTxs = reader.int64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            blockId: (0, helpers_1.isSet)(object.blockId) ? exports.BlockID.fromJSON(object.blockId) : undefined,
	            blockSize: (0, helpers_1.isSet)(object.blockSize) ? helpers_1.Long.fromValue(object.blockSize) : helpers_1.Long.ZERO,
	            header: (0, helpers_1.isSet)(object.header) ? exports.Header.fromJSON(object.header) : undefined,
	            numTxs: (0, helpers_1.isSet)(object.numTxs) ? helpers_1.Long.fromValue(object.numTxs) : helpers_1.Long.ZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.blockId !== undefined &&
	            (obj.blockId = message.blockId ? exports.BlockID.toJSON(message.blockId) : undefined);
	        message.blockSize !== undefined && (obj.blockSize = (message.blockSize || helpers_1.Long.ZERO).toString());
	        message.header !== undefined && (obj.header = message.header ? exports.Header.toJSON(message.header) : undefined);
	        message.numTxs !== undefined && (obj.numTxs = (message.numTxs || helpers_1.Long.ZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseBlockMeta();
	        message.blockId =
	            object.blockId !== undefined && object.blockId !== null
	                ? exports.BlockID.fromPartial(object.blockId)
	                : undefined;
	        message.blockSize =
	            object.blockSize !== undefined && object.blockSize !== null
	                ? helpers_1.Long.fromValue(object.blockSize)
	                : helpers_1.Long.ZERO;
	        message.header =
	            object.header !== undefined && object.header !== null ? exports.Header.fromPartial(object.header) : undefined;
	        message.numTxs =
	            object.numTxs !== undefined && object.numTxs !== null ? helpers_1.Long.fromValue(object.numTxs) : helpers_1.Long.ZERO;
	        return message;
	    },
	};
	function createBaseTxProof() {
	    return {
	        rootHash: new Uint8Array(),
	        data: new Uint8Array(),
	        proof: undefined,
	    };
	}
	exports.TxProof = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.rootHash.length !== 0) {
	            writer.uint32(10).bytes(message.rootHash);
	        }
	        if (message.data.length !== 0) {
	            writer.uint32(18).bytes(message.data);
	        }
	        if (message.proof !== undefined) {
	            proof_1.Proof.encode(message.proof, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseTxProof();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.rootHash = reader.bytes();
	                    break;
	                case 2:
	                    message.data = reader.bytes();
	                    break;
	                case 3:
	                    message.proof = proof_1.Proof.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            rootHash: (0, helpers_1.isSet)(object.rootHash) ? (0, helpers_1.bytesFromBase64)(object.rootHash) : new Uint8Array(),
	            data: (0, helpers_1.isSet)(object.data) ? (0, helpers_1.bytesFromBase64)(object.data) : new Uint8Array(),
	            proof: (0, helpers_1.isSet)(object.proof) ? proof_1.Proof.fromJSON(object.proof) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.rootHash !== undefined &&
	            (obj.rootHash = (0, helpers_1.base64FromBytes)(message.rootHash !== undefined ? message.rootHash : new Uint8Array()));
	        message.data !== undefined &&
	            (obj.data = (0, helpers_1.base64FromBytes)(message.data !== undefined ? message.data : new Uint8Array()));
	        message.proof !== undefined && (obj.proof = message.proof ? proof_1.Proof.toJSON(message.proof) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseTxProof();
	        message.rootHash = object.rootHash ?? new Uint8Array();
	        message.data = object.data ?? new Uint8Array();
	        message.proof =
	            object.proof !== undefined && object.proof !== null ? proof_1.Proof.fromPartial(object.proof) : undefined;
	        return message;
	    },
	};
	
} (types$4));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Fraction = exports.Header = exports.Misbehaviour = exports.ConsensusState = exports.ClientState = exports.protobufPackage = void 0;
	/* eslint-disable */
	const duration_1 = duration;
	const client_1 = client;
	const proofs_1 = proofs;
	const timestamp_1 = timestamp;
	const commitment_1 = commitment;
	const types_1 = types$4;
	const validator_1 = validator$2;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "ibc.lightclients.tendermint.v1";
	function createBaseClientState() {
	    return {
	        chainId: "",
	        trustLevel: undefined,
	        trustingPeriod: undefined,
	        unbondingPeriod: undefined,
	        maxClockDrift: undefined,
	        frozenHeight: undefined,
	        latestHeight: undefined,
	        proofSpecs: [],
	        upgradePath: [],
	        allowUpdateAfterExpiry: false,
	        allowUpdateAfterMisbehaviour: false,
	    };
	}
	exports.ClientState = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.chainId !== "") {
	            writer.uint32(10).string(message.chainId);
	        }
	        if (message.trustLevel !== undefined) {
	            exports.Fraction.encode(message.trustLevel, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.trustingPeriod !== undefined) {
	            duration_1.Duration.encode(message.trustingPeriod, writer.uint32(26).fork()).ldelim();
	        }
	        if (message.unbondingPeriod !== undefined) {
	            duration_1.Duration.encode(message.unbondingPeriod, writer.uint32(34).fork()).ldelim();
	        }
	        if (message.maxClockDrift !== undefined) {
	            duration_1.Duration.encode(message.maxClockDrift, writer.uint32(42).fork()).ldelim();
	        }
	        if (message.frozenHeight !== undefined) {
	            client_1.Height.encode(message.frozenHeight, writer.uint32(50).fork()).ldelim();
	        }
	        if (message.latestHeight !== undefined) {
	            client_1.Height.encode(message.latestHeight, writer.uint32(58).fork()).ldelim();
	        }
	        for (const v of message.proofSpecs) {
	            proofs_1.ProofSpec.encode(v, writer.uint32(66).fork()).ldelim();
	        }
	        for (const v of message.upgradePath) {
	            writer.uint32(74).string(v);
	        }
	        if (message.allowUpdateAfterExpiry === true) {
	            writer.uint32(80).bool(message.allowUpdateAfterExpiry);
	        }
	        if (message.allowUpdateAfterMisbehaviour === true) {
	            writer.uint32(88).bool(message.allowUpdateAfterMisbehaviour);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseClientState();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.chainId = reader.string();
	                    break;
	                case 2:
	                    message.trustLevel = exports.Fraction.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.trustingPeriod = duration_1.Duration.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.unbondingPeriod = duration_1.Duration.decode(reader, reader.uint32());
	                    break;
	                case 5:
	                    message.maxClockDrift = duration_1.Duration.decode(reader, reader.uint32());
	                    break;
	                case 6:
	                    message.frozenHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                case 7:
	                    message.latestHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                case 8:
	                    message.proofSpecs.push(proofs_1.ProofSpec.decode(reader, reader.uint32()));
	                    break;
	                case 9:
	                    message.upgradePath.push(reader.string());
	                    break;
	                case 10:
	                    message.allowUpdateAfterExpiry = reader.bool();
	                    break;
	                case 11:
	                    message.allowUpdateAfterMisbehaviour = reader.bool();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            chainId: (0, helpers_1.isSet)(object.chainId) ? String(object.chainId) : "",
	            trustLevel: (0, helpers_1.isSet)(object.trustLevel) ? exports.Fraction.fromJSON(object.trustLevel) : undefined,
	            trustingPeriod: (0, helpers_1.isSet)(object.trustingPeriod) ? duration_1.Duration.fromJSON(object.trustingPeriod) : undefined,
	            unbondingPeriod: (0, helpers_1.isSet)(object.unbondingPeriod) ? duration_1.Duration.fromJSON(object.unbondingPeriod) : undefined,
	            maxClockDrift: (0, helpers_1.isSet)(object.maxClockDrift) ? duration_1.Duration.fromJSON(object.maxClockDrift) : undefined,
	            frozenHeight: (0, helpers_1.isSet)(object.frozenHeight) ? client_1.Height.fromJSON(object.frozenHeight) : undefined,
	            latestHeight: (0, helpers_1.isSet)(object.latestHeight) ? client_1.Height.fromJSON(object.latestHeight) : undefined,
	            proofSpecs: Array.isArray(object?.proofSpecs)
	                ? object.proofSpecs.map((e) => proofs_1.ProofSpec.fromJSON(e))
	                : [],
	            upgradePath: Array.isArray(object?.upgradePath) ? object.upgradePath.map((e) => String(e)) : [],
	            allowUpdateAfterExpiry: (0, helpers_1.isSet)(object.allowUpdateAfterExpiry)
	                ? Boolean(object.allowUpdateAfterExpiry)
	                : false,
	            allowUpdateAfterMisbehaviour: (0, helpers_1.isSet)(object.allowUpdateAfterMisbehaviour)
	                ? Boolean(object.allowUpdateAfterMisbehaviour)
	                : false,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.chainId !== undefined && (obj.chainId = message.chainId);
	        message.trustLevel !== undefined &&
	            (obj.trustLevel = message.trustLevel ? exports.Fraction.toJSON(message.trustLevel) : undefined);
	        message.trustingPeriod !== undefined &&
	            (obj.trustingPeriod = message.trustingPeriod ? duration_1.Duration.toJSON(message.trustingPeriod) : undefined);
	        message.unbondingPeriod !== undefined &&
	            (obj.unbondingPeriod = message.unbondingPeriod ? duration_1.Duration.toJSON(message.unbondingPeriod) : undefined);
	        message.maxClockDrift !== undefined &&
	            (obj.maxClockDrift = message.maxClockDrift ? duration_1.Duration.toJSON(message.maxClockDrift) : undefined);
	        message.frozenHeight !== undefined &&
	            (obj.frozenHeight = message.frozenHeight ? client_1.Height.toJSON(message.frozenHeight) : undefined);
	        message.latestHeight !== undefined &&
	            (obj.latestHeight = message.latestHeight ? client_1.Height.toJSON(message.latestHeight) : undefined);
	        if (message.proofSpecs) {
	            obj.proofSpecs = message.proofSpecs.map((e) => (e ? proofs_1.ProofSpec.toJSON(e) : undefined));
	        }
	        else {
	            obj.proofSpecs = [];
	        }
	        if (message.upgradePath) {
	            obj.upgradePath = message.upgradePath.map((e) => e);
	        }
	        else {
	            obj.upgradePath = [];
	        }
	        message.allowUpdateAfterExpiry !== undefined &&
	            (obj.allowUpdateAfterExpiry = message.allowUpdateAfterExpiry);
	        message.allowUpdateAfterMisbehaviour !== undefined &&
	            (obj.allowUpdateAfterMisbehaviour = message.allowUpdateAfterMisbehaviour);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseClientState();
	        message.chainId = object.chainId ?? "";
	        message.trustLevel =
	            object.trustLevel !== undefined && object.trustLevel !== null
	                ? exports.Fraction.fromPartial(object.trustLevel)
	                : undefined;
	        message.trustingPeriod =
	            object.trustingPeriod !== undefined && object.trustingPeriod !== null
	                ? duration_1.Duration.fromPartial(object.trustingPeriod)
	                : undefined;
	        message.unbondingPeriod =
	            object.unbondingPeriod !== undefined && object.unbondingPeriod !== null
	                ? duration_1.Duration.fromPartial(object.unbondingPeriod)
	                : undefined;
	        message.maxClockDrift =
	            object.maxClockDrift !== undefined && object.maxClockDrift !== null
	                ? duration_1.Duration.fromPartial(object.maxClockDrift)
	                : undefined;
	        message.frozenHeight =
	            object.frozenHeight !== undefined && object.frozenHeight !== null
	                ? client_1.Height.fromPartial(object.frozenHeight)
	                : undefined;
	        message.latestHeight =
	            object.latestHeight !== undefined && object.latestHeight !== null
	                ? client_1.Height.fromPartial(object.latestHeight)
	                : undefined;
	        message.proofSpecs = object.proofSpecs?.map((e) => proofs_1.ProofSpec.fromPartial(e)) || [];
	        message.upgradePath = object.upgradePath?.map((e) => e) || [];
	        message.allowUpdateAfterExpiry = object.allowUpdateAfterExpiry ?? false;
	        message.allowUpdateAfterMisbehaviour = object.allowUpdateAfterMisbehaviour ?? false;
	        return message;
	    },
	};
	function createBaseConsensusState() {
	    return {
	        timestamp: undefined,
	        root: undefined,
	        nextValidatorsHash: new Uint8Array(),
	    };
	}
	exports.ConsensusState = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.timestamp !== undefined) {
	            timestamp_1.Timestamp.encode(message.timestamp, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.root !== undefined) {
	            commitment_1.MerkleRoot.encode(message.root, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.nextValidatorsHash.length !== 0) {
	            writer.uint32(26).bytes(message.nextValidatorsHash);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseConsensusState();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.timestamp = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.root = commitment_1.MerkleRoot.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.nextValidatorsHash = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            timestamp: (0, helpers_1.isSet)(object.timestamp) ? (0, helpers_1.fromJsonTimestamp)(object.timestamp) : undefined,
	            root: (0, helpers_1.isSet)(object.root) ? commitment_1.MerkleRoot.fromJSON(object.root) : undefined,
	            nextValidatorsHash: (0, helpers_1.isSet)(object.nextValidatorsHash)
	                ? (0, helpers_1.bytesFromBase64)(object.nextValidatorsHash)
	                : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.timestamp !== undefined && (obj.timestamp = (0, helpers_1.fromTimestamp)(message.timestamp).toISOString());
	        message.root !== undefined && (obj.root = message.root ? commitment_1.MerkleRoot.toJSON(message.root) : undefined);
	        message.nextValidatorsHash !== undefined &&
	            (obj.nextValidatorsHash = (0, helpers_1.base64FromBytes)(message.nextValidatorsHash !== undefined ? message.nextValidatorsHash : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseConsensusState();
	        message.timestamp =
	            object.timestamp !== undefined && object.timestamp !== null
	                ? timestamp_1.Timestamp.fromPartial(object.timestamp)
	                : undefined;
	        message.root =
	            object.root !== undefined && object.root !== null ? commitment_1.MerkleRoot.fromPartial(object.root) : undefined;
	        message.nextValidatorsHash = object.nextValidatorsHash ?? new Uint8Array();
	        return message;
	    },
	};
	function createBaseMisbehaviour() {
	    return {
	        clientId: "",
	        header1: undefined,
	        header2: undefined,
	    };
	}
	exports.Misbehaviour = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.clientId !== "") {
	            writer.uint32(10).string(message.clientId);
	        }
	        if (message.header1 !== undefined) {
	            exports.Header.encode(message.header1, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.header2 !== undefined) {
	            exports.Header.encode(message.header2, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMisbehaviour();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.clientId = reader.string();
	                    break;
	                case 2:
	                    message.header1 = exports.Header.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.header2 = exports.Header.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            clientId: (0, helpers_1.isSet)(object.clientId) ? String(object.clientId) : "",
	            header1: (0, helpers_1.isSet)(object.header1) ? exports.Header.fromJSON(object.header1) : undefined,
	            header2: (0, helpers_1.isSet)(object.header2) ? exports.Header.fromJSON(object.header2) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.clientId !== undefined && (obj.clientId = message.clientId);
	        message.header1 !== undefined &&
	            (obj.header1 = message.header1 ? exports.Header.toJSON(message.header1) : undefined);
	        message.header2 !== undefined &&
	            (obj.header2 = message.header2 ? exports.Header.toJSON(message.header2) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMisbehaviour();
	        message.clientId = object.clientId ?? "";
	        message.header1 =
	            object.header1 !== undefined && object.header1 !== null
	                ? exports.Header.fromPartial(object.header1)
	                : undefined;
	        message.header2 =
	            object.header2 !== undefined && object.header2 !== null
	                ? exports.Header.fromPartial(object.header2)
	                : undefined;
	        return message;
	    },
	};
	function createBaseHeader() {
	    return {
	        signedHeader: undefined,
	        validatorSet: undefined,
	        trustedHeight: undefined,
	        trustedValidators: undefined,
	    };
	}
	exports.Header = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.signedHeader !== undefined) {
	            types_1.SignedHeader.encode(message.signedHeader, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.validatorSet !== undefined) {
	            validator_1.ValidatorSet.encode(message.validatorSet, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.trustedHeight !== undefined) {
	            client_1.Height.encode(message.trustedHeight, writer.uint32(26).fork()).ldelim();
	        }
	        if (message.trustedValidators !== undefined) {
	            validator_1.ValidatorSet.encode(message.trustedValidators, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseHeader();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.signedHeader = types_1.SignedHeader.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.validatorSet = validator_1.ValidatorSet.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.trustedHeight = client_1.Height.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.trustedValidators = validator_1.ValidatorSet.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            signedHeader: (0, helpers_1.isSet)(object.signedHeader) ? types_1.SignedHeader.fromJSON(object.signedHeader) : undefined,
	            validatorSet: (0, helpers_1.isSet)(object.validatorSet) ? validator_1.ValidatorSet.fromJSON(object.validatorSet) : undefined,
	            trustedHeight: (0, helpers_1.isSet)(object.trustedHeight) ? client_1.Height.fromJSON(object.trustedHeight) : undefined,
	            trustedValidators: (0, helpers_1.isSet)(object.trustedValidators)
	                ? validator_1.ValidatorSet.fromJSON(object.trustedValidators)
	                : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.signedHeader !== undefined &&
	            (obj.signedHeader = message.signedHeader ? types_1.SignedHeader.toJSON(message.signedHeader) : undefined);
	        message.validatorSet !== undefined &&
	            (obj.validatorSet = message.validatorSet ? validator_1.ValidatorSet.toJSON(message.validatorSet) : undefined);
	        message.trustedHeight !== undefined &&
	            (obj.trustedHeight = message.trustedHeight ? client_1.Height.toJSON(message.trustedHeight) : undefined);
	        message.trustedValidators !== undefined &&
	            (obj.trustedValidators = message.trustedValidators
	                ? validator_1.ValidatorSet.toJSON(message.trustedValidators)
	                : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseHeader();
	        message.signedHeader =
	            object.signedHeader !== undefined && object.signedHeader !== null
	                ? types_1.SignedHeader.fromPartial(object.signedHeader)
	                : undefined;
	        message.validatorSet =
	            object.validatorSet !== undefined && object.validatorSet !== null
	                ? validator_1.ValidatorSet.fromPartial(object.validatorSet)
	                : undefined;
	        message.trustedHeight =
	            object.trustedHeight !== undefined && object.trustedHeight !== null
	                ? client_1.Height.fromPartial(object.trustedHeight)
	                : undefined;
	        message.trustedValidators =
	            object.trustedValidators !== undefined && object.trustedValidators !== null
	                ? validator_1.ValidatorSet.fromPartial(object.trustedValidators)
	                : undefined;
	        return message;
	    },
	};
	function createBaseFraction() {
	    return {
	        numerator: helpers_1.Long.UZERO,
	        denominator: helpers_1.Long.UZERO,
	    };
	}
	exports.Fraction = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.numerator.isZero()) {
	            writer.uint32(8).uint64(message.numerator);
	        }
	        if (!message.denominator.isZero()) {
	            writer.uint32(16).uint64(message.denominator);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseFraction();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.numerator = reader.uint64();
	                    break;
	                case 2:
	                    message.denominator = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            numerator: (0, helpers_1.isSet)(object.numerator) ? helpers_1.Long.fromValue(object.numerator) : helpers_1.Long.UZERO,
	            denominator: (0, helpers_1.isSet)(object.denominator) ? helpers_1.Long.fromValue(object.denominator) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.numerator !== undefined && (obj.numerator = (message.numerator || helpers_1.Long.UZERO).toString());
	        message.denominator !== undefined && (obj.denominator = (message.denominator || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseFraction();
	        message.numerator =
	            object.numerator !== undefined && object.numerator !== null
	                ? helpers_1.Long.fromValue(object.numerator)
	                : helpers_1.Long.UZERO;
	        message.denominator =
	            object.denominator !== undefined && object.denominator !== null
	                ? helpers_1.Long.fromValue(object.denominator)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	
} (tendermint));

var __importDefault$6 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(queries$4, "__esModule", { value: true });
queries$4.setupIbcExtension = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const encoding_1$a = build$6;
const math_1$4 = build$a;
const query_1$3 = query$6;
const channel_1 = channel;
const query_2 = query$5;
const query_3 = query$4;
const query_4 = query$3;
const tendermint_1 = tendermint;
const long_1$4 = __importDefault$6(long);
const queryclient_1$5 = queryclient$1;
function decodeTendermintClientStateAny(clientState) {
    if (clientState?.typeUrl !== "/ibc.lightclients.tendermint.v1.ClientState") {
        throw new Error(`Unexpected client state type: ${clientState?.typeUrl}`);
    }
    return tendermint_1.ClientState.decode(clientState.value);
}
function decodeTendermintConsensusStateAny(clientState) {
    if (clientState?.typeUrl !== "/ibc.lightclients.tendermint.v1.ConsensusState") {
        throw new Error(`Unexpected client state type: ${clientState?.typeUrl}`);
    }
    return tendermint_1.ConsensusState.decode(clientState.value);
}
function setupIbcExtension(base) {
    const rpc = (0, queryclient_1$5.createProtobufRpcClient)(base);
    // Use these services to get easy typed access to query methods
    // These cannot be used for proof verification
    const channelQueryService = new query_2.QueryClientImpl(rpc);
    const clientQueryService = new query_3.QueryClientImpl(rpc);
    const connectionQueryService = new query_4.QueryClientImpl(rpc);
    const transferQueryService = new query_1$3.QueryClientImpl(rpc);
    return {
        ibc: {
            channel: {
                channel: async (portId, channelId) => channelQueryService.Channel({
                    portId: portId,
                    channelId: channelId,
                }),
                channels: async (paginationKey) => channelQueryService.Channels({
                    pagination: (0, queryclient_1$5.createPagination)(paginationKey),
                }),
                allChannels: async () => {
                    const channels = [];
                    let response;
                    let key;
                    do {
                        response = await channelQueryService.Channels({
                            pagination: (0, queryclient_1$5.createPagination)(key),
                        });
                        channels.push(...response.channels);
                        key = response.pagination?.nextKey;
                    } while (key && key.length);
                    return {
                        channels: channels,
                        height: response.height,
                    };
                },
                connectionChannels: async (connection, paginationKey) => channelQueryService.ConnectionChannels({
                    connection: connection,
                    pagination: (0, queryclient_1$5.createPagination)(paginationKey),
                }),
                allConnectionChannels: async (connection) => {
                    const channels = [];
                    let response;
                    let key;
                    do {
                        response = await channelQueryService.ConnectionChannels({
                            connection: connection,
                            pagination: (0, queryclient_1$5.createPagination)(key),
                        });
                        channels.push(...response.channels);
                        key = response.pagination?.nextKey;
                    } while (key && key.length);
                    return {
                        channels: channels,
                        height: response.height,
                    };
                },
                clientState: async (portId, channelId) => channelQueryService.ChannelClientState({
                    portId: portId,
                    channelId: channelId,
                }),
                consensusState: async (portId, channelId, revisionNumber, revisionHeight) => channelQueryService.ChannelConsensusState({
                    portId: portId,
                    channelId: channelId,
                    revisionNumber: long_1$4.default.fromNumber(revisionNumber, true),
                    revisionHeight: long_1$4.default.fromNumber(revisionHeight, true),
                }),
                packetCommitment: async (portId, channelId, sequence) => channelQueryService.PacketCommitment({
                    portId: portId,
                    channelId: channelId,
                    sequence: long_1$4.default.fromNumber(sequence, true),
                }),
                packetCommitments: async (portId, channelId, paginationKey) => channelQueryService.PacketCommitments({
                    channelId: channelId,
                    portId: portId,
                    pagination: (0, queryclient_1$5.createPagination)(paginationKey),
                }),
                allPacketCommitments: async (portId, channelId) => {
                    const commitments = [];
                    let response;
                    let key;
                    do {
                        response = await channelQueryService.PacketCommitments({
                            channelId: channelId,
                            portId: portId,
                            pagination: (0, queryclient_1$5.createPagination)(key),
                        });
                        commitments.push(...response.commitments);
                        key = response.pagination?.nextKey;
                    } while (key && key.length);
                    return {
                        commitments: commitments,
                        height: response.height,
                    };
                },
                packetReceipt: async (portId, channelId, sequence) => channelQueryService.PacketReceipt({
                    portId: portId,
                    channelId: channelId,
                    sequence: long_1$4.default.fromNumber(sequence, true),
                }),
                packetAcknowledgement: async (portId, channelId, sequence) => channelQueryService.PacketAcknowledgement({
                    portId: portId,
                    channelId: channelId,
                    sequence: long_1$4.default.fromNumber(sequence, true),
                }),
                packetAcknowledgements: async (portId, channelId, paginationKey) => {
                    const request = query_2.QueryPacketAcknowledgementsRequest.fromPartial({
                        portId: portId,
                        channelId: channelId,
                        pagination: (0, queryclient_1$5.createPagination)(paginationKey),
                    });
                    return channelQueryService.PacketAcknowledgements(request);
                },
                allPacketAcknowledgements: async (portId, channelId) => {
                    const acknowledgements = [];
                    let response;
                    let key;
                    do {
                        const request = query_2.QueryPacketAcknowledgementsRequest.fromPartial({
                            channelId: channelId,
                            portId: portId,
                            pagination: (0, queryclient_1$5.createPagination)(key),
                        });
                        response = await channelQueryService.PacketAcknowledgements(request);
                        acknowledgements.push(...response.acknowledgements);
                        key = response.pagination?.nextKey;
                    } while (key && key.length);
                    return {
                        acknowledgements: acknowledgements,
                        height: response.height,
                    };
                },
                unreceivedPackets: async (portId, channelId, packetCommitmentSequences) => channelQueryService.UnreceivedPackets({
                    portId: portId,
                    channelId: channelId,
                    packetCommitmentSequences: packetCommitmentSequences.map((s) => long_1$4.default.fromNumber(s, true)),
                }),
                unreceivedAcks: async (portId, channelId, packetAckSequences) => channelQueryService.UnreceivedAcks({
                    portId: portId,
                    channelId: channelId,
                    packetAckSequences: packetAckSequences.map((s) => long_1$4.default.fromNumber(s, true)),
                }),
                nextSequenceReceive: async (portId, channelId) => channelQueryService.NextSequenceReceive({
                    portId: portId,
                    channelId: channelId,
                }),
            },
            client: {
                state: async (clientId) => clientQueryService.ClientState({ clientId }),
                states: async (paginationKey) => clientQueryService.ClientStates({
                    pagination: (0, queryclient_1$5.createPagination)(paginationKey),
                }),
                allStates: async () => {
                    const clientStates = [];
                    let response;
                    let key;
                    do {
                        response = await clientQueryService.ClientStates({
                            pagination: (0, queryclient_1$5.createPagination)(key),
                        });
                        clientStates.push(...response.clientStates);
                        key = response.pagination?.nextKey;
                    } while (key && key.length);
                    return {
                        clientStates: clientStates,
                    };
                },
                consensusState: async (clientId, consensusHeight) => clientQueryService.ConsensusState(query_3.QueryConsensusStateRequest.fromPartial({
                    clientId: clientId,
                    revisionHeight: consensusHeight !== undefined ? long_1$4.default.fromNumber(consensusHeight, true) : undefined,
                    latestHeight: consensusHeight === undefined,
                })),
                consensusStates: async (clientId, paginationKey) => clientQueryService.ConsensusStates({
                    clientId: clientId,
                    pagination: (0, queryclient_1$5.createPagination)(paginationKey),
                }),
                allConsensusStates: async (clientId) => {
                    const consensusStates = [];
                    let response;
                    let key;
                    do {
                        response = await clientQueryService.ConsensusStates({
                            clientId: clientId,
                            pagination: (0, queryclient_1$5.createPagination)(key),
                        });
                        consensusStates.push(...response.consensusStates);
                        key = response.pagination?.nextKey;
                    } while (key && key.length);
                    return {
                        consensusStates: consensusStates,
                    };
                },
                params: async () => clientQueryService.ClientParams({}),
                stateTm: async (clientId) => {
                    const response = await clientQueryService.ClientState({ clientId });
                    return decodeTendermintClientStateAny(response.clientState);
                },
                statesTm: async (paginationKey) => {
                    const { clientStates } = await clientQueryService.ClientStates({
                        pagination: (0, queryclient_1$5.createPagination)(paginationKey),
                    });
                    return clientStates.map(({ clientState }) => decodeTendermintClientStateAny(clientState));
                },
                allStatesTm: async () => {
                    const clientStates = [];
                    let response;
                    let key;
                    do {
                        response = await clientQueryService.ClientStates({
                            pagination: (0, queryclient_1$5.createPagination)(key),
                        });
                        clientStates.push(...response.clientStates);
                        key = response.pagination?.nextKey;
                    } while (key && key.length);
                    return clientStates.map(({ clientState }) => decodeTendermintClientStateAny(clientState));
                },
                consensusStateTm: async (clientId, consensusHeight) => {
                    const response = await clientQueryService.ConsensusState(query_3.QueryConsensusStateRequest.fromPartial({
                        clientId: clientId,
                        revisionHeight: consensusHeight?.revisionHeight,
                        revisionNumber: consensusHeight?.revisionNumber,
                        latestHeight: consensusHeight === undefined,
                    }));
                    return decodeTendermintConsensusStateAny(response.consensusState);
                },
            },
            connection: {
                connection: async (connectionId) => connectionQueryService.Connection({
                    connectionId: connectionId,
                }),
                connections: async (paginationKey) => connectionQueryService.Connections({
                    pagination: (0, queryclient_1$5.createPagination)(paginationKey),
                }),
                allConnections: async () => {
                    const connections = [];
                    let response;
                    let key;
                    do {
                        response = await connectionQueryService.Connections({
                            pagination: (0, queryclient_1$5.createPagination)(key),
                        });
                        connections.push(...response.connections);
                        key = response.pagination?.nextKey;
                    } while (key && key.length);
                    return {
                        connections: connections,
                        height: response.height,
                    };
                },
                clientConnections: async (clientId) => connectionQueryService.ClientConnections({
                    clientId: clientId,
                }),
                clientState: async (connectionId) => connectionQueryService.ConnectionClientState({
                    connectionId: connectionId,
                }),
                consensusState: async (connectionId, revisionHeight) => connectionQueryService.ConnectionConsensusState(query_4.QueryConnectionConsensusStateRequest.fromPartial({
                    connectionId: connectionId,
                    revisionHeight: long_1$4.default.fromNumber(revisionHeight, true),
                })),
            },
            transfer: {
                denomTrace: async (hash) => transferQueryService.DenomTrace({ hash: hash }),
                denomTraces: async (paginationKey) => transferQueryService.DenomTraces({
                    pagination: (0, queryclient_1$5.createPagination)(paginationKey),
                }),
                allDenomTraces: async () => {
                    const denomTraces = [];
                    let response;
                    let key;
                    do {
                        response = await transferQueryService.DenomTraces({
                            pagination: (0, queryclient_1$5.createPagination)(key),
                        });
                        denomTraces.push(...response.denomTraces);
                        key = response.pagination?.nextKey;
                    } while (key && key.length);
                    return {
                        denomTraces: denomTraces,
                    };
                },
                params: async () => transferQueryService.Params({}),
            },
            verified: {
                channel: {
                    channel: async (portId, channelId) => {
                        // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L55-L65
                        // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L117-L120
                        const key = (0, encoding_1$a.toAscii)(`channelEnds/ports/${portId}/channels/${channelId}`);
                        const { value } = await base.queryStoreVerified("ibc", key);
                        return value.length ? channel_1.Channel.decode(value) : null;
                    },
                    packetCommitment: async (portId, channelId, sequence) => {
                        // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L128-L133
                        // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L183-L185
                        const key = (0, encoding_1$a.toAscii)(`commitments/ports/${portId}/channels/${channelId}/packets/${sequence}`);
                        const { value } = await base.queryStoreVerified("ibc", key);
                        // keeper code doesn't parse, but returns raw
                        return value;
                    },
                    packetAcknowledgement: async (portId, channelId, sequence) => {
                        // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L159-L166
                        // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L153-L156
                        const key = (0, encoding_1$a.toAscii)(`acks/ports/${portId}/channels/${channelId}/acknowledgements/${sequence}`);
                        const { value } = await base.queryStoreVerified("ibc", key);
                        // keeper code doesn't parse, but returns raw
                        return value;
                    },
                    nextSequenceReceive: async (portId, channelId) => {
                        // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L92-L101
                        // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L133-L136
                        const key = (0, encoding_1$a.toAscii)(`seqAcks/ports/${portId}/channels/${channelId}/nextSequenceAck`);
                        const { value } = await base.queryStoreVerified("ibc", key);
                        return value.length ? math_1$4.Uint64.fromBytes(value).toNumber() : null;
                    },
                },
            },
        },
    };
}
queries$4.setupIbcExtension = setupIbcExtension;

var queries$3 = {};

var query$2 = {};

var mint = {};

var __createBinding$6 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$6 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$6 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$6(result, mod, k);
    __setModuleDefault$6(result, mod);
    return result;
};
Object.defineProperty(mint, "__esModule", { value: true });
mint.Params = mint.Minter = mint.protobufPackage = void 0;
/* eslint-disable */
const _m0$2 = __importStar$6(minimal);
const helpers_1$2 = helpers;
mint.protobufPackage = "cosmos.mint.v1beta1";
function createBaseMinter() {
    return {
        inflation: "",
        annualProvisions: "",
    };
}
mint.Minter = {
    encode(message, writer = _m0$2.Writer.create()) {
        if (message.inflation !== "") {
            writer.uint32(10).string(message.inflation);
        }
        if (message.annualProvisions !== "") {
            writer.uint32(18).string(message.annualProvisions);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$2.Reader ? input : new _m0$2.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMinter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.inflation = reader.string();
                    break;
                case 2:
                    message.annualProvisions = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            inflation: (0, helpers_1$2.isSet)(object.inflation) ? String(object.inflation) : "",
            annualProvisions: (0, helpers_1$2.isSet)(object.annualProvisions) ? String(object.annualProvisions) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.inflation !== undefined && (obj.inflation = message.inflation);
        message.annualProvisions !== undefined && (obj.annualProvisions = message.annualProvisions);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMinter();
        message.inflation = object.inflation ?? "";
        message.annualProvisions = object.annualProvisions ?? "";
        return message;
    },
};
function createBaseParams$4() {
    return {
        mintDenom: "",
        inflationRateChange: "",
        inflationMax: "",
        inflationMin: "",
        goalBonded: "",
        blocksPerYear: helpers_1$2.Long.UZERO,
    };
}
mint.Params = {
    encode(message, writer = _m0$2.Writer.create()) {
        if (message.mintDenom !== "") {
            writer.uint32(10).string(message.mintDenom);
        }
        if (message.inflationRateChange !== "") {
            writer.uint32(18).string(message.inflationRateChange);
        }
        if (message.inflationMax !== "") {
            writer.uint32(26).string(message.inflationMax);
        }
        if (message.inflationMin !== "") {
            writer.uint32(34).string(message.inflationMin);
        }
        if (message.goalBonded !== "") {
            writer.uint32(42).string(message.goalBonded);
        }
        if (!message.blocksPerYear.isZero()) {
            writer.uint32(48).uint64(message.blocksPerYear);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$2.Reader ? input : new _m0$2.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams$4();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mintDenom = reader.string();
                    break;
                case 2:
                    message.inflationRateChange = reader.string();
                    break;
                case 3:
                    message.inflationMax = reader.string();
                    break;
                case 4:
                    message.inflationMin = reader.string();
                    break;
                case 5:
                    message.goalBonded = reader.string();
                    break;
                case 6:
                    message.blocksPerYear = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            mintDenom: (0, helpers_1$2.isSet)(object.mintDenom) ? String(object.mintDenom) : "",
            inflationRateChange: (0, helpers_1$2.isSet)(object.inflationRateChange) ? String(object.inflationRateChange) : "",
            inflationMax: (0, helpers_1$2.isSet)(object.inflationMax) ? String(object.inflationMax) : "",
            inflationMin: (0, helpers_1$2.isSet)(object.inflationMin) ? String(object.inflationMin) : "",
            goalBonded: (0, helpers_1$2.isSet)(object.goalBonded) ? String(object.goalBonded) : "",
            blocksPerYear: (0, helpers_1$2.isSet)(object.blocksPerYear) ? helpers_1$2.Long.fromValue(object.blocksPerYear) : helpers_1$2.Long.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.mintDenom !== undefined && (obj.mintDenom = message.mintDenom);
        message.inflationRateChange !== undefined && (obj.inflationRateChange = message.inflationRateChange);
        message.inflationMax !== undefined && (obj.inflationMax = message.inflationMax);
        message.inflationMin !== undefined && (obj.inflationMin = message.inflationMin);
        message.goalBonded !== undefined && (obj.goalBonded = message.goalBonded);
        message.blocksPerYear !== undefined &&
            (obj.blocksPerYear = (message.blocksPerYear || helpers_1$2.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseParams$4();
        message.mintDenom = object.mintDenom ?? "";
        message.inflationRateChange = object.inflationRateChange ?? "";
        message.inflationMax = object.inflationMax ?? "";
        message.inflationMin = object.inflationMin ?? "";
        message.goalBonded = object.goalBonded ?? "";
        message.blocksPerYear =
            object.blocksPerYear !== undefined && object.blocksPerYear !== null
                ? helpers_1$2.Long.fromValue(object.blocksPerYear)
                : helpers_1$2.Long.UZERO;
        return message;
    },
};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.QueryClientImpl = exports.QueryAnnualProvisionsResponse = exports.QueryAnnualProvisionsRequest = exports.QueryInflationResponse = exports.QueryInflationRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
	/* eslint-disable */
	const mint_1 = mint;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.mint.v1beta1";
	function createBaseQueryParamsRequest() {
	    return {};
	}
	exports.QueryParamsRequest = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryParamsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseQueryParamsRequest();
	        return message;
	    },
	};
	function createBaseQueryParamsResponse() {
	    return {
	        params: undefined,
	    };
	}
	exports.QueryParamsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.params !== undefined) {
	            mint_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryParamsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.params = mint_1.Params.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            params: (0, helpers_1.isSet)(object.params) ? mint_1.Params.fromJSON(object.params) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.params !== undefined && (obj.params = message.params ? mint_1.Params.toJSON(message.params) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryParamsResponse();
	        message.params =
	            object.params !== undefined && object.params !== null ? mint_1.Params.fromPartial(object.params) : undefined;
	        return message;
	    },
	};
	function createBaseQueryInflationRequest() {
	    return {};
	}
	exports.QueryInflationRequest = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryInflationRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseQueryInflationRequest();
	        return message;
	    },
	};
	function createBaseQueryInflationResponse() {
	    return {
	        inflation: new Uint8Array(),
	    };
	}
	exports.QueryInflationResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.inflation.length !== 0) {
	            writer.uint32(10).bytes(message.inflation);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryInflationResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.inflation = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            inflation: (0, helpers_1.isSet)(object.inflation) ? (0, helpers_1.bytesFromBase64)(object.inflation) : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.inflation !== undefined &&
	            (obj.inflation = (0, helpers_1.base64FromBytes)(message.inflation !== undefined ? message.inflation : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryInflationResponse();
	        message.inflation = object.inflation ?? new Uint8Array();
	        return message;
	    },
	};
	function createBaseQueryAnnualProvisionsRequest() {
	    return {};
	}
	exports.QueryAnnualProvisionsRequest = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryAnnualProvisionsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseQueryAnnualProvisionsRequest();
	        return message;
	    },
	};
	function createBaseQueryAnnualProvisionsResponse() {
	    return {
	        annualProvisions: new Uint8Array(),
	    };
	}
	exports.QueryAnnualProvisionsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.annualProvisions.length !== 0) {
	            writer.uint32(10).bytes(message.annualProvisions);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryAnnualProvisionsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.annualProvisions = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            annualProvisions: (0, helpers_1.isSet)(object.annualProvisions)
	                ? (0, helpers_1.bytesFromBase64)(object.annualProvisions)
	                : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.annualProvisions !== undefined &&
	            (obj.annualProvisions = (0, helpers_1.base64FromBytes)(message.annualProvisions !== undefined ? message.annualProvisions : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryAnnualProvisionsResponse();
	        message.annualProvisions = object.annualProvisions ?? new Uint8Array();
	        return message;
	    },
	};
	class QueryClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.Params = this.Params.bind(this);
	        this.Inflation = this.Inflation.bind(this);
	        this.AnnualProvisions = this.AnnualProvisions.bind(this);
	    }
	    Params(request = {}) {
	        const data = exports.QueryParamsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.mint.v1beta1.Query", "Params", data);
	        return promise.then((data) => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
	    }
	    Inflation(request = {}) {
	        const data = exports.QueryInflationRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.mint.v1beta1.Query", "Inflation", data);
	        return promise.then((data) => exports.QueryInflationResponse.decode(new _m0.Reader(data)));
	    }
	    AnnualProvisions(request = {}) {
	        const data = exports.QueryAnnualProvisionsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.mint.v1beta1.Query", "AnnualProvisions", data);
	        return promise.then((data) => exports.QueryAnnualProvisionsResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.QueryClientImpl = QueryClientImpl;
	
} (query$2));

Object.defineProperty(queries$3, "__esModule", { value: true });
queries$3.setupMintExtension = void 0;
const utils_1$4 = build$5;
const query_1$2 = query$2;
const queryclient_1$4 = queryclient$1;
function setupMintExtension(base) {
    const rpc = (0, queryclient_1$4.createProtobufRpcClient)(base);
    // Use this service to get easy typed access to query methods
    // This cannot be used for proof verification
    const queryService = new query_1$2.QueryClientImpl(rpc);
    return {
        mint: {
            params: async () => {
                const { params } = await queryService.Params({});
                (0, utils_1$4.assert)(params);
                return {
                    blocksPerYear: params.blocksPerYear,
                    goalBonded: (0, queryclient_1$4.decodeCosmosSdkDecFromProto)(params.goalBonded),
                    inflationMin: (0, queryclient_1$4.decodeCosmosSdkDecFromProto)(params.inflationMin),
                    inflationMax: (0, queryclient_1$4.decodeCosmosSdkDecFromProto)(params.inflationMax),
                    inflationRateChange: (0, queryclient_1$4.decodeCosmosSdkDecFromProto)(params.inflationRateChange),
                    mintDenom: params.mintDenom,
                };
            },
            inflation: async () => {
                const { inflation } = await queryService.Inflation({});
                return (0, queryclient_1$4.decodeCosmosSdkDecFromProto)(inflation);
            },
            annualProvisions: async () => {
                const { annualProvisions } = await queryService.AnnualProvisions({});
                return (0, queryclient_1$4.decodeCosmosSdkDecFromProto)(annualProvisions);
            },
        },
    };
}
queries$3.setupMintExtension = setupMintExtension;

var aminomessages$2 = {};

Object.defineProperty(aminomessages$2, "__esModule", { value: true });
aminomessages$2.createSlashingAminoConverters = aminomessages$2.isAminoMsgUnjail = void 0;
function isAminoMsgUnjail(msg) {
    return msg.type === "cosmos-sdk/MsgUnjail";
}
aminomessages$2.isAminoMsgUnjail = isAminoMsgUnjail;
function createSlashingAminoConverters() {
    throw new Error("Not implemented");
}
aminomessages$2.createSlashingAminoConverters = createSlashingAminoConverters;

var queries$2 = {};

var query$1 = {};

var slashing = {};

var __createBinding$5 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$5 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$5 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$5(result, mod, k);
    __setModuleDefault$5(result, mod);
    return result;
};
Object.defineProperty(slashing, "__esModule", { value: true });
slashing.Params = slashing.ValidatorSigningInfo = slashing.protobufPackage = void 0;
/* eslint-disable */
const timestamp_1 = timestamp;
const duration_1 = duration;
const helpers_1$1 = helpers;
const _m0$1 = __importStar$5(minimal);
slashing.protobufPackage = "cosmos.slashing.v1beta1";
function createBaseValidatorSigningInfo() {
    return {
        address: "",
        startHeight: helpers_1$1.Long.ZERO,
        indexOffset: helpers_1$1.Long.ZERO,
        jailedUntil: undefined,
        tombstoned: false,
        missedBlocksCounter: helpers_1$1.Long.ZERO,
    };
}
slashing.ValidatorSigningInfo = {
    encode(message, writer = _m0$1.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (!message.startHeight.isZero()) {
            writer.uint32(16).int64(message.startHeight);
        }
        if (!message.indexOffset.isZero()) {
            writer.uint32(24).int64(message.indexOffset);
        }
        if (message.jailedUntil !== undefined) {
            timestamp_1.Timestamp.encode(message.jailedUntil, writer.uint32(34).fork()).ldelim();
        }
        if (message.tombstoned === true) {
            writer.uint32(40).bool(message.tombstoned);
        }
        if (!message.missedBlocksCounter.isZero()) {
            writer.uint32(48).int64(message.missedBlocksCounter);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$1.Reader ? input : new _m0$1.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidatorSigningInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                case 2:
                    message.startHeight = reader.int64();
                    break;
                case 3:
                    message.indexOffset = reader.int64();
                    break;
                case 4:
                    message.jailedUntil = timestamp_1.Timestamp.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.tombstoned = reader.bool();
                    break;
                case 6:
                    message.missedBlocksCounter = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: (0, helpers_1$1.isSet)(object.address) ? String(object.address) : "",
            startHeight: (0, helpers_1$1.isSet)(object.startHeight) ? helpers_1$1.Long.fromValue(object.startHeight) : helpers_1$1.Long.ZERO,
            indexOffset: (0, helpers_1$1.isSet)(object.indexOffset) ? helpers_1$1.Long.fromValue(object.indexOffset) : helpers_1$1.Long.ZERO,
            jailedUntil: (0, helpers_1$1.isSet)(object.jailedUntil) ? (0, helpers_1$1.fromJsonTimestamp)(object.jailedUntil) : undefined,
            tombstoned: (0, helpers_1$1.isSet)(object.tombstoned) ? Boolean(object.tombstoned) : false,
            missedBlocksCounter: (0, helpers_1$1.isSet)(object.missedBlocksCounter)
                ? helpers_1$1.Long.fromValue(object.missedBlocksCounter)
                : helpers_1$1.Long.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.startHeight !== undefined && (obj.startHeight = (message.startHeight || helpers_1$1.Long.ZERO).toString());
        message.indexOffset !== undefined && (obj.indexOffset = (message.indexOffset || helpers_1$1.Long.ZERO).toString());
        message.jailedUntil !== undefined && (obj.jailedUntil = (0, helpers_1$1.fromTimestamp)(message.jailedUntil).toISOString());
        message.tombstoned !== undefined && (obj.tombstoned = message.tombstoned);
        message.missedBlocksCounter !== undefined &&
            (obj.missedBlocksCounter = (message.missedBlocksCounter || helpers_1$1.Long.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseValidatorSigningInfo();
        message.address = object.address ?? "";
        message.startHeight =
            object.startHeight !== undefined && object.startHeight !== null
                ? helpers_1$1.Long.fromValue(object.startHeight)
                : helpers_1$1.Long.ZERO;
        message.indexOffset =
            object.indexOffset !== undefined && object.indexOffset !== null
                ? helpers_1$1.Long.fromValue(object.indexOffset)
                : helpers_1$1.Long.ZERO;
        message.jailedUntil =
            object.jailedUntil !== undefined && object.jailedUntil !== null
                ? timestamp_1.Timestamp.fromPartial(object.jailedUntil)
                : undefined;
        message.tombstoned = object.tombstoned ?? false;
        message.missedBlocksCounter =
            object.missedBlocksCounter !== undefined && object.missedBlocksCounter !== null
                ? helpers_1$1.Long.fromValue(object.missedBlocksCounter)
                : helpers_1$1.Long.ZERO;
        return message;
    },
};
function createBaseParams$3() {
    return {
        signedBlocksWindow: helpers_1$1.Long.ZERO,
        minSignedPerWindow: new Uint8Array(),
        downtimeJailDuration: undefined,
        slashFractionDoubleSign: new Uint8Array(),
        slashFractionDowntime: new Uint8Array(),
    };
}
slashing.Params = {
    encode(message, writer = _m0$1.Writer.create()) {
        if (!message.signedBlocksWindow.isZero()) {
            writer.uint32(8).int64(message.signedBlocksWindow);
        }
        if (message.minSignedPerWindow.length !== 0) {
            writer.uint32(18).bytes(message.minSignedPerWindow);
        }
        if (message.downtimeJailDuration !== undefined) {
            duration_1.Duration.encode(message.downtimeJailDuration, writer.uint32(26).fork()).ldelim();
        }
        if (message.slashFractionDoubleSign.length !== 0) {
            writer.uint32(34).bytes(message.slashFractionDoubleSign);
        }
        if (message.slashFractionDowntime.length !== 0) {
            writer.uint32(42).bytes(message.slashFractionDowntime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$1.Reader ? input : new _m0$1.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams$3();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.signedBlocksWindow = reader.int64();
                    break;
                case 2:
                    message.minSignedPerWindow = reader.bytes();
                    break;
                case 3:
                    message.downtimeJailDuration = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.slashFractionDoubleSign = reader.bytes();
                    break;
                case 5:
                    message.slashFractionDowntime = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            signedBlocksWindow: (0, helpers_1$1.isSet)(object.signedBlocksWindow)
                ? helpers_1$1.Long.fromValue(object.signedBlocksWindow)
                : helpers_1$1.Long.ZERO,
            minSignedPerWindow: (0, helpers_1$1.isSet)(object.minSignedPerWindow)
                ? (0, helpers_1$1.bytesFromBase64)(object.minSignedPerWindow)
                : new Uint8Array(),
            downtimeJailDuration: (0, helpers_1$1.isSet)(object.downtimeJailDuration)
                ? duration_1.Duration.fromJSON(object.downtimeJailDuration)
                : undefined,
            slashFractionDoubleSign: (0, helpers_1$1.isSet)(object.slashFractionDoubleSign)
                ? (0, helpers_1$1.bytesFromBase64)(object.slashFractionDoubleSign)
                : new Uint8Array(),
            slashFractionDowntime: (0, helpers_1$1.isSet)(object.slashFractionDowntime)
                ? (0, helpers_1$1.bytesFromBase64)(object.slashFractionDowntime)
                : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.signedBlocksWindow !== undefined &&
            (obj.signedBlocksWindow = (message.signedBlocksWindow || helpers_1$1.Long.ZERO).toString());
        message.minSignedPerWindow !== undefined &&
            (obj.minSignedPerWindow = (0, helpers_1$1.base64FromBytes)(message.minSignedPerWindow !== undefined ? message.minSignedPerWindow : new Uint8Array()));
        message.downtimeJailDuration !== undefined &&
            (obj.downtimeJailDuration = message.downtimeJailDuration
                ? duration_1.Duration.toJSON(message.downtimeJailDuration)
                : undefined);
        message.slashFractionDoubleSign !== undefined &&
            (obj.slashFractionDoubleSign = (0, helpers_1$1.base64FromBytes)(message.slashFractionDoubleSign !== undefined ? message.slashFractionDoubleSign : new Uint8Array()));
        message.slashFractionDowntime !== undefined &&
            (obj.slashFractionDowntime = (0, helpers_1$1.base64FromBytes)(message.slashFractionDowntime !== undefined ? message.slashFractionDowntime : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseParams$3();
        message.signedBlocksWindow =
            object.signedBlocksWindow !== undefined && object.signedBlocksWindow !== null
                ? helpers_1$1.Long.fromValue(object.signedBlocksWindow)
                : helpers_1$1.Long.ZERO;
        message.minSignedPerWindow = object.minSignedPerWindow ?? new Uint8Array();
        message.downtimeJailDuration =
            object.downtimeJailDuration !== undefined && object.downtimeJailDuration !== null
                ? duration_1.Duration.fromPartial(object.downtimeJailDuration)
                : undefined;
        message.slashFractionDoubleSign = object.slashFractionDoubleSign ?? new Uint8Array();
        message.slashFractionDowntime = object.slashFractionDowntime ?? new Uint8Array();
        return message;
    },
};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.QueryClientImpl = exports.QuerySigningInfosResponse = exports.QuerySigningInfosRequest = exports.QuerySigningInfoResponse = exports.QuerySigningInfoRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
	/* eslint-disable */
	const pagination_1 = pagination;
	const slashing_1 = slashing;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.slashing.v1beta1";
	function createBaseQueryParamsRequest() {
	    return {};
	}
	exports.QueryParamsRequest = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryParamsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseQueryParamsRequest();
	        return message;
	    },
	};
	function createBaseQueryParamsResponse() {
	    return {
	        params: undefined,
	    };
	}
	exports.QueryParamsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.params !== undefined) {
	            slashing_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryParamsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.params = slashing_1.Params.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            params: (0, helpers_1.isSet)(object.params) ? slashing_1.Params.fromJSON(object.params) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.params !== undefined && (obj.params = message.params ? slashing_1.Params.toJSON(message.params) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryParamsResponse();
	        message.params =
	            object.params !== undefined && object.params !== null ? slashing_1.Params.fromPartial(object.params) : undefined;
	        return message;
	    },
	};
	function createBaseQuerySigningInfoRequest() {
	    return {
	        consAddress: "",
	    };
	}
	exports.QuerySigningInfoRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.consAddress !== "") {
	            writer.uint32(10).string(message.consAddress);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQuerySigningInfoRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.consAddress = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            consAddress: (0, helpers_1.isSet)(object.consAddress) ? String(object.consAddress) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.consAddress !== undefined && (obj.consAddress = message.consAddress);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQuerySigningInfoRequest();
	        message.consAddress = object.consAddress ?? "";
	        return message;
	    },
	};
	function createBaseQuerySigningInfoResponse() {
	    return {
	        valSigningInfo: undefined,
	    };
	}
	exports.QuerySigningInfoResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.valSigningInfo !== undefined) {
	            slashing_1.ValidatorSigningInfo.encode(message.valSigningInfo, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQuerySigningInfoResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.valSigningInfo = slashing_1.ValidatorSigningInfo.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            valSigningInfo: (0, helpers_1.isSet)(object.valSigningInfo)
	                ? slashing_1.ValidatorSigningInfo.fromJSON(object.valSigningInfo)
	                : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.valSigningInfo !== undefined &&
	            (obj.valSigningInfo = message.valSigningInfo
	                ? slashing_1.ValidatorSigningInfo.toJSON(message.valSigningInfo)
	                : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQuerySigningInfoResponse();
	        message.valSigningInfo =
	            object.valSigningInfo !== undefined && object.valSigningInfo !== null
	                ? slashing_1.ValidatorSigningInfo.fromPartial(object.valSigningInfo)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQuerySigningInfosRequest() {
	    return {
	        pagination: undefined,
	    };
	}
	exports.QuerySigningInfosRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQuerySigningInfosRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQuerySigningInfosRequest();
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQuerySigningInfosResponse() {
	    return {
	        info: [],
	        pagination: undefined,
	    };
	}
	exports.QuerySigningInfosResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.info) {
	            slashing_1.ValidatorSigningInfo.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQuerySigningInfosResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.info.push(slashing_1.ValidatorSigningInfo.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            info: Array.isArray(object?.info) ? object.info.map((e) => slashing_1.ValidatorSigningInfo.fromJSON(e)) : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.info) {
	            obj.info = message.info.map((e) => (e ? slashing_1.ValidatorSigningInfo.toJSON(e) : undefined));
	        }
	        else {
	            obj.info = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQuerySigningInfosResponse();
	        message.info = object.info?.map((e) => slashing_1.ValidatorSigningInfo.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	class QueryClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.Params = this.Params.bind(this);
	        this.SigningInfo = this.SigningInfo.bind(this);
	        this.SigningInfos = this.SigningInfos.bind(this);
	    }
	    Params(request = {}) {
	        const data = exports.QueryParamsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.slashing.v1beta1.Query", "Params", data);
	        return promise.then((data) => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
	    }
	    SigningInfo(request) {
	        const data = exports.QuerySigningInfoRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.slashing.v1beta1.Query", "SigningInfo", data);
	        return promise.then((data) => exports.QuerySigningInfoResponse.decode(new _m0.Reader(data)));
	    }
	    SigningInfos(request = {
	        pagination: undefined,
	    }) {
	        const data = exports.QuerySigningInfosRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.slashing.v1beta1.Query", "SigningInfos", data);
	        return promise.then((data) => exports.QuerySigningInfosResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.QueryClientImpl = QueryClientImpl;
	
} (query$1));

Object.defineProperty(queries$2, "__esModule", { value: true });
queries$2.setupSlashingExtension = void 0;
const query_1$1 = query$1;
const queryclient_1$3 = queryclient$1;
function setupSlashingExtension(base) {
    const rpc = (0, queryclient_1$3.createProtobufRpcClient)(base);
    const queryService = new query_1$1.QueryClientImpl(rpc);
    return {
        slashing: {
            signingInfo: async (consAddress) => {
                const response = await queryService.SigningInfo({
                    consAddress: consAddress,
                });
                return response;
            },
            signingInfos: async (paginationKey) => {
                const response = await queryService.SigningInfos({
                    pagination: (0, queryclient_1$3.createPagination)(paginationKey),
                });
                return response;
            },
            params: async () => {
                const response = await queryService.Params({});
                return response;
            },
        },
    };
}
queries$2.setupSlashingExtension = setupSlashingExtension;

var aminomessages$1 = {};

Object.defineProperty(aminomessages$1, "__esModule", { value: true });
aminomessages$1.createStakingAminoConverters = aminomessages$1.isAminoMsgUndelegate = aminomessages$1.isAminoMsgBeginRedelegate = aminomessages$1.isAminoMsgDelegate = aminomessages$1.isAminoMsgEditValidator = aminomessages$1.isAminoMsgCreateValidator = aminomessages$1.protoDecimalToJson = void 0;
const math_1$3 = build$a;
const proto_signing_1$2 = build$9;
const utils_1$3 = build$5;
function protoDecimalToJson(decimal) {
    const parsed = math_1$3.Decimal.fromAtomics(decimal, 18);
    const [whole, fractional] = parsed.toString().split(".");
    return `${whole}.${(fractional ?? "").padEnd(18, "0")}`;
}
aminomessages$1.protoDecimalToJson = protoDecimalToJson;
function jsonDecimalToProto(decimal) {
    const parsed = math_1$3.Decimal.fromUserInput(decimal, 18);
    return parsed.atomics;
}
function isAminoMsgCreateValidator(msg) {
    return msg.type === "cosmos-sdk/MsgCreateValidator";
}
aminomessages$1.isAminoMsgCreateValidator = isAminoMsgCreateValidator;
function isAminoMsgEditValidator(msg) {
    return msg.type === "cosmos-sdk/MsgEditValidator";
}
aminomessages$1.isAminoMsgEditValidator = isAminoMsgEditValidator;
function isAminoMsgDelegate(msg) {
    return msg.type === "cosmos-sdk/MsgDelegate";
}
aminomessages$1.isAminoMsgDelegate = isAminoMsgDelegate;
function isAminoMsgBeginRedelegate(msg) {
    return msg.type === "cosmos-sdk/MsgBeginRedelegate";
}
aminomessages$1.isAminoMsgBeginRedelegate = isAminoMsgBeginRedelegate;
function isAminoMsgUndelegate(msg) {
    return msg.type === "cosmos-sdk/MsgUndelegate";
}
aminomessages$1.isAminoMsgUndelegate = isAminoMsgUndelegate;
function createStakingAminoConverters() {
    return {
        "/cosmos.staking.v1beta1.MsgBeginRedelegate": {
            aminoType: "cosmos-sdk/MsgBeginRedelegate",
            toAmino: ({ delegatorAddress, validatorSrcAddress, validatorDstAddress, amount, }) => {
                (0, utils_1$3.assertDefinedAndNotNull)(amount, "missing amount");
                return {
                    delegator_address: delegatorAddress,
                    validator_src_address: validatorSrcAddress,
                    validator_dst_address: validatorDstAddress,
                    amount: amount,
                };
            },
            fromAmino: ({ delegator_address, validator_src_address, validator_dst_address, amount, }) => ({
                delegatorAddress: delegator_address,
                validatorSrcAddress: validator_src_address,
                validatorDstAddress: validator_dst_address,
                amount: amount,
            }),
        },
        "/cosmos.staking.v1beta1.MsgCreateValidator": {
            aminoType: "cosmos-sdk/MsgCreateValidator",
            toAmino: ({ description, commission, minSelfDelegation, delegatorAddress, validatorAddress, pubkey, value, }) => {
                (0, utils_1$3.assertDefinedAndNotNull)(description, "missing description");
                (0, utils_1$3.assertDefinedAndNotNull)(commission, "missing commission");
                (0, utils_1$3.assertDefinedAndNotNull)(pubkey, "missing pubkey");
                (0, utils_1$3.assertDefinedAndNotNull)(value, "missing value");
                return {
                    description: {
                        moniker: description.moniker,
                        identity: description.identity,
                        website: description.website,
                        security_contact: description.securityContact,
                        details: description.details,
                    },
                    commission: {
                        rate: protoDecimalToJson(commission.rate),
                        max_rate: protoDecimalToJson(commission.maxRate),
                        max_change_rate: protoDecimalToJson(commission.maxChangeRate),
                    },
                    min_self_delegation: minSelfDelegation,
                    delegator_address: delegatorAddress,
                    validator_address: validatorAddress,
                    pubkey: (0, proto_signing_1$2.decodePubkey)(pubkey),
                    value: value,
                };
            },
            fromAmino: ({ description, commission, min_self_delegation, delegator_address, validator_address, pubkey, value, }) => {
                return {
                    description: {
                        moniker: description.moniker,
                        identity: description.identity,
                        website: description.website,
                        securityContact: description.security_contact,
                        details: description.details,
                    },
                    commission: {
                        rate: jsonDecimalToProto(commission.rate),
                        maxRate: jsonDecimalToProto(commission.max_rate),
                        maxChangeRate: jsonDecimalToProto(commission.max_change_rate),
                    },
                    minSelfDelegation: min_self_delegation,
                    delegatorAddress: delegator_address,
                    validatorAddress: validator_address,
                    pubkey: (0, proto_signing_1$2.encodePubkey)(pubkey),
                    value: value,
                };
            },
        },
        "/cosmos.staking.v1beta1.MsgDelegate": {
            aminoType: "cosmos-sdk/MsgDelegate",
            toAmino: ({ delegatorAddress, validatorAddress, amount }) => {
                (0, utils_1$3.assertDefinedAndNotNull)(amount, "missing amount");
                return {
                    delegator_address: delegatorAddress,
                    validator_address: validatorAddress,
                    amount: amount,
                };
            },
            fromAmino: ({ delegator_address, validator_address, amount, }) => ({
                delegatorAddress: delegator_address,
                validatorAddress: validator_address,
                amount: amount,
            }),
        },
        "/cosmos.staking.v1beta1.MsgEditValidator": {
            aminoType: "cosmos-sdk/MsgEditValidator",
            toAmino: ({ description, commissionRate, minSelfDelegation, validatorAddress, }) => {
                (0, utils_1$3.assertDefinedAndNotNull)(description, "missing description");
                return {
                    description: {
                        moniker: description.moniker,
                        identity: description.identity,
                        website: description.website,
                        security_contact: description.securityContact,
                        details: description.details,
                    },
                    // empty string in the protobuf document means "do not change"
                    commission_rate: commissionRate ? protoDecimalToJson(commissionRate) : undefined,
                    // empty string in the protobuf document means "do not change"
                    min_self_delegation: minSelfDelegation ? minSelfDelegation : undefined,
                    validator_address: validatorAddress,
                };
            },
            fromAmino: ({ description, commission_rate, min_self_delegation, validator_address, }) => ({
                description: {
                    moniker: description.moniker,
                    identity: description.identity,
                    website: description.website,
                    securityContact: description.security_contact,
                    details: description.details,
                },
                // empty string in the protobuf document means "do not change"
                commissionRate: commission_rate ? jsonDecimalToProto(commission_rate) : "",
                // empty string in the protobuf document means "do not change"
                minSelfDelegation: min_self_delegation ?? "",
                validatorAddress: validator_address,
            }),
        },
        "/cosmos.staking.v1beta1.MsgUndelegate": {
            aminoType: "cosmos-sdk/MsgUndelegate",
            toAmino: ({ delegatorAddress, validatorAddress, amount, }) => {
                (0, utils_1$3.assertDefinedAndNotNull)(amount, "missing amount");
                return {
                    delegator_address: delegatorAddress,
                    validator_address: validatorAddress,
                    amount: amount,
                };
            },
            fromAmino: ({ delegator_address, validator_address, amount, }) => ({
                delegatorAddress: delegator_address,
                validatorAddress: validator_address,
                amount: amount,
            }),
        },
    };
}
aminomessages$1.createStakingAminoConverters = createStakingAminoConverters;

var messages$1 = {};

var tx$4 = {};

var staking = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Pool = exports.RedelegationResponse = exports.RedelegationEntryResponse = exports.DelegationResponse = exports.Params = exports.Redelegation = exports.RedelegationEntry = exports.UnbondingDelegationEntry = exports.UnbondingDelegation = exports.Delegation = exports.DVVTriplets = exports.DVVTriplet = exports.DVPairs = exports.DVPair = exports.ValAddresses = exports.Validator = exports.Description = exports.Commission = exports.CommissionRates = exports.HistoricalInfo = exports.bondStatusToJSON = exports.bondStatusFromJSON = exports.BondStatus = exports.protobufPackage = void 0;
	/* eslint-disable */
	const types_1 = types$4;
	const timestamp_1 = timestamp;
	const any_1 = any;
	const duration_1 = duration;
	const coin_1 = coin$1;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.staking.v1beta1";
	/** BondStatus is the status of a validator. */
	var BondStatus;
	(function (BondStatus) {
	    /** BOND_STATUS_UNSPECIFIED - UNSPECIFIED defines an invalid validator status. */
	    BondStatus[BondStatus["BOND_STATUS_UNSPECIFIED"] = 0] = "BOND_STATUS_UNSPECIFIED";
	    /** BOND_STATUS_UNBONDED - UNBONDED defines a validator that is not bonded. */
	    BondStatus[BondStatus["BOND_STATUS_UNBONDED"] = 1] = "BOND_STATUS_UNBONDED";
	    /** BOND_STATUS_UNBONDING - UNBONDING defines a validator that is unbonding. */
	    BondStatus[BondStatus["BOND_STATUS_UNBONDING"] = 2] = "BOND_STATUS_UNBONDING";
	    /** BOND_STATUS_BONDED - BONDED defines a validator that is bonded. */
	    BondStatus[BondStatus["BOND_STATUS_BONDED"] = 3] = "BOND_STATUS_BONDED";
	    BondStatus[BondStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
	})(BondStatus = exports.BondStatus || (exports.BondStatus = {}));
	function bondStatusFromJSON(object) {
	    switch (object) {
	        case 0:
	        case "BOND_STATUS_UNSPECIFIED":
	            return BondStatus.BOND_STATUS_UNSPECIFIED;
	        case 1:
	        case "BOND_STATUS_UNBONDED":
	            return BondStatus.BOND_STATUS_UNBONDED;
	        case 2:
	        case "BOND_STATUS_UNBONDING":
	            return BondStatus.BOND_STATUS_UNBONDING;
	        case 3:
	        case "BOND_STATUS_BONDED":
	            return BondStatus.BOND_STATUS_BONDED;
	        case -1:
	        case "UNRECOGNIZED":
	        default:
	            return BondStatus.UNRECOGNIZED;
	    }
	}
	exports.bondStatusFromJSON = bondStatusFromJSON;
	function bondStatusToJSON(object) {
	    switch (object) {
	        case BondStatus.BOND_STATUS_UNSPECIFIED:
	            return "BOND_STATUS_UNSPECIFIED";
	        case BondStatus.BOND_STATUS_UNBONDED:
	            return "BOND_STATUS_UNBONDED";
	        case BondStatus.BOND_STATUS_UNBONDING:
	            return "BOND_STATUS_UNBONDING";
	        case BondStatus.BOND_STATUS_BONDED:
	            return "BOND_STATUS_BONDED";
	        case BondStatus.UNRECOGNIZED:
	        default:
	            return "UNRECOGNIZED";
	    }
	}
	exports.bondStatusToJSON = bondStatusToJSON;
	function createBaseHistoricalInfo() {
	    return {
	        header: undefined,
	        valset: [],
	    };
	}
	exports.HistoricalInfo = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.header !== undefined) {
	            types_1.Header.encode(message.header, writer.uint32(10).fork()).ldelim();
	        }
	        for (const v of message.valset) {
	            exports.Validator.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseHistoricalInfo();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.header = types_1.Header.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.valset.push(exports.Validator.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            header: (0, helpers_1.isSet)(object.header) ? types_1.Header.fromJSON(object.header) : undefined,
	            valset: Array.isArray(object?.valset) ? object.valset.map((e) => exports.Validator.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.header !== undefined && (obj.header = message.header ? types_1.Header.toJSON(message.header) : undefined);
	        if (message.valset) {
	            obj.valset = message.valset.map((e) => (e ? exports.Validator.toJSON(e) : undefined));
	        }
	        else {
	            obj.valset = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseHistoricalInfo();
	        message.header =
	            object.header !== undefined && object.header !== null ? types_1.Header.fromPartial(object.header) : undefined;
	        message.valset = object.valset?.map((e) => exports.Validator.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseCommissionRates() {
	    return {
	        rate: "",
	        maxRate: "",
	        maxChangeRate: "",
	    };
	}
	exports.CommissionRates = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.rate !== "") {
	            writer.uint32(10).string(message.rate);
	        }
	        if (message.maxRate !== "") {
	            writer.uint32(18).string(message.maxRate);
	        }
	        if (message.maxChangeRate !== "") {
	            writer.uint32(26).string(message.maxChangeRate);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseCommissionRates();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.rate = reader.string();
	                    break;
	                case 2:
	                    message.maxRate = reader.string();
	                    break;
	                case 3:
	                    message.maxChangeRate = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            rate: (0, helpers_1.isSet)(object.rate) ? String(object.rate) : "",
	            maxRate: (0, helpers_1.isSet)(object.maxRate) ? String(object.maxRate) : "",
	            maxChangeRate: (0, helpers_1.isSet)(object.maxChangeRate) ? String(object.maxChangeRate) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.rate !== undefined && (obj.rate = message.rate);
	        message.maxRate !== undefined && (obj.maxRate = message.maxRate);
	        message.maxChangeRate !== undefined && (obj.maxChangeRate = message.maxChangeRate);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseCommissionRates();
	        message.rate = object.rate ?? "";
	        message.maxRate = object.maxRate ?? "";
	        message.maxChangeRate = object.maxChangeRate ?? "";
	        return message;
	    },
	};
	function createBaseCommission() {
	    return {
	        commissionRates: undefined,
	        updateTime: undefined,
	    };
	}
	exports.Commission = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.commissionRates !== undefined) {
	            exports.CommissionRates.encode(message.commissionRates, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.updateTime !== undefined) {
	            timestamp_1.Timestamp.encode(message.updateTime, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseCommission();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.commissionRates = exports.CommissionRates.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.updateTime = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            commissionRates: (0, helpers_1.isSet)(object.commissionRates)
	                ? exports.CommissionRates.fromJSON(object.commissionRates)
	                : undefined,
	            updateTime: (0, helpers_1.isSet)(object.updateTime) ? (0, helpers_1.fromJsonTimestamp)(object.updateTime) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.commissionRates !== undefined &&
	            (obj.commissionRates = message.commissionRates
	                ? exports.CommissionRates.toJSON(message.commissionRates)
	                : undefined);
	        message.updateTime !== undefined && (obj.updateTime = (0, helpers_1.fromTimestamp)(message.updateTime).toISOString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseCommission();
	        message.commissionRates =
	            object.commissionRates !== undefined && object.commissionRates !== null
	                ? exports.CommissionRates.fromPartial(object.commissionRates)
	                : undefined;
	        message.updateTime =
	            object.updateTime !== undefined && object.updateTime !== null
	                ? timestamp_1.Timestamp.fromPartial(object.updateTime)
	                : undefined;
	        return message;
	    },
	};
	function createBaseDescription() {
	    return {
	        moniker: "",
	        identity: "",
	        website: "",
	        securityContact: "",
	        details: "",
	    };
	}
	exports.Description = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.moniker !== "") {
	            writer.uint32(10).string(message.moniker);
	        }
	        if (message.identity !== "") {
	            writer.uint32(18).string(message.identity);
	        }
	        if (message.website !== "") {
	            writer.uint32(26).string(message.website);
	        }
	        if (message.securityContact !== "") {
	            writer.uint32(34).string(message.securityContact);
	        }
	        if (message.details !== "") {
	            writer.uint32(42).string(message.details);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseDescription();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.moniker = reader.string();
	                    break;
	                case 2:
	                    message.identity = reader.string();
	                    break;
	                case 3:
	                    message.website = reader.string();
	                    break;
	                case 4:
	                    message.securityContact = reader.string();
	                    break;
	                case 5:
	                    message.details = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            moniker: (0, helpers_1.isSet)(object.moniker) ? String(object.moniker) : "",
	            identity: (0, helpers_1.isSet)(object.identity) ? String(object.identity) : "",
	            website: (0, helpers_1.isSet)(object.website) ? String(object.website) : "",
	            securityContact: (0, helpers_1.isSet)(object.securityContact) ? String(object.securityContact) : "",
	            details: (0, helpers_1.isSet)(object.details) ? String(object.details) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.moniker !== undefined && (obj.moniker = message.moniker);
	        message.identity !== undefined && (obj.identity = message.identity);
	        message.website !== undefined && (obj.website = message.website);
	        message.securityContact !== undefined && (obj.securityContact = message.securityContact);
	        message.details !== undefined && (obj.details = message.details);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseDescription();
	        message.moniker = object.moniker ?? "";
	        message.identity = object.identity ?? "";
	        message.website = object.website ?? "";
	        message.securityContact = object.securityContact ?? "";
	        message.details = object.details ?? "";
	        return message;
	    },
	};
	function createBaseValidator() {
	    return {
	        operatorAddress: "",
	        consensusPubkey: undefined,
	        jailed: false,
	        status: 0,
	        tokens: "",
	        delegatorShares: "",
	        description: undefined,
	        unbondingHeight: helpers_1.Long.ZERO,
	        unbondingTime: undefined,
	        commission: undefined,
	        minSelfDelegation: "",
	    };
	}
	exports.Validator = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.operatorAddress !== "") {
	            writer.uint32(10).string(message.operatorAddress);
	        }
	        if (message.consensusPubkey !== undefined) {
	            any_1.Any.encode(message.consensusPubkey, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.jailed === true) {
	            writer.uint32(24).bool(message.jailed);
	        }
	        if (message.status !== 0) {
	            writer.uint32(32).int32(message.status);
	        }
	        if (message.tokens !== "") {
	            writer.uint32(42).string(message.tokens);
	        }
	        if (message.delegatorShares !== "") {
	            writer.uint32(50).string(message.delegatorShares);
	        }
	        if (message.description !== undefined) {
	            exports.Description.encode(message.description, writer.uint32(58).fork()).ldelim();
	        }
	        if (!message.unbondingHeight.isZero()) {
	            writer.uint32(64).int64(message.unbondingHeight);
	        }
	        if (message.unbondingTime !== undefined) {
	            timestamp_1.Timestamp.encode(message.unbondingTime, writer.uint32(74).fork()).ldelim();
	        }
	        if (message.commission !== undefined) {
	            exports.Commission.encode(message.commission, writer.uint32(82).fork()).ldelim();
	        }
	        if (message.minSelfDelegation !== "") {
	            writer.uint32(90).string(message.minSelfDelegation);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseValidator();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.operatorAddress = reader.string();
	                    break;
	                case 2:
	                    message.consensusPubkey = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.jailed = reader.bool();
	                    break;
	                case 4:
	                    message.status = reader.int32();
	                    break;
	                case 5:
	                    message.tokens = reader.string();
	                    break;
	                case 6:
	                    message.delegatorShares = reader.string();
	                    break;
	                case 7:
	                    message.description = exports.Description.decode(reader, reader.uint32());
	                    break;
	                case 8:
	                    message.unbondingHeight = reader.int64();
	                    break;
	                case 9:
	                    message.unbondingTime = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                case 10:
	                    message.commission = exports.Commission.decode(reader, reader.uint32());
	                    break;
	                case 11:
	                    message.minSelfDelegation = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            operatorAddress: (0, helpers_1.isSet)(object.operatorAddress) ? String(object.operatorAddress) : "",
	            consensusPubkey: (0, helpers_1.isSet)(object.consensusPubkey) ? any_1.Any.fromJSON(object.consensusPubkey) : undefined,
	            jailed: (0, helpers_1.isSet)(object.jailed) ? Boolean(object.jailed) : false,
	            status: (0, helpers_1.isSet)(object.status) ? bondStatusFromJSON(object.status) : 0,
	            tokens: (0, helpers_1.isSet)(object.tokens) ? String(object.tokens) : "",
	            delegatorShares: (0, helpers_1.isSet)(object.delegatorShares) ? String(object.delegatorShares) : "",
	            description: (0, helpers_1.isSet)(object.description) ? exports.Description.fromJSON(object.description) : undefined,
	            unbondingHeight: (0, helpers_1.isSet)(object.unbondingHeight) ? helpers_1.Long.fromValue(object.unbondingHeight) : helpers_1.Long.ZERO,
	            unbondingTime: (0, helpers_1.isSet)(object.unbondingTime) ? (0, helpers_1.fromJsonTimestamp)(object.unbondingTime) : undefined,
	            commission: (0, helpers_1.isSet)(object.commission) ? exports.Commission.fromJSON(object.commission) : undefined,
	            minSelfDelegation: (0, helpers_1.isSet)(object.minSelfDelegation) ? String(object.minSelfDelegation) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.operatorAddress !== undefined && (obj.operatorAddress = message.operatorAddress);
	        message.consensusPubkey !== undefined &&
	            (obj.consensusPubkey = message.consensusPubkey ? any_1.Any.toJSON(message.consensusPubkey) : undefined);
	        message.jailed !== undefined && (obj.jailed = message.jailed);
	        message.status !== undefined && (obj.status = bondStatusToJSON(message.status));
	        message.tokens !== undefined && (obj.tokens = message.tokens);
	        message.delegatorShares !== undefined && (obj.delegatorShares = message.delegatorShares);
	        message.description !== undefined &&
	            (obj.description = message.description ? exports.Description.toJSON(message.description) : undefined);
	        message.unbondingHeight !== undefined &&
	            (obj.unbondingHeight = (message.unbondingHeight || helpers_1.Long.ZERO).toString());
	        message.unbondingTime !== undefined &&
	            (obj.unbondingTime = (0, helpers_1.fromTimestamp)(message.unbondingTime).toISOString());
	        message.commission !== undefined &&
	            (obj.commission = message.commission ? exports.Commission.toJSON(message.commission) : undefined);
	        message.minSelfDelegation !== undefined && (obj.minSelfDelegation = message.minSelfDelegation);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseValidator();
	        message.operatorAddress = object.operatorAddress ?? "";
	        message.consensusPubkey =
	            object.consensusPubkey !== undefined && object.consensusPubkey !== null
	                ? any_1.Any.fromPartial(object.consensusPubkey)
	                : undefined;
	        message.jailed = object.jailed ?? false;
	        message.status = object.status ?? 0;
	        message.tokens = object.tokens ?? "";
	        message.delegatorShares = object.delegatorShares ?? "";
	        message.description =
	            object.description !== undefined && object.description !== null
	                ? exports.Description.fromPartial(object.description)
	                : undefined;
	        message.unbondingHeight =
	            object.unbondingHeight !== undefined && object.unbondingHeight !== null
	                ? helpers_1.Long.fromValue(object.unbondingHeight)
	                : helpers_1.Long.ZERO;
	        message.unbondingTime =
	            object.unbondingTime !== undefined && object.unbondingTime !== null
	                ? timestamp_1.Timestamp.fromPartial(object.unbondingTime)
	                : undefined;
	        message.commission =
	            object.commission !== undefined && object.commission !== null
	                ? exports.Commission.fromPartial(object.commission)
	                : undefined;
	        message.minSelfDelegation = object.minSelfDelegation ?? "";
	        return message;
	    },
	};
	function createBaseValAddresses() {
	    return {
	        addresses: [],
	    };
	}
	exports.ValAddresses = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.addresses) {
	            writer.uint32(10).string(v);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseValAddresses();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.addresses.push(reader.string());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            addresses: Array.isArray(object?.addresses) ? object.addresses.map((e) => String(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.addresses) {
	            obj.addresses = message.addresses.map((e) => e);
	        }
	        else {
	            obj.addresses = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseValAddresses();
	        message.addresses = object.addresses?.map((e) => e) || [];
	        return message;
	    },
	};
	function createBaseDVPair() {
	    return {
	        delegatorAddress: "",
	        validatorAddress: "",
	    };
	}
	exports.DVPair = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddress !== "") {
	            writer.uint32(10).string(message.delegatorAddress);
	        }
	        if (message.validatorAddress !== "") {
	            writer.uint32(18).string(message.validatorAddress);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseDVPair();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddress = reader.string();
	                    break;
	                case 2:
	                    message.validatorAddress = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddress: (0, helpers_1.isSet)(object.delegatorAddress) ? String(object.delegatorAddress) : "",
	            validatorAddress: (0, helpers_1.isSet)(object.validatorAddress) ? String(object.validatorAddress) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);
	        message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseDVPair();
	        message.delegatorAddress = object.delegatorAddress ?? "";
	        message.validatorAddress = object.validatorAddress ?? "";
	        return message;
	    },
	};
	function createBaseDVPairs() {
	    return {
	        pairs: [],
	    };
	}
	exports.DVPairs = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.pairs) {
	            exports.DVPair.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseDVPairs();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.pairs.push(exports.DVPair.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            pairs: Array.isArray(object?.pairs) ? object.pairs.map((e) => exports.DVPair.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.pairs) {
	            obj.pairs = message.pairs.map((e) => (e ? exports.DVPair.toJSON(e) : undefined));
	        }
	        else {
	            obj.pairs = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseDVPairs();
	        message.pairs = object.pairs?.map((e) => exports.DVPair.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseDVVTriplet() {
	    return {
	        delegatorAddress: "",
	        validatorSrcAddress: "",
	        validatorDstAddress: "",
	    };
	}
	exports.DVVTriplet = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddress !== "") {
	            writer.uint32(10).string(message.delegatorAddress);
	        }
	        if (message.validatorSrcAddress !== "") {
	            writer.uint32(18).string(message.validatorSrcAddress);
	        }
	        if (message.validatorDstAddress !== "") {
	            writer.uint32(26).string(message.validatorDstAddress);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseDVVTriplet();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddress = reader.string();
	                    break;
	                case 2:
	                    message.validatorSrcAddress = reader.string();
	                    break;
	                case 3:
	                    message.validatorDstAddress = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddress: (0, helpers_1.isSet)(object.delegatorAddress) ? String(object.delegatorAddress) : "",
	            validatorSrcAddress: (0, helpers_1.isSet)(object.validatorSrcAddress) ? String(object.validatorSrcAddress) : "",
	            validatorDstAddress: (0, helpers_1.isSet)(object.validatorDstAddress) ? String(object.validatorDstAddress) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);
	        message.validatorSrcAddress !== undefined && (obj.validatorSrcAddress = message.validatorSrcAddress);
	        message.validatorDstAddress !== undefined && (obj.validatorDstAddress = message.validatorDstAddress);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseDVVTriplet();
	        message.delegatorAddress = object.delegatorAddress ?? "";
	        message.validatorSrcAddress = object.validatorSrcAddress ?? "";
	        message.validatorDstAddress = object.validatorDstAddress ?? "";
	        return message;
	    },
	};
	function createBaseDVVTriplets() {
	    return {
	        triplets: [],
	    };
	}
	exports.DVVTriplets = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.triplets) {
	            exports.DVVTriplet.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseDVVTriplets();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.triplets.push(exports.DVVTriplet.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            triplets: Array.isArray(object?.triplets)
	                ? object.triplets.map((e) => exports.DVVTriplet.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.triplets) {
	            obj.triplets = message.triplets.map((e) => (e ? exports.DVVTriplet.toJSON(e) : undefined));
	        }
	        else {
	            obj.triplets = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseDVVTriplets();
	        message.triplets = object.triplets?.map((e) => exports.DVVTriplet.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseDelegation() {
	    return {
	        delegatorAddress: "",
	        validatorAddress: "",
	        shares: "",
	    };
	}
	exports.Delegation = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddress !== "") {
	            writer.uint32(10).string(message.delegatorAddress);
	        }
	        if (message.validatorAddress !== "") {
	            writer.uint32(18).string(message.validatorAddress);
	        }
	        if (message.shares !== "") {
	            writer.uint32(26).string(message.shares);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseDelegation();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddress = reader.string();
	                    break;
	                case 2:
	                    message.validatorAddress = reader.string();
	                    break;
	                case 3:
	                    message.shares = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddress: (0, helpers_1.isSet)(object.delegatorAddress) ? String(object.delegatorAddress) : "",
	            validatorAddress: (0, helpers_1.isSet)(object.validatorAddress) ? String(object.validatorAddress) : "",
	            shares: (0, helpers_1.isSet)(object.shares) ? String(object.shares) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);
	        message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);
	        message.shares !== undefined && (obj.shares = message.shares);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseDelegation();
	        message.delegatorAddress = object.delegatorAddress ?? "";
	        message.validatorAddress = object.validatorAddress ?? "";
	        message.shares = object.shares ?? "";
	        return message;
	    },
	};
	function createBaseUnbondingDelegation() {
	    return {
	        delegatorAddress: "",
	        validatorAddress: "",
	        entries: [],
	    };
	}
	exports.UnbondingDelegation = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddress !== "") {
	            writer.uint32(10).string(message.delegatorAddress);
	        }
	        if (message.validatorAddress !== "") {
	            writer.uint32(18).string(message.validatorAddress);
	        }
	        for (const v of message.entries) {
	            exports.UnbondingDelegationEntry.encode(v, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseUnbondingDelegation();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddress = reader.string();
	                    break;
	                case 2:
	                    message.validatorAddress = reader.string();
	                    break;
	                case 3:
	                    message.entries.push(exports.UnbondingDelegationEntry.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddress: (0, helpers_1.isSet)(object.delegatorAddress) ? String(object.delegatorAddress) : "",
	            validatorAddress: (0, helpers_1.isSet)(object.validatorAddress) ? String(object.validatorAddress) : "",
	            entries: Array.isArray(object?.entries)
	                ? object.entries.map((e) => exports.UnbondingDelegationEntry.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);
	        message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);
	        if (message.entries) {
	            obj.entries = message.entries.map((e) => (e ? exports.UnbondingDelegationEntry.toJSON(e) : undefined));
	        }
	        else {
	            obj.entries = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseUnbondingDelegation();
	        message.delegatorAddress = object.delegatorAddress ?? "";
	        message.validatorAddress = object.validatorAddress ?? "";
	        message.entries = object.entries?.map((e) => exports.UnbondingDelegationEntry.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseUnbondingDelegationEntry() {
	    return {
	        creationHeight: helpers_1.Long.ZERO,
	        completionTime: undefined,
	        initialBalance: "",
	        balance: "",
	    };
	}
	exports.UnbondingDelegationEntry = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.creationHeight.isZero()) {
	            writer.uint32(8).int64(message.creationHeight);
	        }
	        if (message.completionTime !== undefined) {
	            timestamp_1.Timestamp.encode(message.completionTime, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.initialBalance !== "") {
	            writer.uint32(26).string(message.initialBalance);
	        }
	        if (message.balance !== "") {
	            writer.uint32(34).string(message.balance);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseUnbondingDelegationEntry();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.creationHeight = reader.int64();
	                    break;
	                case 2:
	                    message.completionTime = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.initialBalance = reader.string();
	                    break;
	                case 4:
	                    message.balance = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            creationHeight: (0, helpers_1.isSet)(object.creationHeight) ? helpers_1.Long.fromValue(object.creationHeight) : helpers_1.Long.ZERO,
	            completionTime: (0, helpers_1.isSet)(object.completionTime) ? (0, helpers_1.fromJsonTimestamp)(object.completionTime) : undefined,
	            initialBalance: (0, helpers_1.isSet)(object.initialBalance) ? String(object.initialBalance) : "",
	            balance: (0, helpers_1.isSet)(object.balance) ? String(object.balance) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.creationHeight !== undefined &&
	            (obj.creationHeight = (message.creationHeight || helpers_1.Long.ZERO).toString());
	        message.completionTime !== undefined &&
	            (obj.completionTime = (0, helpers_1.fromTimestamp)(message.completionTime).toISOString());
	        message.initialBalance !== undefined && (obj.initialBalance = message.initialBalance);
	        message.balance !== undefined && (obj.balance = message.balance);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseUnbondingDelegationEntry();
	        message.creationHeight =
	            object.creationHeight !== undefined && object.creationHeight !== null
	                ? helpers_1.Long.fromValue(object.creationHeight)
	                : helpers_1.Long.ZERO;
	        message.completionTime =
	            object.completionTime !== undefined && object.completionTime !== null
	                ? timestamp_1.Timestamp.fromPartial(object.completionTime)
	                : undefined;
	        message.initialBalance = object.initialBalance ?? "";
	        message.balance = object.balance ?? "";
	        return message;
	    },
	};
	function createBaseRedelegationEntry() {
	    return {
	        creationHeight: helpers_1.Long.ZERO,
	        completionTime: undefined,
	        initialBalance: "",
	        sharesDst: "",
	    };
	}
	exports.RedelegationEntry = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.creationHeight.isZero()) {
	            writer.uint32(8).int64(message.creationHeight);
	        }
	        if (message.completionTime !== undefined) {
	            timestamp_1.Timestamp.encode(message.completionTime, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.initialBalance !== "") {
	            writer.uint32(26).string(message.initialBalance);
	        }
	        if (message.sharesDst !== "") {
	            writer.uint32(34).string(message.sharesDst);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRedelegationEntry();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.creationHeight = reader.int64();
	                    break;
	                case 2:
	                    message.completionTime = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.initialBalance = reader.string();
	                    break;
	                case 4:
	                    message.sharesDst = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            creationHeight: (0, helpers_1.isSet)(object.creationHeight) ? helpers_1.Long.fromValue(object.creationHeight) : helpers_1.Long.ZERO,
	            completionTime: (0, helpers_1.isSet)(object.completionTime) ? (0, helpers_1.fromJsonTimestamp)(object.completionTime) : undefined,
	            initialBalance: (0, helpers_1.isSet)(object.initialBalance) ? String(object.initialBalance) : "",
	            sharesDst: (0, helpers_1.isSet)(object.sharesDst) ? String(object.sharesDst) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.creationHeight !== undefined &&
	            (obj.creationHeight = (message.creationHeight || helpers_1.Long.ZERO).toString());
	        message.completionTime !== undefined &&
	            (obj.completionTime = (0, helpers_1.fromTimestamp)(message.completionTime).toISOString());
	        message.initialBalance !== undefined && (obj.initialBalance = message.initialBalance);
	        message.sharesDst !== undefined && (obj.sharesDst = message.sharesDst);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseRedelegationEntry();
	        message.creationHeight =
	            object.creationHeight !== undefined && object.creationHeight !== null
	                ? helpers_1.Long.fromValue(object.creationHeight)
	                : helpers_1.Long.ZERO;
	        message.completionTime =
	            object.completionTime !== undefined && object.completionTime !== null
	                ? timestamp_1.Timestamp.fromPartial(object.completionTime)
	                : undefined;
	        message.initialBalance = object.initialBalance ?? "";
	        message.sharesDst = object.sharesDst ?? "";
	        return message;
	    },
	};
	function createBaseRedelegation() {
	    return {
	        delegatorAddress: "",
	        validatorSrcAddress: "",
	        validatorDstAddress: "",
	        entries: [],
	    };
	}
	exports.Redelegation = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddress !== "") {
	            writer.uint32(10).string(message.delegatorAddress);
	        }
	        if (message.validatorSrcAddress !== "") {
	            writer.uint32(18).string(message.validatorSrcAddress);
	        }
	        if (message.validatorDstAddress !== "") {
	            writer.uint32(26).string(message.validatorDstAddress);
	        }
	        for (const v of message.entries) {
	            exports.RedelegationEntry.encode(v, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRedelegation();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddress = reader.string();
	                    break;
	                case 2:
	                    message.validatorSrcAddress = reader.string();
	                    break;
	                case 3:
	                    message.validatorDstAddress = reader.string();
	                    break;
	                case 4:
	                    message.entries.push(exports.RedelegationEntry.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddress: (0, helpers_1.isSet)(object.delegatorAddress) ? String(object.delegatorAddress) : "",
	            validatorSrcAddress: (0, helpers_1.isSet)(object.validatorSrcAddress) ? String(object.validatorSrcAddress) : "",
	            validatorDstAddress: (0, helpers_1.isSet)(object.validatorDstAddress) ? String(object.validatorDstAddress) : "",
	            entries: Array.isArray(object?.entries)
	                ? object.entries.map((e) => exports.RedelegationEntry.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);
	        message.validatorSrcAddress !== undefined && (obj.validatorSrcAddress = message.validatorSrcAddress);
	        message.validatorDstAddress !== undefined && (obj.validatorDstAddress = message.validatorDstAddress);
	        if (message.entries) {
	            obj.entries = message.entries.map((e) => (e ? exports.RedelegationEntry.toJSON(e) : undefined));
	        }
	        else {
	            obj.entries = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseRedelegation();
	        message.delegatorAddress = object.delegatorAddress ?? "";
	        message.validatorSrcAddress = object.validatorSrcAddress ?? "";
	        message.validatorDstAddress = object.validatorDstAddress ?? "";
	        message.entries = object.entries?.map((e) => exports.RedelegationEntry.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseParams() {
	    return {
	        unbondingTime: undefined,
	        maxValidators: 0,
	        maxEntries: 0,
	        historicalEntries: 0,
	        bondDenom: "",
	    };
	}
	exports.Params = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.unbondingTime !== undefined) {
	            duration_1.Duration.encode(message.unbondingTime, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.maxValidators !== 0) {
	            writer.uint32(16).uint32(message.maxValidators);
	        }
	        if (message.maxEntries !== 0) {
	            writer.uint32(24).uint32(message.maxEntries);
	        }
	        if (message.historicalEntries !== 0) {
	            writer.uint32(32).uint32(message.historicalEntries);
	        }
	        if (message.bondDenom !== "") {
	            writer.uint32(42).string(message.bondDenom);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseParams();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.unbondingTime = duration_1.Duration.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.maxValidators = reader.uint32();
	                    break;
	                case 3:
	                    message.maxEntries = reader.uint32();
	                    break;
	                case 4:
	                    message.historicalEntries = reader.uint32();
	                    break;
	                case 5:
	                    message.bondDenom = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            unbondingTime: (0, helpers_1.isSet)(object.unbondingTime) ? duration_1.Duration.fromJSON(object.unbondingTime) : undefined,
	            maxValidators: (0, helpers_1.isSet)(object.maxValidators) ? Number(object.maxValidators) : 0,
	            maxEntries: (0, helpers_1.isSet)(object.maxEntries) ? Number(object.maxEntries) : 0,
	            historicalEntries: (0, helpers_1.isSet)(object.historicalEntries) ? Number(object.historicalEntries) : 0,
	            bondDenom: (0, helpers_1.isSet)(object.bondDenom) ? String(object.bondDenom) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.unbondingTime !== undefined &&
	            (obj.unbondingTime = message.unbondingTime ? duration_1.Duration.toJSON(message.unbondingTime) : undefined);
	        message.maxValidators !== undefined && (obj.maxValidators = Math.round(message.maxValidators));
	        message.maxEntries !== undefined && (obj.maxEntries = Math.round(message.maxEntries));
	        message.historicalEntries !== undefined &&
	            (obj.historicalEntries = Math.round(message.historicalEntries));
	        message.bondDenom !== undefined && (obj.bondDenom = message.bondDenom);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseParams();
	        message.unbondingTime =
	            object.unbondingTime !== undefined && object.unbondingTime !== null
	                ? duration_1.Duration.fromPartial(object.unbondingTime)
	                : undefined;
	        message.maxValidators = object.maxValidators ?? 0;
	        message.maxEntries = object.maxEntries ?? 0;
	        message.historicalEntries = object.historicalEntries ?? 0;
	        message.bondDenom = object.bondDenom ?? "";
	        return message;
	    },
	};
	function createBaseDelegationResponse() {
	    return {
	        delegation: undefined,
	        balance: undefined,
	    };
	}
	exports.DelegationResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegation !== undefined) {
	            exports.Delegation.encode(message.delegation, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.balance !== undefined) {
	            coin_1.Coin.encode(message.balance, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseDelegationResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegation = exports.Delegation.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.balance = coin_1.Coin.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegation: (0, helpers_1.isSet)(object.delegation) ? exports.Delegation.fromJSON(object.delegation) : undefined,
	            balance: (0, helpers_1.isSet)(object.balance) ? coin_1.Coin.fromJSON(object.balance) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegation !== undefined &&
	            (obj.delegation = message.delegation ? exports.Delegation.toJSON(message.delegation) : undefined);
	        message.balance !== undefined &&
	            (obj.balance = message.balance ? coin_1.Coin.toJSON(message.balance) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseDelegationResponse();
	        message.delegation =
	            object.delegation !== undefined && object.delegation !== null
	                ? exports.Delegation.fromPartial(object.delegation)
	                : undefined;
	        message.balance =
	            object.balance !== undefined && object.balance !== null ? coin_1.Coin.fromPartial(object.balance) : undefined;
	        return message;
	    },
	};
	function createBaseRedelegationEntryResponse() {
	    return {
	        redelegationEntry: undefined,
	        balance: "",
	    };
	}
	exports.RedelegationEntryResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.redelegationEntry !== undefined) {
	            exports.RedelegationEntry.encode(message.redelegationEntry, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.balance !== "") {
	            writer.uint32(34).string(message.balance);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRedelegationEntryResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.redelegationEntry = exports.RedelegationEntry.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.balance = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            redelegationEntry: (0, helpers_1.isSet)(object.redelegationEntry)
	                ? exports.RedelegationEntry.fromJSON(object.redelegationEntry)
	                : undefined,
	            balance: (0, helpers_1.isSet)(object.balance) ? String(object.balance) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.redelegationEntry !== undefined &&
	            (obj.redelegationEntry = message.redelegationEntry
	                ? exports.RedelegationEntry.toJSON(message.redelegationEntry)
	                : undefined);
	        message.balance !== undefined && (obj.balance = message.balance);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseRedelegationEntryResponse();
	        message.redelegationEntry =
	            object.redelegationEntry !== undefined && object.redelegationEntry !== null
	                ? exports.RedelegationEntry.fromPartial(object.redelegationEntry)
	                : undefined;
	        message.balance = object.balance ?? "";
	        return message;
	    },
	};
	function createBaseRedelegationResponse() {
	    return {
	        redelegation: undefined,
	        entries: [],
	    };
	}
	exports.RedelegationResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.redelegation !== undefined) {
	            exports.Redelegation.encode(message.redelegation, writer.uint32(10).fork()).ldelim();
	        }
	        for (const v of message.entries) {
	            exports.RedelegationEntryResponse.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRedelegationResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.redelegation = exports.Redelegation.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.entries.push(exports.RedelegationEntryResponse.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            redelegation: (0, helpers_1.isSet)(object.redelegation) ? exports.Redelegation.fromJSON(object.redelegation) : undefined,
	            entries: Array.isArray(object?.entries)
	                ? object.entries.map((e) => exports.RedelegationEntryResponse.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.redelegation !== undefined &&
	            (obj.redelegation = message.redelegation ? exports.Redelegation.toJSON(message.redelegation) : undefined);
	        if (message.entries) {
	            obj.entries = message.entries.map((e) => (e ? exports.RedelegationEntryResponse.toJSON(e) : undefined));
	        }
	        else {
	            obj.entries = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseRedelegationResponse();
	        message.redelegation =
	            object.redelegation !== undefined && object.redelegation !== null
	                ? exports.Redelegation.fromPartial(object.redelegation)
	                : undefined;
	        message.entries = object.entries?.map((e) => exports.RedelegationEntryResponse.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBasePool() {
	    return {
	        notBondedTokens: "",
	        bondedTokens: "",
	    };
	}
	exports.Pool = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.notBondedTokens !== "") {
	            writer.uint32(10).string(message.notBondedTokens);
	        }
	        if (message.bondedTokens !== "") {
	            writer.uint32(18).string(message.bondedTokens);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBasePool();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.notBondedTokens = reader.string();
	                    break;
	                case 2:
	                    message.bondedTokens = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            notBondedTokens: (0, helpers_1.isSet)(object.notBondedTokens) ? String(object.notBondedTokens) : "",
	            bondedTokens: (0, helpers_1.isSet)(object.bondedTokens) ? String(object.bondedTokens) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.notBondedTokens !== undefined && (obj.notBondedTokens = message.notBondedTokens);
	        message.bondedTokens !== undefined && (obj.bondedTokens = message.bondedTokens);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBasePool();
	        message.notBondedTokens = object.notBondedTokens ?? "";
	        message.bondedTokens = object.bondedTokens ?? "";
	        return message;
	    },
	};
	
} (staking));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.MsgClientImpl = exports.MsgUndelegateResponse = exports.MsgUndelegate = exports.MsgBeginRedelegateResponse = exports.MsgBeginRedelegate = exports.MsgDelegateResponse = exports.MsgDelegate = exports.MsgEditValidatorResponse = exports.MsgEditValidator = exports.MsgCreateValidatorResponse = exports.MsgCreateValidator = exports.protobufPackage = void 0;
	/* eslint-disable */
	const staking_1 = staking;
	const any_1 = any;
	const coin_1 = coin$1;
	const timestamp_1 = timestamp;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.staking.v1beta1";
	function createBaseMsgCreateValidator() {
	    return {
	        description: undefined,
	        commission: undefined,
	        minSelfDelegation: "",
	        delegatorAddress: "",
	        validatorAddress: "",
	        pubkey: undefined,
	        value: undefined,
	    };
	}
	exports.MsgCreateValidator = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.description !== undefined) {
	            staking_1.Description.encode(message.description, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.commission !== undefined) {
	            staking_1.CommissionRates.encode(message.commission, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.minSelfDelegation !== "") {
	            writer.uint32(26).string(message.minSelfDelegation);
	        }
	        if (message.delegatorAddress !== "") {
	            writer.uint32(34).string(message.delegatorAddress);
	        }
	        if (message.validatorAddress !== "") {
	            writer.uint32(42).string(message.validatorAddress);
	        }
	        if (message.pubkey !== undefined) {
	            any_1.Any.encode(message.pubkey, writer.uint32(50).fork()).ldelim();
	        }
	        if (message.value !== undefined) {
	            coin_1.Coin.encode(message.value, writer.uint32(58).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgCreateValidator();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.description = staking_1.Description.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.commission = staking_1.CommissionRates.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.minSelfDelegation = reader.string();
	                    break;
	                case 4:
	                    message.delegatorAddress = reader.string();
	                    break;
	                case 5:
	                    message.validatorAddress = reader.string();
	                    break;
	                case 6:
	                    message.pubkey = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 7:
	                    message.value = coin_1.Coin.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            description: (0, helpers_1.isSet)(object.description) ? staking_1.Description.fromJSON(object.description) : undefined,
	            commission: (0, helpers_1.isSet)(object.commission) ? staking_1.CommissionRates.fromJSON(object.commission) : undefined,
	            minSelfDelegation: (0, helpers_1.isSet)(object.minSelfDelegation) ? String(object.minSelfDelegation) : "",
	            delegatorAddress: (0, helpers_1.isSet)(object.delegatorAddress) ? String(object.delegatorAddress) : "",
	            validatorAddress: (0, helpers_1.isSet)(object.validatorAddress) ? String(object.validatorAddress) : "",
	            pubkey: (0, helpers_1.isSet)(object.pubkey) ? any_1.Any.fromJSON(object.pubkey) : undefined,
	            value: (0, helpers_1.isSet)(object.value) ? coin_1.Coin.fromJSON(object.value) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.description !== undefined &&
	            (obj.description = message.description ? staking_1.Description.toJSON(message.description) : undefined);
	        message.commission !== undefined &&
	            (obj.commission = message.commission ? staking_1.CommissionRates.toJSON(message.commission) : undefined);
	        message.minSelfDelegation !== undefined && (obj.minSelfDelegation = message.minSelfDelegation);
	        message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);
	        message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);
	        message.pubkey !== undefined && (obj.pubkey = message.pubkey ? any_1.Any.toJSON(message.pubkey) : undefined);
	        message.value !== undefined && (obj.value = message.value ? coin_1.Coin.toJSON(message.value) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgCreateValidator();
	        message.description =
	            object.description !== undefined && object.description !== null
	                ? staking_1.Description.fromPartial(object.description)
	                : undefined;
	        message.commission =
	            object.commission !== undefined && object.commission !== null
	                ? staking_1.CommissionRates.fromPartial(object.commission)
	                : undefined;
	        message.minSelfDelegation = object.minSelfDelegation ?? "";
	        message.delegatorAddress = object.delegatorAddress ?? "";
	        message.validatorAddress = object.validatorAddress ?? "";
	        message.pubkey =
	            object.pubkey !== undefined && object.pubkey !== null ? any_1.Any.fromPartial(object.pubkey) : undefined;
	        message.value =
	            object.value !== undefined && object.value !== null ? coin_1.Coin.fromPartial(object.value) : undefined;
	        return message;
	    },
	};
	function createBaseMsgCreateValidatorResponse() {
	    return {};
	}
	exports.MsgCreateValidatorResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgCreateValidatorResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgCreateValidatorResponse();
	        return message;
	    },
	};
	function createBaseMsgEditValidator() {
	    return {
	        description: undefined,
	        validatorAddress: "",
	        commissionRate: "",
	        minSelfDelegation: "",
	    };
	}
	exports.MsgEditValidator = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.description !== undefined) {
	            staking_1.Description.encode(message.description, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.validatorAddress !== "") {
	            writer.uint32(18).string(message.validatorAddress);
	        }
	        if (message.commissionRate !== "") {
	            writer.uint32(26).string(message.commissionRate);
	        }
	        if (message.minSelfDelegation !== "") {
	            writer.uint32(34).string(message.minSelfDelegation);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgEditValidator();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.description = staking_1.Description.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.validatorAddress = reader.string();
	                    break;
	                case 3:
	                    message.commissionRate = reader.string();
	                    break;
	                case 4:
	                    message.minSelfDelegation = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            description: (0, helpers_1.isSet)(object.description) ? staking_1.Description.fromJSON(object.description) : undefined,
	            validatorAddress: (0, helpers_1.isSet)(object.validatorAddress) ? String(object.validatorAddress) : "",
	            commissionRate: (0, helpers_1.isSet)(object.commissionRate) ? String(object.commissionRate) : "",
	            minSelfDelegation: (0, helpers_1.isSet)(object.minSelfDelegation) ? String(object.minSelfDelegation) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.description !== undefined &&
	            (obj.description = message.description ? staking_1.Description.toJSON(message.description) : undefined);
	        message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);
	        message.commissionRate !== undefined && (obj.commissionRate = message.commissionRate);
	        message.minSelfDelegation !== undefined && (obj.minSelfDelegation = message.minSelfDelegation);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgEditValidator();
	        message.description =
	            object.description !== undefined && object.description !== null
	                ? staking_1.Description.fromPartial(object.description)
	                : undefined;
	        message.validatorAddress = object.validatorAddress ?? "";
	        message.commissionRate = object.commissionRate ?? "";
	        message.minSelfDelegation = object.minSelfDelegation ?? "";
	        return message;
	    },
	};
	function createBaseMsgEditValidatorResponse() {
	    return {};
	}
	exports.MsgEditValidatorResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgEditValidatorResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgEditValidatorResponse();
	        return message;
	    },
	};
	function createBaseMsgDelegate() {
	    return {
	        delegatorAddress: "",
	        validatorAddress: "",
	        amount: undefined,
	    };
	}
	exports.MsgDelegate = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddress !== "") {
	            writer.uint32(10).string(message.delegatorAddress);
	        }
	        if (message.validatorAddress !== "") {
	            writer.uint32(18).string(message.validatorAddress);
	        }
	        if (message.amount !== undefined) {
	            coin_1.Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgDelegate();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddress = reader.string();
	                    break;
	                case 2:
	                    message.validatorAddress = reader.string();
	                    break;
	                case 3:
	                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddress: (0, helpers_1.isSet)(object.delegatorAddress) ? String(object.delegatorAddress) : "",
	            validatorAddress: (0, helpers_1.isSet)(object.validatorAddress) ? String(object.validatorAddress) : "",
	            amount: (0, helpers_1.isSet)(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);
	        message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);
	        message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgDelegate();
	        message.delegatorAddress = object.delegatorAddress ?? "";
	        message.validatorAddress = object.validatorAddress ?? "";
	        message.amount =
	            object.amount !== undefined && object.amount !== null ? coin_1.Coin.fromPartial(object.amount) : undefined;
	        return message;
	    },
	};
	function createBaseMsgDelegateResponse() {
	    return {};
	}
	exports.MsgDelegateResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgDelegateResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgDelegateResponse();
	        return message;
	    },
	};
	function createBaseMsgBeginRedelegate() {
	    return {
	        delegatorAddress: "",
	        validatorSrcAddress: "",
	        validatorDstAddress: "",
	        amount: undefined,
	    };
	}
	exports.MsgBeginRedelegate = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddress !== "") {
	            writer.uint32(10).string(message.delegatorAddress);
	        }
	        if (message.validatorSrcAddress !== "") {
	            writer.uint32(18).string(message.validatorSrcAddress);
	        }
	        if (message.validatorDstAddress !== "") {
	            writer.uint32(26).string(message.validatorDstAddress);
	        }
	        if (message.amount !== undefined) {
	            coin_1.Coin.encode(message.amount, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgBeginRedelegate();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddress = reader.string();
	                    break;
	                case 2:
	                    message.validatorSrcAddress = reader.string();
	                    break;
	                case 3:
	                    message.validatorDstAddress = reader.string();
	                    break;
	                case 4:
	                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddress: (0, helpers_1.isSet)(object.delegatorAddress) ? String(object.delegatorAddress) : "",
	            validatorSrcAddress: (0, helpers_1.isSet)(object.validatorSrcAddress) ? String(object.validatorSrcAddress) : "",
	            validatorDstAddress: (0, helpers_1.isSet)(object.validatorDstAddress) ? String(object.validatorDstAddress) : "",
	            amount: (0, helpers_1.isSet)(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);
	        message.validatorSrcAddress !== undefined && (obj.validatorSrcAddress = message.validatorSrcAddress);
	        message.validatorDstAddress !== undefined && (obj.validatorDstAddress = message.validatorDstAddress);
	        message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgBeginRedelegate();
	        message.delegatorAddress = object.delegatorAddress ?? "";
	        message.validatorSrcAddress = object.validatorSrcAddress ?? "";
	        message.validatorDstAddress = object.validatorDstAddress ?? "";
	        message.amount =
	            object.amount !== undefined && object.amount !== null ? coin_1.Coin.fromPartial(object.amount) : undefined;
	        return message;
	    },
	};
	function createBaseMsgBeginRedelegateResponse() {
	    return {
	        completionTime: undefined,
	    };
	}
	exports.MsgBeginRedelegateResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.completionTime !== undefined) {
	            timestamp_1.Timestamp.encode(message.completionTime, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgBeginRedelegateResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.completionTime = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            completionTime: (0, helpers_1.isSet)(object.completionTime) ? (0, helpers_1.fromJsonTimestamp)(object.completionTime) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.completionTime !== undefined &&
	            (obj.completionTime = (0, helpers_1.fromTimestamp)(message.completionTime).toISOString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgBeginRedelegateResponse();
	        message.completionTime =
	            object.completionTime !== undefined && object.completionTime !== null
	                ? timestamp_1.Timestamp.fromPartial(object.completionTime)
	                : undefined;
	        return message;
	    },
	};
	function createBaseMsgUndelegate() {
	    return {
	        delegatorAddress: "",
	        validatorAddress: "",
	        amount: undefined,
	    };
	}
	exports.MsgUndelegate = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddress !== "") {
	            writer.uint32(10).string(message.delegatorAddress);
	        }
	        if (message.validatorAddress !== "") {
	            writer.uint32(18).string(message.validatorAddress);
	        }
	        if (message.amount !== undefined) {
	            coin_1.Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgUndelegate();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddress = reader.string();
	                    break;
	                case 2:
	                    message.validatorAddress = reader.string();
	                    break;
	                case 3:
	                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddress: (0, helpers_1.isSet)(object.delegatorAddress) ? String(object.delegatorAddress) : "",
	            validatorAddress: (0, helpers_1.isSet)(object.validatorAddress) ? String(object.validatorAddress) : "",
	            amount: (0, helpers_1.isSet)(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddress !== undefined && (obj.delegatorAddress = message.delegatorAddress);
	        message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);
	        message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgUndelegate();
	        message.delegatorAddress = object.delegatorAddress ?? "";
	        message.validatorAddress = object.validatorAddress ?? "";
	        message.amount =
	            object.amount !== undefined && object.amount !== null ? coin_1.Coin.fromPartial(object.amount) : undefined;
	        return message;
	    },
	};
	function createBaseMsgUndelegateResponse() {
	    return {
	        completionTime: undefined,
	    };
	}
	exports.MsgUndelegateResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.completionTime !== undefined) {
	            timestamp_1.Timestamp.encode(message.completionTime, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgUndelegateResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.completionTime = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            completionTime: (0, helpers_1.isSet)(object.completionTime) ? (0, helpers_1.fromJsonTimestamp)(object.completionTime) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.completionTime !== undefined &&
	            (obj.completionTime = (0, helpers_1.fromTimestamp)(message.completionTime).toISOString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgUndelegateResponse();
	        message.completionTime =
	            object.completionTime !== undefined && object.completionTime !== null
	                ? timestamp_1.Timestamp.fromPartial(object.completionTime)
	                : undefined;
	        return message;
	    },
	};
	class MsgClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.CreateValidator = this.CreateValidator.bind(this);
	        this.EditValidator = this.EditValidator.bind(this);
	        this.Delegate = this.Delegate.bind(this);
	        this.BeginRedelegate = this.BeginRedelegate.bind(this);
	        this.Undelegate = this.Undelegate.bind(this);
	    }
	    CreateValidator(request) {
	        const data = exports.MsgCreateValidator.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Msg", "CreateValidator", data);
	        return promise.then((data) => exports.MsgCreateValidatorResponse.decode(new _m0.Reader(data)));
	    }
	    EditValidator(request) {
	        const data = exports.MsgEditValidator.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Msg", "EditValidator", data);
	        return promise.then((data) => exports.MsgEditValidatorResponse.decode(new _m0.Reader(data)));
	    }
	    Delegate(request) {
	        const data = exports.MsgDelegate.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Msg", "Delegate", data);
	        return promise.then((data) => exports.MsgDelegateResponse.decode(new _m0.Reader(data)));
	    }
	    BeginRedelegate(request) {
	        const data = exports.MsgBeginRedelegate.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Msg", "BeginRedelegate", data);
	        return promise.then((data) => exports.MsgBeginRedelegateResponse.decode(new _m0.Reader(data)));
	    }
	    Undelegate(request) {
	        const data = exports.MsgUndelegate.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Msg", "Undelegate", data);
	        return promise.then((data) => exports.MsgUndelegateResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.MsgClientImpl = MsgClientImpl;
	
} (tx$4));

Object.defineProperty(messages$1, "__esModule", { value: true });
messages$1.isMsgUndelegateEncodeObject = messages$1.isMsgEditValidatorEncodeObject = messages$1.isMsgDelegateEncodeObject = messages$1.isMsgCreateValidatorEncodeObject = messages$1.isMsgBeginRedelegateEncodeObject = messages$1.stakingTypes = void 0;
const tx_1$3 = tx$4;
messages$1.stakingTypes = [
    ["/cosmos.staking.v1beta1.MsgBeginRedelegate", tx_1$3.MsgBeginRedelegate],
    ["/cosmos.staking.v1beta1.MsgCreateValidator", tx_1$3.MsgCreateValidator],
    ["/cosmos.staking.v1beta1.MsgDelegate", tx_1$3.MsgDelegate],
    ["/cosmos.staking.v1beta1.MsgEditValidator", tx_1$3.MsgEditValidator],
    ["/cosmos.staking.v1beta1.MsgUndelegate", tx_1$3.MsgUndelegate],
];
function isMsgBeginRedelegateEncodeObject(o) {
    return o.typeUrl === "/cosmos.staking.v1beta1.MsgBeginRedelegate";
}
messages$1.isMsgBeginRedelegateEncodeObject = isMsgBeginRedelegateEncodeObject;
function isMsgCreateValidatorEncodeObject(o) {
    return o.typeUrl === "/cosmos.staking.v1beta1.MsgCreateValidator";
}
messages$1.isMsgCreateValidatorEncodeObject = isMsgCreateValidatorEncodeObject;
function isMsgDelegateEncodeObject(object) {
    return object.typeUrl === "/cosmos.staking.v1beta1.MsgDelegate";
}
messages$1.isMsgDelegateEncodeObject = isMsgDelegateEncodeObject;
function isMsgEditValidatorEncodeObject(o) {
    return o.typeUrl === "/cosmos.staking.v1beta1.MsgEditValidator";
}
messages$1.isMsgEditValidatorEncodeObject = isMsgEditValidatorEncodeObject;
function isMsgUndelegateEncodeObject(object) {
    return object.typeUrl === "/cosmos.staking.v1beta1.MsgUndelegate";
}
messages$1.isMsgUndelegateEncodeObject = isMsgUndelegateEncodeObject;

var queries$1 = {};

var query = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.QueryClientImpl = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryPoolResponse = exports.QueryPoolRequest = exports.QueryHistoricalInfoResponse = exports.QueryHistoricalInfoRequest = exports.QueryDelegatorValidatorResponse = exports.QueryDelegatorValidatorRequest = exports.QueryDelegatorValidatorsResponse = exports.QueryDelegatorValidatorsRequest = exports.QueryRedelegationsResponse = exports.QueryRedelegationsRequest = exports.QueryDelegatorUnbondingDelegationsResponse = exports.QueryDelegatorUnbondingDelegationsRequest = exports.QueryDelegatorDelegationsResponse = exports.QueryDelegatorDelegationsRequest = exports.QueryUnbondingDelegationResponse = exports.QueryUnbondingDelegationRequest = exports.QueryDelegationResponse = exports.QueryDelegationRequest = exports.QueryValidatorUnbondingDelegationsResponse = exports.QueryValidatorUnbondingDelegationsRequest = exports.QueryValidatorDelegationsResponse = exports.QueryValidatorDelegationsRequest = exports.QueryValidatorResponse = exports.QueryValidatorRequest = exports.QueryValidatorsResponse = exports.QueryValidatorsRequest = exports.protobufPackage = void 0;
	/* eslint-disable */
	const pagination_1 = pagination;
	const staking_1 = staking;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.staking.v1beta1";
	function createBaseQueryValidatorsRequest() {
	    return {
	        status: "",
	        pagination: undefined,
	    };
	}
	exports.QueryValidatorsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.status !== "") {
	            writer.uint32(10).string(message.status);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryValidatorsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.status = reader.string();
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            status: (0, helpers_1.isSet)(object.status) ? String(object.status) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.status !== undefined && (obj.status = message.status);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryValidatorsRequest();
	        message.status = object.status ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryValidatorsResponse() {
	    return {
	        validators: [],
	        pagination: undefined,
	    };
	}
	exports.QueryValidatorsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.validators) {
	            staking_1.Validator.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryValidatorsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.validators.push(staking_1.Validator.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            validators: Array.isArray(object?.validators)
	                ? object.validators.map((e) => staking_1.Validator.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.validators) {
	            obj.validators = message.validators.map((e) => (e ? staking_1.Validator.toJSON(e) : undefined));
	        }
	        else {
	            obj.validators = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryValidatorsResponse();
	        message.validators = object.validators?.map((e) => staking_1.Validator.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryValidatorRequest() {
	    return {
	        validatorAddr: "",
	    };
	}
	exports.QueryValidatorRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.validatorAddr !== "") {
	            writer.uint32(10).string(message.validatorAddr);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryValidatorRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.validatorAddr = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            validatorAddr: (0, helpers_1.isSet)(object.validatorAddr) ? String(object.validatorAddr) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryValidatorRequest();
	        message.validatorAddr = object.validatorAddr ?? "";
	        return message;
	    },
	};
	function createBaseQueryValidatorResponse() {
	    return {
	        validator: undefined,
	    };
	}
	exports.QueryValidatorResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.validator !== undefined) {
	            staking_1.Validator.encode(message.validator, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryValidatorResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.validator = staking_1.Validator.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            validator: (0, helpers_1.isSet)(object.validator) ? staking_1.Validator.fromJSON(object.validator) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.validator !== undefined &&
	            (obj.validator = message.validator ? staking_1.Validator.toJSON(message.validator) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryValidatorResponse();
	        message.validator =
	            object.validator !== undefined && object.validator !== null
	                ? staking_1.Validator.fromPartial(object.validator)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryValidatorDelegationsRequest() {
	    return {
	        validatorAddr: "",
	        pagination: undefined,
	    };
	}
	exports.QueryValidatorDelegationsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.validatorAddr !== "") {
	            writer.uint32(10).string(message.validatorAddr);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryValidatorDelegationsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.validatorAddr = reader.string();
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            validatorAddr: (0, helpers_1.isSet)(object.validatorAddr) ? String(object.validatorAddr) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryValidatorDelegationsRequest();
	        message.validatorAddr = object.validatorAddr ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryValidatorDelegationsResponse() {
	    return {
	        delegationResponses: [],
	        pagination: undefined,
	    };
	}
	exports.QueryValidatorDelegationsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.delegationResponses) {
	            staking_1.DelegationResponse.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryValidatorDelegationsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegationResponses.push(staking_1.DelegationResponse.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegationResponses: Array.isArray(object?.delegationResponses)
	                ? object.delegationResponses.map((e) => staking_1.DelegationResponse.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.delegationResponses) {
	            obj.delegationResponses = message.delegationResponses.map((e) => e ? staking_1.DelegationResponse.toJSON(e) : undefined);
	        }
	        else {
	            obj.delegationResponses = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryValidatorDelegationsResponse();
	        message.delegationResponses =
	            object.delegationResponses?.map((e) => staking_1.DelegationResponse.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryValidatorUnbondingDelegationsRequest() {
	    return {
	        validatorAddr: "",
	        pagination: undefined,
	    };
	}
	exports.QueryValidatorUnbondingDelegationsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.validatorAddr !== "") {
	            writer.uint32(10).string(message.validatorAddr);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryValidatorUnbondingDelegationsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.validatorAddr = reader.string();
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            validatorAddr: (0, helpers_1.isSet)(object.validatorAddr) ? String(object.validatorAddr) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryValidatorUnbondingDelegationsRequest();
	        message.validatorAddr = object.validatorAddr ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryValidatorUnbondingDelegationsResponse() {
	    return {
	        unbondingResponses: [],
	        pagination: undefined,
	    };
	}
	exports.QueryValidatorUnbondingDelegationsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.unbondingResponses) {
	            staking_1.UnbondingDelegation.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryValidatorUnbondingDelegationsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.unbondingResponses.push(staking_1.UnbondingDelegation.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            unbondingResponses: Array.isArray(object?.unbondingResponses)
	                ? object.unbondingResponses.map((e) => staking_1.UnbondingDelegation.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.unbondingResponses) {
	            obj.unbondingResponses = message.unbondingResponses.map((e) => e ? staking_1.UnbondingDelegation.toJSON(e) : undefined);
	        }
	        else {
	            obj.unbondingResponses = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryValidatorUnbondingDelegationsResponse();
	        message.unbondingResponses =
	            object.unbondingResponses?.map((e) => staking_1.UnbondingDelegation.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryDelegationRequest() {
	    return {
	        delegatorAddr: "",
	        validatorAddr: "",
	    };
	}
	exports.QueryDelegationRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddr !== "") {
	            writer.uint32(10).string(message.delegatorAddr);
	        }
	        if (message.validatorAddr !== "") {
	            writer.uint32(18).string(message.validatorAddr);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDelegationRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddr = reader.string();
	                    break;
	                case 2:
	                    message.validatorAddr = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddr: (0, helpers_1.isSet)(object.delegatorAddr) ? String(object.delegatorAddr) : "",
	            validatorAddr: (0, helpers_1.isSet)(object.validatorAddr) ? String(object.validatorAddr) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);
	        message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDelegationRequest();
	        message.delegatorAddr = object.delegatorAddr ?? "";
	        message.validatorAddr = object.validatorAddr ?? "";
	        return message;
	    },
	};
	function createBaseQueryDelegationResponse() {
	    return {
	        delegationResponse: undefined,
	    };
	}
	exports.QueryDelegationResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegationResponse !== undefined) {
	            staking_1.DelegationResponse.encode(message.delegationResponse, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDelegationResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegationResponse = staking_1.DelegationResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegationResponse: (0, helpers_1.isSet)(object.delegationResponse)
	                ? staking_1.DelegationResponse.fromJSON(object.delegationResponse)
	                : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegationResponse !== undefined &&
	            (obj.delegationResponse = message.delegationResponse
	                ? staking_1.DelegationResponse.toJSON(message.delegationResponse)
	                : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDelegationResponse();
	        message.delegationResponse =
	            object.delegationResponse !== undefined && object.delegationResponse !== null
	                ? staking_1.DelegationResponse.fromPartial(object.delegationResponse)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryUnbondingDelegationRequest() {
	    return {
	        delegatorAddr: "",
	        validatorAddr: "",
	    };
	}
	exports.QueryUnbondingDelegationRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddr !== "") {
	            writer.uint32(10).string(message.delegatorAddr);
	        }
	        if (message.validatorAddr !== "") {
	            writer.uint32(18).string(message.validatorAddr);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryUnbondingDelegationRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddr = reader.string();
	                    break;
	                case 2:
	                    message.validatorAddr = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddr: (0, helpers_1.isSet)(object.delegatorAddr) ? String(object.delegatorAddr) : "",
	            validatorAddr: (0, helpers_1.isSet)(object.validatorAddr) ? String(object.validatorAddr) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);
	        message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryUnbondingDelegationRequest();
	        message.delegatorAddr = object.delegatorAddr ?? "";
	        message.validatorAddr = object.validatorAddr ?? "";
	        return message;
	    },
	};
	function createBaseQueryUnbondingDelegationResponse() {
	    return {
	        unbond: undefined,
	    };
	}
	exports.QueryUnbondingDelegationResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.unbond !== undefined) {
	            staking_1.UnbondingDelegation.encode(message.unbond, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryUnbondingDelegationResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.unbond = staking_1.UnbondingDelegation.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            unbond: (0, helpers_1.isSet)(object.unbond) ? staking_1.UnbondingDelegation.fromJSON(object.unbond) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.unbond !== undefined &&
	            (obj.unbond = message.unbond ? staking_1.UnbondingDelegation.toJSON(message.unbond) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryUnbondingDelegationResponse();
	        message.unbond =
	            object.unbond !== undefined && object.unbond !== null
	                ? staking_1.UnbondingDelegation.fromPartial(object.unbond)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryDelegatorDelegationsRequest() {
	    return {
	        delegatorAddr: "",
	        pagination: undefined,
	    };
	}
	exports.QueryDelegatorDelegationsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddr !== "") {
	            writer.uint32(10).string(message.delegatorAddr);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDelegatorDelegationsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddr = reader.string();
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddr: (0, helpers_1.isSet)(object.delegatorAddr) ? String(object.delegatorAddr) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDelegatorDelegationsRequest();
	        message.delegatorAddr = object.delegatorAddr ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryDelegatorDelegationsResponse() {
	    return {
	        delegationResponses: [],
	        pagination: undefined,
	    };
	}
	exports.QueryDelegatorDelegationsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.delegationResponses) {
	            staking_1.DelegationResponse.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDelegatorDelegationsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegationResponses.push(staking_1.DelegationResponse.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegationResponses: Array.isArray(object?.delegationResponses)
	                ? object.delegationResponses.map((e) => staking_1.DelegationResponse.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.delegationResponses) {
	            obj.delegationResponses = message.delegationResponses.map((e) => e ? staking_1.DelegationResponse.toJSON(e) : undefined);
	        }
	        else {
	            obj.delegationResponses = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDelegatorDelegationsResponse();
	        message.delegationResponses =
	            object.delegationResponses?.map((e) => staking_1.DelegationResponse.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryDelegatorUnbondingDelegationsRequest() {
	    return {
	        delegatorAddr: "",
	        pagination: undefined,
	    };
	}
	exports.QueryDelegatorUnbondingDelegationsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddr !== "") {
	            writer.uint32(10).string(message.delegatorAddr);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDelegatorUnbondingDelegationsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddr = reader.string();
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddr: (0, helpers_1.isSet)(object.delegatorAddr) ? String(object.delegatorAddr) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDelegatorUnbondingDelegationsRequest();
	        message.delegatorAddr = object.delegatorAddr ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryDelegatorUnbondingDelegationsResponse() {
	    return {
	        unbondingResponses: [],
	        pagination: undefined,
	    };
	}
	exports.QueryDelegatorUnbondingDelegationsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.unbondingResponses) {
	            staking_1.UnbondingDelegation.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDelegatorUnbondingDelegationsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.unbondingResponses.push(staking_1.UnbondingDelegation.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            unbondingResponses: Array.isArray(object?.unbondingResponses)
	                ? object.unbondingResponses.map((e) => staking_1.UnbondingDelegation.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.unbondingResponses) {
	            obj.unbondingResponses = message.unbondingResponses.map((e) => e ? staking_1.UnbondingDelegation.toJSON(e) : undefined);
	        }
	        else {
	            obj.unbondingResponses = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDelegatorUnbondingDelegationsResponse();
	        message.unbondingResponses =
	            object.unbondingResponses?.map((e) => staking_1.UnbondingDelegation.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryRedelegationsRequest() {
	    return {
	        delegatorAddr: "",
	        srcValidatorAddr: "",
	        dstValidatorAddr: "",
	        pagination: undefined,
	    };
	}
	exports.QueryRedelegationsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddr !== "") {
	            writer.uint32(10).string(message.delegatorAddr);
	        }
	        if (message.srcValidatorAddr !== "") {
	            writer.uint32(18).string(message.srcValidatorAddr);
	        }
	        if (message.dstValidatorAddr !== "") {
	            writer.uint32(26).string(message.dstValidatorAddr);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryRedelegationsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddr = reader.string();
	                    break;
	                case 2:
	                    message.srcValidatorAddr = reader.string();
	                    break;
	                case 3:
	                    message.dstValidatorAddr = reader.string();
	                    break;
	                case 4:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddr: (0, helpers_1.isSet)(object.delegatorAddr) ? String(object.delegatorAddr) : "",
	            srcValidatorAddr: (0, helpers_1.isSet)(object.srcValidatorAddr) ? String(object.srcValidatorAddr) : "",
	            dstValidatorAddr: (0, helpers_1.isSet)(object.dstValidatorAddr) ? String(object.dstValidatorAddr) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);
	        message.srcValidatorAddr !== undefined && (obj.srcValidatorAddr = message.srcValidatorAddr);
	        message.dstValidatorAddr !== undefined && (obj.dstValidatorAddr = message.dstValidatorAddr);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryRedelegationsRequest();
	        message.delegatorAddr = object.delegatorAddr ?? "";
	        message.srcValidatorAddr = object.srcValidatorAddr ?? "";
	        message.dstValidatorAddr = object.dstValidatorAddr ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryRedelegationsResponse() {
	    return {
	        redelegationResponses: [],
	        pagination: undefined,
	    };
	}
	exports.QueryRedelegationsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.redelegationResponses) {
	            staking_1.RedelegationResponse.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryRedelegationsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.redelegationResponses.push(staking_1.RedelegationResponse.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            redelegationResponses: Array.isArray(object?.redelegationResponses)
	                ? object.redelegationResponses.map((e) => staking_1.RedelegationResponse.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.redelegationResponses) {
	            obj.redelegationResponses = message.redelegationResponses.map((e) => e ? staking_1.RedelegationResponse.toJSON(e) : undefined);
	        }
	        else {
	            obj.redelegationResponses = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryRedelegationsResponse();
	        message.redelegationResponses =
	            object.redelegationResponses?.map((e) => staking_1.RedelegationResponse.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryDelegatorValidatorsRequest() {
	    return {
	        delegatorAddr: "",
	        pagination: undefined,
	    };
	}
	exports.QueryDelegatorValidatorsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddr !== "") {
	            writer.uint32(10).string(message.delegatorAddr);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDelegatorValidatorsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddr = reader.string();
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddr: (0, helpers_1.isSet)(object.delegatorAddr) ? String(object.delegatorAddr) : "",
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDelegatorValidatorsRequest();
	        message.delegatorAddr = object.delegatorAddr ?? "";
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryDelegatorValidatorsResponse() {
	    return {
	        validators: [],
	        pagination: undefined,
	    };
	}
	exports.QueryDelegatorValidatorsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.validators) {
	            staking_1.Validator.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDelegatorValidatorsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.validators.push(staking_1.Validator.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            validators: Array.isArray(object?.validators)
	                ? object.validators.map((e) => staking_1.Validator.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.validators) {
	            obj.validators = message.validators.map((e) => (e ? staking_1.Validator.toJSON(e) : undefined));
	        }
	        else {
	            obj.validators = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDelegatorValidatorsResponse();
	        message.validators = object.validators?.map((e) => staking_1.Validator.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryDelegatorValidatorRequest() {
	    return {
	        delegatorAddr: "",
	        validatorAddr: "",
	    };
	}
	exports.QueryDelegatorValidatorRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.delegatorAddr !== "") {
	            writer.uint32(10).string(message.delegatorAddr);
	        }
	        if (message.validatorAddr !== "") {
	            writer.uint32(18).string(message.validatorAddr);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDelegatorValidatorRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.delegatorAddr = reader.string();
	                    break;
	                case 2:
	                    message.validatorAddr = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            delegatorAddr: (0, helpers_1.isSet)(object.delegatorAddr) ? String(object.delegatorAddr) : "",
	            validatorAddr: (0, helpers_1.isSet)(object.validatorAddr) ? String(object.validatorAddr) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);
	        message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDelegatorValidatorRequest();
	        message.delegatorAddr = object.delegatorAddr ?? "";
	        message.validatorAddr = object.validatorAddr ?? "";
	        return message;
	    },
	};
	function createBaseQueryDelegatorValidatorResponse() {
	    return {
	        validator: undefined,
	    };
	}
	exports.QueryDelegatorValidatorResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.validator !== undefined) {
	            staking_1.Validator.encode(message.validator, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryDelegatorValidatorResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.validator = staking_1.Validator.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            validator: (0, helpers_1.isSet)(object.validator) ? staking_1.Validator.fromJSON(object.validator) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.validator !== undefined &&
	            (obj.validator = message.validator ? staking_1.Validator.toJSON(message.validator) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryDelegatorValidatorResponse();
	        message.validator =
	            object.validator !== undefined && object.validator !== null
	                ? staking_1.Validator.fromPartial(object.validator)
	                : undefined;
	        return message;
	    },
	};
	function createBaseQueryHistoricalInfoRequest() {
	    return {
	        height: helpers_1.Long.ZERO,
	    };
	}
	exports.QueryHistoricalInfoRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.height.isZero()) {
	            writer.uint32(8).int64(message.height);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryHistoricalInfoRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.height = reader.int64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.ZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryHistoricalInfoRequest();
	        message.height =
	            object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO;
	        return message;
	    },
	};
	function createBaseQueryHistoricalInfoResponse() {
	    return {
	        hist: undefined,
	    };
	}
	exports.QueryHistoricalInfoResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.hist !== undefined) {
	            staking_1.HistoricalInfo.encode(message.hist, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryHistoricalInfoResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.hist = staking_1.HistoricalInfo.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            hist: (0, helpers_1.isSet)(object.hist) ? staking_1.HistoricalInfo.fromJSON(object.hist) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.hist !== undefined && (obj.hist = message.hist ? staking_1.HistoricalInfo.toJSON(message.hist) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryHistoricalInfoResponse();
	        message.hist =
	            object.hist !== undefined && object.hist !== null ? staking_1.HistoricalInfo.fromPartial(object.hist) : undefined;
	        return message;
	    },
	};
	function createBaseQueryPoolRequest() {
	    return {};
	}
	exports.QueryPoolRequest = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryPoolRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseQueryPoolRequest();
	        return message;
	    },
	};
	function createBaseQueryPoolResponse() {
	    return {
	        pool: undefined,
	    };
	}
	exports.QueryPoolResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.pool !== undefined) {
	            staking_1.Pool.encode(message.pool, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryPoolResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.pool = staking_1.Pool.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            pool: (0, helpers_1.isSet)(object.pool) ? staking_1.Pool.fromJSON(object.pool) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.pool !== undefined && (obj.pool = message.pool ? staking_1.Pool.toJSON(message.pool) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryPoolResponse();
	        message.pool =
	            object.pool !== undefined && object.pool !== null ? staking_1.Pool.fromPartial(object.pool) : undefined;
	        return message;
	    },
	};
	function createBaseQueryParamsRequest() {
	    return {};
	}
	exports.QueryParamsRequest = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryParamsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseQueryParamsRequest();
	        return message;
	    },
	};
	function createBaseQueryParamsResponse() {
	    return {
	        params: undefined,
	    };
	}
	exports.QueryParamsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.params !== undefined) {
	            staking_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseQueryParamsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.params = staking_1.Params.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            params: (0, helpers_1.isSet)(object.params) ? staking_1.Params.fromJSON(object.params) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.params !== undefined && (obj.params = message.params ? staking_1.Params.toJSON(message.params) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseQueryParamsResponse();
	        message.params =
	            object.params !== undefined && object.params !== null ? staking_1.Params.fromPartial(object.params) : undefined;
	        return message;
	    },
	};
	class QueryClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.Validators = this.Validators.bind(this);
	        this.Validator = this.Validator.bind(this);
	        this.ValidatorDelegations = this.ValidatorDelegations.bind(this);
	        this.ValidatorUnbondingDelegations = this.ValidatorUnbondingDelegations.bind(this);
	        this.Delegation = this.Delegation.bind(this);
	        this.UnbondingDelegation = this.UnbondingDelegation.bind(this);
	        this.DelegatorDelegations = this.DelegatorDelegations.bind(this);
	        this.DelegatorUnbondingDelegations = this.DelegatorUnbondingDelegations.bind(this);
	        this.Redelegations = this.Redelegations.bind(this);
	        this.DelegatorValidators = this.DelegatorValidators.bind(this);
	        this.DelegatorValidator = this.DelegatorValidator.bind(this);
	        this.HistoricalInfo = this.HistoricalInfo.bind(this);
	        this.Pool = this.Pool.bind(this);
	        this.Params = this.Params.bind(this);
	    }
	    Validators(request) {
	        const data = exports.QueryValidatorsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "Validators", data);
	        return promise.then((data) => exports.QueryValidatorsResponse.decode(new _m0.Reader(data)));
	    }
	    Validator(request) {
	        const data = exports.QueryValidatorRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "Validator", data);
	        return promise.then((data) => exports.QueryValidatorResponse.decode(new _m0.Reader(data)));
	    }
	    ValidatorDelegations(request) {
	        const data = exports.QueryValidatorDelegationsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "ValidatorDelegations", data);
	        return promise.then((data) => exports.QueryValidatorDelegationsResponse.decode(new _m0.Reader(data)));
	    }
	    ValidatorUnbondingDelegations(request) {
	        const data = exports.QueryValidatorUnbondingDelegationsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "ValidatorUnbondingDelegations", data);
	        return promise.then((data) => exports.QueryValidatorUnbondingDelegationsResponse.decode(new _m0.Reader(data)));
	    }
	    Delegation(request) {
	        const data = exports.QueryDelegationRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "Delegation", data);
	        return promise.then((data) => exports.QueryDelegationResponse.decode(new _m0.Reader(data)));
	    }
	    UnbondingDelegation(request) {
	        const data = exports.QueryUnbondingDelegationRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "UnbondingDelegation", data);
	        return promise.then((data) => exports.QueryUnbondingDelegationResponse.decode(new _m0.Reader(data)));
	    }
	    DelegatorDelegations(request) {
	        const data = exports.QueryDelegatorDelegationsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "DelegatorDelegations", data);
	        return promise.then((data) => exports.QueryDelegatorDelegationsResponse.decode(new _m0.Reader(data)));
	    }
	    DelegatorUnbondingDelegations(request) {
	        const data = exports.QueryDelegatorUnbondingDelegationsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "DelegatorUnbondingDelegations", data);
	        return promise.then((data) => exports.QueryDelegatorUnbondingDelegationsResponse.decode(new _m0.Reader(data)));
	    }
	    Redelegations(request) {
	        const data = exports.QueryRedelegationsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "Redelegations", data);
	        return promise.then((data) => exports.QueryRedelegationsResponse.decode(new _m0.Reader(data)));
	    }
	    DelegatorValidators(request) {
	        const data = exports.QueryDelegatorValidatorsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "DelegatorValidators", data);
	        return promise.then((data) => exports.QueryDelegatorValidatorsResponse.decode(new _m0.Reader(data)));
	    }
	    DelegatorValidator(request) {
	        const data = exports.QueryDelegatorValidatorRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "DelegatorValidator", data);
	        return promise.then((data) => exports.QueryDelegatorValidatorResponse.decode(new _m0.Reader(data)));
	    }
	    HistoricalInfo(request) {
	        const data = exports.QueryHistoricalInfoRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "HistoricalInfo", data);
	        return promise.then((data) => exports.QueryHistoricalInfoResponse.decode(new _m0.Reader(data)));
	    }
	    Pool(request = {}) {
	        const data = exports.QueryPoolRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "Pool", data);
	        return promise.then((data) => exports.QueryPoolResponse.decode(new _m0.Reader(data)));
	    }
	    Params(request = {}) {
	        const data = exports.QueryParamsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.staking.v1beta1.Query", "Params", data);
	        return promise.then((data) => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.QueryClientImpl = QueryClientImpl;
	
} (query));

var __importDefault$5 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(queries$1, "__esModule", { value: true });
queries$1.setupStakingExtension = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const query_1 = query;
const long_1$3 = __importDefault$5(long);
const queryclient_1$2 = queryclient$1;
function setupStakingExtension(base) {
    // Use this service to get easy typed access to query methods
    // This cannot be used for proof verification
    const rpc = (0, queryclient_1$2.createProtobufRpcClient)(base);
    const queryService = new query_1.QueryClientImpl(rpc);
    return {
        staking: {
            delegation: async (delegatorAddress, validatorAddress) => {
                const response = await queryService.Delegation({
                    delegatorAddr: delegatorAddress,
                    validatorAddr: validatorAddress,
                });
                return response;
            },
            delegatorDelegations: async (delegatorAddress, paginationKey) => {
                const response = await queryService.DelegatorDelegations({
                    delegatorAddr: delegatorAddress,
                    pagination: (0, queryclient_1$2.createPagination)(paginationKey),
                });
                return response;
            },
            delegatorUnbondingDelegations: async (delegatorAddress, paginationKey) => {
                const response = await queryService.DelegatorUnbondingDelegations({
                    delegatorAddr: delegatorAddress,
                    pagination: (0, queryclient_1$2.createPagination)(paginationKey),
                });
                return response;
            },
            delegatorValidator: async (delegatorAddress, validatorAddress) => {
                const response = await queryService.DelegatorValidator({
                    delegatorAddr: delegatorAddress,
                    validatorAddr: validatorAddress,
                });
                return response;
            },
            delegatorValidators: async (delegatorAddress, paginationKey) => {
                const response = await queryService.DelegatorValidators({
                    delegatorAddr: delegatorAddress,
                    pagination: (0, queryclient_1$2.createPagination)(paginationKey),
                });
                return response;
            },
            historicalInfo: async (height) => {
                const response = await queryService.HistoricalInfo({
                    height: long_1$3.default.fromNumber(height, true),
                });
                return response;
            },
            params: async () => {
                const response = await queryService.Params({});
                return response;
            },
            pool: async () => {
                const response = await queryService.Pool({});
                return response;
            },
            redelegations: async (delegatorAddress, sourceValidatorAddress, destinationValidatorAddress, paginationKey) => {
                const response = await queryService.Redelegations({
                    delegatorAddr: delegatorAddress,
                    srcValidatorAddr: sourceValidatorAddress,
                    dstValidatorAddr: destinationValidatorAddress,
                    pagination: (0, queryclient_1$2.createPagination)(paginationKey),
                });
                return response;
            },
            unbondingDelegation: async (delegatorAddress, validatorAddress) => {
                const response = await queryService.UnbondingDelegation({
                    delegatorAddr: delegatorAddress,
                    validatorAddr: validatorAddress,
                });
                return response;
            },
            validator: async (validatorAddress) => {
                const response = await queryService.Validator({ validatorAddr: validatorAddress });
                return response;
            },
            validatorDelegations: async (validatorAddress, paginationKey) => {
                const response = await queryService.ValidatorDelegations({
                    validatorAddr: validatorAddress,
                    pagination: (0, queryclient_1$2.createPagination)(paginationKey),
                });
                return response;
            },
            validators: async (status, paginationKey) => {
                const response = await queryService.Validators({
                    status: status,
                    pagination: (0, queryclient_1$2.createPagination)(paginationKey),
                });
                return response;
            },
            validatorUnbondingDelegations: async (validatorAddress, paginationKey) => {
                const response = await queryService.ValidatorUnbondingDelegations({
                    validatorAddr: validatorAddress,
                    pagination: (0, queryclient_1$2.createPagination)(paginationKey),
                });
                return response;
            },
        },
    };
}
queries$1.setupStakingExtension = setupStakingExtension;

var queries = {};

var service = {};

var abci = {};

var types$2 = {};

var params = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.HashedParams = exports.VersionParams = exports.ValidatorParams = exports.EvidenceParams = exports.BlockParams = exports.ConsensusParams = exports.protobufPackage = void 0;
	/* eslint-disable */
	const duration_1 = duration;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "tendermint.types";
	function createBaseConsensusParams() {
	    return {
	        block: undefined,
	        evidence: undefined,
	        validator: undefined,
	        version: undefined,
	    };
	}
	exports.ConsensusParams = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.block !== undefined) {
	            exports.BlockParams.encode(message.block, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.evidence !== undefined) {
	            exports.EvidenceParams.encode(message.evidence, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.validator !== undefined) {
	            exports.ValidatorParams.encode(message.validator, writer.uint32(26).fork()).ldelim();
	        }
	        if (message.version !== undefined) {
	            exports.VersionParams.encode(message.version, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseConsensusParams();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.block = exports.BlockParams.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.evidence = exports.EvidenceParams.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.validator = exports.ValidatorParams.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.version = exports.VersionParams.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            block: (0, helpers_1.isSet)(object.block) ? exports.BlockParams.fromJSON(object.block) : undefined,
	            evidence: (0, helpers_1.isSet)(object.evidence) ? exports.EvidenceParams.fromJSON(object.evidence) : undefined,
	            validator: (0, helpers_1.isSet)(object.validator) ? exports.ValidatorParams.fromJSON(object.validator) : undefined,
	            version: (0, helpers_1.isSet)(object.version) ? exports.VersionParams.fromJSON(object.version) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.block !== undefined &&
	            (obj.block = message.block ? exports.BlockParams.toJSON(message.block) : undefined);
	        message.evidence !== undefined &&
	            (obj.evidence = message.evidence ? exports.EvidenceParams.toJSON(message.evidence) : undefined);
	        message.validator !== undefined &&
	            (obj.validator = message.validator ? exports.ValidatorParams.toJSON(message.validator) : undefined);
	        message.version !== undefined &&
	            (obj.version = message.version ? exports.VersionParams.toJSON(message.version) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseConsensusParams();
	        message.block =
	            object.block !== undefined && object.block !== null ? exports.BlockParams.fromPartial(object.block) : undefined;
	        message.evidence =
	            object.evidence !== undefined && object.evidence !== null
	                ? exports.EvidenceParams.fromPartial(object.evidence)
	                : undefined;
	        message.validator =
	            object.validator !== undefined && object.validator !== null
	                ? exports.ValidatorParams.fromPartial(object.validator)
	                : undefined;
	        message.version =
	            object.version !== undefined && object.version !== null
	                ? exports.VersionParams.fromPartial(object.version)
	                : undefined;
	        return message;
	    },
	};
	function createBaseBlockParams() {
	    return {
	        maxBytes: helpers_1.Long.ZERO,
	        maxGas: helpers_1.Long.ZERO,
	        timeIotaMs: helpers_1.Long.ZERO,
	    };
	}
	exports.BlockParams = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.maxBytes.isZero()) {
	            writer.uint32(8).int64(message.maxBytes);
	        }
	        if (!message.maxGas.isZero()) {
	            writer.uint32(16).int64(message.maxGas);
	        }
	        if (!message.timeIotaMs.isZero()) {
	            writer.uint32(24).int64(message.timeIotaMs);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseBlockParams();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.maxBytes = reader.int64();
	                    break;
	                case 2:
	                    message.maxGas = reader.int64();
	                    break;
	                case 3:
	                    message.timeIotaMs = reader.int64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            maxBytes: (0, helpers_1.isSet)(object.maxBytes) ? helpers_1.Long.fromValue(object.maxBytes) : helpers_1.Long.ZERO,
	            maxGas: (0, helpers_1.isSet)(object.maxGas) ? helpers_1.Long.fromValue(object.maxGas) : helpers_1.Long.ZERO,
	            timeIotaMs: (0, helpers_1.isSet)(object.timeIotaMs) ? helpers_1.Long.fromValue(object.timeIotaMs) : helpers_1.Long.ZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.maxBytes !== undefined && (obj.maxBytes = (message.maxBytes || helpers_1.Long.ZERO).toString());
	        message.maxGas !== undefined && (obj.maxGas = (message.maxGas || helpers_1.Long.ZERO).toString());
	        message.timeIotaMs !== undefined && (obj.timeIotaMs = (message.timeIotaMs || helpers_1.Long.ZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseBlockParams();
	        message.maxBytes =
	            object.maxBytes !== undefined && object.maxBytes !== null ? helpers_1.Long.fromValue(object.maxBytes) : helpers_1.Long.ZERO;
	        message.maxGas =
	            object.maxGas !== undefined && object.maxGas !== null ? helpers_1.Long.fromValue(object.maxGas) : helpers_1.Long.ZERO;
	        message.timeIotaMs =
	            object.timeIotaMs !== undefined && object.timeIotaMs !== null
	                ? helpers_1.Long.fromValue(object.timeIotaMs)
	                : helpers_1.Long.ZERO;
	        return message;
	    },
	};
	function createBaseEvidenceParams() {
	    return {
	        maxAgeNumBlocks: helpers_1.Long.ZERO,
	        maxAgeDuration: undefined,
	        maxBytes: helpers_1.Long.ZERO,
	    };
	}
	exports.EvidenceParams = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.maxAgeNumBlocks.isZero()) {
	            writer.uint32(8).int64(message.maxAgeNumBlocks);
	        }
	        if (message.maxAgeDuration !== undefined) {
	            duration_1.Duration.encode(message.maxAgeDuration, writer.uint32(18).fork()).ldelim();
	        }
	        if (!message.maxBytes.isZero()) {
	            writer.uint32(24).int64(message.maxBytes);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseEvidenceParams();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.maxAgeNumBlocks = reader.int64();
	                    break;
	                case 2:
	                    message.maxAgeDuration = duration_1.Duration.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.maxBytes = reader.int64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            maxAgeNumBlocks: (0, helpers_1.isSet)(object.maxAgeNumBlocks) ? helpers_1.Long.fromValue(object.maxAgeNumBlocks) : helpers_1.Long.ZERO,
	            maxAgeDuration: (0, helpers_1.isSet)(object.maxAgeDuration) ? duration_1.Duration.fromJSON(object.maxAgeDuration) : undefined,
	            maxBytes: (0, helpers_1.isSet)(object.maxBytes) ? helpers_1.Long.fromValue(object.maxBytes) : helpers_1.Long.ZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.maxAgeNumBlocks !== undefined &&
	            (obj.maxAgeNumBlocks = (message.maxAgeNumBlocks || helpers_1.Long.ZERO).toString());
	        message.maxAgeDuration !== undefined &&
	            (obj.maxAgeDuration = message.maxAgeDuration ? duration_1.Duration.toJSON(message.maxAgeDuration) : undefined);
	        message.maxBytes !== undefined && (obj.maxBytes = (message.maxBytes || helpers_1.Long.ZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseEvidenceParams();
	        message.maxAgeNumBlocks =
	            object.maxAgeNumBlocks !== undefined && object.maxAgeNumBlocks !== null
	                ? helpers_1.Long.fromValue(object.maxAgeNumBlocks)
	                : helpers_1.Long.ZERO;
	        message.maxAgeDuration =
	            object.maxAgeDuration !== undefined && object.maxAgeDuration !== null
	                ? duration_1.Duration.fromPartial(object.maxAgeDuration)
	                : undefined;
	        message.maxBytes =
	            object.maxBytes !== undefined && object.maxBytes !== null ? helpers_1.Long.fromValue(object.maxBytes) : helpers_1.Long.ZERO;
	        return message;
	    },
	};
	function createBaseValidatorParams() {
	    return {
	        pubKeyTypes: [],
	    };
	}
	exports.ValidatorParams = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.pubKeyTypes) {
	            writer.uint32(10).string(v);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseValidatorParams();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.pubKeyTypes.push(reader.string());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            pubKeyTypes: Array.isArray(object?.pubKeyTypes) ? object.pubKeyTypes.map((e) => String(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.pubKeyTypes) {
	            obj.pubKeyTypes = message.pubKeyTypes.map((e) => e);
	        }
	        else {
	            obj.pubKeyTypes = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseValidatorParams();
	        message.pubKeyTypes = object.pubKeyTypes?.map((e) => e) || [];
	        return message;
	    },
	};
	function createBaseVersionParams() {
	    return {
	        appVersion: helpers_1.Long.UZERO,
	    };
	}
	exports.VersionParams = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.appVersion.isZero()) {
	            writer.uint32(8).uint64(message.appVersion);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseVersionParams();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.appVersion = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            appVersion: (0, helpers_1.isSet)(object.appVersion) ? helpers_1.Long.fromValue(object.appVersion) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.appVersion !== undefined && (obj.appVersion = (message.appVersion || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseVersionParams();
	        message.appVersion =
	            object.appVersion !== undefined && object.appVersion !== null
	                ? helpers_1.Long.fromValue(object.appVersion)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseHashedParams() {
	    return {
	        blockMaxBytes: helpers_1.Long.ZERO,
	        blockMaxGas: helpers_1.Long.ZERO,
	    };
	}
	exports.HashedParams = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.blockMaxBytes.isZero()) {
	            writer.uint32(8).int64(message.blockMaxBytes);
	        }
	        if (!message.blockMaxGas.isZero()) {
	            writer.uint32(16).int64(message.blockMaxGas);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseHashedParams();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.blockMaxBytes = reader.int64();
	                    break;
	                case 2:
	                    message.blockMaxGas = reader.int64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            blockMaxBytes: (0, helpers_1.isSet)(object.blockMaxBytes) ? helpers_1.Long.fromValue(object.blockMaxBytes) : helpers_1.Long.ZERO,
	            blockMaxGas: (0, helpers_1.isSet)(object.blockMaxGas) ? helpers_1.Long.fromValue(object.blockMaxGas) : helpers_1.Long.ZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.blockMaxBytes !== undefined &&
	            (obj.blockMaxBytes = (message.blockMaxBytes || helpers_1.Long.ZERO).toString());
	        message.blockMaxGas !== undefined && (obj.blockMaxGas = (message.blockMaxGas || helpers_1.Long.ZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseHashedParams();
	        message.blockMaxBytes =
	            object.blockMaxBytes !== undefined && object.blockMaxBytes !== null
	                ? helpers_1.Long.fromValue(object.blockMaxBytes)
	                : helpers_1.Long.ZERO;
	        message.blockMaxGas =
	            object.blockMaxGas !== undefined && object.blockMaxGas !== null
	                ? helpers_1.Long.fromValue(object.blockMaxGas)
	                : helpers_1.Long.ZERO;
	        return message;
	    },
	};
	
} (params));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Event = exports.LastCommitInfo = exports.BlockParams = exports.ConsensusParams = exports.ResponseApplySnapshotChunk = exports.ResponseLoadSnapshotChunk = exports.ResponseOfferSnapshot = exports.ResponseListSnapshots = exports.ResponseCommit = exports.ResponseEndBlock = exports.ResponseDeliverTx = exports.ResponseCheckTx = exports.ResponseBeginBlock = exports.ResponseQuery = exports.ResponseInitChain = exports.ResponseSetOption = exports.ResponseInfo = exports.ResponseFlush = exports.ResponseEcho = exports.ResponseException = exports.Response = exports.RequestApplySnapshotChunk = exports.RequestLoadSnapshotChunk = exports.RequestOfferSnapshot = exports.RequestListSnapshots = exports.RequestCommit = exports.RequestEndBlock = exports.RequestDeliverTx = exports.RequestCheckTx = exports.RequestBeginBlock = exports.RequestQuery = exports.RequestInitChain = exports.RequestSetOption = exports.RequestInfo = exports.RequestFlush = exports.RequestEcho = exports.Request = exports.evidenceTypeToJSON = exports.evidenceTypeFromJSON = exports.EvidenceType = exports.responseApplySnapshotChunk_ResultToJSON = exports.responseApplySnapshotChunk_ResultFromJSON = exports.ResponseApplySnapshotChunk_Result = exports.responseOfferSnapshot_ResultToJSON = exports.responseOfferSnapshot_ResultFromJSON = exports.ResponseOfferSnapshot_Result = exports.checkTxTypeToJSON = exports.checkTxTypeFromJSON = exports.CheckTxType = exports.protobufPackage = void 0;
	exports.ABCIApplicationClientImpl = exports.Snapshot = exports.Evidence = exports.VoteInfo = exports.ValidatorUpdate = exports.Validator = exports.TxResult = exports.EventAttribute = void 0;
	/* eslint-disable */
	const timestamp_1 = timestamp;
	const types_1 = types$4;
	const proof_1 = proof;
	const params_1 = params;
	const keys_1 = keys;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "tendermint.abci";
	var CheckTxType;
	(function (CheckTxType) {
	    CheckTxType[CheckTxType["NEW"] = 0] = "NEW";
	    CheckTxType[CheckTxType["RECHECK"] = 1] = "RECHECK";
	    CheckTxType[CheckTxType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
	})(CheckTxType = exports.CheckTxType || (exports.CheckTxType = {}));
	function checkTxTypeFromJSON(object) {
	    switch (object) {
	        case 0:
	        case "NEW":
	            return CheckTxType.NEW;
	        case 1:
	        case "RECHECK":
	            return CheckTxType.RECHECK;
	        case -1:
	        case "UNRECOGNIZED":
	        default:
	            return CheckTxType.UNRECOGNIZED;
	    }
	}
	exports.checkTxTypeFromJSON = checkTxTypeFromJSON;
	function checkTxTypeToJSON(object) {
	    switch (object) {
	        case CheckTxType.NEW:
	            return "NEW";
	        case CheckTxType.RECHECK:
	            return "RECHECK";
	        case CheckTxType.UNRECOGNIZED:
	        default:
	            return "UNRECOGNIZED";
	    }
	}
	exports.checkTxTypeToJSON = checkTxTypeToJSON;
	var ResponseOfferSnapshot_Result;
	(function (ResponseOfferSnapshot_Result) {
	    /** UNKNOWN - Unknown result, abort all snapshot restoration */
	    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["UNKNOWN"] = 0] = "UNKNOWN";
	    /** ACCEPT - Snapshot accepted, apply chunks */
	    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["ACCEPT"] = 1] = "ACCEPT";
	    /** ABORT - Abort all snapshot restoration */
	    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["ABORT"] = 2] = "ABORT";
	    /** REJECT - Reject this specific snapshot, try others */
	    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["REJECT"] = 3] = "REJECT";
	    /** REJECT_FORMAT - Reject all snapshots of this format, try others */
	    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["REJECT_FORMAT"] = 4] = "REJECT_FORMAT";
	    /** REJECT_SENDER - Reject all snapshots from the sender(s), try others */
	    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["REJECT_SENDER"] = 5] = "REJECT_SENDER";
	    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
	})(ResponseOfferSnapshot_Result = exports.ResponseOfferSnapshot_Result || (exports.ResponseOfferSnapshot_Result = {}));
	function responseOfferSnapshot_ResultFromJSON(object) {
	    switch (object) {
	        case 0:
	        case "UNKNOWN":
	            return ResponseOfferSnapshot_Result.UNKNOWN;
	        case 1:
	        case "ACCEPT":
	            return ResponseOfferSnapshot_Result.ACCEPT;
	        case 2:
	        case "ABORT":
	            return ResponseOfferSnapshot_Result.ABORT;
	        case 3:
	        case "REJECT":
	            return ResponseOfferSnapshot_Result.REJECT;
	        case 4:
	        case "REJECT_FORMAT":
	            return ResponseOfferSnapshot_Result.REJECT_FORMAT;
	        case 5:
	        case "REJECT_SENDER":
	            return ResponseOfferSnapshot_Result.REJECT_SENDER;
	        case -1:
	        case "UNRECOGNIZED":
	        default:
	            return ResponseOfferSnapshot_Result.UNRECOGNIZED;
	    }
	}
	exports.responseOfferSnapshot_ResultFromJSON = responseOfferSnapshot_ResultFromJSON;
	function responseOfferSnapshot_ResultToJSON(object) {
	    switch (object) {
	        case ResponseOfferSnapshot_Result.UNKNOWN:
	            return "UNKNOWN";
	        case ResponseOfferSnapshot_Result.ACCEPT:
	            return "ACCEPT";
	        case ResponseOfferSnapshot_Result.ABORT:
	            return "ABORT";
	        case ResponseOfferSnapshot_Result.REJECT:
	            return "REJECT";
	        case ResponseOfferSnapshot_Result.REJECT_FORMAT:
	            return "REJECT_FORMAT";
	        case ResponseOfferSnapshot_Result.REJECT_SENDER:
	            return "REJECT_SENDER";
	        case ResponseOfferSnapshot_Result.UNRECOGNIZED:
	        default:
	            return "UNRECOGNIZED";
	    }
	}
	exports.responseOfferSnapshot_ResultToJSON = responseOfferSnapshot_ResultToJSON;
	var ResponseApplySnapshotChunk_Result;
	(function (ResponseApplySnapshotChunk_Result) {
	    /** UNKNOWN - Unknown result, abort all snapshot restoration */
	    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["UNKNOWN"] = 0] = "UNKNOWN";
	    /** ACCEPT - Chunk successfully accepted */
	    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["ACCEPT"] = 1] = "ACCEPT";
	    /** ABORT - Abort all snapshot restoration */
	    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["ABORT"] = 2] = "ABORT";
	    /** RETRY - Retry chunk (combine with refetch and reject) */
	    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["RETRY"] = 3] = "RETRY";
	    /** RETRY_SNAPSHOT - Retry snapshot (combine with refetch and reject) */
	    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["RETRY_SNAPSHOT"] = 4] = "RETRY_SNAPSHOT";
	    /** REJECT_SNAPSHOT - Reject this snapshot, try others */
	    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["REJECT_SNAPSHOT"] = 5] = "REJECT_SNAPSHOT";
	    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
	})(ResponseApplySnapshotChunk_Result = exports.ResponseApplySnapshotChunk_Result || (exports.ResponseApplySnapshotChunk_Result = {}));
	function responseApplySnapshotChunk_ResultFromJSON(object) {
	    switch (object) {
	        case 0:
	        case "UNKNOWN":
	            return ResponseApplySnapshotChunk_Result.UNKNOWN;
	        case 1:
	        case "ACCEPT":
	            return ResponseApplySnapshotChunk_Result.ACCEPT;
	        case 2:
	        case "ABORT":
	            return ResponseApplySnapshotChunk_Result.ABORT;
	        case 3:
	        case "RETRY":
	            return ResponseApplySnapshotChunk_Result.RETRY;
	        case 4:
	        case "RETRY_SNAPSHOT":
	            return ResponseApplySnapshotChunk_Result.RETRY_SNAPSHOT;
	        case 5:
	        case "REJECT_SNAPSHOT":
	            return ResponseApplySnapshotChunk_Result.REJECT_SNAPSHOT;
	        case -1:
	        case "UNRECOGNIZED":
	        default:
	            return ResponseApplySnapshotChunk_Result.UNRECOGNIZED;
	    }
	}
	exports.responseApplySnapshotChunk_ResultFromJSON = responseApplySnapshotChunk_ResultFromJSON;
	function responseApplySnapshotChunk_ResultToJSON(object) {
	    switch (object) {
	        case ResponseApplySnapshotChunk_Result.UNKNOWN:
	            return "UNKNOWN";
	        case ResponseApplySnapshotChunk_Result.ACCEPT:
	            return "ACCEPT";
	        case ResponseApplySnapshotChunk_Result.ABORT:
	            return "ABORT";
	        case ResponseApplySnapshotChunk_Result.RETRY:
	            return "RETRY";
	        case ResponseApplySnapshotChunk_Result.RETRY_SNAPSHOT:
	            return "RETRY_SNAPSHOT";
	        case ResponseApplySnapshotChunk_Result.REJECT_SNAPSHOT:
	            return "REJECT_SNAPSHOT";
	        case ResponseApplySnapshotChunk_Result.UNRECOGNIZED:
	        default:
	            return "UNRECOGNIZED";
	    }
	}
	exports.responseApplySnapshotChunk_ResultToJSON = responseApplySnapshotChunk_ResultToJSON;
	var EvidenceType;
	(function (EvidenceType) {
	    EvidenceType[EvidenceType["UNKNOWN"] = 0] = "UNKNOWN";
	    EvidenceType[EvidenceType["DUPLICATE_VOTE"] = 1] = "DUPLICATE_VOTE";
	    EvidenceType[EvidenceType["LIGHT_CLIENT_ATTACK"] = 2] = "LIGHT_CLIENT_ATTACK";
	    EvidenceType[EvidenceType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
	})(EvidenceType = exports.EvidenceType || (exports.EvidenceType = {}));
	function evidenceTypeFromJSON(object) {
	    switch (object) {
	        case 0:
	        case "UNKNOWN":
	            return EvidenceType.UNKNOWN;
	        case 1:
	        case "DUPLICATE_VOTE":
	            return EvidenceType.DUPLICATE_VOTE;
	        case 2:
	        case "LIGHT_CLIENT_ATTACK":
	            return EvidenceType.LIGHT_CLIENT_ATTACK;
	        case -1:
	        case "UNRECOGNIZED":
	        default:
	            return EvidenceType.UNRECOGNIZED;
	    }
	}
	exports.evidenceTypeFromJSON = evidenceTypeFromJSON;
	function evidenceTypeToJSON(object) {
	    switch (object) {
	        case EvidenceType.UNKNOWN:
	            return "UNKNOWN";
	        case EvidenceType.DUPLICATE_VOTE:
	            return "DUPLICATE_VOTE";
	        case EvidenceType.LIGHT_CLIENT_ATTACK:
	            return "LIGHT_CLIENT_ATTACK";
	        case EvidenceType.UNRECOGNIZED:
	        default:
	            return "UNRECOGNIZED";
	    }
	}
	exports.evidenceTypeToJSON = evidenceTypeToJSON;
	function createBaseRequest() {
	    return {
	        echo: undefined,
	        flush: undefined,
	        info: undefined,
	        setOption: undefined,
	        initChain: undefined,
	        query: undefined,
	        beginBlock: undefined,
	        checkTx: undefined,
	        deliverTx: undefined,
	        endBlock: undefined,
	        commit: undefined,
	        listSnapshots: undefined,
	        offerSnapshot: undefined,
	        loadSnapshotChunk: undefined,
	        applySnapshotChunk: undefined,
	    };
	}
	exports.Request = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.echo !== undefined) {
	            exports.RequestEcho.encode(message.echo, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.flush !== undefined) {
	            exports.RequestFlush.encode(message.flush, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.info !== undefined) {
	            exports.RequestInfo.encode(message.info, writer.uint32(26).fork()).ldelim();
	        }
	        if (message.setOption !== undefined) {
	            exports.RequestSetOption.encode(message.setOption, writer.uint32(34).fork()).ldelim();
	        }
	        if (message.initChain !== undefined) {
	            exports.RequestInitChain.encode(message.initChain, writer.uint32(42).fork()).ldelim();
	        }
	        if (message.query !== undefined) {
	            exports.RequestQuery.encode(message.query, writer.uint32(50).fork()).ldelim();
	        }
	        if (message.beginBlock !== undefined) {
	            exports.RequestBeginBlock.encode(message.beginBlock, writer.uint32(58).fork()).ldelim();
	        }
	        if (message.checkTx !== undefined) {
	            exports.RequestCheckTx.encode(message.checkTx, writer.uint32(66).fork()).ldelim();
	        }
	        if (message.deliverTx !== undefined) {
	            exports.RequestDeliverTx.encode(message.deliverTx, writer.uint32(74).fork()).ldelim();
	        }
	        if (message.endBlock !== undefined) {
	            exports.RequestEndBlock.encode(message.endBlock, writer.uint32(82).fork()).ldelim();
	        }
	        if (message.commit !== undefined) {
	            exports.RequestCommit.encode(message.commit, writer.uint32(90).fork()).ldelim();
	        }
	        if (message.listSnapshots !== undefined) {
	            exports.RequestListSnapshots.encode(message.listSnapshots, writer.uint32(98).fork()).ldelim();
	        }
	        if (message.offerSnapshot !== undefined) {
	            exports.RequestOfferSnapshot.encode(message.offerSnapshot, writer.uint32(106).fork()).ldelim();
	        }
	        if (message.loadSnapshotChunk !== undefined) {
	            exports.RequestLoadSnapshotChunk.encode(message.loadSnapshotChunk, writer.uint32(114).fork()).ldelim();
	        }
	        if (message.applySnapshotChunk !== undefined) {
	            exports.RequestApplySnapshotChunk.encode(message.applySnapshotChunk, writer.uint32(122).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.echo = exports.RequestEcho.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.flush = exports.RequestFlush.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.info = exports.RequestInfo.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.setOption = exports.RequestSetOption.decode(reader, reader.uint32());
	                    break;
	                case 5:
	                    message.initChain = exports.RequestInitChain.decode(reader, reader.uint32());
	                    break;
	                case 6:
	                    message.query = exports.RequestQuery.decode(reader, reader.uint32());
	                    break;
	                case 7:
	                    message.beginBlock = exports.RequestBeginBlock.decode(reader, reader.uint32());
	                    break;
	                case 8:
	                    message.checkTx = exports.RequestCheckTx.decode(reader, reader.uint32());
	                    break;
	                case 9:
	                    message.deliverTx = exports.RequestDeliverTx.decode(reader, reader.uint32());
	                    break;
	                case 10:
	                    message.endBlock = exports.RequestEndBlock.decode(reader, reader.uint32());
	                    break;
	                case 11:
	                    message.commit = exports.RequestCommit.decode(reader, reader.uint32());
	                    break;
	                case 12:
	                    message.listSnapshots = exports.RequestListSnapshots.decode(reader, reader.uint32());
	                    break;
	                case 13:
	                    message.offerSnapshot = exports.RequestOfferSnapshot.decode(reader, reader.uint32());
	                    break;
	                case 14:
	                    message.loadSnapshotChunk = exports.RequestLoadSnapshotChunk.decode(reader, reader.uint32());
	                    break;
	                case 15:
	                    message.applySnapshotChunk = exports.RequestApplySnapshotChunk.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            echo: (0, helpers_1.isSet)(object.echo) ? exports.RequestEcho.fromJSON(object.echo) : undefined,
	            flush: (0, helpers_1.isSet)(object.flush) ? exports.RequestFlush.fromJSON(object.flush) : undefined,
	            info: (0, helpers_1.isSet)(object.info) ? exports.RequestInfo.fromJSON(object.info) : undefined,
	            setOption: (0, helpers_1.isSet)(object.setOption) ? exports.RequestSetOption.fromJSON(object.setOption) : undefined,
	            initChain: (0, helpers_1.isSet)(object.initChain) ? exports.RequestInitChain.fromJSON(object.initChain) : undefined,
	            query: (0, helpers_1.isSet)(object.query) ? exports.RequestQuery.fromJSON(object.query) : undefined,
	            beginBlock: (0, helpers_1.isSet)(object.beginBlock) ? exports.RequestBeginBlock.fromJSON(object.beginBlock) : undefined,
	            checkTx: (0, helpers_1.isSet)(object.checkTx) ? exports.RequestCheckTx.fromJSON(object.checkTx) : undefined,
	            deliverTx: (0, helpers_1.isSet)(object.deliverTx) ? exports.RequestDeliverTx.fromJSON(object.deliverTx) : undefined,
	            endBlock: (0, helpers_1.isSet)(object.endBlock) ? exports.RequestEndBlock.fromJSON(object.endBlock) : undefined,
	            commit: (0, helpers_1.isSet)(object.commit) ? exports.RequestCommit.fromJSON(object.commit) : undefined,
	            listSnapshots: (0, helpers_1.isSet)(object.listSnapshots)
	                ? exports.RequestListSnapshots.fromJSON(object.listSnapshots)
	                : undefined,
	            offerSnapshot: (0, helpers_1.isSet)(object.offerSnapshot)
	                ? exports.RequestOfferSnapshot.fromJSON(object.offerSnapshot)
	                : undefined,
	            loadSnapshotChunk: (0, helpers_1.isSet)(object.loadSnapshotChunk)
	                ? exports.RequestLoadSnapshotChunk.fromJSON(object.loadSnapshotChunk)
	                : undefined,
	            applySnapshotChunk: (0, helpers_1.isSet)(object.applySnapshotChunk)
	                ? exports.RequestApplySnapshotChunk.fromJSON(object.applySnapshotChunk)
	                : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.echo !== undefined && (obj.echo = message.echo ? exports.RequestEcho.toJSON(message.echo) : undefined);
	        message.flush !== undefined &&
	            (obj.flush = message.flush ? exports.RequestFlush.toJSON(message.flush) : undefined);
	        message.info !== undefined && (obj.info = message.info ? exports.RequestInfo.toJSON(message.info) : undefined);
	        message.setOption !== undefined &&
	            (obj.setOption = message.setOption ? exports.RequestSetOption.toJSON(message.setOption) : undefined);
	        message.initChain !== undefined &&
	            (obj.initChain = message.initChain ? exports.RequestInitChain.toJSON(message.initChain) : undefined);
	        message.query !== undefined &&
	            (obj.query = message.query ? exports.RequestQuery.toJSON(message.query) : undefined);
	        message.beginBlock !== undefined &&
	            (obj.beginBlock = message.beginBlock ? exports.RequestBeginBlock.toJSON(message.beginBlock) : undefined);
	        message.checkTx !== undefined &&
	            (obj.checkTx = message.checkTx ? exports.RequestCheckTx.toJSON(message.checkTx) : undefined);
	        message.deliverTx !== undefined &&
	            (obj.deliverTx = message.deliverTx ? exports.RequestDeliverTx.toJSON(message.deliverTx) : undefined);
	        message.endBlock !== undefined &&
	            (obj.endBlock = message.endBlock ? exports.RequestEndBlock.toJSON(message.endBlock) : undefined);
	        message.commit !== undefined &&
	            (obj.commit = message.commit ? exports.RequestCommit.toJSON(message.commit) : undefined);
	        message.listSnapshots !== undefined &&
	            (obj.listSnapshots = message.listSnapshots
	                ? exports.RequestListSnapshots.toJSON(message.listSnapshots)
	                : undefined);
	        message.offerSnapshot !== undefined &&
	            (obj.offerSnapshot = message.offerSnapshot
	                ? exports.RequestOfferSnapshot.toJSON(message.offerSnapshot)
	                : undefined);
	        message.loadSnapshotChunk !== undefined &&
	            (obj.loadSnapshotChunk = message.loadSnapshotChunk
	                ? exports.RequestLoadSnapshotChunk.toJSON(message.loadSnapshotChunk)
	                : undefined);
	        message.applySnapshotChunk !== undefined &&
	            (obj.applySnapshotChunk = message.applySnapshotChunk
	                ? exports.RequestApplySnapshotChunk.toJSON(message.applySnapshotChunk)
	                : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseRequest();
	        message.echo =
	            object.echo !== undefined && object.echo !== null ? exports.RequestEcho.fromPartial(object.echo) : undefined;
	        message.flush =
	            object.flush !== undefined && object.flush !== null
	                ? exports.RequestFlush.fromPartial(object.flush)
	                : undefined;
	        message.info =
	            object.info !== undefined && object.info !== null ? exports.RequestInfo.fromPartial(object.info) : undefined;
	        message.setOption =
	            object.setOption !== undefined && object.setOption !== null
	                ? exports.RequestSetOption.fromPartial(object.setOption)
	                : undefined;
	        message.initChain =
	            object.initChain !== undefined && object.initChain !== null
	                ? exports.RequestInitChain.fromPartial(object.initChain)
	                : undefined;
	        message.query =
	            object.query !== undefined && object.query !== null
	                ? exports.RequestQuery.fromPartial(object.query)
	                : undefined;
	        message.beginBlock =
	            object.beginBlock !== undefined && object.beginBlock !== null
	                ? exports.RequestBeginBlock.fromPartial(object.beginBlock)
	                : undefined;
	        message.checkTx =
	            object.checkTx !== undefined && object.checkTx !== null
	                ? exports.RequestCheckTx.fromPartial(object.checkTx)
	                : undefined;
	        message.deliverTx =
	            object.deliverTx !== undefined && object.deliverTx !== null
	                ? exports.RequestDeliverTx.fromPartial(object.deliverTx)
	                : undefined;
	        message.endBlock =
	            object.endBlock !== undefined && object.endBlock !== null
	                ? exports.RequestEndBlock.fromPartial(object.endBlock)
	                : undefined;
	        message.commit =
	            object.commit !== undefined && object.commit !== null
	                ? exports.RequestCommit.fromPartial(object.commit)
	                : undefined;
	        message.listSnapshots =
	            object.listSnapshots !== undefined && object.listSnapshots !== null
	                ? exports.RequestListSnapshots.fromPartial(object.listSnapshots)
	                : undefined;
	        message.offerSnapshot =
	            object.offerSnapshot !== undefined && object.offerSnapshot !== null
	                ? exports.RequestOfferSnapshot.fromPartial(object.offerSnapshot)
	                : undefined;
	        message.loadSnapshotChunk =
	            object.loadSnapshotChunk !== undefined && object.loadSnapshotChunk !== null
	                ? exports.RequestLoadSnapshotChunk.fromPartial(object.loadSnapshotChunk)
	                : undefined;
	        message.applySnapshotChunk =
	            object.applySnapshotChunk !== undefined && object.applySnapshotChunk !== null
	                ? exports.RequestApplySnapshotChunk.fromPartial(object.applySnapshotChunk)
	                : undefined;
	        return message;
	    },
	};
	function createBaseRequestEcho() {
	    return {
	        message: "",
	    };
	}
	exports.RequestEcho = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.message !== "") {
	            writer.uint32(10).string(message.message);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRequestEcho();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.message = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            message: (0, helpers_1.isSet)(object.message) ? String(object.message) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.message !== undefined && (obj.message = message.message);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseRequestEcho();
	        message.message = object.message ?? "";
	        return message;
	    },
	};
	function createBaseRequestFlush() {
	    return {};
	}
	exports.RequestFlush = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRequestFlush();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseRequestFlush();
	        return message;
	    },
	};
	function createBaseRequestInfo() {
	    return {
	        version: "",
	        blockVersion: helpers_1.Long.UZERO,
	        p2pVersion: helpers_1.Long.UZERO,
	    };
	}
	exports.RequestInfo = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.version !== "") {
	            writer.uint32(10).string(message.version);
	        }
	        if (!message.blockVersion.isZero()) {
	            writer.uint32(16).uint64(message.blockVersion);
	        }
	        if (!message.p2pVersion.isZero()) {
	            writer.uint32(24).uint64(message.p2pVersion);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRequestInfo();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.version = reader.string();
	                    break;
	                case 2:
	                    message.blockVersion = reader.uint64();
	                    break;
	                case 3:
	                    message.p2pVersion = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            version: (0, helpers_1.isSet)(object.version) ? String(object.version) : "",
	            blockVersion: (0, helpers_1.isSet)(object.blockVersion) ? helpers_1.Long.fromValue(object.blockVersion) : helpers_1.Long.UZERO,
	            p2pVersion: (0, helpers_1.isSet)(object.p2pVersion) ? helpers_1.Long.fromValue(object.p2pVersion) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.version !== undefined && (obj.version = message.version);
	        message.blockVersion !== undefined &&
	            (obj.blockVersion = (message.blockVersion || helpers_1.Long.UZERO).toString());
	        message.p2pVersion !== undefined && (obj.p2pVersion = (message.p2pVersion || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseRequestInfo();
	        message.version = object.version ?? "";
	        message.blockVersion =
	            object.blockVersion !== undefined && object.blockVersion !== null
	                ? helpers_1.Long.fromValue(object.blockVersion)
	                : helpers_1.Long.UZERO;
	        message.p2pVersion =
	            object.p2pVersion !== undefined && object.p2pVersion !== null
	                ? helpers_1.Long.fromValue(object.p2pVersion)
	                : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseRequestSetOption() {
	    return {
	        key: "",
	        value: "",
	    };
	}
	exports.RequestSetOption = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.key !== "") {
	            writer.uint32(10).string(message.key);
	        }
	        if (message.value !== "") {
	            writer.uint32(18).string(message.value);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRequestSetOption();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.key = reader.string();
	                    break;
	                case 2:
	                    message.value = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            key: (0, helpers_1.isSet)(object.key) ? String(object.key) : "",
	            value: (0, helpers_1.isSet)(object.value) ? String(object.value) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.key !== undefined && (obj.key = message.key);
	        message.value !== undefined && (obj.value = message.value);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseRequestSetOption();
	        message.key = object.key ?? "";
	        message.value = object.value ?? "";
	        return message;
	    },
	};
	function createBaseRequestInitChain() {
	    return {
	        time: undefined,
	        chainId: "",
	        consensusParams: undefined,
	        validators: [],
	        appStateBytes: new Uint8Array(),
	        initialHeight: helpers_1.Long.ZERO,
	    };
	}
	exports.RequestInitChain = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.time !== undefined) {
	            timestamp_1.Timestamp.encode(message.time, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.chainId !== "") {
	            writer.uint32(18).string(message.chainId);
	        }
	        if (message.consensusParams !== undefined) {
	            exports.ConsensusParams.encode(message.consensusParams, writer.uint32(26).fork()).ldelim();
	        }
	        for (const v of message.validators) {
	            exports.ValidatorUpdate.encode(v, writer.uint32(34).fork()).ldelim();
	        }
	        if (message.appStateBytes.length !== 0) {
	            writer.uint32(42).bytes(message.appStateBytes);
	        }
	        if (!message.initialHeight.isZero()) {
	            writer.uint32(48).int64(message.initialHeight);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRequestInitChain();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.time = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.chainId = reader.string();
	                    break;
	                case 3:
	                    message.consensusParams = exports.ConsensusParams.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.validators.push(exports.ValidatorUpdate.decode(reader, reader.uint32()));
	                    break;
	                case 5:
	                    message.appStateBytes = reader.bytes();
	                    break;
	                case 6:
	                    message.initialHeight = reader.int64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            time: (0, helpers_1.isSet)(object.time) ? (0, helpers_1.fromJsonTimestamp)(object.time) : undefined,
	            chainId: (0, helpers_1.isSet)(object.chainId) ? String(object.chainId) : "",
	            consensusParams: (0, helpers_1.isSet)(object.consensusParams)
	                ? exports.ConsensusParams.fromJSON(object.consensusParams)
	                : undefined,
	            validators: Array.isArray(object?.validators)
	                ? object.validators.map((e) => exports.ValidatorUpdate.fromJSON(e))
	                : [],
	            appStateBytes: (0, helpers_1.isSet)(object.appStateBytes) ? (0, helpers_1.bytesFromBase64)(object.appStateBytes) : new Uint8Array(),
	            initialHeight: (0, helpers_1.isSet)(object.initialHeight) ? helpers_1.Long.fromValue(object.initialHeight) : helpers_1.Long.ZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.time !== undefined && (obj.time = (0, helpers_1.fromTimestamp)(message.time).toISOString());
	        message.chainId !== undefined && (obj.chainId = message.chainId);
	        message.consensusParams !== undefined &&
	            (obj.consensusParams = message.consensusParams
	                ? exports.ConsensusParams.toJSON(message.consensusParams)
	                : undefined);
	        if (message.validators) {
	            obj.validators = message.validators.map((e) => (e ? exports.ValidatorUpdate.toJSON(e) : undefined));
	        }
	        else {
	            obj.validators = [];
	        }
	        message.appStateBytes !== undefined &&
	            (obj.appStateBytes = (0, helpers_1.base64FromBytes)(message.appStateBytes !== undefined ? message.appStateBytes : new Uint8Array()));
	        message.initialHeight !== undefined &&
	            (obj.initialHeight = (message.initialHeight || helpers_1.Long.ZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseRequestInitChain();
	        message.time =
	            object.time !== undefined && object.time !== null ? timestamp_1.Timestamp.fromPartial(object.time) : undefined;
	        message.chainId = object.chainId ?? "";
	        message.consensusParams =
	            object.consensusParams !== undefined && object.consensusParams !== null
	                ? exports.ConsensusParams.fromPartial(object.consensusParams)
	                : undefined;
	        message.validators = object.validators?.map((e) => exports.ValidatorUpdate.fromPartial(e)) || [];
	        message.appStateBytes = object.appStateBytes ?? new Uint8Array();
	        message.initialHeight =
	            object.initialHeight !== undefined && object.initialHeight !== null
	                ? helpers_1.Long.fromValue(object.initialHeight)
	                : helpers_1.Long.ZERO;
	        return message;
	    },
	};
	function createBaseRequestQuery() {
	    return {
	        data: new Uint8Array(),
	        path: "",
	        height: helpers_1.Long.ZERO,
	        prove: false,
	    };
	}
	exports.RequestQuery = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.data.length !== 0) {
	            writer.uint32(10).bytes(message.data);
	        }
	        if (message.path !== "") {
	            writer.uint32(18).string(message.path);
	        }
	        if (!message.height.isZero()) {
	            writer.uint32(24).int64(message.height);
	        }
	        if (message.prove === true) {
	            writer.uint32(32).bool(message.prove);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRequestQuery();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.data = reader.bytes();
	                    break;
	                case 2:
	                    message.path = reader.string();
	                    break;
	                case 3:
	                    message.height = reader.int64();
	                    break;
	                case 4:
	                    message.prove = reader.bool();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            data: (0, helpers_1.isSet)(object.data) ? (0, helpers_1.bytesFromBase64)(object.data) : new Uint8Array(),
	            path: (0, helpers_1.isSet)(object.path) ? String(object.path) : "",
	            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO,
	            prove: (0, helpers_1.isSet)(object.prove) ? Boolean(object.prove) : false,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.data !== undefined &&
	            (obj.data = (0, helpers_1.base64FromBytes)(message.data !== undefined ? message.data : new Uint8Array()));
	        message.path !== undefined && (obj.path = message.path);
	        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.ZERO).toString());
	        message.prove !== undefined && (obj.prove = message.prove);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseRequestQuery();
	        message.data = object.data ?? new Uint8Array();
	        message.path = object.path ?? "";
	        message.height =
	            object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO;
	        message.prove = object.prove ?? false;
	        return message;
	    },
	};
	function createBaseRequestBeginBlock() {
	    return {
	        hash: new Uint8Array(),
	        header: undefined,
	        lastCommitInfo: undefined,
	        byzantineValidators: [],
	    };
	}
	exports.RequestBeginBlock = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.hash.length !== 0) {
	            writer.uint32(10).bytes(message.hash);
	        }
	        if (message.header !== undefined) {
	            types_1.Header.encode(message.header, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.lastCommitInfo !== undefined) {
	            exports.LastCommitInfo.encode(message.lastCommitInfo, writer.uint32(26).fork()).ldelim();
	        }
	        for (const v of message.byzantineValidators) {
	            exports.Evidence.encode(v, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRequestBeginBlock();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.hash = reader.bytes();
	                    break;
	                case 2:
	                    message.header = types_1.Header.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.lastCommitInfo = exports.LastCommitInfo.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.byzantineValidators.push(exports.Evidence.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            hash: (0, helpers_1.isSet)(object.hash) ? (0, helpers_1.bytesFromBase64)(object.hash) : new Uint8Array(),
	            header: (0, helpers_1.isSet)(object.header) ? types_1.Header.fromJSON(object.header) : undefined,
	            lastCommitInfo: (0, helpers_1.isSet)(object.lastCommitInfo)
	                ? exports.LastCommitInfo.fromJSON(object.lastCommitInfo)
	                : undefined,
	            byzantineValidators: Array.isArray(object?.byzantineValidators)
	                ? object.byzantineValidators.map((e) => exports.Evidence.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.hash !== undefined &&
	            (obj.hash = (0, helpers_1.base64FromBytes)(message.hash !== undefined ? message.hash : new Uint8Array()));
	        message.header !== undefined && (obj.header = message.header ? types_1.Header.toJSON(message.header) : undefined);
	        message.lastCommitInfo !== undefined &&
	            (obj.lastCommitInfo = message.lastCommitInfo
	                ? exports.LastCommitInfo.toJSON(message.lastCommitInfo)
	                : undefined);
	        if (message.byzantineValidators) {
	            obj.byzantineValidators = message.byzantineValidators.map((e) => (e ? exports.Evidence.toJSON(e) : undefined));
	        }
	        else {
	            obj.byzantineValidators = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseRequestBeginBlock();
	        message.hash = object.hash ?? new Uint8Array();
	        message.header =
	            object.header !== undefined && object.header !== null ? types_1.Header.fromPartial(object.header) : undefined;
	        message.lastCommitInfo =
	            object.lastCommitInfo !== undefined && object.lastCommitInfo !== null
	                ? exports.LastCommitInfo.fromPartial(object.lastCommitInfo)
	                : undefined;
	        message.byzantineValidators = object.byzantineValidators?.map((e) => exports.Evidence.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseRequestCheckTx() {
	    return {
	        tx: new Uint8Array(),
	        type: 0,
	    };
	}
	exports.RequestCheckTx = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.tx.length !== 0) {
	            writer.uint32(10).bytes(message.tx);
	        }
	        if (message.type !== 0) {
	            writer.uint32(16).int32(message.type);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRequestCheckTx();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.tx = reader.bytes();
	                    break;
	                case 2:
	                    message.type = reader.int32();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            tx: (0, helpers_1.isSet)(object.tx) ? (0, helpers_1.bytesFromBase64)(object.tx) : new Uint8Array(),
	            type: (0, helpers_1.isSet)(object.type) ? checkTxTypeFromJSON(object.type) : 0,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.tx !== undefined &&
	            (obj.tx = (0, helpers_1.base64FromBytes)(message.tx !== undefined ? message.tx : new Uint8Array()));
	        message.type !== undefined && (obj.type = checkTxTypeToJSON(message.type));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseRequestCheckTx();
	        message.tx = object.tx ?? new Uint8Array();
	        message.type = object.type ?? 0;
	        return message;
	    },
	};
	function createBaseRequestDeliverTx() {
	    return {
	        tx: new Uint8Array(),
	    };
	}
	exports.RequestDeliverTx = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.tx.length !== 0) {
	            writer.uint32(10).bytes(message.tx);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRequestDeliverTx();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.tx = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            tx: (0, helpers_1.isSet)(object.tx) ? (0, helpers_1.bytesFromBase64)(object.tx) : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.tx !== undefined &&
	            (obj.tx = (0, helpers_1.base64FromBytes)(message.tx !== undefined ? message.tx : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseRequestDeliverTx();
	        message.tx = object.tx ?? new Uint8Array();
	        return message;
	    },
	};
	function createBaseRequestEndBlock() {
	    return {
	        height: helpers_1.Long.ZERO,
	    };
	}
	exports.RequestEndBlock = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.height.isZero()) {
	            writer.uint32(8).int64(message.height);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRequestEndBlock();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.height = reader.int64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.ZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseRequestEndBlock();
	        message.height =
	            object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO;
	        return message;
	    },
	};
	function createBaseRequestCommit() {
	    return {};
	}
	exports.RequestCommit = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRequestCommit();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseRequestCommit();
	        return message;
	    },
	};
	function createBaseRequestListSnapshots() {
	    return {};
	}
	exports.RequestListSnapshots = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRequestListSnapshots();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseRequestListSnapshots();
	        return message;
	    },
	};
	function createBaseRequestOfferSnapshot() {
	    return {
	        snapshot: undefined,
	        appHash: new Uint8Array(),
	    };
	}
	exports.RequestOfferSnapshot = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.snapshot !== undefined) {
	            exports.Snapshot.encode(message.snapshot, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.appHash.length !== 0) {
	            writer.uint32(18).bytes(message.appHash);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRequestOfferSnapshot();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.snapshot = exports.Snapshot.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.appHash = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            snapshot: (0, helpers_1.isSet)(object.snapshot) ? exports.Snapshot.fromJSON(object.snapshot) : undefined,
	            appHash: (0, helpers_1.isSet)(object.appHash) ? (0, helpers_1.bytesFromBase64)(object.appHash) : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.snapshot !== undefined &&
	            (obj.snapshot = message.snapshot ? exports.Snapshot.toJSON(message.snapshot) : undefined);
	        message.appHash !== undefined &&
	            (obj.appHash = (0, helpers_1.base64FromBytes)(message.appHash !== undefined ? message.appHash : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseRequestOfferSnapshot();
	        message.snapshot =
	            object.snapshot !== undefined && object.snapshot !== null
	                ? exports.Snapshot.fromPartial(object.snapshot)
	                : undefined;
	        message.appHash = object.appHash ?? new Uint8Array();
	        return message;
	    },
	};
	function createBaseRequestLoadSnapshotChunk() {
	    return {
	        height: helpers_1.Long.UZERO,
	        format: 0,
	        chunk: 0,
	    };
	}
	exports.RequestLoadSnapshotChunk = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.height.isZero()) {
	            writer.uint32(8).uint64(message.height);
	        }
	        if (message.format !== 0) {
	            writer.uint32(16).uint32(message.format);
	        }
	        if (message.chunk !== 0) {
	            writer.uint32(24).uint32(message.chunk);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRequestLoadSnapshotChunk();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.height = reader.uint64();
	                    break;
	                case 2:
	                    message.format = reader.uint32();
	                    break;
	                case 3:
	                    message.chunk = reader.uint32();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.UZERO,
	            format: (0, helpers_1.isSet)(object.format) ? Number(object.format) : 0,
	            chunk: (0, helpers_1.isSet)(object.chunk) ? Number(object.chunk) : 0,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.UZERO).toString());
	        message.format !== undefined && (obj.format = Math.round(message.format));
	        message.chunk !== undefined && (obj.chunk = Math.round(message.chunk));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseRequestLoadSnapshotChunk();
	        message.height =
	            object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.UZERO;
	        message.format = object.format ?? 0;
	        message.chunk = object.chunk ?? 0;
	        return message;
	    },
	};
	function createBaseRequestApplySnapshotChunk() {
	    return {
	        index: 0,
	        chunk: new Uint8Array(),
	        sender: "",
	    };
	}
	exports.RequestApplySnapshotChunk = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.index !== 0) {
	            writer.uint32(8).uint32(message.index);
	        }
	        if (message.chunk.length !== 0) {
	            writer.uint32(18).bytes(message.chunk);
	        }
	        if (message.sender !== "") {
	            writer.uint32(26).string(message.sender);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseRequestApplySnapshotChunk();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.index = reader.uint32();
	                    break;
	                case 2:
	                    message.chunk = reader.bytes();
	                    break;
	                case 3:
	                    message.sender = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            index: (0, helpers_1.isSet)(object.index) ? Number(object.index) : 0,
	            chunk: (0, helpers_1.isSet)(object.chunk) ? (0, helpers_1.bytesFromBase64)(object.chunk) : new Uint8Array(),
	            sender: (0, helpers_1.isSet)(object.sender) ? String(object.sender) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.index !== undefined && (obj.index = Math.round(message.index));
	        message.chunk !== undefined &&
	            (obj.chunk = (0, helpers_1.base64FromBytes)(message.chunk !== undefined ? message.chunk : new Uint8Array()));
	        message.sender !== undefined && (obj.sender = message.sender);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseRequestApplySnapshotChunk();
	        message.index = object.index ?? 0;
	        message.chunk = object.chunk ?? new Uint8Array();
	        message.sender = object.sender ?? "";
	        return message;
	    },
	};
	function createBaseResponse() {
	    return {
	        exception: undefined,
	        echo: undefined,
	        flush: undefined,
	        info: undefined,
	        setOption: undefined,
	        initChain: undefined,
	        query: undefined,
	        beginBlock: undefined,
	        checkTx: undefined,
	        deliverTx: undefined,
	        endBlock: undefined,
	        commit: undefined,
	        listSnapshots: undefined,
	        offerSnapshot: undefined,
	        loadSnapshotChunk: undefined,
	        applySnapshotChunk: undefined,
	    };
	}
	exports.Response = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.exception !== undefined) {
	            exports.ResponseException.encode(message.exception, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.echo !== undefined) {
	            exports.ResponseEcho.encode(message.echo, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.flush !== undefined) {
	            exports.ResponseFlush.encode(message.flush, writer.uint32(26).fork()).ldelim();
	        }
	        if (message.info !== undefined) {
	            exports.ResponseInfo.encode(message.info, writer.uint32(34).fork()).ldelim();
	        }
	        if (message.setOption !== undefined) {
	            exports.ResponseSetOption.encode(message.setOption, writer.uint32(42).fork()).ldelim();
	        }
	        if (message.initChain !== undefined) {
	            exports.ResponseInitChain.encode(message.initChain, writer.uint32(50).fork()).ldelim();
	        }
	        if (message.query !== undefined) {
	            exports.ResponseQuery.encode(message.query, writer.uint32(58).fork()).ldelim();
	        }
	        if (message.beginBlock !== undefined) {
	            exports.ResponseBeginBlock.encode(message.beginBlock, writer.uint32(66).fork()).ldelim();
	        }
	        if (message.checkTx !== undefined) {
	            exports.ResponseCheckTx.encode(message.checkTx, writer.uint32(74).fork()).ldelim();
	        }
	        if (message.deliverTx !== undefined) {
	            exports.ResponseDeliverTx.encode(message.deliverTx, writer.uint32(82).fork()).ldelim();
	        }
	        if (message.endBlock !== undefined) {
	            exports.ResponseEndBlock.encode(message.endBlock, writer.uint32(90).fork()).ldelim();
	        }
	        if (message.commit !== undefined) {
	            exports.ResponseCommit.encode(message.commit, writer.uint32(98).fork()).ldelim();
	        }
	        if (message.listSnapshots !== undefined) {
	            exports.ResponseListSnapshots.encode(message.listSnapshots, writer.uint32(106).fork()).ldelim();
	        }
	        if (message.offerSnapshot !== undefined) {
	            exports.ResponseOfferSnapshot.encode(message.offerSnapshot, writer.uint32(114).fork()).ldelim();
	        }
	        if (message.loadSnapshotChunk !== undefined) {
	            exports.ResponseLoadSnapshotChunk.encode(message.loadSnapshotChunk, writer.uint32(122).fork()).ldelim();
	        }
	        if (message.applySnapshotChunk !== undefined) {
	            exports.ResponseApplySnapshotChunk.encode(message.applySnapshotChunk, writer.uint32(130).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.exception = exports.ResponseException.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.echo = exports.ResponseEcho.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.flush = exports.ResponseFlush.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.info = exports.ResponseInfo.decode(reader, reader.uint32());
	                    break;
	                case 5:
	                    message.setOption = exports.ResponseSetOption.decode(reader, reader.uint32());
	                    break;
	                case 6:
	                    message.initChain = exports.ResponseInitChain.decode(reader, reader.uint32());
	                    break;
	                case 7:
	                    message.query = exports.ResponseQuery.decode(reader, reader.uint32());
	                    break;
	                case 8:
	                    message.beginBlock = exports.ResponseBeginBlock.decode(reader, reader.uint32());
	                    break;
	                case 9:
	                    message.checkTx = exports.ResponseCheckTx.decode(reader, reader.uint32());
	                    break;
	                case 10:
	                    message.deliverTx = exports.ResponseDeliverTx.decode(reader, reader.uint32());
	                    break;
	                case 11:
	                    message.endBlock = exports.ResponseEndBlock.decode(reader, reader.uint32());
	                    break;
	                case 12:
	                    message.commit = exports.ResponseCommit.decode(reader, reader.uint32());
	                    break;
	                case 13:
	                    message.listSnapshots = exports.ResponseListSnapshots.decode(reader, reader.uint32());
	                    break;
	                case 14:
	                    message.offerSnapshot = exports.ResponseOfferSnapshot.decode(reader, reader.uint32());
	                    break;
	                case 15:
	                    message.loadSnapshotChunk = exports.ResponseLoadSnapshotChunk.decode(reader, reader.uint32());
	                    break;
	                case 16:
	                    message.applySnapshotChunk = exports.ResponseApplySnapshotChunk.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            exception: (0, helpers_1.isSet)(object.exception) ? exports.ResponseException.fromJSON(object.exception) : undefined,
	            echo: (0, helpers_1.isSet)(object.echo) ? exports.ResponseEcho.fromJSON(object.echo) : undefined,
	            flush: (0, helpers_1.isSet)(object.flush) ? exports.ResponseFlush.fromJSON(object.flush) : undefined,
	            info: (0, helpers_1.isSet)(object.info) ? exports.ResponseInfo.fromJSON(object.info) : undefined,
	            setOption: (0, helpers_1.isSet)(object.setOption) ? exports.ResponseSetOption.fromJSON(object.setOption) : undefined,
	            initChain: (0, helpers_1.isSet)(object.initChain) ? exports.ResponseInitChain.fromJSON(object.initChain) : undefined,
	            query: (0, helpers_1.isSet)(object.query) ? exports.ResponseQuery.fromJSON(object.query) : undefined,
	            beginBlock: (0, helpers_1.isSet)(object.beginBlock) ? exports.ResponseBeginBlock.fromJSON(object.beginBlock) : undefined,
	            checkTx: (0, helpers_1.isSet)(object.checkTx) ? exports.ResponseCheckTx.fromJSON(object.checkTx) : undefined,
	            deliverTx: (0, helpers_1.isSet)(object.deliverTx) ? exports.ResponseDeliverTx.fromJSON(object.deliverTx) : undefined,
	            endBlock: (0, helpers_1.isSet)(object.endBlock) ? exports.ResponseEndBlock.fromJSON(object.endBlock) : undefined,
	            commit: (0, helpers_1.isSet)(object.commit) ? exports.ResponseCommit.fromJSON(object.commit) : undefined,
	            listSnapshots: (0, helpers_1.isSet)(object.listSnapshots)
	                ? exports.ResponseListSnapshots.fromJSON(object.listSnapshots)
	                : undefined,
	            offerSnapshot: (0, helpers_1.isSet)(object.offerSnapshot)
	                ? exports.ResponseOfferSnapshot.fromJSON(object.offerSnapshot)
	                : undefined,
	            loadSnapshotChunk: (0, helpers_1.isSet)(object.loadSnapshotChunk)
	                ? exports.ResponseLoadSnapshotChunk.fromJSON(object.loadSnapshotChunk)
	                : undefined,
	            applySnapshotChunk: (0, helpers_1.isSet)(object.applySnapshotChunk)
	                ? exports.ResponseApplySnapshotChunk.fromJSON(object.applySnapshotChunk)
	                : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.exception !== undefined &&
	            (obj.exception = message.exception ? exports.ResponseException.toJSON(message.exception) : undefined);
	        message.echo !== undefined && (obj.echo = message.echo ? exports.ResponseEcho.toJSON(message.echo) : undefined);
	        message.flush !== undefined &&
	            (obj.flush = message.flush ? exports.ResponseFlush.toJSON(message.flush) : undefined);
	        message.info !== undefined && (obj.info = message.info ? exports.ResponseInfo.toJSON(message.info) : undefined);
	        message.setOption !== undefined &&
	            (obj.setOption = message.setOption ? exports.ResponseSetOption.toJSON(message.setOption) : undefined);
	        message.initChain !== undefined &&
	            (obj.initChain = message.initChain ? exports.ResponseInitChain.toJSON(message.initChain) : undefined);
	        message.query !== undefined &&
	            (obj.query = message.query ? exports.ResponseQuery.toJSON(message.query) : undefined);
	        message.beginBlock !== undefined &&
	            (obj.beginBlock = message.beginBlock ? exports.ResponseBeginBlock.toJSON(message.beginBlock) : undefined);
	        message.checkTx !== undefined &&
	            (obj.checkTx = message.checkTx ? exports.ResponseCheckTx.toJSON(message.checkTx) : undefined);
	        message.deliverTx !== undefined &&
	            (obj.deliverTx = message.deliverTx ? exports.ResponseDeliverTx.toJSON(message.deliverTx) : undefined);
	        message.endBlock !== undefined &&
	            (obj.endBlock = message.endBlock ? exports.ResponseEndBlock.toJSON(message.endBlock) : undefined);
	        message.commit !== undefined &&
	            (obj.commit = message.commit ? exports.ResponseCommit.toJSON(message.commit) : undefined);
	        message.listSnapshots !== undefined &&
	            (obj.listSnapshots = message.listSnapshots
	                ? exports.ResponseListSnapshots.toJSON(message.listSnapshots)
	                : undefined);
	        message.offerSnapshot !== undefined &&
	            (obj.offerSnapshot = message.offerSnapshot
	                ? exports.ResponseOfferSnapshot.toJSON(message.offerSnapshot)
	                : undefined);
	        message.loadSnapshotChunk !== undefined &&
	            (obj.loadSnapshotChunk = message.loadSnapshotChunk
	                ? exports.ResponseLoadSnapshotChunk.toJSON(message.loadSnapshotChunk)
	                : undefined);
	        message.applySnapshotChunk !== undefined &&
	            (obj.applySnapshotChunk = message.applySnapshotChunk
	                ? exports.ResponseApplySnapshotChunk.toJSON(message.applySnapshotChunk)
	                : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseResponse();
	        message.exception =
	            object.exception !== undefined && object.exception !== null
	                ? exports.ResponseException.fromPartial(object.exception)
	                : undefined;
	        message.echo =
	            object.echo !== undefined && object.echo !== null ? exports.ResponseEcho.fromPartial(object.echo) : undefined;
	        message.flush =
	            object.flush !== undefined && object.flush !== null
	                ? exports.ResponseFlush.fromPartial(object.flush)
	                : undefined;
	        message.info =
	            object.info !== undefined && object.info !== null ? exports.ResponseInfo.fromPartial(object.info) : undefined;
	        message.setOption =
	            object.setOption !== undefined && object.setOption !== null
	                ? exports.ResponseSetOption.fromPartial(object.setOption)
	                : undefined;
	        message.initChain =
	            object.initChain !== undefined && object.initChain !== null
	                ? exports.ResponseInitChain.fromPartial(object.initChain)
	                : undefined;
	        message.query =
	            object.query !== undefined && object.query !== null
	                ? exports.ResponseQuery.fromPartial(object.query)
	                : undefined;
	        message.beginBlock =
	            object.beginBlock !== undefined && object.beginBlock !== null
	                ? exports.ResponseBeginBlock.fromPartial(object.beginBlock)
	                : undefined;
	        message.checkTx =
	            object.checkTx !== undefined && object.checkTx !== null
	                ? exports.ResponseCheckTx.fromPartial(object.checkTx)
	                : undefined;
	        message.deliverTx =
	            object.deliverTx !== undefined && object.deliverTx !== null
	                ? exports.ResponseDeliverTx.fromPartial(object.deliverTx)
	                : undefined;
	        message.endBlock =
	            object.endBlock !== undefined && object.endBlock !== null
	                ? exports.ResponseEndBlock.fromPartial(object.endBlock)
	                : undefined;
	        message.commit =
	            object.commit !== undefined && object.commit !== null
	                ? exports.ResponseCommit.fromPartial(object.commit)
	                : undefined;
	        message.listSnapshots =
	            object.listSnapshots !== undefined && object.listSnapshots !== null
	                ? exports.ResponseListSnapshots.fromPartial(object.listSnapshots)
	                : undefined;
	        message.offerSnapshot =
	            object.offerSnapshot !== undefined && object.offerSnapshot !== null
	                ? exports.ResponseOfferSnapshot.fromPartial(object.offerSnapshot)
	                : undefined;
	        message.loadSnapshotChunk =
	            object.loadSnapshotChunk !== undefined && object.loadSnapshotChunk !== null
	                ? exports.ResponseLoadSnapshotChunk.fromPartial(object.loadSnapshotChunk)
	                : undefined;
	        message.applySnapshotChunk =
	            object.applySnapshotChunk !== undefined && object.applySnapshotChunk !== null
	                ? exports.ResponseApplySnapshotChunk.fromPartial(object.applySnapshotChunk)
	                : undefined;
	        return message;
	    },
	};
	function createBaseResponseException() {
	    return {
	        error: "",
	    };
	}
	exports.ResponseException = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.error !== "") {
	            writer.uint32(10).string(message.error);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseResponseException();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.error = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            error: (0, helpers_1.isSet)(object.error) ? String(object.error) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.error !== undefined && (obj.error = message.error);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseResponseException();
	        message.error = object.error ?? "";
	        return message;
	    },
	};
	function createBaseResponseEcho() {
	    return {
	        message: "",
	    };
	}
	exports.ResponseEcho = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.message !== "") {
	            writer.uint32(10).string(message.message);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseResponseEcho();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.message = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            message: (0, helpers_1.isSet)(object.message) ? String(object.message) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.message !== undefined && (obj.message = message.message);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseResponseEcho();
	        message.message = object.message ?? "";
	        return message;
	    },
	};
	function createBaseResponseFlush() {
	    return {};
	}
	exports.ResponseFlush = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseResponseFlush();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseResponseFlush();
	        return message;
	    },
	};
	function createBaseResponseInfo() {
	    return {
	        data: "",
	        version: "",
	        appVersion: helpers_1.Long.UZERO,
	        lastBlockHeight: helpers_1.Long.ZERO,
	        lastBlockAppHash: new Uint8Array(),
	    };
	}
	exports.ResponseInfo = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.data !== "") {
	            writer.uint32(10).string(message.data);
	        }
	        if (message.version !== "") {
	            writer.uint32(18).string(message.version);
	        }
	        if (!message.appVersion.isZero()) {
	            writer.uint32(24).uint64(message.appVersion);
	        }
	        if (!message.lastBlockHeight.isZero()) {
	            writer.uint32(32).int64(message.lastBlockHeight);
	        }
	        if (message.lastBlockAppHash.length !== 0) {
	            writer.uint32(42).bytes(message.lastBlockAppHash);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseResponseInfo();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.data = reader.string();
	                    break;
	                case 2:
	                    message.version = reader.string();
	                    break;
	                case 3:
	                    message.appVersion = reader.uint64();
	                    break;
	                case 4:
	                    message.lastBlockHeight = reader.int64();
	                    break;
	                case 5:
	                    message.lastBlockAppHash = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            data: (0, helpers_1.isSet)(object.data) ? String(object.data) : "",
	            version: (0, helpers_1.isSet)(object.version) ? String(object.version) : "",
	            appVersion: (0, helpers_1.isSet)(object.appVersion) ? helpers_1.Long.fromValue(object.appVersion) : helpers_1.Long.UZERO,
	            lastBlockHeight: (0, helpers_1.isSet)(object.lastBlockHeight) ? helpers_1.Long.fromValue(object.lastBlockHeight) : helpers_1.Long.ZERO,
	            lastBlockAppHash: (0, helpers_1.isSet)(object.lastBlockAppHash)
	                ? (0, helpers_1.bytesFromBase64)(object.lastBlockAppHash)
	                : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.data !== undefined && (obj.data = message.data);
	        message.version !== undefined && (obj.version = message.version);
	        message.appVersion !== undefined && (obj.appVersion = (message.appVersion || helpers_1.Long.UZERO).toString());
	        message.lastBlockHeight !== undefined &&
	            (obj.lastBlockHeight = (message.lastBlockHeight || helpers_1.Long.ZERO).toString());
	        message.lastBlockAppHash !== undefined &&
	            (obj.lastBlockAppHash = (0, helpers_1.base64FromBytes)(message.lastBlockAppHash !== undefined ? message.lastBlockAppHash : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseResponseInfo();
	        message.data = object.data ?? "";
	        message.version = object.version ?? "";
	        message.appVersion =
	            object.appVersion !== undefined && object.appVersion !== null
	                ? helpers_1.Long.fromValue(object.appVersion)
	                : helpers_1.Long.UZERO;
	        message.lastBlockHeight =
	            object.lastBlockHeight !== undefined && object.lastBlockHeight !== null
	                ? helpers_1.Long.fromValue(object.lastBlockHeight)
	                : helpers_1.Long.ZERO;
	        message.lastBlockAppHash = object.lastBlockAppHash ?? new Uint8Array();
	        return message;
	    },
	};
	function createBaseResponseSetOption() {
	    return {
	        code: 0,
	        log: "",
	        info: "",
	    };
	}
	exports.ResponseSetOption = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.code !== 0) {
	            writer.uint32(8).uint32(message.code);
	        }
	        if (message.log !== "") {
	            writer.uint32(26).string(message.log);
	        }
	        if (message.info !== "") {
	            writer.uint32(34).string(message.info);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseResponseSetOption();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.code = reader.uint32();
	                    break;
	                case 3:
	                    message.log = reader.string();
	                    break;
	                case 4:
	                    message.info = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            code: (0, helpers_1.isSet)(object.code) ? Number(object.code) : 0,
	            log: (0, helpers_1.isSet)(object.log) ? String(object.log) : "",
	            info: (0, helpers_1.isSet)(object.info) ? String(object.info) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.code !== undefined && (obj.code = Math.round(message.code));
	        message.log !== undefined && (obj.log = message.log);
	        message.info !== undefined && (obj.info = message.info);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseResponseSetOption();
	        message.code = object.code ?? 0;
	        message.log = object.log ?? "";
	        message.info = object.info ?? "";
	        return message;
	    },
	};
	function createBaseResponseInitChain() {
	    return {
	        consensusParams: undefined,
	        validators: [],
	        appHash: new Uint8Array(),
	    };
	}
	exports.ResponseInitChain = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.consensusParams !== undefined) {
	            exports.ConsensusParams.encode(message.consensusParams, writer.uint32(10).fork()).ldelim();
	        }
	        for (const v of message.validators) {
	            exports.ValidatorUpdate.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.appHash.length !== 0) {
	            writer.uint32(26).bytes(message.appHash);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseResponseInitChain();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.consensusParams = exports.ConsensusParams.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.validators.push(exports.ValidatorUpdate.decode(reader, reader.uint32()));
	                    break;
	                case 3:
	                    message.appHash = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            consensusParams: (0, helpers_1.isSet)(object.consensusParams)
	                ? exports.ConsensusParams.fromJSON(object.consensusParams)
	                : undefined,
	            validators: Array.isArray(object?.validators)
	                ? object.validators.map((e) => exports.ValidatorUpdate.fromJSON(e))
	                : [],
	            appHash: (0, helpers_1.isSet)(object.appHash) ? (0, helpers_1.bytesFromBase64)(object.appHash) : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.consensusParams !== undefined &&
	            (obj.consensusParams = message.consensusParams
	                ? exports.ConsensusParams.toJSON(message.consensusParams)
	                : undefined);
	        if (message.validators) {
	            obj.validators = message.validators.map((e) => (e ? exports.ValidatorUpdate.toJSON(e) : undefined));
	        }
	        else {
	            obj.validators = [];
	        }
	        message.appHash !== undefined &&
	            (obj.appHash = (0, helpers_1.base64FromBytes)(message.appHash !== undefined ? message.appHash : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseResponseInitChain();
	        message.consensusParams =
	            object.consensusParams !== undefined && object.consensusParams !== null
	                ? exports.ConsensusParams.fromPartial(object.consensusParams)
	                : undefined;
	        message.validators = object.validators?.map((e) => exports.ValidatorUpdate.fromPartial(e)) || [];
	        message.appHash = object.appHash ?? new Uint8Array();
	        return message;
	    },
	};
	function createBaseResponseQuery() {
	    return {
	        code: 0,
	        log: "",
	        info: "",
	        index: helpers_1.Long.ZERO,
	        key: new Uint8Array(),
	        value: new Uint8Array(),
	        proofOps: undefined,
	        height: helpers_1.Long.ZERO,
	        codespace: "",
	    };
	}
	exports.ResponseQuery = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.code !== 0) {
	            writer.uint32(8).uint32(message.code);
	        }
	        if (message.log !== "") {
	            writer.uint32(26).string(message.log);
	        }
	        if (message.info !== "") {
	            writer.uint32(34).string(message.info);
	        }
	        if (!message.index.isZero()) {
	            writer.uint32(40).int64(message.index);
	        }
	        if (message.key.length !== 0) {
	            writer.uint32(50).bytes(message.key);
	        }
	        if (message.value.length !== 0) {
	            writer.uint32(58).bytes(message.value);
	        }
	        if (message.proofOps !== undefined) {
	            proof_1.ProofOps.encode(message.proofOps, writer.uint32(66).fork()).ldelim();
	        }
	        if (!message.height.isZero()) {
	            writer.uint32(72).int64(message.height);
	        }
	        if (message.codespace !== "") {
	            writer.uint32(82).string(message.codespace);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseResponseQuery();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.code = reader.uint32();
	                    break;
	                case 3:
	                    message.log = reader.string();
	                    break;
	                case 4:
	                    message.info = reader.string();
	                    break;
	                case 5:
	                    message.index = reader.int64();
	                    break;
	                case 6:
	                    message.key = reader.bytes();
	                    break;
	                case 7:
	                    message.value = reader.bytes();
	                    break;
	                case 8:
	                    message.proofOps = proof_1.ProofOps.decode(reader, reader.uint32());
	                    break;
	                case 9:
	                    message.height = reader.int64();
	                    break;
	                case 10:
	                    message.codespace = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            code: (0, helpers_1.isSet)(object.code) ? Number(object.code) : 0,
	            log: (0, helpers_1.isSet)(object.log) ? String(object.log) : "",
	            info: (0, helpers_1.isSet)(object.info) ? String(object.info) : "",
	            index: (0, helpers_1.isSet)(object.index) ? helpers_1.Long.fromValue(object.index) : helpers_1.Long.ZERO,
	            key: (0, helpers_1.isSet)(object.key) ? (0, helpers_1.bytesFromBase64)(object.key) : new Uint8Array(),
	            value: (0, helpers_1.isSet)(object.value) ? (0, helpers_1.bytesFromBase64)(object.value) : new Uint8Array(),
	            proofOps: (0, helpers_1.isSet)(object.proofOps) ? proof_1.ProofOps.fromJSON(object.proofOps) : undefined,
	            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO,
	            codespace: (0, helpers_1.isSet)(object.codespace) ? String(object.codespace) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.code !== undefined && (obj.code = Math.round(message.code));
	        message.log !== undefined && (obj.log = message.log);
	        message.info !== undefined && (obj.info = message.info);
	        message.index !== undefined && (obj.index = (message.index || helpers_1.Long.ZERO).toString());
	        message.key !== undefined &&
	            (obj.key = (0, helpers_1.base64FromBytes)(message.key !== undefined ? message.key : new Uint8Array()));
	        message.value !== undefined &&
	            (obj.value = (0, helpers_1.base64FromBytes)(message.value !== undefined ? message.value : new Uint8Array()));
	        message.proofOps !== undefined &&
	            (obj.proofOps = message.proofOps ? proof_1.ProofOps.toJSON(message.proofOps) : undefined);
	        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.ZERO).toString());
	        message.codespace !== undefined && (obj.codespace = message.codespace);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseResponseQuery();
	        message.code = object.code ?? 0;
	        message.log = object.log ?? "";
	        message.info = object.info ?? "";
	        message.index =
	            object.index !== undefined && object.index !== null ? helpers_1.Long.fromValue(object.index) : helpers_1.Long.ZERO;
	        message.key = object.key ?? new Uint8Array();
	        message.value = object.value ?? new Uint8Array();
	        message.proofOps =
	            object.proofOps !== undefined && object.proofOps !== null
	                ? proof_1.ProofOps.fromPartial(object.proofOps)
	                : undefined;
	        message.height =
	            object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO;
	        message.codespace = object.codespace ?? "";
	        return message;
	    },
	};
	function createBaseResponseBeginBlock() {
	    return {
	        events: [],
	    };
	}
	exports.ResponseBeginBlock = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.events) {
	            exports.Event.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseResponseBeginBlock();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.events.push(exports.Event.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            events: Array.isArray(object?.events) ? object.events.map((e) => exports.Event.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.events) {
	            obj.events = message.events.map((e) => (e ? exports.Event.toJSON(e) : undefined));
	        }
	        else {
	            obj.events = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseResponseBeginBlock();
	        message.events = object.events?.map((e) => exports.Event.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseResponseCheckTx() {
	    return {
	        code: 0,
	        data: new Uint8Array(),
	        log: "",
	        info: "",
	        gasWanted: helpers_1.Long.ZERO,
	        gasUsed: helpers_1.Long.ZERO,
	        events: [],
	        codespace: "",
	        sender: "",
	        priority: helpers_1.Long.ZERO,
	        mempoolError: "",
	    };
	}
	exports.ResponseCheckTx = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.code !== 0) {
	            writer.uint32(8).uint32(message.code);
	        }
	        if (message.data.length !== 0) {
	            writer.uint32(18).bytes(message.data);
	        }
	        if (message.log !== "") {
	            writer.uint32(26).string(message.log);
	        }
	        if (message.info !== "") {
	            writer.uint32(34).string(message.info);
	        }
	        if (!message.gasWanted.isZero()) {
	            writer.uint32(40).int64(message.gasWanted);
	        }
	        if (!message.gasUsed.isZero()) {
	            writer.uint32(48).int64(message.gasUsed);
	        }
	        for (const v of message.events) {
	            exports.Event.encode(v, writer.uint32(58).fork()).ldelim();
	        }
	        if (message.codespace !== "") {
	            writer.uint32(66).string(message.codespace);
	        }
	        if (message.sender !== "") {
	            writer.uint32(74).string(message.sender);
	        }
	        if (!message.priority.isZero()) {
	            writer.uint32(80).int64(message.priority);
	        }
	        if (message.mempoolError !== "") {
	            writer.uint32(90).string(message.mempoolError);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseResponseCheckTx();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.code = reader.uint32();
	                    break;
	                case 2:
	                    message.data = reader.bytes();
	                    break;
	                case 3:
	                    message.log = reader.string();
	                    break;
	                case 4:
	                    message.info = reader.string();
	                    break;
	                case 5:
	                    message.gasWanted = reader.int64();
	                    break;
	                case 6:
	                    message.gasUsed = reader.int64();
	                    break;
	                case 7:
	                    message.events.push(exports.Event.decode(reader, reader.uint32()));
	                    break;
	                case 8:
	                    message.codespace = reader.string();
	                    break;
	                case 9:
	                    message.sender = reader.string();
	                    break;
	                case 10:
	                    message.priority = reader.int64();
	                    break;
	                case 11:
	                    message.mempoolError = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            code: (0, helpers_1.isSet)(object.code) ? Number(object.code) : 0,
	            data: (0, helpers_1.isSet)(object.data) ? (0, helpers_1.bytesFromBase64)(object.data) : new Uint8Array(),
	            log: (0, helpers_1.isSet)(object.log) ? String(object.log) : "",
	            info: (0, helpers_1.isSet)(object.info) ? String(object.info) : "",
	            gasWanted: (0, helpers_1.isSet)(object.gas_wanted) ? helpers_1.Long.fromValue(object.gas_wanted) : helpers_1.Long.ZERO,
	            gasUsed: (0, helpers_1.isSet)(object.gas_used) ? helpers_1.Long.fromValue(object.gas_used) : helpers_1.Long.ZERO,
	            events: Array.isArray(object?.events) ? object.events.map((e) => exports.Event.fromJSON(e)) : [],
	            codespace: (0, helpers_1.isSet)(object.codespace) ? String(object.codespace) : "",
	            sender: (0, helpers_1.isSet)(object.sender) ? String(object.sender) : "",
	            priority: (0, helpers_1.isSet)(object.priority) ? helpers_1.Long.fromValue(object.priority) : helpers_1.Long.ZERO,
	            mempoolError: (0, helpers_1.isSet)(object.mempoolError) ? String(object.mempoolError) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.code !== undefined && (obj.code = Math.round(message.code));
	        message.data !== undefined &&
	            (obj.data = (0, helpers_1.base64FromBytes)(message.data !== undefined ? message.data : new Uint8Array()));
	        message.log !== undefined && (obj.log = message.log);
	        message.info !== undefined && (obj.info = message.info);
	        message.gasWanted !== undefined && (obj.gas_wanted = (message.gasWanted || helpers_1.Long.ZERO).toString());
	        message.gasUsed !== undefined && (obj.gas_used = (message.gasUsed || helpers_1.Long.ZERO).toString());
	        if (message.events) {
	            obj.events = message.events.map((e) => (e ? exports.Event.toJSON(e) : undefined));
	        }
	        else {
	            obj.events = [];
	        }
	        message.codespace !== undefined && (obj.codespace = message.codespace);
	        message.sender !== undefined && (obj.sender = message.sender);
	        message.priority !== undefined && (obj.priority = (message.priority || helpers_1.Long.ZERO).toString());
	        message.mempoolError !== undefined && (obj.mempoolError = message.mempoolError);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseResponseCheckTx();
	        message.code = object.code ?? 0;
	        message.data = object.data ?? new Uint8Array();
	        message.log = object.log ?? "";
	        message.info = object.info ?? "";
	        message.gasWanted =
	            object.gasWanted !== undefined && object.gasWanted !== null
	                ? helpers_1.Long.fromValue(object.gasWanted)
	                : helpers_1.Long.ZERO;
	        message.gasUsed =
	            object.gasUsed !== undefined && object.gasUsed !== null ? helpers_1.Long.fromValue(object.gasUsed) : helpers_1.Long.ZERO;
	        message.events = object.events?.map((e) => exports.Event.fromPartial(e)) || [];
	        message.codespace = object.codespace ?? "";
	        message.sender = object.sender ?? "";
	        message.priority =
	            object.priority !== undefined && object.priority !== null ? helpers_1.Long.fromValue(object.priority) : helpers_1.Long.ZERO;
	        message.mempoolError = object.mempoolError ?? "";
	        return message;
	    },
	};
	function createBaseResponseDeliverTx() {
	    return {
	        code: 0,
	        data: new Uint8Array(),
	        log: "",
	        info: "",
	        gasWanted: helpers_1.Long.ZERO,
	        gasUsed: helpers_1.Long.ZERO,
	        events: [],
	        codespace: "",
	    };
	}
	exports.ResponseDeliverTx = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.code !== 0) {
	            writer.uint32(8).uint32(message.code);
	        }
	        if (message.data.length !== 0) {
	            writer.uint32(18).bytes(message.data);
	        }
	        if (message.log !== "") {
	            writer.uint32(26).string(message.log);
	        }
	        if (message.info !== "") {
	            writer.uint32(34).string(message.info);
	        }
	        if (!message.gasWanted.isZero()) {
	            writer.uint32(40).int64(message.gasWanted);
	        }
	        if (!message.gasUsed.isZero()) {
	            writer.uint32(48).int64(message.gasUsed);
	        }
	        for (const v of message.events) {
	            exports.Event.encode(v, writer.uint32(58).fork()).ldelim();
	        }
	        if (message.codespace !== "") {
	            writer.uint32(66).string(message.codespace);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseResponseDeliverTx();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.code = reader.uint32();
	                    break;
	                case 2:
	                    message.data = reader.bytes();
	                    break;
	                case 3:
	                    message.log = reader.string();
	                    break;
	                case 4:
	                    message.info = reader.string();
	                    break;
	                case 5:
	                    message.gasWanted = reader.int64();
	                    break;
	                case 6:
	                    message.gasUsed = reader.int64();
	                    break;
	                case 7:
	                    message.events.push(exports.Event.decode(reader, reader.uint32()));
	                    break;
	                case 8:
	                    message.codespace = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            code: (0, helpers_1.isSet)(object.code) ? Number(object.code) : 0,
	            data: (0, helpers_1.isSet)(object.data) ? (0, helpers_1.bytesFromBase64)(object.data) : new Uint8Array(),
	            log: (0, helpers_1.isSet)(object.log) ? String(object.log) : "",
	            info: (0, helpers_1.isSet)(object.info) ? String(object.info) : "",
	            gasWanted: (0, helpers_1.isSet)(object.gas_wanted) ? helpers_1.Long.fromValue(object.gas_wanted) : helpers_1.Long.ZERO,
	            gasUsed: (0, helpers_1.isSet)(object.gas_used) ? helpers_1.Long.fromValue(object.gas_used) : helpers_1.Long.ZERO,
	            events: Array.isArray(object?.events) ? object.events.map((e) => exports.Event.fromJSON(e)) : [],
	            codespace: (0, helpers_1.isSet)(object.codespace) ? String(object.codespace) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.code !== undefined && (obj.code = Math.round(message.code));
	        message.data !== undefined &&
	            (obj.data = (0, helpers_1.base64FromBytes)(message.data !== undefined ? message.data : new Uint8Array()));
	        message.log !== undefined && (obj.log = message.log);
	        message.info !== undefined && (obj.info = message.info);
	        message.gasWanted !== undefined && (obj.gas_wanted = (message.gasWanted || helpers_1.Long.ZERO).toString());
	        message.gasUsed !== undefined && (obj.gas_used = (message.gasUsed || helpers_1.Long.ZERO).toString());
	        if (message.events) {
	            obj.events = message.events.map((e) => (e ? exports.Event.toJSON(e) : undefined));
	        }
	        else {
	            obj.events = [];
	        }
	        message.codespace !== undefined && (obj.codespace = message.codespace);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseResponseDeliverTx();
	        message.code = object.code ?? 0;
	        message.data = object.data ?? new Uint8Array();
	        message.log = object.log ?? "";
	        message.info = object.info ?? "";
	        message.gasWanted =
	            object.gasWanted !== undefined && object.gasWanted !== null
	                ? helpers_1.Long.fromValue(object.gasWanted)
	                : helpers_1.Long.ZERO;
	        message.gasUsed =
	            object.gasUsed !== undefined && object.gasUsed !== null ? helpers_1.Long.fromValue(object.gasUsed) : helpers_1.Long.ZERO;
	        message.events = object.events?.map((e) => exports.Event.fromPartial(e)) || [];
	        message.codespace = object.codespace ?? "";
	        return message;
	    },
	};
	function createBaseResponseEndBlock() {
	    return {
	        validatorUpdates: [],
	        consensusParamUpdates: undefined,
	        events: [],
	    };
	}
	exports.ResponseEndBlock = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.validatorUpdates) {
	            exports.ValidatorUpdate.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.consensusParamUpdates !== undefined) {
	            exports.ConsensusParams.encode(message.consensusParamUpdates, writer.uint32(18).fork()).ldelim();
	        }
	        for (const v of message.events) {
	            exports.Event.encode(v, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseResponseEndBlock();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.validatorUpdates.push(exports.ValidatorUpdate.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.consensusParamUpdates = exports.ConsensusParams.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.events.push(exports.Event.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            validatorUpdates: Array.isArray(object?.validatorUpdates)
	                ? object.validatorUpdates.map((e) => exports.ValidatorUpdate.fromJSON(e))
	                : [],
	            consensusParamUpdates: (0, helpers_1.isSet)(object.consensusParamUpdates)
	                ? exports.ConsensusParams.fromJSON(object.consensusParamUpdates)
	                : undefined,
	            events: Array.isArray(object?.events) ? object.events.map((e) => exports.Event.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.validatorUpdates) {
	            obj.validatorUpdates = message.validatorUpdates.map((e) => (e ? exports.ValidatorUpdate.toJSON(e) : undefined));
	        }
	        else {
	            obj.validatorUpdates = [];
	        }
	        message.consensusParamUpdates !== undefined &&
	            (obj.consensusParamUpdates = message.consensusParamUpdates
	                ? exports.ConsensusParams.toJSON(message.consensusParamUpdates)
	                : undefined);
	        if (message.events) {
	            obj.events = message.events.map((e) => (e ? exports.Event.toJSON(e) : undefined));
	        }
	        else {
	            obj.events = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseResponseEndBlock();
	        message.validatorUpdates = object.validatorUpdates?.map((e) => exports.ValidatorUpdate.fromPartial(e)) || [];
	        message.consensusParamUpdates =
	            object.consensusParamUpdates !== undefined && object.consensusParamUpdates !== null
	                ? exports.ConsensusParams.fromPartial(object.consensusParamUpdates)
	                : undefined;
	        message.events = object.events?.map((e) => exports.Event.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseResponseCommit() {
	    return {
	        data: new Uint8Array(),
	        retainHeight: helpers_1.Long.ZERO,
	    };
	}
	exports.ResponseCommit = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.data.length !== 0) {
	            writer.uint32(18).bytes(message.data);
	        }
	        if (!message.retainHeight.isZero()) {
	            writer.uint32(24).int64(message.retainHeight);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseResponseCommit();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 2:
	                    message.data = reader.bytes();
	                    break;
	                case 3:
	                    message.retainHeight = reader.int64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            data: (0, helpers_1.isSet)(object.data) ? (0, helpers_1.bytesFromBase64)(object.data) : new Uint8Array(),
	            retainHeight: (0, helpers_1.isSet)(object.retainHeight) ? helpers_1.Long.fromValue(object.retainHeight) : helpers_1.Long.ZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.data !== undefined &&
	            (obj.data = (0, helpers_1.base64FromBytes)(message.data !== undefined ? message.data : new Uint8Array()));
	        message.retainHeight !== undefined && (obj.retainHeight = (message.retainHeight || helpers_1.Long.ZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseResponseCommit();
	        message.data = object.data ?? new Uint8Array();
	        message.retainHeight =
	            object.retainHeight !== undefined && object.retainHeight !== null
	                ? helpers_1.Long.fromValue(object.retainHeight)
	                : helpers_1.Long.ZERO;
	        return message;
	    },
	};
	function createBaseResponseListSnapshots() {
	    return {
	        snapshots: [],
	    };
	}
	exports.ResponseListSnapshots = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.snapshots) {
	            exports.Snapshot.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseResponseListSnapshots();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.snapshots.push(exports.Snapshot.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            snapshots: Array.isArray(object?.snapshots)
	                ? object.snapshots.map((e) => exports.Snapshot.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.snapshots) {
	            obj.snapshots = message.snapshots.map((e) => (e ? exports.Snapshot.toJSON(e) : undefined));
	        }
	        else {
	            obj.snapshots = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseResponseListSnapshots();
	        message.snapshots = object.snapshots?.map((e) => exports.Snapshot.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseResponseOfferSnapshot() {
	    return {
	        result: 0,
	    };
	}
	exports.ResponseOfferSnapshot = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.result !== 0) {
	            writer.uint32(8).int32(message.result);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseResponseOfferSnapshot();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.result = reader.int32();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            result: (0, helpers_1.isSet)(object.result) ? responseOfferSnapshot_ResultFromJSON(object.result) : 0,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.result !== undefined && (obj.result = responseOfferSnapshot_ResultToJSON(message.result));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseResponseOfferSnapshot();
	        message.result = object.result ?? 0;
	        return message;
	    },
	};
	function createBaseResponseLoadSnapshotChunk() {
	    return {
	        chunk: new Uint8Array(),
	    };
	}
	exports.ResponseLoadSnapshotChunk = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.chunk.length !== 0) {
	            writer.uint32(10).bytes(message.chunk);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseResponseLoadSnapshotChunk();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.chunk = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            chunk: (0, helpers_1.isSet)(object.chunk) ? (0, helpers_1.bytesFromBase64)(object.chunk) : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.chunk !== undefined &&
	            (obj.chunk = (0, helpers_1.base64FromBytes)(message.chunk !== undefined ? message.chunk : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseResponseLoadSnapshotChunk();
	        message.chunk = object.chunk ?? new Uint8Array();
	        return message;
	    },
	};
	function createBaseResponseApplySnapshotChunk() {
	    return {
	        result: 0,
	        refetchChunks: [],
	        rejectSenders: [],
	    };
	}
	exports.ResponseApplySnapshotChunk = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.result !== 0) {
	            writer.uint32(8).int32(message.result);
	        }
	        writer.uint32(18).fork();
	        for (const v of message.refetchChunks) {
	            writer.uint32(v);
	        }
	        writer.ldelim();
	        for (const v of message.rejectSenders) {
	            writer.uint32(26).string(v);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseResponseApplySnapshotChunk();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.result = reader.int32();
	                    break;
	                case 2:
	                    if ((tag & 7) === 2) {
	                        const end2 = reader.uint32() + reader.pos;
	                        while (reader.pos < end2) {
	                            message.refetchChunks.push(reader.uint32());
	                        }
	                    }
	                    else {
	                        message.refetchChunks.push(reader.uint32());
	                    }
	                    break;
	                case 3:
	                    message.rejectSenders.push(reader.string());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            result: (0, helpers_1.isSet)(object.result) ? responseApplySnapshotChunk_ResultFromJSON(object.result) : 0,
	            refetchChunks: Array.isArray(object?.refetchChunks)
	                ? object.refetchChunks.map((e) => Number(e))
	                : [],
	            rejectSenders: Array.isArray(object?.rejectSenders)
	                ? object.rejectSenders.map((e) => String(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.result !== undefined && (obj.result = responseApplySnapshotChunk_ResultToJSON(message.result));
	        if (message.refetchChunks) {
	            obj.refetchChunks = message.refetchChunks.map((e) => Math.round(e));
	        }
	        else {
	            obj.refetchChunks = [];
	        }
	        if (message.rejectSenders) {
	            obj.rejectSenders = message.rejectSenders.map((e) => e);
	        }
	        else {
	            obj.rejectSenders = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseResponseApplySnapshotChunk();
	        message.result = object.result ?? 0;
	        message.refetchChunks = object.refetchChunks?.map((e) => e) || [];
	        message.rejectSenders = object.rejectSenders?.map((e) => e) || [];
	        return message;
	    },
	};
	function createBaseConsensusParams() {
	    return {
	        block: undefined,
	        evidence: undefined,
	        validator: undefined,
	        version: undefined,
	    };
	}
	exports.ConsensusParams = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.block !== undefined) {
	            exports.BlockParams.encode(message.block, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.evidence !== undefined) {
	            params_1.EvidenceParams.encode(message.evidence, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.validator !== undefined) {
	            params_1.ValidatorParams.encode(message.validator, writer.uint32(26).fork()).ldelim();
	        }
	        if (message.version !== undefined) {
	            params_1.VersionParams.encode(message.version, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseConsensusParams();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.block = exports.BlockParams.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.evidence = params_1.EvidenceParams.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.validator = params_1.ValidatorParams.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.version = params_1.VersionParams.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            block: (0, helpers_1.isSet)(object.block) ? exports.BlockParams.fromJSON(object.block) : undefined,
	            evidence: (0, helpers_1.isSet)(object.evidence) ? params_1.EvidenceParams.fromJSON(object.evidence) : undefined,
	            validator: (0, helpers_1.isSet)(object.validator) ? params_1.ValidatorParams.fromJSON(object.validator) : undefined,
	            version: (0, helpers_1.isSet)(object.version) ? params_1.VersionParams.fromJSON(object.version) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.block !== undefined &&
	            (obj.block = message.block ? exports.BlockParams.toJSON(message.block) : undefined);
	        message.evidence !== undefined &&
	            (obj.evidence = message.evidence ? params_1.EvidenceParams.toJSON(message.evidence) : undefined);
	        message.validator !== undefined &&
	            (obj.validator = message.validator ? params_1.ValidatorParams.toJSON(message.validator) : undefined);
	        message.version !== undefined &&
	            (obj.version = message.version ? params_1.VersionParams.toJSON(message.version) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseConsensusParams();
	        message.block =
	            object.block !== undefined && object.block !== null ? exports.BlockParams.fromPartial(object.block) : undefined;
	        message.evidence =
	            object.evidence !== undefined && object.evidence !== null
	                ? params_1.EvidenceParams.fromPartial(object.evidence)
	                : undefined;
	        message.validator =
	            object.validator !== undefined && object.validator !== null
	                ? params_1.ValidatorParams.fromPartial(object.validator)
	                : undefined;
	        message.version =
	            object.version !== undefined && object.version !== null
	                ? params_1.VersionParams.fromPartial(object.version)
	                : undefined;
	        return message;
	    },
	};
	function createBaseBlockParams() {
	    return {
	        maxBytes: helpers_1.Long.ZERO,
	        maxGas: helpers_1.Long.ZERO,
	    };
	}
	exports.BlockParams = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.maxBytes.isZero()) {
	            writer.uint32(8).int64(message.maxBytes);
	        }
	        if (!message.maxGas.isZero()) {
	            writer.uint32(16).int64(message.maxGas);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseBlockParams();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.maxBytes = reader.int64();
	                    break;
	                case 2:
	                    message.maxGas = reader.int64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            maxBytes: (0, helpers_1.isSet)(object.maxBytes) ? helpers_1.Long.fromValue(object.maxBytes) : helpers_1.Long.ZERO,
	            maxGas: (0, helpers_1.isSet)(object.maxGas) ? helpers_1.Long.fromValue(object.maxGas) : helpers_1.Long.ZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.maxBytes !== undefined && (obj.maxBytes = (message.maxBytes || helpers_1.Long.ZERO).toString());
	        message.maxGas !== undefined && (obj.maxGas = (message.maxGas || helpers_1.Long.ZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseBlockParams();
	        message.maxBytes =
	            object.maxBytes !== undefined && object.maxBytes !== null ? helpers_1.Long.fromValue(object.maxBytes) : helpers_1.Long.ZERO;
	        message.maxGas =
	            object.maxGas !== undefined && object.maxGas !== null ? helpers_1.Long.fromValue(object.maxGas) : helpers_1.Long.ZERO;
	        return message;
	    },
	};
	function createBaseLastCommitInfo() {
	    return {
	        round: 0,
	        votes: [],
	    };
	}
	exports.LastCommitInfo = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.round !== 0) {
	            writer.uint32(8).int32(message.round);
	        }
	        for (const v of message.votes) {
	            exports.VoteInfo.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseLastCommitInfo();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.round = reader.int32();
	                    break;
	                case 2:
	                    message.votes.push(exports.VoteInfo.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            round: (0, helpers_1.isSet)(object.round) ? Number(object.round) : 0,
	            votes: Array.isArray(object?.votes) ? object.votes.map((e) => exports.VoteInfo.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.round !== undefined && (obj.round = Math.round(message.round));
	        if (message.votes) {
	            obj.votes = message.votes.map((e) => (e ? exports.VoteInfo.toJSON(e) : undefined));
	        }
	        else {
	            obj.votes = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseLastCommitInfo();
	        message.round = object.round ?? 0;
	        message.votes = object.votes?.map((e) => exports.VoteInfo.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseEvent() {
	    return {
	        type: "",
	        attributes: [],
	    };
	}
	exports.Event = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.type !== "") {
	            writer.uint32(10).string(message.type);
	        }
	        for (const v of message.attributes) {
	            exports.EventAttribute.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseEvent();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.type = reader.string();
	                    break;
	                case 2:
	                    message.attributes.push(exports.EventAttribute.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            type: (0, helpers_1.isSet)(object.type) ? String(object.type) : "",
	            attributes: Array.isArray(object?.attributes)
	                ? object.attributes.map((e) => exports.EventAttribute.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.type !== undefined && (obj.type = message.type);
	        if (message.attributes) {
	            obj.attributes = message.attributes.map((e) => (e ? exports.EventAttribute.toJSON(e) : undefined));
	        }
	        else {
	            obj.attributes = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseEvent();
	        message.type = object.type ?? "";
	        message.attributes = object.attributes?.map((e) => exports.EventAttribute.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseEventAttribute() {
	    return {
	        key: new Uint8Array(),
	        value: new Uint8Array(),
	        index: false,
	    };
	}
	exports.EventAttribute = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.key.length !== 0) {
	            writer.uint32(10).bytes(message.key);
	        }
	        if (message.value.length !== 0) {
	            writer.uint32(18).bytes(message.value);
	        }
	        if (message.index === true) {
	            writer.uint32(24).bool(message.index);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseEventAttribute();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.key = reader.bytes();
	                    break;
	                case 2:
	                    message.value = reader.bytes();
	                    break;
	                case 3:
	                    message.index = reader.bool();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            key: (0, helpers_1.isSet)(object.key) ? (0, helpers_1.bytesFromBase64)(object.key) : new Uint8Array(),
	            value: (0, helpers_1.isSet)(object.value) ? (0, helpers_1.bytesFromBase64)(object.value) : new Uint8Array(),
	            index: (0, helpers_1.isSet)(object.index) ? Boolean(object.index) : false,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.key !== undefined &&
	            (obj.key = (0, helpers_1.base64FromBytes)(message.key !== undefined ? message.key : new Uint8Array()));
	        message.value !== undefined &&
	            (obj.value = (0, helpers_1.base64FromBytes)(message.value !== undefined ? message.value : new Uint8Array()));
	        message.index !== undefined && (obj.index = message.index);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseEventAttribute();
	        message.key = object.key ?? new Uint8Array();
	        message.value = object.value ?? new Uint8Array();
	        message.index = object.index ?? false;
	        return message;
	    },
	};
	function createBaseTxResult() {
	    return {
	        height: helpers_1.Long.ZERO,
	        index: 0,
	        tx: new Uint8Array(),
	        result: undefined,
	    };
	}
	exports.TxResult = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.height.isZero()) {
	            writer.uint32(8).int64(message.height);
	        }
	        if (message.index !== 0) {
	            writer.uint32(16).uint32(message.index);
	        }
	        if (message.tx.length !== 0) {
	            writer.uint32(26).bytes(message.tx);
	        }
	        if (message.result !== undefined) {
	            exports.ResponseDeliverTx.encode(message.result, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseTxResult();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.height = reader.int64();
	                    break;
	                case 2:
	                    message.index = reader.uint32();
	                    break;
	                case 3:
	                    message.tx = reader.bytes();
	                    break;
	                case 4:
	                    message.result = exports.ResponseDeliverTx.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO,
	            index: (0, helpers_1.isSet)(object.index) ? Number(object.index) : 0,
	            tx: (0, helpers_1.isSet)(object.tx) ? (0, helpers_1.bytesFromBase64)(object.tx) : new Uint8Array(),
	            result: (0, helpers_1.isSet)(object.result) ? exports.ResponseDeliverTx.fromJSON(object.result) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.ZERO).toString());
	        message.index !== undefined && (obj.index = Math.round(message.index));
	        message.tx !== undefined &&
	            (obj.tx = (0, helpers_1.base64FromBytes)(message.tx !== undefined ? message.tx : new Uint8Array()));
	        message.result !== undefined &&
	            (obj.result = message.result ? exports.ResponseDeliverTx.toJSON(message.result) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseTxResult();
	        message.height =
	            object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO;
	        message.index = object.index ?? 0;
	        message.tx = object.tx ?? new Uint8Array();
	        message.result =
	            object.result !== undefined && object.result !== null
	                ? exports.ResponseDeliverTx.fromPartial(object.result)
	                : undefined;
	        return message;
	    },
	};
	function createBaseValidator() {
	    return {
	        address: new Uint8Array(),
	        power: helpers_1.Long.ZERO,
	    };
	}
	exports.Validator = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.address.length !== 0) {
	            writer.uint32(10).bytes(message.address);
	        }
	        if (!message.power.isZero()) {
	            writer.uint32(24).int64(message.power);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseValidator();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.address = reader.bytes();
	                    break;
	                case 3:
	                    message.power = reader.int64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            address: (0, helpers_1.isSet)(object.address) ? (0, helpers_1.bytesFromBase64)(object.address) : new Uint8Array(),
	            power: (0, helpers_1.isSet)(object.power) ? helpers_1.Long.fromValue(object.power) : helpers_1.Long.ZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.address !== undefined &&
	            (obj.address = (0, helpers_1.base64FromBytes)(message.address !== undefined ? message.address : new Uint8Array()));
	        message.power !== undefined && (obj.power = (message.power || helpers_1.Long.ZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseValidator();
	        message.address = object.address ?? new Uint8Array();
	        message.power =
	            object.power !== undefined && object.power !== null ? helpers_1.Long.fromValue(object.power) : helpers_1.Long.ZERO;
	        return message;
	    },
	};
	function createBaseValidatorUpdate() {
	    return {
	        pubKey: undefined,
	        power: helpers_1.Long.ZERO,
	    };
	}
	exports.ValidatorUpdate = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.pubKey !== undefined) {
	            keys_1.PublicKey.encode(message.pubKey, writer.uint32(10).fork()).ldelim();
	        }
	        if (!message.power.isZero()) {
	            writer.uint32(16).int64(message.power);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseValidatorUpdate();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.pubKey = keys_1.PublicKey.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.power = reader.int64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            pubKey: (0, helpers_1.isSet)(object.pubKey) ? keys_1.PublicKey.fromJSON(object.pubKey) : undefined,
	            power: (0, helpers_1.isSet)(object.power) ? helpers_1.Long.fromValue(object.power) : helpers_1.Long.ZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.pubKey !== undefined &&
	            (obj.pubKey = message.pubKey ? keys_1.PublicKey.toJSON(message.pubKey) : undefined);
	        message.power !== undefined && (obj.power = (message.power || helpers_1.Long.ZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseValidatorUpdate();
	        message.pubKey =
	            object.pubKey !== undefined && object.pubKey !== null
	                ? keys_1.PublicKey.fromPartial(object.pubKey)
	                : undefined;
	        message.power =
	            object.power !== undefined && object.power !== null ? helpers_1.Long.fromValue(object.power) : helpers_1.Long.ZERO;
	        return message;
	    },
	};
	function createBaseVoteInfo() {
	    return {
	        validator: undefined,
	        signedLastBlock: false,
	    };
	}
	exports.VoteInfo = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.validator !== undefined) {
	            exports.Validator.encode(message.validator, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.signedLastBlock === true) {
	            writer.uint32(16).bool(message.signedLastBlock);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseVoteInfo();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.validator = exports.Validator.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.signedLastBlock = reader.bool();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            validator: (0, helpers_1.isSet)(object.validator) ? exports.Validator.fromJSON(object.validator) : undefined,
	            signedLastBlock: (0, helpers_1.isSet)(object.signedLastBlock) ? Boolean(object.signedLastBlock) : false,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.validator !== undefined &&
	            (obj.validator = message.validator ? exports.Validator.toJSON(message.validator) : undefined);
	        message.signedLastBlock !== undefined && (obj.signedLastBlock = message.signedLastBlock);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseVoteInfo();
	        message.validator =
	            object.validator !== undefined && object.validator !== null
	                ? exports.Validator.fromPartial(object.validator)
	                : undefined;
	        message.signedLastBlock = object.signedLastBlock ?? false;
	        return message;
	    },
	};
	function createBaseEvidence() {
	    return {
	        type: 0,
	        validator: undefined,
	        height: helpers_1.Long.ZERO,
	        time: undefined,
	        totalVotingPower: helpers_1.Long.ZERO,
	    };
	}
	exports.Evidence = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.type !== 0) {
	            writer.uint32(8).int32(message.type);
	        }
	        if (message.validator !== undefined) {
	            exports.Validator.encode(message.validator, writer.uint32(18).fork()).ldelim();
	        }
	        if (!message.height.isZero()) {
	            writer.uint32(24).int64(message.height);
	        }
	        if (message.time !== undefined) {
	            timestamp_1.Timestamp.encode(message.time, writer.uint32(34).fork()).ldelim();
	        }
	        if (!message.totalVotingPower.isZero()) {
	            writer.uint32(40).int64(message.totalVotingPower);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseEvidence();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.type = reader.int32();
	                    break;
	                case 2:
	                    message.validator = exports.Validator.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.height = reader.int64();
	                    break;
	                case 4:
	                    message.time = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                case 5:
	                    message.totalVotingPower = reader.int64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            type: (0, helpers_1.isSet)(object.type) ? evidenceTypeFromJSON(object.type) : 0,
	            validator: (0, helpers_1.isSet)(object.validator) ? exports.Validator.fromJSON(object.validator) : undefined,
	            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO,
	            time: (0, helpers_1.isSet)(object.time) ? (0, helpers_1.fromJsonTimestamp)(object.time) : undefined,
	            totalVotingPower: (0, helpers_1.isSet)(object.totalVotingPower) ? helpers_1.Long.fromValue(object.totalVotingPower) : helpers_1.Long.ZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.type !== undefined && (obj.type = evidenceTypeToJSON(message.type));
	        message.validator !== undefined &&
	            (obj.validator = message.validator ? exports.Validator.toJSON(message.validator) : undefined);
	        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.ZERO).toString());
	        message.time !== undefined && (obj.time = (0, helpers_1.fromTimestamp)(message.time).toISOString());
	        message.totalVotingPower !== undefined &&
	            (obj.totalVotingPower = (message.totalVotingPower || helpers_1.Long.ZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseEvidence();
	        message.type = object.type ?? 0;
	        message.validator =
	            object.validator !== undefined && object.validator !== null
	                ? exports.Validator.fromPartial(object.validator)
	                : undefined;
	        message.height =
	            object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO;
	        message.time =
	            object.time !== undefined && object.time !== null ? timestamp_1.Timestamp.fromPartial(object.time) : undefined;
	        message.totalVotingPower =
	            object.totalVotingPower !== undefined && object.totalVotingPower !== null
	                ? helpers_1.Long.fromValue(object.totalVotingPower)
	                : helpers_1.Long.ZERO;
	        return message;
	    },
	};
	function createBaseSnapshot() {
	    return {
	        height: helpers_1.Long.UZERO,
	        format: 0,
	        chunks: 0,
	        hash: new Uint8Array(),
	        metadata: new Uint8Array(),
	    };
	}
	exports.Snapshot = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.height.isZero()) {
	            writer.uint32(8).uint64(message.height);
	        }
	        if (message.format !== 0) {
	            writer.uint32(16).uint32(message.format);
	        }
	        if (message.chunks !== 0) {
	            writer.uint32(24).uint32(message.chunks);
	        }
	        if (message.hash.length !== 0) {
	            writer.uint32(34).bytes(message.hash);
	        }
	        if (message.metadata.length !== 0) {
	            writer.uint32(42).bytes(message.metadata);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseSnapshot();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.height = reader.uint64();
	                    break;
	                case 2:
	                    message.format = reader.uint32();
	                    break;
	                case 3:
	                    message.chunks = reader.uint32();
	                    break;
	                case 4:
	                    message.hash = reader.bytes();
	                    break;
	                case 5:
	                    message.metadata = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.UZERO,
	            format: (0, helpers_1.isSet)(object.format) ? Number(object.format) : 0,
	            chunks: (0, helpers_1.isSet)(object.chunks) ? Number(object.chunks) : 0,
	            hash: (0, helpers_1.isSet)(object.hash) ? (0, helpers_1.bytesFromBase64)(object.hash) : new Uint8Array(),
	            metadata: (0, helpers_1.isSet)(object.metadata) ? (0, helpers_1.bytesFromBase64)(object.metadata) : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.UZERO).toString());
	        message.format !== undefined && (obj.format = Math.round(message.format));
	        message.chunks !== undefined && (obj.chunks = Math.round(message.chunks));
	        message.hash !== undefined &&
	            (obj.hash = (0, helpers_1.base64FromBytes)(message.hash !== undefined ? message.hash : new Uint8Array()));
	        message.metadata !== undefined &&
	            (obj.metadata = (0, helpers_1.base64FromBytes)(message.metadata !== undefined ? message.metadata : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseSnapshot();
	        message.height =
	            object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.UZERO;
	        message.format = object.format ?? 0;
	        message.chunks = object.chunks ?? 0;
	        message.hash = object.hash ?? new Uint8Array();
	        message.metadata = object.metadata ?? new Uint8Array();
	        return message;
	    },
	};
	class ABCIApplicationClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.Echo = this.Echo.bind(this);
	        this.Flush = this.Flush.bind(this);
	        this.Info = this.Info.bind(this);
	        this.SetOption = this.SetOption.bind(this);
	        this.DeliverTx = this.DeliverTx.bind(this);
	        this.CheckTx = this.CheckTx.bind(this);
	        this.Query = this.Query.bind(this);
	        this.Commit = this.Commit.bind(this);
	        this.InitChain = this.InitChain.bind(this);
	        this.BeginBlock = this.BeginBlock.bind(this);
	        this.EndBlock = this.EndBlock.bind(this);
	        this.ListSnapshots = this.ListSnapshots.bind(this);
	        this.OfferSnapshot = this.OfferSnapshot.bind(this);
	        this.LoadSnapshotChunk = this.LoadSnapshotChunk.bind(this);
	        this.ApplySnapshotChunk = this.ApplySnapshotChunk.bind(this);
	    }
	    Echo(request) {
	        const data = exports.RequestEcho.encode(request).finish();
	        const promise = this.rpc.request("tendermint.abci.ABCIApplication", "Echo", data);
	        return promise.then((data) => exports.ResponseEcho.decode(new _m0.Reader(data)));
	    }
	    Flush(request = {}) {
	        const data = exports.RequestFlush.encode(request).finish();
	        const promise = this.rpc.request("tendermint.abci.ABCIApplication", "Flush", data);
	        return promise.then((data) => exports.ResponseFlush.decode(new _m0.Reader(data)));
	    }
	    Info(request) {
	        const data = exports.RequestInfo.encode(request).finish();
	        const promise = this.rpc.request("tendermint.abci.ABCIApplication", "Info", data);
	        return promise.then((data) => exports.ResponseInfo.decode(new _m0.Reader(data)));
	    }
	    SetOption(request) {
	        const data = exports.RequestSetOption.encode(request).finish();
	        const promise = this.rpc.request("tendermint.abci.ABCIApplication", "SetOption", data);
	        return promise.then((data) => exports.ResponseSetOption.decode(new _m0.Reader(data)));
	    }
	    DeliverTx(request) {
	        const data = exports.RequestDeliverTx.encode(request).finish();
	        const promise = this.rpc.request("tendermint.abci.ABCIApplication", "DeliverTx", data);
	        return promise.then((data) => exports.ResponseDeliverTx.decode(new _m0.Reader(data)));
	    }
	    CheckTx(request) {
	        const data = exports.RequestCheckTx.encode(request).finish();
	        const promise = this.rpc.request("tendermint.abci.ABCIApplication", "CheckTx", data);
	        return promise.then((data) => exports.ResponseCheckTx.decode(new _m0.Reader(data)));
	    }
	    Query(request) {
	        const data = exports.RequestQuery.encode(request).finish();
	        const promise = this.rpc.request("tendermint.abci.ABCIApplication", "Query", data);
	        return promise.then((data) => exports.ResponseQuery.decode(new _m0.Reader(data)));
	    }
	    Commit(request = {}) {
	        const data = exports.RequestCommit.encode(request).finish();
	        const promise = this.rpc.request("tendermint.abci.ABCIApplication", "Commit", data);
	        return promise.then((data) => exports.ResponseCommit.decode(new _m0.Reader(data)));
	    }
	    InitChain(request) {
	        const data = exports.RequestInitChain.encode(request).finish();
	        const promise = this.rpc.request("tendermint.abci.ABCIApplication", "InitChain", data);
	        return promise.then((data) => exports.ResponseInitChain.decode(new _m0.Reader(data)));
	    }
	    BeginBlock(request) {
	        const data = exports.RequestBeginBlock.encode(request).finish();
	        const promise = this.rpc.request("tendermint.abci.ABCIApplication", "BeginBlock", data);
	        return promise.then((data) => exports.ResponseBeginBlock.decode(new _m0.Reader(data)));
	    }
	    EndBlock(request) {
	        const data = exports.RequestEndBlock.encode(request).finish();
	        const promise = this.rpc.request("tendermint.abci.ABCIApplication", "EndBlock", data);
	        return promise.then((data) => exports.ResponseEndBlock.decode(new _m0.Reader(data)));
	    }
	    ListSnapshots(request = {}) {
	        const data = exports.RequestListSnapshots.encode(request).finish();
	        const promise = this.rpc.request("tendermint.abci.ABCIApplication", "ListSnapshots", data);
	        return promise.then((data) => exports.ResponseListSnapshots.decode(new _m0.Reader(data)));
	    }
	    OfferSnapshot(request) {
	        const data = exports.RequestOfferSnapshot.encode(request).finish();
	        const promise = this.rpc.request("tendermint.abci.ABCIApplication", "OfferSnapshot", data);
	        return promise.then((data) => exports.ResponseOfferSnapshot.decode(new _m0.Reader(data)));
	    }
	    LoadSnapshotChunk(request) {
	        const data = exports.RequestLoadSnapshotChunk.encode(request).finish();
	        const promise = this.rpc.request("tendermint.abci.ABCIApplication", "LoadSnapshotChunk", data);
	        return promise.then((data) => exports.ResponseLoadSnapshotChunk.decode(new _m0.Reader(data)));
	    }
	    ApplySnapshotChunk(request) {
	        const data = exports.RequestApplySnapshotChunk.encode(request).finish();
	        const promise = this.rpc.request("tendermint.abci.ABCIApplication", "ApplySnapshotChunk", data);
	        return promise.then((data) => exports.ResponseApplySnapshotChunk.decode(new _m0.Reader(data)));
	    }
	}
	exports.ABCIApplicationClientImpl = ABCIApplicationClientImpl;
	
} (types$2));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SearchTxsResult = exports.TxMsgData = exports.MsgData = exports.SimulationResponse = exports.Result = exports.GasInfo = exports.Attribute = exports.StringEvent = exports.ABCIMessageLog = exports.TxResponse = exports.protobufPackage = void 0;
	/* eslint-disable */
	const any_1 = any;
	const types_1 = types$2;
	const helpers_1 = helpers;
	const _m0 = __importStar(minimal);
	exports.protobufPackage = "cosmos.base.abci.v1beta1";
	function createBaseTxResponse() {
	    return {
	        height: helpers_1.Long.ZERO,
	        txhash: "",
	        codespace: "",
	        code: 0,
	        data: "",
	        rawLog: "",
	        logs: [],
	        info: "",
	        gasWanted: helpers_1.Long.ZERO,
	        gasUsed: helpers_1.Long.ZERO,
	        tx: undefined,
	        timestamp: "",
	        events: [],
	    };
	}
	exports.TxResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.height.isZero()) {
	            writer.uint32(8).int64(message.height);
	        }
	        if (message.txhash !== "") {
	            writer.uint32(18).string(message.txhash);
	        }
	        if (message.codespace !== "") {
	            writer.uint32(26).string(message.codespace);
	        }
	        if (message.code !== 0) {
	            writer.uint32(32).uint32(message.code);
	        }
	        if (message.data !== "") {
	            writer.uint32(42).string(message.data);
	        }
	        if (message.rawLog !== "") {
	            writer.uint32(50).string(message.rawLog);
	        }
	        for (const v of message.logs) {
	            exports.ABCIMessageLog.encode(v, writer.uint32(58).fork()).ldelim();
	        }
	        if (message.info !== "") {
	            writer.uint32(66).string(message.info);
	        }
	        if (!message.gasWanted.isZero()) {
	            writer.uint32(72).int64(message.gasWanted);
	        }
	        if (!message.gasUsed.isZero()) {
	            writer.uint32(80).int64(message.gasUsed);
	        }
	        if (message.tx !== undefined) {
	            any_1.Any.encode(message.tx, writer.uint32(90).fork()).ldelim();
	        }
	        if (message.timestamp !== "") {
	            writer.uint32(98).string(message.timestamp);
	        }
	        for (const v of message.events) {
	            types_1.Event.encode(v, writer.uint32(106).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseTxResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.height = reader.int64();
	                    break;
	                case 2:
	                    message.txhash = reader.string();
	                    break;
	                case 3:
	                    message.codespace = reader.string();
	                    break;
	                case 4:
	                    message.code = reader.uint32();
	                    break;
	                case 5:
	                    message.data = reader.string();
	                    break;
	                case 6:
	                    message.rawLog = reader.string();
	                    break;
	                case 7:
	                    message.logs.push(exports.ABCIMessageLog.decode(reader, reader.uint32()));
	                    break;
	                case 8:
	                    message.info = reader.string();
	                    break;
	                case 9:
	                    message.gasWanted = reader.int64();
	                    break;
	                case 10:
	                    message.gasUsed = reader.int64();
	                    break;
	                case 11:
	                    message.tx = any_1.Any.decode(reader, reader.uint32());
	                    break;
	                case 12:
	                    message.timestamp = reader.string();
	                    break;
	                case 13:
	                    message.events.push(types_1.Event.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO,
	            txhash: (0, helpers_1.isSet)(object.txhash) ? String(object.txhash) : "",
	            codespace: (0, helpers_1.isSet)(object.codespace) ? String(object.codespace) : "",
	            code: (0, helpers_1.isSet)(object.code) ? Number(object.code) : 0,
	            data: (0, helpers_1.isSet)(object.data) ? String(object.data) : "",
	            rawLog: (0, helpers_1.isSet)(object.rawLog) ? String(object.rawLog) : "",
	            logs: Array.isArray(object?.logs) ? object.logs.map((e) => exports.ABCIMessageLog.fromJSON(e)) : [],
	            info: (0, helpers_1.isSet)(object.info) ? String(object.info) : "",
	            gasWanted: (0, helpers_1.isSet)(object.gasWanted) ? helpers_1.Long.fromValue(object.gasWanted) : helpers_1.Long.ZERO,
	            gasUsed: (0, helpers_1.isSet)(object.gasUsed) ? helpers_1.Long.fromValue(object.gasUsed) : helpers_1.Long.ZERO,
	            tx: (0, helpers_1.isSet)(object.tx) ? any_1.Any.fromJSON(object.tx) : undefined,
	            timestamp: (0, helpers_1.isSet)(object.timestamp) ? String(object.timestamp) : "",
	            events: Array.isArray(object?.events) ? object.events.map((e) => types_1.Event.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.ZERO).toString());
	        message.txhash !== undefined && (obj.txhash = message.txhash);
	        message.codespace !== undefined && (obj.codespace = message.codespace);
	        message.code !== undefined && (obj.code = Math.round(message.code));
	        message.data !== undefined && (obj.data = message.data);
	        message.rawLog !== undefined && (obj.rawLog = message.rawLog);
	        if (message.logs) {
	            obj.logs = message.logs.map((e) => (e ? exports.ABCIMessageLog.toJSON(e) : undefined));
	        }
	        else {
	            obj.logs = [];
	        }
	        message.info !== undefined && (obj.info = message.info);
	        message.gasWanted !== undefined && (obj.gasWanted = (message.gasWanted || helpers_1.Long.ZERO).toString());
	        message.gasUsed !== undefined && (obj.gasUsed = (message.gasUsed || helpers_1.Long.ZERO).toString());
	        message.tx !== undefined && (obj.tx = message.tx ? any_1.Any.toJSON(message.tx) : undefined);
	        message.timestamp !== undefined && (obj.timestamp = message.timestamp);
	        if (message.events) {
	            obj.events = message.events.map((e) => (e ? types_1.Event.toJSON(e) : undefined));
	        }
	        else {
	            obj.events = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseTxResponse();
	        message.height =
	            object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO;
	        message.txhash = object.txhash ?? "";
	        message.codespace = object.codespace ?? "";
	        message.code = object.code ?? 0;
	        message.data = object.data ?? "";
	        message.rawLog = object.rawLog ?? "";
	        message.logs = object.logs?.map((e) => exports.ABCIMessageLog.fromPartial(e)) || [];
	        message.info = object.info ?? "";
	        message.gasWanted =
	            object.gasWanted !== undefined && object.gasWanted !== null
	                ? helpers_1.Long.fromValue(object.gasWanted)
	                : helpers_1.Long.ZERO;
	        message.gasUsed =
	            object.gasUsed !== undefined && object.gasUsed !== null ? helpers_1.Long.fromValue(object.gasUsed) : helpers_1.Long.ZERO;
	        message.tx = object.tx !== undefined && object.tx !== null ? any_1.Any.fromPartial(object.tx) : undefined;
	        message.timestamp = object.timestamp ?? "";
	        message.events = object.events?.map((e) => types_1.Event.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseABCIMessageLog() {
	    return {
	        msgIndex: 0,
	        log: "",
	        events: [],
	    };
	}
	exports.ABCIMessageLog = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.msgIndex !== 0) {
	            writer.uint32(8).uint32(message.msgIndex);
	        }
	        if (message.log !== "") {
	            writer.uint32(18).string(message.log);
	        }
	        for (const v of message.events) {
	            exports.StringEvent.encode(v, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseABCIMessageLog();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.msgIndex = reader.uint32();
	                    break;
	                case 2:
	                    message.log = reader.string();
	                    break;
	                case 3:
	                    message.events.push(exports.StringEvent.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            msgIndex: (0, helpers_1.isSet)(object.msgIndex) ? Number(object.msgIndex) : 0,
	            log: (0, helpers_1.isSet)(object.log) ? String(object.log) : "",
	            events: Array.isArray(object?.events) ? object.events.map((e) => exports.StringEvent.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.msgIndex !== undefined && (obj.msgIndex = Math.round(message.msgIndex));
	        message.log !== undefined && (obj.log = message.log);
	        if (message.events) {
	            obj.events = message.events.map((e) => (e ? exports.StringEvent.toJSON(e) : undefined));
	        }
	        else {
	            obj.events = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseABCIMessageLog();
	        message.msgIndex = object.msgIndex ?? 0;
	        message.log = object.log ?? "";
	        message.events = object.events?.map((e) => exports.StringEvent.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseStringEvent() {
	    return {
	        type: "",
	        attributes: [],
	    };
	}
	exports.StringEvent = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.type !== "") {
	            writer.uint32(10).string(message.type);
	        }
	        for (const v of message.attributes) {
	            exports.Attribute.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseStringEvent();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.type = reader.string();
	                    break;
	                case 2:
	                    message.attributes.push(exports.Attribute.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            type: (0, helpers_1.isSet)(object.type) ? String(object.type) : "",
	            attributes: Array.isArray(object?.attributes)
	                ? object.attributes.map((e) => exports.Attribute.fromJSON(e))
	                : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.type !== undefined && (obj.type = message.type);
	        if (message.attributes) {
	            obj.attributes = message.attributes.map((e) => (e ? exports.Attribute.toJSON(e) : undefined));
	        }
	        else {
	            obj.attributes = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseStringEvent();
	        message.type = object.type ?? "";
	        message.attributes = object.attributes?.map((e) => exports.Attribute.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseAttribute() {
	    return {
	        key: "",
	        value: "",
	    };
	}
	exports.Attribute = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.key !== "") {
	            writer.uint32(10).string(message.key);
	        }
	        if (message.value !== "") {
	            writer.uint32(18).string(message.value);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseAttribute();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.key = reader.string();
	                    break;
	                case 2:
	                    message.value = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            key: (0, helpers_1.isSet)(object.key) ? String(object.key) : "",
	            value: (0, helpers_1.isSet)(object.value) ? String(object.value) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.key !== undefined && (obj.key = message.key);
	        message.value !== undefined && (obj.value = message.value);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseAttribute();
	        message.key = object.key ?? "";
	        message.value = object.value ?? "";
	        return message;
	    },
	};
	function createBaseGasInfo() {
	    return {
	        gasWanted: helpers_1.Long.UZERO,
	        gasUsed: helpers_1.Long.UZERO,
	    };
	}
	exports.GasInfo = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.gasWanted.isZero()) {
	            writer.uint32(8).uint64(message.gasWanted);
	        }
	        if (!message.gasUsed.isZero()) {
	            writer.uint32(16).uint64(message.gasUsed);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseGasInfo();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.gasWanted = reader.uint64();
	                    break;
	                case 2:
	                    message.gasUsed = reader.uint64();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            gasWanted: (0, helpers_1.isSet)(object.gasWanted) ? helpers_1.Long.fromValue(object.gasWanted) : helpers_1.Long.UZERO,
	            gasUsed: (0, helpers_1.isSet)(object.gasUsed) ? helpers_1.Long.fromValue(object.gasUsed) : helpers_1.Long.UZERO,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.gasWanted !== undefined && (obj.gasWanted = (message.gasWanted || helpers_1.Long.UZERO).toString());
	        message.gasUsed !== undefined && (obj.gasUsed = (message.gasUsed || helpers_1.Long.UZERO).toString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseGasInfo();
	        message.gasWanted =
	            object.gasWanted !== undefined && object.gasWanted !== null
	                ? helpers_1.Long.fromValue(object.gasWanted)
	                : helpers_1.Long.UZERO;
	        message.gasUsed =
	            object.gasUsed !== undefined && object.gasUsed !== null ? helpers_1.Long.fromValue(object.gasUsed) : helpers_1.Long.UZERO;
	        return message;
	    },
	};
	function createBaseResult() {
	    return {
	        data: new Uint8Array(),
	        log: "",
	        events: [],
	    };
	}
	exports.Result = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.data.length !== 0) {
	            writer.uint32(10).bytes(message.data);
	        }
	        if (message.log !== "") {
	            writer.uint32(18).string(message.log);
	        }
	        for (const v of message.events) {
	            types_1.Event.encode(v, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseResult();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.data = reader.bytes();
	                    break;
	                case 2:
	                    message.log = reader.string();
	                    break;
	                case 3:
	                    message.events.push(types_1.Event.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            data: (0, helpers_1.isSet)(object.data) ? (0, helpers_1.bytesFromBase64)(object.data) : new Uint8Array(),
	            log: (0, helpers_1.isSet)(object.log) ? String(object.log) : "",
	            events: Array.isArray(object?.events) ? object.events.map((e) => types_1.Event.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.data !== undefined &&
	            (obj.data = (0, helpers_1.base64FromBytes)(message.data !== undefined ? message.data : new Uint8Array()));
	        message.log !== undefined && (obj.log = message.log);
	        if (message.events) {
	            obj.events = message.events.map((e) => (e ? types_1.Event.toJSON(e) : undefined));
	        }
	        else {
	            obj.events = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseResult();
	        message.data = object.data ?? new Uint8Array();
	        message.log = object.log ?? "";
	        message.events = object.events?.map((e) => types_1.Event.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseSimulationResponse() {
	    return {
	        gasInfo: undefined,
	        result: undefined,
	    };
	}
	exports.SimulationResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.gasInfo !== undefined) {
	            exports.GasInfo.encode(message.gasInfo, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.result !== undefined) {
	            exports.Result.encode(message.result, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseSimulationResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.gasInfo = exports.GasInfo.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.result = exports.Result.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            gasInfo: (0, helpers_1.isSet)(object.gasInfo) ? exports.GasInfo.fromJSON(object.gasInfo) : undefined,
	            result: (0, helpers_1.isSet)(object.result) ? exports.Result.fromJSON(object.result) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.gasInfo !== undefined &&
	            (obj.gasInfo = message.gasInfo ? exports.GasInfo.toJSON(message.gasInfo) : undefined);
	        message.result !== undefined && (obj.result = message.result ? exports.Result.toJSON(message.result) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseSimulationResponse();
	        message.gasInfo =
	            object.gasInfo !== undefined && object.gasInfo !== null
	                ? exports.GasInfo.fromPartial(object.gasInfo)
	                : undefined;
	        message.result =
	            object.result !== undefined && object.result !== null ? exports.Result.fromPartial(object.result) : undefined;
	        return message;
	    },
	};
	function createBaseMsgData() {
	    return {
	        msgType: "",
	        data: new Uint8Array(),
	    };
	}
	exports.MsgData = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.msgType !== "") {
	            writer.uint32(10).string(message.msgType);
	        }
	        if (message.data.length !== 0) {
	            writer.uint32(18).bytes(message.data);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgData();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.msgType = reader.string();
	                    break;
	                case 2:
	                    message.data = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            msgType: (0, helpers_1.isSet)(object.msgType) ? String(object.msgType) : "",
	            data: (0, helpers_1.isSet)(object.data) ? (0, helpers_1.bytesFromBase64)(object.data) : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.msgType !== undefined && (obj.msgType = message.msgType);
	        message.data !== undefined &&
	            (obj.data = (0, helpers_1.base64FromBytes)(message.data !== undefined ? message.data : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgData();
	        message.msgType = object.msgType ?? "";
	        message.data = object.data ?? new Uint8Array();
	        return message;
	    },
	};
	function createBaseTxMsgData() {
	    return {
	        data: [],
	    };
	}
	exports.TxMsgData = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.data) {
	            exports.MsgData.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseTxMsgData();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.data.push(exports.MsgData.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            data: Array.isArray(object?.data) ? object.data.map((e) => exports.MsgData.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.data) {
	            obj.data = message.data.map((e) => (e ? exports.MsgData.toJSON(e) : undefined));
	        }
	        else {
	            obj.data = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseTxMsgData();
	        message.data = object.data?.map((e) => exports.MsgData.fromPartial(e)) || [];
	        return message;
	    },
	};
	function createBaseSearchTxsResult() {
	    return {
	        totalCount: helpers_1.Long.UZERO,
	        count: helpers_1.Long.UZERO,
	        pageNumber: helpers_1.Long.UZERO,
	        pageTotal: helpers_1.Long.UZERO,
	        limit: helpers_1.Long.UZERO,
	        txs: [],
	    };
	}
	exports.SearchTxsResult = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.totalCount.isZero()) {
	            writer.uint32(8).uint64(message.totalCount);
	        }
	        if (!message.count.isZero()) {
	            writer.uint32(16).uint64(message.count);
	        }
	        if (!message.pageNumber.isZero()) {
	            writer.uint32(24).uint64(message.pageNumber);
	        }
	        if (!message.pageTotal.isZero()) {
	            writer.uint32(32).uint64(message.pageTotal);
	        }
	        if (!message.limit.isZero()) {
	            writer.uint32(40).uint64(message.limit);
	        }
	        for (const v of message.txs) {
	            exports.TxResponse.encode(v, writer.uint32(50).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseSearchTxsResult();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.totalCount = reader.uint64();
	                    break;
	                case 2:
	                    message.count = reader.uint64();
	                    break;
	                case 3:
	                    message.pageNumber = reader.uint64();
	                    break;
	                case 4:
	                    message.pageTotal = reader.uint64();
	                    break;
	                case 5:
	                    message.limit = reader.uint64();
	                    break;
	                case 6:
	                    message.txs.push(exports.TxResponse.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            totalCount: (0, helpers_1.isSet)(object.totalCount) ? helpers_1.Long.fromValue(object.totalCount) : helpers_1.Long.UZERO,
	            count: (0, helpers_1.isSet)(object.count) ? helpers_1.Long.fromValue(object.count) : helpers_1.Long.UZERO,
	            pageNumber: (0, helpers_1.isSet)(object.pageNumber) ? helpers_1.Long.fromValue(object.pageNumber) : helpers_1.Long.UZERO,
	            pageTotal: (0, helpers_1.isSet)(object.pageTotal) ? helpers_1.Long.fromValue(object.pageTotal) : helpers_1.Long.UZERO,
	            limit: (0, helpers_1.isSet)(object.limit) ? helpers_1.Long.fromValue(object.limit) : helpers_1.Long.UZERO,
	            txs: Array.isArray(object?.txs) ? object.txs.map((e) => exports.TxResponse.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.totalCount !== undefined && (obj.totalCount = (message.totalCount || helpers_1.Long.UZERO).toString());
	        message.count !== undefined && (obj.count = (message.count || helpers_1.Long.UZERO).toString());
	        message.pageNumber !== undefined && (obj.pageNumber = (message.pageNumber || helpers_1.Long.UZERO).toString());
	        message.pageTotal !== undefined && (obj.pageTotal = (message.pageTotal || helpers_1.Long.UZERO).toString());
	        message.limit !== undefined && (obj.limit = (message.limit || helpers_1.Long.UZERO).toString());
	        if (message.txs) {
	            obj.txs = message.txs.map((e) => (e ? exports.TxResponse.toJSON(e) : undefined));
	        }
	        else {
	            obj.txs = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseSearchTxsResult();
	        message.totalCount =
	            object.totalCount !== undefined && object.totalCount !== null
	                ? helpers_1.Long.fromValue(object.totalCount)
	                : helpers_1.Long.UZERO;
	        message.count =
	            object.count !== undefined && object.count !== null ? helpers_1.Long.fromValue(object.count) : helpers_1.Long.UZERO;
	        message.pageNumber =
	            object.pageNumber !== undefined && object.pageNumber !== null
	                ? helpers_1.Long.fromValue(object.pageNumber)
	                : helpers_1.Long.UZERO;
	        message.pageTotal =
	            object.pageTotal !== undefined && object.pageTotal !== null
	                ? helpers_1.Long.fromValue(object.pageTotal)
	                : helpers_1.Long.UZERO;
	        message.limit =
	            object.limit !== undefined && object.limit !== null ? helpers_1.Long.fromValue(object.limit) : helpers_1.Long.UZERO;
	        message.txs = object.txs?.map((e) => exports.TxResponse.fromPartial(e)) || [];
	        return message;
	    },
	};
	
} (abci));

var block = {};

var evidence = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.EvidenceList = exports.LightClientAttackEvidence = exports.DuplicateVoteEvidence = exports.Evidence = exports.protobufPackage = void 0;
	/* eslint-disable */
	const types_1 = types$4;
	const timestamp_1 = timestamp;
	const validator_1 = validator$2;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "tendermint.types";
	function createBaseEvidence() {
	    return {
	        duplicateVoteEvidence: undefined,
	        lightClientAttackEvidence: undefined,
	    };
	}
	exports.Evidence = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.duplicateVoteEvidence !== undefined) {
	            exports.DuplicateVoteEvidence.encode(message.duplicateVoteEvidence, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.lightClientAttackEvidence !== undefined) {
	            exports.LightClientAttackEvidence.encode(message.lightClientAttackEvidence, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseEvidence();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.duplicateVoteEvidence = exports.DuplicateVoteEvidence.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.lightClientAttackEvidence = exports.LightClientAttackEvidence.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            duplicateVoteEvidence: (0, helpers_1.isSet)(object.duplicateVoteEvidence)
	                ? exports.DuplicateVoteEvidence.fromJSON(object.duplicateVoteEvidence)
	                : undefined,
	            lightClientAttackEvidence: (0, helpers_1.isSet)(object.lightClientAttackEvidence)
	                ? exports.LightClientAttackEvidence.fromJSON(object.lightClientAttackEvidence)
	                : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.duplicateVoteEvidence !== undefined &&
	            (obj.duplicateVoteEvidence = message.duplicateVoteEvidence
	                ? exports.DuplicateVoteEvidence.toJSON(message.duplicateVoteEvidence)
	                : undefined);
	        message.lightClientAttackEvidence !== undefined &&
	            (obj.lightClientAttackEvidence = message.lightClientAttackEvidence
	                ? exports.LightClientAttackEvidence.toJSON(message.lightClientAttackEvidence)
	                : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseEvidence();
	        message.duplicateVoteEvidence =
	            object.duplicateVoteEvidence !== undefined && object.duplicateVoteEvidence !== null
	                ? exports.DuplicateVoteEvidence.fromPartial(object.duplicateVoteEvidence)
	                : undefined;
	        message.lightClientAttackEvidence =
	            object.lightClientAttackEvidence !== undefined && object.lightClientAttackEvidence !== null
	                ? exports.LightClientAttackEvidence.fromPartial(object.lightClientAttackEvidence)
	                : undefined;
	        return message;
	    },
	};
	function createBaseDuplicateVoteEvidence() {
	    return {
	        voteA: undefined,
	        voteB: undefined,
	        totalVotingPower: helpers_1.Long.ZERO,
	        validatorPower: helpers_1.Long.ZERO,
	        timestamp: undefined,
	    };
	}
	exports.DuplicateVoteEvidence = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.voteA !== undefined) {
	            types_1.Vote.encode(message.voteA, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.voteB !== undefined) {
	            types_1.Vote.encode(message.voteB, writer.uint32(18).fork()).ldelim();
	        }
	        if (!message.totalVotingPower.isZero()) {
	            writer.uint32(24).int64(message.totalVotingPower);
	        }
	        if (!message.validatorPower.isZero()) {
	            writer.uint32(32).int64(message.validatorPower);
	        }
	        if (message.timestamp !== undefined) {
	            timestamp_1.Timestamp.encode(message.timestamp, writer.uint32(42).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseDuplicateVoteEvidence();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.voteA = types_1.Vote.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.voteB = types_1.Vote.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.totalVotingPower = reader.int64();
	                    break;
	                case 4:
	                    message.validatorPower = reader.int64();
	                    break;
	                case 5:
	                    message.timestamp = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            voteA: (0, helpers_1.isSet)(object.voteA) ? types_1.Vote.fromJSON(object.voteA) : undefined,
	            voteB: (0, helpers_1.isSet)(object.voteB) ? types_1.Vote.fromJSON(object.voteB) : undefined,
	            totalVotingPower: (0, helpers_1.isSet)(object.totalVotingPower) ? helpers_1.Long.fromValue(object.totalVotingPower) : helpers_1.Long.ZERO,
	            validatorPower: (0, helpers_1.isSet)(object.validatorPower) ? helpers_1.Long.fromValue(object.validatorPower) : helpers_1.Long.ZERO,
	            timestamp: (0, helpers_1.isSet)(object.timestamp) ? (0, helpers_1.fromJsonTimestamp)(object.timestamp) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.voteA !== undefined && (obj.voteA = message.voteA ? types_1.Vote.toJSON(message.voteA) : undefined);
	        message.voteB !== undefined && (obj.voteB = message.voteB ? types_1.Vote.toJSON(message.voteB) : undefined);
	        message.totalVotingPower !== undefined &&
	            (obj.totalVotingPower = (message.totalVotingPower || helpers_1.Long.ZERO).toString());
	        message.validatorPower !== undefined &&
	            (obj.validatorPower = (message.validatorPower || helpers_1.Long.ZERO).toString());
	        message.timestamp !== undefined && (obj.timestamp = (0, helpers_1.fromTimestamp)(message.timestamp).toISOString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseDuplicateVoteEvidence();
	        message.voteA =
	            object.voteA !== undefined && object.voteA !== null ? types_1.Vote.fromPartial(object.voteA) : undefined;
	        message.voteB =
	            object.voteB !== undefined && object.voteB !== null ? types_1.Vote.fromPartial(object.voteB) : undefined;
	        message.totalVotingPower =
	            object.totalVotingPower !== undefined && object.totalVotingPower !== null
	                ? helpers_1.Long.fromValue(object.totalVotingPower)
	                : helpers_1.Long.ZERO;
	        message.validatorPower =
	            object.validatorPower !== undefined && object.validatorPower !== null
	                ? helpers_1.Long.fromValue(object.validatorPower)
	                : helpers_1.Long.ZERO;
	        message.timestamp =
	            object.timestamp !== undefined && object.timestamp !== null
	                ? timestamp_1.Timestamp.fromPartial(object.timestamp)
	                : undefined;
	        return message;
	    },
	};
	function createBaseLightClientAttackEvidence() {
	    return {
	        conflictingBlock: undefined,
	        commonHeight: helpers_1.Long.ZERO,
	        byzantineValidators: [],
	        totalVotingPower: helpers_1.Long.ZERO,
	        timestamp: undefined,
	    };
	}
	exports.LightClientAttackEvidence = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.conflictingBlock !== undefined) {
	            types_1.LightBlock.encode(message.conflictingBlock, writer.uint32(10).fork()).ldelim();
	        }
	        if (!message.commonHeight.isZero()) {
	            writer.uint32(16).int64(message.commonHeight);
	        }
	        for (const v of message.byzantineValidators) {
	            validator_1.Validator.encode(v, writer.uint32(26).fork()).ldelim();
	        }
	        if (!message.totalVotingPower.isZero()) {
	            writer.uint32(32).int64(message.totalVotingPower);
	        }
	        if (message.timestamp !== undefined) {
	            timestamp_1.Timestamp.encode(message.timestamp, writer.uint32(42).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseLightClientAttackEvidence();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.conflictingBlock = types_1.LightBlock.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.commonHeight = reader.int64();
	                    break;
	                case 3:
	                    message.byzantineValidators.push(validator_1.Validator.decode(reader, reader.uint32()));
	                    break;
	                case 4:
	                    message.totalVotingPower = reader.int64();
	                    break;
	                case 5:
	                    message.timestamp = timestamp_1.Timestamp.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            conflictingBlock: (0, helpers_1.isSet)(object.conflictingBlock)
	                ? types_1.LightBlock.fromJSON(object.conflictingBlock)
	                : undefined,
	            commonHeight: (0, helpers_1.isSet)(object.commonHeight) ? helpers_1.Long.fromValue(object.commonHeight) : helpers_1.Long.ZERO,
	            byzantineValidators: Array.isArray(object?.byzantineValidators)
	                ? object.byzantineValidators.map((e) => validator_1.Validator.fromJSON(e))
	                : [],
	            totalVotingPower: (0, helpers_1.isSet)(object.totalVotingPower) ? helpers_1.Long.fromValue(object.totalVotingPower) : helpers_1.Long.ZERO,
	            timestamp: (0, helpers_1.isSet)(object.timestamp) ? (0, helpers_1.fromJsonTimestamp)(object.timestamp) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.conflictingBlock !== undefined &&
	            (obj.conflictingBlock = message.conflictingBlock
	                ? types_1.LightBlock.toJSON(message.conflictingBlock)
	                : undefined);
	        message.commonHeight !== undefined && (obj.commonHeight = (message.commonHeight || helpers_1.Long.ZERO).toString());
	        if (message.byzantineValidators) {
	            obj.byzantineValidators = message.byzantineValidators.map((e) => (e ? validator_1.Validator.toJSON(e) : undefined));
	        }
	        else {
	            obj.byzantineValidators = [];
	        }
	        message.totalVotingPower !== undefined &&
	            (obj.totalVotingPower = (message.totalVotingPower || helpers_1.Long.ZERO).toString());
	        message.timestamp !== undefined && (obj.timestamp = (0, helpers_1.fromTimestamp)(message.timestamp).toISOString());
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseLightClientAttackEvidence();
	        message.conflictingBlock =
	            object.conflictingBlock !== undefined && object.conflictingBlock !== null
	                ? types_1.LightBlock.fromPartial(object.conflictingBlock)
	                : undefined;
	        message.commonHeight =
	            object.commonHeight !== undefined && object.commonHeight !== null
	                ? helpers_1.Long.fromValue(object.commonHeight)
	                : helpers_1.Long.ZERO;
	        message.byzantineValidators = object.byzantineValidators?.map((e) => validator_1.Validator.fromPartial(e)) || [];
	        message.totalVotingPower =
	            object.totalVotingPower !== undefined && object.totalVotingPower !== null
	                ? helpers_1.Long.fromValue(object.totalVotingPower)
	                : helpers_1.Long.ZERO;
	        message.timestamp =
	            object.timestamp !== undefined && object.timestamp !== null
	                ? timestamp_1.Timestamp.fromPartial(object.timestamp)
	                : undefined;
	        return message;
	    },
	};
	function createBaseEvidenceList() {
	    return {
	        evidence: [],
	    };
	}
	exports.EvidenceList = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.evidence) {
	            exports.Evidence.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseEvidenceList();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.evidence.push(exports.Evidence.decode(reader, reader.uint32()));
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            evidence: Array.isArray(object?.evidence) ? object.evidence.map((e) => exports.Evidence.fromJSON(e)) : [],
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.evidence) {
	            obj.evidence = message.evidence.map((e) => (e ? exports.Evidence.toJSON(e) : undefined));
	        }
	        else {
	            obj.evidence = [];
	        }
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseEvidenceList();
	        message.evidence = object.evidence?.map((e) => exports.Evidence.fromPartial(e)) || [];
	        return message;
	    },
	};
	
} (evidence));

var __createBinding$4 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$4 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$4 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$4(result, mod, k);
    __setModuleDefault$4(result, mod);
    return result;
};
Object.defineProperty(block, "__esModule", { value: true });
block.Block = block.protobufPackage = void 0;
/* eslint-disable */
const types_1$3 = types$4;
const evidence_1 = evidence;
const _m0 = __importStar$4(minimal);
const helpers_1 = helpers;
block.protobufPackage = "tendermint.types";
function createBaseBlock() {
    return {
        header: undefined,
        data: undefined,
        evidence: undefined,
        lastCommit: undefined,
    };
}
block.Block = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.header !== undefined) {
            types_1$3.Header.encode(message.header, writer.uint32(10).fork()).ldelim();
        }
        if (message.data !== undefined) {
            types_1$3.Data.encode(message.data, writer.uint32(18).fork()).ldelim();
        }
        if (message.evidence !== undefined) {
            evidence_1.EvidenceList.encode(message.evidence, writer.uint32(26).fork()).ldelim();
        }
        if (message.lastCommit !== undefined) {
            types_1$3.Commit.encode(message.lastCommit, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlock();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.header = types_1$3.Header.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.data = types_1$3.Data.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.evidence = evidence_1.EvidenceList.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.lastCommit = types_1$3.Commit.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            header: (0, helpers_1.isSet)(object.header) ? types_1$3.Header.fromJSON(object.header) : undefined,
            data: (0, helpers_1.isSet)(object.data) ? types_1$3.Data.fromJSON(object.data) : undefined,
            evidence: (0, helpers_1.isSet)(object.evidence) ? evidence_1.EvidenceList.fromJSON(object.evidence) : undefined,
            lastCommit: (0, helpers_1.isSet)(object.lastCommit) ? types_1$3.Commit.fromJSON(object.lastCommit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.header !== undefined && (obj.header = message.header ? types_1$3.Header.toJSON(message.header) : undefined);
        message.data !== undefined && (obj.data = message.data ? types_1$3.Data.toJSON(message.data) : undefined);
        message.evidence !== undefined &&
            (obj.evidence = message.evidence ? evidence_1.EvidenceList.toJSON(message.evidence) : undefined);
        message.lastCommit !== undefined &&
            (obj.lastCommit = message.lastCommit ? types_1$3.Commit.toJSON(message.lastCommit) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseBlock();
        message.header =
            object.header !== undefined && object.header !== null ? types_1$3.Header.fromPartial(object.header) : undefined;
        message.data =
            object.data !== undefined && object.data !== null ? types_1$3.Data.fromPartial(object.data) : undefined;
        message.evidence =
            object.evidence !== undefined && object.evidence !== null
                ? evidence_1.EvidenceList.fromPartial(object.evidence)
                : undefined;
        message.lastCommit =
            object.lastCommit !== undefined && object.lastCommit !== null
                ? types_1$3.Commit.fromPartial(object.lastCommit)
                : undefined;
        return message;
    },
};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ServiceClientImpl = exports.GetBlockWithTxsResponse = exports.GetBlockWithTxsRequest = exports.GetTxResponse = exports.GetTxRequest = exports.SimulateResponse = exports.SimulateRequest = exports.BroadcastTxResponse = exports.BroadcastTxRequest = exports.GetTxsEventResponse = exports.GetTxsEventRequest = exports.broadcastModeToJSON = exports.broadcastModeFromJSON = exports.BroadcastMode = exports.orderByToJSON = exports.orderByFromJSON = exports.OrderBy = exports.protobufPackage = void 0;
	/* eslint-disable */
	const tx_1 = tx$e;
	const pagination_1 = pagination;
	const abci_1 = abci;
	const types_1 = types$4;
	const block_1 = block;
	const _m0 = __importStar(minimal);
	const helpers_1 = helpers;
	exports.protobufPackage = "cosmos.tx.v1beta1";
	/** OrderBy defines the sorting order */
	var OrderBy;
	(function (OrderBy) {
	    /** ORDER_BY_UNSPECIFIED - ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case. */
	    OrderBy[OrderBy["ORDER_BY_UNSPECIFIED"] = 0] = "ORDER_BY_UNSPECIFIED";
	    /** ORDER_BY_ASC - ORDER_BY_ASC defines ascending order */
	    OrderBy[OrderBy["ORDER_BY_ASC"] = 1] = "ORDER_BY_ASC";
	    /** ORDER_BY_DESC - ORDER_BY_DESC defines descending order */
	    OrderBy[OrderBy["ORDER_BY_DESC"] = 2] = "ORDER_BY_DESC";
	    OrderBy[OrderBy["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
	})(OrderBy = exports.OrderBy || (exports.OrderBy = {}));
	function orderByFromJSON(object) {
	    switch (object) {
	        case 0:
	        case "ORDER_BY_UNSPECIFIED":
	            return OrderBy.ORDER_BY_UNSPECIFIED;
	        case 1:
	        case "ORDER_BY_ASC":
	            return OrderBy.ORDER_BY_ASC;
	        case 2:
	        case "ORDER_BY_DESC":
	            return OrderBy.ORDER_BY_DESC;
	        case -1:
	        case "UNRECOGNIZED":
	        default:
	            return OrderBy.UNRECOGNIZED;
	    }
	}
	exports.orderByFromJSON = orderByFromJSON;
	function orderByToJSON(object) {
	    switch (object) {
	        case OrderBy.ORDER_BY_UNSPECIFIED:
	            return "ORDER_BY_UNSPECIFIED";
	        case OrderBy.ORDER_BY_ASC:
	            return "ORDER_BY_ASC";
	        case OrderBy.ORDER_BY_DESC:
	            return "ORDER_BY_DESC";
	        case OrderBy.UNRECOGNIZED:
	        default:
	            return "UNRECOGNIZED";
	    }
	}
	exports.orderByToJSON = orderByToJSON;
	/** BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method. */
	var BroadcastMode;
	(function (BroadcastMode) {
	    /** BROADCAST_MODE_UNSPECIFIED - zero-value for mode ordering */
	    BroadcastMode[BroadcastMode["BROADCAST_MODE_UNSPECIFIED"] = 0] = "BROADCAST_MODE_UNSPECIFIED";
	    /**
	     * BROADCAST_MODE_BLOCK - BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
	     * the tx to be committed in a block.
	     */
	    BroadcastMode[BroadcastMode["BROADCAST_MODE_BLOCK"] = 1] = "BROADCAST_MODE_BLOCK";
	    /**
	     * BROADCAST_MODE_SYNC - BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
	     * a CheckTx execution response only.
	     */
	    BroadcastMode[BroadcastMode["BROADCAST_MODE_SYNC"] = 2] = "BROADCAST_MODE_SYNC";
	    /**
	     * BROADCAST_MODE_ASYNC - BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
	     * immediately.
	     */
	    BroadcastMode[BroadcastMode["BROADCAST_MODE_ASYNC"] = 3] = "BROADCAST_MODE_ASYNC";
	    BroadcastMode[BroadcastMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
	})(BroadcastMode = exports.BroadcastMode || (exports.BroadcastMode = {}));
	function broadcastModeFromJSON(object) {
	    switch (object) {
	        case 0:
	        case "BROADCAST_MODE_UNSPECIFIED":
	            return BroadcastMode.BROADCAST_MODE_UNSPECIFIED;
	        case 1:
	        case "BROADCAST_MODE_BLOCK":
	            return BroadcastMode.BROADCAST_MODE_BLOCK;
	        case 2:
	        case "BROADCAST_MODE_SYNC":
	            return BroadcastMode.BROADCAST_MODE_SYNC;
	        case 3:
	        case "BROADCAST_MODE_ASYNC":
	            return BroadcastMode.BROADCAST_MODE_ASYNC;
	        case -1:
	        case "UNRECOGNIZED":
	        default:
	            return BroadcastMode.UNRECOGNIZED;
	    }
	}
	exports.broadcastModeFromJSON = broadcastModeFromJSON;
	function broadcastModeToJSON(object) {
	    switch (object) {
	        case BroadcastMode.BROADCAST_MODE_UNSPECIFIED:
	            return "BROADCAST_MODE_UNSPECIFIED";
	        case BroadcastMode.BROADCAST_MODE_BLOCK:
	            return "BROADCAST_MODE_BLOCK";
	        case BroadcastMode.BROADCAST_MODE_SYNC:
	            return "BROADCAST_MODE_SYNC";
	        case BroadcastMode.BROADCAST_MODE_ASYNC:
	            return "BROADCAST_MODE_ASYNC";
	        case BroadcastMode.UNRECOGNIZED:
	        default:
	            return "UNRECOGNIZED";
	    }
	}
	exports.broadcastModeToJSON = broadcastModeToJSON;
	function createBaseGetTxsEventRequest() {
	    return {
	        events: [],
	        pagination: undefined,
	        orderBy: 0,
	    };
	}
	exports.GetTxsEventRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.events) {
	            writer.uint32(10).string(v);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.orderBy !== 0) {
	            writer.uint32(24).int32(message.orderBy);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseGetTxsEventRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.events.push(reader.string());
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.orderBy = reader.int32();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            events: Array.isArray(object?.events) ? object.events.map((e) => String(e)) : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	            orderBy: (0, helpers_1.isSet)(object.orderBy) ? orderByFromJSON(object.orderBy) : 0,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.events) {
	            obj.events = message.events.map((e) => e);
	        }
	        else {
	            obj.events = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        message.orderBy !== undefined && (obj.orderBy = orderByToJSON(message.orderBy));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseGetTxsEventRequest();
	        message.events = object.events?.map((e) => e) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        message.orderBy = object.orderBy ?? 0;
	        return message;
	    },
	};
	function createBaseGetTxsEventResponse() {
	    return {
	        txs: [],
	        txResponses: [],
	        pagination: undefined,
	    };
	}
	exports.GetTxsEventResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.txs) {
	            tx_1.Tx.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        for (const v of message.txResponses) {
	            abci_1.TxResponse.encode(v, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(26).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseGetTxsEventResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.txs.push(tx_1.Tx.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.txResponses.push(abci_1.TxResponse.decode(reader, reader.uint32()));
	                    break;
	                case 3:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            txs: Array.isArray(object?.txs) ? object.txs.map((e) => tx_1.Tx.fromJSON(e)) : [],
	            txResponses: Array.isArray(object?.txResponses)
	                ? object.txResponses.map((e) => abci_1.TxResponse.fromJSON(e))
	                : [],
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.txs) {
	            obj.txs = message.txs.map((e) => (e ? tx_1.Tx.toJSON(e) : undefined));
	        }
	        else {
	            obj.txs = [];
	        }
	        if (message.txResponses) {
	            obj.txResponses = message.txResponses.map((e) => (e ? abci_1.TxResponse.toJSON(e) : undefined));
	        }
	        else {
	            obj.txResponses = [];
	        }
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseGetTxsEventResponse();
	        message.txs = object.txs?.map((e) => tx_1.Tx.fromPartial(e)) || [];
	        message.txResponses = object.txResponses?.map((e) => abci_1.TxResponse.fromPartial(e)) || [];
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseBroadcastTxRequest() {
	    return {
	        txBytes: new Uint8Array(),
	        mode: 0,
	    };
	}
	exports.BroadcastTxRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.txBytes.length !== 0) {
	            writer.uint32(10).bytes(message.txBytes);
	        }
	        if (message.mode !== 0) {
	            writer.uint32(16).int32(message.mode);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseBroadcastTxRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.txBytes = reader.bytes();
	                    break;
	                case 2:
	                    message.mode = reader.int32();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            txBytes: (0, helpers_1.isSet)(object.txBytes) ? (0, helpers_1.bytesFromBase64)(object.txBytes) : new Uint8Array(),
	            mode: (0, helpers_1.isSet)(object.mode) ? broadcastModeFromJSON(object.mode) : 0,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.txBytes !== undefined &&
	            (obj.txBytes = (0, helpers_1.base64FromBytes)(message.txBytes !== undefined ? message.txBytes : new Uint8Array()));
	        message.mode !== undefined && (obj.mode = broadcastModeToJSON(message.mode));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseBroadcastTxRequest();
	        message.txBytes = object.txBytes ?? new Uint8Array();
	        message.mode = object.mode ?? 0;
	        return message;
	    },
	};
	function createBaseBroadcastTxResponse() {
	    return {
	        txResponse: undefined,
	    };
	}
	exports.BroadcastTxResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.txResponse !== undefined) {
	            abci_1.TxResponse.encode(message.txResponse, writer.uint32(10).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseBroadcastTxResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.txResponse = abci_1.TxResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            txResponse: (0, helpers_1.isSet)(object.txResponse) ? abci_1.TxResponse.fromJSON(object.txResponse) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.txResponse !== undefined &&
	            (obj.txResponse = message.txResponse ? abci_1.TxResponse.toJSON(message.txResponse) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseBroadcastTxResponse();
	        message.txResponse =
	            object.txResponse !== undefined && object.txResponse !== null
	                ? abci_1.TxResponse.fromPartial(object.txResponse)
	                : undefined;
	        return message;
	    },
	};
	function createBaseSimulateRequest() {
	    return {
	        tx: undefined,
	        txBytes: new Uint8Array(),
	    };
	}
	exports.SimulateRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.tx !== undefined) {
	            tx_1.Tx.encode(message.tx, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.txBytes.length !== 0) {
	            writer.uint32(18).bytes(message.txBytes);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseSimulateRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.tx = tx_1.Tx.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.txBytes = reader.bytes();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            tx: (0, helpers_1.isSet)(object.tx) ? tx_1.Tx.fromJSON(object.tx) : undefined,
	            txBytes: (0, helpers_1.isSet)(object.txBytes) ? (0, helpers_1.bytesFromBase64)(object.txBytes) : new Uint8Array(),
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.tx !== undefined && (obj.tx = message.tx ? tx_1.Tx.toJSON(message.tx) : undefined);
	        message.txBytes !== undefined &&
	            (obj.txBytes = (0, helpers_1.base64FromBytes)(message.txBytes !== undefined ? message.txBytes : new Uint8Array()));
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseSimulateRequest();
	        message.tx = object.tx !== undefined && object.tx !== null ? tx_1.Tx.fromPartial(object.tx) : undefined;
	        message.txBytes = object.txBytes ?? new Uint8Array();
	        return message;
	    },
	};
	function createBaseSimulateResponse() {
	    return {
	        gasInfo: undefined,
	        result: undefined,
	    };
	}
	exports.SimulateResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.gasInfo !== undefined) {
	            abci_1.GasInfo.encode(message.gasInfo, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.result !== undefined) {
	            abci_1.Result.encode(message.result, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseSimulateResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.gasInfo = abci_1.GasInfo.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.result = abci_1.Result.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            gasInfo: (0, helpers_1.isSet)(object.gasInfo) ? abci_1.GasInfo.fromJSON(object.gasInfo) : undefined,
	            result: (0, helpers_1.isSet)(object.result) ? abci_1.Result.fromJSON(object.result) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.gasInfo !== undefined &&
	            (obj.gasInfo = message.gasInfo ? abci_1.GasInfo.toJSON(message.gasInfo) : undefined);
	        message.result !== undefined && (obj.result = message.result ? abci_1.Result.toJSON(message.result) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseSimulateResponse();
	        message.gasInfo =
	            object.gasInfo !== undefined && object.gasInfo !== null
	                ? abci_1.GasInfo.fromPartial(object.gasInfo)
	                : undefined;
	        message.result =
	            object.result !== undefined && object.result !== null ? abci_1.Result.fromPartial(object.result) : undefined;
	        return message;
	    },
	};
	function createBaseGetTxRequest() {
	    return {
	        hash: "",
	    };
	}
	exports.GetTxRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.hash !== "") {
	            writer.uint32(10).string(message.hash);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseGetTxRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.hash = reader.string();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            hash: (0, helpers_1.isSet)(object.hash) ? String(object.hash) : "",
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.hash !== undefined && (obj.hash = message.hash);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseGetTxRequest();
	        message.hash = object.hash ?? "";
	        return message;
	    },
	};
	function createBaseGetTxResponse() {
	    return {
	        tx: undefined,
	        txResponse: undefined,
	    };
	}
	exports.GetTxResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.tx !== undefined) {
	            tx_1.Tx.encode(message.tx, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.txResponse !== undefined) {
	            abci_1.TxResponse.encode(message.txResponse, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseGetTxResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.tx = tx_1.Tx.decode(reader, reader.uint32());
	                    break;
	                case 2:
	                    message.txResponse = abci_1.TxResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            tx: (0, helpers_1.isSet)(object.tx) ? tx_1.Tx.fromJSON(object.tx) : undefined,
	            txResponse: (0, helpers_1.isSet)(object.txResponse) ? abci_1.TxResponse.fromJSON(object.txResponse) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.tx !== undefined && (obj.tx = message.tx ? tx_1.Tx.toJSON(message.tx) : undefined);
	        message.txResponse !== undefined &&
	            (obj.txResponse = message.txResponse ? abci_1.TxResponse.toJSON(message.txResponse) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseGetTxResponse();
	        message.tx = object.tx !== undefined && object.tx !== null ? tx_1.Tx.fromPartial(object.tx) : undefined;
	        message.txResponse =
	            object.txResponse !== undefined && object.txResponse !== null
	                ? abci_1.TxResponse.fromPartial(object.txResponse)
	                : undefined;
	        return message;
	    },
	};
	function createBaseGetBlockWithTxsRequest() {
	    return {
	        height: helpers_1.Long.ZERO,
	        pagination: undefined,
	    };
	}
	exports.GetBlockWithTxsRequest = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (!message.height.isZero()) {
	            writer.uint32(8).int64(message.height);
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseGetBlockWithTxsRequest();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.height = reader.int64();
	                    break;
	                case 2:
	                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO,
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.ZERO).toString());
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseGetBlockWithTxsRequest();
	        message.height =
	            object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO;
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageRequest.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	function createBaseGetBlockWithTxsResponse() {
	    return {
	        txs: [],
	        blockId: undefined,
	        block: undefined,
	        pagination: undefined,
	    };
	}
	exports.GetBlockWithTxsResponse = {
	    encode(message, writer = _m0.Writer.create()) {
	        for (const v of message.txs) {
	            tx_1.Tx.encode(v, writer.uint32(10).fork()).ldelim();
	        }
	        if (message.blockId !== undefined) {
	            types_1.BlockID.encode(message.blockId, writer.uint32(18).fork()).ldelim();
	        }
	        if (message.block !== undefined) {
	            block_1.Block.encode(message.block, writer.uint32(26).fork()).ldelim();
	        }
	        if (message.pagination !== undefined) {
	            pagination_1.PageResponse.encode(message.pagination, writer.uint32(34).fork()).ldelim();
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseGetBlockWithTxsResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.txs.push(tx_1.Tx.decode(reader, reader.uint32()));
	                    break;
	                case 2:
	                    message.blockId = types_1.BlockID.decode(reader, reader.uint32());
	                    break;
	                case 3:
	                    message.block = block_1.Block.decode(reader, reader.uint32());
	                    break;
	                case 4:
	                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            txs: Array.isArray(object?.txs) ? object.txs.map((e) => tx_1.Tx.fromJSON(e)) : [],
	            blockId: (0, helpers_1.isSet)(object.blockId) ? types_1.BlockID.fromJSON(object.blockId) : undefined,
	            block: (0, helpers_1.isSet)(object.block) ? block_1.Block.fromJSON(object.block) : undefined,
	            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        if (message.txs) {
	            obj.txs = message.txs.map((e) => (e ? tx_1.Tx.toJSON(e) : undefined));
	        }
	        else {
	            obj.txs = [];
	        }
	        message.blockId !== undefined &&
	            (obj.blockId = message.blockId ? types_1.BlockID.toJSON(message.blockId) : undefined);
	        message.block !== undefined && (obj.block = message.block ? block_1.Block.toJSON(message.block) : undefined);
	        message.pagination !== undefined &&
	            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseGetBlockWithTxsResponse();
	        message.txs = object.txs?.map((e) => tx_1.Tx.fromPartial(e)) || [];
	        message.blockId =
	            object.blockId !== undefined && object.blockId !== null
	                ? types_1.BlockID.fromPartial(object.blockId)
	                : undefined;
	        message.block =
	            object.block !== undefined && object.block !== null ? block_1.Block.fromPartial(object.block) : undefined;
	        message.pagination =
	            object.pagination !== undefined && object.pagination !== null
	                ? pagination_1.PageResponse.fromPartial(object.pagination)
	                : undefined;
	        return message;
	    },
	};
	class ServiceClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.Simulate = this.Simulate.bind(this);
	        this.GetTx = this.GetTx.bind(this);
	        this.BroadcastTx = this.BroadcastTx.bind(this);
	        this.GetTxsEvent = this.GetTxsEvent.bind(this);
	        this.GetBlockWithTxs = this.GetBlockWithTxs.bind(this);
	    }
	    Simulate(request) {
	        const data = exports.SimulateRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "Simulate", data);
	        return promise.then((data) => exports.SimulateResponse.decode(new _m0.Reader(data)));
	    }
	    GetTx(request) {
	        const data = exports.GetTxRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "GetTx", data);
	        return promise.then((data) => exports.GetTxResponse.decode(new _m0.Reader(data)));
	    }
	    BroadcastTx(request) {
	        const data = exports.BroadcastTxRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "BroadcastTx", data);
	        return promise.then((data) => exports.BroadcastTxResponse.decode(new _m0.Reader(data)));
	    }
	    GetTxsEvent(request) {
	        const data = exports.GetTxsEventRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "GetTxsEvent", data);
	        return promise.then((data) => exports.GetTxsEventResponse.decode(new _m0.Reader(data)));
	    }
	    GetBlockWithTxs(request) {
	        const data = exports.GetBlockWithTxsRequest.encode(request).finish();
	        const promise = this.rpc.request("cosmos.tx.v1beta1.Service", "GetBlockWithTxs", data);
	        return promise.then((data) => exports.GetBlockWithTxsResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.ServiceClientImpl = ServiceClientImpl;
	
} (service));

var __importDefault$4 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(queries, "__esModule", { value: true });
queries.setupTxExtension = void 0;
const proto_signing_1$1 = build$9;
const signing_1$1 = signing$1;
const service_1 = service;
const tx_1$2 = tx$e;
const long_1$2 = __importDefault$4(long);
const queryclient_1$1 = queryclient$1;
function setupTxExtension(base) {
    // Use this service to get easy typed access to query methods
    // This cannot be used for proof verification
    const rpc = (0, queryclient_1$1.createProtobufRpcClient)(base);
    const queryService = new service_1.ServiceClientImpl(rpc);
    return {
        tx: {
            getTx: async (txId) => {
                const request = {
                    hash: txId,
                };
                const response = await queryService.GetTx(request);
                return response;
            },
            simulate: async (messages, memo, signer, sequence) => {
                const tx = tx_1$2.Tx.fromPartial({
                    authInfo: tx_1$2.AuthInfo.fromPartial({
                        fee: tx_1$2.Fee.fromPartial({}),
                        signerInfos: [
                            {
                                publicKey: (0, proto_signing_1$1.encodePubkey)(signer),
                                sequence: long_1$2.default.fromNumber(sequence, true),
                                modeInfo: { single: { mode: signing_1$1.SignMode.SIGN_MODE_UNSPECIFIED } },
                            },
                        ],
                    }),
                    body: tx_1$2.TxBody.fromPartial({
                        messages: Array.from(messages),
                        memo: memo,
                    }),
                    signatures: [new Uint8Array()],
                });
                const request = service_1.SimulateRequest.fromPartial({
                    txBytes: tx_1$2.Tx.encode(tx).finish(),
                });
                const response = await queryService.Simulate(request);
                return response;
            },
        },
    };
}
queries.setupTxExtension = setupTxExtension;

var aminomessages = {};

var __importDefault$3 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(aminomessages, "__esModule", { value: true });
aminomessages.createVestingAminoConverters = aminomessages.isAminoMsgCreateVestingAccount = void 0;
const long_1$1 = __importDefault$3(long);
function isAminoMsgCreateVestingAccount(msg) {
    return msg.type === "cosmos-sdk/MsgCreateVestingAccount";
}
aminomessages.isAminoMsgCreateVestingAccount = isAminoMsgCreateVestingAccount;
function createVestingAminoConverters() {
    return {
        "/cosmos.vesting.v1beta1.MsgCreateVestingAccount": {
            aminoType: "cosmos-sdk/MsgCreateVestingAccount",
            toAmino: ({ fromAddress, toAddress, amount, endTime, delayed, }) => ({
                from_address: fromAddress,
                to_address: toAddress,
                amount: [...amount],
                end_time: endTime.toString(),
                delayed: delayed,
            }),
            fromAmino: ({ from_address, to_address, amount, end_time, delayed, }) => ({
                fromAddress: from_address,
                toAddress: to_address,
                amount: [...amount],
                endTime: long_1$1.default.fromString(end_time),
                delayed: delayed,
            }),
        },
    };
}
aminomessages.createVestingAminoConverters = createVestingAminoConverters;

var messages = {};

var tx$3 = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.MsgClientImpl = exports.MsgCreateVestingAccountResponse = exports.MsgCreateVestingAccount = exports.protobufPackage = void 0;
	/* eslint-disable */
	const coin_1 = coin$1;
	const helpers_1 = helpers;
	const _m0 = __importStar(minimal);
	exports.protobufPackage = "cosmos.vesting.v1beta1";
	function createBaseMsgCreateVestingAccount() {
	    return {
	        fromAddress: "",
	        toAddress: "",
	        amount: [],
	        endTime: helpers_1.Long.ZERO,
	        delayed: false,
	    };
	}
	exports.MsgCreateVestingAccount = {
	    encode(message, writer = _m0.Writer.create()) {
	        if (message.fromAddress !== "") {
	            writer.uint32(10).string(message.fromAddress);
	        }
	        if (message.toAddress !== "") {
	            writer.uint32(18).string(message.toAddress);
	        }
	        for (const v of message.amount) {
	            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
	        }
	        if (!message.endTime.isZero()) {
	            writer.uint32(32).int64(message.endTime);
	        }
	        if (message.delayed === true) {
	            writer.uint32(40).bool(message.delayed);
	        }
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgCreateVestingAccount();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                case 1:
	                    message.fromAddress = reader.string();
	                    break;
	                case 2:
	                    message.toAddress = reader.string();
	                    break;
	                case 3:
	                    message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));
	                    break;
	                case 4:
	                    message.endTime = reader.int64();
	                    break;
	                case 5:
	                    message.delayed = reader.bool();
	                    break;
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(object) {
	        return {
	            fromAddress: (0, helpers_1.isSet)(object.fromAddress) ? String(object.fromAddress) : "",
	            toAddress: (0, helpers_1.isSet)(object.toAddress) ? String(object.toAddress) : "",
	            amount: Array.isArray(object?.amount) ? object.amount.map((e) => coin_1.Coin.fromJSON(e)) : [],
	            endTime: (0, helpers_1.isSet)(object.endTime) ? helpers_1.Long.fromValue(object.endTime) : helpers_1.Long.ZERO,
	            delayed: (0, helpers_1.isSet)(object.delayed) ? Boolean(object.delayed) : false,
	        };
	    },
	    toJSON(message) {
	        const obj = {};
	        message.fromAddress !== undefined && (obj.fromAddress = message.fromAddress);
	        message.toAddress !== undefined && (obj.toAddress = message.toAddress);
	        if (message.amount) {
	            obj.amount = message.amount.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
	        }
	        else {
	            obj.amount = [];
	        }
	        message.endTime !== undefined && (obj.endTime = (message.endTime || helpers_1.Long.ZERO).toString());
	        message.delayed !== undefined && (obj.delayed = message.delayed);
	        return obj;
	    },
	    fromPartial(object) {
	        const message = createBaseMsgCreateVestingAccount();
	        message.fromAddress = object.fromAddress ?? "";
	        message.toAddress = object.toAddress ?? "";
	        message.amount = object.amount?.map((e) => coin_1.Coin.fromPartial(e)) || [];
	        message.endTime =
	            object.endTime !== undefined && object.endTime !== null ? helpers_1.Long.fromValue(object.endTime) : helpers_1.Long.ZERO;
	        message.delayed = object.delayed ?? false;
	        return message;
	    },
	};
	function createBaseMsgCreateVestingAccountResponse() {
	    return {};
	}
	exports.MsgCreateVestingAccountResponse = {
	    encode(_, writer = _m0.Writer.create()) {
	        return writer;
	    },
	    decode(input, length) {
	        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
	        let end = length === undefined ? reader.len : reader.pos + length;
	        const message = createBaseMsgCreateVestingAccountResponse();
	        while (reader.pos < end) {
	            const tag = reader.uint32();
	            switch (tag >>> 3) {
	                default:
	                    reader.skipType(tag & 7);
	                    break;
	            }
	        }
	        return message;
	    },
	    fromJSON(_) {
	        return {};
	    },
	    toJSON(_) {
	        const obj = {};
	        return obj;
	    },
	    fromPartial(_) {
	        const message = createBaseMsgCreateVestingAccountResponse();
	        return message;
	    },
	};
	class MsgClientImpl {
	    constructor(rpc) {
	        this.rpc = rpc;
	        this.CreateVestingAccount = this.CreateVestingAccount.bind(this);
	    }
	    CreateVestingAccount(request) {
	        const data = exports.MsgCreateVestingAccount.encode(request).finish();
	        const promise = this.rpc.request("cosmos.vesting.v1beta1.Msg", "CreateVestingAccount", data);
	        return promise.then((data) => exports.MsgCreateVestingAccountResponse.decode(new _m0.Reader(data)));
	    }
	}
	exports.MsgClientImpl = MsgClientImpl;
	
} (tx$3));

Object.defineProperty(messages, "__esModule", { value: true });
messages.vestingTypes = void 0;
const tx_1$1 = tx$3;
messages.vestingTypes = [
    ["/cosmos.vesting.v1beta1.MsgCreateVestingAccount", tx_1$1.MsgCreateVestingAccount],
];

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isAminoMsgEditValidator = exports.isAminoMsgDelegate = exports.isAminoMsgCreateValidator = exports.isAminoMsgBeginRedelegate = exports.createStakingAminoConverters = exports.setupSlashingExtension = exports.isAminoMsgUnjail = exports.createSlashingAminoConverters = exports.setupMintExtension = exports.setupIbcExtension = exports.isMsgTransferEncodeObject = exports.ibcTypes = exports.isAminoMsgTransfer = exports.createIbcAminoConverters = exports.setupGovExtension = exports.isMsgVoteWeightedEncodeObject = exports.isMsgVoteEncodeObject = exports.isMsgSubmitProposalEncodeObject = exports.isMsgDepositEncodeObject = exports.govTypes = exports.isAminoMsgVoteWeighted = exports.isAminoMsgVote = exports.isAminoMsgSubmitProposal = exports.isAminoMsgDeposit = exports.createGovAminoConverters = exports.setupFeegrantExtension = exports.feegrantTypes = exports.createFeegrantAminoConverters = exports.isAminoMsgSubmitEvidence = exports.createEvidenceAminoConverters = exports.setupDistributionExtension = exports.isMsgWithdrawDelegatorRewardEncodeObject = exports.distributionTypes = exports.isAminoMsgWithdrawValidatorCommission = exports.isAminoMsgWithdrawDelegatorReward = exports.isAminoMsgSetWithdrawAddress = exports.isAminoMsgFundCommunityPool = exports.createDistributionAminoConverters = exports.isAminoMsgVerifyInvariant = exports.createCrysisAminoConverters = exports.setupBankExtension = exports.isMsgSendEncodeObject = exports.bankTypes = exports.isAminoMsgSend = exports.isAminoMsgMultiSend = exports.createBankAminoConverters = exports.setupAuthzExtension = exports.authzTypes = exports.createAuthzAminoConverters = exports.setupAuthExtension = void 0;
	exports.vestingTypes = exports.isAminoMsgCreateVestingAccount = exports.createVestingAminoConverters = exports.setupTxExtension = exports.setupStakingExtension = exports.stakingTypes = exports.isMsgUndelegateEncodeObject = exports.isMsgEditValidatorEncodeObject = exports.isMsgDelegateEncodeObject = exports.isMsgCreateValidatorEncodeObject = exports.isMsgBeginRedelegateEncodeObject = exports.isAminoMsgUndelegate = void 0;
	var queries_1 = queries$a;
	Object.defineProperty(exports, "setupAuthExtension", { enumerable: true, get: function () { return queries_1.setupAuthExtension; } });
	var aminomessages_1 = aminomessages$a;
	Object.defineProperty(exports, "createAuthzAminoConverters", { enumerable: true, get: function () { return aminomessages_1.createAuthzAminoConverters; } });
	var messages_1 = messages$7;
	Object.defineProperty(exports, "authzTypes", { enumerable: true, get: function () { return messages_1.authzTypes; } });
	var queries_2 = queries$9;
	Object.defineProperty(exports, "setupAuthzExtension", { enumerable: true, get: function () { return queries_2.setupAuthzExtension; } });
	var aminomessages_2 = aminomessages$9;
	Object.defineProperty(exports, "createBankAminoConverters", { enumerable: true, get: function () { return aminomessages_2.createBankAminoConverters; } });
	Object.defineProperty(exports, "isAminoMsgMultiSend", { enumerable: true, get: function () { return aminomessages_2.isAminoMsgMultiSend; } });
	Object.defineProperty(exports, "isAminoMsgSend", { enumerable: true, get: function () { return aminomessages_2.isAminoMsgSend; } });
	var messages_2 = messages$6;
	Object.defineProperty(exports, "bankTypes", { enumerable: true, get: function () { return messages_2.bankTypes; } });
	Object.defineProperty(exports, "isMsgSendEncodeObject", { enumerable: true, get: function () { return messages_2.isMsgSendEncodeObject; } });
	var queries_3 = queries$8;
	Object.defineProperty(exports, "setupBankExtension", { enumerable: true, get: function () { return queries_3.setupBankExtension; } });
	var aminomessages_3 = aminomessages$8;
	Object.defineProperty(exports, "createCrysisAminoConverters", { enumerable: true, get: function () { return aminomessages_3.createCrysisAminoConverters; } });
	Object.defineProperty(exports, "isAminoMsgVerifyInvariant", { enumerable: true, get: function () { return aminomessages_3.isAminoMsgVerifyInvariant; } });
	var aminomessages_4 = aminomessages$7;
	Object.defineProperty(exports, "createDistributionAminoConverters", { enumerable: true, get: function () { return aminomessages_4.createDistributionAminoConverters; } });
	Object.defineProperty(exports, "isAminoMsgFundCommunityPool", { enumerable: true, get: function () { return aminomessages_4.isAminoMsgFundCommunityPool; } });
	Object.defineProperty(exports, "isAminoMsgSetWithdrawAddress", { enumerable: true, get: function () { return aminomessages_4.isAminoMsgSetWithdrawAddress; } });
	Object.defineProperty(exports, "isAminoMsgWithdrawDelegatorReward", { enumerable: true, get: function () { return aminomessages_4.isAminoMsgWithdrawDelegatorReward; } });
	Object.defineProperty(exports, "isAminoMsgWithdrawValidatorCommission", { enumerable: true, get: function () { return aminomessages_4.isAminoMsgWithdrawValidatorCommission; } });
	var messages_3 = messages$5;
	Object.defineProperty(exports, "distributionTypes", { enumerable: true, get: function () { return messages_3.distributionTypes; } });
	Object.defineProperty(exports, "isMsgWithdrawDelegatorRewardEncodeObject", { enumerable: true, get: function () { return messages_3.isMsgWithdrawDelegatorRewardEncodeObject; } });
	var queries_4 = queries$7;
	Object.defineProperty(exports, "setupDistributionExtension", { enumerable: true, get: function () { return queries_4.setupDistributionExtension; } });
	var aminomessages_5 = aminomessages$6;
	Object.defineProperty(exports, "createEvidenceAminoConverters", { enumerable: true, get: function () { return aminomessages_5.createEvidenceAminoConverters; } });
	Object.defineProperty(exports, "isAminoMsgSubmitEvidence", { enumerable: true, get: function () { return aminomessages_5.isAminoMsgSubmitEvidence; } });
	var aminomessages_6 = aminomessages$5;
	Object.defineProperty(exports, "createFeegrantAminoConverters", { enumerable: true, get: function () { return aminomessages_6.createFeegrantAminoConverters; } });
	var messages_4 = messages$4;
	Object.defineProperty(exports, "feegrantTypes", { enumerable: true, get: function () { return messages_4.feegrantTypes; } });
	var queries_5 = queries$6;
	Object.defineProperty(exports, "setupFeegrantExtension", { enumerable: true, get: function () { return queries_5.setupFeegrantExtension; } });
	var aminomessages_7 = aminomessages$4;
	Object.defineProperty(exports, "createGovAminoConverters", { enumerable: true, get: function () { return aminomessages_7.createGovAminoConverters; } });
	Object.defineProperty(exports, "isAminoMsgDeposit", { enumerable: true, get: function () { return aminomessages_7.isAminoMsgDeposit; } });
	Object.defineProperty(exports, "isAminoMsgSubmitProposal", { enumerable: true, get: function () { return aminomessages_7.isAminoMsgSubmitProposal; } });
	Object.defineProperty(exports, "isAminoMsgVote", { enumerable: true, get: function () { return aminomessages_7.isAminoMsgVote; } });
	Object.defineProperty(exports, "isAminoMsgVoteWeighted", { enumerable: true, get: function () { return aminomessages_7.isAminoMsgVoteWeighted; } });
	var messages_5 = messages$3;
	Object.defineProperty(exports, "govTypes", { enumerable: true, get: function () { return messages_5.govTypes; } });
	Object.defineProperty(exports, "isMsgDepositEncodeObject", { enumerable: true, get: function () { return messages_5.isMsgDepositEncodeObject; } });
	Object.defineProperty(exports, "isMsgSubmitProposalEncodeObject", { enumerable: true, get: function () { return messages_5.isMsgSubmitProposalEncodeObject; } });
	Object.defineProperty(exports, "isMsgVoteEncodeObject", { enumerable: true, get: function () { return messages_5.isMsgVoteEncodeObject; } });
	Object.defineProperty(exports, "isMsgVoteWeightedEncodeObject", { enumerable: true, get: function () { return messages_5.isMsgVoteWeightedEncodeObject; } });
	var queries_6 = queries$5;
	Object.defineProperty(exports, "setupGovExtension", { enumerable: true, get: function () { return queries_6.setupGovExtension; } });
	var aminomessages_8 = aminomessages$3;
	Object.defineProperty(exports, "createIbcAminoConverters", { enumerable: true, get: function () { return aminomessages_8.createIbcAminoConverters; } });
	Object.defineProperty(exports, "isAminoMsgTransfer", { enumerable: true, get: function () { return aminomessages_8.isAminoMsgTransfer; } });
	var messages_6 = messages$2;
	Object.defineProperty(exports, "ibcTypes", { enumerable: true, get: function () { return messages_6.ibcTypes; } });
	Object.defineProperty(exports, "isMsgTransferEncodeObject", { enumerable: true, get: function () { return messages_6.isMsgTransferEncodeObject; } });
	var queries_7 = queries$4;
	Object.defineProperty(exports, "setupIbcExtension", { enumerable: true, get: function () { return queries_7.setupIbcExtension; } });
	var queries_8 = queries$3;
	Object.defineProperty(exports, "setupMintExtension", { enumerable: true, get: function () { return queries_8.setupMintExtension; } });
	var aminomessages_9 = aminomessages$2;
	Object.defineProperty(exports, "createSlashingAminoConverters", { enumerable: true, get: function () { return aminomessages_9.createSlashingAminoConverters; } });
	Object.defineProperty(exports, "isAminoMsgUnjail", { enumerable: true, get: function () { return aminomessages_9.isAminoMsgUnjail; } });
	var queries_9 = queries$2;
	Object.defineProperty(exports, "setupSlashingExtension", { enumerable: true, get: function () { return queries_9.setupSlashingExtension; } });
	var aminomessages_10 = aminomessages$1;
	Object.defineProperty(exports, "createStakingAminoConverters", { enumerable: true, get: function () { return aminomessages_10.createStakingAminoConverters; } });
	Object.defineProperty(exports, "isAminoMsgBeginRedelegate", { enumerable: true, get: function () { return aminomessages_10.isAminoMsgBeginRedelegate; } });
	Object.defineProperty(exports, "isAminoMsgCreateValidator", { enumerable: true, get: function () { return aminomessages_10.isAminoMsgCreateValidator; } });
	Object.defineProperty(exports, "isAminoMsgDelegate", { enumerable: true, get: function () { return aminomessages_10.isAminoMsgDelegate; } });
	Object.defineProperty(exports, "isAminoMsgEditValidator", { enumerable: true, get: function () { return aminomessages_10.isAminoMsgEditValidator; } });
	Object.defineProperty(exports, "isAminoMsgUndelegate", { enumerable: true, get: function () { return aminomessages_10.isAminoMsgUndelegate; } });
	var messages_7 = messages$1;
	Object.defineProperty(exports, "isMsgBeginRedelegateEncodeObject", { enumerable: true, get: function () { return messages_7.isMsgBeginRedelegateEncodeObject; } });
	Object.defineProperty(exports, "isMsgCreateValidatorEncodeObject", { enumerable: true, get: function () { return messages_7.isMsgCreateValidatorEncodeObject; } });
	Object.defineProperty(exports, "isMsgDelegateEncodeObject", { enumerable: true, get: function () { return messages_7.isMsgDelegateEncodeObject; } });
	Object.defineProperty(exports, "isMsgEditValidatorEncodeObject", { enumerable: true, get: function () { return messages_7.isMsgEditValidatorEncodeObject; } });
	Object.defineProperty(exports, "isMsgUndelegateEncodeObject", { enumerable: true, get: function () { return messages_7.isMsgUndelegateEncodeObject; } });
	Object.defineProperty(exports, "stakingTypes", { enumerable: true, get: function () { return messages_7.stakingTypes; } });
	var queries_10 = queries$1;
	Object.defineProperty(exports, "setupStakingExtension", { enumerable: true, get: function () { return queries_10.setupStakingExtension; } });
	var queries_11 = queries;
	Object.defineProperty(exports, "setupTxExtension", { enumerable: true, get: function () { return queries_11.setupTxExtension; } });
	var aminomessages_11 = aminomessages;
	Object.defineProperty(exports, "createVestingAminoConverters", { enumerable: true, get: function () { return aminomessages_11.createVestingAminoConverters; } });
	Object.defineProperty(exports, "isAminoMsgCreateVestingAccount", { enumerable: true, get: function () { return aminomessages_11.isAminoMsgCreateVestingAccount; } });
	var messages_8 = messages;
	Object.defineProperty(exports, "vestingTypes", { enumerable: true, get: function () { return messages_8.vestingTypes; } });
	
} (modules));

var multisignature = {};

var __importDefault$2 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(multisignature, "__esModule", { value: true });
multisignature.makeMultisignedTxBytes = multisignature.makeMultisignedTx = multisignature.makeCompactBitArray = void 0;
const amino_1$1 = build$8;
const encoding_1$9 = build$6;
const proto_signing_1 = build$9;
const multisig_1 = multisig$1;
const signing_1 = signing$1;
const tx_1 = tx$e;
const tx_2 = tx$e;
const long_1 = __importDefault$2(long);
function makeCompactBitArray(bits) {
    const byteCount = Math.ceil(bits.length / 8);
    const extraBits = bits.length - Math.floor(bits.length / 8) * 8;
    const bytes = new Uint8Array(byteCount); // zero-filled
    bits.forEach((value, index) => {
        const bytePos = Math.floor(index / 8);
        const bitPos = index % 8;
        // eslint-disable-next-line no-bitwise
        if (value)
            bytes[bytePos] |= 0b1 << (8 - 1 - bitPos);
    });
    return multisig_1.CompactBitArray.fromPartial({ elems: bytes, extraBitsStored: extraBits });
}
multisignature.makeCompactBitArray = makeCompactBitArray;
/**
 * Creates a signed transaction from signer info, transaction body and signatures.
 * The result can be broadcasted after serialization.
 *
 * Consider using `makeMultisignedTxBytes` instead if you want to broadcast the
 * transaction immediately.
 */
function makeMultisignedTx(multisigPubkey, sequence, fee, bodyBytes, signatures) {
    const addresses = Array.from(signatures.keys());
    const prefix = (0, encoding_1$9.fromBech32)(addresses[0]).prefix;
    const signers = Array(multisigPubkey.value.pubkeys.length).fill(false);
    const signaturesList = new Array();
    for (let i = 0; i < multisigPubkey.value.pubkeys.length; i++) {
        const signerAddress = (0, amino_1$1.pubkeyToAddress)(multisigPubkey.value.pubkeys[i], prefix);
        const signature = signatures.get(signerAddress);
        if (signature) {
            signers[i] = true;
            signaturesList.push(signature);
        }
    }
    const signerInfo = {
        publicKey: (0, proto_signing_1.encodePubkey)(multisigPubkey),
        modeInfo: {
            multi: {
                bitarray: makeCompactBitArray(signers),
                modeInfos: signaturesList.map((_) => ({ single: { mode: signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON } })),
            },
        },
        sequence: long_1.default.fromNumber(sequence),
    };
    const authInfo = tx_1.AuthInfo.fromPartial({
        signerInfos: [signerInfo],
        fee: {
            amount: [...fee.amount],
            gasLimit: long_1.default.fromString(fee.gas),
        },
    });
    const authInfoBytes = tx_1.AuthInfo.encode(authInfo).finish();
    const signedTx = tx_2.TxRaw.fromPartial({
        bodyBytes: bodyBytes,
        authInfoBytes: authInfoBytes,
        signatures: [multisig_1.MultiSignature.encode(multisig_1.MultiSignature.fromPartial({ signatures: signaturesList })).finish()],
    });
    return signedTx;
}
multisignature.makeMultisignedTx = makeMultisignedTx;
/**
 * Creates a signed transaction from signer info, transaction body and signatures.
 * The result can be broadcasted.
 *
 * This is a wrapper around `makeMultisignedTx` that encodes the transaction for broadcasting.
 */
function makeMultisignedTxBytes(multisigPubkey, sequence, fee, bodyBytes, signatures) {
    const signedTx = makeMultisignedTx(multisigPubkey, sequence, fee, bodyBytes, signatures);
    return Uint8Array.from(tx_2.TxRaw.encode(signedTx).finish());
}
multisignature.makeMultisignedTxBytes = makeMultisignedTxBytes;

var search = {};

Object.defineProperty(search, "__esModule", { value: true });
search.isSearchByTagsQuery = search.isSearchBySentFromOrToQuery = search.isSearchByHeightQuery = void 0;
function isSearchByHeightQuery(query) {
    return query.height !== undefined;
}
search.isSearchByHeightQuery = isSearchByHeightQuery;
function isSearchBySentFromOrToQuery(query) {
    return query.sentFromOrTo !== undefined;
}
search.isSearchBySentFromOrToQuery = isSearchBySentFromOrToQuery;
function isSearchByTagsQuery(query) {
    return query.tags !== undefined;
}
search.isSearchByTagsQuery = isSearchByTagsQuery;

var signingstargateclient = {};

var build$2 = {};

var addresses = {};

Object.defineProperty(addresses, "__esModule", { value: true });
addresses.pubkeyToAddress = addresses.pubkeyToRawAddress = addresses.rawSecp256k1PubkeyToRawAddress = addresses.rawEd25519PubkeyToRawAddress = void 0;
const crypto_1$2 = build$7;
const encoding_1$8 = build$6;
function rawEd25519PubkeyToRawAddress(pubkeyData) {
    if (pubkeyData.length !== 32) {
        throw new Error(`Invalid Ed25519 pubkey length: ${pubkeyData.length}`);
    }
    return (0, crypto_1$2.sha256)(pubkeyData).slice(0, 20);
}
addresses.rawEd25519PubkeyToRawAddress = rawEd25519PubkeyToRawAddress;
function rawSecp256k1PubkeyToRawAddress(pubkeyData) {
    if (pubkeyData.length !== 33) {
        throw new Error(`Invalid Secp256k1 pubkey length (compressed): ${pubkeyData.length}`);
    }
    return (0, crypto_1$2.ripemd160)((0, crypto_1$2.sha256)(pubkeyData));
}
addresses.rawSecp256k1PubkeyToRawAddress = rawSecp256k1PubkeyToRawAddress;
/**
 * Returns Tendermint address as bytes.
 *
 * This is for addresses that are derived by the Tendermint keypair (typically Ed25519).
 * Sometimes those addresses are bech32-encoded and contain the term "cons" in the presix
 * ("cosmosvalcons1...").
 *
 * For secp256k1 this assumes we already have a compressed pubkey, which is the default in Cosmos.
 */
function pubkeyToRawAddress(type, data) {
    switch (type) {
        case "ed25519":
            return rawEd25519PubkeyToRawAddress(data);
        case "secp256k1":
            return rawSecp256k1PubkeyToRawAddress(data);
        default:
            // Keep this case here to guard against new types being added but not handled
            throw new Error(`Pubkey type ${type} not supported`);
    }
}
addresses.pubkeyToRawAddress = pubkeyToRawAddress;
/**
 * Returns Tendermint address in uppercase hex format.
 *
 * This is for addresses that are derived by the Tendermint keypair (typically Ed25519).
 * Sometimes those addresses are bech32-encoded and contain the term "cons" in the presix
 * ("cosmosvalcons1...").
 *
 * For secp256k1 this assumes we already have a compressed pubkey, which is the default in Cosmos.
 */
function pubkeyToAddress(type, data) {
    return (0, encoding_1$8.toHex)(pubkeyToRawAddress(type, data)).toUpperCase();
}
addresses.pubkeyToAddress = pubkeyToAddress;

var dates = {};

Object.defineProperty(dates, "__esModule", { value: true });
dates.DateTime = dates.toSeconds = dates.fromSeconds = dates.toRfc3339WithNanoseconds = dates.fromRfc3339WithNanoseconds = void 0;
const encoding_1$7 = build$6;
const math_1$2 = build$a;
function fromRfc3339WithNanoseconds(dateTimeString) {
    const out = (0, encoding_1$7.fromRfc3339)(dateTimeString);
    const nanosecondsMatch = dateTimeString.match(/\.(\d+)Z$/);
    const nanoseconds = nanosecondsMatch ? nanosecondsMatch[1].slice(3) : "";
    out.nanoseconds = parseInt(nanoseconds.padEnd(6, "0"), 10);
    return out;
}
dates.fromRfc3339WithNanoseconds = fromRfc3339WithNanoseconds;
function toRfc3339WithNanoseconds(dateTime) {
    const millisecondIso = dateTime.toISOString();
    const nanoseconds = dateTime.nanoseconds?.toString() ?? "";
    return `${millisecondIso.slice(0, -1)}${nanoseconds.padStart(6, "0")}Z`;
}
dates.toRfc3339WithNanoseconds = toRfc3339WithNanoseconds;
function fromSeconds(seconds, nanos = 0) {
    const checkedNanos = new math_1$2.Uint32(nanos).toNumber();
    if (checkedNanos > 999999999) {
        throw new Error("Nano seconds must not exceed 999999999");
    }
    const out = new Date(seconds * 1000 + Math.floor(checkedNanos / 1000000));
    out.nanoseconds = checkedNanos % 1000000;
    return out;
}
dates.fromSeconds = fromSeconds;
/**
 * Calculates the UNIX timestamp in seconds as well as the nanoseconds after the given second.
 *
 * This is useful when dealing with external systems like the protobuf type
 * [.google.protobuf.Timestamp](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp)
 * or any other system that does not use millisecond precision.
 */
function toSeconds(date) {
    return {
        seconds: Math.floor(date.getTime() / 1000),
        nanos: (date.getTime() % 1000) * 1000000 + (date.nanoseconds ?? 0),
    };
}
dates.toSeconds = toSeconds;
/** @deprecated Use fromRfc3339WithNanoseconds/toRfc3339WithNanoseconds instead */
class DateTime {
    /** @deprecated Use fromRfc3339WithNanoseconds instead */
    static decode(dateTimeString) {
        return fromRfc3339WithNanoseconds(dateTimeString);
    }
    /** @deprecated Use toRfc3339WithNanoseconds instead */
    static encode(dateTime) {
        return toRfc3339WithNanoseconds(dateTime);
    }
}
dates.DateTime = DateTime;

var rpcclients = {};

var httpbatchclient = {};

var build$1 = {};

var id = {};

Object.defineProperty(id, "__esModule", { value: true });
id.makeJsonRpcId = void 0;
// Start with 10001 to avoid possible collisions with all hand-selected values like e.g. 1,2,3,42,100
let counter = 10000;
/**
 * Creates a new ID to be used for creating a JSON-RPC request.
 *
 * Multiple calls of this produce unique values.
 *
 * The output may be any value compatible to JSON-RPC request IDs with an undefined output format and generation logic.
 */
function makeJsonRpcId() {
    return (counter += 1);
}
id.makeJsonRpcId = makeJsonRpcId;

var jsonrpcclient = {};

var types$1 = {};

Object.defineProperty(types$1, "__esModule", { value: true });
types$1.jsonRpcCode = types$1.isJsonRpcSuccessResponse = types$1.isJsonRpcErrorResponse = void 0;
function isJsonRpcErrorResponse(response) {
    return typeof response.error === "object";
}
types$1.isJsonRpcErrorResponse = isJsonRpcErrorResponse;
function isJsonRpcSuccessResponse(response) {
    return !isJsonRpcErrorResponse(response);
}
types$1.isJsonRpcSuccessResponse = isJsonRpcSuccessResponse;
/**
 * Error codes as specified in JSON-RPC 2.0
 *
 * @see https://www.jsonrpc.org/specification#error_object
 */
types$1.jsonRpcCode = {
    parseError: -32700,
    invalidRequest: -32600,
    methodNotFound: -32601,
    invalidParams: -32602,
    internalError: -32603,
    // server error (Reserved for implementation-defined server-errors.):
    // -32000 to -32099
    serverError: {
        default: -32000,
    },
};

Object.defineProperty(jsonrpcclient, "__esModule", { value: true });
jsonrpcclient.JsonRpcClient = void 0;
const stream_1$1 = build$3;
const types_1$2 = types$1;
/**
 * A thin wrapper that is used to bring together requests and responses by ID.
 *
 * Using this class is only advised for continous communication channels like
 * WebSockets or WebWorker messaging.
 */
class JsonRpcClient {
    constructor(connection) {
        this.connection = connection;
    }
    async run(request) {
        const filteredStream = this.connection.responseStream.filter((r) => r.id === request.id);
        const pendingResponses = (0, stream_1$1.firstEvent)(filteredStream);
        this.connection.sendRequest(request);
        const response = await pendingResponses;
        if ((0, types_1$2.isJsonRpcErrorResponse)(response)) {
            const error = response.error;
            throw new Error(`JSON RPC error: code=${error.code}; message='${error.message}'`);
        }
        return response;
    }
}
jsonrpcclient.JsonRpcClient = JsonRpcClient;

var parse$3 = {};

var compatibility = {};

Object.defineProperty(compatibility, "__esModule", { value: true });
compatibility.isJsonCompatibleDictionary = compatibility.isJsonCompatibleArray = compatibility.isJsonCompatibleValue = void 0;
function isJsonCompatibleValue(value) {
    if (typeof value === "string" ||
        typeof value === "number" ||
        typeof value === "boolean" ||
        value === null ||
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        isJsonCompatibleArray(value) ||
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        isJsonCompatibleDictionary(value)) {
        return true;
    }
    else {
        return false;
    }
}
compatibility.isJsonCompatibleValue = isJsonCompatibleValue;
function isJsonCompatibleArray(value) {
    if (!Array.isArray(value)) {
        return false;
    }
    for (const item of value) {
        if (!isJsonCompatibleValue(item)) {
            return false;
        }
    }
    // all items okay
    return true;
}
compatibility.isJsonCompatibleArray = isJsonCompatibleArray;
function isJsonCompatibleDictionary(data) {
    if (typeof data !== "object" || data === null) {
        // data must be a non-null object
        return false;
    }
    // Exclude special kind of objects like Array, Date or Uint8Array
    // Object.prototype.toString() returns a specified value:
    // http://www.ecma-international.org/ecma-262/7.0/index.html#sec-object.prototype.tostring
    if (Object.prototype.toString.call(data) !== "[object Object]") {
        return false;
    }
    return Object.values(data).every(isJsonCompatibleValue);
}
compatibility.isJsonCompatibleDictionary = isJsonCompatibleDictionary;

Object.defineProperty(parse$3, "__esModule", { value: true });
parse$3.parseJsonRpcResponse = parse$3.parseJsonRpcSuccessResponse = parse$3.parseJsonRpcErrorResponse = parse$3.parseJsonRpcRequest = parse$3.parseJsonRpcId = void 0;
const compatibility_1 = compatibility;
/**
 * Extracts ID field from request or response object.
 *
 * Returns `null` when no valid ID was found.
 */
function parseJsonRpcId(data) {
    if (!(0, compatibility_1.isJsonCompatibleDictionary)(data)) {
        throw new Error("Data must be JSON compatible dictionary");
    }
    const id = data.id;
    if (typeof id !== "number" && typeof id !== "string") {
        return null;
    }
    return id;
}
parse$3.parseJsonRpcId = parseJsonRpcId;
function parseJsonRpcRequest(data) {
    if (!(0, compatibility_1.isJsonCompatibleDictionary)(data)) {
        throw new Error("Data must be JSON compatible dictionary");
    }
    if (data.jsonrpc !== "2.0") {
        throw new Error(`Got unexpected jsonrpc version: ${data.jsonrpc}`);
    }
    const id = parseJsonRpcId(data);
    if (id === null) {
        throw new Error("Invalid id field");
    }
    const method = data.method;
    if (typeof method !== "string") {
        throw new Error("Invalid method field");
    }
    if (!(0, compatibility_1.isJsonCompatibleArray)(data.params) && !(0, compatibility_1.isJsonCompatibleDictionary)(data.params)) {
        throw new Error("Invalid params field");
    }
    return {
        jsonrpc: "2.0",
        id: id,
        method: method,
        params: data.params,
    };
}
parse$3.parseJsonRpcRequest = parseJsonRpcRequest;
function parseError(error) {
    if (typeof error.code !== "number") {
        throw new Error("Error property 'code' is not a number");
    }
    if (typeof error.message !== "string") {
        throw new Error("Error property 'message' is not a string");
    }
    let maybeUndefinedData;
    if (error.data === undefined) {
        maybeUndefinedData = undefined;
    }
    else if ((0, compatibility_1.isJsonCompatibleValue)(error.data)) {
        maybeUndefinedData = error.data;
    }
    else {
        throw new Error("Error property 'data' is defined but not a JSON compatible value.");
    }
    return {
        code: error.code,
        message: error.message,
        ...(maybeUndefinedData !== undefined ? { data: maybeUndefinedData } : {}),
    };
}
/** Throws if data is not a JsonRpcErrorResponse */
function parseJsonRpcErrorResponse(data) {
    if (!(0, compatibility_1.isJsonCompatibleDictionary)(data)) {
        throw new Error("Data must be JSON compatible dictionary");
    }
    if (data.jsonrpc !== "2.0") {
        throw new Error(`Got unexpected jsonrpc version: ${JSON.stringify(data)}`);
    }
    const id = data.id;
    if (typeof id !== "number" && typeof id !== "string" && id !== null) {
        throw new Error("Invalid id field");
    }
    if (typeof data.error === "undefined" || !(0, compatibility_1.isJsonCompatibleDictionary)(data.error)) {
        throw new Error("Invalid error field");
    }
    return {
        jsonrpc: "2.0",
        id: id,
        error: parseError(data.error),
    };
}
parse$3.parseJsonRpcErrorResponse = parseJsonRpcErrorResponse;
/** Throws if data is not a JsonRpcSuccessResponse */
function parseJsonRpcSuccessResponse(data) {
    if (!(0, compatibility_1.isJsonCompatibleDictionary)(data)) {
        throw new Error("Data must be JSON compatible dictionary");
    }
    if (data.jsonrpc !== "2.0") {
        throw new Error(`Got unexpected jsonrpc version: ${JSON.stringify(data)}`);
    }
    const id = data.id;
    if (typeof id !== "number" && typeof id !== "string") {
        throw new Error("Invalid id field");
    }
    if (typeof data.result === "undefined") {
        throw new Error("Invalid result field");
    }
    const result = data.result;
    return {
        jsonrpc: "2.0",
        id: id,
        result: result,
    };
}
parse$3.parseJsonRpcSuccessResponse = parseJsonRpcSuccessResponse;
/**
 * Returns a JsonRpcErrorResponse if input can be parsed as a JSON-RPC error. Otherwise parses
 * input as JsonRpcSuccessResponse. Throws if input is neither a valid error nor success response.
 */
function parseJsonRpcResponse(data) {
    let response;
    try {
        response = parseJsonRpcErrorResponse(data);
    }
    catch (_) {
        response = parseJsonRpcSuccessResponse(data);
    }
    return response;
}
parse$3.parseJsonRpcResponse = parseJsonRpcResponse;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.jsonRpcCode = exports.isJsonRpcSuccessResponse = exports.isJsonRpcErrorResponse = exports.parseJsonRpcSuccessResponse = exports.parseJsonRpcResponse = exports.parseJsonRpcRequest = exports.parseJsonRpcId = exports.parseJsonRpcErrorResponse = exports.JsonRpcClient = exports.makeJsonRpcId = void 0;
	var id_1 = id;
	Object.defineProperty(exports, "makeJsonRpcId", { enumerable: true, get: function () { return id_1.makeJsonRpcId; } });
	var jsonrpcclient_1 = jsonrpcclient;
	Object.defineProperty(exports, "JsonRpcClient", { enumerable: true, get: function () { return jsonrpcclient_1.JsonRpcClient; } });
	var parse_1 = parse$3;
	Object.defineProperty(exports, "parseJsonRpcErrorResponse", { enumerable: true, get: function () { return parse_1.parseJsonRpcErrorResponse; } });
	Object.defineProperty(exports, "parseJsonRpcId", { enumerable: true, get: function () { return parse_1.parseJsonRpcId; } });
	Object.defineProperty(exports, "parseJsonRpcRequest", { enumerable: true, get: function () { return parse_1.parseJsonRpcRequest; } });
	Object.defineProperty(exports, "parseJsonRpcResponse", { enumerable: true, get: function () { return parse_1.parseJsonRpcResponse; } });
	Object.defineProperty(exports, "parseJsonRpcSuccessResponse", { enumerable: true, get: function () { return parse_1.parseJsonRpcSuccessResponse; } });
	var types_1 = types$1;
	Object.defineProperty(exports, "isJsonRpcErrorResponse", { enumerable: true, get: function () { return types_1.isJsonRpcErrorResponse; } });
	Object.defineProperty(exports, "isJsonRpcSuccessResponse", { enumerable: true, get: function () { return types_1.isJsonRpcSuccessResponse; } });
	Object.defineProperty(exports, "jsonRpcCode", { enumerable: true, get: function () { return types_1.jsonRpcCode; } });
	
} (build$1));

var http$3 = {};

var axios$2 = {exports: {}};

var bind$2 = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};

var bind$1 = bind$2;

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind$1(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

var utils$9 = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};

var utils$8 = utils$9;

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
var buildURL$1 = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils$8.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils$8.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils$8.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils$8.forEach(val, function parseValue(v) {
        if (utils$8.isDate(v)) {
          v = v.toISOString();
        } else if (utils$8.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

var utils$7 = utils$9;

function InterceptorManager$1() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager$1.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager$1.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager$1.prototype.forEach = function forEach(fn) {
  utils$7.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

var InterceptorManager_1 = InterceptorManager$1;

var utils$6 = utils$9;

var normalizeHeaderName$1 = function normalizeHeaderName(headers, normalizedName) {
  utils$6.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
var enhanceError$1 = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};

var createError;
var hasRequiredCreateError;

function requireCreateError () {
	if (hasRequiredCreateError) return createError;
	hasRequiredCreateError = 1;

	var enhanceError = enhanceError$1;

	/**
	 * Create an Error with the specified message, config, error code, request and response.
	 *
	 * @param {string} message The error message.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The created error.
	 */
	createError = function createError(message, config, code, request, response) {
	  var error = new Error(message);
	  return enhanceError(error, config, code, request, response);
	};
	return createError;
}

var settle;
var hasRequiredSettle;

function requireSettle () {
	if (hasRequiredSettle) return settle;
	hasRequiredSettle = 1;

	var createError = requireCreateError();

	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */
	settle = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(createError(
	      'Request failed with status code ' + response.status,
	      response.config,
	      null,
	      response.request,
	      response
	    ));
	  }
	};
	return settle;
}

var cookies;
var hasRequiredCookies;

function requireCookies () {
	if (hasRequiredCookies) return cookies;
	hasRequiredCookies = 1;

	var utils = utils$9;

	cookies = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs support document.cookie
	    (function standardBrowserEnv() {
	      return {
	        write: function write(name, value, expires, path, domain, secure) {
	          var cookie = [];
	          cookie.push(name + '=' + encodeURIComponent(value));

	          if (utils.isNumber(expires)) {
	            cookie.push('expires=' + new Date(expires).toGMTString());
	          }

	          if (utils.isString(path)) {
	            cookie.push('path=' + path);
	          }

	          if (utils.isString(domain)) {
	            cookie.push('domain=' + domain);
	          }

	          if (secure === true) {
	            cookie.push('secure');
	          }

	          document.cookie = cookie.join('; ');
	        },

	        read: function read(name) {
	          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	          return (match ? decodeURIComponent(match[3]) : null);
	        },

	        remove: function remove(name) {
	          this.write(name, '', Date.now() - 86400000);
	        }
	      };
	    })() :

	  // Non standard browser env (web workers, react-native) lack needed support.
	    (function nonStandardBrowserEnv() {
	      return {
	        write: function write() {},
	        read: function read() { return null; },
	        remove: function remove() {}
	      };
	    })()
	);
	return cookies;
}

var isAbsoluteURL;
var hasRequiredIsAbsoluteURL;

function requireIsAbsoluteURL () {
	if (hasRequiredIsAbsoluteURL) return isAbsoluteURL;
	hasRequiredIsAbsoluteURL = 1;

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	isAbsoluteURL = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};
	return isAbsoluteURL;
}

var combineURLs;
var hasRequiredCombineURLs;

function requireCombineURLs () {
	if (hasRequiredCombineURLs) return combineURLs;
	hasRequiredCombineURLs = 1;

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	combineURLs = function combineURLs(baseURL, relativeURL) {
	  return relativeURL
	    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
	    : baseURL;
	};
	return combineURLs;
}

var buildFullPath;
var hasRequiredBuildFullPath;

function requireBuildFullPath () {
	if (hasRequiredBuildFullPath) return buildFullPath;
	hasRequiredBuildFullPath = 1;

	var isAbsoluteURL = requireIsAbsoluteURL();
	var combineURLs = requireCombineURLs();

	/**
	 * Creates a new URL by combining the baseURL with the requestedURL,
	 * only when the requestedURL is not already an absolute URL.
	 * If the requestURL is absolute, this function returns the requestedURL untouched.
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} requestedURL Absolute or relative URL to combine
	 * @returns {string} The combined full path
	 */
	buildFullPath = function buildFullPath(baseURL, requestedURL) {
	  if (baseURL && !isAbsoluteURL(requestedURL)) {
	    return combineURLs(baseURL, requestedURL);
	  }
	  return requestedURL;
	};
	return buildFullPath;
}

var parseHeaders;
var hasRequiredParseHeaders;

function requireParseHeaders () {
	if (hasRequiredParseHeaders) return parseHeaders;
	hasRequiredParseHeaders = 1;

	var utils = utils$9;

	// Headers whose duplicates are ignored by node
	// c.f. https://nodejs.org/api/http.html#http_message_headers
	var ignoreDuplicateOf = [
	  'age', 'authorization', 'content-length', 'content-type', 'etag',
	  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
	  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
	  'referer', 'retry-after', 'user-agent'
	];

	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */
	parseHeaders = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;

	  if (!headers) { return parsed; }

	  utils.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils.trim(line.substr(0, i)).toLowerCase();
	    val = utils.trim(line.substr(i + 1));

	    if (key) {
	      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
	        return;
	      }
	      if (key === 'set-cookie') {
	        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
	      } else {
	        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	      }
	    }
	  });

	  return parsed;
	};
	return parseHeaders;
}

var isURLSameOrigin;
var hasRequiredIsURLSameOrigin;

function requireIsURLSameOrigin () {
	if (hasRequiredIsURLSameOrigin) return isURLSameOrigin;
	hasRequiredIsURLSameOrigin = 1;

	var utils = utils$9;

	isURLSameOrigin = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs have full support of the APIs needed to test
	  // whether the request URL is of the same origin as current location.
	    (function standardBrowserEnv() {
	      var msie = /(msie|trident)/i.test(navigator.userAgent);
	      var urlParsingNode = document.createElement('a');
	      var originURL;

	      /**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	      function resolveURL(url) {
	        var href = url;

	        if (msie) {
	        // IE needs attribute set twice to normalize properties
	          urlParsingNode.setAttribute('href', href);
	          href = urlParsingNode.href;
	        }

	        urlParsingNode.setAttribute('href', href);

	        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	        return {
	          href: urlParsingNode.href,
	          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	          host: urlParsingNode.host,
	          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	          hostname: urlParsingNode.hostname,
	          port: urlParsingNode.port,
	          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	            urlParsingNode.pathname :
	            '/' + urlParsingNode.pathname
	        };
	      }

	      originURL = resolveURL(window.location.href);

	      /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	      return function isURLSameOrigin(requestURL) {
	        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	        return (parsed.protocol === originURL.protocol &&
	            parsed.host === originURL.host);
	      };
	    })() :

	  // Non standard browser envs (web workers, react-native) lack needed support.
	    (function nonStandardBrowserEnv() {
	      return function isURLSameOrigin() {
	        return true;
	      };
	    })()
	);
	return isURLSameOrigin;
}

var xhr;
var hasRequiredXhr;

function requireXhr () {
	if (hasRequiredXhr) return xhr;
	hasRequiredXhr = 1;

	var utils = utils$9;
	var settle = requireSettle();
	var cookies = requireCookies();
	var buildURL = buildURL$1;
	var buildFullPath = requireBuildFullPath();
	var parseHeaders = requireParseHeaders();
	var isURLSameOrigin = requireIsURLSameOrigin();
	var createError = requireCreateError();

	xhr = function xhrAdapter(config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    var requestData = config.data;
	    var requestHeaders = config.headers;
	    var responseType = config.responseType;

	    if (utils.isFormData(requestData)) {
	      delete requestHeaders['Content-Type']; // Let the browser set it
	    }

	    var request = new XMLHttpRequest();

	    // HTTP basic authentication
	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
	      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	    }

	    var fullPath = buildFullPath(config.baseURL, config.url);
	    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

	    // Set the request timeout in MS
	    request.timeout = config.timeout;

	    function onloadend() {
	      if (!request) {
	        return;
	      }
	      // Prepare the response
	      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
	        request.responseText : request.response;
	      var response = {
	        data: responseData,
	        status: request.status,
	        statusText: request.statusText,
	        headers: responseHeaders,
	        config: config,
	        request: request
	      };

	      settle(resolve, reject, response);

	      // Clean up request
	      request = null;
	    }

	    if ('onloadend' in request) {
	      // Use onloadend if available
	      request.onloadend = onloadend;
	    } else {
	      // Listen for ready state to emulate onloadend
	      request.onreadystatechange = function handleLoad() {
	        if (!request || request.readyState !== 4) {
	          return;
	        }

	        // The request errored out and we didn't get a response, this will be
	        // handled by onerror instead
	        // With one exception: request that using file: protocol, most browsers
	        // will return status as 0 even though it's a successful request
	        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	          return;
	        }
	        // readystate handler is calling before onerror or ontimeout handlers,
	        // so we should call onloadend on the next 'tick'
	        setTimeout(onloadend);
	      };
	    }

	    // Handle browser request cancellation (as opposed to a manual cancellation)
	    request.onabort = function handleAbort() {
	      if (!request) {
	        return;
	      }

	      reject(createError('Request aborted', config, 'ECONNABORTED', request));

	      // Clean up request
	      request = null;
	    };

	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(createError('Network Error', config, null, request));

	      // Clean up request
	      request = null;
	    };

	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
	      if (config.timeoutErrorMessage) {
	        timeoutErrorMessage = config.timeoutErrorMessage;
	      }
	      reject(createError(
	        timeoutErrorMessage,
	        config,
	        config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
	        request));

	      // Clean up request
	      request = null;
	    };

	    // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.
	    if (utils.isStandardBrowserEnv()) {
	      // Add xsrf header
	      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
	        cookies.read(config.xsrfCookieName) :
	        undefined;

	      if (xsrfValue) {
	        requestHeaders[config.xsrfHeaderName] = xsrfValue;
	      }
	    }

	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	          // Remove Content-Type if data is undefined
	          delete requestHeaders[key];
	        } else {
	          // Otherwise add header to the request
	          request.setRequestHeader(key, val);
	        }
	      });
	    }

	    // Add withCredentials to request if needed
	    if (!utils.isUndefined(config.withCredentials)) {
	      request.withCredentials = !!config.withCredentials;
	    }

	    // Add responseType to request if needed
	    if (responseType && responseType !== 'json') {
	      request.responseType = config.responseType;
	    }

	    // Handle progress if needed
	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', config.onDownloadProgress);
	    }

	    // Not all browsers support upload events
	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', config.onUploadProgress);
	    }

	    if (config.cancelToken) {
	      // Handle cancellation
	      config.cancelToken.promise.then(function onCanceled(cancel) {
	        if (!request) {
	          return;
	        }

	        request.abort();
	        reject(cancel);
	        // Clean up request
	        request = null;
	      });
	    }

	    if (!requestData) {
	      requestData = null;
	    }

	    // Send the request
	    request.send(requestData);
	  });
	};
	return xhr;
}

var followRedirects = {exports: {}};

var src = {exports: {}};

var browser$1 = {exports: {}};

/**
 * Helpers.
 */

var ms;
var hasRequiredMs;

function requireMs () {
	if (hasRequiredMs) return ms;
	hasRequiredMs = 1;
	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var w = d * 7;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	ms = function(val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse(val);
	  } else if (type === 'number' && isFinite(val)) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'weeks':
	    case 'week':
	    case 'w':
	      return n * w;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (msAbs >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (msAbs >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (msAbs >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d) {
	    return plural(ms, msAbs, d, 'day');
	  }
	  if (msAbs >= h) {
	    return plural(ms, msAbs, h, 'hour');
	  }
	  if (msAbs >= m) {
	    return plural(ms, msAbs, m, 'minute');
	  }
	  if (msAbs >= s) {
	    return plural(ms, msAbs, s, 'second');
	  }
	  return ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, msAbs, n, name) {
	  var isPlural = msAbs >= n * 1.5;
	  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
	}
	return ms;
}

var common;
var hasRequiredCommon;

function requireCommon () {
	if (hasRequiredCommon) return common;
	hasRequiredCommon = 1;
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 */

	function setup(env) {
		createDebug.debug = createDebug;
		createDebug.default = createDebug;
		createDebug.coerce = coerce;
		createDebug.disable = disable;
		createDebug.enable = enable;
		createDebug.enabled = enabled;
		createDebug.humanize = requireMs();
		createDebug.destroy = destroy;

		Object.keys(env).forEach(key => {
			createDebug[key] = env[key];
		});

		/**
		* The currently active debug mode names, and names to skip.
		*/

		createDebug.names = [];
		createDebug.skips = [];

		/**
		* Map of special "%n" handling functions, for the debug "format" argument.
		*
		* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
		*/
		createDebug.formatters = {};

		/**
		* Selects a color for a debug namespace
		* @param {String} namespace The namespace string for the debug instance to be colored
		* @return {Number|String} An ANSI color code for the given namespace
		* @api private
		*/
		function selectColor(namespace) {
			let hash = 0;

			for (let i = 0; i < namespace.length; i++) {
				hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
				hash |= 0; // Convert to 32bit integer
			}

			return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
		}
		createDebug.selectColor = selectColor;

		/**
		* Create a debugger with the given `namespace`.
		*
		* @param {String} namespace
		* @return {Function}
		* @api public
		*/
		function createDebug(namespace) {
			let prevTime;
			let enableOverride = null;
			let namespacesCache;
			let enabledCache;

			function debug(...args) {
				// Disabled?
				if (!debug.enabled) {
					return;
				}

				const self = debug;

				// Set `diff` timestamp
				const curr = Number(new Date());
				const ms = curr - (prevTime || curr);
				self.diff = ms;
				self.prev = prevTime;
				self.curr = curr;
				prevTime = curr;

				args[0] = createDebug.coerce(args[0]);

				if (typeof args[0] !== 'string') {
					// Anything else let's inspect with %O
					args.unshift('%O');
				}

				// Apply any `formatters` transformations
				let index = 0;
				args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
					// If we encounter an escaped % then don't increase the array index
					if (match === '%%') {
						return '%';
					}
					index++;
					const formatter = createDebug.formatters[format];
					if (typeof formatter === 'function') {
						const val = args[index];
						match = formatter.call(self, val);

						// Now we need to remove `args[index]` since it's inlined in the `format`
						args.splice(index, 1);
						index--;
					}
					return match;
				});

				// Apply env-specific formatting (colors, etc.)
				createDebug.formatArgs.call(self, args);

				const logFn = self.log || createDebug.log;
				logFn.apply(self, args);
			}

			debug.namespace = namespace;
			debug.useColors = createDebug.useColors();
			debug.color = createDebug.selectColor(namespace);
			debug.extend = extend;
			debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

			Object.defineProperty(debug, 'enabled', {
				enumerable: true,
				configurable: false,
				get: () => {
					if (enableOverride !== null) {
						return enableOverride;
					}
					if (namespacesCache !== createDebug.namespaces) {
						namespacesCache = createDebug.namespaces;
						enabledCache = createDebug.enabled(namespace);
					}

					return enabledCache;
				},
				set: v => {
					enableOverride = v;
				}
			});

			// Env-specific initialization logic for debug instances
			if (typeof createDebug.init === 'function') {
				createDebug.init(debug);
			}

			return debug;
		}

		function extend(namespace, delimiter) {
			const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
			newDebug.log = this.log;
			return newDebug;
		}

		/**
		* Enables a debug mode by namespaces. This can include modes
		* separated by a colon and wildcards.
		*
		* @param {String} namespaces
		* @api public
		*/
		function enable(namespaces) {
			createDebug.save(namespaces);
			createDebug.namespaces = namespaces;

			createDebug.names = [];
			createDebug.skips = [];

			let i;
			const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
			const len = split.length;

			for (i = 0; i < len; i++) {
				if (!split[i]) {
					// ignore empty strings
					continue;
				}

				namespaces = split[i].replace(/\*/g, '.*?');

				if (namespaces[0] === '-') {
					createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
				} else {
					createDebug.names.push(new RegExp('^' + namespaces + '$'));
				}
			}
		}

		/**
		* Disable debug output.
		*
		* @return {String} namespaces
		* @api public
		*/
		function disable() {
			const namespaces = [
				...createDebug.names.map(toNamespace),
				...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
			].join(',');
			createDebug.enable('');
			return namespaces;
		}

		/**
		* Returns true if the given mode name is enabled, false otherwise.
		*
		* @param {String} name
		* @return {Boolean}
		* @api public
		*/
		function enabled(name) {
			if (name[name.length - 1] === '*') {
				return true;
			}

			let i;
			let len;

			for (i = 0, len = createDebug.skips.length; i < len; i++) {
				if (createDebug.skips[i].test(name)) {
					return false;
				}
			}

			for (i = 0, len = createDebug.names.length; i < len; i++) {
				if (createDebug.names[i].test(name)) {
					return true;
				}
			}

			return false;
		}

		/**
		* Convert regexp to namespace
		*
		* @param {RegExp} regxep
		* @return {String} namespace
		* @api private
		*/
		function toNamespace(regexp) {
			return regexp.toString()
				.substring(2, regexp.toString().length - 2)
				.replace(/\.\*\?$/, '*');
		}

		/**
		* Coerce `val`.
		*
		* @param {Mixed} val
		* @return {Mixed}
		* @api private
		*/
		function coerce(val) {
			if (val instanceof Error) {
				return val.stack || val.message;
			}
			return val;
		}

		/**
		* XXX DO NOT USE. This is a temporary stub function.
		* XXX It WILL be removed in the next major release.
		*/
		function destroy() {
			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
		}

		createDebug.enable(createDebug.load());

		return createDebug;
	}

	common = setup;
	return common;
}

/* eslint-env browser */

var hasRequiredBrowser;

function requireBrowser () {
	if (hasRequiredBrowser) return browser$1.exports;
	hasRequiredBrowser = 1;
	(function (module, exports) {
		/**
		 * This is the web browser implementation of `debug()`.
		 */

		exports.formatArgs = formatArgs;
		exports.save = save;
		exports.load = load;
		exports.useColors = useColors;
		exports.storage = localstorage();
		exports.destroy = (() => {
			let warned = false;

			return () => {
				if (!warned) {
					warned = true;
					console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
				}
			};
		})();

		/**
		 * Colors.
		 */

		exports.colors = [
			'#0000CC',
			'#0000FF',
			'#0033CC',
			'#0033FF',
			'#0066CC',
			'#0066FF',
			'#0099CC',
			'#0099FF',
			'#00CC00',
			'#00CC33',
			'#00CC66',
			'#00CC99',
			'#00CCCC',
			'#00CCFF',
			'#3300CC',
			'#3300FF',
			'#3333CC',
			'#3333FF',
			'#3366CC',
			'#3366FF',
			'#3399CC',
			'#3399FF',
			'#33CC00',
			'#33CC33',
			'#33CC66',
			'#33CC99',
			'#33CCCC',
			'#33CCFF',
			'#6600CC',
			'#6600FF',
			'#6633CC',
			'#6633FF',
			'#66CC00',
			'#66CC33',
			'#9900CC',
			'#9900FF',
			'#9933CC',
			'#9933FF',
			'#99CC00',
			'#99CC33',
			'#CC0000',
			'#CC0033',
			'#CC0066',
			'#CC0099',
			'#CC00CC',
			'#CC00FF',
			'#CC3300',
			'#CC3333',
			'#CC3366',
			'#CC3399',
			'#CC33CC',
			'#CC33FF',
			'#CC6600',
			'#CC6633',
			'#CC9900',
			'#CC9933',
			'#CCCC00',
			'#CCCC33',
			'#FF0000',
			'#FF0033',
			'#FF0066',
			'#FF0099',
			'#FF00CC',
			'#FF00FF',
			'#FF3300',
			'#FF3333',
			'#FF3366',
			'#FF3399',
			'#FF33CC',
			'#FF33FF',
			'#FF6600',
			'#FF6633',
			'#FF9900',
			'#FF9933',
			'#FFCC00',
			'#FFCC33'
		];

		/**
		 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
		 * and the Firebug extension (any Firefox version) are known
		 * to support "%c" CSS customizations.
		 *
		 * TODO: add a `localStorage` variable to explicitly enable/disable colors
		 */

		// eslint-disable-next-line complexity
		function useColors() {
			// NB: In an Electron preload script, document will be defined but not fully
			// initialized. Since we know we're in Chrome, we'll just detect this case
			// explicitly
			if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
				return true;
			}

			// Internet Explorer and Edge do not support colors.
			if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
				return false;
			}

			// Is webkit? http://stackoverflow.com/a/16459606/376773
			// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
			return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
				// Is firebug? http://stackoverflow.com/a/398120/376773
				(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
				// Is firefox >= v31?
				// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
				(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
				// Double check webkit in userAgent just in case we are in a worker
				(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
		}

		/**
		 * Colorize log arguments if enabled.
		 *
		 * @api public
		 */

		function formatArgs(args) {
			args[0] = (this.useColors ? '%c' : '') +
				this.namespace +
				(this.useColors ? ' %c' : ' ') +
				args[0] +
				(this.useColors ? '%c ' : ' ') +
				'+' + module.exports.humanize(this.diff);

			if (!this.useColors) {
				return;
			}

			const c = 'color: ' + this.color;
			args.splice(1, 0, c, 'color: inherit');

			// The final "%c" is somewhat tricky, because there could be other
			// arguments passed either before or after the %c, so we need to
			// figure out the correct index to insert the CSS into
			let index = 0;
			let lastC = 0;
			args[0].replace(/%[a-zA-Z%]/g, match => {
				if (match === '%%') {
					return;
				}
				index++;
				if (match === '%c') {
					// We only are interested in the *last* %c
					// (the user may have provided their own)
					lastC = index;
				}
			});

			args.splice(lastC, 0, c);
		}

		/**
		 * Invokes `console.debug()` when available.
		 * No-op when `console.debug` is not a "function".
		 * If `console.debug` is not available, falls back
		 * to `console.log`.
		 *
		 * @api public
		 */
		exports.log = console.debug || console.log || (() => {});

		/**
		 * Save `namespaces`.
		 *
		 * @param {String} namespaces
		 * @api private
		 */
		function save(namespaces) {
			try {
				if (namespaces) {
					exports.storage.setItem('debug', namespaces);
				} else {
					exports.storage.removeItem('debug');
				}
			} catch (error) {
				// Swallow
				// XXX (@Qix-) should we be logging these?
			}
		}

		/**
		 * Load `namespaces`.
		 *
		 * @return {String} returns the previously persisted debug modes
		 * @api private
		 */
		function load() {
			let r;
			try {
				r = exports.storage.getItem('debug');
			} catch (error) {
				// Swallow
				// XXX (@Qix-) should we be logging these?
			}

			// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
			if (!r && typeof process !== 'undefined' && 'env' in process) {
				r = process.env.DEBUG;
			}

			return r;
		}

		/**
		 * Localstorage attempts to return the localstorage.
		 *
		 * This is necessary because safari throws
		 * when a user disables cookies/localstorage
		 * and you attempt to access it.
		 *
		 * @return {LocalStorage}
		 * @api private
		 */

		function localstorage() {
			try {
				// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
				// The Browser also has localStorage in the global context.
				return localStorage;
			} catch (error) {
				// Swallow
				// XXX (@Qix-) should we be logging these?
			}
		}

		module.exports = requireCommon()(exports);

		const {formatters} = module.exports;

		/**
		 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
		 */

		formatters.j = function (v) {
			try {
				return JSON.stringify(v);
			} catch (error) {
				return '[UnexpectedJSONParseError]: ' + error.message;
			}
		}; 
	} (browser$1, browser$1.exports));
	return browser$1.exports;
}

var node$1 = {exports: {}};

var hasFlag;
var hasRequiredHasFlag;

function requireHasFlag () {
	if (hasRequiredHasFlag) return hasFlag;
	hasRequiredHasFlag = 1;
	hasFlag = (flag, argv) => {
		argv = argv || process.argv;
		const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
		const pos = argv.indexOf(prefix + flag);
		const terminatorPos = argv.indexOf('--');
		return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
	};
	return hasFlag;
}

var supportsColor_1;
var hasRequiredSupportsColor;

function requireSupportsColor () {
	if (hasRequiredSupportsColor) return supportsColor_1;
	hasRequiredSupportsColor = 1;
	const os = require$$0$3;
	const hasFlag = requireHasFlag();

	const env = process.env;

	let forceColor;
	if (hasFlag('no-color') ||
		hasFlag('no-colors') ||
		hasFlag('color=false')) {
		forceColor = false;
	} else if (hasFlag('color') ||
		hasFlag('colors') ||
		hasFlag('color=true') ||
		hasFlag('color=always')) {
		forceColor = true;
	}
	if ('FORCE_COLOR' in env) {
		forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
	}

	function translateLevel(level) {
		if (level === 0) {
			return false;
		}

		return {
			level,
			hasBasic: true,
			has256: level >= 2,
			has16m: level >= 3
		};
	}

	function supportsColor(stream) {
		if (forceColor === false) {
			return 0;
		}

		if (hasFlag('color=16m') ||
			hasFlag('color=full') ||
			hasFlag('color=truecolor')) {
			return 3;
		}

		if (hasFlag('color=256')) {
			return 2;
		}

		if (stream && !stream.isTTY && forceColor !== true) {
			return 0;
		}

		const min = forceColor ? 1 : 0;

		if (process.platform === 'win32') {
			// Node.js 7.5.0 is the first version of Node.js to include a patch to
			// libuv that enables 256 color output on Windows. Anything earlier and it
			// won't work. However, here we target Node.js 8 at minimum as it is an LTS
			// release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
			// release that supports 256 colors. Windows 10 build 14931 is the first release
			// that supports 16m/TrueColor.
			const osRelease = os.release().split('.');
			if (
				Number(process.versions.node.split('.')[0]) >= 8 &&
				Number(osRelease[0]) >= 10 &&
				Number(osRelease[2]) >= 10586
			) {
				return Number(osRelease[2]) >= 14931 ? 3 : 2;
			}

			return 1;
		}

		if ('CI' in env) {
			if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
				return 1;
			}

			return min;
		}

		if ('TEAMCITY_VERSION' in env) {
			return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
		}

		if (env.COLORTERM === 'truecolor') {
			return 3;
		}

		if ('TERM_PROGRAM' in env) {
			const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

			switch (env.TERM_PROGRAM) {
				case 'iTerm.app':
					return version >= 3 ? 3 : 2;
				case 'Apple_Terminal':
					return 2;
				// No default
			}
		}

		if (/-256(color)?$/i.test(env.TERM)) {
			return 2;
		}

		if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
			return 1;
		}

		if ('COLORTERM' in env) {
			return 1;
		}

		if (env.TERM === 'dumb') {
			return min;
		}

		return min;
	}

	function getSupportLevel(stream) {
		const level = supportsColor(stream);
		return translateLevel(level);
	}

	supportsColor_1 = {
		supportsColor: getSupportLevel,
		stdout: getSupportLevel(process.stdout),
		stderr: getSupportLevel(process.stderr)
	};
	return supportsColor_1;
}

/**
 * Module dependencies.
 */

var hasRequiredNode;

function requireNode () {
	if (hasRequiredNode) return node$1.exports;
	hasRequiredNode = 1;
	(function (module, exports) {
		const tty = require$$0$4;
		const util = require$$1$1;

		/**
		 * This is the Node.js implementation of `debug()`.
		 */

		exports.init = init;
		exports.log = log;
		exports.formatArgs = formatArgs;
		exports.save = save;
		exports.load = load;
		exports.useColors = useColors;
		exports.destroy = util.deprecate(
			() => {},
			'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
		);

		/**
		 * Colors.
		 */

		exports.colors = [6, 2, 3, 4, 5, 1];

		try {
			// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
			// eslint-disable-next-line import/no-extraneous-dependencies
			const supportsColor = requireSupportsColor();

			if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
				exports.colors = [
					20,
					21,
					26,
					27,
					32,
					33,
					38,
					39,
					40,
					41,
					42,
					43,
					44,
					45,
					56,
					57,
					62,
					63,
					68,
					69,
					74,
					75,
					76,
					77,
					78,
					79,
					80,
					81,
					92,
					93,
					98,
					99,
					112,
					113,
					128,
					129,
					134,
					135,
					148,
					149,
					160,
					161,
					162,
					163,
					164,
					165,
					166,
					167,
					168,
					169,
					170,
					171,
					172,
					173,
					178,
					179,
					184,
					185,
					196,
					197,
					198,
					199,
					200,
					201,
					202,
					203,
					204,
					205,
					206,
					207,
					208,
					209,
					214,
					215,
					220,
					221
				];
			}
		} catch (error) {
			// Swallow - we only care if `supports-color` is available; it doesn't have to be.
		}

		/**
		 * Build up the default `inspectOpts` object from the environment variables.
		 *
		 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
		 */

		exports.inspectOpts = Object.keys(process.env).filter(key => {
			return /^debug_/i.test(key);
		}).reduce((obj, key) => {
			// Camel-case
			const prop = key
				.substring(6)
				.toLowerCase()
				.replace(/_([a-z])/g, (_, k) => {
					return k.toUpperCase();
				});

			// Coerce string value into JS value
			let val = process.env[key];
			if (/^(yes|on|true|enabled)$/i.test(val)) {
				val = true;
			} else if (/^(no|off|false|disabled)$/i.test(val)) {
				val = false;
			} else if (val === 'null') {
				val = null;
			} else {
				val = Number(val);
			}

			obj[prop] = val;
			return obj;
		}, {});

		/**
		 * Is stdout a TTY? Colored output is enabled when `true`.
		 */

		function useColors() {
			return 'colors' in exports.inspectOpts ?
				Boolean(exports.inspectOpts.colors) :
				tty.isatty(process.stderr.fd);
		}

		/**
		 * Adds ANSI color escape codes if enabled.
		 *
		 * @api public
		 */

		function formatArgs(args) {
			const {namespace: name, useColors} = this;

			if (useColors) {
				const c = this.color;
				const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
				const prefix = `  ${colorCode};1m${name} \u001B[0m`;

				args[0] = prefix + args[0].split('\n').join('\n' + prefix);
				args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
			} else {
				args[0] = getDate() + name + ' ' + args[0];
			}
		}

		function getDate() {
			if (exports.inspectOpts.hideDate) {
				return '';
			}
			return new Date().toISOString() + ' ';
		}

		/**
		 * Invokes `util.format()` with the specified arguments and writes to stderr.
		 */

		function log(...args) {
			return process.stderr.write(util.format(...args) + '\n');
		}

		/**
		 * Save `namespaces`.
		 *
		 * @param {String} namespaces
		 * @api private
		 */
		function save(namespaces) {
			if (namespaces) {
				process.env.DEBUG = namespaces;
			} else {
				// If you set a process.env field to null or undefined, it gets cast to the
				// string 'null' or 'undefined'. Just delete instead.
				delete process.env.DEBUG;
			}
		}

		/**
		 * Load `namespaces`.
		 *
		 * @return {String} returns the previously persisted debug modes
		 * @api private
		 */

		function load() {
			return process.env.DEBUG;
		}

		/**
		 * Init logic for `debug` instances.
		 *
		 * Create a new `inspectOpts` object in case `useColors` is set
		 * differently for a particular `debug` instance.
		 */

		function init(debug) {
			debug.inspectOpts = {};

			const keys = Object.keys(exports.inspectOpts);
			for (let i = 0; i < keys.length; i++) {
				debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
			}
		}

		module.exports = requireCommon()(exports);

		const {formatters} = module.exports;

		/**
		 * Map %o to `util.inspect()`, all on a single line.
		 */

		formatters.o = function (v) {
			this.inspectOpts.colors = this.useColors;
			return util.inspect(v, this.inspectOpts)
				.split('\n')
				.map(str => str.trim())
				.join(' ');
		};

		/**
		 * Map %O to `util.inspect()`, allowing multiple lines if needed.
		 */

		formatters.O = function (v) {
			this.inspectOpts.colors = this.useColors;
			return util.inspect(v, this.inspectOpts);
		}; 
	} (node$1, node$1.exports));
	return node$1.exports;
}

/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */

var hasRequiredSrc;

function requireSrc () {
	if (hasRequiredSrc) return src.exports;
	hasRequiredSrc = 1;
	if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
		src.exports = requireBrowser();
	} else {
		src.exports = requireNode();
	}
	return src.exports;
}

var debug_1;
var hasRequiredDebug;

function requireDebug () {
	if (hasRequiredDebug) return debug_1;
	hasRequiredDebug = 1;
	var debug;

	debug_1 = function () {
	  if (!debug) {
	    try {
	      /* eslint global-require: off */
	      debug = requireSrc()("follow-redirects");
	    }
	    catch (error) { /* */ }
	    if (typeof debug !== "function") {
	      debug = function () { /* */ };
	    }
	  }
	  debug.apply(null, arguments);
	};
	return debug_1;
}

var hasRequiredFollowRedirects;

function requireFollowRedirects () {
	if (hasRequiredFollowRedirects) return followRedirects.exports;
	hasRequiredFollowRedirects = 1;
	var url = require$$7;
	var URL = url.URL;
	var http = require$$1$2;
	var https = require$$2;
	var Writable = require$$0$5.Writable;
	var assert = require$$4;
	var debug = requireDebug();

	// Create handlers that pass events from native requests
	var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
	var eventHandlers = Object.create(null);
	events.forEach(function (event) {
	  eventHandlers[event] = function (arg1, arg2, arg3) {
	    this._redirectable.emit(event, arg1, arg2, arg3);
	  };
	});

	var InvalidUrlError = createErrorType(
	  "ERR_INVALID_URL",
	  "Invalid URL",
	  TypeError
	);
	// Error types with codes
	var RedirectionError = createErrorType(
	  "ERR_FR_REDIRECTION_FAILURE",
	  "Redirected request failed"
	);
	var TooManyRedirectsError = createErrorType(
	  "ERR_FR_TOO_MANY_REDIRECTS",
	  "Maximum number of redirects exceeded"
	);
	var MaxBodyLengthExceededError = createErrorType(
	  "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
	  "Request body larger than maxBodyLength limit"
	);
	var WriteAfterEndError = createErrorType(
	  "ERR_STREAM_WRITE_AFTER_END",
	  "write after end"
	);

	// An HTTP(S) request that can be redirected
	function RedirectableRequest(options, responseCallback) {
	  // Initialize the request
	  Writable.call(this);
	  this._sanitizeOptions(options);
	  this._options = options;
	  this._ended = false;
	  this._ending = false;
	  this._redirectCount = 0;
	  this._redirects = [];
	  this._requestBodyLength = 0;
	  this._requestBodyBuffers = [];

	  // Attach a callback if passed
	  if (responseCallback) {
	    this.on("response", responseCallback);
	  }

	  // React to responses of native requests
	  var self = this;
	  this._onNativeResponse = function (response) {
	    self._processResponse(response);
	  };

	  // Perform the first request
	  this._performRequest();
	}
	RedirectableRequest.prototype = Object.create(Writable.prototype);

	RedirectableRequest.prototype.abort = function () {
	  abortRequest(this._currentRequest);
	  this.emit("abort");
	};

	// Writes buffered data to the current native request
	RedirectableRequest.prototype.write = function (data, encoding, callback) {
	  // Writing is not allowed if end has been called
	  if (this._ending) {
	    throw new WriteAfterEndError();
	  }

	  // Validate input and shift parameters if necessary
	  if (!isString(data) && !isBuffer(data)) {
	    throw new TypeError("data should be a string, Buffer or Uint8Array");
	  }
	  if (isFunction(encoding)) {
	    callback = encoding;
	    encoding = null;
	  }

	  // Ignore empty buffers, since writing them doesn't invoke the callback
	  // https://github.com/nodejs/node/issues/22066
	  if (data.length === 0) {
	    if (callback) {
	      callback();
	    }
	    return;
	  }
	  // Only write when we don't exceed the maximum body length
	  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
	    this._requestBodyLength += data.length;
	    this._requestBodyBuffers.push({ data: data, encoding: encoding });
	    this._currentRequest.write(data, encoding, callback);
	  }
	  // Error when we exceed the maximum body length
	  else {
	    this.emit("error", new MaxBodyLengthExceededError());
	    this.abort();
	  }
	};

	// Ends the current native request
	RedirectableRequest.prototype.end = function (data, encoding, callback) {
	  // Shift parameters if necessary
	  if (isFunction(data)) {
	    callback = data;
	    data = encoding = null;
	  }
	  else if (isFunction(encoding)) {
	    callback = encoding;
	    encoding = null;
	  }

	  // Write data if needed and end
	  if (!data) {
	    this._ended = this._ending = true;
	    this._currentRequest.end(null, null, callback);
	  }
	  else {
	    var self = this;
	    var currentRequest = this._currentRequest;
	    this.write(data, encoding, function () {
	      self._ended = true;
	      currentRequest.end(null, null, callback);
	    });
	    this._ending = true;
	  }
	};

	// Sets a header value on the current native request
	RedirectableRequest.prototype.setHeader = function (name, value) {
	  this._options.headers[name] = value;
	  this._currentRequest.setHeader(name, value);
	};

	// Clears a header value on the current native request
	RedirectableRequest.prototype.removeHeader = function (name) {
	  delete this._options.headers[name];
	  this._currentRequest.removeHeader(name);
	};

	// Global timeout for all underlying requests
	RedirectableRequest.prototype.setTimeout = function (msecs, callback) {
	  var self = this;

	  // Destroys the socket on timeout
	  function destroyOnTimeout(socket) {
	    socket.setTimeout(msecs);
	    socket.removeListener("timeout", socket.destroy);
	    socket.addListener("timeout", socket.destroy);
	  }

	  // Sets up a timer to trigger a timeout event
	  function startTimer(socket) {
	    if (self._timeout) {
	      clearTimeout(self._timeout);
	    }
	    self._timeout = setTimeout(function () {
	      self.emit("timeout");
	      clearTimer();
	    }, msecs);
	    destroyOnTimeout(socket);
	  }

	  // Stops a timeout from triggering
	  function clearTimer() {
	    // Clear the timeout
	    if (self._timeout) {
	      clearTimeout(self._timeout);
	      self._timeout = null;
	    }

	    // Clean up all attached listeners
	    self.removeListener("abort", clearTimer);
	    self.removeListener("error", clearTimer);
	    self.removeListener("response", clearTimer);
	    if (callback) {
	      self.removeListener("timeout", callback);
	    }
	    if (!self.socket) {
	      self._currentRequest.removeListener("socket", startTimer);
	    }
	  }

	  // Attach callback if passed
	  if (callback) {
	    this.on("timeout", callback);
	  }

	  // Start the timer if or when the socket is opened
	  if (this.socket) {
	    startTimer(this.socket);
	  }
	  else {
	    this._currentRequest.once("socket", startTimer);
	  }

	  // Clean up on events
	  this.on("socket", destroyOnTimeout);
	  this.on("abort", clearTimer);
	  this.on("error", clearTimer);
	  this.on("response", clearTimer);

	  return this;
	};

	// Proxy all other public ClientRequest methods
	[
	  "flushHeaders", "getHeader",
	  "setNoDelay", "setSocketKeepAlive",
	].forEach(function (method) {
	  RedirectableRequest.prototype[method] = function (a, b) {
	    return this._currentRequest[method](a, b);
	  };
	});

	// Proxy all public ClientRequest properties
	["aborted", "connection", "socket"].forEach(function (property) {
	  Object.defineProperty(RedirectableRequest.prototype, property, {
	    get: function () { return this._currentRequest[property]; },
	  });
	});

	RedirectableRequest.prototype._sanitizeOptions = function (options) {
	  // Ensure headers are always present
	  if (!options.headers) {
	    options.headers = {};
	  }

	  // Since http.request treats host as an alias of hostname,
	  // but the url module interprets host as hostname plus port,
	  // eliminate the host property to avoid confusion.
	  if (options.host) {
	    // Use hostname if set, because it has precedence
	    if (!options.hostname) {
	      options.hostname = options.host;
	    }
	    delete options.host;
	  }

	  // Complete the URL object when necessary
	  if (!options.pathname && options.path) {
	    var searchPos = options.path.indexOf("?");
	    if (searchPos < 0) {
	      options.pathname = options.path;
	    }
	    else {
	      options.pathname = options.path.substring(0, searchPos);
	      options.search = options.path.substring(searchPos);
	    }
	  }
	};


	// Executes the next native request (initial or redirect)
	RedirectableRequest.prototype._performRequest = function () {
	  // Load the native protocol
	  var protocol = this._options.protocol;
	  var nativeProtocol = this._options.nativeProtocols[protocol];
	  if (!nativeProtocol) {
	    this.emit("error", new TypeError("Unsupported protocol " + protocol));
	    return;
	  }

	  // If specified, use the agent corresponding to the protocol
	  // (HTTP and HTTPS use different types of agents)
	  if (this._options.agents) {
	    var scheme = protocol.slice(0, -1);
	    this._options.agent = this._options.agents[scheme];
	  }

	  // Create the native request and set up its event handlers
	  var request = this._currentRequest =
	        nativeProtocol.request(this._options, this._onNativeResponse);
	  request._redirectable = this;
	  for (var event of events) {
	    request.on(event, eventHandlers[event]);
	  }

	  // RFC7230§5.3.1: When making a request directly to an origin server, […]
	  // a client MUST send only the absolute path […] as the request-target.
	  this._currentUrl = /^\//.test(this._options.path) ?
	    url.format(this._options) :
	    // When making a request to a proxy, […]
	    // a client MUST send the target URI in absolute-form […].
	    this._options.path;

	  // End a redirected request
	  // (The first request must be ended explicitly with RedirectableRequest#end)
	  if (this._isRedirect) {
	    // Write the request entity and end
	    var i = 0;
	    var self = this;
	    var buffers = this._requestBodyBuffers;
	    (function writeNext(error) {
	      // Only write if this request has not been redirected yet
	      /* istanbul ignore else */
	      if (request === self._currentRequest) {
	        // Report any write errors
	        /* istanbul ignore if */
	        if (error) {
	          self.emit("error", error);
	        }
	        // Write the next buffer if there are still left
	        else if (i < buffers.length) {
	          var buffer = buffers[i++];
	          /* istanbul ignore else */
	          if (!request.finished) {
	            request.write(buffer.data, buffer.encoding, writeNext);
	          }
	        }
	        // End the request if `end` has been called on us
	        else if (self._ended) {
	          request.end();
	        }
	      }
	    }());
	  }
	};

	// Processes a response from the current native request
	RedirectableRequest.prototype._processResponse = function (response) {
	  // Store the redirected response
	  var statusCode = response.statusCode;
	  if (this._options.trackRedirects) {
	    this._redirects.push({
	      url: this._currentUrl,
	      headers: response.headers,
	      statusCode: statusCode,
	    });
	  }

	  // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
	  // that further action needs to be taken by the user agent in order to
	  // fulfill the request. If a Location header field is provided,
	  // the user agent MAY automatically redirect its request to the URI
	  // referenced by the Location field value,
	  // even if the specific status code is not understood.

	  // If the response is not a redirect; return it as-is
	  var location = response.headers.location;
	  if (!location || this._options.followRedirects === false ||
	      statusCode < 300 || statusCode >= 400) {
	    response.responseUrl = this._currentUrl;
	    response.redirects = this._redirects;
	    this.emit("response", response);

	    // Clean up
	    this._requestBodyBuffers = [];
	    return;
	  }

	  // The response is a redirect, so abort the current request
	  abortRequest(this._currentRequest);
	  // Discard the remainder of the response to avoid waiting for data
	  response.destroy();

	  // RFC7231§6.4: A client SHOULD detect and intervene
	  // in cyclical redirections (i.e., "infinite" redirection loops).
	  if (++this._redirectCount > this._options.maxRedirects) {
	    this.emit("error", new TooManyRedirectsError());
	    return;
	  }

	  // Store the request headers if applicable
	  var requestHeaders;
	  var beforeRedirect = this._options.beforeRedirect;
	  if (beforeRedirect) {
	    requestHeaders = Object.assign({
	      // The Host header was set by nativeProtocol.request
	      Host: response.req.getHeader("host"),
	    }, this._options.headers);
	  }

	  // RFC7231§6.4: Automatic redirection needs to done with
	  // care for methods not known to be safe, […]
	  // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change
	  // the request method from POST to GET for the subsequent request.
	  var method = this._options.method;
	  if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" ||
	      // RFC7231§6.4.4: The 303 (See Other) status code indicates that
	      // the server is redirecting the user agent to a different resource […]
	      // A user agent can perform a retrieval request targeting that URI
	      // (a GET or HEAD request if using HTTP) […]
	      (statusCode === 303) && !/^(?:GET|HEAD)$/.test(this._options.method)) {
	    this._options.method = "GET";
	    // Drop a possible entity and headers related to it
	    this._requestBodyBuffers = [];
	    removeMatchingHeaders(/^content-/i, this._options.headers);
	  }

	  // Drop the Host header, as the redirect might lead to a different host
	  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);

	  // If the redirect is relative, carry over the host of the last request
	  var currentUrlParts = url.parse(this._currentUrl);
	  var currentHost = currentHostHeader || currentUrlParts.host;
	  var currentUrl = /^\w+:/.test(location) ? this._currentUrl :
	    url.format(Object.assign(currentUrlParts, { host: currentHost }));

	  // Determine the URL of the redirection
	  var redirectUrl;
	  try {
	    redirectUrl = url.resolve(currentUrl, location);
	  }
	  catch (cause) {
	    this.emit("error", new RedirectionError({ cause: cause }));
	    return;
	  }

	  // Create the redirected request
	  debug("redirecting to", redirectUrl);
	  this._isRedirect = true;
	  var redirectUrlParts = url.parse(redirectUrl);
	  Object.assign(this._options, redirectUrlParts);

	  // Drop confidential headers when redirecting to a less secure protocol
	  // or to a different domain that is not a superdomain
	  if (redirectUrlParts.protocol !== currentUrlParts.protocol &&
	     redirectUrlParts.protocol !== "https:" ||
	     redirectUrlParts.host !== currentHost &&
	     !isSubdomain(redirectUrlParts.host, currentHost)) {
	    removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
	  }

	  // Evaluate the beforeRedirect callback
	  if (isFunction(beforeRedirect)) {
	    var responseDetails = {
	      headers: response.headers,
	      statusCode: statusCode,
	    };
	    var requestDetails = {
	      url: currentUrl,
	      method: method,
	      headers: requestHeaders,
	    };
	    try {
	      beforeRedirect(this._options, responseDetails, requestDetails);
	    }
	    catch (err) {
	      this.emit("error", err);
	      return;
	    }
	    this._sanitizeOptions(this._options);
	  }

	  // Perform the redirected request
	  try {
	    this._performRequest();
	  }
	  catch (cause) {
	    this.emit("error", new RedirectionError({ cause: cause }));
	  }
	};

	// Wraps the key/value object of protocols with redirect functionality
	function wrap(protocols) {
	  // Default settings
	  var exports = {
	    maxRedirects: 21,
	    maxBodyLength: 10 * 1024 * 1024,
	  };

	  // Wrap each protocol
	  var nativeProtocols = {};
	  Object.keys(protocols).forEach(function (scheme) {
	    var protocol = scheme + ":";
	    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
	    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);

	    // Executes a request, following redirects
	    function request(input, options, callback) {
	      // Parse parameters
	      if (isString(input)) {
	        var parsed;
	        try {
	          parsed = urlToOptions(new URL(input));
	        }
	        catch (err) {
	          /* istanbul ignore next */
	          parsed = url.parse(input);
	        }
	        if (!isString(parsed.protocol)) {
	          throw new InvalidUrlError({ input });
	        }
	        input = parsed;
	      }
	      else if (URL && (input instanceof URL)) {
	        input = urlToOptions(input);
	      }
	      else {
	        callback = options;
	        options = input;
	        input = { protocol: protocol };
	      }
	      if (isFunction(options)) {
	        callback = options;
	        options = null;
	      }

	      // Set defaults
	      options = Object.assign({
	        maxRedirects: exports.maxRedirects,
	        maxBodyLength: exports.maxBodyLength,
	      }, input, options);
	      options.nativeProtocols = nativeProtocols;
	      if (!isString(options.host) && !isString(options.hostname)) {
	        options.hostname = "::1";
	      }

	      assert.equal(options.protocol, protocol, "protocol mismatch");
	      debug("options", options);
	      return new RedirectableRequest(options, callback);
	    }

	    // Executes a GET request, following redirects
	    function get(input, options, callback) {
	      var wrappedRequest = wrappedProtocol.request(input, options, callback);
	      wrappedRequest.end();
	      return wrappedRequest;
	    }

	    // Expose the properties on the wrapped protocol
	    Object.defineProperties(wrappedProtocol, {
	      request: { value: request, configurable: true, enumerable: true, writable: true },
	      get: { value: get, configurable: true, enumerable: true, writable: true },
	    });
	  });
	  return exports;
	}

	/* istanbul ignore next */
	function noop() { /* empty */ }

	// from https://github.com/nodejs/node/blob/master/lib/internal/url.js
	function urlToOptions(urlObject) {
	  var options = {
	    protocol: urlObject.protocol,
	    hostname: urlObject.hostname.startsWith("[") ?
	      /* istanbul ignore next */
	      urlObject.hostname.slice(1, -1) :
	      urlObject.hostname,
	    hash: urlObject.hash,
	    search: urlObject.search,
	    pathname: urlObject.pathname,
	    path: urlObject.pathname + urlObject.search,
	    href: urlObject.href,
	  };
	  if (urlObject.port !== "") {
	    options.port = Number(urlObject.port);
	  }
	  return options;
	}

	function removeMatchingHeaders(regex, headers) {
	  var lastValue;
	  for (var header in headers) {
	    if (regex.test(header)) {
	      lastValue = headers[header];
	      delete headers[header];
	    }
	  }
	  return (lastValue === null || typeof lastValue === "undefined") ?
	    undefined : String(lastValue).trim();
	}

	function createErrorType(code, message, baseClass) {
	  // Create constructor
	  function CustomError(properties) {
	    Error.captureStackTrace(this, this.constructor);
	    Object.assign(this, properties || {});
	    this.code = code;
	    this.message = this.cause ? message + ": " + this.cause.message : message;
	  }

	  // Attach constructor and set default properties
	  CustomError.prototype = new (baseClass || Error)();
	  CustomError.prototype.constructor = CustomError;
	  CustomError.prototype.name = "Error [" + code + "]";
	  return CustomError;
	}

	function abortRequest(request) {
	  for (var event of events) {
	    request.removeListener(event, eventHandlers[event]);
	  }
	  request.on("error", noop);
	  request.abort();
	}

	function isSubdomain(subdomain, domain) {
	  assert(isString(subdomain) && isString(domain));
	  var dot = subdomain.length - domain.length - 1;
	  return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
	}

	function isString(value) {
	  return typeof value === "string" || value instanceof String;
	}

	function isFunction(value) {
	  return typeof value === "function";
	}

	function isBuffer(value) {
	  return typeof value === "object" && ("length" in value);
	}

	// Exports
	followRedirects.exports = wrap({ http: http, https: https });
	followRedirects.exports.wrap = wrap;
	return followRedirects.exports;
}

var _from = "axios@^0.21.2";
var _id = "axios@0.21.4";
var _inBundle = false;
var _integrity = "sha512-ut5vewkiu8jjGBdqpM44XxjuCjq9LAKeHVmoVfHVzy8eHgxxq8SbAVQNovDA8mVi05kP0Ea/n/UzcSHcTJQfNg==";
var _location = "/axios";
var _phantomChildren = {
};
var _requested = {
	type: "range",
	registry: true,
	raw: "axios@^0.21.2",
	name: "axios",
	escapedName: "axios",
	rawSpec: "^0.21.2",
	saveSpec: null,
	fetchSpec: "^0.21.2"
};
var _requiredBy = [
	"/@cosmjs/tendermint-rpc"
];
var _resolved = "https://registry.npmjs.org/axios/-/axios-0.21.4.tgz";
var _shasum = "c67b90dc0568e5c1cf2b0b858c43ba28e2eda575";
var _spec = "axios@^0.21.2";
var _where = "/Users/albertorobles/Documents/Sandbox/coreumjs/node_modules/@cosmjs/tendermint-rpc";
var author = {
	name: "Matt Zabriskie"
};
var browser = {
	"./lib/adapters/http.js": "./lib/adapters/xhr.js"
};
var bugs = {
	url: "https://github.com/axios/axios/issues"
};
var bundleDependencies = false;
var bundlesize = [
	{
		path: "./dist/axios.min.js",
		threshold: "5kB"
	}
];
var dependencies = {
	"follow-redirects": "^1.14.0"
};
var deprecated = false;
var description = "Promise based HTTP client for the browser and node.js";
var devDependencies = {
	coveralls: "^3.0.0",
	"es6-promise": "^4.2.4",
	grunt: "^1.3.0",
	"grunt-banner": "^0.6.0",
	"grunt-cli": "^1.2.0",
	"grunt-contrib-clean": "^1.1.0",
	"grunt-contrib-watch": "^1.0.0",
	"grunt-eslint": "^23.0.0",
	"grunt-karma": "^4.0.0",
	"grunt-mocha-test": "^0.13.3",
	"grunt-ts": "^6.0.0-beta.19",
	"grunt-webpack": "^4.0.2",
	"istanbul-instrumenter-loader": "^1.0.0",
	"jasmine-core": "^2.4.1",
	karma: "^6.3.2",
	"karma-chrome-launcher": "^3.1.0",
	"karma-firefox-launcher": "^2.1.0",
	"karma-jasmine": "^1.1.1",
	"karma-jasmine-ajax": "^0.1.13",
	"karma-safari-launcher": "^1.0.0",
	"karma-sauce-launcher": "^4.3.6",
	"karma-sinon": "^1.0.5",
	"karma-sourcemap-loader": "^0.3.8",
	"karma-webpack": "^4.0.2",
	"load-grunt-tasks": "^3.5.2",
	minimist: "^1.2.0",
	mocha: "^8.2.1",
	sinon: "^4.5.0",
	"terser-webpack-plugin": "^4.2.3",
	typescript: "^4.0.5",
	"url-search-params": "^0.10.0",
	webpack: "^4.44.2",
	"webpack-dev-server": "^3.11.0"
};
var homepage = "https://axios-http.com";
var jsdelivr = "dist/axios.min.js";
var keywords = [
	"xhr",
	"http",
	"ajax",
	"promise",
	"node"
];
var license = "MIT";
var main = "index.js";
var name = "axios";
var repository = {
	type: "git",
	url: "git+https://github.com/axios/axios.git"
};
var scripts = {
	build: "NODE_ENV=production grunt build",
	coveralls: "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
	examples: "node ./examples/server.js",
	fix: "eslint --fix lib/**/*.js",
	postversion: "git push && git push --tags",
	preversion: "npm test",
	start: "node ./sandbox/server.js",
	test: "grunt test",
	version: "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json"
};
var typings = "./index.d.ts";
var unpkg = "dist/axios.min.js";
var version = "0.21.4";
var require$$0 = {
	_from: _from,
	_id: _id,
	_inBundle: _inBundle,
	_integrity: _integrity,
	_location: _location,
	_phantomChildren: _phantomChildren,
	_requested: _requested,
	_requiredBy: _requiredBy,
	_resolved: _resolved,
	_shasum: _shasum,
	_spec: _spec,
	_where: _where,
	author: author,
	browser: browser,
	bugs: bugs,
	bundleDependencies: bundleDependencies,
	bundlesize: bundlesize,
	dependencies: dependencies,
	deprecated: deprecated,
	description: description,
	devDependencies: devDependencies,
	homepage: homepage,
	jsdelivr: jsdelivr,
	keywords: keywords,
	license: license,
	main: main,
	name: name,
	repository: repository,
	scripts: scripts,
	typings: typings,
	unpkg: unpkg,
	version: version
};

var http_1$2;
var hasRequiredHttp;

function requireHttp () {
	if (hasRequiredHttp) return http_1$2;
	hasRequiredHttp = 1;

	var utils = utils$9;
	var settle = requireSettle();
	var buildFullPath = requireBuildFullPath();
	var buildURL = buildURL$1;
	var http = require$$1$2;
	var https = require$$2;
	var httpFollow = requireFollowRedirects().http;
	var httpsFollow = requireFollowRedirects().https;
	var url = require$$7;
	var zlib = require$$8;
	var pkg = require$$0;
	var createError = requireCreateError();
	var enhanceError = enhanceError$1;

	var isHttps = /https:?/;

	/**
	 *
	 * @param {http.ClientRequestArgs} options
	 * @param {AxiosProxyConfig} proxy
	 * @param {string} location
	 */
	function setProxy(options, proxy, location) {
	  options.hostname = proxy.host;
	  options.host = proxy.host;
	  options.port = proxy.port;
	  options.path = location;

	  // Basic proxy authorization
	  if (proxy.auth) {
	    var base64 = Buffer.from(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');
	    options.headers['Proxy-Authorization'] = 'Basic ' + base64;
	  }

	  // If a proxy is used, any redirects must also pass through the proxy
	  options.beforeRedirect = function beforeRedirect(redirection) {
	    redirection.headers.host = redirection.host;
	    setProxy(redirection, proxy, redirection.href);
	  };
	}

	/*eslint consistent-return:0*/
	http_1$2 = function httpAdapter(config) {
	  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {
	    var resolve = function resolve(value) {
	      resolvePromise(value);
	    };
	    var reject = function reject(value) {
	      rejectPromise(value);
	    };
	    var data = config.data;
	    var headers = config.headers;

	    // Set User-Agent (required by some servers)
	    // See https://github.com/axios/axios/issues/69
	    if ('User-Agent' in headers || 'user-agent' in headers) {
	      // User-Agent is specified; handle case where no UA header is desired
	      if (!headers['User-Agent'] && !headers['user-agent']) {
	        delete headers['User-Agent'];
	        delete headers['user-agent'];
	      }
	      // Otherwise, use specified value
	    } else {
	      // Only set header if it hasn't been set in config
	      headers['User-Agent'] = 'axios/' + pkg.version;
	    }

	    if (data && !utils.isStream(data)) {
	      if (Buffer.isBuffer(data)) ; else if (utils.isArrayBuffer(data)) {
	        data = Buffer.from(new Uint8Array(data));
	      } else if (utils.isString(data)) {
	        data = Buffer.from(data, 'utf-8');
	      } else {
	        return reject(createError(
	          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',
	          config
	        ));
	      }

	      // Add Content-Length header if data exists
	      headers['Content-Length'] = data.length;
	    }

	    // HTTP basic authentication
	    var auth = undefined;
	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password || '';
	      auth = username + ':' + password;
	    }

	    // Parse url
	    var fullPath = buildFullPath(config.baseURL, config.url);
	    var parsed = url.parse(fullPath);
	    var protocol = parsed.protocol || 'http:';

	    if (!auth && parsed.auth) {
	      var urlAuth = parsed.auth.split(':');
	      var urlUsername = urlAuth[0] || '';
	      var urlPassword = urlAuth[1] || '';
	      auth = urlUsername + ':' + urlPassword;
	    }

	    if (auth) {
	      delete headers.Authorization;
	    }

	    var isHttpsRequest = isHttps.test(protocol);
	    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;

	    var options = {
	      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, ''),
	      method: config.method.toUpperCase(),
	      headers: headers,
	      agent: agent,
	      agents: { http: config.httpAgent, https: config.httpsAgent },
	      auth: auth
	    };

	    if (config.socketPath) {
	      options.socketPath = config.socketPath;
	    } else {
	      options.hostname = parsed.hostname;
	      options.port = parsed.port;
	    }

	    var proxy = config.proxy;
	    if (!proxy && proxy !== false) {
	      var proxyEnv = protocol.slice(0, -1) + '_proxy';
	      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];
	      if (proxyUrl) {
	        var parsedProxyUrl = url.parse(proxyUrl);
	        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
	        var shouldProxy = true;

	        if (noProxyEnv) {
	          var noProxy = noProxyEnv.split(',').map(function trim(s) {
	            return s.trim();
	          });

	          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {
	            if (!proxyElement) {
	              return false;
	            }
	            if (proxyElement === '*') {
	              return true;
	            }
	            if (proxyElement[0] === '.' &&
	                parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {
	              return true;
	            }

	            return parsed.hostname === proxyElement;
	          });
	        }

	        if (shouldProxy) {
	          proxy = {
	            host: parsedProxyUrl.hostname,
	            port: parsedProxyUrl.port,
	            protocol: parsedProxyUrl.protocol
	          };

	          if (parsedProxyUrl.auth) {
	            var proxyUrlAuth = parsedProxyUrl.auth.split(':');
	            proxy.auth = {
	              username: proxyUrlAuth[0],
	              password: proxyUrlAuth[1]
	            };
	          }
	        }
	      }
	    }

	    if (proxy) {
	      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');
	      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);
	    }

	    var transport;
	    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);
	    if (config.transport) {
	      transport = config.transport;
	    } else if (config.maxRedirects === 0) {
	      transport = isHttpsProxy ? https : http;
	    } else {
	      if (config.maxRedirects) {
	        options.maxRedirects = config.maxRedirects;
	      }
	      transport = isHttpsProxy ? httpsFollow : httpFollow;
	    }

	    if (config.maxBodyLength > -1) {
	      options.maxBodyLength = config.maxBodyLength;
	    }

	    // Create the request
	    var req = transport.request(options, function handleResponse(res) {
	      if (req.aborted) return;

	      // uncompress the response body transparently if required
	      var stream = res;

	      // return the last request in case of redirects
	      var lastRequest = res.req || req;


	      // if no content, is HEAD request or decompress disabled we should not decompress
	      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {
	        switch (res.headers['content-encoding']) {
	        /*eslint default-case:0*/
	        case 'gzip':
	        case 'compress':
	        case 'deflate':
	        // add the unzipper to the body stream processing pipeline
	          stream = stream.pipe(zlib.createUnzip());

	          // remove the content-encoding in order to not confuse downstream operations
	          delete res.headers['content-encoding'];
	          break;
	        }
	      }

	      var response = {
	        status: res.statusCode,
	        statusText: res.statusMessage,
	        headers: res.headers,
	        config: config,
	        request: lastRequest
	      };

	      if (config.responseType === 'stream') {
	        response.data = stream;
	        settle(resolve, reject, response);
	      } else {
	        var responseBuffer = [];
	        var totalResponseBytes = 0;
	        stream.on('data', function handleStreamData(chunk) {
	          responseBuffer.push(chunk);
	          totalResponseBytes += chunk.length;

	          // make sure the content length is not over the maxContentLength if specified
	          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
	            stream.destroy();
	            reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded',
	              config, null, lastRequest));
	          }
	        });

	        stream.on('error', function handleStreamError(err) {
	          if (req.aborted) return;
	          reject(enhanceError(err, config, null, lastRequest));
	        });

	        stream.on('end', function handleStreamEnd() {
	          var responseData = Buffer.concat(responseBuffer);
	          if (config.responseType !== 'arraybuffer') {
	            responseData = responseData.toString(config.responseEncoding);
	            if (!config.responseEncoding || config.responseEncoding === 'utf8') {
	              responseData = utils.stripBOM(responseData);
	            }
	          }

	          response.data = responseData;
	          settle(resolve, reject, response);
	        });
	      }
	    });

	    // Handle errors
	    req.on('error', function handleRequestError(err) {
	      if (req.aborted && err.code !== 'ERR_FR_TOO_MANY_REDIRECTS') return;
	      reject(enhanceError(err, config, null, req));
	    });

	    // Handle request timeout
	    if (config.timeout) {
	      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.
	      var timeout = parseInt(config.timeout, 10);

	      if (isNaN(timeout)) {
	        reject(createError(
	          'error trying to parse `config.timeout` to int',
	          config,
	          'ERR_PARSE_TIMEOUT',
	          req
	        ));

	        return;
	      }

	      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.
	      // And timer callback will be fired, and abort() will be invoked before connection, then get "socket hang up" and code ECONNRESET.
	      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.
	      // And then these socket which be hang up will devoring CPU little by little.
	      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.
	      req.setTimeout(timeout, function handleRequestTimeout() {
	        req.abort();
	        reject(createError(
	          'timeout of ' + timeout + 'ms exceeded',
	          config,
	          config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
	          req
	        ));
	      });
	    }

	    if (config.cancelToken) {
	      // Handle cancellation
	      config.cancelToken.promise.then(function onCanceled(cancel) {
	        if (req.aborted) return;

	        req.abort();
	        reject(cancel);
	      });
	    }

	    // Send the request
	    if (utils.isStream(data)) {
	      data.on('error', function handleStreamError(err) {
	        reject(enhanceError(err, config, null, req));
	      }).pipe(req);
	    } else {
	      req.end(data);
	    }
	  });
	};
	return http_1$2;
}

var utils$5 = utils$9;
var normalizeHeaderName = normalizeHeaderName$1;
var enhanceError = enhanceError$1;

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils$5.isUndefined(headers) && utils$5.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = requireXhr();
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = requireHttp();
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils$5.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils$5.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults$3 = {

  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils$5.isFormData(data) ||
      utils$5.isArrayBuffer(data) ||
      utils$5.isBuffer(data) ||
      utils$5.isStream(data) ||
      utils$5.isFile(data) ||
      utils$5.isBlob(data)
    ) {
      return data;
    }
    if (utils$5.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils$5.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils$5.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils$5.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults$3.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils$5.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults$3.headers[method] = {};
});

utils$5.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults$3.headers[method] = utils$5.merge(DEFAULT_CONTENT_TYPE);
});

var defaults_1 = defaults$3;

var utils$4 = utils$9;
var defaults$2 = defaults_1;

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
var transformData$1 = function transformData(data, headers, fns) {
  var context = this || defaults$2;
  /*eslint no-param-reassign:0*/
  utils$4.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};

var isCancel$1;
var hasRequiredIsCancel;

function requireIsCancel () {
	if (hasRequiredIsCancel) return isCancel$1;
	hasRequiredIsCancel = 1;

	isCancel$1 = function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	};
	return isCancel$1;
}

var utils$3 = utils$9;
var transformData = transformData$1;
var isCancel = requireIsCancel();
var defaults$1 = defaults_1;

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
var dispatchRequest$1 = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils$3.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils$3.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults$1.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};

var utils$2 = utils$9;

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
var mergeConfig$2 = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
  var defaultToConfig2Keys = [
    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
  ];
  var directMergeKeys = ['validateStatus'];

  function getMergedValue(target, source) {
    if (utils$2.isPlainObject(target) && utils$2.isPlainObject(source)) {
      return utils$2.merge(target, source);
    } else if (utils$2.isPlainObject(source)) {
      return utils$2.merge({}, source);
    } else if (utils$2.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  function mergeDeepProperties(prop) {
    if (!utils$2.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils$2.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  }

  utils$2.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils$2.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    }
  });

  utils$2.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

  utils$2.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils$2.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    } else if (!utils$2.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  utils$2.forEach(directMergeKeys, function merge(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys)
    .concat(directMergeKeys);

  var otherKeys = Object
    .keys(config1)
    .concat(Object.keys(config2))
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils$2.forEach(otherKeys, mergeDeepProperties);

  return config;
};

var pkg = require$$0;

var validators$1 = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators$1[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};
var currentVerArr = pkg.version.split('.');

/**
 * Compare package versions
 * @param {string} version
 * @param {string?} thanVersion
 * @returns {boolean}
 */
function isOlderVersion(version, thanVersion) {
  var pkgVersionArr = thanVersion ? thanVersion.split('.') : currentVerArr;
  var destVer = version.split('.');
  for (var i = 0; i < 3; i++) {
    if (pkgVersionArr[i] > destVer[i]) {
      return true;
    } else if (pkgVersionArr[i] < destVer[i]) {
      return false;
    }
  }
  return false;
}

/**
 * Transitional option validator
 * @param {function|boolean?} validator
 * @param {string?} version
 * @param {string} message
 * @returns {function}
 */
validators$1.transitional = function transitional(validator, version, message) {
  var isDeprecated = version && isOlderVersion(version);

  function formatMessage(opt, desc) {
    return '[Axios v' + pkg.version + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed in ' + version));
    }

    if (isDeprecated && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

var validator$1 = {
  isOlderVersion: isOlderVersion,
  assertOptions: assertOptions,
  validators: validators$1
};

var utils$1 = utils$9;
var buildURL = buildURL$1;
var InterceptorManager = InterceptorManager_1;
var dispatchRequest = dispatchRequest$1;
var mergeConfig$1 = mergeConfig$2;
var validator = validator$1;

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios$1(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios$1.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig$1(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
      forcedJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
      clarifyTimeoutError: validators.transitional(validators.boolean, '1.0.0')
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios$1.prototype.getUri = function getUri(config) {
  config = mergeConfig$1(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils$1.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios$1.prototype[method] = function(url, config) {
    return this.request(mergeConfig$1(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils$1.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios$1.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig$1(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

var Axios_1 = Axios$1;

var Cancel_1;
var hasRequiredCancel;

function requireCancel () {
	if (hasRequiredCancel) return Cancel_1;
	hasRequiredCancel = 1;

	/**
	 * A `Cancel` is an object that is thrown when an operation is canceled.
	 *
	 * @class
	 * @param {string=} message The message.
	 */
	function Cancel(message) {
	  this.message = message;
	}

	Cancel.prototype.toString = function toString() {
	  return 'Cancel' + (this.message ? ': ' + this.message : '');
	};

	Cancel.prototype.__CANCEL__ = true;

	Cancel_1 = Cancel;
	return Cancel_1;
}

var CancelToken_1;
var hasRequiredCancelToken;

function requireCancelToken () {
	if (hasRequiredCancelToken) return CancelToken_1;
	hasRequiredCancelToken = 1;

	var Cancel = requireCancel();

	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @class
	 * @param {Function} executor The executor function.
	 */
	function CancelToken(executor) {
	  if (typeof executor !== 'function') {
	    throw new TypeError('executor must be a function.');
	  }

	  var resolvePromise;
	  this.promise = new Promise(function promiseExecutor(resolve) {
	    resolvePromise = resolve;
	  });

	  var token = this;
	  executor(function cancel(message) {
	    if (token.reason) {
	      // Cancellation has already been requested
	      return;
	    }

	    token.reason = new Cancel(message);
	    resolvePromise(token.reason);
	  });
	}

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	CancelToken.prototype.throwIfRequested = function throwIfRequested() {
	  if (this.reason) {
	    throw this.reason;
	  }
	};

	/**
	 * Returns an object that contains a new `CancelToken` and a function that, when called,
	 * cancels the `CancelToken`.
	 */
	CancelToken.source = function source() {
	  var cancel;
	  var token = new CancelToken(function executor(c) {
	    cancel = c;
	  });
	  return {
	    token: token,
	    cancel: cancel
	  };
	};

	CancelToken_1 = CancelToken;
	return CancelToken_1;
}

var spread;
var hasRequiredSpread;

function requireSpread () {
	if (hasRequiredSpread) return spread;
	hasRequiredSpread = 1;

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	spread = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};
	return spread;
}

var isAxiosError;
var hasRequiredIsAxiosError;

function requireIsAxiosError () {
	if (hasRequiredIsAxiosError) return isAxiosError;
	hasRequiredIsAxiosError = 1;

	/**
	 * Determines whether the payload is an error thrown by Axios
	 *
	 * @param {*} payload The value to test
	 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
	 */
	isAxiosError = function isAxiosError(payload) {
	  return (typeof payload === 'object') && (payload.isAxiosError === true);
	};
	return isAxiosError;
}

var utils = utils$9;
var bind = bind$2;
var Axios = Axios_1;
var mergeConfig = mergeConfig$2;
var defaults = defaults_1;

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios$1 = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios$1.Axios = Axios;

// Factory for creating new instances
axios$1.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios$1.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios$1.Cancel = requireCancel();
axios$1.CancelToken = requireCancelToken();
axios$1.isCancel = requireIsCancel();

// Expose all/spread
axios$1.all = function all(promises) {
  return Promise.all(promises);
};
axios$1.spread = requireSpread();

// Expose isAxiosError
axios$1.isAxiosError = requireIsAxiosError();

axios$2.exports = axios$1;

// Allow use of default import syntax in TypeScript
axios$2.exports.default = axios$1;

var axiosExports = axios$2.exports;

var axios = axiosExports;

var __importDefault$1 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(http$3, "__esModule", { value: true });
http$3.http = void 0;
const axios_1 = __importDefault$1(axios);
function filterBadStatus(res) {
    if (res.status >= 400) {
        throw new Error(`Bad status on response: ${res.status}`);
    }
    return res;
}
/**
 * Node.js 18 comes with exprimental fetch support (https://nodejs.org/de/blog/announcements/v18-release-announce/).
 * This is nice, but the implementation does not yet work wekk for us. We
 * can just stick with axios on those systems for now.
 */
// eslint-disable-next-line @typescript-eslint/ban-types
function isExperimental(nodeJsFunc) {
    // This works because we get this info in node 18:
    //
    // > fetch.toString()
    // 'async function fetch(input, init = undefined) {\n' +
    // "    emitExperimentalWarning('The Fetch API');\n" +
    // '    return lazyUndici().fetch(input, init);\n' +
    // '  }'
    return nodeJsFunc.toString().includes("emitExperimentalWarning");
}
/**
 * Helper to work around missing CORS support in Tendermint (https://github.com/tendermint/tendermint/pull/2800)
 *
 * For some reason, fetch does not complain about missing server-side CORS support.
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function http$2(method, url, headers, request) {
    if (typeof fetch === "function" && !isExperimental(fetch)) {
        const settings = {
            method: method,
            body: request ? JSON.stringify(request) : undefined,
            headers: {
                // eslint-disable-next-line @typescript-eslint/naming-convention
                "Content-Type": "application/json",
                ...headers,
            },
        };
        return fetch(url, settings)
            .then(filterBadStatus)
            .then((res) => res.json());
    }
    else {
        return axios_1.default
            .request({ url: url, method: method, data: request, headers: headers })
            .then((res) => res.data);
    }
}
http$3.http = http$2;

var rpcclient = {};

Object.defineProperty(rpcclient, "__esModule", { value: true });
rpcclient.hasProtocol = rpcclient.instanceOfRpcStreamingClient = void 0;
function instanceOfRpcStreamingClient(client) {
    return typeof client.listen === "function";
}
rpcclient.instanceOfRpcStreamingClient = instanceOfRpcStreamingClient;
// Helpers for all RPC clients
function hasProtocol(url) {
    return url.search("://") !== -1;
}
rpcclient.hasProtocol = hasProtocol;

Object.defineProperty(httpbatchclient, "__esModule", { value: true });
httpbatchclient.HttpBatchClient = void 0;
const json_rpc_1$2 = build$1;
const http_1$1 = http$3;
const rpcclient_1$2 = rpcclient;
// Those values are private and can change any time.
// Does a user need to know them? I don't think so. You either set
// a custom value or leave the option field unset.
const defaultHttpBatchClientOptions = {
    dispatchInterval: 20,
    batchSizeLimit: 20,
};
class HttpBatchClient {
    constructor(endpoint, options = {}) {
        this.queue = [];
        this.options = {
            batchSizeLimit: options.batchSizeLimit ?? defaultHttpBatchClientOptions.batchSizeLimit,
            dispatchInterval: options.dispatchInterval ?? defaultHttpBatchClientOptions.dispatchInterval,
        };
        if (typeof endpoint === "string") {
            // accept host.name:port and assume http protocol
            this.url = (0, rpcclient_1$2.hasProtocol)(endpoint) ? endpoint : "http://" + endpoint;
        }
        else {
            this.url = endpoint.url;
            this.headers = endpoint.headers;
        }
        this.timer = setInterval(() => this.tick(), options.dispatchInterval);
        this.validate();
    }
    disconnect() {
        this.timer && clearInterval(this.timer);
        this.timer = undefined;
    }
    async execute(request) {
        return new Promise((resolve, reject) => {
            this.queue.push({ request, resolve, reject });
            if (this.queue.length >= this.options.batchSizeLimit) {
                // this train is full, let's go
                this.tick();
            }
        });
    }
    validate() {
        if (!this.options.batchSizeLimit ||
            !Number.isSafeInteger(this.options.batchSizeLimit) ||
            this.options.batchSizeLimit < 1) {
            throw new Error("batchSizeLimit must be a safe integer >= 1");
        }
    }
    /**
     * This is called in an interval where promise rejections cannot be handled.
     * So this is not async and HTTP errors need to be handled by the queued promises.
     */
    tick() {
        // Avoid race conditions
        const batch = this.queue.splice(0, this.options.batchSizeLimit);
        if (!batch.length)
            return;
        const requests = batch.map((s) => s.request);
        const requestIds = requests.map((request) => request.id);
        (0, http_1$1.http)("POST", this.url, this.headers, requests).then((raw) => {
            // Requests with a single entry return as an object
            const arr = Array.isArray(raw) ? raw : [raw];
            arr.forEach((el) => {
                const req = batch.find((s) => s.request.id === el.id);
                if (!req)
                    return;
                const { reject, resolve } = req;
                const response = (0, json_rpc_1$2.parseJsonRpcResponse)(el);
                if ((0, json_rpc_1$2.isJsonRpcErrorResponse)(response)) {
                    reject(new Error(JSON.stringify(response.error)));
                }
                else {
                    resolve(response);
                }
            });
        }, (error) => {
            for (const requestId of requestIds) {
                const req = batch.find((s) => s.request.id === requestId);
                if (!req)
                    return;
                req.reject(error);
            }
        });
    }
}
httpbatchclient.HttpBatchClient = HttpBatchClient;

var httpclient = {};

Object.defineProperty(httpclient, "__esModule", { value: true });
httpclient.HttpClient = void 0;
const json_rpc_1$1 = build$1;
const http_1 = http$3;
const rpcclient_1$1 = rpcclient;
class HttpClient {
    constructor(endpoint) {
        if (typeof endpoint === "string") {
            // accept host.name:port and assume http protocol
            this.url = (0, rpcclient_1$1.hasProtocol)(endpoint) ? endpoint : "http://" + endpoint;
        }
        else {
            this.url = endpoint.url;
            this.headers = endpoint.headers;
        }
    }
    disconnect() {
        // nothing to be done
    }
    async execute(request) {
        const response = (0, json_rpc_1$1.parseJsonRpcResponse)(await (0, http_1.http)("POST", this.url, this.headers, request));
        if ((0, json_rpc_1$1.isJsonRpcErrorResponse)(response)) {
            throw new Error(JSON.stringify(response.error));
        }
        return response;
    }
}
httpclient.HttpClient = HttpClient;

var websocketclient = {};

var build = {};

var queueingstreamingsocket = {};

var streamingsocket = {};

var socketwrapper = {};

var bufferUtil$1 = {exports: {}};

var constants = {
  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],
  EMPTY_BUFFER: Buffer.alloc(0),
  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',
  kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),
  kListener: Symbol('kListener'),
  kStatusCode: Symbol('status-code'),
  kWebSocket: Symbol('websocket'),
  NOOP: () => {}
};

var unmask$1;
var mask;

const { EMPTY_BUFFER: EMPTY_BUFFER$3 } = constants;

const FastBuffer$2 = Buffer[Symbol.species];

/**
 * Merges an array of buffers into a new buffer.
 *
 * @param {Buffer[]} list The array of buffers to concat
 * @param {Number} totalLength The total length of buffers in the list
 * @return {Buffer} The resulting buffer
 * @public
 */
function concat$1(list, totalLength) {
  if (list.length === 0) return EMPTY_BUFFER$3;
  if (list.length === 1) return list[0];

  const target = Buffer.allocUnsafe(totalLength);
  let offset = 0;

  for (let i = 0; i < list.length; i++) {
    const buf = list[i];
    target.set(buf, offset);
    offset += buf.length;
  }

  if (offset < totalLength) {
    return new FastBuffer$2(target.buffer, target.byteOffset, offset);
  }

  return target;
}

/**
 * Masks a buffer using the given mask.
 *
 * @param {Buffer} source The buffer to mask
 * @param {Buffer} mask The mask to use
 * @param {Buffer} output The buffer where to store the result
 * @param {Number} offset The offset at which to start writing
 * @param {Number} length The number of bytes to mask.
 * @public
 */
function _mask(source, mask, output, offset, length) {
  for (let i = 0; i < length; i++) {
    output[offset + i] = source[i] ^ mask[i & 3];
  }
}

/**
 * Unmasks a buffer using the given mask.
 *
 * @param {Buffer} buffer The buffer to unmask
 * @param {Buffer} mask The mask to use
 * @public
 */
function _unmask(buffer, mask) {
  for (let i = 0; i < buffer.length; i++) {
    buffer[i] ^= mask[i & 3];
  }
}

/**
 * Converts a buffer to an `ArrayBuffer`.
 *
 * @param {Buffer} buf The buffer to convert
 * @return {ArrayBuffer} Converted buffer
 * @public
 */
function toArrayBuffer$1(buf) {
  if (buf.length === buf.buffer.byteLength) {
    return buf.buffer;
  }

  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);
}

/**
 * Converts `data` to a `Buffer`.
 *
 * @param {*} data The data to convert
 * @return {Buffer} The buffer
 * @throws {TypeError}
 * @public
 */
function toBuffer$2(data) {
  toBuffer$2.readOnly = true;

  if (Buffer.isBuffer(data)) return data;

  let buf;

  if (data instanceof ArrayBuffer) {
    buf = new FastBuffer$2(data);
  } else if (ArrayBuffer.isView(data)) {
    buf = new FastBuffer$2(data.buffer, data.byteOffset, data.byteLength);
  } else {
    buf = Buffer.from(data);
    toBuffer$2.readOnly = false;
  }

  return buf;
}

bufferUtil$1.exports = {
  concat: concat$1,
  mask: _mask,
  toArrayBuffer: toArrayBuffer$1,
  toBuffer: toBuffer$2,
  unmask: _unmask
};

/* istanbul ignore else  */
if (!process.env.WS_NO_BUFFER_UTIL) {
  try {
    const bufferUtil = require('bufferutil');

    mask = bufferUtil$1.exports.mask = function (source, mask, output, offset, length) {
      if (length < 48) _mask(source, mask, output, offset, length);
      else bufferUtil.mask(source, mask, output, offset, length);
    };

    unmask$1 = bufferUtil$1.exports.unmask = function (buffer, mask) {
      if (buffer.length < 32) _unmask(buffer, mask);
      else bufferUtil.unmask(buffer, mask);
    };
  } catch (e) {
    // Continue regardless of the error.
  }
}

var bufferUtilExports = bufferUtil$1.exports;

const kDone = Symbol('kDone');
const kRun = Symbol('kRun');

/**
 * A very simple job queue with adjustable concurrency. Adapted from
 * https://github.com/STRML/async-limiter
 */
let Limiter$1 = class Limiter {
  /**
   * Creates a new `Limiter`.
   *
   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed
   *     to run concurrently
   */
  constructor(concurrency) {
    this[kDone] = () => {
      this.pending--;
      this[kRun]();
    };
    this.concurrency = concurrency || Infinity;
    this.jobs = [];
    this.pending = 0;
  }

  /**
   * Adds a job to the queue.
   *
   * @param {Function} job The job to run
   * @public
   */
  add(job) {
    this.jobs.push(job);
    this[kRun]();
  }

  /**
   * Removes a job from the queue and runs it if possible.
   *
   * @private
   */
  [kRun]() {
    if (this.pending === this.concurrency) return;

    if (this.jobs.length) {
      const job = this.jobs.shift();

      this.pending++;
      job(this[kDone]);
    }
  }
};

var limiter = Limiter$1;

const zlib = require$$8;

const bufferUtil = bufferUtilExports;
const Limiter = limiter;
const { kStatusCode: kStatusCode$2 } = constants;

const FastBuffer$1 = Buffer[Symbol.species];
const TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);
const kPerMessageDeflate = Symbol('permessage-deflate');
const kTotalLength = Symbol('total-length');
const kCallback = Symbol('callback');
const kBuffers = Symbol('buffers');
const kError$1 = Symbol('error');

//
// We limit zlib concurrency, which prevents severe memory fragmentation
// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913
// and https://github.com/websockets/ws/issues/1202
//
// Intentionally global; it's the global thread pool that's an issue.
//
let zlibLimiter;

/**
 * permessage-deflate implementation.
 */
let PerMessageDeflate$4 = class PerMessageDeflate {
  /**
   * Creates a PerMessageDeflate instance.
   *
   * @param {Object} [options] Configuration options
   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support
   *     for, or request, a custom client window size
   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/
   *     acknowledge disabling of client context takeover
   * @param {Number} [options.concurrencyLimit=10] The number of concurrent
   *     calls to zlib
   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the
   *     use of a custom server window size
   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept
   *     disabling of server context takeover
   * @param {Number} [options.threshold=1024] Size (in bytes) below which
   *     messages should not be compressed if context takeover is disabled
   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on
   *     deflate
   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on
   *     inflate
   * @param {Boolean} [isServer=false] Create the instance in either server or
   *     client mode
   * @param {Number} [maxPayload=0] The maximum allowed message length
   */
  constructor(options, isServer, maxPayload) {
    this._maxPayload = maxPayload | 0;
    this._options = options || {};
    this._threshold =
      this._options.threshold !== undefined ? this._options.threshold : 1024;
    this._isServer = !!isServer;
    this._deflate = null;
    this._inflate = null;

    this.params = null;

    if (!zlibLimiter) {
      const concurrency =
        this._options.concurrencyLimit !== undefined
          ? this._options.concurrencyLimit
          : 10;
      zlibLimiter = new Limiter(concurrency);
    }
  }

  /**
   * @type {String}
   */
  static get extensionName() {
    return 'permessage-deflate';
  }

  /**
   * Create an extension negotiation offer.
   *
   * @return {Object} Extension parameters
   * @public
   */
  offer() {
    const params = {};

    if (this._options.serverNoContextTakeover) {
      params.server_no_context_takeover = true;
    }
    if (this._options.clientNoContextTakeover) {
      params.client_no_context_takeover = true;
    }
    if (this._options.serverMaxWindowBits) {
      params.server_max_window_bits = this._options.serverMaxWindowBits;
    }
    if (this._options.clientMaxWindowBits) {
      params.client_max_window_bits = this._options.clientMaxWindowBits;
    } else if (this._options.clientMaxWindowBits == null) {
      params.client_max_window_bits = true;
    }

    return params;
  }

  /**
   * Accept an extension negotiation offer/response.
   *
   * @param {Array} configurations The extension negotiation offers/reponse
   * @return {Object} Accepted configuration
   * @public
   */
  accept(configurations) {
    configurations = this.normalizeParams(configurations);

    this.params = this._isServer
      ? this.acceptAsServer(configurations)
      : this.acceptAsClient(configurations);

    return this.params;
  }

  /**
   * Releases all resources used by the extension.
   *
   * @public
   */
  cleanup() {
    if (this._inflate) {
      this._inflate.close();
      this._inflate = null;
    }

    if (this._deflate) {
      const callback = this._deflate[kCallback];

      this._deflate.close();
      this._deflate = null;

      if (callback) {
        callback(
          new Error(
            'The deflate stream was closed while data was being processed'
          )
        );
      }
    }
  }

  /**
   *  Accept an extension negotiation offer.
   *
   * @param {Array} offers The extension negotiation offers
   * @return {Object} Accepted configuration
   * @private
   */
  acceptAsServer(offers) {
    const opts = this._options;
    const accepted = offers.find((params) => {
      if (
        (opts.serverNoContextTakeover === false &&
          params.server_no_context_takeover) ||
        (params.server_max_window_bits &&
          (opts.serverMaxWindowBits === false ||
            (typeof opts.serverMaxWindowBits === 'number' &&
              opts.serverMaxWindowBits > params.server_max_window_bits))) ||
        (typeof opts.clientMaxWindowBits === 'number' &&
          !params.client_max_window_bits)
      ) {
        return false;
      }

      return true;
    });

    if (!accepted) {
      throw new Error('None of the extension offers can be accepted');
    }

    if (opts.serverNoContextTakeover) {
      accepted.server_no_context_takeover = true;
    }
    if (opts.clientNoContextTakeover) {
      accepted.client_no_context_takeover = true;
    }
    if (typeof opts.serverMaxWindowBits === 'number') {
      accepted.server_max_window_bits = opts.serverMaxWindowBits;
    }
    if (typeof opts.clientMaxWindowBits === 'number') {
      accepted.client_max_window_bits = opts.clientMaxWindowBits;
    } else if (
      accepted.client_max_window_bits === true ||
      opts.clientMaxWindowBits === false
    ) {
      delete accepted.client_max_window_bits;
    }

    return accepted;
  }

  /**
   * Accept the extension negotiation response.
   *
   * @param {Array} response The extension negotiation response
   * @return {Object} Accepted configuration
   * @private
   */
  acceptAsClient(response) {
    const params = response[0];

    if (
      this._options.clientNoContextTakeover === false &&
      params.client_no_context_takeover
    ) {
      throw new Error('Unexpected parameter "client_no_context_takeover"');
    }

    if (!params.client_max_window_bits) {
      if (typeof this._options.clientMaxWindowBits === 'number') {
        params.client_max_window_bits = this._options.clientMaxWindowBits;
      }
    } else if (
      this._options.clientMaxWindowBits === false ||
      (typeof this._options.clientMaxWindowBits === 'number' &&
        params.client_max_window_bits > this._options.clientMaxWindowBits)
    ) {
      throw new Error(
        'Unexpected or invalid parameter "client_max_window_bits"'
      );
    }

    return params;
  }

  /**
   * Normalize parameters.
   *
   * @param {Array} configurations The extension negotiation offers/reponse
   * @return {Array} The offers/response with normalized parameters
   * @private
   */
  normalizeParams(configurations) {
    configurations.forEach((params) => {
      Object.keys(params).forEach((key) => {
        let value = params[key];

        if (value.length > 1) {
          throw new Error(`Parameter "${key}" must have only a single value`);
        }

        value = value[0];

        if (key === 'client_max_window_bits') {
          if (value !== true) {
            const num = +value;
            if (!Number.isInteger(num) || num < 8 || num > 15) {
              throw new TypeError(
                `Invalid value for parameter "${key}": ${value}`
              );
            }
            value = num;
          } else if (!this._isServer) {
            throw new TypeError(
              `Invalid value for parameter "${key}": ${value}`
            );
          }
        } else if (key === 'server_max_window_bits') {
          const num = +value;
          if (!Number.isInteger(num) || num < 8 || num > 15) {
            throw new TypeError(
              `Invalid value for parameter "${key}": ${value}`
            );
          }
          value = num;
        } else if (
          key === 'client_no_context_takeover' ||
          key === 'server_no_context_takeover'
        ) {
          if (value !== true) {
            throw new TypeError(
              `Invalid value for parameter "${key}": ${value}`
            );
          }
        } else {
          throw new Error(`Unknown parameter "${key}"`);
        }

        params[key] = value;
      });
    });

    return configurations;
  }

  /**
   * Decompress data. Concurrency limited.
   *
   * @param {Buffer} data Compressed data
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @public
   */
  decompress(data, fin, callback) {
    zlibLimiter.add((done) => {
      this._decompress(data, fin, (err, result) => {
        done();
        callback(err, result);
      });
    });
  }

  /**
   * Compress data. Concurrency limited.
   *
   * @param {(Buffer|String)} data Data to compress
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @public
   */
  compress(data, fin, callback) {
    zlibLimiter.add((done) => {
      this._compress(data, fin, (err, result) => {
        done();
        callback(err, result);
      });
    });
  }

  /**
   * Decompress data.
   *
   * @param {Buffer} data Compressed data
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @private
   */
  _decompress(data, fin, callback) {
    const endpoint = this._isServer ? 'client' : 'server';

    if (!this._inflate) {
      const key = `${endpoint}_max_window_bits`;
      const windowBits =
        typeof this.params[key] !== 'number'
          ? zlib.Z_DEFAULT_WINDOWBITS
          : this.params[key];

      this._inflate = zlib.createInflateRaw({
        ...this._options.zlibInflateOptions,
        windowBits
      });
      this._inflate[kPerMessageDeflate] = this;
      this._inflate[kTotalLength] = 0;
      this._inflate[kBuffers] = [];
      this._inflate.on('error', inflateOnError);
      this._inflate.on('data', inflateOnData);
    }

    this._inflate[kCallback] = callback;

    this._inflate.write(data);
    if (fin) this._inflate.write(TRAILER);

    this._inflate.flush(() => {
      const err = this._inflate[kError$1];

      if (err) {
        this._inflate.close();
        this._inflate = null;
        callback(err);
        return;
      }

      const data = bufferUtil.concat(
        this._inflate[kBuffers],
        this._inflate[kTotalLength]
      );

      if (this._inflate._readableState.endEmitted) {
        this._inflate.close();
        this._inflate = null;
      } else {
        this._inflate[kTotalLength] = 0;
        this._inflate[kBuffers] = [];

        if (fin && this.params[`${endpoint}_no_context_takeover`]) {
          this._inflate.reset();
        }
      }

      callback(null, data);
    });
  }

  /**
   * Compress data.
   *
   * @param {(Buffer|String)} data Data to compress
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @private
   */
  _compress(data, fin, callback) {
    const endpoint = this._isServer ? 'server' : 'client';

    if (!this._deflate) {
      const key = `${endpoint}_max_window_bits`;
      const windowBits =
        typeof this.params[key] !== 'number'
          ? zlib.Z_DEFAULT_WINDOWBITS
          : this.params[key];

      this._deflate = zlib.createDeflateRaw({
        ...this._options.zlibDeflateOptions,
        windowBits
      });

      this._deflate[kTotalLength] = 0;
      this._deflate[kBuffers] = [];

      this._deflate.on('data', deflateOnData);
    }

    this._deflate[kCallback] = callback;

    this._deflate.write(data);
    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
      if (!this._deflate) {
        //
        // The deflate stream was closed while data was being processed.
        //
        return;
      }

      let data = bufferUtil.concat(
        this._deflate[kBuffers],
        this._deflate[kTotalLength]
      );

      if (fin) {
        data = new FastBuffer$1(data.buffer, data.byteOffset, data.length - 4);
      }

      //
      // Ensure that the callback will not be called again in
      // `PerMessageDeflate#cleanup()`.
      //
      this._deflate[kCallback] = null;

      this._deflate[kTotalLength] = 0;
      this._deflate[kBuffers] = [];

      if (fin && this.params[`${endpoint}_no_context_takeover`]) {
        this._deflate.reset();
      }

      callback(null, data);
    });
  }
};

var permessageDeflate = PerMessageDeflate$4;

/**
 * The listener of the `zlib.DeflateRaw` stream `'data'` event.
 *
 * @param {Buffer} chunk A chunk of data
 * @private
 */
function deflateOnData(chunk) {
  this[kBuffers].push(chunk);
  this[kTotalLength] += chunk.length;
}

/**
 * The listener of the `zlib.InflateRaw` stream `'data'` event.
 *
 * @param {Buffer} chunk A chunk of data
 * @private
 */
function inflateOnData(chunk) {
  this[kTotalLength] += chunk.length;

  if (
    this[kPerMessageDeflate]._maxPayload < 1 ||
    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload
  ) {
    this[kBuffers].push(chunk);
    return;
  }

  this[kError$1] = new RangeError('Max payload size exceeded');
  this[kError$1].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';
  this[kError$1][kStatusCode$2] = 1009;
  this.removeListener('data', inflateOnData);
  this.reset();
}

/**
 * The listener of the `zlib.InflateRaw` stream `'error'` event.
 *
 * @param {Error} err The emitted error
 * @private
 */
function inflateOnError(err) {
  //
  // There is no need to call `Zlib#close()` as the handle is automatically
  // closed when an error is emitted.
  //
  this[kPerMessageDeflate]._inflate = null;
  err[kStatusCode$2] = 1007;
  this[kCallback](err);
}

var validation = {exports: {}};

var isValidUTF8_1;

const { isUtf8 } = require$$0$6;

//
// Allowed token characters:
//
// '!', '#', '$', '%', '&', ''', '*', '+', '-',
// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'
//
// tokenChars[32] === 0 // ' '
// tokenChars[33] === 1 // '!'
// tokenChars[34] === 0 // '"'
// ...
//
// prettier-ignore
const tokenChars$2 = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31
  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127
];

/**
 * Checks if a status code is allowed in a close frame.
 *
 * @param {Number} code The status code
 * @return {Boolean} `true` if the status code is valid, else `false`
 * @public
 */
function isValidStatusCode$2(code) {
  return (
    (code >= 1000 &&
      code <= 1014 &&
      code !== 1004 &&
      code !== 1005 &&
      code !== 1006) ||
    (code >= 3000 && code <= 4999)
  );
}

/**
 * Checks if a given buffer contains only correct UTF-8.
 * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by
 * Markus Kuhn.
 *
 * @param {Buffer} buf The buffer to check
 * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`
 * @public
 */
function _isValidUTF8(buf) {
  const len = buf.length;
  let i = 0;

  while (i < len) {
    if ((buf[i] & 0x80) === 0) {
      // 0xxxxxxx
      i++;
    } else if ((buf[i] & 0xe0) === 0xc0) {
      // 110xxxxx 10xxxxxx
      if (
        i + 1 === len ||
        (buf[i + 1] & 0xc0) !== 0x80 ||
        (buf[i] & 0xfe) === 0xc0 // Overlong
      ) {
        return false;
      }

      i += 2;
    } else if ((buf[i] & 0xf0) === 0xe0) {
      // 1110xxxx 10xxxxxx 10xxxxxx
      if (
        i + 2 >= len ||
        (buf[i + 1] & 0xc0) !== 0x80 ||
        (buf[i + 2] & 0xc0) !== 0x80 ||
        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong
        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)
      ) {
        return false;
      }

      i += 3;
    } else if ((buf[i] & 0xf8) === 0xf0) {
      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
      if (
        i + 3 >= len ||
        (buf[i + 1] & 0xc0) !== 0x80 ||
        (buf[i + 2] & 0xc0) !== 0x80 ||
        (buf[i + 3] & 0xc0) !== 0x80 ||
        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong
        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||
        buf[i] > 0xf4 // > U+10FFFF
      ) {
        return false;
      }

      i += 4;
    } else {
      return false;
    }
  }

  return true;
}

validation.exports = {
  isValidStatusCode: isValidStatusCode$2,
  isValidUTF8: _isValidUTF8,
  tokenChars: tokenChars$2
};

if (isUtf8) {
  isValidUTF8_1 = validation.exports.isValidUTF8 = function (buf) {
    return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);
  };
} /* istanbul ignore else  */ else if (!process.env.WS_NO_UTF_8_VALIDATE) {
  try {
    const isValidUTF8 = require('utf-8-validate');

    isValidUTF8_1 = validation.exports.isValidUTF8 = function (buf) {
      return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF8(buf);
    };
  } catch (e) {
    // Continue regardless of the error.
  }
}

var validationExports = validation.exports;

const { Writable } = require$$0$5;

const PerMessageDeflate$3 = permessageDeflate;
const {
  BINARY_TYPES: BINARY_TYPES$1,
  EMPTY_BUFFER: EMPTY_BUFFER$2,
  kStatusCode: kStatusCode$1,
  kWebSocket: kWebSocket$2
} = constants;
const { concat, toArrayBuffer, unmask } = bufferUtilExports;
const { isValidStatusCode: isValidStatusCode$1, isValidUTF8 } = validationExports;

const FastBuffer = Buffer[Symbol.species];
const GET_INFO = 0;
const GET_PAYLOAD_LENGTH_16 = 1;
const GET_PAYLOAD_LENGTH_64 = 2;
const GET_MASK = 3;
const GET_DATA = 4;
const INFLATING = 5;

/**
 * HyBi Receiver implementation.
 *
 * @extends Writable
 */
let Receiver$1 = class Receiver extends Writable {
  /**
   * Creates a Receiver instance.
   *
   * @param {Object} [options] Options object
   * @param {String} [options.binaryType=nodebuffer] The type for binary data
   * @param {Object} [options.extensions] An object containing the negotiated
   *     extensions
   * @param {Boolean} [options.isServer=false] Specifies whether to operate in
   *     client or server mode
   * @param {Number} [options.maxPayload=0] The maximum allowed message length
   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
   *     not to skip UTF-8 validation for text and close messages
   */
  constructor(options = {}) {
    super();

    this._binaryType = options.binaryType || BINARY_TYPES$1[0];
    this._extensions = options.extensions || {};
    this._isServer = !!options.isServer;
    this._maxPayload = options.maxPayload | 0;
    this._skipUTF8Validation = !!options.skipUTF8Validation;
    this[kWebSocket$2] = undefined;

    this._bufferedBytes = 0;
    this._buffers = [];

    this._compressed = false;
    this._payloadLength = 0;
    this._mask = undefined;
    this._fragmented = 0;
    this._masked = false;
    this._fin = false;
    this._opcode = 0;

    this._totalPayloadLength = 0;
    this._messageLength = 0;
    this._fragments = [];

    this._state = GET_INFO;
    this._loop = false;
  }

  /**
   * Implements `Writable.prototype._write()`.
   *
   * @param {Buffer} chunk The chunk of data to write
   * @param {String} encoding The character encoding of `chunk`
   * @param {Function} cb Callback
   * @private
   */
  _write(chunk, encoding, cb) {
    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();

    this._bufferedBytes += chunk.length;
    this._buffers.push(chunk);
    this.startLoop(cb);
  }

  /**
   * Consumes `n` bytes from the buffered data.
   *
   * @param {Number} n The number of bytes to consume
   * @return {Buffer} The consumed bytes
   * @private
   */
  consume(n) {
    this._bufferedBytes -= n;

    if (n === this._buffers[0].length) return this._buffers.shift();

    if (n < this._buffers[0].length) {
      const buf = this._buffers[0];
      this._buffers[0] = new FastBuffer(
        buf.buffer,
        buf.byteOffset + n,
        buf.length - n
      );

      return new FastBuffer(buf.buffer, buf.byteOffset, n);
    }

    const dst = Buffer.allocUnsafe(n);

    do {
      const buf = this._buffers[0];
      const offset = dst.length - n;

      if (n >= buf.length) {
        dst.set(this._buffers.shift(), offset);
      } else {
        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);
        this._buffers[0] = new FastBuffer(
          buf.buffer,
          buf.byteOffset + n,
          buf.length - n
        );
      }

      n -= buf.length;
    } while (n > 0);

    return dst;
  }

  /**
   * Starts the parsing loop.
   *
   * @param {Function} cb Callback
   * @private
   */
  startLoop(cb) {
    let err;
    this._loop = true;

    do {
      switch (this._state) {
        case GET_INFO:
          err = this.getInfo();
          break;
        case GET_PAYLOAD_LENGTH_16:
          err = this.getPayloadLength16();
          break;
        case GET_PAYLOAD_LENGTH_64:
          err = this.getPayloadLength64();
          break;
        case GET_MASK:
          this.getMask();
          break;
        case GET_DATA:
          err = this.getData(cb);
          break;
        default:
          // `INFLATING`
          this._loop = false;
          return;
      }
    } while (this._loop);

    cb(err);
  }

  /**
   * Reads the first two bytes of a frame.
   *
   * @return {(RangeError|undefined)} A possible error
   * @private
   */
  getInfo() {
    if (this._bufferedBytes < 2) {
      this._loop = false;
      return;
    }

    const buf = this.consume(2);

    if ((buf[0] & 0x30) !== 0x00) {
      this._loop = false;
      return error(
        RangeError,
        'RSV2 and RSV3 must be clear',
        true,
        1002,
        'WS_ERR_UNEXPECTED_RSV_2_3'
      );
    }

    const compressed = (buf[0] & 0x40) === 0x40;

    if (compressed && !this._extensions[PerMessageDeflate$3.extensionName]) {
      this._loop = false;
      return error(
        RangeError,
        'RSV1 must be clear',
        true,
        1002,
        'WS_ERR_UNEXPECTED_RSV_1'
      );
    }

    this._fin = (buf[0] & 0x80) === 0x80;
    this._opcode = buf[0] & 0x0f;
    this._payloadLength = buf[1] & 0x7f;

    if (this._opcode === 0x00) {
      if (compressed) {
        this._loop = false;
        return error(
          RangeError,
          'RSV1 must be clear',
          true,
          1002,
          'WS_ERR_UNEXPECTED_RSV_1'
        );
      }

      if (!this._fragmented) {
        this._loop = false;
        return error(
          RangeError,
          'invalid opcode 0',
          true,
          1002,
          'WS_ERR_INVALID_OPCODE'
        );
      }

      this._opcode = this._fragmented;
    } else if (this._opcode === 0x01 || this._opcode === 0x02) {
      if (this._fragmented) {
        this._loop = false;
        return error(
          RangeError,
          `invalid opcode ${this._opcode}`,
          true,
          1002,
          'WS_ERR_INVALID_OPCODE'
        );
      }

      this._compressed = compressed;
    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {
      if (!this._fin) {
        this._loop = false;
        return error(
          RangeError,
          'FIN must be set',
          true,
          1002,
          'WS_ERR_EXPECTED_FIN'
        );
      }

      if (compressed) {
        this._loop = false;
        return error(
          RangeError,
          'RSV1 must be clear',
          true,
          1002,
          'WS_ERR_UNEXPECTED_RSV_1'
        );
      }

      if (
        this._payloadLength > 0x7d ||
        (this._opcode === 0x08 && this._payloadLength === 1)
      ) {
        this._loop = false;
        return error(
          RangeError,
          `invalid payload length ${this._payloadLength}`,
          true,
          1002,
          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'
        );
      }
    } else {
      this._loop = false;
      return error(
        RangeError,
        `invalid opcode ${this._opcode}`,
        true,
        1002,
        'WS_ERR_INVALID_OPCODE'
      );
    }

    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
    this._masked = (buf[1] & 0x80) === 0x80;

    if (this._isServer) {
      if (!this._masked) {
        this._loop = false;
        return error(
          RangeError,
          'MASK must be set',
          true,
          1002,
          'WS_ERR_EXPECTED_MASK'
        );
      }
    } else if (this._masked) {
      this._loop = false;
      return error(
        RangeError,
        'MASK must be clear',
        true,
        1002,
        'WS_ERR_UNEXPECTED_MASK'
      );
    }

    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;
    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;
    else return this.haveLength();
  }

  /**
   * Gets extended payload length (7+16).
   *
   * @return {(RangeError|undefined)} A possible error
   * @private
   */
  getPayloadLength16() {
    if (this._bufferedBytes < 2) {
      this._loop = false;
      return;
    }

    this._payloadLength = this.consume(2).readUInt16BE(0);
    return this.haveLength();
  }

  /**
   * Gets extended payload length (7+64).
   *
   * @return {(RangeError|undefined)} A possible error
   * @private
   */
  getPayloadLength64() {
    if (this._bufferedBytes < 8) {
      this._loop = false;
      return;
    }

    const buf = this.consume(8);
    const num = buf.readUInt32BE(0);

    //
    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned
    // if payload length is greater than this number.
    //
    if (num > Math.pow(2, 53 - 32) - 1) {
      this._loop = false;
      return error(
        RangeError,
        'Unsupported WebSocket frame: payload length > 2^53 - 1',
        false,
        1009,
        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'
      );
    }

    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
    return this.haveLength();
  }

  /**
   * Payload length has been read.
   *
   * @return {(RangeError|undefined)} A possible error
   * @private
   */
  haveLength() {
    if (this._payloadLength && this._opcode < 0x08) {
      this._totalPayloadLength += this._payloadLength;
      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
        this._loop = false;
        return error(
          RangeError,
          'Max payload size exceeded',
          false,
          1009,
          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'
        );
      }
    }

    if (this._masked) this._state = GET_MASK;
    else this._state = GET_DATA;
  }

  /**
   * Reads mask bytes.
   *
   * @private
   */
  getMask() {
    if (this._bufferedBytes < 4) {
      this._loop = false;
      return;
    }

    this._mask = this.consume(4);
    this._state = GET_DATA;
  }

  /**
   * Reads data bytes.
   *
   * @param {Function} cb Callback
   * @return {(Error|RangeError|undefined)} A possible error
   * @private
   */
  getData(cb) {
    let data = EMPTY_BUFFER$2;

    if (this._payloadLength) {
      if (this._bufferedBytes < this._payloadLength) {
        this._loop = false;
        return;
      }

      data = this.consume(this._payloadLength);

      if (
        this._masked &&
        (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0
      ) {
        unmask(data, this._mask);
      }
    }

    if (this._opcode > 0x07) return this.controlMessage(data);

    if (this._compressed) {
      this._state = INFLATING;
      this.decompress(data, cb);
      return;
    }

    if (data.length) {
      //
      // This message is not compressed so its length is the sum of the payload
      // length of all fragments.
      //
      this._messageLength = this._totalPayloadLength;
      this._fragments.push(data);
    }

    return this.dataMessage();
  }

  /**
   * Decompresses data.
   *
   * @param {Buffer} data Compressed data
   * @param {Function} cb Callback
   * @private
   */
  decompress(data, cb) {
    const perMessageDeflate = this._extensions[PerMessageDeflate$3.extensionName];

    perMessageDeflate.decompress(data, this._fin, (err, buf) => {
      if (err) return cb(err);

      if (buf.length) {
        this._messageLength += buf.length;
        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
          return cb(
            error(
              RangeError,
              'Max payload size exceeded',
              false,
              1009,
              'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'
            )
          );
        }

        this._fragments.push(buf);
      }

      const er = this.dataMessage();
      if (er) return cb(er);

      this.startLoop(cb);
    });
  }

  /**
   * Handles a data message.
   *
   * @return {(Error|undefined)} A possible error
   * @private
   */
  dataMessage() {
    if (this._fin) {
      const messageLength = this._messageLength;
      const fragments = this._fragments;

      this._totalPayloadLength = 0;
      this._messageLength = 0;
      this._fragmented = 0;
      this._fragments = [];

      if (this._opcode === 2) {
        let data;

        if (this._binaryType === 'nodebuffer') {
          data = concat(fragments, messageLength);
        } else if (this._binaryType === 'arraybuffer') {
          data = toArrayBuffer(concat(fragments, messageLength));
        } else {
          data = fragments;
        }

        this.emit('message', data, true);
      } else {
        const buf = concat(fragments, messageLength);

        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
          this._loop = false;
          return error(
            Error,
            'invalid UTF-8 sequence',
            true,
            1007,
            'WS_ERR_INVALID_UTF8'
          );
        }

        this.emit('message', buf, false);
      }
    }

    this._state = GET_INFO;
  }

  /**
   * Handles a control message.
   *
   * @param {Buffer} data Data to handle
   * @return {(Error|RangeError|undefined)} A possible error
   * @private
   */
  controlMessage(data) {
    if (this._opcode === 0x08) {
      this._loop = false;

      if (data.length === 0) {
        this.emit('conclude', 1005, EMPTY_BUFFER$2);
        this.end();
      } else {
        const code = data.readUInt16BE(0);

        if (!isValidStatusCode$1(code)) {
          return error(
            RangeError,
            `invalid status code ${code}`,
            true,
            1002,
            'WS_ERR_INVALID_CLOSE_CODE'
          );
        }

        const buf = new FastBuffer(
          data.buffer,
          data.byteOffset + 2,
          data.length - 2
        );

        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
          return error(
            Error,
            'invalid UTF-8 sequence',
            true,
            1007,
            'WS_ERR_INVALID_UTF8'
          );
        }

        this.emit('conclude', code, buf);
        this.end();
      }
    } else if (this._opcode === 0x09) {
      this.emit('ping', data);
    } else {
      this.emit('pong', data);
    }

    this._state = GET_INFO;
  }
};

var receiver = Receiver$1;

/**
 * Builds an error object.
 *
 * @param {function(new:Error|RangeError)} ErrorCtor The error constructor
 * @param {String} message The error message
 * @param {Boolean} prefix Specifies whether or not to add a default prefix to
 *     `message`
 * @param {Number} statusCode The status code
 * @param {String} errorCode The exposed error code
 * @return {(Error|RangeError)} The error
 * @private
 */
function error(ErrorCtor, message, prefix, statusCode, errorCode) {
  const err = new ErrorCtor(
    prefix ? `Invalid WebSocket frame: ${message}` : message
  );

  Error.captureStackTrace(err, error);
  err.code = errorCode;
  err[kStatusCode$1] = statusCode;
  return err;
}

/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "^net|tls$" }] */
const { randomFillSync } = require$$5;

const PerMessageDeflate$2 = permessageDeflate;
const { EMPTY_BUFFER: EMPTY_BUFFER$1 } = constants;
const { isValidStatusCode } = validationExports;
const { mask: applyMask, toBuffer: toBuffer$1 } = bufferUtilExports;

const kByteLength = Symbol('kByteLength');
const maskBuffer = Buffer.alloc(4);

/**
 * HyBi Sender implementation.
 */
let Sender$1 = class Sender {
  /**
   * Creates a Sender instance.
   *
   * @param {(net.Socket|tls.Socket)} socket The connection socket
   * @param {Object} [extensions] An object containing the negotiated extensions
   * @param {Function} [generateMask] The function used to generate the masking
   *     key
   */
  constructor(socket, extensions, generateMask) {
    this._extensions = extensions || {};

    if (generateMask) {
      this._generateMask = generateMask;
      this._maskBuffer = Buffer.alloc(4);
    }

    this._socket = socket;

    this._firstFragment = true;
    this._compress = false;

    this._bufferedBytes = 0;
    this._deflating = false;
    this._queue = [];
  }

  /**
   * Frames a piece of data according to the HyBi WebSocket protocol.
   *
   * @param {(Buffer|String)} data The data to frame
   * @param {Object} options Options object
   * @param {Boolean} [options.fin=false] Specifies whether or not to set the
   *     FIN bit
   * @param {Function} [options.generateMask] The function used to generate the
   *     masking key
   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
   *     `data`
   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
   *     key
   * @param {Number} options.opcode The opcode
   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
   *     modified
   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
   *     RSV1 bit
   * @return {(Buffer|String)[]} The framed data
   * @public
   */
  static frame(data, options) {
    let mask;
    let merge = false;
    let offset = 2;
    let skipMasking = false;

    if (options.mask) {
      mask = options.maskBuffer || maskBuffer;

      if (options.generateMask) {
        options.generateMask(mask);
      } else {
        randomFillSync(mask, 0, 4);
      }

      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;
      offset = 6;
    }

    let dataLength;

    if (typeof data === 'string') {
      if (
        (!options.mask || skipMasking) &&
        options[kByteLength] !== undefined
      ) {
        dataLength = options[kByteLength];
      } else {
        data = Buffer.from(data);
        dataLength = data.length;
      }
    } else {
      dataLength = data.length;
      merge = options.mask && options.readOnly && !skipMasking;
    }

    let payloadLength = dataLength;

    if (dataLength >= 65536) {
      offset += 8;
      payloadLength = 127;
    } else if (dataLength > 125) {
      offset += 2;
      payloadLength = 126;
    }

    const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);

    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;
    if (options.rsv1) target[0] |= 0x40;

    target[1] = payloadLength;

    if (payloadLength === 126) {
      target.writeUInt16BE(dataLength, 2);
    } else if (payloadLength === 127) {
      target[2] = target[3] = 0;
      target.writeUIntBE(dataLength, 4, 6);
    }

    if (!options.mask) return [target, data];

    target[1] |= 0x80;
    target[offset - 4] = mask[0];
    target[offset - 3] = mask[1];
    target[offset - 2] = mask[2];
    target[offset - 1] = mask[3];

    if (skipMasking) return [target, data];

    if (merge) {
      applyMask(data, mask, target, offset, dataLength);
      return [target];
    }

    applyMask(data, mask, data, 0, dataLength);
    return [target, data];
  }

  /**
   * Sends a close message to the other peer.
   *
   * @param {Number} [code] The status code component of the body
   * @param {(String|Buffer)} [data] The message component of the body
   * @param {Boolean} [mask=false] Specifies whether or not to mask the message
   * @param {Function} [cb] Callback
   * @public
   */
  close(code, data, mask, cb) {
    let buf;

    if (code === undefined) {
      buf = EMPTY_BUFFER$1;
    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {
      throw new TypeError('First argument must be a valid error code number');
    } else if (data === undefined || !data.length) {
      buf = Buffer.allocUnsafe(2);
      buf.writeUInt16BE(code, 0);
    } else {
      const length = Buffer.byteLength(data);

      if (length > 123) {
        throw new RangeError('The message must not be greater than 123 bytes');
      }

      buf = Buffer.allocUnsafe(2 + length);
      buf.writeUInt16BE(code, 0);

      if (typeof data === 'string') {
        buf.write(data, 2);
      } else {
        buf.set(data, 2);
      }
    }

    const options = {
      [kByteLength]: buf.length,
      fin: true,
      generateMask: this._generateMask,
      mask,
      maskBuffer: this._maskBuffer,
      opcode: 0x08,
      readOnly: false,
      rsv1: false
    };

    if (this._deflating) {
      this.enqueue([this.dispatch, buf, false, options, cb]);
    } else {
      this.sendFrame(Sender.frame(buf, options), cb);
    }
  }

  /**
   * Sends a ping message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
   * @param {Function} [cb] Callback
   * @public
   */
  ping(data, mask, cb) {
    let byteLength;
    let readOnly;

    if (typeof data === 'string') {
      byteLength = Buffer.byteLength(data);
      readOnly = false;
    } else {
      data = toBuffer$1(data);
      byteLength = data.length;
      readOnly = toBuffer$1.readOnly;
    }

    if (byteLength > 125) {
      throw new RangeError('The data size must not be greater than 125 bytes');
    }

    const options = {
      [kByteLength]: byteLength,
      fin: true,
      generateMask: this._generateMask,
      mask,
      maskBuffer: this._maskBuffer,
      opcode: 0x09,
      readOnly,
      rsv1: false
    };

    if (this._deflating) {
      this.enqueue([this.dispatch, data, false, options, cb]);
    } else {
      this.sendFrame(Sender.frame(data, options), cb);
    }
  }

  /**
   * Sends a pong message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
   * @param {Function} [cb] Callback
   * @public
   */
  pong(data, mask, cb) {
    let byteLength;
    let readOnly;

    if (typeof data === 'string') {
      byteLength = Buffer.byteLength(data);
      readOnly = false;
    } else {
      data = toBuffer$1(data);
      byteLength = data.length;
      readOnly = toBuffer$1.readOnly;
    }

    if (byteLength > 125) {
      throw new RangeError('The data size must not be greater than 125 bytes');
    }

    const options = {
      [kByteLength]: byteLength,
      fin: true,
      generateMask: this._generateMask,
      mask,
      maskBuffer: this._maskBuffer,
      opcode: 0x0a,
      readOnly,
      rsv1: false
    };

    if (this._deflating) {
      this.enqueue([this.dispatch, data, false, options, cb]);
    } else {
      this.sendFrame(Sender.frame(data, options), cb);
    }
  }

  /**
   * Sends a data message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Object} options Options object
   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary
   *     or text
   * @param {Boolean} [options.compress=false] Specifies whether or not to
   *     compress `data`
   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the
   *     last one
   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
   *     `data`
   * @param {Function} [cb] Callback
   * @public
   */
  send(data, options, cb) {
    const perMessageDeflate = this._extensions[PerMessageDeflate$2.extensionName];
    let opcode = options.binary ? 2 : 1;
    let rsv1 = options.compress;

    let byteLength;
    let readOnly;

    if (typeof data === 'string') {
      byteLength = Buffer.byteLength(data);
      readOnly = false;
    } else {
      data = toBuffer$1(data);
      byteLength = data.length;
      readOnly = toBuffer$1.readOnly;
    }

    if (this._firstFragment) {
      this._firstFragment = false;
      if (
        rsv1 &&
        perMessageDeflate &&
        perMessageDeflate.params[
          perMessageDeflate._isServer
            ? 'server_no_context_takeover'
            : 'client_no_context_takeover'
        ]
      ) {
        rsv1 = byteLength >= perMessageDeflate._threshold;
      }
      this._compress = rsv1;
    } else {
      rsv1 = false;
      opcode = 0;
    }

    if (options.fin) this._firstFragment = true;

    if (perMessageDeflate) {
      const opts = {
        [kByteLength]: byteLength,
        fin: options.fin,
        generateMask: this._generateMask,
        mask: options.mask,
        maskBuffer: this._maskBuffer,
        opcode,
        readOnly,
        rsv1
      };

      if (this._deflating) {
        this.enqueue([this.dispatch, data, this._compress, opts, cb]);
      } else {
        this.dispatch(data, this._compress, opts, cb);
      }
    } else {
      this.sendFrame(
        Sender.frame(data, {
          [kByteLength]: byteLength,
          fin: options.fin,
          generateMask: this._generateMask,
          mask: options.mask,
          maskBuffer: this._maskBuffer,
          opcode,
          readOnly,
          rsv1: false
        }),
        cb
      );
    }
  }

  /**
   * Dispatches a message.
   *
   * @param {(Buffer|String)} data The message to send
   * @param {Boolean} [compress=false] Specifies whether or not to compress
   *     `data`
   * @param {Object} options Options object
   * @param {Boolean} [options.fin=false] Specifies whether or not to set the
   *     FIN bit
   * @param {Function} [options.generateMask] The function used to generate the
   *     masking key
   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
   *     `data`
   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
   *     key
   * @param {Number} options.opcode The opcode
   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
   *     modified
   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
   *     RSV1 bit
   * @param {Function} [cb] Callback
   * @private
   */
  dispatch(data, compress, options, cb) {
    if (!compress) {
      this.sendFrame(Sender.frame(data, options), cb);
      return;
    }

    const perMessageDeflate = this._extensions[PerMessageDeflate$2.extensionName];

    this._bufferedBytes += options[kByteLength];
    this._deflating = true;
    perMessageDeflate.compress(data, options.fin, (_, buf) => {
      if (this._socket.destroyed) {
        const err = new Error(
          'The socket was closed while data was being compressed'
        );

        if (typeof cb === 'function') cb(err);

        for (let i = 0; i < this._queue.length; i++) {
          const params = this._queue[i];
          const callback = params[params.length - 1];

          if (typeof callback === 'function') callback(err);
        }

        return;
      }

      this._bufferedBytes -= options[kByteLength];
      this._deflating = false;
      options.readOnly = false;
      this.sendFrame(Sender.frame(buf, options), cb);
      this.dequeue();
    });
  }

  /**
   * Executes queued send operations.
   *
   * @private
   */
  dequeue() {
    while (!this._deflating && this._queue.length) {
      const params = this._queue.shift();

      this._bufferedBytes -= params[3][kByteLength];
      Reflect.apply(params[0], this, params.slice(1));
    }
  }

  /**
   * Enqueues a send operation.
   *
   * @param {Array} params Send operation parameters.
   * @private
   */
  enqueue(params) {
    this._bufferedBytes += params[3][kByteLength];
    this._queue.push(params);
  }

  /**
   * Sends a frame.
   *
   * @param {Buffer[]} list The frame to send
   * @param {Function} [cb] Callback
   * @private
   */
  sendFrame(list, cb) {
    if (list.length === 2) {
      this._socket.cork();
      this._socket.write(list[0]);
      this._socket.write(list[1], cb);
      this._socket.uncork();
    } else {
      this._socket.write(list[0], cb);
    }
  }
};

var sender = Sender$1;

const { kForOnEventAttribute: kForOnEventAttribute$1, kListener: kListener$1 } = constants;

const kCode = Symbol('kCode');
const kData = Symbol('kData');
const kError = Symbol('kError');
const kMessage = Symbol('kMessage');
const kReason = Symbol('kReason');
const kTarget = Symbol('kTarget');
const kType = Symbol('kType');
const kWasClean = Symbol('kWasClean');

/**
 * Class representing an event.
 */
class Event {
  /**
   * Create a new `Event`.
   *
   * @param {String} type The name of the event
   * @throws {TypeError} If the `type` argument is not specified
   */
  constructor(type) {
    this[kTarget] = null;
    this[kType] = type;
  }

  /**
   * @type {*}
   */
  get target() {
    return this[kTarget];
  }

  /**
   * @type {String}
   */
  get type() {
    return this[kType];
  }
}

Object.defineProperty(Event.prototype, 'target', { enumerable: true });
Object.defineProperty(Event.prototype, 'type', { enumerable: true });

/**
 * Class representing a close event.
 *
 * @extends Event
 */
class CloseEvent extends Event {
  /**
   * Create a new `CloseEvent`.
   *
   * @param {String} type The name of the event
   * @param {Object} [options] A dictionary object that allows for setting
   *     attributes via object members of the same name
   * @param {Number} [options.code=0] The status code explaining why the
   *     connection was closed
   * @param {String} [options.reason=''] A human-readable string explaining why
   *     the connection was closed
   * @param {Boolean} [options.wasClean=false] Indicates whether or not the
   *     connection was cleanly closed
   */
  constructor(type, options = {}) {
    super(type);

    this[kCode] = options.code === undefined ? 0 : options.code;
    this[kReason] = options.reason === undefined ? '' : options.reason;
    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;
  }

  /**
   * @type {Number}
   */
  get code() {
    return this[kCode];
  }

  /**
   * @type {String}
   */
  get reason() {
    return this[kReason];
  }

  /**
   * @type {Boolean}
   */
  get wasClean() {
    return this[kWasClean];
  }
}

Object.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });
Object.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });
Object.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });

/**
 * Class representing an error event.
 *
 * @extends Event
 */
class ErrorEvent extends Event {
  /**
   * Create a new `ErrorEvent`.
   *
   * @param {String} type The name of the event
   * @param {Object} [options] A dictionary object that allows for setting
   *     attributes via object members of the same name
   * @param {*} [options.error=null] The error that generated this event
   * @param {String} [options.message=''] The error message
   */
  constructor(type, options = {}) {
    super(type);

    this[kError] = options.error === undefined ? null : options.error;
    this[kMessage] = options.message === undefined ? '' : options.message;
  }

  /**
   * @type {*}
   */
  get error() {
    return this[kError];
  }

  /**
   * @type {String}
   */
  get message() {
    return this[kMessage];
  }
}

Object.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });
Object.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });

/**
 * Class representing a message event.
 *
 * @extends Event
 */
class MessageEvent extends Event {
  /**
   * Create a new `MessageEvent`.
   *
   * @param {String} type The name of the event
   * @param {Object} [options] A dictionary object that allows for setting
   *     attributes via object members of the same name
   * @param {*} [options.data=null] The message content
   */
  constructor(type, options = {}) {
    super(type);

    this[kData] = options.data === undefined ? null : options.data;
  }

  /**
   * @type {*}
   */
  get data() {
    return this[kData];
  }
}

Object.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });

/**
 * This provides methods for emulating the `EventTarget` interface. It's not
 * meant to be used directly.
 *
 * @mixin
 */
const EventTarget = {
  /**
   * Register an event listener.
   *
   * @param {String} type A string representing the event type to listen for
   * @param {(Function|Object)} handler The listener to add
   * @param {Object} [options] An options object specifies characteristics about
   *     the event listener
   * @param {Boolean} [options.once=false] A `Boolean` indicating that the
   *     listener should be invoked at most once after being added. If `true`,
   *     the listener would be automatically removed when invoked.
   * @public
   */
  addEventListener(type, handler, options = {}) {
    for (const listener of this.listeners(type)) {
      if (
        !options[kForOnEventAttribute$1] &&
        listener[kListener$1] === handler &&
        !listener[kForOnEventAttribute$1]
      ) {
        return;
      }
    }

    let wrapper;

    if (type === 'message') {
      wrapper = function onMessage(data, isBinary) {
        const event = new MessageEvent('message', {
          data: isBinary ? data : data.toString()
        });

        event[kTarget] = this;
        callListener(handler, this, event);
      };
    } else if (type === 'close') {
      wrapper = function onClose(code, message) {
        const event = new CloseEvent('close', {
          code,
          reason: message.toString(),
          wasClean: this._closeFrameReceived && this._closeFrameSent
        });

        event[kTarget] = this;
        callListener(handler, this, event);
      };
    } else if (type === 'error') {
      wrapper = function onError(error) {
        const event = new ErrorEvent('error', {
          error,
          message: error.message
        });

        event[kTarget] = this;
        callListener(handler, this, event);
      };
    } else if (type === 'open') {
      wrapper = function onOpen() {
        const event = new Event('open');

        event[kTarget] = this;
        callListener(handler, this, event);
      };
    } else {
      return;
    }

    wrapper[kForOnEventAttribute$1] = !!options[kForOnEventAttribute$1];
    wrapper[kListener$1] = handler;

    if (options.once) {
      this.once(type, wrapper);
    } else {
      this.on(type, wrapper);
    }
  },

  /**
   * Remove an event listener.
   *
   * @param {String} type A string representing the event type to remove
   * @param {(Function|Object)} handler The listener to remove
   * @public
   */
  removeEventListener(type, handler) {
    for (const listener of this.listeners(type)) {
      if (listener[kListener$1] === handler && !listener[kForOnEventAttribute$1]) {
        this.removeListener(type, listener);
        break;
      }
    }
  }
};

var eventTarget = {
  CloseEvent,
  ErrorEvent,
  Event,
  EventTarget,
  MessageEvent
};

/**
 * Call an event listener
 *
 * @param {(Function|Object)} listener The listener to call
 * @param {*} thisArg The value to use as `this`` when calling the listener
 * @param {Event} event The event to pass to the listener
 * @private
 */
function callListener(listener, thisArg, event) {
  if (typeof listener === 'object' && listener.handleEvent) {
    listener.handleEvent.call(listener, event);
  } else {
    listener.call(thisArg, event);
  }
}

const { tokenChars: tokenChars$1 } = validationExports;

/**
 * Adds an offer to the map of extension offers or a parameter to the map of
 * parameters.
 *
 * @param {Object} dest The map of extension offers or parameters
 * @param {String} name The extension or parameter name
 * @param {(Object|Boolean|String)} elem The extension parameters or the
 *     parameter value
 * @private
 */
function push(dest, name, elem) {
  if (dest[name] === undefined) dest[name] = [elem];
  else dest[name].push(elem);
}

/**
 * Parses the `Sec-WebSocket-Extensions` header into an object.
 *
 * @param {String} header The field value of the header
 * @return {Object} The parsed object
 * @public
 */
function parse$2(header) {
  const offers = Object.create(null);
  let params = Object.create(null);
  let mustUnescape = false;
  let isEscaping = false;
  let inQuotes = false;
  let extensionName;
  let paramName;
  let start = -1;
  let code = -1;
  let end = -1;
  let i = 0;

  for (; i < header.length; i++) {
    code = header.charCodeAt(i);

    if (extensionName === undefined) {
      if (end === -1 && tokenChars$1[code] === 1) {
        if (start === -1) start = i;
      } else if (
        i !== 0 &&
        (code === 0x20 /* ' ' */ || code === 0x09) /* '\t' */
      ) {
        if (end === -1 && start !== -1) end = i;
      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {
        if (start === -1) {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }

        if (end === -1) end = i;
        const name = header.slice(start, end);
        if (code === 0x2c) {
          push(offers, name, params);
          params = Object.create(null);
        } else {
          extensionName = name;
        }

        start = end = -1;
      } else {
        throw new SyntaxError(`Unexpected character at index ${i}`);
      }
    } else if (paramName === undefined) {
      if (end === -1 && tokenChars$1[code] === 1) {
        if (start === -1) start = i;
      } else if (code === 0x20 || code === 0x09) {
        if (end === -1 && start !== -1) end = i;
      } else if (code === 0x3b || code === 0x2c) {
        if (start === -1) {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }

        if (end === -1) end = i;
        push(params, header.slice(start, end), true);
        if (code === 0x2c) {
          push(offers, extensionName, params);
          params = Object.create(null);
          extensionName = undefined;
        }

        start = end = -1;
      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {
        paramName = header.slice(start, i);
        start = end = -1;
      } else {
        throw new SyntaxError(`Unexpected character at index ${i}`);
      }
    } else {
      //
      // The value of a quoted-string after unescaping must conform to the
      // token ABNF, so only token characters are valid.
      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1
      //
      if (isEscaping) {
        if (tokenChars$1[code] !== 1) {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
        if (start === -1) start = i;
        else if (!mustUnescape) mustUnescape = true;
        isEscaping = false;
      } else if (inQuotes) {
        if (tokenChars$1[code] === 1) {
          if (start === -1) start = i;
        } else if (code === 0x22 /* '"' */ && start !== -1) {
          inQuotes = false;
          end = i;
        } else if (code === 0x5c /* '\' */) {
          isEscaping = true;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {
        inQuotes = true;
      } else if (end === -1 && tokenChars$1[code] === 1) {
        if (start === -1) start = i;
      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {
        if (end === -1) end = i;
      } else if (code === 0x3b || code === 0x2c) {
        if (start === -1) {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }

        if (end === -1) end = i;
        let value = header.slice(start, end);
        if (mustUnescape) {
          value = value.replace(/\\/g, '');
          mustUnescape = false;
        }
        push(params, paramName, value);
        if (code === 0x2c) {
          push(offers, extensionName, params);
          params = Object.create(null);
          extensionName = undefined;
        }

        paramName = undefined;
        start = end = -1;
      } else {
        throw new SyntaxError(`Unexpected character at index ${i}`);
      }
    }
  }

  if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {
    throw new SyntaxError('Unexpected end of input');
  }

  if (end === -1) end = i;
  const token = header.slice(start, end);
  if (extensionName === undefined) {
    push(offers, token, params);
  } else {
    if (paramName === undefined) {
      push(params, token, true);
    } else if (mustUnescape) {
      push(params, paramName, token.replace(/\\/g, ''));
    } else {
      push(params, paramName, token);
    }
    push(offers, extensionName, params);
  }

  return offers;
}

/**
 * Builds the `Sec-WebSocket-Extensions` header field value.
 *
 * @param {Object} extensions The map of extensions and parameters to format
 * @return {String} A string representing the given object
 * @public
 */
function format$1(extensions) {
  return Object.keys(extensions)
    .map((extension) => {
      let configurations = extensions[extension];
      if (!Array.isArray(configurations)) configurations = [configurations];
      return configurations
        .map((params) => {
          return [extension]
            .concat(
              Object.keys(params).map((k) => {
                let values = params[k];
                if (!Array.isArray(values)) values = [values];
                return values
                  .map((v) => (v === true ? k : `${k}=${v}`))
                  .join('; ');
              })
            )
            .join('; ');
        })
        .join(', ');
    })
    .join(', ');
}

var extension$1 = { format: format$1, parse: parse$2 };

/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "^Readable$" }] */

const EventEmitter$2 = require$$0$7;
const https = require$$2;
const http$1 = require$$1$2;
const net = require$$3;
const tls = require$$4$1;
const { randomBytes, createHash: createHash$1 } = require$$5;
const { URL: URL$1 } = require$$7;

const PerMessageDeflate$1 = permessageDeflate;
const Receiver = receiver;
const Sender = sender;
const {
  BINARY_TYPES,
  EMPTY_BUFFER,
  GUID: GUID$1,
  kForOnEventAttribute,
  kListener,
  kStatusCode,
  kWebSocket: kWebSocket$1,
  NOOP
} = constants;
const {
  EventTarget: { addEventListener, removeEventListener }
} = eventTarget;
const { format, parse: parse$1 } = extension$1;
const { toBuffer } = bufferUtilExports;

const closeTimeout = 30 * 1000;
const kAborted = Symbol('kAborted');
const protocolVersions = [8, 13];
const readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];
const subprotocolRegex = /^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/;

/**
 * Class representing a WebSocket.
 *
 * @extends EventEmitter
 */
let WebSocket$2 = class WebSocket extends EventEmitter$2 {
  /**
   * Create a new `WebSocket`.
   *
   * @param {(String|URL)} address The URL to which to connect
   * @param {(String|String[])} [protocols] The subprotocols
   * @param {Object} [options] Connection options
   */
  constructor(address, protocols, options) {
    super();

    this._binaryType = BINARY_TYPES[0];
    this._closeCode = 1006;
    this._closeFrameReceived = false;
    this._closeFrameSent = false;
    this._closeMessage = EMPTY_BUFFER;
    this._closeTimer = null;
    this._extensions = {};
    this._paused = false;
    this._protocol = '';
    this._readyState = WebSocket.CONNECTING;
    this._receiver = null;
    this._sender = null;
    this._socket = null;

    if (address !== null) {
      this._bufferedAmount = 0;
      this._isServer = false;
      this._redirects = 0;

      if (protocols === undefined) {
        protocols = [];
      } else if (!Array.isArray(protocols)) {
        if (typeof protocols === 'object' && protocols !== null) {
          options = protocols;
          protocols = [];
        } else {
          protocols = [protocols];
        }
      }

      initAsClient(this, address, protocols, options);
    } else {
      this._isServer = true;
    }
  }

  /**
   * This deviates from the WHATWG interface since ws doesn't support the
   * required default "blob" type (instead we define a custom "nodebuffer"
   * type).
   *
   * @type {String}
   */
  get binaryType() {
    return this._binaryType;
  }

  set binaryType(type) {
    if (!BINARY_TYPES.includes(type)) return;

    this._binaryType = type;

    //
    // Allow to change `binaryType` on the fly.
    //
    if (this._receiver) this._receiver._binaryType = type;
  }

  /**
   * @type {Number}
   */
  get bufferedAmount() {
    if (!this._socket) return this._bufferedAmount;

    return this._socket._writableState.length + this._sender._bufferedBytes;
  }

  /**
   * @type {String}
   */
  get extensions() {
    return Object.keys(this._extensions).join();
  }

  /**
   * @type {Boolean}
   */
  get isPaused() {
    return this._paused;
  }

  /**
   * @type {Function}
   */
  /* istanbul ignore next */
  get onclose() {
    return null;
  }

  /**
   * @type {Function}
   */
  /* istanbul ignore next */
  get onerror() {
    return null;
  }

  /**
   * @type {Function}
   */
  /* istanbul ignore next */
  get onopen() {
    return null;
  }

  /**
   * @type {Function}
   */
  /* istanbul ignore next */
  get onmessage() {
    return null;
  }

  /**
   * @type {String}
   */
  get protocol() {
    return this._protocol;
  }

  /**
   * @type {Number}
   */
  get readyState() {
    return this._readyState;
  }

  /**
   * @type {String}
   */
  get url() {
    return this._url;
  }

  /**
   * Set up the socket and the internal resources.
   *
   * @param {(net.Socket|tls.Socket)} socket The network socket between the
   *     server and client
   * @param {Buffer} head The first packet of the upgraded stream
   * @param {Object} options Options object
   * @param {Function} [options.generateMask] The function used to generate the
   *     masking key
   * @param {Number} [options.maxPayload=0] The maximum allowed message size
   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
   *     not to skip UTF-8 validation for text and close messages
   * @private
   */
  setSocket(socket, head, options) {
    const receiver = new Receiver({
      binaryType: this.binaryType,
      extensions: this._extensions,
      isServer: this._isServer,
      maxPayload: options.maxPayload,
      skipUTF8Validation: options.skipUTF8Validation
    });

    this._sender = new Sender(socket, this._extensions, options.generateMask);
    this._receiver = receiver;
    this._socket = socket;

    receiver[kWebSocket$1] = this;
    socket[kWebSocket$1] = this;

    receiver.on('conclude', receiverOnConclude);
    receiver.on('drain', receiverOnDrain);
    receiver.on('error', receiverOnError);
    receiver.on('message', receiverOnMessage);
    receiver.on('ping', receiverOnPing);
    receiver.on('pong', receiverOnPong);

    socket.setTimeout(0);
    socket.setNoDelay();

    if (head.length > 0) socket.unshift(head);

    socket.on('close', socketOnClose);
    socket.on('data', socketOnData);
    socket.on('end', socketOnEnd);
    socket.on('error', socketOnError$1);

    this._readyState = WebSocket.OPEN;
    this.emit('open');
  }

  /**
   * Emit the `'close'` event.
   *
   * @private
   */
  emitClose() {
    if (!this._socket) {
      this._readyState = WebSocket.CLOSED;
      this.emit('close', this._closeCode, this._closeMessage);
      return;
    }

    if (this._extensions[PerMessageDeflate$1.extensionName]) {
      this._extensions[PerMessageDeflate$1.extensionName].cleanup();
    }

    this._receiver.removeAllListeners();
    this._readyState = WebSocket.CLOSED;
    this.emit('close', this._closeCode, this._closeMessage);
  }

  /**
   * Start a closing handshake.
   *
   *          +----------+   +-----------+   +----------+
   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -
   *    |     +----------+   +-----------+   +----------+     |
   *          +----------+   +-----------+         |
   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING
   *          +----------+   +-----------+   |
   *    |           |                        |   +---+        |
   *                +------------------------+-->|fin| - - - -
   *    |         +---+                      |   +---+
   *     - - - - -|fin|<---------------------+
   *              +---+
   *
   * @param {Number} [code] Status code explaining why the connection is closing
   * @param {(String|Buffer)} [data] The reason why the connection is
   *     closing
   * @public
   */
  close(code, data) {
    if (this.readyState === WebSocket.CLOSED) return;
    if (this.readyState === WebSocket.CONNECTING) {
      const msg = 'WebSocket was closed before the connection was established';
      abortHandshake$1(this, this._req, msg);
      return;
    }

    if (this.readyState === WebSocket.CLOSING) {
      if (
        this._closeFrameSent &&
        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)
      ) {
        this._socket.end();
      }

      return;
    }

    this._readyState = WebSocket.CLOSING;
    this._sender.close(code, data, !this._isServer, (err) => {
      //
      // This error is handled by the `'error'` listener on the socket. We only
      // want to know if the close frame has been sent here.
      //
      if (err) return;

      this._closeFrameSent = true;

      if (
        this._closeFrameReceived ||
        this._receiver._writableState.errorEmitted
      ) {
        this._socket.end();
      }
    });

    //
    // Specify a timeout for the closing handshake to complete.
    //
    this._closeTimer = setTimeout(
      this._socket.destroy.bind(this._socket),
      closeTimeout
    );
  }

  /**
   * Pause the socket.
   *
   * @public
   */
  pause() {
    if (
      this.readyState === WebSocket.CONNECTING ||
      this.readyState === WebSocket.CLOSED
    ) {
      return;
    }

    this._paused = true;
    this._socket.pause();
  }

  /**
   * Send a ping.
   *
   * @param {*} [data] The data to send
   * @param {Boolean} [mask] Indicates whether or not to mask `data`
   * @param {Function} [cb] Callback which is executed when the ping is sent
   * @public
   */
  ping(data, mask, cb) {
    if (this.readyState === WebSocket.CONNECTING) {
      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
    }

    if (typeof data === 'function') {
      cb = data;
      data = mask = undefined;
    } else if (typeof mask === 'function') {
      cb = mask;
      mask = undefined;
    }

    if (typeof data === 'number') data = data.toString();

    if (this.readyState !== WebSocket.OPEN) {
      sendAfterClose(this, data, cb);
      return;
    }

    if (mask === undefined) mask = !this._isServer;
    this._sender.ping(data || EMPTY_BUFFER, mask, cb);
  }

  /**
   * Send a pong.
   *
   * @param {*} [data] The data to send
   * @param {Boolean} [mask] Indicates whether or not to mask `data`
   * @param {Function} [cb] Callback which is executed when the pong is sent
   * @public
   */
  pong(data, mask, cb) {
    if (this.readyState === WebSocket.CONNECTING) {
      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
    }

    if (typeof data === 'function') {
      cb = data;
      data = mask = undefined;
    } else if (typeof mask === 'function') {
      cb = mask;
      mask = undefined;
    }

    if (typeof data === 'number') data = data.toString();

    if (this.readyState !== WebSocket.OPEN) {
      sendAfterClose(this, data, cb);
      return;
    }

    if (mask === undefined) mask = !this._isServer;
    this._sender.pong(data || EMPTY_BUFFER, mask, cb);
  }

  /**
   * Resume the socket.
   *
   * @public
   */
  resume() {
    if (
      this.readyState === WebSocket.CONNECTING ||
      this.readyState === WebSocket.CLOSED
    ) {
      return;
    }

    this._paused = false;
    if (!this._receiver._writableState.needDrain) this._socket.resume();
  }

  /**
   * Send a data message.
   *
   * @param {*} data The message to send
   * @param {Object} [options] Options object
   * @param {Boolean} [options.binary] Specifies whether `data` is binary or
   *     text
   * @param {Boolean} [options.compress] Specifies whether or not to compress
   *     `data`
   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the
   *     last one
   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`
   * @param {Function} [cb] Callback which is executed when data is written out
   * @public
   */
  send(data, options, cb) {
    if (this.readyState === WebSocket.CONNECTING) {
      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
    }

    if (typeof options === 'function') {
      cb = options;
      options = {};
    }

    if (typeof data === 'number') data = data.toString();

    if (this.readyState !== WebSocket.OPEN) {
      sendAfterClose(this, data, cb);
      return;
    }

    const opts = {
      binary: typeof data !== 'string',
      mask: !this._isServer,
      compress: true,
      fin: true,
      ...options
    };

    if (!this._extensions[PerMessageDeflate$1.extensionName]) {
      opts.compress = false;
    }

    this._sender.send(data || EMPTY_BUFFER, opts, cb);
  }

  /**
   * Forcibly close the connection.
   *
   * @public
   */
  terminate() {
    if (this.readyState === WebSocket.CLOSED) return;
    if (this.readyState === WebSocket.CONNECTING) {
      const msg = 'WebSocket was closed before the connection was established';
      abortHandshake$1(this, this._req, msg);
      return;
    }

    if (this._socket) {
      this._readyState = WebSocket.CLOSING;
      this._socket.destroy();
    }
  }
};

/**
 * @constant {Number} CONNECTING
 * @memberof WebSocket
 */
Object.defineProperty(WebSocket$2, 'CONNECTING', {
  enumerable: true,
  value: readyStates.indexOf('CONNECTING')
});

/**
 * @constant {Number} CONNECTING
 * @memberof WebSocket.prototype
 */
Object.defineProperty(WebSocket$2.prototype, 'CONNECTING', {
  enumerable: true,
  value: readyStates.indexOf('CONNECTING')
});

/**
 * @constant {Number} OPEN
 * @memberof WebSocket
 */
Object.defineProperty(WebSocket$2, 'OPEN', {
  enumerable: true,
  value: readyStates.indexOf('OPEN')
});

/**
 * @constant {Number} OPEN
 * @memberof WebSocket.prototype
 */
Object.defineProperty(WebSocket$2.prototype, 'OPEN', {
  enumerable: true,
  value: readyStates.indexOf('OPEN')
});

/**
 * @constant {Number} CLOSING
 * @memberof WebSocket
 */
Object.defineProperty(WebSocket$2, 'CLOSING', {
  enumerable: true,
  value: readyStates.indexOf('CLOSING')
});

/**
 * @constant {Number} CLOSING
 * @memberof WebSocket.prototype
 */
Object.defineProperty(WebSocket$2.prototype, 'CLOSING', {
  enumerable: true,
  value: readyStates.indexOf('CLOSING')
});

/**
 * @constant {Number} CLOSED
 * @memberof WebSocket
 */
Object.defineProperty(WebSocket$2, 'CLOSED', {
  enumerable: true,
  value: readyStates.indexOf('CLOSED')
});

/**
 * @constant {Number} CLOSED
 * @memberof WebSocket.prototype
 */
Object.defineProperty(WebSocket$2.prototype, 'CLOSED', {
  enumerable: true,
  value: readyStates.indexOf('CLOSED')
});

[
  'binaryType',
  'bufferedAmount',
  'extensions',
  'isPaused',
  'protocol',
  'readyState',
  'url'
].forEach((property) => {
  Object.defineProperty(WebSocket$2.prototype, property, { enumerable: true });
});

//
// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.
// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface
//
['open', 'error', 'close', 'message'].forEach((method) => {
  Object.defineProperty(WebSocket$2.prototype, `on${method}`, {
    enumerable: true,
    get() {
      for (const listener of this.listeners(method)) {
        if (listener[kForOnEventAttribute]) return listener[kListener];
      }

      return null;
    },
    set(handler) {
      for (const listener of this.listeners(method)) {
        if (listener[kForOnEventAttribute]) {
          this.removeListener(method, listener);
          break;
        }
      }

      if (typeof handler !== 'function') return;

      this.addEventListener(method, handler, {
        [kForOnEventAttribute]: true
      });
    }
  });
});

WebSocket$2.prototype.addEventListener = addEventListener;
WebSocket$2.prototype.removeEventListener = removeEventListener;

var websocket = WebSocket$2;

/**
 * Initialize a WebSocket client.
 *
 * @param {WebSocket} websocket The client to initialize
 * @param {(String|URL)} address The URL to which to connect
 * @param {Array} protocols The subprotocols
 * @param {Object} [options] Connection options
 * @param {Boolean} [options.followRedirects=false] Whether or not to follow
 *     redirects
 * @param {Function} [options.generateMask] The function used to generate the
 *     masking key
 * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the
 *     handshake request
 * @param {Number} [options.maxPayload=104857600] The maximum allowed message
 *     size
 * @param {Number} [options.maxRedirects=10] The maximum number of redirects
 *     allowed
 * @param {String} [options.origin] Value of the `Origin` or
 *     `Sec-WebSocket-Origin` header
 * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable
 *     permessage-deflate
 * @param {Number} [options.protocolVersion=13] Value of the
 *     `Sec-WebSocket-Version` header
 * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
 *     not to skip UTF-8 validation for text and close messages
 * @private
 */
function initAsClient(websocket, address, protocols, options) {
  const opts = {
    protocolVersion: protocolVersions[1],
    maxPayload: 100 * 1024 * 1024,
    skipUTF8Validation: false,
    perMessageDeflate: true,
    followRedirects: false,
    maxRedirects: 10,
    ...options,
    createConnection: undefined,
    socketPath: undefined,
    hostname: undefined,
    protocol: undefined,
    timeout: undefined,
    method: 'GET',
    host: undefined,
    path: undefined,
    port: undefined
  };

  if (!protocolVersions.includes(opts.protocolVersion)) {
    throw new RangeError(
      `Unsupported protocol version: ${opts.protocolVersion} ` +
        `(supported versions: ${protocolVersions.join(', ')})`
    );
  }

  let parsedUrl;

  if (address instanceof URL$1) {
    parsedUrl = address;
    websocket._url = address.href;
  } else {
    try {
      parsedUrl = new URL$1(address);
    } catch (e) {
      throw new SyntaxError(`Invalid URL: ${address}`);
    }

    websocket._url = address;
  }

  const isSecure = parsedUrl.protocol === 'wss:';
  const isIpcUrl = parsedUrl.protocol === 'ws+unix:';
  let invalidUrlMessage;

  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isIpcUrl) {
    invalidUrlMessage =
      'The URL\'s protocol must be one of "ws:", "wss:", or "ws+unix:"';
  } else if (isIpcUrl && !parsedUrl.pathname) {
    invalidUrlMessage = "The URL's pathname is empty";
  } else if (parsedUrl.hash) {
    invalidUrlMessage = 'The URL contains a fragment identifier';
  }

  if (invalidUrlMessage) {
    const err = new SyntaxError(invalidUrlMessage);

    if (websocket._redirects === 0) {
      throw err;
    } else {
      emitErrorAndClose(websocket, err);
      return;
    }
  }

  const defaultPort = isSecure ? 443 : 80;
  const key = randomBytes(16).toString('base64');
  const request = isSecure ? https.request : http$1.request;
  const protocolSet = new Set();
  let perMessageDeflate;

  opts.createConnection = isSecure ? tlsConnect : netConnect;
  opts.defaultPort = opts.defaultPort || defaultPort;
  opts.port = parsedUrl.port || defaultPort;
  opts.host = parsedUrl.hostname.startsWith('[')
    ? parsedUrl.hostname.slice(1, -1)
    : parsedUrl.hostname;
  opts.headers = {
    ...opts.headers,
    'Sec-WebSocket-Version': opts.protocolVersion,
    'Sec-WebSocket-Key': key,
    Connection: 'Upgrade',
    Upgrade: 'websocket'
  };
  opts.path = parsedUrl.pathname + parsedUrl.search;
  opts.timeout = opts.handshakeTimeout;

  if (opts.perMessageDeflate) {
    perMessageDeflate = new PerMessageDeflate$1(
      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},
      false,
      opts.maxPayload
    );
    opts.headers['Sec-WebSocket-Extensions'] = format({
      [PerMessageDeflate$1.extensionName]: perMessageDeflate.offer()
    });
  }
  if (protocols.length) {
    for (const protocol of protocols) {
      if (
        typeof protocol !== 'string' ||
        !subprotocolRegex.test(protocol) ||
        protocolSet.has(protocol)
      ) {
        throw new SyntaxError(
          'An invalid or duplicated subprotocol was specified'
        );
      }

      protocolSet.add(protocol);
    }

    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');
  }
  if (opts.origin) {
    if (opts.protocolVersion < 13) {
      opts.headers['Sec-WebSocket-Origin'] = opts.origin;
    } else {
      opts.headers.Origin = opts.origin;
    }
  }
  if (parsedUrl.username || parsedUrl.password) {
    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
  }

  if (isIpcUrl) {
    const parts = opts.path.split(':');

    opts.socketPath = parts[0];
    opts.path = parts[1];
  }

  let req;

  if (opts.followRedirects) {
    if (websocket._redirects === 0) {
      websocket._originalIpc = isIpcUrl;
      websocket._originalSecure = isSecure;
      websocket._originalHostOrSocketPath = isIpcUrl
        ? opts.socketPath
        : parsedUrl.host;

      const headers = options && options.headers;

      //
      // Shallow copy the user provided options so that headers can be changed
      // without mutating the original object.
      //
      options = { ...options, headers: {} };

      if (headers) {
        for (const [key, value] of Object.entries(headers)) {
          options.headers[key.toLowerCase()] = value;
        }
      }
    } else if (websocket.listenerCount('redirect') === 0) {
      const isSameHost = isIpcUrl
        ? websocket._originalIpc
          ? opts.socketPath === websocket._originalHostOrSocketPath
          : false
        : websocket._originalIpc
        ? false
        : parsedUrl.host === websocket._originalHostOrSocketPath;

      if (!isSameHost || (websocket._originalSecure && !isSecure)) {
        //
        // Match curl 7.77.0 behavior and drop the following headers. These
        // headers are also dropped when following a redirect to a subdomain.
        //
        delete opts.headers.authorization;
        delete opts.headers.cookie;

        if (!isSameHost) delete opts.headers.host;

        opts.auth = undefined;
      }
    }

    //
    // Match curl 7.77.0 behavior and make the first `Authorization` header win.
    // If the `Authorization` header is set, then there is nothing to do as it
    // will take precedence.
    //
    if (opts.auth && !options.headers.authorization) {
      options.headers.authorization =
        'Basic ' + Buffer.from(opts.auth).toString('base64');
    }

    req = websocket._req = request(opts);

    if (websocket._redirects) {
      //
      // Unlike what is done for the `'upgrade'` event, no early exit is
      // triggered here if the user calls `websocket.close()` or
      // `websocket.terminate()` from a listener of the `'redirect'` event. This
      // is because the user can also call `request.destroy()` with an error
      // before calling `websocket.close()` or `websocket.terminate()` and this
      // would result in an error being emitted on the `request` object with no
      // `'error'` event listeners attached.
      //
      websocket.emit('redirect', websocket.url, req);
    }
  } else {
    req = websocket._req = request(opts);
  }

  if (opts.timeout) {
    req.on('timeout', () => {
      abortHandshake$1(websocket, req, 'Opening handshake has timed out');
    });
  }

  req.on('error', (err) => {
    if (req === null || req[kAborted]) return;

    req = websocket._req = null;
    emitErrorAndClose(websocket, err);
  });

  req.on('response', (res) => {
    const location = res.headers.location;
    const statusCode = res.statusCode;

    if (
      location &&
      opts.followRedirects &&
      statusCode >= 300 &&
      statusCode < 400
    ) {
      if (++websocket._redirects > opts.maxRedirects) {
        abortHandshake$1(websocket, req, 'Maximum redirects exceeded');
        return;
      }

      req.abort();

      let addr;

      try {
        addr = new URL$1(location, address);
      } catch (e) {
        const err = new SyntaxError(`Invalid URL: ${location}`);
        emitErrorAndClose(websocket, err);
        return;
      }

      initAsClient(websocket, addr, protocols, options);
    } else if (!websocket.emit('unexpected-response', req, res)) {
      abortHandshake$1(
        websocket,
        req,
        `Unexpected server response: ${res.statusCode}`
      );
    }
  });

  req.on('upgrade', (res, socket, head) => {
    websocket.emit('upgrade', res);

    //
    // The user may have closed the connection from a listener of the
    // `'upgrade'` event.
    //
    if (websocket.readyState !== WebSocket$2.CONNECTING) return;

    req = websocket._req = null;

    if (res.headers.upgrade.toLowerCase() !== 'websocket') {
      abortHandshake$1(websocket, socket, 'Invalid Upgrade header');
      return;
    }

    const digest = createHash$1('sha1')
      .update(key + GUID$1)
      .digest('base64');

    if (res.headers['sec-websocket-accept'] !== digest) {
      abortHandshake$1(websocket, socket, 'Invalid Sec-WebSocket-Accept header');
      return;
    }

    const serverProt = res.headers['sec-websocket-protocol'];
    let protError;

    if (serverProt !== undefined) {
      if (!protocolSet.size) {
        protError = 'Server sent a subprotocol but none was requested';
      } else if (!protocolSet.has(serverProt)) {
        protError = 'Server sent an invalid subprotocol';
      }
    } else if (protocolSet.size) {
      protError = 'Server sent no subprotocol';
    }

    if (protError) {
      abortHandshake$1(websocket, socket, protError);
      return;
    }

    if (serverProt) websocket._protocol = serverProt;

    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];

    if (secWebSocketExtensions !== undefined) {
      if (!perMessageDeflate) {
        const message =
          'Server sent a Sec-WebSocket-Extensions header but no extension ' +
          'was requested';
        abortHandshake$1(websocket, socket, message);
        return;
      }

      let extensions;

      try {
        extensions = parse$1(secWebSocketExtensions);
      } catch (err) {
        const message = 'Invalid Sec-WebSocket-Extensions header';
        abortHandshake$1(websocket, socket, message);
        return;
      }

      const extensionNames = Object.keys(extensions);

      if (
        extensionNames.length !== 1 ||
        extensionNames[0] !== PerMessageDeflate$1.extensionName
      ) {
        const message = 'Server indicated an extension that was not requested';
        abortHandshake$1(websocket, socket, message);
        return;
      }

      try {
        perMessageDeflate.accept(extensions[PerMessageDeflate$1.extensionName]);
      } catch (err) {
        const message = 'Invalid Sec-WebSocket-Extensions header';
        abortHandshake$1(websocket, socket, message);
        return;
      }

      websocket._extensions[PerMessageDeflate$1.extensionName] =
        perMessageDeflate;
    }

    websocket.setSocket(socket, head, {
      generateMask: opts.generateMask,
      maxPayload: opts.maxPayload,
      skipUTF8Validation: opts.skipUTF8Validation
    });
  });

  if (opts.finishRequest) {
    opts.finishRequest(req, websocket);
  } else {
    req.end();
  }
}

/**
 * Emit the `'error'` and `'close'` events.
 *
 * @param {WebSocket} websocket The WebSocket instance
 * @param {Error} The error to emit
 * @private
 */
function emitErrorAndClose(websocket, err) {
  websocket._readyState = WebSocket$2.CLOSING;
  websocket.emit('error', err);
  websocket.emitClose();
}

/**
 * Create a `net.Socket` and initiate a connection.
 *
 * @param {Object} options Connection options
 * @return {net.Socket} The newly created socket used to start the connection
 * @private
 */
function netConnect(options) {
  options.path = options.socketPath;
  return net.connect(options);
}

/**
 * Create a `tls.TLSSocket` and initiate a connection.
 *
 * @param {Object} options Connection options
 * @return {tls.TLSSocket} The newly created socket used to start the connection
 * @private
 */
function tlsConnect(options) {
  options.path = undefined;

  if (!options.servername && options.servername !== '') {
    options.servername = net.isIP(options.host) ? '' : options.host;
  }

  return tls.connect(options);
}

/**
 * Abort the handshake and emit an error.
 *
 * @param {WebSocket} websocket The WebSocket instance
 * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to
 *     abort or the socket to destroy
 * @param {String} message The error message
 * @private
 */
function abortHandshake$1(websocket, stream, message) {
  websocket._readyState = WebSocket$2.CLOSING;

  const err = new Error(message);
  Error.captureStackTrace(err, abortHandshake$1);

  if (stream.setHeader) {
    stream[kAborted] = true;
    stream.abort();

    if (stream.socket && !stream.socket.destroyed) {
      //
      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if
      // called after the request completed. See
      // https://github.com/websockets/ws/issues/1869.
      //
      stream.socket.destroy();
    }

    process.nextTick(emitErrorAndClose, websocket, err);
  } else {
    stream.destroy(err);
    stream.once('error', websocket.emit.bind(websocket, 'error'));
    stream.once('close', websocket.emitClose.bind(websocket));
  }
}

/**
 * Handle cases where the `ping()`, `pong()`, or `send()` methods are called
 * when the `readyState` attribute is `CLOSING` or `CLOSED`.
 *
 * @param {WebSocket} websocket The WebSocket instance
 * @param {*} [data] The data to send
 * @param {Function} [cb] Callback
 * @private
 */
function sendAfterClose(websocket, data, cb) {
  if (data) {
    const length = toBuffer(data).length;

    //
    // The `_bufferedAmount` property is used only when the peer is a client and
    // the opening handshake fails. Under these circumstances, in fact, the
    // `setSocket()` method is not called, so the `_socket` and `_sender`
    // properties are set to `null`.
    //
    if (websocket._socket) websocket._sender._bufferedBytes += length;
    else websocket._bufferedAmount += length;
  }

  if (cb) {
    const err = new Error(
      `WebSocket is not open: readyState ${websocket.readyState} ` +
        `(${readyStates[websocket.readyState]})`
    );
    process.nextTick(cb, err);
  }
}

/**
 * The listener of the `Receiver` `'conclude'` event.
 *
 * @param {Number} code The status code
 * @param {Buffer} reason The reason for closing
 * @private
 */
function receiverOnConclude(code, reason) {
  const websocket = this[kWebSocket$1];

  websocket._closeFrameReceived = true;
  websocket._closeMessage = reason;
  websocket._closeCode = code;

  if (websocket._socket[kWebSocket$1] === undefined) return;

  websocket._socket.removeListener('data', socketOnData);
  process.nextTick(resume, websocket._socket);

  if (code === 1005) websocket.close();
  else websocket.close(code, reason);
}

/**
 * The listener of the `Receiver` `'drain'` event.
 *
 * @private
 */
function receiverOnDrain() {
  const websocket = this[kWebSocket$1];

  if (!websocket.isPaused) websocket._socket.resume();
}

/**
 * The listener of the `Receiver` `'error'` event.
 *
 * @param {(RangeError|Error)} err The emitted error
 * @private
 */
function receiverOnError(err) {
  const websocket = this[kWebSocket$1];

  if (websocket._socket[kWebSocket$1] !== undefined) {
    websocket._socket.removeListener('data', socketOnData);

    //
    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See
    // https://github.com/websockets/ws/issues/1940.
    //
    process.nextTick(resume, websocket._socket);

    websocket.close(err[kStatusCode]);
  }

  websocket.emit('error', err);
}

/**
 * The listener of the `Receiver` `'finish'` event.
 *
 * @private
 */
function receiverOnFinish() {
  this[kWebSocket$1].emitClose();
}

/**
 * The listener of the `Receiver` `'message'` event.
 *
 * @param {Buffer|ArrayBuffer|Buffer[])} data The message
 * @param {Boolean} isBinary Specifies whether the message is binary or not
 * @private
 */
function receiverOnMessage(data, isBinary) {
  this[kWebSocket$1].emit('message', data, isBinary);
}

/**
 * The listener of the `Receiver` `'ping'` event.
 *
 * @param {Buffer} data The data included in the ping frame
 * @private
 */
function receiverOnPing(data) {
  const websocket = this[kWebSocket$1];

  websocket.pong(data, !websocket._isServer, NOOP);
  websocket.emit('ping', data);
}

/**
 * The listener of the `Receiver` `'pong'` event.
 *
 * @param {Buffer} data The data included in the pong frame
 * @private
 */
function receiverOnPong(data) {
  this[kWebSocket$1].emit('pong', data);
}

/**
 * Resume a readable stream
 *
 * @param {Readable} stream The readable stream
 * @private
 */
function resume(stream) {
  stream.resume();
}

/**
 * The listener of the `net.Socket` `'close'` event.
 *
 * @private
 */
function socketOnClose() {
  const websocket = this[kWebSocket$1];

  this.removeListener('close', socketOnClose);
  this.removeListener('data', socketOnData);
  this.removeListener('end', socketOnEnd);

  websocket._readyState = WebSocket$2.CLOSING;

  let chunk;

  //
  // The close frame might not have been received or the `'end'` event emitted,
  // for example, if the socket was destroyed due to an error. Ensure that the
  // `receiver` stream is closed after writing any remaining buffered data to
  // it. If the readable side of the socket is in flowing mode then there is no
  // buffered data as everything has been already written and `readable.read()`
  // will return `null`. If instead, the socket is paused, any possible buffered
  // data will be read as a single chunk.
  //
  if (
    !this._readableState.endEmitted &&
    !websocket._closeFrameReceived &&
    !websocket._receiver._writableState.errorEmitted &&
    (chunk = websocket._socket.read()) !== null
  ) {
    websocket._receiver.write(chunk);
  }

  websocket._receiver.end();

  this[kWebSocket$1] = undefined;

  clearTimeout(websocket._closeTimer);

  if (
    websocket._receiver._writableState.finished ||
    websocket._receiver._writableState.errorEmitted
  ) {
    websocket.emitClose();
  } else {
    websocket._receiver.on('error', receiverOnFinish);
    websocket._receiver.on('finish', receiverOnFinish);
  }
}

/**
 * The listener of the `net.Socket` `'data'` event.
 *
 * @param {Buffer} chunk A chunk of data
 * @private
 */
function socketOnData(chunk) {
  if (!this[kWebSocket$1]._receiver.write(chunk)) {
    this.pause();
  }
}

/**
 * The listener of the `net.Socket` `'end'` event.
 *
 * @private
 */
function socketOnEnd() {
  const websocket = this[kWebSocket$1];

  websocket._readyState = WebSocket$2.CLOSING;
  websocket._receiver.end();
  this.end();
}

/**
 * The listener of the `net.Socket` `'error'` event.
 *
 * @private
 */
function socketOnError$1() {
  const websocket = this[kWebSocket$1];

  this.removeListener('error', socketOnError$1);
  this.on('error', NOOP);

  if (websocket) {
    websocket._readyState = WebSocket$2.CLOSING;
    this.destroy();
  }
}

const { Duplex } = require$$0$5;

/**
 * Emits the `'close'` event on a stream.
 *
 * @param {Duplex} stream The stream.
 * @private
 */
function emitClose$1(stream) {
  stream.emit('close');
}

/**
 * The listener of the `'end'` event.
 *
 * @private
 */
function duplexOnEnd() {
  if (!this.destroyed && this._writableState.finished) {
    this.destroy();
  }
}

/**
 * The listener of the `'error'` event.
 *
 * @param {Error} err The error
 * @private
 */
function duplexOnError(err) {
  this.removeListener('error', duplexOnError);
  this.destroy();
  if (this.listenerCount('error') === 0) {
    // Do not suppress the throwing behavior.
    this.emit('error', err);
  }
}

/**
 * Wraps a `WebSocket` in a duplex stream.
 *
 * @param {WebSocket} ws The `WebSocket` to wrap
 * @param {Object} [options] The options for the `Duplex` constructor
 * @return {Duplex} The duplex stream
 * @public
 */
function createWebSocketStream(ws, options) {
  let terminateOnDestroy = true;

  const duplex = new Duplex({
    ...options,
    autoDestroy: false,
    emitClose: false,
    objectMode: false,
    writableObjectMode: false
  });

  ws.on('message', function message(msg, isBinary) {
    const data =
      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;

    if (!duplex.push(data)) ws.pause();
  });

  ws.once('error', function error(err) {
    if (duplex.destroyed) return;

    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.
    //
    // - If the `'error'` event is emitted before the `'open'` event, then
    //   `ws.terminate()` is a noop as no socket is assigned.
    // - Otherwise, the error is re-emitted by the listener of the `'error'`
    //   event of the `Receiver` object. The listener already closes the
    //   connection by calling `ws.close()`. This allows a close frame to be
    //   sent to the other peer. If `ws.terminate()` is called right after this,
    //   then the close frame might not be sent.
    terminateOnDestroy = false;
    duplex.destroy(err);
  });

  ws.once('close', function close() {
    if (duplex.destroyed) return;

    duplex.push(null);
  });

  duplex._destroy = function (err, callback) {
    if (ws.readyState === ws.CLOSED) {
      callback(err);
      process.nextTick(emitClose$1, duplex);
      return;
    }

    let called = false;

    ws.once('error', function error(err) {
      called = true;
      callback(err);
    });

    ws.once('close', function close() {
      if (!called) callback(err);
      process.nextTick(emitClose$1, duplex);
    });

    if (terminateOnDestroy) ws.terminate();
  };

  duplex._final = function (callback) {
    if (ws.readyState === ws.CONNECTING) {
      ws.once('open', function open() {
        duplex._final(callback);
      });
      return;
    }

    // If the value of the `_socket` property is `null` it means that `ws` is a
    // client websocket and the handshake failed. In fact, when this happens, a
    // socket is never assigned to the websocket. Wait for the `'error'` event
    // that will be emitted by the websocket.
    if (ws._socket === null) return;

    if (ws._socket._writableState.finished) {
      callback();
      if (duplex._readableState.endEmitted) duplex.destroy();
    } else {
      ws._socket.once('finish', function finish() {
        // `duplex` is not destroyed here because the `'end'` event will be
        // emitted on `duplex` after this `'finish'` event. The EOF signaling
        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.
        callback();
      });
      ws.close();
    }
  };

  duplex._read = function () {
    if (ws.isPaused) ws.resume();
  };

  duplex._write = function (chunk, encoding, callback) {
    if (ws.readyState === ws.CONNECTING) {
      ws.once('open', function open() {
        duplex._write(chunk, encoding, callback);
      });
      return;
    }

    ws.send(chunk, callback);
  };

  duplex.on('end', duplexOnEnd);
  duplex.on('error', duplexOnError);
  return duplex;
}

var stream = createWebSocketStream;

const { tokenChars } = validationExports;

/**
 * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.
 *
 * @param {String} header The field value of the header
 * @return {Set} The subprotocol names
 * @public
 */
function parse(header) {
  const protocols = new Set();
  let start = -1;
  let end = -1;
  let i = 0;

  for (i; i < header.length; i++) {
    const code = header.charCodeAt(i);

    if (end === -1 && tokenChars[code] === 1) {
      if (start === -1) start = i;
    } else if (
      i !== 0 &&
      (code === 0x20 /* ' ' */ || code === 0x09) /* '\t' */
    ) {
      if (end === -1 && start !== -1) end = i;
    } else if (code === 0x2c /* ',' */) {
      if (start === -1) {
        throw new SyntaxError(`Unexpected character at index ${i}`);
      }

      if (end === -1) end = i;

      const protocol = header.slice(start, end);

      if (protocols.has(protocol)) {
        throw new SyntaxError(`The "${protocol}" subprotocol is duplicated`);
      }

      protocols.add(protocol);
      start = end = -1;
    } else {
      throw new SyntaxError(`Unexpected character at index ${i}`);
    }
  }

  if (start === -1 || end !== -1) {
    throw new SyntaxError('Unexpected end of input');
  }

  const protocol = header.slice(start, i);

  if (protocols.has(protocol)) {
    throw new SyntaxError(`The "${protocol}" subprotocol is duplicated`);
  }

  protocols.add(protocol);
  return protocols;
}

var subprotocol$1 = { parse };

/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "^net|tls|https$" }] */

const EventEmitter$1 = require$$0$7;
const http = require$$1$2;
const { createHash } = require$$5;

const extension = extension$1;
const PerMessageDeflate = permessageDeflate;
const subprotocol = subprotocol$1;
const WebSocket$1 = websocket;
const { GUID, kWebSocket } = constants;

const keyRegex = /^[+/0-9A-Za-z]{22}==$/;

const RUNNING = 0;
const CLOSING = 1;
const CLOSED = 2;

/**
 * Class representing a WebSocket server.
 *
 * @extends EventEmitter
 */
class WebSocketServer extends EventEmitter$1 {
  /**
   * Create a `WebSocketServer` instance.
   *
   * @param {Object} options Configuration options
   * @param {Number} [options.backlog=511] The maximum length of the queue of
   *     pending connections
   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to
   *     track clients
   * @param {Function} [options.handleProtocols] A hook to handle protocols
   * @param {String} [options.host] The hostname where to bind the server
   * @param {Number} [options.maxPayload=104857600] The maximum allowed message
   *     size
   * @param {Boolean} [options.noServer=false] Enable no server mode
   * @param {String} [options.path] Accept only connections matching this path
   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable
   *     permessage-deflate
   * @param {Number} [options.port] The port where to bind the server
   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S
   *     server to use
   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
   *     not to skip UTF-8 validation for text and close messages
   * @param {Function} [options.verifyClient] A hook to reject connections
   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`
   *     class to use. It must be the `WebSocket` class or class that extends it
   * @param {Function} [callback] A listener for the `listening` event
   */
  constructor(options, callback) {
    super();

    options = {
      maxPayload: 100 * 1024 * 1024,
      skipUTF8Validation: false,
      perMessageDeflate: false,
      handleProtocols: null,
      clientTracking: true,
      verifyClient: null,
      noServer: false,
      backlog: null, // use default (511 as implemented in net.js)
      server: null,
      host: null,
      path: null,
      port: null,
      WebSocket: WebSocket$1,
      ...options
    };

    if (
      (options.port == null && !options.server && !options.noServer) ||
      (options.port != null && (options.server || options.noServer)) ||
      (options.server && options.noServer)
    ) {
      throw new TypeError(
        'One and only one of the "port", "server", or "noServer" options ' +
          'must be specified'
      );
    }

    if (options.port != null) {
      this._server = http.createServer((req, res) => {
        const body = http.STATUS_CODES[426];

        res.writeHead(426, {
          'Content-Length': body.length,
          'Content-Type': 'text/plain'
        });
        res.end(body);
      });
      this._server.listen(
        options.port,
        options.host,
        options.backlog,
        callback
      );
    } else if (options.server) {
      this._server = options.server;
    }

    if (this._server) {
      const emitConnection = this.emit.bind(this, 'connection');

      this._removeListeners = addListeners(this._server, {
        listening: this.emit.bind(this, 'listening'),
        error: this.emit.bind(this, 'error'),
        upgrade: (req, socket, head) => {
          this.handleUpgrade(req, socket, head, emitConnection);
        }
      });
    }

    if (options.perMessageDeflate === true) options.perMessageDeflate = {};
    if (options.clientTracking) {
      this.clients = new Set();
      this._shouldEmitClose = false;
    }

    this.options = options;
    this._state = RUNNING;
  }

  /**
   * Returns the bound address, the address family name, and port of the server
   * as reported by the operating system if listening on an IP socket.
   * If the server is listening on a pipe or UNIX domain socket, the name is
   * returned as a string.
   *
   * @return {(Object|String|null)} The address of the server
   * @public
   */
  address() {
    if (this.options.noServer) {
      throw new Error('The server is operating in "noServer" mode');
    }

    if (!this._server) return null;
    return this._server.address();
  }

  /**
   * Stop the server from accepting new connections and emit the `'close'` event
   * when all existing connections are closed.
   *
   * @param {Function} [cb] A one-time listener for the `'close'` event
   * @public
   */
  close(cb) {
    if (this._state === CLOSED) {
      if (cb) {
        this.once('close', () => {
          cb(new Error('The server is not running'));
        });
      }

      process.nextTick(emitClose, this);
      return;
    }

    if (cb) this.once('close', cb);

    if (this._state === CLOSING) return;
    this._state = CLOSING;

    if (this.options.noServer || this.options.server) {
      if (this._server) {
        this._removeListeners();
        this._removeListeners = this._server = null;
      }

      if (this.clients) {
        if (!this.clients.size) {
          process.nextTick(emitClose, this);
        } else {
          this._shouldEmitClose = true;
        }
      } else {
        process.nextTick(emitClose, this);
      }
    } else {
      const server = this._server;

      this._removeListeners();
      this._removeListeners = this._server = null;

      //
      // The HTTP/S server was created internally. Close it, and rely on its
      // `'close'` event.
      //
      server.close(() => {
        emitClose(this);
      });
    }
  }

  /**
   * See if a given request should be handled by this server instance.
   *
   * @param {http.IncomingMessage} req Request object to inspect
   * @return {Boolean} `true` if the request is valid, else `false`
   * @public
   */
  shouldHandle(req) {
    if (this.options.path) {
      const index = req.url.indexOf('?');
      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;

      if (pathname !== this.options.path) return false;
    }

    return true;
  }

  /**
   * Handle a HTTP Upgrade request.
   *
   * @param {http.IncomingMessage} req The request object
   * @param {(net.Socket|tls.Socket)} socket The network socket between the
   *     server and client
   * @param {Buffer} head The first packet of the upgraded stream
   * @param {Function} cb Callback
   * @public
   */
  handleUpgrade(req, socket, head, cb) {
    socket.on('error', socketOnError);

    const key = req.headers['sec-websocket-key'];
    const version = +req.headers['sec-websocket-version'];

    if (req.method !== 'GET') {
      const message = 'Invalid HTTP method';
      abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);
      return;
    }

    if (req.headers.upgrade.toLowerCase() !== 'websocket') {
      const message = 'Invalid Upgrade header';
      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
      return;
    }

    if (!key || !keyRegex.test(key)) {
      const message = 'Missing or invalid Sec-WebSocket-Key header';
      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
      return;
    }

    if (version !== 8 && version !== 13) {
      const message = 'Missing or invalid Sec-WebSocket-Version header';
      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
      return;
    }

    if (!this.shouldHandle(req)) {
      abortHandshake(socket, 400);
      return;
    }

    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];
    let protocols = new Set();

    if (secWebSocketProtocol !== undefined) {
      try {
        protocols = subprotocol.parse(secWebSocketProtocol);
      } catch (err) {
        const message = 'Invalid Sec-WebSocket-Protocol header';
        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
        return;
      }
    }

    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];
    const extensions = {};

    if (
      this.options.perMessageDeflate &&
      secWebSocketExtensions !== undefined
    ) {
      const perMessageDeflate = new PerMessageDeflate(
        this.options.perMessageDeflate,
        true,
        this.options.maxPayload
      );

      try {
        const offers = extension.parse(secWebSocketExtensions);

        if (offers[PerMessageDeflate.extensionName]) {
          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);
          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
        }
      } catch (err) {
        const message =
          'Invalid or unacceptable Sec-WebSocket-Extensions header';
        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
        return;
      }
    }

    //
    // Optionally call external client verification handler.
    //
    if (this.options.verifyClient) {
      const info = {
        origin:
          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],
        secure: !!(req.socket.authorized || req.socket.encrypted),
        req
      };

      if (this.options.verifyClient.length === 2) {
        this.options.verifyClient(info, (verified, code, message, headers) => {
          if (!verified) {
            return abortHandshake(socket, code || 401, message, headers);
          }

          this.completeUpgrade(
            extensions,
            key,
            protocols,
            req,
            socket,
            head,
            cb
          );
        });
        return;
      }

      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);
    }

    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);
  }

  /**
   * Upgrade the connection to WebSocket.
   *
   * @param {Object} extensions The accepted extensions
   * @param {String} key The value of the `Sec-WebSocket-Key` header
   * @param {Set} protocols The subprotocols
   * @param {http.IncomingMessage} req The request object
   * @param {(net.Socket|tls.Socket)} socket The network socket between the
   *     server and client
   * @param {Buffer} head The first packet of the upgraded stream
   * @param {Function} cb Callback
   * @throws {Error} If called more than once with the same socket
   * @private
   */
  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {
    //
    // Destroy the socket if the client has already sent a FIN packet.
    //
    if (!socket.readable || !socket.writable) return socket.destroy();

    if (socket[kWebSocket]) {
      throw new Error(
        'server.handleUpgrade() was called more than once with the same ' +
          'socket, possibly due to a misconfiguration'
      );
    }

    if (this._state > RUNNING) return abortHandshake(socket, 503);

    const digest = createHash('sha1')
      .update(key + GUID)
      .digest('base64');

    const headers = [
      'HTTP/1.1 101 Switching Protocols',
      'Upgrade: websocket',
      'Connection: Upgrade',
      `Sec-WebSocket-Accept: ${digest}`
    ];

    const ws = new this.options.WebSocket(null);

    if (protocols.size) {
      //
      // Optionally call external protocol selection handler.
      //
      const protocol = this.options.handleProtocols
        ? this.options.handleProtocols(protocols, req)
        : protocols.values().next().value;

      if (protocol) {
        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
        ws._protocol = protocol;
      }
    }

    if (extensions[PerMessageDeflate.extensionName]) {
      const params = extensions[PerMessageDeflate.extensionName].params;
      const value = extension.format({
        [PerMessageDeflate.extensionName]: [params]
      });
      headers.push(`Sec-WebSocket-Extensions: ${value}`);
      ws._extensions = extensions;
    }

    //
    // Allow external modification/inspection of handshake headers.
    //
    this.emit('headers', headers, req);

    socket.write(headers.concat('\r\n').join('\r\n'));
    socket.removeListener('error', socketOnError);

    ws.setSocket(socket, head, {
      maxPayload: this.options.maxPayload,
      skipUTF8Validation: this.options.skipUTF8Validation
    });

    if (this.clients) {
      this.clients.add(ws);
      ws.on('close', () => {
        this.clients.delete(ws);

        if (this._shouldEmitClose && !this.clients.size) {
          process.nextTick(emitClose, this);
        }
      });
    }

    cb(ws, req);
  }
}

var websocketServer = WebSocketServer;

/**
 * Add event listeners on an `EventEmitter` using a map of <event, listener>
 * pairs.
 *
 * @param {EventEmitter} server The event emitter
 * @param {Object.<String, Function>} map The listeners to add
 * @return {Function} A function that will remove the added listeners when
 *     called
 * @private
 */
function addListeners(server, map) {
  for (const event of Object.keys(map)) server.on(event, map[event]);

  return function removeListeners() {
    for (const event of Object.keys(map)) {
      server.removeListener(event, map[event]);
    }
  };
}

/**
 * Emit a `'close'` event on an `EventEmitter`.
 *
 * @param {EventEmitter} server The event emitter
 * @private
 */
function emitClose(server) {
  server._state = CLOSED;
  server.emit('close');
}

/**
 * Handle socket errors.
 *
 * @private
 */
function socketOnError() {
  this.destroy();
}

/**
 * Close the connection when preconditions are not fulfilled.
 *
 * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request
 * @param {Number} code The HTTP response status code
 * @param {String} [message] The HTTP response body
 * @param {Object} [headers] Additional HTTP response headers
 * @private
 */
function abortHandshake(socket, code, message, headers) {
  //
  // The socket is writable unless the user destroyed or ended it before calling
  // `server.handleUpgrade()` or in the `verifyClient` function, which is a user
  // error. Handling this does not make much sense as the worst that can happen
  // is that some of the data written by the user might be discarded due to the
  // call to `socket.end()` below, which triggers an `'error'` event that in
  // turn causes the socket to be destroyed.
  //
  message = message || http.STATUS_CODES[code];
  headers = {
    Connection: 'close',
    'Content-Type': 'text/html',
    'Content-Length': Buffer.byteLength(message),
    ...headers
  };

  socket.once('finish', socket.destroy);

  socket.end(
    `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\r\n` +
      Object.keys(headers)
        .map((h) => `${h}: ${headers[h]}`)
        .join('\r\n') +
      '\r\n\r\n' +
      message
  );
}

/**
 * Emit a `'wsClientError'` event on a `WebSocketServer` if there is at least
 * one listener for it, otherwise call `abortHandshake()`.
 *
 * @param {WebSocketServer} server The WebSocket server
 * @param {http.IncomingMessage} req The request object
 * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request
 * @param {Number} code The HTTP response status code
 * @param {String} message The HTTP response body
 * @private
 */
function abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {
  if (server.listenerCount('wsClientError')) {
    const err = new Error(message);
    Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);

    server.emit('wsClientError', err, socket, req);
  } else {
    abortHandshake(socket, code, message);
  }
}

const WebSocket = websocket;

WebSocket.createWebSocketStream = stream;
WebSocket.Server = websocketServer;
WebSocket.Receiver = receiver;
WebSocket.Sender = sender;

WebSocket.WebSocket = WebSocket;
WebSocket.WebSocketServer = WebSocket.Server;

var ws = WebSocket;

var node = ws;

var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(socketwrapper, "__esModule", { value: true });
socketwrapper.SocketWrapper = void 0;
const isomorphic_ws_1 = __importDefault(node);
function environmentIsNodeJs() {
    return (typeof process !== "undefined" &&
        typeof process.versions !== "undefined" &&
        typeof process.versions.node !== "undefined");
}
/**
 * A thin wrapper around isomorphic-ws' WebSocket class that adds
 * - constant message/error/open/close handlers
 * - explict connection via a connect() method
 * - type support for events
 * - handling of corner cases in the open and close behaviour
 */
class SocketWrapper {
    constructor(url, messageHandler, errorHandler, openHandler, closeHandler, timeout = 10000) {
        this.closed = false;
        this.connected = new Promise((resolve, reject) => {
            this.connectedResolver = resolve;
            this.connectedRejecter = reject;
        });
        this.url = url;
        this.messageHandler = messageHandler;
        this.errorHandler = errorHandler;
        this.openHandler = openHandler;
        this.closeHandler = closeHandler;
        this.timeout = timeout;
    }
    /**
     * returns a promise that resolves when connection is open
     */
    connect() {
        const socket = new isomorphic_ws_1.default(this.url);
        socket.onerror = (error) => {
            this.clearTimeout();
            if (this.errorHandler) {
                this.errorHandler(error);
            }
        };
        socket.onmessage = (messageEvent) => {
            this.messageHandler({
                type: messageEvent.type,
                data: messageEvent.data,
            });
        };
        socket.onopen = (_) => {
            this.clearTimeout();
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.connectedResolver();
            if (this.openHandler) {
                this.openHandler();
            }
        };
        socket.onclose = (closeEvent) => {
            this.closed = true;
            if (this.closeHandler) {
                this.closeHandler(closeEvent);
            }
        };
        const started = Date.now();
        this.timeoutId = setTimeout(() => {
            socket.onmessage = () => 0;
            socket.onerror = () => 0;
            socket.onopen = () => 0;
            socket.onclose = () => 0;
            socket.close();
            this.socket = undefined;
            const elapsed = Math.floor(Date.now() - started);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.connectedRejecter(`Connection attempt timed out after ${elapsed} ms`);
        }, this.timeout);
        this.socket = socket;
    }
    /**
     * Closes an established connection and aborts other connection states
     */
    disconnect() {
        if (!this.socket) {
            throw new Error("Socket undefined. This must be called after connecting.");
        }
        this.clearTimeout();
        switch (this.socket.readyState) {
            case isomorphic_ws_1.default.OPEN:
                this.socket.close(1000 /* Normal Closure */);
                break;
            case isomorphic_ws_1.default.CLOSED:
                // nothing to be done
                break;
            case isomorphic_ws_1.default.CONNECTING:
                // imitate missing abort API
                this.socket.onopen = () => 0;
                this.socket.onclose = () => 0;
                this.socket.onerror = () => 0;
                this.socket.onmessage = () => 0;
                this.socket = undefined;
                if (this.closeHandler) {
                    this.closeHandler({ wasClean: false, code: 4001 });
                }
                break;
            case isomorphic_ws_1.default.CLOSING:
                // already closing. Let it proceed
                break;
            default:
                throw new Error(`Unknown readyState: ${this.socket.readyState}`);
        }
    }
    async send(data) {
        return new Promise((resolve, reject) => {
            if (!this.socket) {
                throw new Error("Socket undefined. This must be called after connecting.");
            }
            if (this.closed) {
                throw new Error("Socket was closed, so no data can be sent anymore.");
            }
            // this exception should be thrown by send() automatically according to
            // https://developer.mozilla.org/de/docs/Web/API/WebSocket#send() but it does not work in browsers
            if (this.socket.readyState !== isomorphic_ws_1.default.OPEN) {
                throw new Error("Websocket is not open");
            }
            if (environmentIsNodeJs()) {
                this.socket.send(data, (err) => (err ? reject(err) : resolve()));
            }
            else {
                // Browser websocket send method does not accept a callback
                this.socket.send(data);
                resolve();
            }
        });
    }
    /**
     * Clears the timeout function, such that no timeout error will be raised anymore. This should be
     * called when the connection is established, a connection error occurred or the socket is disconnected.
     *
     * This method must not be called before `connect()`.
     * This method is idempotent.
     */
    clearTimeout() {
        if (!this.timeoutId) {
            throw new Error("Timeout ID not set. This should not happen and usually means connect() was not called.");
        }
        // Note: do not unset this.timeoutId to allow multiple calls to this function
        clearTimeout(this.timeoutId);
    }
}
socketwrapper.SocketWrapper = SocketWrapper;

Object.defineProperty(streamingsocket, "__esModule", { value: true });
streamingsocket.StreamingSocket = void 0;
const xstream_1$2 = xstream;
const socketwrapper_1 = socketwrapper;
/**
 * A WebSocket wrapper that exposes all events as a stream.
 *
 * This underlying socket will not be closed when the stream has no listeners
 */
class StreamingSocket {
    constructor(url, timeout = 10000) {
        this.socket = new socketwrapper_1.SocketWrapper(url, (event) => {
            if (this.eventProducerListener) {
                this.eventProducerListener.next(event);
            }
        }, (errorEvent) => {
            if (this.eventProducerListener) {
                this.eventProducerListener.error(errorEvent);
            }
        }, () => {
            // socket opened
        }, (closeEvent) => {
            if (this.eventProducerListener) {
                if (closeEvent.wasClean) {
                    this.eventProducerListener.complete();
                }
                else {
                    this.eventProducerListener.error("Socket was closed unclean");
                }
            }
        }, timeout);
        this.connected = this.socket.connected;
        const eventProducer = {
            start: (listener) => (this.eventProducerListener = listener),
            stop: () => (this.eventProducerListener = undefined),
        };
        this.events = xstream_1$2.Stream.create(eventProducer);
    }
    connect() {
        this.socket.connect();
    }
    disconnect() {
        this.socket.disconnect();
    }
    async send(data) {
        return this.socket.send(data);
    }
}
streamingsocket.StreamingSocket = StreamingSocket;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.QueueingStreamingSocket = exports.ConnectionStatus = void 0;
	const stream_1 = build$3;
	const xstream_1 = xstream;
	const streamingsocket_1 = streamingsocket;
	var ConnectionStatus;
	(function (ConnectionStatus) {
	    ConnectionStatus[ConnectionStatus["Unconnected"] = 0] = "Unconnected";
	    ConnectionStatus[ConnectionStatus["Connecting"] = 1] = "Connecting";
	    ConnectionStatus[ConnectionStatus["Connected"] = 2] = "Connected";
	    ConnectionStatus[ConnectionStatus["Disconnected"] = 3] = "Disconnected";
	})(ConnectionStatus = exports.ConnectionStatus || (exports.ConnectionStatus = {}));
	/**
	 * A wrapper around StreamingSocket that can queue requests.
	 */
	class QueueingStreamingSocket {
	    constructor(url, timeout = 10000, reconnectedHandler) {
	        this.queue = [];
	        this.isProcessingQueue = false;
	        this.url = url;
	        this.timeout = timeout;
	        this.reconnectedHandler = reconnectedHandler;
	        const eventProducer = {
	            start: (listener) => (this.eventProducerListener = listener),
	            stop: () => (this.eventProducerListener = undefined),
	        };
	        this.events = xstream_1.Stream.create(eventProducer);
	        this.connectionStatusProducer = new stream_1.DefaultValueProducer(ConnectionStatus.Unconnected);
	        this.connectionStatus = new stream_1.ValueAndUpdates(this.connectionStatusProducer);
	        this.socket = new streamingsocket_1.StreamingSocket(this.url, this.timeout);
	        this.socket.events.subscribe({
	            next: (event) => {
	                if (!this.eventProducerListener)
	                    throw new Error("No event producer listener set");
	                this.eventProducerListener.next(event);
	            },
	            error: () => this.connectionStatusProducer.update(ConnectionStatus.Disconnected),
	        });
	    }
	    connect() {
	        this.connectionStatusProducer.update(ConnectionStatus.Connecting);
	        this.socket.connected.then(async () => {
	            this.connectionStatusProducer.update(ConnectionStatus.Connected);
	            return this.processQueue();
	        }, () => this.connectionStatusProducer.update(ConnectionStatus.Disconnected));
	        this.socket.connect();
	    }
	    disconnect() {
	        this.connectionStatusProducer.update(ConnectionStatus.Disconnected);
	        this.socket.disconnect();
	    }
	    reconnect() {
	        this.socket = new streamingsocket_1.StreamingSocket(this.url, this.timeout);
	        this.socket.events.subscribe({
	            next: (event) => {
	                if (!this.eventProducerListener)
	                    throw new Error("No event producer listener set");
	                this.eventProducerListener.next(event);
	            },
	            error: () => this.connectionStatusProducer.update(ConnectionStatus.Disconnected),
	        });
	        // eslint-disable-next-line @typescript-eslint/no-floating-promises
	        this.socket.connected.then(() => {
	            if (this.reconnectedHandler) {
	                this.reconnectedHandler();
	            }
	        });
	        this.connect();
	    }
	    getQueueLength() {
	        return this.queue.length;
	    }
	    queueRequest(request) {
	        this.queue.push(request);
	        // We don’t need to wait for the queue to be processed.
	        // eslint-disable-next-line @typescript-eslint/no-floating-promises
	        this.processQueue();
	    }
	    async processQueue() {
	        if (this.isProcessingQueue || this.connectionStatus.value !== ConnectionStatus.Connected) {
	            return;
	        }
	        this.isProcessingQueue = true;
	        let request;
	        while ((request = this.queue.shift())) {
	            try {
	                await this.socket.send(request);
	                this.isProcessingQueue = false;
	            }
	            catch (error) {
	                // Probably the connection is down; will try again automatically when reconnected.
	                this.queue.unshift(request);
	                this.isProcessingQueue = false;
	                return;
	            }
	        }
	    }
	}
	exports.QueueingStreamingSocket = QueueingStreamingSocket;
	
} (queueingstreamingsocket));

var reconnectingsocket = {};

Object.defineProperty(reconnectingsocket, "__esModule", { value: true });
reconnectingsocket.ReconnectingSocket = void 0;
const xstream_1$1 = xstream;
const queueingstreamingsocket_1 = queueingstreamingsocket;
/**
 * A wrapper around QueueingStreamingSocket that reconnects automatically.
 */
class ReconnectingSocket {
    constructor(url, timeout = 10000, reconnectedHandler) {
        this.unconnected = true;
        this.disconnected = false;
        this.timeoutIndex = 0;
        this.reconnectTimeout = null;
        const eventProducer = {
            start: (listener) => (this.eventProducerListener = listener),
            stop: () => (this.eventProducerListener = undefined),
        };
        this.events = xstream_1$1.Stream.create(eventProducer);
        this.socket = new queueingstreamingsocket_1.QueueingStreamingSocket(url, timeout, reconnectedHandler);
        this.socket.events.subscribe({
            next: (event) => {
                if (this.eventProducerListener) {
                    this.eventProducerListener.next(event);
                }
            },
            error: (error) => {
                if (this.eventProducerListener) {
                    this.eventProducerListener.error(error);
                }
            },
        });
        this.connectionStatus = this.socket.connectionStatus;
        this.connectionStatus.updates.subscribe({
            next: (status) => {
                if (status === queueingstreamingsocket_1.ConnectionStatus.Connected) {
                    this.timeoutIndex = 0;
                }
                if (status === queueingstreamingsocket_1.ConnectionStatus.Disconnected) {
                    if (this.reconnectTimeout) {
                        clearTimeout(this.reconnectTimeout);
                        this.reconnectTimeout = null;
                    }
                    this.reconnectTimeout = setTimeout(() => this.socket.reconnect(), ReconnectingSocket.calculateTimeout(this.timeoutIndex++));
                }
            },
        });
    }
    /** Starts with a 0.1 second timeout, then doubles every attempt with a maximum timeout of 5 seconds. */
    static calculateTimeout(index) {
        return Math.min(2 ** index * 100, 5000);
    }
    connect() {
        if (!this.unconnected) {
            throw new Error("Cannot connect: socket has already connected");
        }
        this.socket.connect();
        this.unconnected = false;
    }
    disconnect() {
        if (this.unconnected) {
            throw new Error("Cannot disconnect: socket has not yet connected");
        }
        this.socket.disconnect();
        if (this.eventProducerListener) {
            this.eventProducerListener.complete();
        }
        this.disconnected = true;
    }
    queueRequest(request) {
        if (this.disconnected) {
            throw new Error("Cannot queue request: socket has disconnected");
        }
        this.socket.queueRequest(request);
    }
}
reconnectingsocket.ReconnectingSocket = ReconnectingSocket;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.StreamingSocket = exports.SocketWrapper = exports.ReconnectingSocket = exports.QueueingStreamingSocket = exports.ConnectionStatus = void 0;
	var queueingstreamingsocket_1 = queueingstreamingsocket;
	Object.defineProperty(exports, "ConnectionStatus", { enumerable: true, get: function () { return queueingstreamingsocket_1.ConnectionStatus; } });
	Object.defineProperty(exports, "QueueingStreamingSocket", { enumerable: true, get: function () { return queueingstreamingsocket_1.QueueingStreamingSocket; } });
	var reconnectingsocket_1 = reconnectingsocket;
	Object.defineProperty(exports, "ReconnectingSocket", { enumerable: true, get: function () { return reconnectingsocket_1.ReconnectingSocket; } });
	var socketwrapper_1 = socketwrapper;
	Object.defineProperty(exports, "SocketWrapper", { enumerable: true, get: function () { return socketwrapper_1.SocketWrapper; } });
	var streamingsocket_1 = streamingsocket;
	Object.defineProperty(exports, "StreamingSocket", { enumerable: true, get: function () { return streamingsocket_1.StreamingSocket; } });
	
} (build));

Object.defineProperty(websocketclient, "__esModule", { value: true });
websocketclient.WebsocketClient = void 0;
const json_rpc_1 = build$1;
const socket_1 = build;
const stream_1 = build$3;
const xstream_1 = xstream;
const rpcclient_1 = rpcclient;
function defaultErrorHandler(error) {
    throw error;
}
function toJsonRpcResponse(message) {
    // this should never happen, but I want an alert if it does
    if (message.type !== "message") {
        throw new Error(`Unexcepted message type on websocket: ${message.type}`);
    }
    const jsonRpcEvent = (0, json_rpc_1.parseJsonRpcResponse)(JSON.parse(message.data));
    return jsonRpcEvent;
}
class RpcEventProducer {
    constructor(request, socket) {
        this.running = false;
        this.subscriptions = [];
        this.request = request;
        this.socket = socket;
    }
    /**
     * Implementation of Producer.start
     */
    start(listener) {
        if (this.running) {
            throw Error("Already started. Please stop first before restarting.");
        }
        this.running = true;
        this.connectToClient(listener);
        this.socket.queueRequest(JSON.stringify(this.request));
    }
    /**
     * Implementation of Producer.stop
     *
     * Called by the stream when the stream's last listener stopped listening
     * or when the producer completed.
     */
    stop() {
        this.running = false;
        // Tell the server we are done in order to save resources. We cannot wait for the result.
        // This may fail when socket connection is not open, thus ignore errors in queueRequest
        const endRequest = { ...this.request, method: "unsubscribe" };
        try {
            this.socket.queueRequest(JSON.stringify(endRequest));
        }
        catch (error) {
            if (error instanceof Error && error.message.match(/socket has disconnected/i)) ;
            else {
                throw error;
            }
        }
    }
    connectToClient(listener) {
        const responseStream = this.socket.events.map(toJsonRpcResponse);
        // this should unsubscribe itself, so doesn't need to be removed explicitly
        const idSubscription = responseStream
            .filter((response) => response.id === this.request.id)
            .subscribe({
            next: (response) => {
                if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {
                    this.closeSubscriptions();
                    listener.error(JSON.stringify(response.error));
                }
                idSubscription.unsubscribe();
            },
        });
        // this will fire on a response (success or error)
        // Tendermint adds an "#event" suffix for events that follow a previous subscription
        // https://github.com/tendermint/tendermint/blob/v0.23.0/rpc/core/events.go#L107
        const idEventSubscription = responseStream
            .filter((response) => response.id === this.request.id)
            .subscribe({
            next: (response) => {
                if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {
                    this.closeSubscriptions();
                    listener.error(JSON.stringify(response.error));
                }
                else {
                    listener.next(response.result);
                }
            },
        });
        // this will fire in case the websocket disconnects cleanly
        const nonResponseSubscription = responseStream.subscribe({
            error: (error) => {
                this.closeSubscriptions();
                listener.error(error);
            },
            complete: () => {
                this.closeSubscriptions();
                listener.complete();
            },
        });
        this.subscriptions.push(idSubscription, idEventSubscription, nonResponseSubscription);
    }
    closeSubscriptions() {
        for (const subscription of this.subscriptions) {
            subscription.unsubscribe();
        }
        // clear unused subscriptions
        this.subscriptions = [];
    }
}
class WebsocketClient {
    constructor(baseUrl, onError = defaultErrorHandler) {
        // Lazily create streams and use the same stream when listening to the same query twice.
        //
        // Creating streams is cheap since producer is not started as long as nobody listens to events. Thus this
        // map is never cleared and there is no need to do so. But unsubscribe all the subscriptions!
        this.subscriptionStreams = new Map();
        // accept host.name:port and assume ws protocol
        // make sure we don't end up with ...//websocket
        const path = baseUrl.endsWith("/") ? "websocket" : "/websocket";
        const cleanBaseUrl = (0, rpcclient_1.hasProtocol)(baseUrl) ? baseUrl : "ws://" + baseUrl;
        this.url = cleanBaseUrl + path;
        this.socket = new socket_1.ReconnectingSocket(this.url);
        const errorSubscription = this.socket.events.subscribe({
            error: (error) => {
                onError(error);
                errorSubscription.unsubscribe();
            },
        });
        this.jsonRpcResponseStream = this.socket.events.map(toJsonRpcResponse);
        this.socket.connect();
    }
    async execute(request) {
        const pendingResponse = this.responseForRequestId(request.id);
        this.socket.queueRequest(JSON.stringify(request));
        const response = await pendingResponse;
        if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {
            throw new Error(JSON.stringify(response.error));
        }
        return response;
    }
    listen(request) {
        if (request.method !== "subscribe") {
            throw new Error(`Request method must be "subscribe" to start event listening`);
        }
        const query = request.params.query;
        if (typeof query !== "string") {
            throw new Error("request.params.query must be a string");
        }
        if (!this.subscriptionStreams.has(query)) {
            const producer = new RpcEventProducer(request, this.socket);
            const stream = xstream_1.Stream.create(producer);
            this.subscriptionStreams.set(query, stream);
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return this.subscriptionStreams.get(query).filter((response) => response.query !== undefined);
    }
    /**
     * Resolves as soon as websocket is connected. execute() queues requests automatically,
     * so this should be required for testing purposes only.
     */
    async connected() {
        await this.socket.connectionStatus.waitFor(socket_1.ConnectionStatus.Connected);
        console.log("WS CONNECTED");
    }
    disconnect() {
        this.socket.disconnect();
    }
    async responseForRequestId(id) {
        return (0, stream_1.firstEvent)(this.jsonRpcResponseStream.filter((r) => r.id === id));
    }
}
websocketclient.WebsocketClient = WebsocketClient;

(function (exports) {
	// This folder contains Tendermint-specific RPC clients
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.WebsocketClient = exports.instanceOfRpcStreamingClient = exports.HttpClient = exports.HttpBatchClient = void 0;
	var httpbatchclient_1 = httpbatchclient;
	Object.defineProperty(exports, "HttpBatchClient", { enumerable: true, get: function () { return httpbatchclient_1.HttpBatchClient; } });
	var httpclient_1 = httpclient;
	Object.defineProperty(exports, "HttpClient", { enumerable: true, get: function () { return httpclient_1.HttpClient; } });
	var rpcclient_1 = rpcclient;
	Object.defineProperty(exports, "instanceOfRpcStreamingClient", { enumerable: true, get: function () { return rpcclient_1.instanceOfRpcStreamingClient; } });
	var websocketclient_1 = websocketclient;
	Object.defineProperty(exports, "WebsocketClient", { enumerable: true, get: function () { return websocketclient_1.WebsocketClient; } });
	
} (rpcclients));

var tendermint34 = {};

var requests$7 = {};

(function (exports) {
	/* eslint-disable @typescript-eslint/naming-convention */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.buildQuery = exports.SubscriptionEventType = exports.Method = void 0;
	(function (Method) {
	    Method["AbciInfo"] = "abci_info";
	    Method["AbciQuery"] = "abci_query";
	    Method["Block"] = "block";
	    /** Get block headers for minHeight <= height <= maxHeight. */
	    Method["Blockchain"] = "blockchain";
	    Method["BlockResults"] = "block_results";
	    Method["BlockSearch"] = "block_search";
	    Method["BroadcastTxAsync"] = "broadcast_tx_async";
	    Method["BroadcastTxSync"] = "broadcast_tx_sync";
	    Method["BroadcastTxCommit"] = "broadcast_tx_commit";
	    Method["Commit"] = "commit";
	    Method["Genesis"] = "genesis";
	    Method["Health"] = "health";
	    Method["NumUnconfirmedTxs"] = "num_unconfirmed_txs";
	    Method["Status"] = "status";
	    Method["Subscribe"] = "subscribe";
	    Method["Tx"] = "tx";
	    Method["TxSearch"] = "tx_search";
	    Method["Validators"] = "validators";
	    Method["Unsubscribe"] = "unsubscribe";
	})(exports.Method || (exports.Method = {}));
	(function (SubscriptionEventType) {
	    SubscriptionEventType["NewBlock"] = "NewBlock";
	    SubscriptionEventType["NewBlockHeader"] = "NewBlockHeader";
	    SubscriptionEventType["Tx"] = "Tx";
	})(exports.SubscriptionEventType || (exports.SubscriptionEventType = {}));
	function buildQuery(components) {
	    const tags = components.tags ? components.tags : [];
	    const tagComponents = tags.map((tag) => `${tag.key}='${tag.value}'`);
	    const rawComponents = components.raw ? [components.raw] : [];
	    return [...tagComponents, ...rawComponents].join(" AND ");
	}
	exports.buildQuery = buildQuery;
	
} (requests$7));

var responses$3 = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.VoteType = exports.broadcastTxCommitSuccess = exports.broadcastTxSyncSuccess = void 0;
	/**
	 * Returns true iff transaction made it successfully into the transaction pool
	 */
	function broadcastTxSyncSuccess(res) {
	    // code must be 0 on success
	    return res.code === 0;
	}
	exports.broadcastTxSyncSuccess = broadcastTxSyncSuccess;
	/**
	 * Returns true iff transaction made it successfully into a block
	 * (i.e. success in `check_tx` and `deliver_tx` field)
	 */
	function broadcastTxCommitSuccess(response) {
	    // code must be 0 on success
	    // deliverTx may be present but empty on failure
	    return response.checkTx.code === 0 && !!response.deliverTx && response.deliverTx.code === 0;
	}
	exports.broadcastTxCommitSuccess = broadcastTxCommitSuccess;
	(function (VoteType) {
	    VoteType[VoteType["PreVote"] = 1] = "PreVote";
	    VoteType[VoteType["PreCommit"] = 2] = "PreCommit";
	})(exports.VoteType || (exports.VoteType = {}));
	
} (responses$3));

var tendermint34client = {};

var jsonrpc = {};

Object.defineProperty(jsonrpc, "__esModule", { value: true });
jsonrpc.createJsonRpcRequest = void 0;
const numbersWithoutZero = "123456789";
/** generates a random numeric character  */
function randomNumericChar() {
    return numbersWithoutZero[Math.floor(Math.random() * numbersWithoutZero.length)];
}
/**
 * An (absolutely not cryptographically secure) random integer > 0.
 */
function randomId() {
    return parseInt(Array.from({ length: 12 })
        .map(() => randomNumericChar())
        .join(""), 10);
}
/** Creates a JSON-RPC request with random ID */
// eslint-disable-next-line @typescript-eslint/ban-types
function createJsonRpcRequest(method, params) {
    const paramsCopy = params ? { ...params } : {};
    return {
        jsonrpc: "2.0",
        id: randomId(),
        method: method,
        params: paramsCopy,
    };
}
jsonrpc.createJsonRpcRequest = createJsonRpcRequest;

var adaptor$1 = {};

var hasher$1 = {};

var encodings$1 = {};

Object.defineProperty(encodings$1, "__esModule", { value: true });
encodings$1.encodeBlockId = encodings$1.encodeVersion = encodings$1.encodeBytes = encodings$1.encodeTime = encodings$1.encodeUvarint = encodings$1.encodeString = encodings$1.dictionaryToStringMap = encodings$1.may = encodings$1.assertNotEmpty = encodings$1.assertObject = encodings$1.assertArray = encodings$1.assertNumber = encodings$1.assertString = encodings$1.assertBoolean = encodings$1.assertSet = void 0;
const encoding_1$6 = build$6;
/**
 * A runtime checker that ensures a given value is set (i.e. not undefined or null)
 *
 * This is used when you want to verify that data at runtime matches the expected type.
 */
function assertSet$1(value) {
    if (value === undefined) {
        throw new Error("Value must not be undefined");
    }
    if (value === null) {
        throw new Error("Value must not be null");
    }
    return value;
}
encodings$1.assertSet = assertSet$1;
/**
 * A runtime checker that ensures a given value is a boolean
 *
 * This is used when you want to verify that data at runtime matches the expected type.
 * This implies assertSet.
 */
function assertBoolean$1(value) {
    assertSet$1(value);
    if (typeof value !== "boolean") {
        throw new Error("Value must be a boolean");
    }
    return value;
}
encodings$1.assertBoolean = assertBoolean$1;
/**
 * A runtime checker that ensures a given value is a string.
 *
 * This is used when you want to verify that data at runtime matches the expected type.
 * This implies assertSet.
 */
function assertString$1(value) {
    assertSet$1(value);
    if (typeof value !== "string") {
        throw new Error("Value must be a string");
    }
    return value;
}
encodings$1.assertString = assertString$1;
/**
 * A runtime checker that ensures a given value is a number
 *
 * This is used when you want to verify that data at runtime matches the expected type.
 * This implies assertSet.
 */
function assertNumber$1(value) {
    assertSet$1(value);
    if (typeof value !== "number") {
        throw new Error("Value must be a number");
    }
    return value;
}
encodings$1.assertNumber = assertNumber$1;
/**
 * A runtime checker that ensures a given value is an array
 *
 * This is used when you want to verify that data at runtime matches the expected type.
 * This implies assertSet.
 */
function assertArray$1(value) {
    assertSet$1(value);
    if (!Array.isArray(value)) {
        throw new Error("Value must be a an array");
    }
    return value;
}
encodings$1.assertArray = assertArray$1;
/**
 * A runtime checker that ensures a given value is an object in the sense of JSON
 * (an unordered collection of key–value pairs where the keys are strings)
 *
 * This is used when you want to verify that data at runtime matches the expected type.
 * This implies assertSet.
 */
function assertObject$1(value) {
    assertSet$1(value);
    if (typeof value !== "object") {
        throw new Error("Value must be an object");
    }
    // Exclude special kind of objects like Array, Date or Uint8Array
    // Object.prototype.toString() returns a specified value:
    // http://www.ecma-international.org/ecma-262/7.0/index.html#sec-object.prototype.tostring
    if (Object.prototype.toString.call(value) !== "[object Object]") {
        throw new Error("Value must be a simple object");
    }
    return value;
}
encodings$1.assertObject = assertObject$1;
/**
 * Throws an error if value matches the empty value for the
 * given type (array/string of length 0, number of value 0, ...)
 *
 * Otherwise returns the value.
 *
 * This implies assertSet
 */
function assertNotEmpty$1(value) {
    assertSet$1(value);
    if (typeof value === "number" && value === 0) {
        throw new Error("must provide a non-zero value");
    }
    else if (value.length === 0) {
        throw new Error("must provide a non-empty value");
    }
    return value;
}
encodings$1.assertNotEmpty = assertNotEmpty$1;
// may will run the transform if value is defined, otherwise returns undefined
function may$1(transform, value) {
    return value === undefined || value === null ? undefined : transform(value);
}
encodings$1.may = may$1;
function dictionaryToStringMap$1(obj) {
    const out = new Map();
    for (const key of Object.keys(obj)) {
        const value = obj[key];
        if (typeof value !== "string") {
            throw new Error("Found dictionary value of type other than string");
        }
        out.set(key, value);
    }
    return out;
}
encodings$1.dictionaryToStringMap = dictionaryToStringMap$1;
// Encodings needed for hashing block headers
// Several of these functions are inspired by https://github.com/nomic-io/js-tendermint/blob/tendermint-0.30/src/
// See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L193-L195
function encodeString$1(s) {
    const utf8 = (0, encoding_1$6.toUtf8)(s);
    return Uint8Array.from([utf8.length, ...utf8]);
}
encodings$1.encodeString = encodeString$1;
// See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L79-L87
function encodeUvarint$1(n) {
    return n >= 0x80
        ? // eslint-disable-next-line no-bitwise
            Uint8Array.from([(n & 0xff) | 0x80, ...encodeUvarint$1(n >> 7)])
        : // eslint-disable-next-line no-bitwise
            Uint8Array.from([n & 0xff]);
}
encodings$1.encodeUvarint = encodeUvarint$1;
// See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L134-L178
function encodeTime$1(time) {
    const milliseconds = time.getTime();
    const seconds = Math.floor(milliseconds / 1000);
    const secondsArray = seconds ? [0x08, ...encodeUvarint$1(seconds)] : new Uint8Array();
    const nanoseconds = (time.nanoseconds || 0) + (milliseconds % 1000) * 1e6;
    const nanosecondsArray = nanoseconds ? [0x10, ...encodeUvarint$1(nanoseconds)] : new Uint8Array();
    return Uint8Array.from([...secondsArray, ...nanosecondsArray]);
}
encodings$1.encodeTime = encodeTime$1;
// See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L180-L187
function encodeBytes$1(bytes) {
    // Since we're only dealing with short byte arrays we don't need a full VarBuffer implementation yet
    if (bytes.length >= 0x80)
        throw new Error("Not implemented for byte arrays of length 128 or more");
    return bytes.length ? Uint8Array.from([bytes.length, ...bytes]) : new Uint8Array();
}
encodings$1.encodeBytes = encodeBytes$1;
function encodeVersion$1(version) {
    const blockArray = version.block
        ? Uint8Array.from([0x08, ...encodeUvarint$1(version.block)])
        : new Uint8Array();
    const appArray = version.app ? Uint8Array.from([0x10, ...encodeUvarint$1(version.app)]) : new Uint8Array();
    return Uint8Array.from([...blockArray, ...appArray]);
}
encodings$1.encodeVersion = encodeVersion$1;
function encodeBlockId$1(blockId) {
    return Uint8Array.from([
        0x0a,
        blockId.hash.length,
        ...blockId.hash,
        0x12,
        blockId.parts.hash.length + 4,
        0x08,
        blockId.parts.total,
        0x12,
        blockId.parts.hash.length,
        ...blockId.parts.hash,
    ]);
}
encodings$1.encodeBlockId = encodeBlockId$1;

Object.defineProperty(hasher$1, "__esModule", { value: true });
hasher$1.hashBlock = hasher$1.hashTx = void 0;
const crypto_1$1 = build$7;
const encodings_1$6 = encodings$1;
// hash is sha256
// https://github.com/tendermint/tendermint/blob/master/UPGRADING.md#v0260
function hashTx$1(tx) {
    return (0, crypto_1$1.sha256)(tx);
}
hasher$1.hashTx = hashTx$1;
function getSplitPoint$1(n) {
    if (n < 1)
        throw new Error("Cannot split an empty tree");
    const largestPowerOf2 = 2 ** Math.floor(Math.log2(n));
    return largestPowerOf2 < n ? largestPowerOf2 : largestPowerOf2 / 2;
}
function hashLeaf$1(leaf) {
    const hash = new crypto_1$1.Sha256(Uint8Array.from([0]));
    hash.update(leaf);
    return hash.digest();
}
function hashInner$1(left, right) {
    const hash = new crypto_1$1.Sha256(Uint8Array.from([1]));
    hash.update(left);
    hash.update(right);
    return hash.digest();
}
// See https://github.com/tendermint/tendermint/blob/v0.31.8/docs/spec/blockchain/encoding.md#merkleroot
// Note: the hashes input may not actually be hashes, especially before a recursive call
function hashTree$1(hashes) {
    switch (hashes.length) {
        case 0:
            throw new Error("Cannot hash empty tree");
        case 1:
            return hashLeaf$1(hashes[0]);
        default: {
            const slicePoint = getSplitPoint$1(hashes.length);
            const left = hashTree$1(hashes.slice(0, slicePoint));
            const right = hashTree$1(hashes.slice(slicePoint));
            return hashInner$1(left, right);
        }
    }
}
function hashBlock$1(header) {
    if (!header.lastBlockId) {
        throw new Error("Hashing a block header with no last block ID (i.e. header at height 1) is not supported. If you need this, contributions are welcome. Please add documentation and test vectors for this case.");
    }
    const encodedFields = [
        (0, encodings_1$6.encodeVersion)(header.version),
        (0, encodings_1$6.encodeString)(header.chainId),
        (0, encodings_1$6.encodeUvarint)(header.height),
        (0, encodings_1$6.encodeTime)(header.time),
        (0, encodings_1$6.encodeBlockId)(header.lastBlockId),
        (0, encodings_1$6.encodeBytes)(header.lastCommitHash),
        (0, encodings_1$6.encodeBytes)(header.dataHash),
        (0, encodings_1$6.encodeBytes)(header.validatorsHash),
        (0, encodings_1$6.encodeBytes)(header.nextValidatorsHash),
        (0, encodings_1$6.encodeBytes)(header.consensusHash),
        (0, encodings_1$6.encodeBytes)(header.appHash),
        (0, encodings_1$6.encodeBytes)(header.lastResultsHash),
        (0, encodings_1$6.encodeBytes)(header.evidenceHash),
        (0, encodings_1$6.encodeBytes)(header.proposerAddress),
    ];
    return hashTree$1(encodedFields);
}
hasher$1.hashBlock = hashBlock$1;

var requests$6 = {};

var inthelpers = {};

Object.defineProperty(inthelpers, "__esModule", { value: true });
inthelpers.smallIntToApi = inthelpers.apiToBigInt = inthelpers.apiToSmallInt = void 0;
const math_1$1 = build$a;
const encodings_1$5 = encodings$1;
/**
 * Takes an integer value from the Tendermint RPC API and
 * returns it as number.
 *
 * Only works within the safe integer range.
 */
function apiToSmallInt(input) {
    const asInt = typeof input === "number" ? new math_1$1.Int53(input) : math_1$1.Int53.fromString(input);
    return asInt.toNumber();
}
inthelpers.apiToSmallInt = apiToSmallInt;
/**
 * Takes an integer value from the Tendermint RPC API and
 * returns it as BigInt.
 *
 * This supports the full uint64 and int64 ranges.
 */
function apiToBigInt(input) {
    (0, encodings_1$5.assertString)(input); // Runtime check on top of TypeScript just to be safe for semi-trusted API types
    if (!input.match(/^-?[0-9]+$/)) {
        throw new Error("Invalid string format");
    }
    return BigInt(input);
}
inthelpers.apiToBigInt = apiToBigInt;
/**
 * Takes an integer in the safe integer range and returns
 * a string representation to be used in the Tendermint RPC API.
 */
function smallIntToApi(num) {
    return new math_1$1.Int53(num).toString();
}
inthelpers.smallIntToApi = smallIntToApi;

var __createBinding$3 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$3 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$3 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$3(result, mod, k);
    __setModuleDefault$3(result, mod);
    return result;
};
Object.defineProperty(requests$6, "__esModule", { value: true });
requests$6.Params = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const encoding_1$5 = build$6;
const inthelpers_1$3 = inthelpers;
const jsonrpc_1$3 = jsonrpc;
const encodings_1$4 = encodings$1;
const requests$5 = __importStar$3(requests$7);
function encodeHeightParam$1(param) {
    return {
        height: (0, encodings_1$4.may)(inthelpers_1$3.smallIntToApi, param.height),
    };
}
function encodeBlockchainRequestParams$1(param) {
    return {
        minHeight: (0, encodings_1$4.may)(inthelpers_1$3.smallIntToApi, param.minHeight),
        maxHeight: (0, encodings_1$4.may)(inthelpers_1$3.smallIntToApi, param.maxHeight),
    };
}
function encodeBlockSearchParams$1(params) {
    return {
        query: params.query,
        page: (0, encodings_1$4.may)(inthelpers_1$3.smallIntToApi, params.page),
        per_page: (0, encodings_1$4.may)(inthelpers_1$3.smallIntToApi, params.per_page),
        order_by: params.order_by,
    };
}
function encodeAbciQueryParams$1(params) {
    return {
        path: (0, encodings_1$4.assertNotEmpty)(params.path),
        data: (0, encoding_1$5.toHex)(params.data),
        height: (0, encodings_1$4.may)(inthelpers_1$3.smallIntToApi, params.height),
        prove: params.prove,
    };
}
function encodeBroadcastTxParams$1(params) {
    return {
        tx: (0, encoding_1$5.toBase64)((0, encodings_1$4.assertNotEmpty)(params.tx)),
    };
}
function encodeTxParams$1(params) {
    return {
        hash: (0, encoding_1$5.toBase64)((0, encodings_1$4.assertNotEmpty)(params.hash)),
        prove: params.prove,
    };
}
function encodeTxSearchParams$1(params) {
    return {
        query: params.query,
        prove: params.prove,
        page: (0, encodings_1$4.may)(inthelpers_1$3.smallIntToApi, params.page),
        per_page: (0, encodings_1$4.may)(inthelpers_1$3.smallIntToApi, params.per_page),
        order_by: params.order_by,
    };
}
function encodeValidatorsParams$1(params) {
    return {
        height: (0, encodings_1$4.may)(inthelpers_1$3.smallIntToApi, params.height),
        page: (0, encodings_1$4.may)(inthelpers_1$3.smallIntToApi, params.page),
        per_page: (0, encodings_1$4.may)(inthelpers_1$3.smallIntToApi, params.per_page),
    };
}
let Params$4 = class Params {
    static encodeAbciInfo(req) {
        return (0, jsonrpc_1$3.createJsonRpcRequest)(req.method);
    }
    static encodeAbciQuery(req) {
        return (0, jsonrpc_1$3.createJsonRpcRequest)(req.method, encodeAbciQueryParams$1(req.params));
    }
    static encodeBlock(req) {
        return (0, jsonrpc_1$3.createJsonRpcRequest)(req.method, encodeHeightParam$1(req.params));
    }
    static encodeBlockchain(req) {
        return (0, jsonrpc_1$3.createJsonRpcRequest)(req.method, encodeBlockchainRequestParams$1(req.params));
    }
    static encodeBlockResults(req) {
        return (0, jsonrpc_1$3.createJsonRpcRequest)(req.method, encodeHeightParam$1(req.params));
    }
    static encodeBlockSearch(req) {
        return (0, jsonrpc_1$3.createJsonRpcRequest)(req.method, encodeBlockSearchParams$1(req.params));
    }
    static encodeBroadcastTx(req) {
        return (0, jsonrpc_1$3.createJsonRpcRequest)(req.method, encodeBroadcastTxParams$1(req.params));
    }
    static encodeCommit(req) {
        return (0, jsonrpc_1$3.createJsonRpcRequest)(req.method, encodeHeightParam$1(req.params));
    }
    static encodeGenesis(req) {
        return (0, jsonrpc_1$3.createJsonRpcRequest)(req.method);
    }
    static encodeHealth(req) {
        return (0, jsonrpc_1$3.createJsonRpcRequest)(req.method);
    }
    static encodeNumUnconfirmedTxs(req) {
        return (0, jsonrpc_1$3.createJsonRpcRequest)(req.method);
    }
    static encodeStatus(req) {
        return (0, jsonrpc_1$3.createJsonRpcRequest)(req.method);
    }
    static encodeSubscribe(req) {
        const eventTag = { key: "tm.event", value: req.query.type };
        const query = requests$5.buildQuery({ tags: [eventTag], raw: req.query.raw });
        return (0, jsonrpc_1$3.createJsonRpcRequest)("subscribe", { query: query });
    }
    static encodeTx(req) {
        return (0, jsonrpc_1$3.createJsonRpcRequest)(req.method, encodeTxParams$1(req.params));
    }
    // TODO: encode params for query string???
    static encodeTxSearch(req) {
        return (0, jsonrpc_1$3.createJsonRpcRequest)(req.method, encodeTxSearchParams$1(req.params));
    }
    static encodeValidators(req) {
        return (0, jsonrpc_1$3.createJsonRpcRequest)(req.method, encodeValidatorsParams$1(req.params));
    }
};
requests$6.Params = Params$4;

var responses$2 = {};

var types = {};

(function (exports) {
	// Types in this file are exported outside of the @cosmjs/tendermint-rpc package,
	// e.g. as part of a request or response
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.BlockIdFlag = void 0;
	(function (BlockIdFlag) {
	    BlockIdFlag[BlockIdFlag["Unknown"] = 0] = "Unknown";
	    BlockIdFlag[BlockIdFlag["Absent"] = 1] = "Absent";
	    BlockIdFlag[BlockIdFlag["Commit"] = 2] = "Commit";
	    BlockIdFlag[BlockIdFlag["Nil"] = 3] = "Nil";
	    BlockIdFlag[BlockIdFlag["Unrecognized"] = -1] = "Unrecognized";
	})(exports.BlockIdFlag || (exports.BlockIdFlag = {}));
	
} (types));

Object.defineProperty(responses$2, "__esModule", { value: true });
responses$2.Responses = responses$2.decodeValidatorInfo = responses$2.decodeValidatorGenesis = responses$2.decodeValidatorUpdate = responses$2.decodeEvent = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const encoding_1$4 = build$6;
const utils_1$2 = build$5;
const dates_1$1 = dates;
const inthelpers_1$2 = inthelpers;
const types_1$1 = types;
const encodings_1$3 = encodings$1;
const hasher_1$3 = hasher$1;
function decodeAbciInfo$1(data) {
    return {
        data: data.data,
        lastBlockHeight: (0, encodings_1$3.may)(inthelpers_1$2.apiToSmallInt, data.last_block_height),
        lastBlockAppHash: (0, encodings_1$3.may)(encoding_1$4.fromBase64, data.last_block_app_hash),
    };
}
function decodeQueryProof$1(data) {
    return {
        ops: data.ops.map((op) => ({
            type: op.type,
            key: (0, encoding_1$4.fromBase64)(op.key),
            data: (0, encoding_1$4.fromBase64)(op.data),
        })),
    };
}
function decodeAbciQuery$1(data) {
    return {
        key: (0, encoding_1$4.fromBase64)((0, encodings_1$3.assertString)(data.key ?? "")),
        value: (0, encoding_1$4.fromBase64)((0, encodings_1$3.assertString)(data.value ?? "")),
        proof: (0, encodings_1$3.may)(decodeQueryProof$1, data.proofOps),
        height: (0, encodings_1$3.may)(inthelpers_1$2.apiToSmallInt, data.height),
        code: (0, encodings_1$3.may)(inthelpers_1$2.apiToSmallInt, data.code),
        codespace: (0, encodings_1$3.assertString)(data.codespace ?? ""),
        index: (0, encodings_1$3.may)(inthelpers_1$2.apiToSmallInt, data.index),
        log: data.log,
        info: (0, encodings_1$3.assertString)(data.info ?? ""),
    };
}
function decodeAttribute(attribute) {
    return {
        key: (0, encoding_1$4.fromBase64)((0, encodings_1$3.assertNotEmpty)(attribute.key)),
        value: (0, encoding_1$4.fromBase64)((0, encodings_1$3.assertString)(attribute.value ?? "")),
    };
}
function decodeAttributes$1(attributes) {
    return (0, encodings_1$3.assertArray)(attributes).map(decodeAttribute);
}
function decodeEvent$1(event) {
    return {
        type: event.type,
        attributes: event.attributes ? decodeAttributes$1(event.attributes) : [],
    };
}
responses$2.decodeEvent = decodeEvent$1;
function decodeEvents$1(events) {
    return (0, encodings_1$3.assertArray)(events).map(decodeEvent$1);
}
function decodeTxData$1(data) {
    return {
        code: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNumber)(data.code ?? 0)),
        codespace: data.codespace,
        log: data.log,
        data: (0, encodings_1$3.may)(encoding_1$4.fromBase64, data.data),
        events: data.events ? decodeEvents$1(data.events) : [],
        gasWanted: (0, inthelpers_1$2.apiToSmallInt)(data.gas_wanted ?? "0"),
        gasUsed: (0, inthelpers_1$2.apiToSmallInt)(data.gas_used ?? "0"),
    };
}
function decodePubkey$1(data) {
    if ("Sum" in data) {
        // we don't need to check type because we're checking algorithm
        const [[algorithm, value]] = Object.entries(data.Sum.value);
        (0, utils_1$2.assert)(algorithm === "ed25519" || algorithm === "secp256k1", `unknown pubkey type: ${algorithm}`);
        return {
            algorithm,
            data: (0, encoding_1$4.fromBase64)((0, encodings_1$3.assertNotEmpty)(value)),
        };
    }
    else {
        switch (data.type) {
            // go-amino special code
            case "tendermint/PubKeyEd25519":
                return {
                    algorithm: "ed25519",
                    data: (0, encoding_1$4.fromBase64)((0, encodings_1$3.assertNotEmpty)(data.value)),
                };
            case "tendermint/PubKeySecp256k1":
                return {
                    algorithm: "secp256k1",
                    data: (0, encoding_1$4.fromBase64)((0, encodings_1$3.assertNotEmpty)(data.value)),
                };
            default:
                throw new Error(`unknown pubkey type: ${data.type}`);
        }
    }
}
/**
 * Note: we do not parse block.time_iota_ms for now because of this CHANGELOG entry
 *
 * > Add time_iota_ms to block's consensus parameters (not exposed to the application)
 * https://github.com/tendermint/tendermint/blob/master/CHANGELOG.md#v0310
 */
function decodeBlockParams$1(data) {
    return {
        maxBytes: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.max_bytes)),
        maxGas: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.max_gas)),
    };
}
function decodeEvidenceParams$1(data) {
    return {
        maxAgeNumBlocks: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.max_age_num_blocks)),
        maxAgeDuration: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.max_age_duration)),
    };
}
function decodeConsensusParams$1(data) {
    return {
        block: decodeBlockParams$1((0, encodings_1$3.assertObject)(data.block)),
        evidence: decodeEvidenceParams$1((0, encodings_1$3.assertObject)(data.evidence)),
    };
}
function decodeValidatorUpdate$1(data) {
    return {
        pubkey: decodePubkey$1((0, encodings_1$3.assertObject)(data.pub_key)),
        votingPower: (0, inthelpers_1$2.apiToBigInt)(data.power ?? "0"),
    };
}
responses$2.decodeValidatorUpdate = decodeValidatorUpdate$1;
function decodeBlockResults$1(data) {
    return {
        height: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.height)),
        results: (data.txs_results || []).map(decodeTxData$1),
        validatorUpdates: (data.validator_updates || []).map(decodeValidatorUpdate$1),
        consensusUpdates: (0, encodings_1$3.may)(decodeConsensusParams$1, data.consensus_param_updates),
        beginBlockEvents: decodeEvents$1(data.begin_block_events || []),
        endBlockEvents: decodeEvents$1(data.end_block_events || []),
    };
}
function decodeBlockId$1(data) {
    return {
        hash: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertNotEmpty)(data.hash)),
        parts: {
            total: (0, encodings_1$3.assertNotEmpty)(data.parts.total),
            hash: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertNotEmpty)(data.parts.hash)),
        },
    };
}
function decodeBlockVersion$1(data) {
    return {
        block: (0, inthelpers_1$2.apiToSmallInt)(data.block),
        app: (0, inthelpers_1$2.apiToSmallInt)(data.app ?? 0),
    };
}
function decodeHeader$1(data) {
    return {
        version: decodeBlockVersion$1(data.version),
        chainId: (0, encodings_1$3.assertNotEmpty)(data.chain_id),
        height: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.height)),
        time: (0, dates_1$1.fromRfc3339WithNanoseconds)((0, encodings_1$3.assertNotEmpty)(data.time)),
        // When there is no last block ID (i.e. this block's height is 1), we get an empty structure like this:
        // { hash: '', parts: { total: 0, hash: '' } }
        lastBlockId: data.last_block_id.hash ? decodeBlockId$1(data.last_block_id) : null,
        lastCommitHash: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertSet)(data.last_commit_hash)),
        dataHash: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertSet)(data.data_hash)),
        validatorsHash: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertSet)(data.validators_hash)),
        nextValidatorsHash: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertSet)(data.next_validators_hash)),
        consensusHash: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertSet)(data.consensus_hash)),
        appHash: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertSet)(data.app_hash)),
        lastResultsHash: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertSet)(data.last_results_hash)),
        evidenceHash: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertSet)(data.evidence_hash)),
        proposerAddress: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertNotEmpty)(data.proposer_address)),
    };
}
function decodeBlockMeta$1(data) {
    return {
        blockId: decodeBlockId$1(data.block_id),
        blockSize: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.block_size)),
        header: decodeHeader$1(data.header),
        numTxs: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.num_txs)),
    };
}
function decodeBlockchain$1(data) {
    return {
        lastHeight: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.last_height)),
        blockMetas: (0, encodings_1$3.assertArray)(data.block_metas).map(decodeBlockMeta$1),
    };
}
function decodeBroadcastTxSync$1(data) {
    return {
        ...decodeTxData$1(data),
        hash: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertNotEmpty)(data.hash)),
    };
}
function decodeBroadcastTxCommit$1(data) {
    return {
        height: (0, inthelpers_1$2.apiToSmallInt)(data.height),
        hash: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertNotEmpty)(data.hash)),
        checkTx: decodeTxData$1((0, encodings_1$3.assertObject)(data.check_tx)),
        deliverTx: (0, encodings_1$3.may)(decodeTxData$1, data.deliver_tx),
    };
}
function decodeBlockIdFlag$1(blockIdFlag) {
    (0, utils_1$2.assert)(blockIdFlag in types_1$1.BlockIdFlag);
    return blockIdFlag;
}
/**
 * In some cases a timestamp is optional and set to the value 0 in Go.
 * This can lead to strings like "0001-01-01T00:00:00Z" (see https://github.com/cosmos/cosmjs/issues/704#issuecomment-797122415).
 * This decoder tries to clean up such encoding from the API and turn them
 * into undefined values.
 */
function decodeOptionalTime$1(timestamp) {
    const nonZeroTime = timestamp && !timestamp.startsWith("0001-01-01");
    return nonZeroTime ? (0, dates_1$1.fromRfc3339WithNanoseconds)(timestamp) : undefined;
}
function decodeCommitSignature$1(data) {
    return {
        blockIdFlag: decodeBlockIdFlag$1(data.block_id_flag),
        validatorAddress: data.validator_address ? (0, encoding_1$4.fromHex)(data.validator_address) : undefined,
        timestamp: decodeOptionalTime$1(data.timestamp),
        signature: data.signature ? (0, encoding_1$4.fromBase64)(data.signature) : undefined,
    };
}
function decodeCommit$1(data) {
    return {
        blockId: decodeBlockId$1((0, encodings_1$3.assertObject)(data.block_id)),
        height: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.height)),
        round: (0, inthelpers_1$2.apiToSmallInt)(data.round),
        signatures: (0, encodings_1$3.assertArray)(data.signatures).map(decodeCommitSignature$1),
    };
}
function decodeCommitResponse$1(data) {
    return {
        canonical: (0, encodings_1$3.assertBoolean)(data.canonical),
        header: decodeHeader$1(data.signed_header.header),
        commit: decodeCommit$1(data.signed_header.commit),
    };
}
function decodeValidatorGenesis$1(data) {
    return {
        address: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertNotEmpty)(data.address)),
        pubkey: decodePubkey$1((0, encodings_1$3.assertObject)(data.pub_key)),
        votingPower: (0, inthelpers_1$2.apiToBigInt)((0, encodings_1$3.assertNotEmpty)(data.power)),
    };
}
responses$2.decodeValidatorGenesis = decodeValidatorGenesis$1;
function decodeGenesis$1(data) {
    return {
        genesisTime: (0, dates_1$1.fromRfc3339WithNanoseconds)((0, encodings_1$3.assertNotEmpty)(data.genesis_time)),
        chainId: (0, encodings_1$3.assertNotEmpty)(data.chain_id),
        consensusParams: decodeConsensusParams$1(data.consensus_params),
        validators: data.validators ? (0, encodings_1$3.assertArray)(data.validators).map(decodeValidatorGenesis$1) : [],
        appHash: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertSet)(data.app_hash)),
        appState: data.app_state,
    };
}
function decodeValidatorInfo$1(data) {
    return {
        pubkey: decodePubkey$1((0, encodings_1$3.assertObject)(data.pub_key)),
        votingPower: (0, inthelpers_1$2.apiToBigInt)((0, encodings_1$3.assertNotEmpty)(data.voting_power)),
        address: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertNotEmpty)(data.address)),
        proposerPriority: data.proposer_priority ? (0, inthelpers_1$2.apiToSmallInt)(data.proposer_priority) : undefined,
    };
}
responses$2.decodeValidatorInfo = decodeValidatorInfo$1;
function decodeNodeInfo$1(data) {
    return {
        id: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertNotEmpty)(data.id)),
        listenAddr: (0, encodings_1$3.assertNotEmpty)(data.listen_addr),
        network: (0, encodings_1$3.assertNotEmpty)(data.network),
        version: (0, encodings_1$3.assertString)(data.version),
        channels: (0, encodings_1$3.assertNotEmpty)(data.channels),
        moniker: (0, encodings_1$3.assertNotEmpty)(data.moniker),
        other: (0, encodings_1$3.dictionaryToStringMap)(data.other),
        protocolVersion: {
            app: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.protocol_version.app)),
            block: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.protocol_version.block)),
            p2p: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.protocol_version.p2p)),
        },
    };
}
function decodeSyncInfo$1(data) {
    return {
        latestBlockHash: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertNotEmpty)(data.latest_block_hash)),
        latestAppHash: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertNotEmpty)(data.latest_app_hash)),
        latestBlockTime: (0, dates_1$1.fromRfc3339WithNanoseconds)((0, encodings_1$3.assertNotEmpty)(data.latest_block_time)),
        latestBlockHeight: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.latest_block_height)),
        catchingUp: (0, encodings_1$3.assertBoolean)(data.catching_up),
    };
}
function decodeStatus$1(data) {
    return {
        nodeInfo: decodeNodeInfo$1(data.node_info),
        syncInfo: decodeSyncInfo$1(data.sync_info),
        validatorInfo: decodeValidatorInfo$1(data.validator_info),
    };
}
function decodeTxProof$1(data) {
    return {
        data: (0, encoding_1$4.fromBase64)((0, encodings_1$3.assertNotEmpty)(data.data)),
        rootHash: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertNotEmpty)(data.root_hash)),
        proof: {
            total: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.proof.total)),
            index: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.proof.index)),
            leafHash: (0, encoding_1$4.fromBase64)((0, encodings_1$3.assertNotEmpty)(data.proof.leaf_hash)),
            aunts: (0, encodings_1$3.assertArray)(data.proof.aunts).map(encoding_1$4.fromBase64),
        },
    };
}
function decodeTxResponse$1(data) {
    return {
        tx: (0, encoding_1$4.fromBase64)((0, encodings_1$3.assertNotEmpty)(data.tx)),
        result: decodeTxData$1((0, encodings_1$3.assertObject)(data.tx_result)),
        height: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.height)),
        index: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNumber)(data.index)),
        hash: (0, encoding_1$4.fromHex)((0, encodings_1$3.assertNotEmpty)(data.hash)),
        proof: (0, encodings_1$3.may)(decodeTxProof$1, data.proof),
    };
}
function decodeTxSearch$1(data) {
    return {
        totalCount: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.total_count)),
        txs: (0, encodings_1$3.assertArray)(data.txs).map(decodeTxResponse$1),
    };
}
function decodeTxEvent$1(data) {
    const tx = (0, encoding_1$4.fromBase64)((0, encodings_1$3.assertNotEmpty)(data.tx));
    return {
        tx: tx,
        hash: (0, hasher_1$3.hashTx)(tx),
        result: decodeTxData$1(data.result),
        height: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.height)),
    };
}
function decodeValidators$1(data) {
    return {
        blockHeight: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.block_height)),
        validators: (0, encodings_1$3.assertArray)(data.validators).map(decodeValidatorInfo$1),
        count: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.count)),
        total: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.total)),
    };
}
function decodeBlock$1(data) {
    return {
        header: decodeHeader$1((0, encodings_1$3.assertObject)(data.header)),
        // For the block at height 1, last commit is not set. This is represented in an empty object like this:
        // { height: '0', round: 0, block_id: { hash: '', parts: [Object] }, signatures: [] }
        lastCommit: data.last_commit.block_id.hash ? decodeCommit$1((0, encodings_1$3.assertObject)(data.last_commit)) : null,
        txs: data.data.txs ? (0, encodings_1$3.assertArray)(data.data.txs).map(encoding_1$4.fromBase64) : [],
        // Lift up .evidence.evidence to just .evidence
        // See https://github.com/tendermint/tendermint/issues/7697
        evidence: data.evidence?.evidence ?? [],
    };
}
function decodeBlockResponse$1(data) {
    return {
        blockId: decodeBlockId$1(data.block_id),
        block: decodeBlock$1(data.block),
    };
}
function decodeBlockSearch$1(data) {
    return {
        totalCount: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.total_count)),
        blocks: (0, encodings_1$3.assertArray)(data.blocks).map(decodeBlockResponse$1),
    };
}
function decodeNumUnconfirmedTxs$1(data) {
    return {
        total: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.total)),
        totalBytes: (0, inthelpers_1$2.apiToSmallInt)((0, encodings_1$3.assertNotEmpty)(data.total_bytes)),
    };
}
let Responses$1 = class Responses {
    static decodeAbciInfo(response) {
        return decodeAbciInfo$1((0, encodings_1$3.assertObject)(response.result.response));
    }
    static decodeAbciQuery(response) {
        return decodeAbciQuery$1((0, encodings_1$3.assertObject)(response.result.response));
    }
    static decodeBlock(response) {
        return decodeBlockResponse$1(response.result);
    }
    static decodeBlockResults(response) {
        return decodeBlockResults$1(response.result);
    }
    static decodeBlockSearch(response) {
        return decodeBlockSearch$1(response.result);
    }
    static decodeBlockchain(response) {
        return decodeBlockchain$1(response.result);
    }
    static decodeBroadcastTxSync(response) {
        return decodeBroadcastTxSync$1(response.result);
    }
    static decodeBroadcastTxAsync(response) {
        return Responses.decodeBroadcastTxSync(response);
    }
    static decodeBroadcastTxCommit(response) {
        return decodeBroadcastTxCommit$1(response.result);
    }
    static decodeCommit(response) {
        return decodeCommitResponse$1(response.result);
    }
    static decodeGenesis(response) {
        return decodeGenesis$1((0, encodings_1$3.assertObject)(response.result.genesis));
    }
    static decodeHealth() {
        return null;
    }
    static decodeNumUnconfirmedTxs(response) {
        return decodeNumUnconfirmedTxs$1(response.result);
    }
    static decodeStatus(response) {
        return decodeStatus$1(response.result);
    }
    static decodeNewBlockEvent(event) {
        return decodeBlock$1(event.data.value.block);
    }
    static decodeNewBlockHeaderEvent(event) {
        return decodeHeader$1(event.data.value.header);
    }
    static decodeTxEvent(event) {
        return decodeTxEvent$1(event.data.value.TxResult);
    }
    static decodeTx(response) {
        return decodeTxResponse$1(response.result);
    }
    static decodeTxSearch(response) {
        return decodeTxSearch$1(response.result);
    }
    static decodeValidators(response) {
        return decodeValidators$1(response.result);
    }
};
responses$2.Responses = Responses$1;

Object.defineProperty(adaptor$1, "__esModule", { value: true });
adaptor$1.adaptor34 = void 0;
const hasher_1$2 = hasher$1;
const requests_1$1 = requests$6;
const responses_1$1 = responses$2;
adaptor$1.adaptor34 = {
    params: requests_1$1.Params,
    responses: responses_1$1.Responses,
    hashTx: hasher_1$2.hashTx,
    hashBlock: hasher_1$2.hashBlock,
};

var __createBinding$2 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$2 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$2 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$2(result, mod, k);
    __setModuleDefault$2(result, mod);
    return result;
};
Object.defineProperty(tendermint34client, "__esModule", { value: true });
tendermint34client.Tendermint34Client = void 0;
const jsonrpc_1$2 = jsonrpc;
const rpcclients_1$1 = rpcclients;
const adaptor_1$1 = adaptor$1;
const requests$4 = __importStar$2(requests$7);
class Tendermint34Client {
    /**
     * Use `Tendermint34Client.connect` or `Tendermint34Client.create` to create an instance.
     */
    constructor(client) {
        this.client = client;
        this.p = adaptor_1$1.adaptor34.params;
        this.r = adaptor_1$1.adaptor34.responses;
    }
    /**
     * Creates a new Tendermint client for the given endpoint.
     *
     * Uses HTTP when the URL schema is http or https. Uses WebSockets otherwise.
     */
    static async connect(endpoint) {
        let rpcClient;
        if (typeof endpoint === "object") {
            rpcClient = new rpcclients_1$1.HttpClient(endpoint);
        }
        else {
            const useHttp = endpoint.startsWith("http://") || endpoint.startsWith("https://");
            rpcClient = useHttp ? new rpcclients_1$1.HttpClient(endpoint) : new rpcclients_1$1.WebsocketClient(endpoint);
        }
        // For some very strange reason I don't understand, tests start to fail on some systems
        // (our CI) when skipping the status call before doing other queries. Sleeping a little
        // while did not help. Thus we query the version as a way to say "hi" to the backend,
        // even in cases where we don't use the result.
        await this.detectVersion(rpcClient);
        return Tendermint34Client.create(rpcClient);
    }
    /**
     * Creates a new Tendermint client given an RPC client.
     */
    static async create(rpcClient) {
        return new Tendermint34Client(rpcClient);
    }
    static async detectVersion(client) {
        const req = (0, jsonrpc_1$2.createJsonRpcRequest)(requests$4.Method.Status);
        const response = await client.execute(req);
        const result = response.result;
        if (!result || !result.node_info) {
            throw new Error("Unrecognized format for status response");
        }
        const version = result.node_info.version;
        if (typeof version !== "string") {
            throw new Error("Unrecognized version format: must be string");
        }
        return version;
    }
    disconnect() {
        this.client.disconnect();
    }
    async abciInfo() {
        const query = { method: requests$4.Method.AbciInfo };
        return this.doCall(query, this.p.encodeAbciInfo, this.r.decodeAbciInfo);
    }
    async abciQuery(params) {
        const query = { params: params, method: requests$4.Method.AbciQuery };
        return this.doCall(query, this.p.encodeAbciQuery, this.r.decodeAbciQuery);
    }
    async block(height) {
        const query = { method: requests$4.Method.Block, params: { height: height } };
        return this.doCall(query, this.p.encodeBlock, this.r.decodeBlock);
    }
    async blockResults(height) {
        const query = {
            method: requests$4.Method.BlockResults,
            params: { height: height },
        };
        return this.doCall(query, this.p.encodeBlockResults, this.r.decodeBlockResults);
    }
    /**
     * Search for events that are in a block.
     *
     * NOTE
     * This method will error on any node that is running a Tendermint version lower than 0.34.9.
     *
     * @see https://docs.tendermint.com/master/rpc/#/Info/block_search
     */
    async blockSearch(params) {
        const query = { params: params, method: requests$4.Method.BlockSearch };
        const resp = await this.doCall(query, this.p.encodeBlockSearch, this.r.decodeBlockSearch);
        return {
            ...resp,
            // make sure we sort by height, as tendermint may be sorting by string value of the height
            blocks: [...resp.blocks].sort((a, b) => a.block.header.height - b.block.header.height),
        };
    }
    // this should paginate through all blockSearch options to ensure it returns all results.
    // starts with page 1 or whatever was provided (eg. to start on page 7)
    //
    // NOTE
    // This method will error on any node that is running a Tendermint version lower than 0.34.9.
    async blockSearchAll(params) {
        let page = params.page || 1;
        const blocks = [];
        let done = false;
        while (!done) {
            const resp = await this.blockSearch({ ...params, page: page });
            blocks.push(...resp.blocks);
            if (blocks.length < resp.totalCount) {
                page++;
            }
            else {
                done = true;
            }
        }
        // make sure we sort by height, as tendermint may be sorting by string value of the height
        // and the earlier items may be in a higher page than the later items
        blocks.sort((a, b) => a.block.header.height - b.block.header.height);
        return {
            totalCount: blocks.length,
            blocks: blocks,
        };
    }
    /**
     * Queries block headers filtered by minHeight <= height <= maxHeight.
     *
     * @param minHeight The minimum height to be included in the result. Defaults to 0.
     * @param maxHeight The maximum height to be included in the result. Defaults to infinity.
     */
    async blockchain(minHeight, maxHeight) {
        const query = {
            method: requests$4.Method.Blockchain,
            params: {
                minHeight: minHeight,
                maxHeight: maxHeight,
            },
        };
        return this.doCall(query, this.p.encodeBlockchain, this.r.decodeBlockchain);
    }
    /**
     * Broadcast transaction to mempool and wait for response
     *
     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_sync
     */
    async broadcastTxSync(params) {
        const query = { params: params, method: requests$4.Method.BroadcastTxSync };
        return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxSync);
    }
    /**
     * Broadcast transaction to mempool and do not wait for result
     *
     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_async
     */
    async broadcastTxAsync(params) {
        const query = { params: params, method: requests$4.Method.BroadcastTxAsync };
        return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxAsync);
    }
    /**
     * Broadcast transaction to mempool and wait for block
     *
     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_commit
     */
    async broadcastTxCommit(params) {
        const query = { params: params, method: requests$4.Method.BroadcastTxCommit };
        return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxCommit);
    }
    async commit(height) {
        const query = { method: requests$4.Method.Commit, params: { height: height } };
        return this.doCall(query, this.p.encodeCommit, this.r.decodeCommit);
    }
    async genesis() {
        const query = { method: requests$4.Method.Genesis };
        return this.doCall(query, this.p.encodeGenesis, this.r.decodeGenesis);
    }
    async health() {
        const query = { method: requests$4.Method.Health };
        return this.doCall(query, this.p.encodeHealth, this.r.decodeHealth);
    }
    async numUnconfirmedTxs() {
        const query = { method: requests$4.Method.NumUnconfirmedTxs };
        return this.doCall(query, this.p.encodeNumUnconfirmedTxs, this.r.decodeNumUnconfirmedTxs);
    }
    async status() {
        const query = { method: requests$4.Method.Status };
        return this.doCall(query, this.p.encodeStatus, this.r.decodeStatus);
    }
    subscribeNewBlock() {
        const request = {
            method: requests$4.Method.Subscribe,
            query: { type: requests$4.SubscriptionEventType.NewBlock },
        };
        return this.subscribe(request, this.r.decodeNewBlockEvent);
    }
    subscribeNewBlockHeader() {
        const request = {
            method: requests$4.Method.Subscribe,
            query: { type: requests$4.SubscriptionEventType.NewBlockHeader },
        };
        return this.subscribe(request, this.r.decodeNewBlockHeaderEvent);
    }
    subscribeTx(query) {
        const request = {
            method: requests$4.Method.Subscribe,
            query: {
                type: requests$4.SubscriptionEventType.Tx,
                raw: query,
            },
        };
        return this.subscribe(request, this.r.decodeTxEvent);
    }
    /**
     * Get a single transaction by hash
     *
     * @see https://docs.tendermint.com/master/rpc/#/Info/tx
     */
    async tx(params) {
        const query = { params: params, method: requests$4.Method.Tx };
        return this.doCall(query, this.p.encodeTx, this.r.decodeTx);
    }
    /**
     * Search for transactions that are in a block
     *
     * @see https://docs.tendermint.com/master/rpc/#/Info/tx_search
     */
    async txSearch(params) {
        const query = { params: params, method: requests$4.Method.TxSearch };
        return this.doCall(query, this.p.encodeTxSearch, this.r.decodeTxSearch);
    }
    // this should paginate through all txSearch options to ensure it returns all results.
    // starts with page 1 or whatever was provided (eg. to start on page 7)
    async txSearchAll(params) {
        let page = params.page || 1;
        const txs = [];
        let done = false;
        while (!done) {
            const resp = await this.txSearch({ ...params, page: page });
            txs.push(...resp.txs);
            if (txs.length < resp.totalCount) {
                page++;
            }
            else {
                done = true;
            }
        }
        return {
            totalCount: txs.length,
            txs: txs,
        };
    }
    async validators(params) {
        const query = {
            method: requests$4.Method.Validators,
            params: params,
        };
        return this.doCall(query, this.p.encodeValidators, this.r.decodeValidators);
    }
    async validatorsAll(height) {
        const validators = [];
        let page = 1;
        let done = false;
        let blockHeight = height;
        while (!done) {
            const response = await this.validators({
                per_page: 50,
                height: blockHeight,
                page: page,
            });
            validators.push(...response.validators);
            blockHeight = blockHeight || response.blockHeight;
            if (validators.length < response.total) {
                page++;
            }
            else {
                done = true;
            }
        }
        return {
            // NOTE: Default value is for type safety but this should always be set
            blockHeight: blockHeight ?? 0,
            count: validators.length,
            total: validators.length,
            validators: validators,
        };
    }
    // doCall is a helper to handle the encode/call/decode logic
    async doCall(request, encode, decode) {
        const req = encode(request);
        const result = await this.client.execute(req);
        return decode(result);
    }
    subscribe(request, decode) {
        if (!(0, rpcclients_1$1.instanceOfRpcStreamingClient)(this.client)) {
            throw new Error("This RPC client type cannot subscribe to events");
        }
        const req = this.p.encodeSubscribe(request);
        const eventStream = this.client.listen(req);
        return eventStream.map((event) => {
            return decode(event);
        });
    }
}
tendermint34client.Tendermint34Client = Tendermint34Client;

(function (exports) {
	// Note: all exports in this module are publicly available via
	// `import { tendermint34 } from "@cosmjs/tendermint-rpc"`
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Tendermint34Client = exports.VoteType = exports.broadcastTxSyncSuccess = exports.broadcastTxCommitSuccess = exports.SubscriptionEventType = exports.Method = void 0;
	var requests_1 = requests$7;
	Object.defineProperty(exports, "Method", { enumerable: true, get: function () { return requests_1.Method; } });
	Object.defineProperty(exports, "SubscriptionEventType", { enumerable: true, get: function () { return requests_1.SubscriptionEventType; } });
	var responses_1 = responses$3;
	Object.defineProperty(exports, "broadcastTxCommitSuccess", { enumerable: true, get: function () { return responses_1.broadcastTxCommitSuccess; } });
	Object.defineProperty(exports, "broadcastTxSyncSuccess", { enumerable: true, get: function () { return responses_1.broadcastTxSyncSuccess; } });
	Object.defineProperty(exports, "VoteType", { enumerable: true, get: function () { return responses_1.VoteType; } });
	var tendermint34client_1 = tendermint34client;
	Object.defineProperty(exports, "Tendermint34Client", { enumerable: true, get: function () { return tendermint34client_1.Tendermint34Client; } });
	
} (tendermint34));

var tendermint37 = {};

var requests$3 = {};

(function (exports) {
	/* eslint-disable @typescript-eslint/naming-convention */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.buildQuery = exports.SubscriptionEventType = exports.Method = void 0;
	(function (Method) {
	    Method["AbciInfo"] = "abci_info";
	    Method["AbciQuery"] = "abci_query";
	    Method["Block"] = "block";
	    /** Get block headers for minHeight <= height <= maxHeight. */
	    Method["Blockchain"] = "blockchain";
	    Method["BlockResults"] = "block_results";
	    Method["BlockSearch"] = "block_search";
	    Method["BroadcastTxAsync"] = "broadcast_tx_async";
	    Method["BroadcastTxSync"] = "broadcast_tx_sync";
	    Method["BroadcastTxCommit"] = "broadcast_tx_commit";
	    Method["Commit"] = "commit";
	    Method["Genesis"] = "genesis";
	    Method["Health"] = "health";
	    Method["NumUnconfirmedTxs"] = "num_unconfirmed_txs";
	    Method["Status"] = "status";
	    Method["Subscribe"] = "subscribe";
	    Method["Tx"] = "tx";
	    Method["TxSearch"] = "tx_search";
	    Method["Validators"] = "validators";
	    Method["Unsubscribe"] = "unsubscribe";
	})(exports.Method || (exports.Method = {}));
	(function (SubscriptionEventType) {
	    SubscriptionEventType["NewBlock"] = "NewBlock";
	    SubscriptionEventType["NewBlockHeader"] = "NewBlockHeader";
	    SubscriptionEventType["Tx"] = "Tx";
	})(exports.SubscriptionEventType || (exports.SubscriptionEventType = {}));
	function buildQuery(components) {
	    const tags = components.tags ? components.tags : [];
	    const tagComponents = tags.map((tag) => `${tag.key}='${tag.value}'`);
	    const rawComponents = components.raw ? [components.raw] : [];
	    return [...tagComponents, ...rawComponents].join(" AND ");
	}
	exports.buildQuery = buildQuery;
	
} (requests$3));

var responses$1 = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.VoteType = exports.broadcastTxCommitSuccess = exports.broadcastTxSyncSuccess = void 0;
	/**
	 * Returns true iff transaction made it successfully into the transaction pool
	 */
	function broadcastTxSyncSuccess(res) {
	    // code must be 0 on success
	    return res.code === 0;
	}
	exports.broadcastTxSyncSuccess = broadcastTxSyncSuccess;
	/**
	 * Returns true iff transaction made it successfully into a block
	 * (i.e. success in `check_tx` and `deliver_tx` field)
	 */
	function broadcastTxCommitSuccess(response) {
	    // code must be 0 on success
	    // deliverTx may be present but empty on failure
	    return response.checkTx.code === 0 && !!response.deliverTx && response.deliverTx.code === 0;
	}
	exports.broadcastTxCommitSuccess = broadcastTxCommitSuccess;
	(function (VoteType) {
	    VoteType[VoteType["PreVote"] = 1] = "PreVote";
	    VoteType[VoteType["PreCommit"] = 2] = "PreCommit";
	})(exports.VoteType || (exports.VoteType = {}));
	
} (responses$1));

var tendermint37client = {};

var adaptor = {};

var hasher = {};

var encodings = {};

Object.defineProperty(encodings, "__esModule", { value: true });
encodings.encodeBlockId = encodings.encodeVersion = encodings.encodeBytes = encodings.encodeTime = encodings.encodeUvarint = encodings.encodeString = encodings.dictionaryToStringMap = encodings.may = encodings.assertNotEmpty = encodings.assertObject = encodings.assertArray = encodings.assertNumber = encodings.assertString = encodings.assertBoolean = encodings.assertSet = void 0;
const encoding_1$3 = build$6;
/**
 * A runtime checker that ensures a given value is set (i.e. not undefined or null)
 *
 * This is used when you want to verify that data at runtime matches the expected type.
 */
function assertSet(value) {
    if (value === undefined) {
        throw new Error("Value must not be undefined");
    }
    if (value === null) {
        throw new Error("Value must not be null");
    }
    return value;
}
encodings.assertSet = assertSet;
/**
 * A runtime checker that ensures a given value is a boolean
 *
 * This is used when you want to verify that data at runtime matches the expected type.
 * This implies assertSet.
 */
function assertBoolean(value) {
    assertSet(value);
    if (typeof value !== "boolean") {
        throw new Error("Value must be a boolean");
    }
    return value;
}
encodings.assertBoolean = assertBoolean;
/**
 * A runtime checker that ensures a given value is a string.
 *
 * This is used when you want to verify that data at runtime matches the expected type.
 * This implies assertSet.
 */
function assertString(value) {
    assertSet(value);
    if (typeof value !== "string") {
        throw new Error("Value must be a string");
    }
    return value;
}
encodings.assertString = assertString;
/**
 * A runtime checker that ensures a given value is a number
 *
 * This is used when you want to verify that data at runtime matches the expected type.
 * This implies assertSet.
 */
function assertNumber(value) {
    assertSet(value);
    if (typeof value !== "number") {
        throw new Error("Value must be a number");
    }
    return value;
}
encodings.assertNumber = assertNumber;
/**
 * A runtime checker that ensures a given value is an array
 *
 * This is used when you want to verify that data at runtime matches the expected type.
 * This implies assertSet.
 */
function assertArray(value) {
    assertSet(value);
    if (!Array.isArray(value)) {
        throw new Error("Value must be a an array");
    }
    return value;
}
encodings.assertArray = assertArray;
/**
 * A runtime checker that ensures a given value is an object in the sense of JSON
 * (an unordered collection of key–value pairs where the keys are strings)
 *
 * This is used when you want to verify that data at runtime matches the expected type.
 * This implies assertSet.
 */
function assertObject(value) {
    assertSet(value);
    if (typeof value !== "object") {
        throw new Error("Value must be an object");
    }
    // Exclude special kind of objects like Array, Date or Uint8Array
    // Object.prototype.toString() returns a specified value:
    // http://www.ecma-international.org/ecma-262/7.0/index.html#sec-object.prototype.tostring
    if (Object.prototype.toString.call(value) !== "[object Object]") {
        throw new Error("Value must be a simple object");
    }
    return value;
}
encodings.assertObject = assertObject;
/**
 * Throws an error if value matches the empty value for the
 * given type (array/string of length 0, number of value 0, ...)
 *
 * Otherwise returns the value.
 *
 * This implies assertSet
 */
function assertNotEmpty(value) {
    assertSet(value);
    if (typeof value === "number" && value === 0) {
        throw new Error("must provide a non-zero value");
    }
    else if (value.length === 0) {
        throw new Error("must provide a non-empty value");
    }
    return value;
}
encodings.assertNotEmpty = assertNotEmpty;
// may will run the transform if value is defined, otherwise returns undefined
function may(transform, value) {
    return value === undefined || value === null ? undefined : transform(value);
}
encodings.may = may;
function dictionaryToStringMap(obj) {
    const out = new Map();
    for (const key of Object.keys(obj)) {
        const value = obj[key];
        if (typeof value !== "string") {
            throw new Error("Found dictionary value of type other than string");
        }
        out.set(key, value);
    }
    return out;
}
encodings.dictionaryToStringMap = dictionaryToStringMap;
// Encodings needed for hashing block headers
// Several of these functions are inspired by https://github.com/nomic-io/js-tendermint/blob/tendermint-0.30/src/
// See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L193-L195
function encodeString(s) {
    const utf8 = (0, encoding_1$3.toUtf8)(s);
    return Uint8Array.from([utf8.length, ...utf8]);
}
encodings.encodeString = encodeString;
// See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L79-L87
function encodeUvarint(n) {
    return n >= 0x80
        ? // eslint-disable-next-line no-bitwise
            Uint8Array.from([(n & 0xff) | 0x80, ...encodeUvarint(n >> 7)])
        : // eslint-disable-next-line no-bitwise
            Uint8Array.from([n & 0xff]);
}
encodings.encodeUvarint = encodeUvarint;
// See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L134-L178
function encodeTime(time) {
    const milliseconds = time.getTime();
    const seconds = Math.floor(milliseconds / 1000);
    const secondsArray = seconds ? [0x08, ...encodeUvarint(seconds)] : new Uint8Array();
    const nanoseconds = (time.nanoseconds || 0) + (milliseconds % 1000) * 1e6;
    const nanosecondsArray = nanoseconds ? [0x10, ...encodeUvarint(nanoseconds)] : new Uint8Array();
    return Uint8Array.from([...secondsArray, ...nanosecondsArray]);
}
encodings.encodeTime = encodeTime;
// See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L180-L187
function encodeBytes(bytes) {
    // Since we're only dealing with short byte arrays we don't need a full VarBuffer implementation yet
    if (bytes.length >= 0x80)
        throw new Error("Not implemented for byte arrays of length 128 or more");
    return bytes.length ? Uint8Array.from([bytes.length, ...bytes]) : new Uint8Array();
}
encodings.encodeBytes = encodeBytes;
function encodeVersion(version) {
    const blockArray = version.block
        ? Uint8Array.from([0x08, ...encodeUvarint(version.block)])
        : new Uint8Array();
    const appArray = version.app ? Uint8Array.from([0x10, ...encodeUvarint(version.app)]) : new Uint8Array();
    return Uint8Array.from([...blockArray, ...appArray]);
}
encodings.encodeVersion = encodeVersion;
function encodeBlockId(blockId) {
    return Uint8Array.from([
        0x0a,
        blockId.hash.length,
        ...blockId.hash,
        0x12,
        blockId.parts.hash.length + 4,
        0x08,
        blockId.parts.total,
        0x12,
        blockId.parts.hash.length,
        ...blockId.parts.hash,
    ]);
}
encodings.encodeBlockId = encodeBlockId;

Object.defineProperty(hasher, "__esModule", { value: true });
hasher.hashBlock = hasher.hashTx = void 0;
const crypto_1 = build$7;
const encodings_1$2 = encodings;
// hash is sha256
// https://github.com/tendermint/tendermint/blob/master/UPGRADING.md#v0260
function hashTx(tx) {
    return (0, crypto_1.sha256)(tx);
}
hasher.hashTx = hashTx;
function getSplitPoint(n) {
    if (n < 1)
        throw new Error("Cannot split an empty tree");
    const largestPowerOf2 = 2 ** Math.floor(Math.log2(n));
    return largestPowerOf2 < n ? largestPowerOf2 : largestPowerOf2 / 2;
}
function hashLeaf(leaf) {
    const hash = new crypto_1.Sha256(Uint8Array.from([0]));
    hash.update(leaf);
    return hash.digest();
}
function hashInner(left, right) {
    const hash = new crypto_1.Sha256(Uint8Array.from([1]));
    hash.update(left);
    hash.update(right);
    return hash.digest();
}
// See https://github.com/tendermint/tendermint/blob/v0.31.8/docs/spec/blockchain/encoding.md#merkleroot
// Note: the hashes input may not actually be hashes, especially before a recursive call
function hashTree(hashes) {
    switch (hashes.length) {
        case 0:
            throw new Error("Cannot hash empty tree");
        case 1:
            return hashLeaf(hashes[0]);
        default: {
            const slicePoint = getSplitPoint(hashes.length);
            const left = hashTree(hashes.slice(0, slicePoint));
            const right = hashTree(hashes.slice(slicePoint));
            return hashInner(left, right);
        }
    }
}
function hashBlock(header) {
    if (!header.lastBlockId) {
        throw new Error("Hashing a block header with no last block ID (i.e. header at height 1) is not supported. If you need this, contributions are welcome. Please add documentation and test vectors for this case.");
    }
    const encodedFields = [
        (0, encodings_1$2.encodeVersion)(header.version),
        (0, encodings_1$2.encodeString)(header.chainId),
        (0, encodings_1$2.encodeUvarint)(header.height),
        (0, encodings_1$2.encodeTime)(header.time),
        (0, encodings_1$2.encodeBlockId)(header.lastBlockId),
        (0, encodings_1$2.encodeBytes)(header.lastCommitHash),
        (0, encodings_1$2.encodeBytes)(header.dataHash),
        (0, encodings_1$2.encodeBytes)(header.validatorsHash),
        (0, encodings_1$2.encodeBytes)(header.nextValidatorsHash),
        (0, encodings_1$2.encodeBytes)(header.consensusHash),
        (0, encodings_1$2.encodeBytes)(header.appHash),
        (0, encodings_1$2.encodeBytes)(header.lastResultsHash),
        (0, encodings_1$2.encodeBytes)(header.evidenceHash),
        (0, encodings_1$2.encodeBytes)(header.proposerAddress),
    ];
    return hashTree(encodedFields);
}
hasher.hashBlock = hashBlock;

var requests$2 = {};

var __createBinding$1 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$1 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$1 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$1(result, mod, k);
    __setModuleDefault$1(result, mod);
    return result;
};
Object.defineProperty(requests$2, "__esModule", { value: true });
requests$2.Params = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const encoding_1$2 = build$6;
const inthelpers_1$1 = inthelpers;
const jsonrpc_1$1 = jsonrpc;
const encodings_1$1 = encodings;
const requests$1 = __importStar$1(requests$3);
function encodeHeightParam(param) {
    return {
        height: (0, encodings_1$1.may)(inthelpers_1$1.smallIntToApi, param.height),
    };
}
function encodeBlockchainRequestParams(param) {
    return {
        minHeight: (0, encodings_1$1.may)(inthelpers_1$1.smallIntToApi, param.minHeight),
        maxHeight: (0, encodings_1$1.may)(inthelpers_1$1.smallIntToApi, param.maxHeight),
    };
}
function encodeBlockSearchParams(params) {
    return {
        query: params.query,
        page: (0, encodings_1$1.may)(inthelpers_1$1.smallIntToApi, params.page),
        per_page: (0, encodings_1$1.may)(inthelpers_1$1.smallIntToApi, params.per_page),
        order_by: params.order_by,
    };
}
function encodeAbciQueryParams(params) {
    return {
        path: (0, encodings_1$1.assertNotEmpty)(params.path),
        data: (0, encoding_1$2.toHex)(params.data),
        height: (0, encodings_1$1.may)(inthelpers_1$1.smallIntToApi, params.height),
        prove: params.prove,
    };
}
function encodeBroadcastTxParams(params) {
    return {
        tx: (0, encoding_1$2.toBase64)((0, encodings_1$1.assertNotEmpty)(params.tx)),
    };
}
function encodeTxParams(params) {
    return {
        hash: (0, encoding_1$2.toBase64)((0, encodings_1$1.assertNotEmpty)(params.hash)),
        prove: params.prove,
    };
}
function encodeTxSearchParams(params) {
    return {
        query: params.query,
        prove: params.prove,
        page: (0, encodings_1$1.may)(inthelpers_1$1.smallIntToApi, params.page),
        per_page: (0, encodings_1$1.may)(inthelpers_1$1.smallIntToApi, params.per_page),
        order_by: params.order_by,
    };
}
function encodeValidatorsParams(params) {
    return {
        height: (0, encodings_1$1.may)(inthelpers_1$1.smallIntToApi, params.height),
        page: (0, encodings_1$1.may)(inthelpers_1$1.smallIntToApi, params.page),
        per_page: (0, encodings_1$1.may)(inthelpers_1$1.smallIntToApi, params.per_page),
    };
}
let Params$3 = class Params {
    static encodeAbciInfo(req) {
        return (0, jsonrpc_1$1.createJsonRpcRequest)(req.method);
    }
    static encodeAbciQuery(req) {
        return (0, jsonrpc_1$1.createJsonRpcRequest)(req.method, encodeAbciQueryParams(req.params));
    }
    static encodeBlock(req) {
        return (0, jsonrpc_1$1.createJsonRpcRequest)(req.method, encodeHeightParam(req.params));
    }
    static encodeBlockchain(req) {
        return (0, jsonrpc_1$1.createJsonRpcRequest)(req.method, encodeBlockchainRequestParams(req.params));
    }
    static encodeBlockResults(req) {
        return (0, jsonrpc_1$1.createJsonRpcRequest)(req.method, encodeHeightParam(req.params));
    }
    static encodeBlockSearch(req) {
        return (0, jsonrpc_1$1.createJsonRpcRequest)(req.method, encodeBlockSearchParams(req.params));
    }
    static encodeBroadcastTx(req) {
        return (0, jsonrpc_1$1.createJsonRpcRequest)(req.method, encodeBroadcastTxParams(req.params));
    }
    static encodeCommit(req) {
        return (0, jsonrpc_1$1.createJsonRpcRequest)(req.method, encodeHeightParam(req.params));
    }
    static encodeGenesis(req) {
        return (0, jsonrpc_1$1.createJsonRpcRequest)(req.method);
    }
    static encodeHealth(req) {
        return (0, jsonrpc_1$1.createJsonRpcRequest)(req.method);
    }
    static encodeNumUnconfirmedTxs(req) {
        return (0, jsonrpc_1$1.createJsonRpcRequest)(req.method);
    }
    static encodeStatus(req) {
        return (0, jsonrpc_1$1.createJsonRpcRequest)(req.method);
    }
    static encodeSubscribe(req) {
        const eventTag = { key: "tm.event", value: req.query.type };
        const query = requests$1.buildQuery({ tags: [eventTag], raw: req.query.raw });
        return (0, jsonrpc_1$1.createJsonRpcRequest)("subscribe", { query: query });
    }
    static encodeTx(req) {
        return (0, jsonrpc_1$1.createJsonRpcRequest)(req.method, encodeTxParams(req.params));
    }
    // TODO: encode params for query string???
    static encodeTxSearch(req) {
        return (0, jsonrpc_1$1.createJsonRpcRequest)(req.method, encodeTxSearchParams(req.params));
    }
    static encodeValidators(req) {
        return (0, jsonrpc_1$1.createJsonRpcRequest)(req.method, encodeValidatorsParams(req.params));
    }
};
requests$2.Params = Params$3;

var responses = {};

Object.defineProperty(responses, "__esModule", { value: true });
responses.Responses = responses.decodeValidatorInfo = responses.decodeValidatorGenesis = responses.decodeValidatorUpdate = responses.decodeEvent = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const encoding_1$1 = build$6;
const utils_1$1 = build$5;
const dates_1 = dates;
const inthelpers_1 = inthelpers;
const types_1 = types;
const encodings_1 = encodings;
const hasher_1$1 = hasher;
function decodeAbciInfo(data) {
    return {
        data: data.data,
        lastBlockHeight: (0, encodings_1.may)(inthelpers_1.apiToSmallInt, data.last_block_height),
        lastBlockAppHash: (0, encodings_1.may)(encoding_1$1.fromBase64, data.last_block_app_hash),
    };
}
function decodeQueryProof(data) {
    return {
        ops: data.ops.map((op) => ({
            type: op.type,
            key: (0, encoding_1$1.fromBase64)(op.key),
            data: (0, encoding_1$1.fromBase64)(op.data),
        })),
    };
}
function decodeAbciQuery(data) {
    return {
        key: (0, encoding_1$1.fromBase64)((0, encodings_1.assertString)(data.key ?? "")),
        value: (0, encoding_1$1.fromBase64)((0, encodings_1.assertString)(data.value ?? "")),
        proof: (0, encodings_1.may)(decodeQueryProof, data.proofOps),
        height: (0, encodings_1.may)(inthelpers_1.apiToSmallInt, data.height),
        code: (0, encodings_1.may)(inthelpers_1.apiToSmallInt, data.code),
        codespace: (0, encodings_1.assertString)(data.codespace ?? ""),
        index: (0, encodings_1.may)(inthelpers_1.apiToSmallInt, data.index),
        log: data.log,
        info: (0, encodings_1.assertString)(data.info ?? ""),
    };
}
function decodeEventAttribute(attribute) {
    return {
        key: (0, encodings_1.assertNotEmpty)(attribute.key),
        value: attribute.value ?? "",
    };
}
function decodeAttributes(attributes) {
    return (0, encodings_1.assertArray)(attributes).map(decodeEventAttribute);
}
function decodeEvent(event) {
    return {
        type: event.type,
        attributes: event.attributes ? decodeAttributes(event.attributes) : [],
    };
}
responses.decodeEvent = decodeEvent;
function decodeEvents(events) {
    return (0, encodings_1.assertArray)(events).map(decodeEvent);
}
function decodeTxData(data) {
    return {
        code: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNumber)(data.code ?? 0)),
        codespace: data.codespace,
        log: data.log,
        data: (0, encodings_1.may)(encoding_1$1.fromBase64, data.data),
        events: data.events ? decodeEvents(data.events) : [],
        gasWanted: (0, inthelpers_1.apiToSmallInt)(data.gas_wanted ?? "0"),
        gasUsed: (0, inthelpers_1.apiToSmallInt)(data.gas_used ?? "0"),
    };
}
function decodePubkey(data) {
    if ("Sum" in data) {
        // we don't need to check type because we're checking algorithm
        const [[algorithm, value]] = Object.entries(data.Sum.value);
        (0, utils_1$1.assert)(algorithm === "ed25519" || algorithm === "secp256k1", `unknown pubkey type: ${algorithm}`);
        return {
            algorithm,
            data: (0, encoding_1$1.fromBase64)((0, encodings_1.assertNotEmpty)(value)),
        };
    }
    else {
        switch (data.type) {
            // go-amino special code
            case "tendermint/PubKeyEd25519":
                return {
                    algorithm: "ed25519",
                    data: (0, encoding_1$1.fromBase64)((0, encodings_1.assertNotEmpty)(data.value)),
                };
            case "tendermint/PubKeySecp256k1":
                return {
                    algorithm: "secp256k1",
                    data: (0, encoding_1$1.fromBase64)((0, encodings_1.assertNotEmpty)(data.value)),
                };
            default:
                throw new Error(`unknown pubkey type: ${data.type}`);
        }
    }
}
/**
 * Note: we do not parse block.time_iota_ms for now because of this CHANGELOG entry
 *
 * > Add time_iota_ms to block's consensus parameters (not exposed to the application)
 * https://github.com/tendermint/tendermint/blob/master/CHANGELOG.md#v0310
 */
function decodeBlockParams(data) {
    return {
        maxBytes: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.max_bytes)),
        maxGas: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.max_gas)),
    };
}
function decodeEvidenceParams(data) {
    return {
        maxAgeNumBlocks: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.max_age_num_blocks)),
        maxAgeDuration: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.max_age_duration)),
    };
}
function decodeConsensusParams(data) {
    return {
        block: decodeBlockParams((0, encodings_1.assertObject)(data.block)),
        evidence: decodeEvidenceParams((0, encodings_1.assertObject)(data.evidence)),
    };
}
function decodeValidatorUpdate(data) {
    return {
        pubkey: decodePubkey((0, encodings_1.assertObject)(data.pub_key)),
        votingPower: (0, inthelpers_1.apiToBigInt)(data.power ?? "0"),
    };
}
responses.decodeValidatorUpdate = decodeValidatorUpdate;
function decodeBlockResults(data) {
    return {
        height: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.height)),
        results: (data.txs_results || []).map(decodeTxData),
        validatorUpdates: (data.validator_updates || []).map(decodeValidatorUpdate),
        consensusUpdates: (0, encodings_1.may)(decodeConsensusParams, data.consensus_param_updates),
        beginBlockEvents: decodeEvents(data.begin_block_events || []),
        endBlockEvents: decodeEvents(data.end_block_events || []),
    };
}
function decodeBlockId(data) {
    return {
        hash: (0, encoding_1$1.fromHex)((0, encodings_1.assertNotEmpty)(data.hash)),
        parts: {
            total: (0, encodings_1.assertNotEmpty)(data.parts.total),
            hash: (0, encoding_1$1.fromHex)((0, encodings_1.assertNotEmpty)(data.parts.hash)),
        },
    };
}
function decodeBlockVersion(data) {
    return {
        block: (0, inthelpers_1.apiToSmallInt)(data.block),
        app: (0, inthelpers_1.apiToSmallInt)(data.app ?? 0),
    };
}
function decodeHeader(data) {
    return {
        version: decodeBlockVersion(data.version),
        chainId: (0, encodings_1.assertNotEmpty)(data.chain_id),
        height: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.height)),
        time: (0, dates_1.fromRfc3339WithNanoseconds)((0, encodings_1.assertNotEmpty)(data.time)),
        // When there is no last block ID (i.e. this block's height is 1), we get an empty structure like this:
        // { hash: '', parts: { total: 0, hash: '' } }
        lastBlockId: data.last_block_id.hash ? decodeBlockId(data.last_block_id) : null,
        lastCommitHash: (0, encoding_1$1.fromHex)((0, encodings_1.assertSet)(data.last_commit_hash)),
        dataHash: (0, encoding_1$1.fromHex)((0, encodings_1.assertSet)(data.data_hash)),
        validatorsHash: (0, encoding_1$1.fromHex)((0, encodings_1.assertSet)(data.validators_hash)),
        nextValidatorsHash: (0, encoding_1$1.fromHex)((0, encodings_1.assertSet)(data.next_validators_hash)),
        consensusHash: (0, encoding_1$1.fromHex)((0, encodings_1.assertSet)(data.consensus_hash)),
        appHash: (0, encoding_1$1.fromHex)((0, encodings_1.assertSet)(data.app_hash)),
        lastResultsHash: (0, encoding_1$1.fromHex)((0, encodings_1.assertSet)(data.last_results_hash)),
        evidenceHash: (0, encoding_1$1.fromHex)((0, encodings_1.assertSet)(data.evidence_hash)),
        proposerAddress: (0, encoding_1$1.fromHex)((0, encodings_1.assertNotEmpty)(data.proposer_address)),
    };
}
function decodeBlockMeta(data) {
    return {
        blockId: decodeBlockId(data.block_id),
        blockSize: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.block_size)),
        header: decodeHeader(data.header),
        numTxs: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.num_txs)),
    };
}
function decodeBlockchain(data) {
    return {
        lastHeight: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.last_height)),
        blockMetas: (0, encodings_1.assertArray)(data.block_metas).map(decodeBlockMeta),
    };
}
function decodeBroadcastTxSync(data) {
    return {
        ...decodeTxData(data),
        hash: (0, encoding_1$1.fromHex)((0, encodings_1.assertNotEmpty)(data.hash)),
    };
}
function decodeBroadcastTxCommit(data) {
    return {
        height: (0, inthelpers_1.apiToSmallInt)(data.height),
        hash: (0, encoding_1$1.fromHex)((0, encodings_1.assertNotEmpty)(data.hash)),
        checkTx: decodeTxData((0, encodings_1.assertObject)(data.check_tx)),
        deliverTx: (0, encodings_1.may)(decodeTxData, data.deliver_tx),
    };
}
function decodeBlockIdFlag(blockIdFlag) {
    (0, utils_1$1.assert)(blockIdFlag in types_1.BlockIdFlag);
    return blockIdFlag;
}
/**
 * In some cases a timestamp is optional and set to the value 0 in Go.
 * This can lead to strings like "0001-01-01T00:00:00Z" (see https://github.com/cosmos/cosmjs/issues/704#issuecomment-797122415).
 * This decoder tries to clean up such encoding from the API and turn them
 * into undefined values.
 */
function decodeOptionalTime(timestamp) {
    const nonZeroTime = timestamp && !timestamp.startsWith("0001-01-01");
    return nonZeroTime ? (0, dates_1.fromRfc3339WithNanoseconds)(timestamp) : undefined;
}
function decodeCommitSignature(data) {
    return {
        blockIdFlag: decodeBlockIdFlag(data.block_id_flag),
        validatorAddress: data.validator_address ? (0, encoding_1$1.fromHex)(data.validator_address) : undefined,
        timestamp: decodeOptionalTime(data.timestamp),
        signature: data.signature ? (0, encoding_1$1.fromBase64)(data.signature) : undefined,
    };
}
function decodeCommit(data) {
    return {
        blockId: decodeBlockId((0, encodings_1.assertObject)(data.block_id)),
        height: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.height)),
        round: (0, inthelpers_1.apiToSmallInt)(data.round),
        signatures: (0, encodings_1.assertArray)(data.signatures).map(decodeCommitSignature),
    };
}
function decodeCommitResponse(data) {
    return {
        canonical: (0, encodings_1.assertBoolean)(data.canonical),
        header: decodeHeader(data.signed_header.header),
        commit: decodeCommit(data.signed_header.commit),
    };
}
function decodeValidatorGenesis(data) {
    return {
        address: (0, encoding_1$1.fromHex)((0, encodings_1.assertNotEmpty)(data.address)),
        pubkey: decodePubkey((0, encodings_1.assertObject)(data.pub_key)),
        votingPower: (0, inthelpers_1.apiToBigInt)((0, encodings_1.assertNotEmpty)(data.power)),
    };
}
responses.decodeValidatorGenesis = decodeValidatorGenesis;
function decodeGenesis(data) {
    return {
        genesisTime: (0, dates_1.fromRfc3339WithNanoseconds)((0, encodings_1.assertNotEmpty)(data.genesis_time)),
        chainId: (0, encodings_1.assertNotEmpty)(data.chain_id),
        consensusParams: decodeConsensusParams(data.consensus_params),
        validators: data.validators ? (0, encodings_1.assertArray)(data.validators).map(decodeValidatorGenesis) : [],
        appHash: (0, encoding_1$1.fromHex)((0, encodings_1.assertSet)(data.app_hash)),
        appState: data.app_state,
    };
}
function decodeValidatorInfo(data) {
    return {
        pubkey: decodePubkey((0, encodings_1.assertObject)(data.pub_key)),
        votingPower: (0, inthelpers_1.apiToBigInt)((0, encodings_1.assertNotEmpty)(data.voting_power)),
        address: (0, encoding_1$1.fromHex)((0, encodings_1.assertNotEmpty)(data.address)),
        proposerPriority: data.proposer_priority ? (0, inthelpers_1.apiToSmallInt)(data.proposer_priority) : undefined,
    };
}
responses.decodeValidatorInfo = decodeValidatorInfo;
function decodeNodeInfo(data) {
    return {
        id: (0, encoding_1$1.fromHex)((0, encodings_1.assertNotEmpty)(data.id)),
        listenAddr: (0, encodings_1.assertNotEmpty)(data.listen_addr),
        network: (0, encodings_1.assertNotEmpty)(data.network),
        version: (0, encodings_1.assertString)(data.version),
        channels: (0, encodings_1.assertNotEmpty)(data.channels),
        moniker: (0, encodings_1.assertNotEmpty)(data.moniker),
        other: (0, encodings_1.dictionaryToStringMap)(data.other),
        protocolVersion: {
            app: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.protocol_version.app)),
            block: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.protocol_version.block)),
            p2p: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.protocol_version.p2p)),
        },
    };
}
function decodeSyncInfo(data) {
    return {
        latestBlockHash: (0, encoding_1$1.fromHex)((0, encodings_1.assertNotEmpty)(data.latest_block_hash)),
        latestAppHash: (0, encoding_1$1.fromHex)((0, encodings_1.assertNotEmpty)(data.latest_app_hash)),
        latestBlockTime: (0, dates_1.fromRfc3339WithNanoseconds)((0, encodings_1.assertNotEmpty)(data.latest_block_time)),
        latestBlockHeight: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.latest_block_height)),
        catchingUp: (0, encodings_1.assertBoolean)(data.catching_up),
    };
}
function decodeStatus(data) {
    return {
        nodeInfo: decodeNodeInfo(data.node_info),
        syncInfo: decodeSyncInfo(data.sync_info),
        validatorInfo: decodeValidatorInfo(data.validator_info),
    };
}
function decodeTxProof(data) {
    return {
        data: (0, encoding_1$1.fromBase64)((0, encodings_1.assertNotEmpty)(data.data)),
        rootHash: (0, encoding_1$1.fromHex)((0, encodings_1.assertNotEmpty)(data.root_hash)),
        proof: {
            total: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.proof.total)),
            index: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.proof.index)),
            leafHash: (0, encoding_1$1.fromBase64)((0, encodings_1.assertNotEmpty)(data.proof.leaf_hash)),
            aunts: (0, encodings_1.assertArray)(data.proof.aunts).map(encoding_1$1.fromBase64),
        },
    };
}
function decodeTxResponse(data) {
    return {
        tx: (0, encoding_1$1.fromBase64)((0, encodings_1.assertNotEmpty)(data.tx)),
        result: decodeTxData((0, encodings_1.assertObject)(data.tx_result)),
        height: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.height)),
        index: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNumber)(data.index)),
        hash: (0, encoding_1$1.fromHex)((0, encodings_1.assertNotEmpty)(data.hash)),
        proof: (0, encodings_1.may)(decodeTxProof, data.proof),
    };
}
function decodeTxSearch(data) {
    return {
        totalCount: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.total_count)),
        txs: (0, encodings_1.assertArray)(data.txs).map(decodeTxResponse),
    };
}
function decodeTxEvent(data) {
    const tx = (0, encoding_1$1.fromBase64)((0, encodings_1.assertNotEmpty)(data.tx));
    return {
        tx: tx,
        hash: (0, hasher_1$1.hashTx)(tx),
        result: decodeTxData(data.result),
        height: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.height)),
    };
}
function decodeValidators(data) {
    return {
        blockHeight: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.block_height)),
        validators: (0, encodings_1.assertArray)(data.validators).map(decodeValidatorInfo),
        count: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.count)),
        total: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.total)),
    };
}
function decodeBlock(data) {
    return {
        header: decodeHeader((0, encodings_1.assertObject)(data.header)),
        // For the block at height 1, last commit is not set. This is represented in an empty object like this:
        // { height: '0', round: 0, block_id: { hash: '', parts: [Object] }, signatures: [] }
        lastCommit: data.last_commit.block_id.hash ? decodeCommit((0, encodings_1.assertObject)(data.last_commit)) : null,
        txs: data.data.txs ? (0, encodings_1.assertArray)(data.data.txs).map(encoding_1$1.fromBase64) : [],
        // Lift up .evidence.evidence to just .evidence
        // See https://github.com/tendermint/tendermint/issues/7697
        evidence: data.evidence?.evidence ?? [],
    };
}
function decodeBlockResponse(data) {
    return {
        blockId: decodeBlockId(data.block_id),
        block: decodeBlock(data.block),
    };
}
function decodeBlockSearch(data) {
    return {
        totalCount: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.total_count)),
        blocks: (0, encodings_1.assertArray)(data.blocks).map(decodeBlockResponse),
    };
}
function decodeNumUnconfirmedTxs(data) {
    return {
        total: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.total)),
        totalBytes: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.total_bytes)),
    };
}
class Responses {
    static decodeAbciInfo(response) {
        return decodeAbciInfo((0, encodings_1.assertObject)(response.result.response));
    }
    static decodeAbciQuery(response) {
        return decodeAbciQuery((0, encodings_1.assertObject)(response.result.response));
    }
    static decodeBlock(response) {
        return decodeBlockResponse(response.result);
    }
    static decodeBlockResults(response) {
        return decodeBlockResults(response.result);
    }
    static decodeBlockSearch(response) {
        return decodeBlockSearch(response.result);
    }
    static decodeBlockchain(response) {
        return decodeBlockchain(response.result);
    }
    static decodeBroadcastTxSync(response) {
        return decodeBroadcastTxSync(response.result);
    }
    static decodeBroadcastTxAsync(response) {
        return Responses.decodeBroadcastTxSync(response);
    }
    static decodeBroadcastTxCommit(response) {
        return decodeBroadcastTxCommit(response.result);
    }
    static decodeCommit(response) {
        return decodeCommitResponse(response.result);
    }
    static decodeGenesis(response) {
        return decodeGenesis((0, encodings_1.assertObject)(response.result.genesis));
    }
    static decodeHealth() {
        return null;
    }
    static decodeNumUnconfirmedTxs(response) {
        return decodeNumUnconfirmedTxs(response.result);
    }
    static decodeStatus(response) {
        return decodeStatus(response.result);
    }
    static decodeNewBlockEvent(event) {
        return decodeBlock(event.data.value.block);
    }
    static decodeNewBlockHeaderEvent(event) {
        return decodeHeader(event.data.value.header);
    }
    static decodeTxEvent(event) {
        return decodeTxEvent(event.data.value.TxResult);
    }
    static decodeTx(response) {
        return decodeTxResponse(response.result);
    }
    static decodeTxSearch(response) {
        return decodeTxSearch(response.result);
    }
    static decodeValidators(response) {
        return decodeValidators(response.result);
    }
}
responses.Responses = Responses;

Object.defineProperty(adaptor, "__esModule", { value: true });
adaptor.adaptor37 = void 0;
const hasher_1 = hasher;
const requests_1 = requests$2;
const responses_1 = responses;
adaptor.adaptor37 = {
    params: requests_1.Params,
    responses: responses_1.Responses,
    hashTx: hasher_1.hashTx,
    hashBlock: hasher_1.hashBlock,
};

var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(tendermint37client, "__esModule", { value: true });
tendermint37client.Tendermint37Client = void 0;
const jsonrpc_1 = jsonrpc;
const rpcclients_1 = rpcclients;
const adaptor_1 = adaptor;
const requests = __importStar(requests$3);
class Tendermint37Client {
    /**
     * Use `Tendermint37Client.connect` or `Tendermint37Client.create` to create an instance.
     */
    constructor(client) {
        this.client = client;
        this.p = adaptor_1.adaptor37.params;
        this.r = adaptor_1.adaptor37.responses;
    }
    /**
     * Creates a new Tendermint client for the given endpoint.
     *
     * Uses HTTP when the URL schema is http or https. Uses WebSockets otherwise.
     */
    static async connect(endpoint) {
        let rpcClient;
        if (typeof endpoint === "object") {
            rpcClient = new rpcclients_1.HttpClient(endpoint);
        }
        else {
            const useHttp = endpoint.startsWith("http://") || endpoint.startsWith("https://");
            rpcClient = useHttp ? new rpcclients_1.HttpClient(endpoint) : new rpcclients_1.WebsocketClient(endpoint);
        }
        // For some very strange reason I don't understand, tests start to fail on some systems
        // (our CI) when skipping the status call before doing other queries. Sleeping a little
        // while did not help. Thus we query the version as a way to say "hi" to the backend,
        // even in cases where we don't use the result.
        await this.detectVersion(rpcClient);
        return Tendermint37Client.create(rpcClient);
    }
    /**
     * Creates a new Tendermint client given an RPC client.
     */
    static async create(rpcClient) {
        return new Tendermint37Client(rpcClient);
    }
    static async detectVersion(client) {
        const req = (0, jsonrpc_1.createJsonRpcRequest)(requests.Method.Status);
        const response = await client.execute(req);
        const result = response.result;
        if (!result || !result.node_info) {
            throw new Error("Unrecognized format for status response");
        }
        const version = result.node_info.version;
        if (typeof version !== "string") {
            throw new Error("Unrecognized version format: must be string");
        }
        return version;
    }
    disconnect() {
        this.client.disconnect();
    }
    async abciInfo() {
        const query = { method: requests.Method.AbciInfo };
        return this.doCall(query, this.p.encodeAbciInfo, this.r.decodeAbciInfo);
    }
    async abciQuery(params) {
        const query = { params: params, method: requests.Method.AbciQuery };
        return this.doCall(query, this.p.encodeAbciQuery, this.r.decodeAbciQuery);
    }
    async block(height) {
        const query = { method: requests.Method.Block, params: { height: height } };
        return this.doCall(query, this.p.encodeBlock, this.r.decodeBlock);
    }
    async blockResults(height) {
        const query = {
            method: requests.Method.BlockResults,
            params: { height: height },
        };
        return this.doCall(query, this.p.encodeBlockResults, this.r.decodeBlockResults);
    }
    /**
     * Search for events that are in a block.
     *
     * NOTE
     * This method will error on any node that is running a Tendermint version lower than 0.34.9.
     *
     * @see https://docs.tendermint.com/master/rpc/#/Info/block_search
     */
    async blockSearch(params) {
        const query = { params: params, method: requests.Method.BlockSearch };
        const resp = await this.doCall(query, this.p.encodeBlockSearch, this.r.decodeBlockSearch);
        return {
            ...resp,
            // make sure we sort by height, as tendermint may be sorting by string value of the height
            blocks: [...resp.blocks].sort((a, b) => a.block.header.height - b.block.header.height),
        };
    }
    // this should paginate through all blockSearch options to ensure it returns all results.
    // starts with page 1 or whatever was provided (eg. to start on page 7)
    //
    // NOTE
    // This method will error on any node that is running a Tendermint version lower than 0.34.9.
    async blockSearchAll(params) {
        let page = params.page || 1;
        const blocks = [];
        let done = false;
        while (!done) {
            const resp = await this.blockSearch({ ...params, page: page });
            blocks.push(...resp.blocks);
            if (blocks.length < resp.totalCount) {
                page++;
            }
            else {
                done = true;
            }
        }
        // make sure we sort by height, as tendermint may be sorting by string value of the height
        // and the earlier items may be in a higher page than the later items
        blocks.sort((a, b) => a.block.header.height - b.block.header.height);
        return {
            totalCount: blocks.length,
            blocks: blocks,
        };
    }
    /**
     * Queries block headers filtered by minHeight <= height <= maxHeight.
     *
     * @param minHeight The minimum height to be included in the result. Defaults to 0.
     * @param maxHeight The maximum height to be included in the result. Defaults to infinity.
     */
    async blockchain(minHeight, maxHeight) {
        const query = {
            method: requests.Method.Blockchain,
            params: {
                minHeight: minHeight,
                maxHeight: maxHeight,
            },
        };
        return this.doCall(query, this.p.encodeBlockchain, this.r.decodeBlockchain);
    }
    /**
     * Broadcast transaction to mempool and wait for response
     *
     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_sync
     */
    async broadcastTxSync(params) {
        const query = { params: params, method: requests.Method.BroadcastTxSync };
        return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxSync);
    }
    /**
     * Broadcast transaction to mempool and do not wait for result
     *
     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_async
     */
    async broadcastTxAsync(params) {
        const query = { params: params, method: requests.Method.BroadcastTxAsync };
        return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxAsync);
    }
    /**
     * Broadcast transaction to mempool and wait for block
     *
     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_commit
     */
    async broadcastTxCommit(params) {
        const query = { params: params, method: requests.Method.BroadcastTxCommit };
        return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxCommit);
    }
    async commit(height) {
        const query = { method: requests.Method.Commit, params: { height: height } };
        return this.doCall(query, this.p.encodeCommit, this.r.decodeCommit);
    }
    async genesis() {
        const query = { method: requests.Method.Genesis };
        return this.doCall(query, this.p.encodeGenesis, this.r.decodeGenesis);
    }
    async health() {
        const query = { method: requests.Method.Health };
        return this.doCall(query, this.p.encodeHealth, this.r.decodeHealth);
    }
    async numUnconfirmedTxs() {
        const query = { method: requests.Method.NumUnconfirmedTxs };
        return this.doCall(query, this.p.encodeNumUnconfirmedTxs, this.r.decodeNumUnconfirmedTxs);
    }
    async status() {
        const query = { method: requests.Method.Status };
        return this.doCall(query, this.p.encodeStatus, this.r.decodeStatus);
    }
    subscribeNewBlock() {
        const request = {
            method: requests.Method.Subscribe,
            query: { type: requests.SubscriptionEventType.NewBlock },
        };
        return this.subscribe(request, this.r.decodeNewBlockEvent);
    }
    subscribeNewBlockHeader() {
        const request = {
            method: requests.Method.Subscribe,
            query: { type: requests.SubscriptionEventType.NewBlockHeader },
        };
        return this.subscribe(request, this.r.decodeNewBlockHeaderEvent);
    }
    subscribeTx(query) {
        const request = {
            method: requests.Method.Subscribe,
            query: {
                type: requests.SubscriptionEventType.Tx,
                raw: query,
            },
        };
        return this.subscribe(request, this.r.decodeTxEvent);
    }
    /**
     * Get a single transaction by hash
     *
     * @see https://docs.tendermint.com/master/rpc/#/Info/tx
     */
    async tx(params) {
        const query = { params: params, method: requests.Method.Tx };
        return this.doCall(query, this.p.encodeTx, this.r.decodeTx);
    }
    /**
     * Search for transactions that are in a block
     *
     * @see https://docs.tendermint.com/master/rpc/#/Info/tx_search
     */
    async txSearch(params) {
        const query = { params: params, method: requests.Method.TxSearch };
        return this.doCall(query, this.p.encodeTxSearch, this.r.decodeTxSearch);
    }
    // this should paginate through all txSearch options to ensure it returns all results.
    // starts with page 1 or whatever was provided (eg. to start on page 7)
    async txSearchAll(params) {
        let page = params.page || 1;
        const txs = [];
        let done = false;
        while (!done) {
            const resp = await this.txSearch({ ...params, page: page });
            txs.push(...resp.txs);
            if (txs.length < resp.totalCount) {
                page++;
            }
            else {
                done = true;
            }
        }
        return {
            totalCount: txs.length,
            txs: txs,
        };
    }
    async validators(params) {
        const query = {
            method: requests.Method.Validators,
            params: params,
        };
        return this.doCall(query, this.p.encodeValidators, this.r.decodeValidators);
    }
    async validatorsAll(height) {
        const validators = [];
        let page = 1;
        let done = false;
        let blockHeight = height;
        while (!done) {
            const response = await this.validators({
                per_page: 50,
                height: blockHeight,
                page: page,
            });
            validators.push(...response.validators);
            blockHeight = blockHeight || response.blockHeight;
            if (validators.length < response.total) {
                page++;
            }
            else {
                done = true;
            }
        }
        return {
            // NOTE: Default value is for type safety but this should always be set
            blockHeight: blockHeight ?? 0,
            count: validators.length,
            total: validators.length,
            validators: validators,
        };
    }
    // doCall is a helper to handle the encode/call/decode logic
    async doCall(request, encode, decode) {
        const req = encode(request);
        const result = await this.client.execute(req);
        return decode(result);
    }
    subscribe(request, decode) {
        if (!(0, rpcclients_1.instanceOfRpcStreamingClient)(this.client)) {
            throw new Error("This RPC client type cannot subscribe to events");
        }
        const req = this.p.encodeSubscribe(request);
        const eventStream = this.client.listen(req);
        return eventStream.map((event) => {
            return decode(event);
        });
    }
}
tendermint37client.Tendermint37Client = Tendermint37Client;

(function (exports) {
	// Note: all exports in this module are publicly available via
	// `import { tendermint37 } from "@cosmjs/tendermint-rpc"`
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Tendermint37Client = exports.VoteType = exports.broadcastTxSyncSuccess = exports.broadcastTxCommitSuccess = exports.SubscriptionEventType = exports.Method = void 0;
	var requests_1 = requests$3;
	Object.defineProperty(exports, "Method", { enumerable: true, get: function () { return requests_1.Method; } });
	Object.defineProperty(exports, "SubscriptionEventType", { enumerable: true, get: function () { return requests_1.SubscriptionEventType; } });
	var responses_1 = responses$1;
	Object.defineProperty(exports, "broadcastTxCommitSuccess", { enumerable: true, get: function () { return responses_1.broadcastTxCommitSuccess; } });
	Object.defineProperty(exports, "broadcastTxSyncSuccess", { enumerable: true, get: function () { return responses_1.broadcastTxSyncSuccess; } });
	Object.defineProperty(exports, "VoteType", { enumerable: true, get: function () { return responses_1.VoteType; } });
	var tendermint37client_1 = tendermint37client;
	Object.defineProperty(exports, "Tendermint37Client", { enumerable: true, get: function () { return tendermint37client_1.Tendermint37Client; } });
	
} (tendermint37));

var tendermintclient = {};

Object.defineProperty(tendermintclient, "__esModule", { value: true });
tendermintclient.isTendermint37Client = tendermintclient.isTendermint34Client = void 0;
const tendermint34_1 = tendermint34;
const tendermint37_1 = tendermint37;
function isTendermint34Client(client) {
    return client instanceof tendermint34_1.Tendermint34Client;
}
tendermintclient.isTendermint34Client = isTendermint34Client;
function isTendermint37Client(client) {
    return client instanceof tendermint37_1.Tendermint37Client;
}
tendermintclient.isTendermint37Client = isTendermint37Client;

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.BlockIdFlag = exports.isTendermint37Client = exports.isTendermint34Client = exports.Tendermint37Client = exports.tendermint37 = exports.Tendermint34Client = exports.tendermint34 = exports.VoteType = exports.SubscriptionEventType = exports.Method = exports.broadcastTxSyncSuccess = exports.broadcastTxCommitSuccess = exports.WebsocketClient = exports.HttpClient = exports.HttpBatchClient = exports.toSeconds = exports.toRfc3339WithNanoseconds = exports.fromSeconds = exports.fromRfc3339WithNanoseconds = exports.DateTime = exports.rawSecp256k1PubkeyToRawAddress = exports.rawEd25519PubkeyToRawAddress = exports.pubkeyToRawAddress = exports.pubkeyToAddress = void 0;
	var addresses_1 = addresses;
	Object.defineProperty(exports, "pubkeyToAddress", { enumerable: true, get: function () { return addresses_1.pubkeyToAddress; } });
	Object.defineProperty(exports, "pubkeyToRawAddress", { enumerable: true, get: function () { return addresses_1.pubkeyToRawAddress; } });
	Object.defineProperty(exports, "rawEd25519PubkeyToRawAddress", { enumerable: true, get: function () { return addresses_1.rawEd25519PubkeyToRawAddress; } });
	Object.defineProperty(exports, "rawSecp256k1PubkeyToRawAddress", { enumerable: true, get: function () { return addresses_1.rawSecp256k1PubkeyToRawAddress; } });
	var dates_1 = dates;
	Object.defineProperty(exports, "DateTime", { enumerable: true, get: function () { return dates_1.DateTime; } });
	Object.defineProperty(exports, "fromRfc3339WithNanoseconds", { enumerable: true, get: function () { return dates_1.fromRfc3339WithNanoseconds; } });
	Object.defineProperty(exports, "fromSeconds", { enumerable: true, get: function () { return dates_1.fromSeconds; } });
	Object.defineProperty(exports, "toRfc3339WithNanoseconds", { enumerable: true, get: function () { return dates_1.toRfc3339WithNanoseconds; } });
	Object.defineProperty(exports, "toSeconds", { enumerable: true, get: function () { return dates_1.toSeconds; } });
	// The public Tendermint34Client.create constructor allows manually choosing an RpcClient.
	// This is currently the only way to switch to the HttpBatchClient (which may become default at some point).
	// Due to this API, we make RPC client implementations public.
	var rpcclients_1 = rpcclients;
	Object.defineProperty(exports, "HttpBatchClient", { enumerable: true, get: function () { return rpcclients_1.HttpBatchClient; } });
	Object.defineProperty(exports, "HttpClient", { enumerable: true, get: function () { return rpcclients_1.HttpClient; } });
	Object.defineProperty(exports, "WebsocketClient", { enumerable: true, get: function () { return rpcclients_1.WebsocketClient; } });
	var tendermint34_1 = tendermint34;
	Object.defineProperty(exports, "broadcastTxCommitSuccess", { enumerable: true, get: function () { return tendermint34_1.broadcastTxCommitSuccess; } });
	Object.defineProperty(exports, "broadcastTxSyncSuccess", { enumerable: true, get: function () { return tendermint34_1.broadcastTxSyncSuccess; } });
	Object.defineProperty(exports, "Method", { enumerable: true, get: function () { return tendermint34_1.Method; } });
	Object.defineProperty(exports, "SubscriptionEventType", { enumerable: true, get: function () { return tendermint34_1.SubscriptionEventType; } });
	Object.defineProperty(exports, "VoteType", { enumerable: true, get: function () { return tendermint34_1.VoteType; } });
	exports.tendermint34 = __importStar(tendermint34);
	var tendermint34_2 = tendermint34;
	Object.defineProperty(exports, "Tendermint34Client", { enumerable: true, get: function () { return tendermint34_2.Tendermint34Client; } });
	exports.tendermint37 = __importStar(tendermint37);
	var tendermint37_1 = tendermint37;
	Object.defineProperty(exports, "Tendermint37Client", { enumerable: true, get: function () { return tendermint37_1.Tendermint37Client; } });
	var tendermintclient_1 = tendermintclient;
	Object.defineProperty(exports, "isTendermint34Client", { enumerable: true, get: function () { return tendermintclient_1.isTendermint34Client; } });
	Object.defineProperty(exports, "isTendermint37Client", { enumerable: true, get: function () { return tendermintclient_1.isTendermint37Client; } });
	var types_1 = types;
	Object.defineProperty(exports, "BlockIdFlag", { enumerable: true, get: function () { return types_1.BlockIdFlag; } });
	
} (build$2));

var stargateclient = {};

Object.defineProperty(stargateclient, "__esModule", { value: true });
stargateclient.StargateClient = stargateclient.BroadcastTxError = stargateclient.assertIsDeliverTxFailure = stargateclient.assertIsDeliverTxSuccess = stargateclient.isDeliverTxSuccess = stargateclient.isDeliverTxFailure = stargateclient.TimeoutError = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const amino_1 = build$8;
const encoding_1 = build$6;
const math_1 = build$a;
const tendermint_rpc_1 = build$2;
const utils_1 = build$5;
const accounts_1 = accounts;
const events_1 = events;
const modules_1 = modules;
const queryclient_1 = queryclient$1;
const search_1 = search;
class TimeoutError extends Error {
    constructor(message, txId) {
        super(message);
        this.txId = txId;
    }
}
stargateclient.TimeoutError = TimeoutError;
function isDeliverTxFailure(result) {
    return !!result.code;
}
stargateclient.isDeliverTxFailure = isDeliverTxFailure;
function isDeliverTxSuccess(result) {
    return !isDeliverTxFailure(result);
}
stargateclient.isDeliverTxSuccess = isDeliverTxSuccess;
/**
 * Ensures the given result is a success. Throws a detailed error message otherwise.
 */
function assertIsDeliverTxSuccess(result) {
    if (isDeliverTxFailure(result)) {
        throw new Error(`Error when broadcasting tx ${result.transactionHash} at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`);
    }
}
stargateclient.assertIsDeliverTxSuccess = assertIsDeliverTxSuccess;
/**
 * Ensures the given result is a failure. Throws a detailed error message otherwise.
 */
function assertIsDeliverTxFailure(result) {
    if (isDeliverTxSuccess(result)) {
        throw new Error(`Transaction ${result.transactionHash} did not fail at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`);
    }
}
stargateclient.assertIsDeliverTxFailure = assertIsDeliverTxFailure;
/**
 * An error when broadcasting the transaction. This contains the CheckTx errors
 * from the blockchain. Once a transaction is included in a block no BroadcastTxError
 * is thrown, even if the execution fails (DeliverTx errors).
 */
class BroadcastTxError extends Error {
    constructor(code, codespace, log) {
        super(`Broadcasting transaction failed with code ${code} (codespace: ${codespace}). Log: ${log}`);
        this.code = code;
        this.codespace = codespace;
        this.log = log;
    }
}
stargateclient.BroadcastTxError = BroadcastTxError;
class StargateClient {
    constructor(tmClient, options) {
        if (tmClient) {
            this.tmClient = tmClient;
            this.queryClient = queryclient_1.QueryClient.withExtensions(tmClient, modules_1.setupAuthExtension, modules_1.setupBankExtension, modules_1.setupStakingExtension, modules_1.setupTxExtension);
        }
        const { accountParser = accounts_1.accountFromAny } = options;
        this.accountParser = accountParser;
    }
    /**
     * Creates an instance by connecting to the given Tendermint RPC endpoint.
     *
     * For now this uses the Tendermint 0.34 client. If you need Tendermint 0.37
     * support, see `create`.
     */
    static async connect(endpoint, options = {}) {
        const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);
        return StargateClient.create(tmClient, options);
    }
    /**
     * Creates an instance from a manually created Tendermint client.
     * Use this to use `Tendermint37Client` instead of `Tendermint34Client`.
     */
    static async create(tmClient, options = {}) {
        return new StargateClient(tmClient, options);
    }
    getTmClient() {
        return this.tmClient;
    }
    forceGetTmClient() {
        if (!this.tmClient) {
            throw new Error("Tendermint client not available. You cannot use online functionality in offline mode.");
        }
        return this.tmClient;
    }
    getQueryClient() {
        return this.queryClient;
    }
    forceGetQueryClient() {
        if (!this.queryClient) {
            throw new Error("Query client not available. You cannot use online functionality in offline mode.");
        }
        return this.queryClient;
    }
    async getChainId() {
        if (!this.chainId) {
            const response = await this.forceGetTmClient().status();
            const chainId = response.nodeInfo.network;
            if (!chainId)
                throw new Error("Chain ID must not be empty");
            this.chainId = chainId;
        }
        return this.chainId;
    }
    async getHeight() {
        const status = await this.forceGetTmClient().status();
        return status.syncInfo.latestBlockHeight;
    }
    async getAccount(searchAddress) {
        try {
            const account = await this.forceGetQueryClient().auth.account(searchAddress);
            return account ? this.accountParser(account) : null;
        }
        catch (error) {
            if (/rpc error: code = NotFound/i.test(error.toString())) {
                return null;
            }
            throw error;
        }
    }
    async getSequence(address) {
        const account = await this.getAccount(address);
        if (!account) {
            throw new Error(`Account '${address}' does not exist on chain. Send some tokens there before trying to query sequence.`);
        }
        return {
            accountNumber: account.accountNumber,
            sequence: account.sequence,
        };
    }
    async getBlock(height) {
        const response = await this.forceGetTmClient().block(height);
        return {
            id: (0, encoding_1.toHex)(response.blockId.hash).toUpperCase(),
            header: {
                version: {
                    block: new math_1.Uint53(response.block.header.version.block).toString(),
                    app: new math_1.Uint53(response.block.header.version.app).toString(),
                },
                height: response.block.header.height,
                chainId: response.block.header.chainId,
                time: (0, tendermint_rpc_1.toRfc3339WithNanoseconds)(response.block.header.time),
            },
            txs: response.block.txs,
        };
    }
    async getBalance(address, searchDenom) {
        return this.forceGetQueryClient().bank.balance(address, searchDenom);
    }
    /**
     * Queries all balances for all denoms that belong to this address.
     *
     * Uses the grpc queries (which iterates over the store internally), and we cannot get
     * proofs from such a method.
     */
    async getAllBalances(address) {
        return this.forceGetQueryClient().bank.allBalances(address);
    }
    async getBalanceStaked(address) {
        const allDelegations = [];
        let startAtKey = undefined;
        do {
            const { delegationResponses, pagination } = await this.forceGetQueryClient().staking.delegatorDelegations(address, startAtKey);
            const loadedDelegations = delegationResponses || [];
            allDelegations.push(...loadedDelegations);
            startAtKey = pagination?.nextKey;
        } while (startAtKey !== undefined && startAtKey.length !== 0);
        const sumValues = allDelegations.reduce((previousValue, currentValue) => {
            // Safe because field is set to non-nullable (https://github.com/cosmos/cosmos-sdk/blob/v0.45.3/proto/cosmos/staking/v1beta1/staking.proto#L295)
            (0, utils_1.assert)(currentValue.balance);
            return previousValue !== null ? (0, amino_1.addCoins)(previousValue, currentValue.balance) : currentValue.balance;
        }, null);
        return sumValues;
    }
    async getDelegation(delegatorAddress, validatorAddress) {
        let delegatedAmount;
        try {
            delegatedAmount = (await this.forceGetQueryClient().staking.delegation(delegatorAddress, validatorAddress)).delegationResponse?.balance;
        }
        catch (e) {
            if (e.toString().includes("key not found")) ;
            else {
                throw e;
            }
        }
        return delegatedAmount || null;
    }
    async getTx(id) {
        const results = await this.txsQuery(`tx.hash='${id}'`);
        return results[0] ?? null;
    }
    async searchTx(query, filter = {}) {
        const minHeight = filter.minHeight || 0;
        const maxHeight = filter.maxHeight || Number.MAX_SAFE_INTEGER;
        if (maxHeight < minHeight)
            return []; // optional optimization
        function withFilters(originalQuery) {
            return `${originalQuery} AND tx.height>=${minHeight} AND tx.height<=${maxHeight}`;
        }
        let txs;
        if ((0, search_1.isSearchByHeightQuery)(query)) {
            txs =
                query.height >= minHeight && query.height <= maxHeight
                    ? await this.txsQuery(`tx.height=${query.height}`)
                    : [];
        }
        else if ((0, search_1.isSearchBySentFromOrToQuery)(query)) {
            const sentQuery = withFilters(`message.module='bank' AND transfer.sender='${query.sentFromOrTo}'`);
            const receivedQuery = withFilters(`message.module='bank' AND transfer.recipient='${query.sentFromOrTo}'`);
            const [sent, received] = await Promise.all([sentQuery, receivedQuery].map((rawQuery) => this.txsQuery(rawQuery)));
            const sentHashes = sent.map((t) => t.hash);
            txs = [...sent, ...received.filter((t) => !sentHashes.includes(t.hash))];
        }
        else if ((0, search_1.isSearchByTagsQuery)(query)) {
            const rawQuery = withFilters(query.tags.map((t) => `${t.key}='${t.value}'`).join(" AND "));
            txs = await this.txsQuery(rawQuery);
        }
        else {
            throw new Error("Unknown query type");
        }
        const filtered = txs.filter((tx) => tx.height >= minHeight && tx.height <= maxHeight);
        return filtered;
    }
    disconnect() {
        if (this.tmClient)
            this.tmClient.disconnect();
    }
    /**
     * Broadcasts a signed transaction to the network and monitors its inclusion in a block.
     *
     * If broadcasting is rejected by the node for some reason (e.g. because of a CheckTx failure),
     * an error is thrown.
     *
     * If the transaction is not included in a block before the provided timeout, this errors with a `TimeoutError`.
     *
     * If the transaction is included in a block, a `DeliverTxResponse` is returned. The caller then
     * usually needs to check for execution success or failure.
     */
    async broadcastTx(tx, timeoutMs = 60000, pollIntervalMs = 3000) {
        let timedOut = false;
        const txPollTimeout = setTimeout(() => {
            timedOut = true;
        }, timeoutMs);
        const pollForTx = async (txId) => {
            if (timedOut) {
                throw new TimeoutError(`Transaction with ID ${txId} was submitted but was not yet found on the chain. You might want to check later. There was a wait of ${timeoutMs / 1000} seconds.`, txId);
            }
            await (0, utils_1.sleep)(pollIntervalMs);
            const result = await this.getTx(txId);
            return result
                ? {
                    code: result.code,
                    height: result.height,
                    txIndex: result.txIndex,
                    events: result.events,
                    rawLog: result.rawLog,
                    transactionHash: txId,
                    gasUsed: result.gasUsed,
                    gasWanted: result.gasWanted,
                }
                : pollForTx(txId);
        };
        const broadcasted = await this.forceGetTmClient().broadcastTxSync({ tx });
        if (broadcasted.code) {
            return Promise.reject(new BroadcastTxError(broadcasted.code, broadcasted.codespace ?? "", broadcasted.log));
        }
        const transactionId = (0, encoding_1.toHex)(broadcasted.hash).toUpperCase();
        return new Promise((resolve, reject) => pollForTx(transactionId).then((value) => {
            clearTimeout(txPollTimeout);
            resolve(value);
        }, (error) => {
            clearTimeout(txPollTimeout);
            reject(error);
        }));
    }
    async txsQuery(query) {
        const results = await this.forceGetTmClient().txSearchAll({ query: query });
        return results.txs.map((tx) => {
            return {
                height: tx.height,
                txIndex: tx.index,
                hash: (0, encoding_1.toHex)(tx.hash).toUpperCase(),
                code: tx.result.code,
                events: tx.result.events.map(events_1.fromTendermintEvent),
                rawLog: tx.result.log || "",
                tx: tx.tx,
                gasUsed: tx.result.gasUsed,
                gasWanted: tx.result.gasWanted,
            };
        });
    }
}
stargateclient.StargateClient = StargateClient;

(function (exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SigningStargateClient = exports.createDefaultAminoConverters = exports.defaultRegistryTypes = void 0;
	const amino_1 = build$8;
	const encoding_1 = build$6;
	const math_1 = build$a;
	const proto_signing_1 = build$9;
	const tendermint_rpc_1 = build$2;
	const utils_1 = build$5;
	const coin_1 = coin$1;
	const tx_1 = tx$b;
	const tx_2 = tx$4;
	const signing_1 = signing$1;
	const tx_3 = tx$e;
	const tx_4 = tx$8;
	const long_1 = __importDefault(long);
	const aminotypes_1 = aminotypes;
	const fee_1 = fee;
	const modules_1 = modules;
	const modules_2 = modules;
	const stargateclient_1 = stargateclient;
	exports.defaultRegistryTypes = [
	    ["/cosmos.base.v1beta1.Coin", coin_1.Coin],
	    ...modules_1.authzTypes,
	    ...modules_1.bankTypes,
	    ...modules_1.distributionTypes,
	    ...modules_1.feegrantTypes,
	    ...modules_1.govTypes,
	    ...modules_1.stakingTypes,
	    ...modules_1.ibcTypes,
	    ...modules_1.vestingTypes,
	];
	function createDefaultAminoConverters() {
	    return {
	        ...(0, modules_2.createAuthzAminoConverters)(),
	        ...(0, modules_2.createBankAminoConverters)(),
	        ...(0, modules_2.createDistributionAminoConverters)(),
	        ...(0, modules_2.createGovAminoConverters)(),
	        ...(0, modules_2.createStakingAminoConverters)(),
	        ...(0, modules_2.createIbcAminoConverters)(),
	        ...(0, modules_2.createFeegrantAminoConverters)(),
	        ...(0, modules_2.createVestingAminoConverters)(),
	    };
	}
	exports.createDefaultAminoConverters = createDefaultAminoConverters;
	class SigningStargateClient extends stargateclient_1.StargateClient {
	    constructor(tmClient, signer, options) {
	        super(tmClient, options);
	        const { registry = new proto_signing_1.Registry(exports.defaultRegistryTypes), aminoTypes = new aminotypes_1.AminoTypes(createDefaultAminoConverters()), } = options;
	        this.registry = registry;
	        this.aminoTypes = aminoTypes;
	        this.signer = signer;
	        this.broadcastTimeoutMs = options.broadcastTimeoutMs;
	        this.broadcastPollIntervalMs = options.broadcastPollIntervalMs;
	        this.gasPrice = options.gasPrice;
	    }
	    /**
	     * Creates an instance by connecting to the given Tendermint RPC endpoint.
	     *
	     * For now this uses the Tendermint 0.34 client. If you need Tendermint 0.37
	     * support, see `createWithSigner`.
	     */
	    static async connectWithSigner(endpoint, signer, options = {}) {
	        const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);
	        return SigningStargateClient.createWithSigner(tmClient, signer, options);
	    }
	    /**
	     * Creates an instance from a manually created Tendermint client.
	     * Use this to use `Tendermint37Client` instead of `Tendermint34Client`.
	     */
	    static async createWithSigner(tmClient, signer, options = {}) {
	        return new SigningStargateClient(tmClient, signer, options);
	    }
	    /**
	     * Creates a client in offline mode.
	     *
	     * This should only be used in niche cases where you know exactly what you're doing,
	     * e.g. when building an offline signing application.
	     *
	     * When you try to use online functionality with such a signer, an
	     * exception will be raised.
	     */
	    static async offline(signer, options = {}) {
	        return new SigningStargateClient(undefined, signer, options);
	    }
	    async simulate(signerAddress, messages, memo) {
	        const anyMsgs = messages.map((m) => this.registry.encodeAsAny(m));
	        const accountFromSigner = (await this.signer.getAccounts()).find((account) => account.address === signerAddress);
	        if (!accountFromSigner) {
	            throw new Error("Failed to retrieve account from signer");
	        }
	        const pubkey = (0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey);
	        const { sequence } = await this.getSequence(signerAddress);
	        const { gasInfo } = await this.forceGetQueryClient().tx.simulate(anyMsgs, memo, pubkey, sequence);
	        (0, utils_1.assertDefined)(gasInfo);
	        return math_1.Uint53.fromString(gasInfo.gasUsed.toString()).toNumber();
	    }
	    async sendTokens(senderAddress, recipientAddress, amount, fee, memo = "") {
	        const sendMsg = {
	            typeUrl: "/cosmos.bank.v1beta1.MsgSend",
	            value: {
	                fromAddress: senderAddress,
	                toAddress: recipientAddress,
	                amount: [...amount],
	            },
	        };
	        return this.signAndBroadcast(senderAddress, [sendMsg], fee, memo);
	    }
	    async delegateTokens(delegatorAddress, validatorAddress, amount, fee, memo = "") {
	        const delegateMsg = {
	            typeUrl: "/cosmos.staking.v1beta1.MsgDelegate",
	            value: tx_2.MsgDelegate.fromPartial({
	                delegatorAddress: delegatorAddress,
	                validatorAddress: validatorAddress,
	                amount: amount,
	            }),
	        };
	        return this.signAndBroadcast(delegatorAddress, [delegateMsg], fee, memo);
	    }
	    async undelegateTokens(delegatorAddress, validatorAddress, amount, fee, memo = "") {
	        const undelegateMsg = {
	            typeUrl: "/cosmos.staking.v1beta1.MsgUndelegate",
	            value: tx_2.MsgUndelegate.fromPartial({
	                delegatorAddress: delegatorAddress,
	                validatorAddress: validatorAddress,
	                amount: amount,
	            }),
	        };
	        return this.signAndBroadcast(delegatorAddress, [undelegateMsg], fee, memo);
	    }
	    async withdrawRewards(delegatorAddress, validatorAddress, fee, memo = "") {
	        const withdrawMsg = {
	            typeUrl: "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward",
	            value: tx_1.MsgWithdrawDelegatorReward.fromPartial({
	                delegatorAddress: delegatorAddress,
	                validatorAddress: validatorAddress,
	            }),
	        };
	        return this.signAndBroadcast(delegatorAddress, [withdrawMsg], fee, memo);
	    }
	    async sendIbcTokens(senderAddress, recipientAddress, transferAmount, sourcePort, sourceChannel, timeoutHeight, 
	    /** timeout in seconds */
	    timeoutTimestamp, fee, memo = "") {
	        const timeoutTimestampNanoseconds = timeoutTimestamp
	            ? long_1.default.fromNumber(timeoutTimestamp).multiply(1000000000)
	            : undefined;
	        const transferMsg = {
	            typeUrl: "/ibc.applications.transfer.v1.MsgTransfer",
	            value: tx_4.MsgTransfer.fromPartial({
	                sourcePort: sourcePort,
	                sourceChannel: sourceChannel,
	                sender: senderAddress,
	                receiver: recipientAddress,
	                token: transferAmount,
	                timeoutHeight: timeoutHeight,
	                timeoutTimestamp: timeoutTimestampNanoseconds,
	            }),
	        };
	        return this.signAndBroadcast(senderAddress, [transferMsg], fee, memo);
	    }
	    async signAndBroadcast(signerAddress, messages, fee, memo = "") {
	        let usedFee;
	        if (fee == "auto" || typeof fee === "number") {
	            (0, utils_1.assertDefined)(this.gasPrice, "Gas price must be set in the client options when auto gas is used.");
	            const gasEstimation = await this.simulate(signerAddress, messages, memo);
	            const multiplier = typeof fee === "number" ? fee : 1.3;
	            usedFee = (0, fee_1.calculateFee)(Math.round(gasEstimation * multiplier), this.gasPrice);
	        }
	        else {
	            usedFee = fee;
	        }
	        const txRaw = await this.sign(signerAddress, messages, usedFee, memo);
	        const txBytes = tx_3.TxRaw.encode(txRaw).finish();
	        return this.broadcastTx(txBytes, this.broadcastTimeoutMs, this.broadcastPollIntervalMs);
	    }
	    /**
	     * Gets account number and sequence from the API, creates a sign doc,
	     * creates a single signature and assembles the signed transaction.
	     *
	     * The sign mode (SIGN_MODE_DIRECT or SIGN_MODE_LEGACY_AMINO_JSON) is determined by this client's signer.
	     *
	     * You can pass signer data (account number, sequence and chain ID) explicitly instead of querying them
	     * from the chain. This is needed when signing for a multisig account, but it also allows for offline signing
	     * (See the SigningStargateClient.offline constructor).
	     */
	    async sign(signerAddress, messages, fee, memo, explicitSignerData) {
	        let signerData;
	        if (explicitSignerData) {
	            signerData = explicitSignerData;
	        }
	        else {
	            const { accountNumber, sequence } = await this.getSequence(signerAddress);
	            const chainId = await this.getChainId();
	            signerData = {
	                accountNumber: accountNumber,
	                sequence: sequence,
	                chainId: chainId,
	            };
	        }
	        return (0, proto_signing_1.isOfflineDirectSigner)(this.signer)
	            ? this.signDirect(signerAddress, messages, fee, memo, signerData)
	            : this.signAmino(signerAddress, messages, fee, memo, signerData);
	    }
	    async signAmino(signerAddress, messages, fee, memo, { accountNumber, sequence, chainId }) {
	        (0, utils_1.assert)(!(0, proto_signing_1.isOfflineDirectSigner)(this.signer));
	        const accountFromSigner = (await this.signer.getAccounts()).find((account) => account.address === signerAddress);
	        if (!accountFromSigner) {
	            throw new Error("Failed to retrieve account from signer");
	        }
	        const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));
	        const signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;
	        const msgs = messages.map((msg) => this.aminoTypes.toAmino(msg));
	        const signDoc = (0, amino_1.makeSignDoc)(msgs, fee, chainId, memo, accountNumber, sequence);
	        const { signature, signed } = await this.signer.signAmino(signerAddress, signDoc);
	        const signedTxBody = {
	            messages: signed.msgs.map((msg) => this.aminoTypes.fromAmino(msg)),
	            memo: signed.memo,
	        };
	        const signedTxBodyEncodeObject = {
	            typeUrl: "/cosmos.tx.v1beta1.TxBody",
	            value: signedTxBody,
	        };
	        const signedTxBodyBytes = this.registry.encode(signedTxBodyEncodeObject);
	        const signedGasLimit = math_1.Int53.fromString(signed.fee.gas).toNumber();
	        const signedSequence = math_1.Int53.fromString(signed.sequence).toNumber();
	        const signedAuthInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{ pubkey, sequence: signedSequence }], signed.fee.amount, signedGasLimit, signed.fee.granter, signed.fee.payer, signMode);
	        return tx_3.TxRaw.fromPartial({
	            bodyBytes: signedTxBodyBytes,
	            authInfoBytes: signedAuthInfoBytes,
	            signatures: [(0, encoding_1.fromBase64)(signature.signature)],
	        });
	    }
	    async signDirect(signerAddress, messages, fee, memo, { accountNumber, sequence, chainId }) {
	        (0, utils_1.assert)((0, proto_signing_1.isOfflineDirectSigner)(this.signer));
	        const accountFromSigner = (await this.signer.getAccounts()).find((account) => account.address === signerAddress);
	        if (!accountFromSigner) {
	            throw new Error("Failed to retrieve account from signer");
	        }
	        const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));
	        const txBodyEncodeObject = {
	            typeUrl: "/cosmos.tx.v1beta1.TxBody",
	            value: {
	                messages: messages,
	                memo: memo,
	            },
	        };
	        const txBodyBytes = this.registry.encode(txBodyEncodeObject);
	        const gasLimit = math_1.Int53.fromString(fee.gas).toNumber();
	        const authInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{ pubkey, sequence }], fee.amount, gasLimit, fee.granter, fee.payer);
	        const signDoc = (0, proto_signing_1.makeSignDoc)(txBodyBytes, authInfoBytes, chainId, accountNumber);
	        const { signature, signed } = await this.signer.signDirect(signerAddress, signDoc);
	        return tx_3.TxRaw.fromPartial({
	            bodyBytes: signed.bodyBytes,
	            authInfoBytes: signed.authInfoBytes,
	            signatures: [(0, encoding_1.fromBase64)(signature.signature)],
	        });
	    }
	}
	exports.SigningStargateClient = SigningStargateClient;
	
} (signingstargateclient));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.setupAuthExtension = exports.isMsgWithdrawDelegatorRewardEncodeObject = exports.isMsgVoteWeightedEncodeObject = exports.isMsgVoteEncodeObject = exports.isMsgUndelegateEncodeObject = exports.isMsgTransferEncodeObject = exports.isMsgSubmitProposalEncodeObject = exports.isMsgSendEncodeObject = exports.isMsgEditValidatorEncodeObject = exports.isMsgDepositEncodeObject = exports.isMsgDelegateEncodeObject = exports.isMsgCreateValidatorEncodeObject = exports.isMsgBeginRedelegateEncodeObject = exports.isAminoMsgWithdrawValidatorCommission = exports.isAminoMsgWithdrawDelegatorReward = exports.isAminoMsgVoteWeighted = exports.isAminoMsgVote = exports.isAminoMsgVerifyInvariant = exports.isAminoMsgUnjail = exports.isAminoMsgUndelegate = exports.isAminoMsgTransfer = exports.isAminoMsgSubmitProposal = exports.isAminoMsgSubmitEvidence = exports.isAminoMsgSetWithdrawAddress = exports.isAminoMsgSend = exports.isAminoMsgMultiSend = exports.isAminoMsgFundCommunityPool = exports.isAminoMsgEditValidator = exports.isAminoMsgDeposit = exports.isAminoMsgDelegate = exports.isAminoMsgCreateVestingAccount = exports.isAminoMsgCreateValidator = exports.isAminoMsgBeginRedelegate = exports.createVestingAminoConverters = exports.createStakingAminoConverters = exports.createSlashingAminoConverters = exports.createIbcAminoConverters = exports.createGovAminoConverters = exports.createFeegrantAminoConverters = exports.createEvidenceAminoConverters = exports.createDistributionAminoConverters = exports.createCrysisAminoConverters = exports.createBankAminoConverters = exports.createAuthzAminoConverters = exports.logs = exports.GasPrice = exports.calculateFee = exports.fromTendermintEvent = exports.AminoTypes = exports.accountFromAny = void 0;
	exports.parseCoins = exports.makeCosmoshubPath = exports.coins = exports.coin = exports.TimeoutError = exports.StargateClient = exports.isDeliverTxSuccess = exports.isDeliverTxFailure = exports.BroadcastTxError = exports.assertIsDeliverTxSuccess = exports.assertIsDeliverTxFailure = exports.SigningStargateClient = exports.defaultRegistryTypes = exports.createDefaultAminoConverters = exports.isSearchByTagsQuery = exports.isSearchBySentFromOrToQuery = exports.isSearchByHeightQuery = exports.QueryClient = exports.decodeCosmosSdkDecFromProto = exports.createProtobufRpcClient = exports.createPagination = exports.makeMultisignedTxBytes = exports.makeMultisignedTx = exports.setupTxExtension = exports.setupStakingExtension = exports.setupSlashingExtension = exports.setupMintExtension = exports.setupIbcExtension = exports.setupGovExtension = exports.setupFeegrantExtension = exports.setupDistributionExtension = exports.setupBankExtension = exports.setupAuthzExtension = void 0;
	var accounts_1 = accounts;
	Object.defineProperty(exports, "accountFromAny", { enumerable: true, get: function () { return accounts_1.accountFromAny; } });
	var aminotypes_1 = aminotypes;
	Object.defineProperty(exports, "AminoTypes", { enumerable: true, get: function () { return aminotypes_1.AminoTypes; } });
	var events_1 = events;
	Object.defineProperty(exports, "fromTendermintEvent", { enumerable: true, get: function () { return events_1.fromTendermintEvent; } });
	var fee_1 = fee;
	Object.defineProperty(exports, "calculateFee", { enumerable: true, get: function () { return fee_1.calculateFee; } });
	Object.defineProperty(exports, "GasPrice", { enumerable: true, get: function () { return fee_1.GasPrice; } });
	exports.logs = __importStar(logs);
	var modules_1 = modules;
	Object.defineProperty(exports, "createAuthzAminoConverters", { enumerable: true, get: function () { return modules_1.createAuthzAminoConverters; } });
	Object.defineProperty(exports, "createBankAminoConverters", { enumerable: true, get: function () { return modules_1.createBankAminoConverters; } });
	Object.defineProperty(exports, "createCrysisAminoConverters", { enumerable: true, get: function () { return modules_1.createCrysisAminoConverters; } });
	Object.defineProperty(exports, "createDistributionAminoConverters", { enumerable: true, get: function () { return modules_1.createDistributionAminoConverters; } });
	Object.defineProperty(exports, "createEvidenceAminoConverters", { enumerable: true, get: function () { return modules_1.createEvidenceAminoConverters; } });
	Object.defineProperty(exports, "createFeegrantAminoConverters", { enumerable: true, get: function () { return modules_1.createFeegrantAminoConverters; } });
	Object.defineProperty(exports, "createGovAminoConverters", { enumerable: true, get: function () { return modules_1.createGovAminoConverters; } });
	Object.defineProperty(exports, "createIbcAminoConverters", { enumerable: true, get: function () { return modules_1.createIbcAminoConverters; } });
	Object.defineProperty(exports, "createSlashingAminoConverters", { enumerable: true, get: function () { return modules_1.createSlashingAminoConverters; } });
	Object.defineProperty(exports, "createStakingAminoConverters", { enumerable: true, get: function () { return modules_1.createStakingAminoConverters; } });
	Object.defineProperty(exports, "createVestingAminoConverters", { enumerable: true, get: function () { return modules_1.createVestingAminoConverters; } });
	Object.defineProperty(exports, "isAminoMsgBeginRedelegate", { enumerable: true, get: function () { return modules_1.isAminoMsgBeginRedelegate; } });
	Object.defineProperty(exports, "isAminoMsgCreateValidator", { enumerable: true, get: function () { return modules_1.isAminoMsgCreateValidator; } });
	Object.defineProperty(exports, "isAminoMsgCreateVestingAccount", { enumerable: true, get: function () { return modules_1.isAminoMsgCreateVestingAccount; } });
	Object.defineProperty(exports, "isAminoMsgDelegate", { enumerable: true, get: function () { return modules_1.isAminoMsgDelegate; } });
	Object.defineProperty(exports, "isAminoMsgDeposit", { enumerable: true, get: function () { return modules_1.isAminoMsgDeposit; } });
	Object.defineProperty(exports, "isAminoMsgEditValidator", { enumerable: true, get: function () { return modules_1.isAminoMsgEditValidator; } });
	Object.defineProperty(exports, "isAminoMsgFundCommunityPool", { enumerable: true, get: function () { return modules_1.isAminoMsgFundCommunityPool; } });
	Object.defineProperty(exports, "isAminoMsgMultiSend", { enumerable: true, get: function () { return modules_1.isAminoMsgMultiSend; } });
	Object.defineProperty(exports, "isAminoMsgSend", { enumerable: true, get: function () { return modules_1.isAminoMsgSend; } });
	Object.defineProperty(exports, "isAminoMsgSetWithdrawAddress", { enumerable: true, get: function () { return modules_1.isAminoMsgSetWithdrawAddress; } });
	Object.defineProperty(exports, "isAminoMsgSubmitEvidence", { enumerable: true, get: function () { return modules_1.isAminoMsgSubmitEvidence; } });
	Object.defineProperty(exports, "isAminoMsgSubmitProposal", { enumerable: true, get: function () { return modules_1.isAminoMsgSubmitProposal; } });
	Object.defineProperty(exports, "isAminoMsgTransfer", { enumerable: true, get: function () { return modules_1.isAminoMsgTransfer; } });
	Object.defineProperty(exports, "isAminoMsgUndelegate", { enumerable: true, get: function () { return modules_1.isAminoMsgUndelegate; } });
	Object.defineProperty(exports, "isAminoMsgUnjail", { enumerable: true, get: function () { return modules_1.isAminoMsgUnjail; } });
	Object.defineProperty(exports, "isAminoMsgVerifyInvariant", { enumerable: true, get: function () { return modules_1.isAminoMsgVerifyInvariant; } });
	Object.defineProperty(exports, "isAminoMsgVote", { enumerable: true, get: function () { return modules_1.isAminoMsgVote; } });
	Object.defineProperty(exports, "isAminoMsgVoteWeighted", { enumerable: true, get: function () { return modules_1.isAminoMsgVoteWeighted; } });
	Object.defineProperty(exports, "isAminoMsgWithdrawDelegatorReward", { enumerable: true, get: function () { return modules_1.isAminoMsgWithdrawDelegatorReward; } });
	Object.defineProperty(exports, "isAminoMsgWithdrawValidatorCommission", { enumerable: true, get: function () { return modules_1.isAminoMsgWithdrawValidatorCommission; } });
	Object.defineProperty(exports, "isMsgBeginRedelegateEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgBeginRedelegateEncodeObject; } });
	Object.defineProperty(exports, "isMsgCreateValidatorEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgCreateValidatorEncodeObject; } });
	Object.defineProperty(exports, "isMsgDelegateEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgDelegateEncodeObject; } });
	Object.defineProperty(exports, "isMsgDepositEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgDepositEncodeObject; } });
	Object.defineProperty(exports, "isMsgEditValidatorEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgEditValidatorEncodeObject; } });
	Object.defineProperty(exports, "isMsgSendEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgSendEncodeObject; } });
	Object.defineProperty(exports, "isMsgSubmitProposalEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgSubmitProposalEncodeObject; } });
	Object.defineProperty(exports, "isMsgTransferEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgTransferEncodeObject; } });
	Object.defineProperty(exports, "isMsgUndelegateEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgUndelegateEncodeObject; } });
	Object.defineProperty(exports, "isMsgVoteEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgVoteEncodeObject; } });
	Object.defineProperty(exports, "isMsgVoteWeightedEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgVoteWeightedEncodeObject; } });
	Object.defineProperty(exports, "isMsgWithdrawDelegatorRewardEncodeObject", { enumerable: true, get: function () { return modules_1.isMsgWithdrawDelegatorRewardEncodeObject; } });
	Object.defineProperty(exports, "setupAuthExtension", { enumerable: true, get: function () { return modules_1.setupAuthExtension; } });
	Object.defineProperty(exports, "setupAuthzExtension", { enumerable: true, get: function () { return modules_1.setupAuthzExtension; } });
	Object.defineProperty(exports, "setupBankExtension", { enumerable: true, get: function () { return modules_1.setupBankExtension; } });
	Object.defineProperty(exports, "setupDistributionExtension", { enumerable: true, get: function () { return modules_1.setupDistributionExtension; } });
	Object.defineProperty(exports, "setupFeegrantExtension", { enumerable: true, get: function () { return modules_1.setupFeegrantExtension; } });
	Object.defineProperty(exports, "setupGovExtension", { enumerable: true, get: function () { return modules_1.setupGovExtension; } });
	Object.defineProperty(exports, "setupIbcExtension", { enumerable: true, get: function () { return modules_1.setupIbcExtension; } });
	Object.defineProperty(exports, "setupMintExtension", { enumerable: true, get: function () { return modules_1.setupMintExtension; } });
	Object.defineProperty(exports, "setupSlashingExtension", { enumerable: true, get: function () { return modules_1.setupSlashingExtension; } });
	Object.defineProperty(exports, "setupStakingExtension", { enumerable: true, get: function () { return modules_1.setupStakingExtension; } });
	Object.defineProperty(exports, "setupTxExtension", { enumerable: true, get: function () { return modules_1.setupTxExtension; } });
	var multisignature_1 = multisignature;
	Object.defineProperty(exports, "makeMultisignedTx", { enumerable: true, get: function () { return multisignature_1.makeMultisignedTx; } });
	Object.defineProperty(exports, "makeMultisignedTxBytes", { enumerable: true, get: function () { return multisignature_1.makeMultisignedTxBytes; } });
	var queryclient_1 = queryclient$1;
	Object.defineProperty(exports, "createPagination", { enumerable: true, get: function () { return queryclient_1.createPagination; } });
	Object.defineProperty(exports, "createProtobufRpcClient", { enumerable: true, get: function () { return queryclient_1.createProtobufRpcClient; } });
	Object.defineProperty(exports, "decodeCosmosSdkDecFromProto", { enumerable: true, get: function () { return queryclient_1.decodeCosmosSdkDecFromProto; } });
	Object.defineProperty(exports, "QueryClient", { enumerable: true, get: function () { return queryclient_1.QueryClient; } });
	var search_1 = search;
	Object.defineProperty(exports, "isSearchByHeightQuery", { enumerable: true, get: function () { return search_1.isSearchByHeightQuery; } });
	Object.defineProperty(exports, "isSearchBySentFromOrToQuery", { enumerable: true, get: function () { return search_1.isSearchBySentFromOrToQuery; } });
	Object.defineProperty(exports, "isSearchByTagsQuery", { enumerable: true, get: function () { return search_1.isSearchByTagsQuery; } });
	var signingstargateclient_1 = signingstargateclient;
	Object.defineProperty(exports, "createDefaultAminoConverters", { enumerable: true, get: function () { return signingstargateclient_1.createDefaultAminoConverters; } });
	Object.defineProperty(exports, "defaultRegistryTypes", { enumerable: true, get: function () { return signingstargateclient_1.defaultRegistryTypes; } });
	Object.defineProperty(exports, "SigningStargateClient", { enumerable: true, get: function () { return signingstargateclient_1.SigningStargateClient; } });
	var stargateclient_1 = stargateclient;
	Object.defineProperty(exports, "assertIsDeliverTxFailure", { enumerable: true, get: function () { return stargateclient_1.assertIsDeliverTxFailure; } });
	Object.defineProperty(exports, "assertIsDeliverTxSuccess", { enumerable: true, get: function () { return stargateclient_1.assertIsDeliverTxSuccess; } });
	Object.defineProperty(exports, "BroadcastTxError", { enumerable: true, get: function () { return stargateclient_1.BroadcastTxError; } });
	Object.defineProperty(exports, "isDeliverTxFailure", { enumerable: true, get: function () { return stargateclient_1.isDeliverTxFailure; } });
	Object.defineProperty(exports, "isDeliverTxSuccess", { enumerable: true, get: function () { return stargateclient_1.isDeliverTxSuccess; } });
	Object.defineProperty(exports, "StargateClient", { enumerable: true, get: function () { return stargateclient_1.StargateClient; } });
	Object.defineProperty(exports, "TimeoutError", { enumerable: true, get: function () { return stargateclient_1.TimeoutError; } });
	var proto_signing_1 = build$9;
	Object.defineProperty(exports, "coin", { enumerable: true, get: function () { return proto_signing_1.coin; } });
	Object.defineProperty(exports, "coins", { enumerable: true, get: function () { return proto_signing_1.coins; } });
	Object.defineProperty(exports, "makeCosmoshubPath", { enumerable: true, get: function () { return proto_signing_1.makeCosmoshubPath; } });
	Object.defineProperty(exports, "parseCoins", { enumerable: true, get: function () { return proto_signing_1.parseCoins; } });
	
} (build$b));

var dist = {};

Object.defineProperty(dist, "__esModule", { value: true });
dist.bech32m = bech32 = dist.bech32 = void 0;
const ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';
const ALPHABET_MAP = {};
for (let z = 0; z < ALPHABET.length; z++) {
    const x = ALPHABET.charAt(z);
    ALPHABET_MAP[x] = z;
}
function polymodStep(pre) {
    const b = pre >> 25;
    return (((pre & 0x1ffffff) << 5) ^
        (-((b >> 0) & 1) & 0x3b6a57b2) ^
        (-((b >> 1) & 1) & 0x26508e6d) ^
        (-((b >> 2) & 1) & 0x1ea119fa) ^
        (-((b >> 3) & 1) & 0x3d4233dd) ^
        (-((b >> 4) & 1) & 0x2a1462b3));
}
function prefixChk(prefix) {
    let chk = 1;
    for (let i = 0; i < prefix.length; ++i) {
        const c = prefix.charCodeAt(i);
        if (c < 33 || c > 126)
            return 'Invalid prefix (' + prefix + ')';
        chk = polymodStep(chk) ^ (c >> 5);
    }
    chk = polymodStep(chk);
    for (let i = 0; i < prefix.length; ++i) {
        const v = prefix.charCodeAt(i);
        chk = polymodStep(chk) ^ (v & 0x1f);
    }
    return chk;
}
function convert(data, inBits, outBits, pad) {
    let value = 0;
    let bits = 0;
    const maxV = (1 << outBits) - 1;
    const result = [];
    for (let i = 0; i < data.length; ++i) {
        value = (value << inBits) | data[i];
        bits += inBits;
        while (bits >= outBits) {
            bits -= outBits;
            result.push((value >> bits) & maxV);
        }
    }
    if (pad) {
        if (bits > 0) {
            result.push((value << (outBits - bits)) & maxV);
        }
    }
    else {
        if (bits >= inBits)
            return 'Excess padding';
        if ((value << (outBits - bits)) & maxV)
            return 'Non-zero padding';
    }
    return result;
}
function toWords(bytes) {
    return convert(bytes, 8, 5, true);
}
function fromWordsUnsafe(words) {
    const res = convert(words, 5, 8, false);
    if (Array.isArray(res))
        return res;
}
function fromWords(words) {
    const res = convert(words, 5, 8, false);
    if (Array.isArray(res))
        return res;
    throw new Error(res);
}
function getLibraryFromEncoding(encoding) {
    let ENCODING_CONST;
    if (encoding === 'bech32') {
        ENCODING_CONST = 1;
    }
    else {
        ENCODING_CONST = 0x2bc830a3;
    }
    function encode(prefix, words, LIMIT) {
        LIMIT = LIMIT || 90;
        if (prefix.length + 7 + words.length > LIMIT)
            throw new TypeError('Exceeds length limit');
        prefix = prefix.toLowerCase();
        // determine chk mod
        let chk = prefixChk(prefix);
        if (typeof chk === 'string')
            throw new Error(chk);
        let result = prefix + '1';
        for (let i = 0; i < words.length; ++i) {
            const x = words[i];
            if (x >> 5 !== 0)
                throw new Error('Non 5-bit word');
            chk = polymodStep(chk) ^ x;
            result += ALPHABET.charAt(x);
        }
        for (let i = 0; i < 6; ++i) {
            chk = polymodStep(chk);
        }
        chk ^= ENCODING_CONST;
        for (let i = 0; i < 6; ++i) {
            const v = (chk >> ((5 - i) * 5)) & 0x1f;
            result += ALPHABET.charAt(v);
        }
        return result;
    }
    function __decode(str, LIMIT) {
        LIMIT = LIMIT || 90;
        if (str.length < 8)
            return str + ' too short';
        if (str.length > LIMIT)
            return 'Exceeds length limit';
        // don't allow mixed case
        const lowered = str.toLowerCase();
        const uppered = str.toUpperCase();
        if (str !== lowered && str !== uppered)
            return 'Mixed-case string ' + str;
        str = lowered;
        const split = str.lastIndexOf('1');
        if (split === -1)
            return 'No separator character for ' + str;
        if (split === 0)
            return 'Missing prefix for ' + str;
        const prefix = str.slice(0, split);
        const wordChars = str.slice(split + 1);
        if (wordChars.length < 6)
            return 'Data too short';
        let chk = prefixChk(prefix);
        if (typeof chk === 'string')
            return chk;
        const words = [];
        for (let i = 0; i < wordChars.length; ++i) {
            const c = wordChars.charAt(i);
            const v = ALPHABET_MAP[c];
            if (v === undefined)
                return 'Unknown character ' + c;
            chk = polymodStep(chk) ^ v;
            // not in the checksum?
            if (i + 6 >= wordChars.length)
                continue;
            words.push(v);
        }
        if (chk !== ENCODING_CONST)
            return 'Invalid checksum for ' + str;
        return { prefix, words };
    }
    function decodeUnsafe(str, LIMIT) {
        const res = __decode(str, LIMIT);
        if (typeof res === 'object')
            return res;
    }
    function decode(str, LIMIT) {
        const res = __decode(str, LIMIT);
        if (typeof res === 'object')
            return res;
        throw new Error(res);
    }
    return {
        decodeUnsafe,
        decode,
        encode,
        toWords,
        fromWordsUnsafe,
        fromWords,
    };
}
var bech32 = dist.bech32 = getLibraryFromEncoding('bech32');
dist.bech32m = getLibraryFromEncoding('bech32m');

/* eslint-disable */
function createBaseAny() {
    return { typeUrl: "", value: new Uint8Array() };
}
const Any = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.typeUrl !== "") {
            writer.uint32(10).string(message.typeUrl);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAny();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.typeUrl = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            typeUrl: isSet$f(object.typeUrl) ? String(object.typeUrl) : "",
            value: isSet$f(object.value) ? bytesFromBase64$1(object.value) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.typeUrl !== undefined && (obj.typeUrl = message.typeUrl);
        message.value !== undefined &&
            (obj.value = base64FromBytes$1(message.value !== undefined ? message.value : new Uint8Array()));
        return obj;
    },
    create(base) {
        return Any.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAny();
        message.typeUrl = (_a = object.typeUrl) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
var tsProtoGlobalThis$1 = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64$1(b64) {
    if (tsProtoGlobalThis$1.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis$1.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis$1.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes$1(arr) {
    if (tsProtoGlobalThis$1.Buffer) {
        return tsProtoGlobalThis$1.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis$1.btoa(bin.join(""));
    }
}
if (_m0$i.util.Long !== Long$1) {
    _m0$i.util.Long = Long$1;
    _m0$i.configure();
}
function isSet$f(value) {
    return value !== null && value !== undefined;
}

/* eslint-disable */
/** ClassFeature defines possible features of non-fungible token class. */
var ClassFeature;
(function (ClassFeature) {
    ClassFeature[ClassFeature["burning"] = 0] = "burning";
    ClassFeature[ClassFeature["freezing"] = 1] = "freezing";
    ClassFeature[ClassFeature["whitelisting"] = 2] = "whitelisting";
    ClassFeature[ClassFeature["disable_sending"] = 3] = "disable_sending";
    ClassFeature[ClassFeature["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ClassFeature || (ClassFeature = {}));
function classFeatureFromJSON(object) {
    switch (object) {
        case 0:
        case "burning":
            return ClassFeature.burning;
        case 1:
        case "freezing":
            return ClassFeature.freezing;
        case 2:
        case "whitelisting":
            return ClassFeature.whitelisting;
        case 3:
        case "disable_sending":
            return ClassFeature.disable_sending;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ClassFeature.UNRECOGNIZED;
    }
}
function classFeatureToJSON(object) {
    switch (object) {
        case ClassFeature.burning:
            return "burning";
        case ClassFeature.freezing:
            return "freezing";
        case ClassFeature.whitelisting:
            return "whitelisting";
        case ClassFeature.disable_sending:
            return "disable_sending";
        case ClassFeature.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseClass$1() {
    return {
        id: "",
        issuer: "",
        name: "",
        symbol: "",
        description: "",
        uri: "",
        uriHash: "",
        data: undefined,
        features: [],
        royaltyRate: "",
    };
}
const Class$1 = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.issuer !== "") {
            writer.uint32(18).string(message.issuer);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.symbol !== "") {
            writer.uint32(34).string(message.symbol);
        }
        if (message.description !== "") {
            writer.uint32(42).string(message.description);
        }
        if (message.uri !== "") {
            writer.uint32(50).string(message.uri);
        }
        if (message.uriHash !== "") {
            writer.uint32(58).string(message.uriHash);
        }
        if (message.data !== undefined) {
            Any.encode(message.data, writer.uint32(66).fork()).ldelim();
        }
        writer.uint32(74).fork();
        for (const v of message.features) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.royaltyRate !== "") {
            writer.uint32(82).string(message.royaltyRate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClass$1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag != 34) {
                        break;
                    }
                    message.symbol = reader.string();
                    continue;
                case 5:
                    if (tag != 42) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 6:
                    if (tag != 50) {
                        break;
                    }
                    message.uri = reader.string();
                    continue;
                case 7:
                    if (tag != 58) {
                        break;
                    }
                    message.uriHash = reader.string();
                    continue;
                case 8:
                    if (tag != 66) {
                        break;
                    }
                    message.data = Any.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag == 72) {
                        message.features.push(reader.int32());
                        continue;
                    }
                    if (tag == 74) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.features.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 10:
                    if (tag != 82) {
                        break;
                    }
                    message.royaltyRate = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet$e(object.id) ? String(object.id) : "",
            issuer: isSet$e(object.issuer) ? String(object.issuer) : "",
            name: isSet$e(object.name) ? String(object.name) : "",
            symbol: isSet$e(object.symbol) ? String(object.symbol) : "",
            description: isSet$e(object.description) ? String(object.description) : "",
            uri: isSet$e(object.uri) ? String(object.uri) : "",
            uriHash: isSet$e(object.uriHash) ? String(object.uriHash) : "",
            data: isSet$e(object.data) ? Any.fromJSON(object.data) : undefined,
            features: Array.isArray(object === null || object === void 0 ? void 0 : object.features)
                ? object.features.map((e) => classFeatureFromJSON(e))
                : [],
            royaltyRate: isSet$e(object.royaltyRate) ? String(object.royaltyRate) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.issuer !== undefined && (obj.issuer = message.issuer);
        message.name !== undefined && (obj.name = message.name);
        message.symbol !== undefined && (obj.symbol = message.symbol);
        message.description !== undefined &&
            (obj.description = message.description);
        message.uri !== undefined && (obj.uri = message.uri);
        message.uriHash !== undefined && (obj.uriHash = message.uriHash);
        message.data !== undefined &&
            (obj.data = message.data ? Any.toJSON(message.data) : undefined);
        if (message.features) {
            obj.features = message.features.map((e) => classFeatureToJSON(e));
        }
        else {
            obj.features = [];
        }
        message.royaltyRate !== undefined &&
            (obj.royaltyRate = message.royaltyRate);
        return obj;
    },
    create(base) {
        return Class$1.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseClass$1();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.issuer = (_b = object.issuer) !== null && _b !== void 0 ? _b : "";
        message.name = (_c = object.name) !== null && _c !== void 0 ? _c : "";
        message.symbol = (_d = object.symbol) !== null && _d !== void 0 ? _d : "";
        message.description = (_e = object.description) !== null && _e !== void 0 ? _e : "";
        message.uri = (_f = object.uri) !== null && _f !== void 0 ? _f : "";
        message.uriHash = (_g = object.uriHash) !== null && _g !== void 0 ? _g : "";
        message.data =
            object.data !== undefined && object.data !== null
                ? Any.fromPartial(object.data)
                : undefined;
        message.features = ((_h = object.features) === null || _h === void 0 ? void 0 : _h.map((e) => e)) || [];
        message.royaltyRate = (_j = object.royaltyRate) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
if (_m0$i.util.Long !== Long$1) {
    _m0$i.util.Long = Long$1;
    _m0$i.configure();
}
function isSet$e(value) {
    return value !== null && value !== undefined;
}

/* eslint-disable */
const protobufPackage$2 = "coreum.asset.nft.v1";
function createBaseMsgIssueClass() {
    return {
        issuer: "",
        symbol: "",
        name: "",
        description: "",
        uri: "",
        uriHash: "",
        data: undefined,
        features: [],
        royaltyRate: "",
    };
}
const MsgIssueClass = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.issuer !== "") {
            writer.uint32(10).string(message.issuer);
        }
        if (message.symbol !== "") {
            writer.uint32(18).string(message.symbol);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.uri !== "") {
            writer.uint32(42).string(message.uri);
        }
        if (message.uriHash !== "") {
            writer.uint32(50).string(message.uriHash);
        }
        if (message.data !== undefined) {
            Any.encode(message.data, writer.uint32(58).fork()).ldelim();
        }
        writer.uint32(66).fork();
        for (const v of message.features) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.royaltyRate !== "") {
            writer.uint32(74).string(message.royaltyRate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgIssueClass();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.symbol = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag != 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 5:
                    if (tag != 42) {
                        break;
                    }
                    message.uri = reader.string();
                    continue;
                case 6:
                    if (tag != 50) {
                        break;
                    }
                    message.uriHash = reader.string();
                    continue;
                case 7:
                    if (tag != 58) {
                        break;
                    }
                    message.data = Any.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag == 64) {
                        message.features.push(reader.int32());
                        continue;
                    }
                    if (tag == 66) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.features.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 9:
                    if (tag != 74) {
                        break;
                    }
                    message.royaltyRate = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            issuer: isSet$d(object.issuer) ? String(object.issuer) : "",
            symbol: isSet$d(object.symbol) ? String(object.symbol) : "",
            name: isSet$d(object.name) ? String(object.name) : "",
            description: isSet$d(object.description) ? String(object.description) : "",
            uri: isSet$d(object.uri) ? String(object.uri) : "",
            uriHash: isSet$d(object.uriHash) ? String(object.uriHash) : "",
            data: isSet$d(object.data) ? Any.fromJSON(object.data) : undefined,
            features: Array.isArray(object === null || object === void 0 ? void 0 : object.features)
                ? object.features.map((e) => classFeatureFromJSON(e))
                : [],
            royaltyRate: isSet$d(object.royaltyRate) ? String(object.royaltyRate) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.issuer !== undefined && (obj.issuer = message.issuer);
        message.symbol !== undefined && (obj.symbol = message.symbol);
        message.name !== undefined && (obj.name = message.name);
        message.description !== undefined &&
            (obj.description = message.description);
        message.uri !== undefined && (obj.uri = message.uri);
        message.uriHash !== undefined && (obj.uriHash = message.uriHash);
        message.data !== undefined &&
            (obj.data = message.data ? Any.toJSON(message.data) : undefined);
        if (message.features) {
            obj.features = message.features.map((e) => classFeatureToJSON(e));
        }
        else {
            obj.features = [];
        }
        message.royaltyRate !== undefined &&
            (obj.royaltyRate = message.royaltyRate);
        return obj;
    },
    create(base) {
        return MsgIssueClass.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseMsgIssueClass();
        message.issuer = (_a = object.issuer) !== null && _a !== void 0 ? _a : "";
        message.symbol = (_b = object.symbol) !== null && _b !== void 0 ? _b : "";
        message.name = (_c = object.name) !== null && _c !== void 0 ? _c : "";
        message.description = (_d = object.description) !== null && _d !== void 0 ? _d : "";
        message.uri = (_e = object.uri) !== null && _e !== void 0 ? _e : "";
        message.uriHash = (_f = object.uriHash) !== null && _f !== void 0 ? _f : "";
        message.data =
            object.data !== undefined && object.data !== null
                ? Any.fromPartial(object.data)
                : undefined;
        message.features = ((_g = object.features) === null || _g === void 0 ? void 0 : _g.map((e) => e)) || [];
        message.royaltyRate = (_h = object.royaltyRate) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseMsgMint$1() {
    return {
        sender: "",
        classId: "",
        id: "",
        uri: "",
        uriHash: "",
        data: undefined,
    };
}
const MsgMint$1 = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        if (message.uri !== "") {
            writer.uint32(34).string(message.uri);
        }
        if (message.uriHash !== "") {
            writer.uint32(42).string(message.uriHash);
        }
        if (message.data !== undefined) {
            Any.encode(message.data, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgMint$1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 4:
                    if (tag != 34) {
                        break;
                    }
                    message.uri = reader.string();
                    continue;
                case 5:
                    if (tag != 42) {
                        break;
                    }
                    message.uriHash = reader.string();
                    continue;
                case 6:
                    if (tag != 50) {
                        break;
                    }
                    message.data = Any.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet$d(object.sender) ? String(object.sender) : "",
            classId: isSet$d(object.classId) ? String(object.classId) : "",
            id: isSet$d(object.id) ? String(object.id) : "",
            uri: isSet$d(object.uri) ? String(object.uri) : "",
            uriHash: isSet$d(object.uriHash) ? String(object.uriHash) : "",
            data: isSet$d(object.data) ? Any.fromJSON(object.data) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.classId !== undefined && (obj.classId = message.classId);
        message.id !== undefined && (obj.id = message.id);
        message.uri !== undefined && (obj.uri = message.uri);
        message.uriHash !== undefined && (obj.uriHash = message.uriHash);
        message.data !== undefined &&
            (obj.data = message.data ? Any.toJSON(message.data) : undefined);
        return obj;
    },
    create(base) {
        return MsgMint$1.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseMsgMint$1();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.classId = (_b = object.classId) !== null && _b !== void 0 ? _b : "";
        message.id = (_c = object.id) !== null && _c !== void 0 ? _c : "";
        message.uri = (_d = object.uri) !== null && _d !== void 0 ? _d : "";
        message.uriHash = (_e = object.uriHash) !== null && _e !== void 0 ? _e : "";
        message.data =
            object.data !== undefined && object.data !== null
                ? Any.fromPartial(object.data)
                : undefined;
        return message;
    },
};
function createBaseMsgBurn$1() {
    return { sender: "", classId: "", id: "" };
}
const MsgBurn$1 = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgBurn$1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet$d(object.sender) ? String(object.sender) : "",
            classId: isSet$d(object.classId) ? String(object.classId) : "",
            id: isSet$d(object.id) ? String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.classId !== undefined && (obj.classId = message.classId);
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    create(base) {
        return MsgBurn$1.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgBurn$1();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.classId = (_b = object.classId) !== null && _b !== void 0 ? _b : "";
        message.id = (_c = object.id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseMsgFreeze$1() {
    return { sender: "", classId: "", id: "" };
}
const MsgFreeze$1 = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgFreeze$1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet$d(object.sender) ? String(object.sender) : "",
            classId: isSet$d(object.classId) ? String(object.classId) : "",
            id: isSet$d(object.id) ? String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.classId !== undefined && (obj.classId = message.classId);
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    create(base) {
        return MsgFreeze$1.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgFreeze$1();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.classId = (_b = object.classId) !== null && _b !== void 0 ? _b : "";
        message.id = (_c = object.id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseMsgUnfreeze$1() {
    return { sender: "", classId: "", id: "" };
}
const MsgUnfreeze$1 = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUnfreeze$1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet$d(object.sender) ? String(object.sender) : "",
            classId: isSet$d(object.classId) ? String(object.classId) : "",
            id: isSet$d(object.id) ? String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.classId !== undefined && (obj.classId = message.classId);
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    create(base) {
        return MsgUnfreeze$1.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgUnfreeze$1();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.classId = (_b = object.classId) !== null && _b !== void 0 ? _b : "";
        message.id = (_c = object.id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseMsgAddToWhitelist() {
    return { sender: "", classId: "", id: "", account: "" };
}
const MsgAddToWhitelist = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        if (message.account !== "") {
            writer.uint32(34).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAddToWhitelist();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 4:
                    if (tag != 34) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet$d(object.sender) ? String(object.sender) : "",
            classId: isSet$d(object.classId) ? String(object.classId) : "",
            id: isSet$d(object.id) ? String(object.id) : "",
            account: isSet$d(object.account) ? String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.classId !== undefined && (obj.classId = message.classId);
        message.id !== undefined && (obj.id = message.id);
        message.account !== undefined && (obj.account = message.account);
        return obj;
    },
    create(base) {
        return MsgAddToWhitelist.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgAddToWhitelist();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.classId = (_b = object.classId) !== null && _b !== void 0 ? _b : "";
        message.id = (_c = object.id) !== null && _c !== void 0 ? _c : "";
        message.account = (_d = object.account) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseMsgRemoveFromWhitelist() {
    return { sender: "", classId: "", id: "", account: "" };
}
const MsgRemoveFromWhitelist = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        if (message.account !== "") {
            writer.uint32(34).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRemoveFromWhitelist();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 4:
                    if (tag != 34) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet$d(object.sender) ? String(object.sender) : "",
            classId: isSet$d(object.classId) ? String(object.classId) : "",
            id: isSet$d(object.id) ? String(object.id) : "",
            account: isSet$d(object.account) ? String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.classId !== undefined && (obj.classId = message.classId);
        message.id !== undefined && (obj.id = message.id);
        message.account !== undefined && (obj.account = message.account);
        return obj;
    },
    create(base) {
        return MsgRemoveFromWhitelist.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgRemoveFromWhitelist();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.classId = (_b = object.classId) !== null && _b !== void 0 ? _b : "";
        message.id = (_c = object.id) !== null && _c !== void 0 ? _c : "";
        message.account = (_d = object.account) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseEmptyResponse$1() {
    return {};
}
const EmptyResponse$1 = {
    encode(_, writer = _m0$i.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEmptyResponse$1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return EmptyResponse$1.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseEmptyResponse$1();
        return message;
    },
};
let MsgClientImpl$2 = class MsgClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || "coreum.asset.nft.v1.Msg";
        this.rpc = rpc;
        this.IssueClass = this.IssueClass.bind(this);
        this.Mint = this.Mint.bind(this);
        this.Burn = this.Burn.bind(this);
        this.Freeze = this.Freeze.bind(this);
        this.Unfreeze = this.Unfreeze.bind(this);
        this.AddToWhitelist = this.AddToWhitelist.bind(this);
        this.RemoveFromWhitelist = this.RemoveFromWhitelist.bind(this);
    }
    IssueClass(request) {
        const data = MsgIssueClass.encode(request).finish();
        const promise = this.rpc.request(this.service, "IssueClass", data);
        return promise.then((data) => EmptyResponse$1.decode(_m0$i.Reader.create(data)));
    }
    Mint(request) {
        const data = MsgMint$1.encode(request).finish();
        const promise = this.rpc.request(this.service, "Mint", data);
        return promise.then((data) => EmptyResponse$1.decode(_m0$i.Reader.create(data)));
    }
    Burn(request) {
        const data = MsgBurn$1.encode(request).finish();
        const promise = this.rpc.request(this.service, "Burn", data);
        return promise.then((data) => EmptyResponse$1.decode(_m0$i.Reader.create(data)));
    }
    Freeze(request) {
        const data = MsgFreeze$1.encode(request).finish();
        const promise = this.rpc.request(this.service, "Freeze", data);
        return promise.then((data) => EmptyResponse$1.decode(_m0$i.Reader.create(data)));
    }
    Unfreeze(request) {
        const data = MsgUnfreeze$1.encode(request).finish();
        const promise = this.rpc.request(this.service, "Unfreeze", data);
        return promise.then((data) => EmptyResponse$1.decode(_m0$i.Reader.create(data)));
    }
    AddToWhitelist(request) {
        const data = MsgAddToWhitelist.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddToWhitelist", data);
        return promise.then((data) => EmptyResponse$1.decode(_m0$i.Reader.create(data)));
    }
    RemoveFromWhitelist(request) {
        const data = MsgRemoveFromWhitelist.encode(request).finish();
        const promise = this.rpc.request(this.service, "RemoveFromWhitelist", data);
        return promise.then((data) => EmptyResponse$1.decode(_m0$i.Reader.create(data)));
    }
};
if (_m0$i.util.Long !== Long$1) {
    _m0$i.util.Long = Long$1;
    _m0$i.configure();
}
function isSet$d(value) {
    return value !== null && value !== undefined;
}

var tx$2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    EmptyResponse: EmptyResponse$1,
    MsgAddToWhitelist: MsgAddToWhitelist,
    MsgBurn: MsgBurn$1,
    MsgClientImpl: MsgClientImpl$2,
    MsgFreeze: MsgFreeze$1,
    MsgIssueClass: MsgIssueClass,
    MsgMint: MsgMint$1,
    MsgRemoveFromWhitelist: MsgRemoveFromWhitelist,
    MsgUnfreeze: MsgUnfreeze$1,
    protobufPackage: protobufPackage$2
});

/* eslint-disable */
function createBaseCoin() {
    return { denom: "", amount: "" };
}
const Coin = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.amount !== "") {
            writer.uint32(18).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCoin();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet$c(object.denom) ? String(object.denom) : "",
            amount: isSet$c(object.amount) ? String(object.amount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.amount !== undefined && (obj.amount = message.amount);
        return obj;
    },
    create(base) {
        return Coin.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCoin();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : "";
        message.amount = (_b = object.amount) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseDecCoin() {
    return { denom: "", amount: "" };
}
const DecCoin = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.amount !== "") {
            writer.uint32(18).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDecCoin();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet$c(object.denom) ? String(object.denom) : "",
            amount: isSet$c(object.amount) ? String(object.amount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.amount !== undefined && (obj.amount = message.amount);
        return obj;
    },
    create(base) {
        return DecCoin.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDecCoin();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : "";
        message.amount = (_b = object.amount) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
if (_m0$i.util.Long !== Long$1) {
    _m0$i.util.Long = Long$1;
    _m0$i.configure();
}
function isSet$c(value) {
    return value !== null && value !== undefined;
}

/* eslint-disable */
/** Feature defines possible features of fungible token. */
var Feature;
(function (Feature) {
    Feature[Feature["minting"] = 0] = "minting";
    Feature[Feature["burning"] = 1] = "burning";
    Feature[Feature["freezing"] = 2] = "freezing";
    Feature[Feature["whitelisting"] = 3] = "whitelisting";
    Feature[Feature["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Feature || (Feature = {}));
function featureFromJSON(object) {
    switch (object) {
        case 0:
        case "minting":
            return Feature.minting;
        case 1:
        case "burning":
            return Feature.burning;
        case 2:
        case "freezing":
            return Feature.freezing;
        case 3:
        case "whitelisting":
            return Feature.whitelisting;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Feature.UNRECOGNIZED;
    }
}
function featureToJSON(object) {
    switch (object) {
        case Feature.minting:
            return "minting";
        case Feature.burning:
            return "burning";
        case Feature.freezing:
            return "freezing";
        case Feature.whitelisting:
            return "whitelisting";
        case Feature.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseToken() {
    return {
        denom: "",
        issuer: "",
        symbol: "",
        subunit: "",
        precision: 0,
        description: "",
        globallyFrozen: false,
        features: [],
        burnRate: "",
        sendCommissionRate: "",
    };
}
const Token = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.issuer !== "") {
            writer.uint32(18).string(message.issuer);
        }
        if (message.symbol !== "") {
            writer.uint32(26).string(message.symbol);
        }
        if (message.subunit !== "") {
            writer.uint32(34).string(message.subunit);
        }
        if (message.precision !== 0) {
            writer.uint32(40).uint32(message.precision);
        }
        if (message.description !== "") {
            writer.uint32(50).string(message.description);
        }
        if (message.globallyFrozen === true) {
            writer.uint32(56).bool(message.globallyFrozen);
        }
        writer.uint32(66).fork();
        for (const v of message.features) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.burnRate !== "") {
            writer.uint32(74).string(message.burnRate);
        }
        if (message.sendCommissionRate !== "") {
            writer.uint32(82).string(message.sendCommissionRate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseToken();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.symbol = reader.string();
                    continue;
                case 4:
                    if (tag != 34) {
                        break;
                    }
                    message.subunit = reader.string();
                    continue;
                case 5:
                    if (tag != 40) {
                        break;
                    }
                    message.precision = reader.uint32();
                    continue;
                case 6:
                    if (tag != 50) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 7:
                    if (tag != 56) {
                        break;
                    }
                    message.globallyFrozen = reader.bool();
                    continue;
                case 8:
                    if (tag == 64) {
                        message.features.push(reader.int32());
                        continue;
                    }
                    if (tag == 66) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.features.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 9:
                    if (tag != 74) {
                        break;
                    }
                    message.burnRate = reader.string();
                    continue;
                case 10:
                    if (tag != 82) {
                        break;
                    }
                    message.sendCommissionRate = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet$b(object.denom) ? String(object.denom) : "",
            issuer: isSet$b(object.issuer) ? String(object.issuer) : "",
            symbol: isSet$b(object.symbol) ? String(object.symbol) : "",
            subunit: isSet$b(object.subunit) ? String(object.subunit) : "",
            precision: isSet$b(object.precision) ? Number(object.precision) : 0,
            description: isSet$b(object.description) ? String(object.description) : "",
            globallyFrozen: isSet$b(object.globallyFrozen) ? Boolean(object.globallyFrozen) : false,
            features: Array.isArray(object === null || object === void 0 ? void 0 : object.features) ? object.features.map((e) => featureFromJSON(e)) : [],
            burnRate: isSet$b(object.burnRate) ? String(object.burnRate) : "",
            sendCommissionRate: isSet$b(object.sendCommissionRate) ? String(object.sendCommissionRate) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.issuer !== undefined && (obj.issuer = message.issuer);
        message.symbol !== undefined && (obj.symbol = message.symbol);
        message.subunit !== undefined && (obj.subunit = message.subunit);
        message.precision !== undefined && (obj.precision = Math.round(message.precision));
        message.description !== undefined && (obj.description = message.description);
        message.globallyFrozen !== undefined && (obj.globallyFrozen = message.globallyFrozen);
        if (message.features) {
            obj.features = message.features.map((e) => featureToJSON(e));
        }
        else {
            obj.features = [];
        }
        message.burnRate !== undefined && (obj.burnRate = message.burnRate);
        message.sendCommissionRate !== undefined && (obj.sendCommissionRate = message.sendCommissionRate);
        return obj;
    },
    create(base) {
        return Token.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseToken();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : "";
        message.issuer = (_b = object.issuer) !== null && _b !== void 0 ? _b : "";
        message.symbol = (_c = object.symbol) !== null && _c !== void 0 ? _c : "";
        message.subunit = (_d = object.subunit) !== null && _d !== void 0 ? _d : "";
        message.precision = (_e = object.precision) !== null && _e !== void 0 ? _e : 0;
        message.description = (_f = object.description) !== null && _f !== void 0 ? _f : "";
        message.globallyFrozen = (_g = object.globallyFrozen) !== null && _g !== void 0 ? _g : false;
        message.features = ((_h = object.features) === null || _h === void 0 ? void 0 : _h.map((e) => e)) || [];
        message.burnRate = (_j = object.burnRate) !== null && _j !== void 0 ? _j : "";
        message.sendCommissionRate = (_k = object.sendCommissionRate) !== null && _k !== void 0 ? _k : "";
        return message;
    },
};
if (_m0$i.util.Long !== Long$1) {
    _m0$i.util.Long = Long$1;
    _m0$i.configure();
}
function isSet$b(value) {
    return value !== null && value !== undefined;
}

/* eslint-disable */
const protobufPackage$1 = "coreum.asset.ft.v1";
function createBaseMsgIssue() {
    return {
        issuer: "",
        symbol: "",
        subunit: "",
        precision: 0,
        initialAmount: "",
        description: "",
        features: [],
        burnRate: "",
        sendCommissionRate: "",
    };
}
const MsgIssue = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.issuer !== "") {
            writer.uint32(10).string(message.issuer);
        }
        if (message.symbol !== "") {
            writer.uint32(18).string(message.symbol);
        }
        if (message.subunit !== "") {
            writer.uint32(26).string(message.subunit);
        }
        if (message.precision !== 0) {
            writer.uint32(32).uint32(message.precision);
        }
        if (message.initialAmount !== "") {
            writer.uint32(42).string(message.initialAmount);
        }
        if (message.description !== "") {
            writer.uint32(50).string(message.description);
        }
        writer.uint32(58).fork();
        for (const v of message.features) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.burnRate !== "") {
            writer.uint32(66).string(message.burnRate);
        }
        if (message.sendCommissionRate !== "") {
            writer.uint32(74).string(message.sendCommissionRate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgIssue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.symbol = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.subunit = reader.string();
                    continue;
                case 4:
                    if (tag != 32) {
                        break;
                    }
                    message.precision = reader.uint32();
                    continue;
                case 5:
                    if (tag != 42) {
                        break;
                    }
                    message.initialAmount = reader.string();
                    continue;
                case 6:
                    if (tag != 50) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 7:
                    if (tag == 56) {
                        message.features.push(reader.int32());
                        continue;
                    }
                    if (tag == 58) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.features.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 8:
                    if (tag != 66) {
                        break;
                    }
                    message.burnRate = reader.string();
                    continue;
                case 9:
                    if (tag != 74) {
                        break;
                    }
                    message.sendCommissionRate = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            issuer: isSet$a(object.issuer) ? String(object.issuer) : "",
            symbol: isSet$a(object.symbol) ? String(object.symbol) : "",
            subunit: isSet$a(object.subunit) ? String(object.subunit) : "",
            precision: isSet$a(object.precision) ? Number(object.precision) : 0,
            initialAmount: isSet$a(object.initialAmount) ? String(object.initialAmount) : "",
            description: isSet$a(object.description) ? String(object.description) : "",
            features: Array.isArray(object === null || object === void 0 ? void 0 : object.features) ? object.features.map((e) => featureFromJSON(e)) : [],
            burnRate: isSet$a(object.burnRate) ? String(object.burnRate) : "",
            sendCommissionRate: isSet$a(object.sendCommissionRate) ? String(object.sendCommissionRate) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.issuer !== undefined && (obj.issuer = message.issuer);
        message.symbol !== undefined && (obj.symbol = message.symbol);
        message.subunit !== undefined && (obj.subunit = message.subunit);
        message.precision !== undefined && (obj.precision = Math.round(message.precision));
        message.initialAmount !== undefined && (obj.initialAmount = message.initialAmount);
        message.description !== undefined && (obj.description = message.description);
        if (message.features) {
            obj.features = message.features.map((e) => featureToJSON(e));
        }
        else {
            obj.features = [];
        }
        message.burnRate !== undefined && (obj.burnRate = message.burnRate);
        message.sendCommissionRate !== undefined && (obj.sendCommissionRate = message.sendCommissionRate);
        return obj;
    },
    create(base) {
        return MsgIssue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseMsgIssue();
        message.issuer = (_a = object.issuer) !== null && _a !== void 0 ? _a : "";
        message.symbol = (_b = object.symbol) !== null && _b !== void 0 ? _b : "";
        message.subunit = (_c = object.subunit) !== null && _c !== void 0 ? _c : "";
        message.precision = (_d = object.precision) !== null && _d !== void 0 ? _d : 0;
        message.initialAmount = (_e = object.initialAmount) !== null && _e !== void 0 ? _e : "";
        message.description = (_f = object.description) !== null && _f !== void 0 ? _f : "";
        message.features = ((_g = object.features) === null || _g === void 0 ? void 0 : _g.map((e) => e)) || [];
        message.burnRate = (_h = object.burnRate) !== null && _h !== void 0 ? _h : "";
        message.sendCommissionRate = (_j = object.sendCommissionRate) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
function createBaseMsgMint() {
    return { sender: "", coin: undefined };
}
const MsgMint = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.coin !== undefined) {
            Coin.encode(message.coin, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgMint();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.coin = Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet$a(object.sender) ? String(object.sender) : "",
            coin: isSet$a(object.coin) ? Coin.fromJSON(object.coin) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.coin !== undefined && (obj.coin = message.coin ? Coin.toJSON(message.coin) : undefined);
        return obj;
    },
    create(base) {
        return MsgMint.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgMint();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.coin = (object.coin !== undefined && object.coin !== null) ? Coin.fromPartial(object.coin) : undefined;
        return message;
    },
};
function createBaseMsgBurn() {
    return { sender: "", coin: undefined };
}
const MsgBurn = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.coin !== undefined) {
            Coin.encode(message.coin, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgBurn();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.coin = Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet$a(object.sender) ? String(object.sender) : "",
            coin: isSet$a(object.coin) ? Coin.fromJSON(object.coin) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.coin !== undefined && (obj.coin = message.coin ? Coin.toJSON(message.coin) : undefined);
        return obj;
    },
    create(base) {
        return MsgBurn.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgBurn();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.coin = (object.coin !== undefined && object.coin !== null) ? Coin.fromPartial(object.coin) : undefined;
        return message;
    },
};
function createBaseMsgFreeze() {
    return { sender: "", account: "", coin: undefined };
}
const MsgFreeze = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.account !== "") {
            writer.uint32(18).string(message.account);
        }
        if (message.coin !== undefined) {
            Coin.encode(message.coin, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgFreeze();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.coin = Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet$a(object.sender) ? String(object.sender) : "",
            account: isSet$a(object.account) ? String(object.account) : "",
            coin: isSet$a(object.coin) ? Coin.fromJSON(object.coin) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.account !== undefined && (obj.account = message.account);
        message.coin !== undefined && (obj.coin = message.coin ? Coin.toJSON(message.coin) : undefined);
        return obj;
    },
    create(base) {
        return MsgFreeze.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgFreeze();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.account = (_b = object.account) !== null && _b !== void 0 ? _b : "";
        message.coin = (object.coin !== undefined && object.coin !== null) ? Coin.fromPartial(object.coin) : undefined;
        return message;
    },
};
function createBaseMsgUnfreeze() {
    return { sender: "", account: "", coin: undefined };
}
const MsgUnfreeze = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.account !== "") {
            writer.uint32(18).string(message.account);
        }
        if (message.coin !== undefined) {
            Coin.encode(message.coin, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUnfreeze();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.coin = Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet$a(object.sender) ? String(object.sender) : "",
            account: isSet$a(object.account) ? String(object.account) : "",
            coin: isSet$a(object.coin) ? Coin.fromJSON(object.coin) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.account !== undefined && (obj.account = message.account);
        message.coin !== undefined && (obj.coin = message.coin ? Coin.toJSON(message.coin) : undefined);
        return obj;
    },
    create(base) {
        return MsgUnfreeze.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgUnfreeze();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.account = (_b = object.account) !== null && _b !== void 0 ? _b : "";
        message.coin = (object.coin !== undefined && object.coin !== null) ? Coin.fromPartial(object.coin) : undefined;
        return message;
    },
};
function createBaseMsgGloballyFreeze() {
    return { sender: "", denom: "" };
}
const MsgGloballyFreeze = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgGloballyFreeze();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet$a(object.sender) ? String(object.sender) : "",
            denom: isSet$a(object.denom) ? String(object.denom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.denom !== undefined && (obj.denom = message.denom);
        return obj;
    },
    create(base) {
        return MsgGloballyFreeze.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgGloballyFreeze();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgGloballyUnfreeze() {
    return { sender: "", denom: "" };
}
const MsgGloballyUnfreeze = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgGloballyUnfreeze();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet$a(object.sender) ? String(object.sender) : "",
            denom: isSet$a(object.denom) ? String(object.denom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.denom !== undefined && (obj.denom = message.denom);
        return obj;
    },
    create(base) {
        return MsgGloballyUnfreeze.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgGloballyUnfreeze();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgSetWhitelistedLimit() {
    return { sender: "", account: "", coin: undefined };
}
const MsgSetWhitelistedLimit = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.account !== "") {
            writer.uint32(18).string(message.account);
        }
        if (message.coin !== undefined) {
            Coin.encode(message.coin, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetWhitelistedLimit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.coin = Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet$a(object.sender) ? String(object.sender) : "",
            account: isSet$a(object.account) ? String(object.account) : "",
            coin: isSet$a(object.coin) ? Coin.fromJSON(object.coin) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.account !== undefined && (obj.account = message.account);
        message.coin !== undefined && (obj.coin = message.coin ? Coin.toJSON(message.coin) : undefined);
        return obj;
    },
    create(base) {
        return MsgSetWhitelistedLimit.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgSetWhitelistedLimit();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.account = (_b = object.account) !== null && _b !== void 0 ? _b : "";
        message.coin = (object.coin !== undefined && object.coin !== null) ? Coin.fromPartial(object.coin) : undefined;
        return message;
    },
};
function createBaseEmptyResponse() {
    return {};
}
const EmptyResponse = {
    encode(_, writer = _m0$i.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEmptyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return EmptyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseEmptyResponse();
        return message;
    },
};
let MsgClientImpl$1 = class MsgClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || "coreum.asset.ft.v1.Msg";
        this.rpc = rpc;
        this.Issue = this.Issue.bind(this);
        this.Mint = this.Mint.bind(this);
        this.Burn = this.Burn.bind(this);
        this.Freeze = this.Freeze.bind(this);
        this.Unfreeze = this.Unfreeze.bind(this);
        this.GloballyFreeze = this.GloballyFreeze.bind(this);
        this.GloballyUnfreeze = this.GloballyUnfreeze.bind(this);
        this.SetWhitelistedLimit = this.SetWhitelistedLimit.bind(this);
    }
    Issue(request) {
        const data = MsgIssue.encode(request).finish();
        const promise = this.rpc.request(this.service, "Issue", data);
        return promise.then((data) => EmptyResponse.decode(_m0$i.Reader.create(data)));
    }
    Mint(request) {
        const data = MsgMint.encode(request).finish();
        const promise = this.rpc.request(this.service, "Mint", data);
        return promise.then((data) => EmptyResponse.decode(_m0$i.Reader.create(data)));
    }
    Burn(request) {
        const data = MsgBurn.encode(request).finish();
        const promise = this.rpc.request(this.service, "Burn", data);
        return promise.then((data) => EmptyResponse.decode(_m0$i.Reader.create(data)));
    }
    Freeze(request) {
        const data = MsgFreeze.encode(request).finish();
        const promise = this.rpc.request(this.service, "Freeze", data);
        return promise.then((data) => EmptyResponse.decode(_m0$i.Reader.create(data)));
    }
    Unfreeze(request) {
        const data = MsgUnfreeze.encode(request).finish();
        const promise = this.rpc.request(this.service, "Unfreeze", data);
        return promise.then((data) => EmptyResponse.decode(_m0$i.Reader.create(data)));
    }
    GloballyFreeze(request) {
        const data = MsgGloballyFreeze.encode(request).finish();
        const promise = this.rpc.request(this.service, "GloballyFreeze", data);
        return promise.then((data) => EmptyResponse.decode(_m0$i.Reader.create(data)));
    }
    GloballyUnfreeze(request) {
        const data = MsgGloballyUnfreeze.encode(request).finish();
        const promise = this.rpc.request(this.service, "GloballyUnfreeze", data);
        return promise.then((data) => EmptyResponse.decode(_m0$i.Reader.create(data)));
    }
    SetWhitelistedLimit(request) {
        const data = MsgSetWhitelistedLimit.encode(request).finish();
        const promise = this.rpc.request(this.service, "SetWhitelistedLimit", data);
        return promise.then((data) => EmptyResponse.decode(_m0$i.Reader.create(data)));
    }
};
if (_m0$i.util.Long !== Long$1) {
    _m0$i.util.Long = Long$1;
    _m0$i.configure();
}
function isSet$a(value) {
    return value !== null && value !== undefined;
}

var tx$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    EmptyResponse: EmptyResponse,
    MsgBurn: MsgBurn,
    MsgClientImpl: MsgClientImpl$1,
    MsgFreeze: MsgFreeze,
    MsgGloballyFreeze: MsgGloballyFreeze,
    MsgGloballyUnfreeze: MsgGloballyUnfreeze,
    MsgIssue: MsgIssue,
    MsgMint: MsgMint,
    MsgSetWhitelistedLimit: MsgSetWhitelistedLimit,
    MsgUnfreeze: MsgUnfreeze,
    protobufPackage: protobufPackage$1
});

/* eslint-disable */
const protobufPackage = "coreum.nft.v1beta1";
function createBaseMsgSend() {
    return { classId: "", id: "", sender: "", receiver: "" };
}
const MsgSend = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.sender !== "") {
            writer.uint32(26).string(message.sender);
        }
        if (message.receiver !== "") {
            writer.uint32(34).string(message.receiver);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSend();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 4:
                    if (tag != 34) {
                        break;
                    }
                    message.receiver = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet$9(object.classId) ? String(object.classId) : "",
            id: isSet$9(object.id) ? String(object.id) : "",
            sender: isSet$9(object.sender) ? String(object.sender) : "",
            receiver: isSet$9(object.receiver) ? String(object.receiver) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.classId !== undefined && (obj.classId = message.classId);
        message.id !== undefined && (obj.id = message.id);
        message.sender !== undefined && (obj.sender = message.sender);
        message.receiver !== undefined && (obj.receiver = message.receiver);
        return obj;
    },
    create(base) {
        return MsgSend.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgSend();
        message.classId = (_a = object.classId) !== null && _a !== void 0 ? _a : "";
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : "";
        message.sender = (_c = object.sender) !== null && _c !== void 0 ? _c : "";
        message.receiver = (_d = object.receiver) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseMsgSendResponse() {
    return {};
}
const MsgSendResponse = {
    encode(_, writer = _m0$i.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSendResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgSendResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgSendResponse();
        return message;
    },
};
class MsgClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || "coreum.nft.v1beta1.Msg";
        this.rpc = rpc;
        this.Send = this.Send.bind(this);
    }
    Send(request) {
        const data = MsgSend.encode(request).finish();
        const promise = this.rpc.request(this.service, "Send", data);
        return promise.then((data) => MsgSendResponse.decode(_m0$i.Reader.create(data)));
    }
}
if (_m0$i.util.Long !== Long$1) {
    _m0$i.util.Long = Long$1;
    _m0$i.configure();
}
function isSet$9(value) {
    return value !== null && value !== undefined;
}

var tx = /*#__PURE__*/Object.freeze({
    __proto__: null,
    MsgClientImpl: MsgClientImpl,
    MsgSend: MsgSend,
    MsgSendResponse: MsgSendResponse,
    protobufPackage: protobufPackage
});

var CoreDenoms;
(function (CoreDenoms) {
    CoreDenoms["MAINNET"] = "ucore";
    CoreDenoms["TESTNET"] = "utestcore";
    CoreDenoms["DEVNET"] = "udevcore";
})(CoreDenoms || (CoreDenoms = {}));
var CoreumModes;
(function (CoreumModes) {
    CoreumModes["MAINNET"] = "MAINNET";
    CoreumModes["TESTNET"] = "TESTNET";
    CoreumModes["DEVNET"] = "DEVNET";
})(CoreumModes || (CoreumModes = {}));
var CoreumPrefixes;
(function (CoreumPrefixes) {
    CoreumPrefixes["MAINNET"] = "core";
    CoreumPrefixes["TESTNET"] = "testcore";
    CoreumPrefixes["DEVNET"] = "devcore";
})(CoreumPrefixes || (CoreumPrefixes = {}));
var CoreumTypeUrl;
(function (CoreumTypeUrl) {
    CoreumTypeUrl["NFT"] = "/coreum.asset.nft.v1.";
    CoreumTypeUrl["FT"] = "/coreum.asset.ft.v1.";
    CoreumTypeUrl["NFTBeta"] = "/coreum.nft.v1beta1.";
})(CoreumTypeUrl || (CoreumTypeUrl = {}));

const isValidCoreumAddress = (address) => {
    try {
        const { prefix = null } = bech32.decode(address);
        if (prefix !== CoreumPrefixes.MAINNET &&
            prefix !== CoreumPrefixes.DEVNET &&
            prefix !== CoreumPrefixes.TESTNET)
            return false;
        return true;
    }
    catch (e) {
        console.log(e);
        return false;
    }
};
const generateKey = () => __awaiter(void 0, void 0, void 0, function* () {
    const wallet = yield build$9.DirectSecp256k1HdWallet.generate(24);
    return wallet.mnemonic;
});
const generateWalletFromMnemonic = (mnemonic) => __awaiter(void 0, void 0, void 0, function* () {
    const hdPath = "m/44'/990'/0'/0/0";
    const prefix = "testcore";
    const wallet = yield build$9.DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {
        prefix,
        hdPaths: [build$7.stringToPath(hdPath)],
    });
    return wallet;
});

var WalletMethods;
(function (WalletMethods) {
    WalletMethods["DCENT"] = "dcent";
    WalletMethods["OFFLINE"] = "offline";
    WalletMethods["COSMOSTATION"] = "cosmostation";
    WalletMethods["MNEMONIC"] = "mnemonic";
})(WalletMethods || (WalletMethods = {}));

const assetNftRegistry = [
    [CoreumTypeUrl.NFT + "MsgIssueClass", MsgIssueClass],
    [CoreumTypeUrl.NFT + "MsgAddToWhitelist", MsgAddToWhitelist],
    [CoreumTypeUrl.NFT + "MsgRemoveFromWhitelist", MsgRemoveFromWhitelist],
    [CoreumTypeUrl.NFT + "MsgMint", MsgMint$1],
    [CoreumTypeUrl.NFT + "MsgBurn", MsgBurn$1],
    [CoreumTypeUrl.NFT + "MsgFreeze", MsgFreeze$1],
    [CoreumTypeUrl.NFT + "MsgUnfreeze", MsgUnfreeze$1],
];
const assetFtRegistry = [
    [CoreumTypeUrl.FT + "MsgIssue", MsgIssue],
    [CoreumTypeUrl.FT + "MsgFreeze", MsgFreeze],
    [CoreumTypeUrl.FT + "MsgMint", MsgMint],
    [CoreumTypeUrl.FT + "MsgBurn", MsgBurn],
    [CoreumTypeUrl.FT + "MsgUnfreeze", MsgUnfreeze],
    [CoreumTypeUrl.FT + "MsgGloballyFreeze", MsgGloballyFreeze],
    [CoreumTypeUrl.FT + "MsgGloballyUnfreeze", MsgGloballyUnfreeze],
    [CoreumTypeUrl.FT + "MsgSetWhitelistedLimit", MsgSetWhitelistedLimit],
];

const nftBetaRegistry = [
    [CoreumTypeUrl.NFTBeta + "MsgSend", MsgSend],
];

const coreumRegistry = [
    ...assetFtRegistry,
    ...assetNftRegistry,
    ...nftBetaRegistry,
];

/* eslint-disable */
function createBaseModelParams() {
    return {
        initialGasPrice: "",
        maxGasPriceMultiplier: "",
        maxDiscount: "",
        escalationStartFraction: "",
        maxBlockGas: Long$1.ZERO,
        shortEmaBlockLength: 0,
        longEmaBlockLength: 0,
    };
}
const ModelParams = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.initialGasPrice !== "") {
            writer.uint32(10).string(message.initialGasPrice);
        }
        if (message.maxGasPriceMultiplier !== "") {
            writer.uint32(18).string(message.maxGasPriceMultiplier);
        }
        if (message.maxDiscount !== "") {
            writer.uint32(26).string(message.maxDiscount);
        }
        if (message.escalationStartFraction !== "") {
            writer.uint32(34).string(message.escalationStartFraction);
        }
        if (!message.maxBlockGas.isZero()) {
            writer.uint32(40).int64(message.maxBlockGas);
        }
        if (message.shortEmaBlockLength !== 0) {
            writer.uint32(48).uint32(message.shortEmaBlockLength);
        }
        if (message.longEmaBlockLength !== 0) {
            writer.uint32(56).uint32(message.longEmaBlockLength);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModelParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.initialGasPrice = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.maxGasPriceMultiplier = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.maxDiscount = reader.string();
                    continue;
                case 4:
                    if (tag != 34) {
                        break;
                    }
                    message.escalationStartFraction = reader.string();
                    continue;
                case 5:
                    if (tag != 40) {
                        break;
                    }
                    message.maxBlockGas = reader.int64();
                    continue;
                case 6:
                    if (tag != 48) {
                        break;
                    }
                    message.shortEmaBlockLength = reader.uint32();
                    continue;
                case 7:
                    if (tag != 56) {
                        break;
                    }
                    message.longEmaBlockLength = reader.uint32();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            initialGasPrice: isSet$8(object.initialGasPrice) ? String(object.initialGasPrice) : "",
            maxGasPriceMultiplier: isSet$8(object.maxGasPriceMultiplier) ? String(object.maxGasPriceMultiplier) : "",
            maxDiscount: isSet$8(object.maxDiscount) ? String(object.maxDiscount) : "",
            escalationStartFraction: isSet$8(object.escalationStartFraction) ? String(object.escalationStartFraction) : "",
            maxBlockGas: isSet$8(object.maxBlockGas) ? Long$1.fromValue(object.maxBlockGas) : Long$1.ZERO,
            shortEmaBlockLength: isSet$8(object.shortEmaBlockLength) ? Number(object.shortEmaBlockLength) : 0,
            longEmaBlockLength: isSet$8(object.longEmaBlockLength) ? Number(object.longEmaBlockLength) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.initialGasPrice !== undefined && (obj.initialGasPrice = message.initialGasPrice);
        message.maxGasPriceMultiplier !== undefined && (obj.maxGasPriceMultiplier = message.maxGasPriceMultiplier);
        message.maxDiscount !== undefined && (obj.maxDiscount = message.maxDiscount);
        message.escalationStartFraction !== undefined && (obj.escalationStartFraction = message.escalationStartFraction);
        message.maxBlockGas !== undefined && (obj.maxBlockGas = (message.maxBlockGas || Long$1.ZERO).toString());
        message.shortEmaBlockLength !== undefined && (obj.shortEmaBlockLength = Math.round(message.shortEmaBlockLength));
        message.longEmaBlockLength !== undefined && (obj.longEmaBlockLength = Math.round(message.longEmaBlockLength));
        return obj;
    },
    create(base) {
        return ModelParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseModelParams();
        message.initialGasPrice = (_a = object.initialGasPrice) !== null && _a !== void 0 ? _a : "";
        message.maxGasPriceMultiplier = (_b = object.maxGasPriceMultiplier) !== null && _b !== void 0 ? _b : "";
        message.maxDiscount = (_c = object.maxDiscount) !== null && _c !== void 0 ? _c : "";
        message.escalationStartFraction = (_d = object.escalationStartFraction) !== null && _d !== void 0 ? _d : "";
        message.maxBlockGas = (object.maxBlockGas !== undefined && object.maxBlockGas !== null)
            ? Long$1.fromValue(object.maxBlockGas)
            : Long$1.ZERO;
        message.shortEmaBlockLength = (_e = object.shortEmaBlockLength) !== null && _e !== void 0 ? _e : 0;
        message.longEmaBlockLength = (_f = object.longEmaBlockLength) !== null && _f !== void 0 ? _f : 0;
        return message;
    },
};
function createBaseParams$2() {
    return { model: undefined };
}
const Params$2 = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.model !== undefined) {
            ModelParams.encode(message.model, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams$2();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.model = ModelParams.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { model: isSet$8(object.model) ? ModelParams.fromJSON(object.model) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.model !== undefined && (obj.model = message.model ? ModelParams.toJSON(message.model) : undefined);
        return obj;
    },
    create(base) {
        return Params$2.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseParams$2();
        message.model = (object.model !== undefined && object.model !== null)
            ? ModelParams.fromPartial(object.model)
            : undefined;
        return message;
    },
};
if (_m0$i.util.Long !== Long$1) {
    _m0$i.util.Long = Long$1;
    _m0$i.configure();
}
function isSet$8(value) {
    return value !== null && value !== undefined;
}

/* eslint-disable */
function createBaseQueryMinGasPriceRequest() {
    return {};
}
const QueryMinGasPriceRequest = {
    encode(_, writer = _m0$i.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryMinGasPriceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return QueryMinGasPriceRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryMinGasPriceRequest();
        return message;
    },
};
function createBaseQueryMinGasPriceResponse() {
    return { minGasPrice: undefined };
}
const QueryMinGasPriceResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.minGasPrice !== undefined) {
            DecCoin.encode(message.minGasPrice, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryMinGasPriceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.minGasPrice = DecCoin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { minGasPrice: isSet$7(object.minGasPrice) ? DecCoin.fromJSON(object.minGasPrice) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.minGasPrice !== undefined &&
            (obj.minGasPrice = message.minGasPrice ? DecCoin.toJSON(message.minGasPrice) : undefined);
        return obj;
    },
    create(base) {
        return QueryMinGasPriceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryMinGasPriceResponse();
        message.minGasPrice = (object.minGasPrice !== undefined && object.minGasPrice !== null)
            ? DecCoin.fromPartial(object.minGasPrice)
            : undefined;
        return message;
    },
};
function createBaseQueryParamsRequest$2() {
    return {};
}
const QueryParamsRequest$2 = {
    encode(_, writer = _m0$i.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest$2();
        while (reader.pos < end) {
            const tag = reader.uint32();
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return QueryParamsRequest$2.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest$2();
        return message;
    },
};
function createBaseQueryParamsResponse$2() {
    return { params: undefined };
}
const QueryParamsResponse$2 = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.params !== undefined) {
            Params$2.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse$2();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.params = Params$2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { params: isSet$7(object.params) ? Params$2.fromJSON(object.params) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? Params$2.toJSON(message.params) : undefined);
        return obj;
    },
    create(base) {
        return QueryParamsResponse$2.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse$2();
        message.params = (object.params !== undefined && object.params !== null)
            ? Params$2.fromPartial(object.params)
            : undefined;
        return message;
    },
};
let QueryClientImpl$3 = class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || "coreum.feemodel.v1.Query";
        this.rpc = rpc;
        this.MinGasPrice = this.MinGasPrice.bind(this);
        this.Params = this.Params.bind(this);
    }
    MinGasPrice(request) {
        const data = QueryMinGasPriceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "MinGasPrice", data);
        return promise.then((data) => QueryMinGasPriceResponse.decode(_m0$i.Reader.create(data)));
    }
    Params(request) {
        const data = QueryParamsRequest$2.encode(request).finish();
        const promise = this.rpc.request(this.service, "Params", data);
        return promise.then((data) => QueryParamsResponse$2.decode(_m0$i.Reader.create(data)));
    }
};
if (_m0$i.util.Long !== Long$1) {
    _m0$i.util.Long = Long$1;
    _m0$i.configure();
}
function isSet$7(value) {
    return value !== null && value !== undefined;
}

/* eslint-disable */
function createBasePageRequest() {
    return { key: new Uint8Array(), offset: Long$1.UZERO, limit: Long$1.UZERO, countTotal: false, reverse: false };
}
const PageRequest = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.key.length !== 0) {
            writer.uint32(10).bytes(message.key);
        }
        if (!message.offset.isZero()) {
            writer.uint32(16).uint64(message.offset);
        }
        if (!message.limit.isZero()) {
            writer.uint32(24).uint64(message.limit);
        }
        if (message.countTotal === true) {
            writer.uint32(32).bool(message.countTotal);
        }
        if (message.reverse === true) {
            writer.uint32(40).bool(message.reverse);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePageRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.key = reader.bytes();
                    continue;
                case 2:
                    if (tag != 16) {
                        break;
                    }
                    message.offset = reader.uint64();
                    continue;
                case 3:
                    if (tag != 24) {
                        break;
                    }
                    message.limit = reader.uint64();
                    continue;
                case 4:
                    if (tag != 32) {
                        break;
                    }
                    message.countTotal = reader.bool();
                    continue;
                case 5:
                    if (tag != 40) {
                        break;
                    }
                    message.reverse = reader.bool();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet$6(object.key) ? bytesFromBase64(object.key) : new Uint8Array(),
            offset: isSet$6(object.offset) ? Long$1.fromValue(object.offset) : Long$1.UZERO,
            limit: isSet$6(object.limit) ? Long$1.fromValue(object.limit) : Long$1.UZERO,
            countTotal: isSet$6(object.countTotal) ? Boolean(object.countTotal) : false,
            reverse: isSet$6(object.reverse) ? Boolean(object.reverse) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined &&
            (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));
        message.offset !== undefined && (obj.offset = (message.offset || Long$1.UZERO).toString());
        message.limit !== undefined && (obj.limit = (message.limit || Long$1.UZERO).toString());
        message.countTotal !== undefined && (obj.countTotal = message.countTotal);
        message.reverse !== undefined && (obj.reverse = message.reverse);
        return obj;
    },
    create(base) {
        return PageRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePageRequest();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.offset = (object.offset !== undefined && object.offset !== null)
            ? Long$1.fromValue(object.offset)
            : Long$1.UZERO;
        message.limit = (object.limit !== undefined && object.limit !== null) ? Long$1.fromValue(object.limit) : Long$1.UZERO;
        message.countTotal = (_b = object.countTotal) !== null && _b !== void 0 ? _b : false;
        message.reverse = (_c = object.reverse) !== null && _c !== void 0 ? _c : false;
        return message;
    },
};
function createBasePageResponse() {
    return { nextKey: new Uint8Array(), total: Long$1.UZERO };
}
const PageResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.nextKey.length !== 0) {
            writer.uint32(10).bytes(message.nextKey);
        }
        if (!message.total.isZero()) {
            writer.uint32(16).uint64(message.total);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePageResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.nextKey = reader.bytes();
                    continue;
                case 2:
                    if (tag != 16) {
                        break;
                    }
                    message.total = reader.uint64();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            nextKey: isSet$6(object.nextKey) ? bytesFromBase64(object.nextKey) : new Uint8Array(),
            total: isSet$6(object.total) ? Long$1.fromValue(object.total) : Long$1.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.nextKey !== undefined &&
            (obj.nextKey = base64FromBytes(message.nextKey !== undefined ? message.nextKey : new Uint8Array()));
        message.total !== undefined && (obj.total = (message.total || Long$1.UZERO).toString());
        return obj;
    },
    create(base) {
        return PageResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePageResponse();
        message.nextKey = (_a = object.nextKey) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.total = (object.total !== undefined && object.total !== null) ? Long$1.fromValue(object.total) : Long$1.UZERO;
        return message;
    },
};
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(""));
    }
}
if (_m0$i.util.Long !== Long$1) {
    _m0$i.util.Long = Long$1;
    _m0$i.configure();
}
function isSet$6(value) {
    return value !== null && value !== undefined;
}

/* eslint-disable */
function createBaseParams$1() {
    return { issueFee: undefined };
}
const Params$1 = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.issueFee !== undefined) {
            Coin.encode(message.issueFee, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams$1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.issueFee = Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { issueFee: isSet$5(object.issueFee) ? Coin.fromJSON(object.issueFee) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.issueFee !== undefined && (obj.issueFee = message.issueFee ? Coin.toJSON(message.issueFee) : undefined);
        return obj;
    },
    create(base) {
        return Params$1.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseParams$1();
        message.issueFee = (object.issueFee !== undefined && object.issueFee !== null)
            ? Coin.fromPartial(object.issueFee)
            : undefined;
        return message;
    },
};
if (_m0$i.util.Long !== Long$1) {
    _m0$i.util.Long = Long$1;
    _m0$i.configure();
}
function isSet$5(value) {
    return value !== null && value !== undefined;
}

/* eslint-disable */
function createBaseQueryParamsRequest$1() {
    return {};
}
const QueryParamsRequest$1 = {
    encode(_, writer = _m0$i.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest$1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return QueryParamsRequest$1.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest$1();
        return message;
    },
};
function createBaseQueryParamsResponse$1() {
    return { params: undefined };
}
const QueryParamsResponse$1 = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.params !== undefined) {
            Params$1.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse$1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.params = Params$1.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { params: isSet$4(object.params) ? Params$1.fromJSON(object.params) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? Params$1.toJSON(message.params) : undefined);
        return obj;
    },
    create(base) {
        return QueryParamsResponse$1.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse$1();
        message.params = (object.params !== undefined && object.params !== null)
            ? Params$1.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseQueryTokenRequest() {
    return { denom: "" };
}
const QueryTokenRequest = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { denom: isSet$4(object.denom) ? String(object.denom) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        return obj;
    },
    create(base) {
        return QueryTokenRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTokenRequest();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryTokenResponse() {
    return { token: undefined };
}
const QueryTokenResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.token !== undefined) {
            Token.encode(message.token, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.token = Token.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { token: isSet$4(object.token) ? Token.fromJSON(object.token) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.token !== undefined && (obj.token = message.token ? Token.toJSON(message.token) : undefined);
        return obj;
    },
    create(base) {
        return QueryTokenResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryTokenResponse();
        message.token = (object.token !== undefined && object.token !== null) ? Token.fromPartial(object.token) : undefined;
        return message;
    },
};
function createBaseQueryTokensRequest() {
    return { pagination: undefined, issuer: "" };
}
const QueryTokensRequest = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.pagination !== undefined) {
            PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.issuer !== "") {
            writer.uint32(18).string(message.issuer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTokensRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.pagination = PageRequest.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet$4(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
            issuer: isSet$4(object.issuer) ? String(object.issuer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? PageRequest.toJSON(message.pagination) : undefined);
        message.issuer !== undefined && (obj.issuer = message.issuer);
        return obj;
    },
    create(base) {
        return QueryTokensRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTokensRequest();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PageRequest.fromPartial(object.pagination)
            : undefined;
        message.issuer = (_a = object.issuer) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryTokensResponse() {
    return { pagination: undefined, tokens: [] };
}
const QueryTokensResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.pagination !== undefined) {
            PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.tokens) {
            Token.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTokensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.pagination = PageResponse.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.tokens.push(Token.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet$4(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
            tokens: Array.isArray(object === null || object === void 0 ? void 0 : object.tokens) ? object.tokens.map((e) => Token.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? PageResponse.toJSON(message.pagination) : undefined);
        if (message.tokens) {
            obj.tokens = message.tokens.map((e) => e ? Token.toJSON(e) : undefined);
        }
        else {
            obj.tokens = [];
        }
        return obj;
    },
    create(base) {
        return QueryTokensResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTokensResponse();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PageResponse.fromPartial(object.pagination)
            : undefined;
        message.tokens = ((_a = object.tokens) === null || _a === void 0 ? void 0 : _a.map((e) => Token.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryFrozenBalancesRequest() {
    return { pagination: undefined, account: "" };
}
const QueryFrozenBalancesRequest = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.pagination !== undefined) {
            PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.account !== "") {
            writer.uint32(18).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFrozenBalancesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.pagination = PageRequest.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet$4(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
            account: isSet$4(object.account) ? String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? PageRequest.toJSON(message.pagination) : undefined);
        message.account !== undefined && (obj.account = message.account);
        return obj;
    },
    create(base) {
        return QueryFrozenBalancesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryFrozenBalancesRequest();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PageRequest.fromPartial(object.pagination)
            : undefined;
        message.account = (_a = object.account) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryFrozenBalancesResponse() {
    return { pagination: undefined, balances: [] };
}
const QueryFrozenBalancesResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.pagination !== undefined) {
            PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.balances) {
            Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFrozenBalancesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.pagination = PageResponse.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.balances.push(Coin.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet$4(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
            balances: Array.isArray(object === null || object === void 0 ? void 0 : object.balances) ? object.balances.map((e) => Coin.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? PageResponse.toJSON(message.pagination) : undefined);
        if (message.balances) {
            obj.balances = message.balances.map((e) => e ? Coin.toJSON(e) : undefined);
        }
        else {
            obj.balances = [];
        }
        return obj;
    },
    create(base) {
        return QueryFrozenBalancesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryFrozenBalancesResponse();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PageResponse.fromPartial(object.pagination)
            : undefined;
        message.balances = ((_a = object.balances) === null || _a === void 0 ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryFrozenBalanceRequest() {
    return { account: "", denom: "" };
}
const QueryFrozenBalanceRequest = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFrozenBalanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: isSet$4(object.account) ? String(object.account) : "",
            denom: isSet$4(object.denom) ? String(object.denom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.account !== undefined && (obj.account = message.account);
        message.denom !== undefined && (obj.denom = message.denom);
        return obj;
    },
    create(base) {
        return QueryFrozenBalanceRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryFrozenBalanceRequest();
        message.account = (_a = object.account) !== null && _a !== void 0 ? _a : "";
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryFrozenBalanceResponse() {
    return { balance: undefined };
}
const QueryFrozenBalanceResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.balance !== undefined) {
            Coin.encode(message.balance, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFrozenBalanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.balance = Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { balance: isSet$4(object.balance) ? Coin.fromJSON(object.balance) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.balance !== undefined && (obj.balance = message.balance ? Coin.toJSON(message.balance) : undefined);
        return obj;
    },
    create(base) {
        return QueryFrozenBalanceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryFrozenBalanceResponse();
        message.balance = (object.balance !== undefined && object.balance !== null)
            ? Coin.fromPartial(object.balance)
            : undefined;
        return message;
    },
};
function createBaseQueryWhitelistedBalancesRequest() {
    return { pagination: undefined, account: "" };
}
const QueryWhitelistedBalancesRequest = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.pagination !== undefined) {
            PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.account !== "") {
            writer.uint32(18).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedBalancesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.pagination = PageRequest.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet$4(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
            account: isSet$4(object.account) ? String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? PageRequest.toJSON(message.pagination) : undefined);
        message.account !== undefined && (obj.account = message.account);
        return obj;
    },
    create(base) {
        return QueryWhitelistedBalancesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryWhitelistedBalancesRequest();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PageRequest.fromPartial(object.pagination)
            : undefined;
        message.account = (_a = object.account) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryWhitelistedBalancesResponse() {
    return { pagination: undefined, balances: [] };
}
const QueryWhitelistedBalancesResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.pagination !== undefined) {
            PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.balances) {
            Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedBalancesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.pagination = PageResponse.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.balances.push(Coin.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet$4(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
            balances: Array.isArray(object === null || object === void 0 ? void 0 : object.balances) ? object.balances.map((e) => Coin.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? PageResponse.toJSON(message.pagination) : undefined);
        if (message.balances) {
            obj.balances = message.balances.map((e) => e ? Coin.toJSON(e) : undefined);
        }
        else {
            obj.balances = [];
        }
        return obj;
    },
    create(base) {
        return QueryWhitelistedBalancesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryWhitelistedBalancesResponse();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PageResponse.fromPartial(object.pagination)
            : undefined;
        message.balances = ((_a = object.balances) === null || _a === void 0 ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryWhitelistedBalanceRequest() {
    return { account: "", denom: "" };
}
const QueryWhitelistedBalanceRequest = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedBalanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: isSet$4(object.account) ? String(object.account) : "",
            denom: isSet$4(object.denom) ? String(object.denom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.account !== undefined && (obj.account = message.account);
        message.denom !== undefined && (obj.denom = message.denom);
        return obj;
    },
    create(base) {
        return QueryWhitelistedBalanceRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryWhitelistedBalanceRequest();
        message.account = (_a = object.account) !== null && _a !== void 0 ? _a : "";
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryWhitelistedBalanceResponse() {
    return { balance: undefined };
}
const QueryWhitelistedBalanceResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.balance !== undefined) {
            Coin.encode(message.balance, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedBalanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.balance = Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { balance: isSet$4(object.balance) ? Coin.fromJSON(object.balance) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.balance !== undefined && (obj.balance = message.balance ? Coin.toJSON(message.balance) : undefined);
        return obj;
    },
    create(base) {
        return QueryWhitelistedBalanceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryWhitelistedBalanceResponse();
        message.balance = (object.balance !== undefined && object.balance !== null)
            ? Coin.fromPartial(object.balance)
            : undefined;
        return message;
    },
};
let QueryClientImpl$2 = class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || "coreum.asset.ft.v1.Query";
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.Tokens = this.Tokens.bind(this);
        this.Token = this.Token.bind(this);
        this.FrozenBalances = this.FrozenBalances.bind(this);
        this.FrozenBalance = this.FrozenBalance.bind(this);
        this.WhitelistedBalances = this.WhitelistedBalances.bind(this);
        this.WhitelistedBalance = this.WhitelistedBalance.bind(this);
    }
    Params(request) {
        const data = QueryParamsRequest$1.encode(request).finish();
        const promise = this.rpc.request(this.service, "Params", data);
        return promise.then((data) => QueryParamsResponse$1.decode(_m0$i.Reader.create(data)));
    }
    Tokens(request) {
        const data = QueryTokensRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Tokens", data);
        return promise.then((data) => QueryTokensResponse.decode(_m0$i.Reader.create(data)));
    }
    Token(request) {
        const data = QueryTokenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Token", data);
        return promise.then((data) => QueryTokenResponse.decode(_m0$i.Reader.create(data)));
    }
    FrozenBalances(request) {
        const data = QueryFrozenBalancesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "FrozenBalances", data);
        return promise.then((data) => QueryFrozenBalancesResponse.decode(_m0$i.Reader.create(data)));
    }
    FrozenBalance(request) {
        const data = QueryFrozenBalanceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "FrozenBalance", data);
        return promise.then((data) => QueryFrozenBalanceResponse.decode(_m0$i.Reader.create(data)));
    }
    WhitelistedBalances(request) {
        const data = QueryWhitelistedBalancesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "WhitelistedBalances", data);
        return promise.then((data) => QueryWhitelistedBalancesResponse.decode(_m0$i.Reader.create(data)));
    }
    WhitelistedBalance(request) {
        const data = QueryWhitelistedBalanceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "WhitelistedBalance", data);
        return promise.then((data) => QueryWhitelistedBalanceResponse.decode(_m0$i.Reader.create(data)));
    }
};
if (_m0$i.util.Long !== Long$1) {
    _m0$i.util.Long = Long$1;
    _m0$i.configure();
}
function isSet$4(value) {
    return value !== null && value !== undefined;
}

function setupFTExtension(base) {
    const rpc = build$b.createProtobufRpcClient(base);
    const queryService = new QueryClientImpl$2(rpc);
    return {
        ft: {
            params: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.Params(request);
            }),
            tokens: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.Tokens(request);
            }),
            token: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.Token(request);
            }),
            frozenBalances: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.FrozenBalances(request);
            }),
            frozenBalance: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.FrozenBalance(request);
            }),
            whitelistedBalances: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.WhitelistedBalances(request);
            }),
            whitelistedBalance: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.WhitelistedBalance(request);
            }),
        },
    };
}

/* eslint-disable */
function createBaseParams() {
    return { mintFee: undefined };
}
const Params = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.mintFee !== undefined) {
            Coin.encode(message.mintFee, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.mintFee = Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { mintFee: isSet$3(object.mintFee) ? Coin.fromJSON(object.mintFee) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.mintFee !== undefined && (obj.mintFee = message.mintFee ? Coin.toJSON(message.mintFee) : undefined);
        return obj;
    },
    create(base) {
        return Params.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.mintFee = (object.mintFee !== undefined && object.mintFee !== null)
            ? Coin.fromPartial(object.mintFee)
            : undefined;
        return message;
    },
};
if (_m0$i.util.Long !== Long$1) {
    _m0$i.util.Long = Long$1;
    _m0$i.configure();
}
function isSet$3(value) {
    return value !== null && value !== undefined;
}

/* eslint-disable */
function createBaseQueryParamsRequest() {
    return {};
}
const QueryParamsRequest = {
    encode(_, writer = _m0$i.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return QueryParamsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
const QueryParamsResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.params !== undefined) {
            Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.params = Params.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { params: isSet$2(object.params) ? Params.fromJSON(object.params) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? Params.toJSON(message.params) : undefined);
        return obj;
    },
    create(base) {
        return QueryParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = (object.params !== undefined && object.params !== null)
            ? Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseQueryClassRequest$1() {
    return { id: "" };
}
const QueryClassRequest$1 = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassRequest$1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet$2(object.id) ? String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    create(base) {
        return QueryClassRequest$1.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryClassRequest$1();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryClassResponse$1() {
    return { class: undefined };
}
const QueryClassResponse$1 = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.class !== undefined) {
            Class$1.encode(message.class, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassResponse$1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.class = Class$1.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { class: isSet$2(object.class) ? Class$1.fromJSON(object.class) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.class !== undefined && (obj.class = message.class ? Class$1.toJSON(message.class) : undefined);
        return obj;
    },
    create(base) {
        return QueryClassResponse$1.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassResponse$1();
        message.class = (object.class !== undefined && object.class !== null) ? Class$1.fromPartial(object.class) : undefined;
        return message;
    },
};
function createBaseQueryFrozenRequest() {
    return { id: "", classId: "" };
}
const QueryFrozenRequest = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFrozenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet$2(object.id) ? String(object.id) : "",
            classId: isSet$2(object.classId) ? String(object.classId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.classId !== undefined && (obj.classId = message.classId);
        return obj;
    },
    create(base) {
        return QueryFrozenRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryFrozenRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.classId = (_b = object.classId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryFrozenResponse() {
    return { frozen: false };
}
const QueryFrozenResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.frozen === true) {
            writer.uint32(8).bool(message.frozen);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFrozenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 8) {
                        break;
                    }
                    message.frozen = reader.bool();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { frozen: isSet$2(object.frozen) ? Boolean(object.frozen) : false };
    },
    toJSON(message) {
        const obj = {};
        message.frozen !== undefined && (obj.frozen = message.frozen);
        return obj;
    },
    create(base) {
        return QueryFrozenResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryFrozenResponse();
        message.frozen = (_a = object.frozen) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseQueryWhitelistedRequest() {
    return { id: "", classId: "", account: "" };
}
const QueryWhitelistedRequest = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.classId !== "") {
            writer.uint32(18).string(message.classId);
        }
        if (message.account !== "") {
            writer.uint32(26).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.account = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet$2(object.id) ? String(object.id) : "",
            classId: isSet$2(object.classId) ? String(object.classId) : "",
            account: isSet$2(object.account) ? String(object.account) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.classId !== undefined && (obj.classId = message.classId);
        message.account !== undefined && (obj.account = message.account);
        return obj;
    },
    create(base) {
        return QueryWhitelistedRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseQueryWhitelistedRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.classId = (_b = object.classId) !== null && _b !== void 0 ? _b : "";
        message.account = (_c = object.account) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseQueryWhitelistedResponse() {
    return { whitelisted: false };
}
const QueryWhitelistedResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.whitelisted === true) {
            writer.uint32(8).bool(message.whitelisted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 8) {
                        break;
                    }
                    message.whitelisted = reader.bool();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { whitelisted: isSet$2(object.whitelisted) ? Boolean(object.whitelisted) : false };
    },
    toJSON(message) {
        const obj = {};
        message.whitelisted !== undefined && (obj.whitelisted = message.whitelisted);
        return obj;
    },
    create(base) {
        return QueryWhitelistedResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryWhitelistedResponse();
        message.whitelisted = (_a = object.whitelisted) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseQueryWhitelistedAccountsForNFTRequest() {
    return { pagination: undefined, id: "", classId: "" };
}
const QueryWhitelistedAccountsForNFTRequest = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.pagination !== undefined) {
            PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.classId !== "") {
            writer.uint32(26).string(message.classId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedAccountsForNFTRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.pagination = PageRequest.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet$2(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
            id: isSet$2(object.id) ? String(object.id) : "",
            classId: isSet$2(object.classId) ? String(object.classId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? PageRequest.toJSON(message.pagination) : undefined);
        message.id !== undefined && (obj.id = message.id);
        message.classId !== undefined && (obj.classId = message.classId);
        return obj;
    },
    create(base) {
        return QueryWhitelistedAccountsForNFTRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryWhitelistedAccountsForNFTRequest();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PageRequest.fromPartial(object.pagination)
            : undefined;
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.classId = (_b = object.classId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryWhitelistedAccountsForNFTResponse() {
    return { pagination: undefined, accounts: [] };
}
const QueryWhitelistedAccountsForNFTResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.pagination !== undefined) {
            PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.accounts) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryWhitelistedAccountsForNFTResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.pagination = PageResponse.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.accounts.push(reader.string());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: isSet$2(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
            accounts: Array.isArray(object === null || object === void 0 ? void 0 : object.accounts) ? object.accounts.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? PageResponse.toJSON(message.pagination) : undefined);
        if (message.accounts) {
            obj.accounts = message.accounts.map((e) => e);
        }
        else {
            obj.accounts = [];
        }
        return obj;
    },
    create(base) {
        return QueryWhitelistedAccountsForNFTResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryWhitelistedAccountsForNFTResponse();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PageResponse.fromPartial(object.pagination)
            : undefined;
        message.accounts = ((_a = object.accounts) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
let QueryClientImpl$1 = class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || "coreum.asset.nft.v1.Query";
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.Class = this.Class.bind(this);
        this.Frozen = this.Frozen.bind(this);
        this.Whitelisted = this.Whitelisted.bind(this);
        this.WhitelistedAccountsForNFT = this.WhitelistedAccountsForNFT.bind(this);
    }
    Params(request) {
        const data = QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Params", data);
        return promise.then((data) => QueryParamsResponse.decode(_m0$i.Reader.create(data)));
    }
    Class(request) {
        const data = QueryClassRequest$1.encode(request).finish();
        const promise = this.rpc.request(this.service, "Class", data);
        return promise.then((data) => QueryClassResponse$1.decode(_m0$i.Reader.create(data)));
    }
    Frozen(request) {
        const data = QueryFrozenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Frozen", data);
        return promise.then((data) => QueryFrozenResponse.decode(_m0$i.Reader.create(data)));
    }
    Whitelisted(request) {
        const data = QueryWhitelistedRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Whitelisted", data);
        return promise.then((data) => QueryWhitelistedResponse.decode(_m0$i.Reader.create(data)));
    }
    WhitelistedAccountsForNFT(request) {
        const data = QueryWhitelistedAccountsForNFTRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "WhitelistedAccountsForNFT", data);
        return promise.then((data) => QueryWhitelistedAccountsForNFTResponse.decode(_m0$i.Reader.create(data)));
    }
};
if (_m0$i.util.Long !== Long$1) {
    _m0$i.util.Long = Long$1;
    _m0$i.configure();
}
function isSet$2(value) {
    return value !== null && value !== undefined;
}

function setupNFTExtension(base) {
    const rpc = build$b.createProtobufRpcClient(base);
    const queryService = new QueryClientImpl$1(rpc);
    return {
        nft: {
            params: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.Params(request);
            }),
            class: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.Class(request);
            }),
            frozen: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.Frozen(request);
            }),
            whitelisted: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.Whitelisted(request);
            }),
            whitelistedAccountsForNFT: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.WhitelistedAccountsForNFT(request);
            }),
        },
    };
}

/* eslint-disable */
function createBaseClass() {
    return {
        id: "",
        name: "",
        symbol: "",
        description: "",
        uri: "",
        uriHash: "",
        data: undefined,
    };
}
const Class = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.symbol !== "") {
            writer.uint32(26).string(message.symbol);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.uri !== "") {
            writer.uint32(42).string(message.uri);
        }
        if (message.uriHash !== "") {
            writer.uint32(50).string(message.uriHash);
        }
        if (message.data !== undefined) {
            Any.encode(message.data, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClass();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.symbol = reader.string();
                    continue;
                case 4:
                    if (tag != 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 5:
                    if (tag != 42) {
                        break;
                    }
                    message.uri = reader.string();
                    continue;
                case 6:
                    if (tag != 50) {
                        break;
                    }
                    message.uriHash = reader.string();
                    continue;
                case 7:
                    if (tag != 58) {
                        break;
                    }
                    message.data = Any.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet$1(object.id) ? String(object.id) : "",
            name: isSet$1(object.name) ? String(object.name) : "",
            symbol: isSet$1(object.symbol) ? String(object.symbol) : "",
            description: isSet$1(object.description) ? String(object.description) : "",
            uri: isSet$1(object.uri) ? String(object.uri) : "",
            uriHash: isSet$1(object.uriHash) ? String(object.uriHash) : "",
            data: isSet$1(object.data) ? Any.fromJSON(object.data) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.name !== undefined && (obj.name = message.name);
        message.symbol !== undefined && (obj.symbol = message.symbol);
        message.description !== undefined &&
            (obj.description = message.description);
        message.uri !== undefined && (obj.uri = message.uri);
        message.uriHash !== undefined && (obj.uriHash = message.uriHash);
        message.data !== undefined &&
            (obj.data = message.data ? Any.toJSON(message.data) : undefined);
        return obj;
    },
    create(base) {
        return Class.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseClass();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.symbol = (_c = object.symbol) !== null && _c !== void 0 ? _c : "";
        message.description = (_d = object.description) !== null && _d !== void 0 ? _d : "";
        message.uri = (_e = object.uri) !== null && _e !== void 0 ? _e : "";
        message.uriHash = (_f = object.uriHash) !== null && _f !== void 0 ? _f : "";
        message.data =
            object.data !== undefined && object.data !== null
                ? Any.fromPartial(object.data)
                : undefined;
        return message;
    },
};
function createBaseNFT() {
    return { classId: "", id: "", uri: "", uriHash: "", data: undefined };
}
const NFT = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.uri !== "") {
            writer.uint32(26).string(message.uri);
        }
        if (message.uriHash !== "") {
            writer.uint32(34).string(message.uriHash);
        }
        if (message.data !== undefined) {
            Any.encode(message.data, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNFT();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.uri = reader.string();
                    continue;
                case 4:
                    if (tag != 34) {
                        break;
                    }
                    message.uriHash = reader.string();
                    continue;
                case 10:
                    if (tag != 82) {
                        break;
                    }
                    message.data = Any.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet$1(object.classId) ? String(object.classId) : "",
            id: isSet$1(object.id) ? String(object.id) : "",
            uri: isSet$1(object.uri) ? String(object.uri) : "",
            uriHash: isSet$1(object.uriHash) ? String(object.uriHash) : "",
            data: isSet$1(object.data) ? Any.fromJSON(object.data) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.classId !== undefined && (obj.classId = message.classId);
        message.id !== undefined && (obj.id = message.id);
        message.uri !== undefined && (obj.uri = message.uri);
        message.uriHash !== undefined && (obj.uriHash = message.uriHash);
        message.data !== undefined &&
            (obj.data = message.data ? Any.toJSON(message.data) : undefined);
        return obj;
    },
    create(base) {
        return NFT.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseNFT();
        message.classId = (_a = object.classId) !== null && _a !== void 0 ? _a : "";
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : "";
        message.uri = (_c = object.uri) !== null && _c !== void 0 ? _c : "";
        message.uriHash = (_d = object.uriHash) !== null && _d !== void 0 ? _d : "";
        message.data =
            object.data !== undefined && object.data !== null
                ? Any.fromPartial(object.data)
                : undefined;
        return message;
    },
};
if (_m0$i.util.Long !== Long$1) {
    _m0$i.util.Long = Long$1;
    _m0$i.configure();
}
function isSet$1(value) {
    return value !== null && value !== undefined;
}

/* eslint-disable */
function createBaseQueryBalanceRequest() {
    return { classId: "", owner: "" };
}
const QueryBalanceRequest = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.owner !== "") {
            writer.uint32(18).string(message.owner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBalanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? String(object.classId) : "",
            owner: isSet(object.owner) ? String(object.owner) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.classId !== undefined && (obj.classId = message.classId);
        message.owner !== undefined && (obj.owner = message.owner);
        return obj;
    },
    create(base) {
        return QueryBalanceRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryBalanceRequest();
        message.classId = (_a = object.classId) !== null && _a !== void 0 ? _a : "";
        message.owner = (_b = object.owner) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryBalanceResponse() {
    return { amount: Long$1.UZERO };
}
const QueryBalanceResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (!message.amount.isZero()) {
            writer.uint32(8).uint64(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBalanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 8) {
                        break;
                    }
                    message.amount = reader.uint64();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? Long$1.fromValue(object.amount) : Long$1.UZERO };
    },
    toJSON(message) {
        const obj = {};
        message.amount !== undefined && (obj.amount = (message.amount || Long$1.UZERO).toString());
        return obj;
    },
    create(base) {
        return QueryBalanceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryBalanceResponse();
        message.amount = (object.amount !== undefined && object.amount !== null)
            ? Long$1.fromValue(object.amount)
            : Long$1.UZERO;
        return message;
    },
};
function createBaseQueryOwnerRequest() {
    return { classId: "", id: "" };
}
const QueryOwnerRequest = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOwnerRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? String(object.classId) : "",
            id: isSet(object.id) ? String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.classId !== undefined && (obj.classId = message.classId);
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    create(base) {
        return QueryOwnerRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryOwnerRequest();
        message.classId = (_a = object.classId) !== null && _a !== void 0 ? _a : "";
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryOwnerResponse() {
    return { owner: "" };
}
const QueryOwnerResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.owner !== "") {
            writer.uint32(10).string(message.owner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOwnerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { owner: isSet(object.owner) ? String(object.owner) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined && (obj.owner = message.owner);
        return obj;
    },
    create(base) {
        return QueryOwnerResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryOwnerResponse();
        message.owner = (_a = object.owner) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQuerySupplyRequest() {
    return { classId: "" };
}
const QuerySupplyRequest = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuerySupplyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { classId: isSet(object.classId) ? String(object.classId) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.classId !== undefined && (obj.classId = message.classId);
        return obj;
    },
    create(base) {
        return QuerySupplyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQuerySupplyRequest();
        message.classId = (_a = object.classId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQuerySupplyResponse() {
    return { amount: Long$1.UZERO };
}
const QuerySupplyResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (!message.amount.isZero()) {
            writer.uint32(8).uint64(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuerySupplyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 8) {
                        break;
                    }
                    message.amount = reader.uint64();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? Long$1.fromValue(object.amount) : Long$1.UZERO };
    },
    toJSON(message) {
        const obj = {};
        message.amount !== undefined && (obj.amount = (message.amount || Long$1.UZERO).toString());
        return obj;
    },
    create(base) {
        return QuerySupplyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQuerySupplyResponse();
        message.amount = (object.amount !== undefined && object.amount !== null)
            ? Long$1.fromValue(object.amount)
            : Long$1.UZERO;
        return message;
    },
};
function createBaseQueryNFTsRequest() {
    return { classId: "", owner: "", pagination: undefined };
}
const QueryNFTsRequest = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.owner !== "") {
            writer.uint32(18).string(message.owner);
        }
        if (message.pagination !== undefined) {
            PageRequest.encode(message.pagination, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryNFTsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                case 3:
                    if (tag != 26) {
                        break;
                    }
                    message.pagination = PageRequest.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? String(object.classId) : "",
            owner: isSet(object.owner) ? String(object.owner) : "",
            pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.classId !== undefined && (obj.classId = message.classId);
        message.owner !== undefined && (obj.owner = message.owner);
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    create(base) {
        return QueryNFTsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryNFTsRequest();
        message.classId = (_a = object.classId) !== null && _a !== void 0 ? _a : "";
        message.owner = (_b = object.owner) !== null && _b !== void 0 ? _b : "";
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PageRequest.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseQueryNFTsResponse() {
    return { nfts: [], pagination: undefined };
}
const QueryNFTsResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        for (const v of message.nfts) {
            NFT.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryNFTsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.nfts.push(NFT.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.pagination = PageResponse.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            nfts: Array.isArray(object === null || object === void 0 ? void 0 : object.nfts) ? object.nfts.map((e) => NFT.fromJSON(e)) : [],
            pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.nfts) {
            obj.nfts = message.nfts.map((e) => e ? NFT.toJSON(e) : undefined);
        }
        else {
            obj.nfts = [];
        }
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    create(base) {
        return QueryNFTsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryNFTsResponse();
        message.nfts = ((_a = object.nfts) === null || _a === void 0 ? void 0 : _a.map((e) => NFT.fromPartial(e))) || [];
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PageResponse.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseQueryNFTRequest() {
    return { classId: "", id: "" };
}
const QueryNFTRequest = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryNFTRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? String(object.classId) : "",
            id: isSet(object.id) ? String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.classId !== undefined && (obj.classId = message.classId);
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    create(base) {
        return QueryNFTRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryNFTRequest();
        message.classId = (_a = object.classId) !== null && _a !== void 0 ? _a : "";
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryNFTResponse() {
    return { nft: undefined };
}
const QueryNFTResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.nft !== undefined) {
            NFT.encode(message.nft, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryNFTResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.nft = NFT.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { nft: isSet(object.nft) ? NFT.fromJSON(object.nft) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.nft !== undefined && (obj.nft = message.nft ? NFT.toJSON(message.nft) : undefined);
        return obj;
    },
    create(base) {
        return QueryNFTResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryNFTResponse();
        message.nft = (object.nft !== undefined && object.nft !== null) ? NFT.fromPartial(object.nft) : undefined;
        return message;
    },
};
function createBaseQueryClassRequest() {
    return { classId: "" };
}
const QueryClassRequest = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { classId: isSet(object.classId) ? String(object.classId) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.classId !== undefined && (obj.classId = message.classId);
        return obj;
    },
    create(base) {
        return QueryClassRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryClassRequest();
        message.classId = (_a = object.classId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryClassResponse() {
    return { class: undefined };
}
const QueryClassResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.class !== undefined) {
            Class.encode(message.class, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.class = Class.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { class: isSet(object.class) ? Class.fromJSON(object.class) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.class !== undefined && (obj.class = message.class ? Class.toJSON(message.class) : undefined);
        return obj;
    },
    create(base) {
        return QueryClassResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassResponse();
        message.class = (object.class !== undefined && object.class !== null) ? Class.fromPartial(object.class) : undefined;
        return message;
    },
};
function createBaseQueryClassesRequest() {
    return { pagination: undefined };
}
const QueryClassesRequest = {
    encode(message, writer = _m0$i.Writer.create()) {
        if (message.pagination !== undefined) {
            PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.pagination = PageRequest.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    create(base) {
        return QueryClassesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryClassesRequest();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PageRequest.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseQueryClassesResponse() {
    return { classes: [], pagination: undefined };
}
const QueryClassesResponse = {
    encode(message, writer = _m0$i.Writer.create()) {
        for (const v of message.classes) {
            Class.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0$i.Reader ? input : _m0$i.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryClassesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag != 10) {
                        break;
                    }
                    message.classes.push(Class.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag != 18) {
                        break;
                    }
                    message.pagination = PageResponse.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) == 4 || tag == 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classes: Array.isArray(object === null || object === void 0 ? void 0 : object.classes) ? object.classes.map((e) => Class.fromJSON(e)) : [],
            pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.classes) {
            obj.classes = message.classes.map((e) => e ? Class.toJSON(e) : undefined);
        }
        else {
            obj.classes = [];
        }
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    create(base) {
        return QueryClassesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryClassesResponse();
        message.classes = ((_a = object.classes) === null || _a === void 0 ? void 0 : _a.map((e) => Class.fromPartial(e))) || [];
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PageResponse.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || "coreum.nft.v1beta1.Query";
        this.rpc = rpc;
        this.Balance = this.Balance.bind(this);
        this.Owner = this.Owner.bind(this);
        this.Supply = this.Supply.bind(this);
        this.NFTs = this.NFTs.bind(this);
        this.NFT = this.NFT.bind(this);
        this.Class = this.Class.bind(this);
        this.Classes = this.Classes.bind(this);
    }
    Balance(request) {
        const data = QueryBalanceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Balance", data);
        return promise.then((data) => QueryBalanceResponse.decode(_m0$i.Reader.create(data)));
    }
    Owner(request) {
        const data = QueryOwnerRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Owner", data);
        return promise.then((data) => QueryOwnerResponse.decode(_m0$i.Reader.create(data)));
    }
    Supply(request) {
        const data = QuerySupplyRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Supply", data);
        return promise.then((data) => QuerySupplyResponse.decode(_m0$i.Reader.create(data)));
    }
    NFTs(request) {
        const data = QueryNFTsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "NFTs", data);
        return promise.then((data) => QueryNFTsResponse.decode(_m0$i.Reader.create(data)));
    }
    NFT(request) {
        const data = QueryNFTRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "NFT", data);
        return promise.then((data) => QueryNFTResponse.decode(_m0$i.Reader.create(data)));
    }
    Class(request) {
        const data = QueryClassRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Class", data);
        return promise.then((data) => QueryClassResponse.decode(_m0$i.Reader.create(data)));
    }
    Classes(request) {
        const data = QueryClassesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Classes", data);
        return promise.then((data) => QueryClassesResponse.decode(_m0$i.Reader.create(data)));
    }
}
if (_m0$i.util.Long !== Long$1) {
    _m0$i.util.Long = Long$1;
    _m0$i.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}

function setupNFTBetaExtension(base) {
    const rpc = build$b.createProtobufRpcClient(base);
    const queryService = new QueryClientImpl(rpc);
    return {
        nftbeta: {
            balance: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.Balance(request);
            }),
            owner: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.Owner(request);
            }),
            supply: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.Supply(request);
            }),
            nfts: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.NFTs(request);
            }),
            nft: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.NFT(request);
            }),
            class: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.Class(request);
            }),
            classes: (request) => __awaiter(this, void 0, void 0, function* () {
                return yield queryService.Classes(request);
            }),
        },
    };
}

const parseSubscriptionEvents = (events) => {
    let parsedEvents = {};
    Object.entries(events).map((entry) => {
        const [key, value] = entry;
        const splitKey = key.split(".");
        const last = splitKey.pop();
        const property = splitKey.join(".");
        parsedEvents[property] = parsedEvents[property] || {};
        try {
            parsedEvents[property][last] = JSON.parse(value[0]);
        }
        catch (e) {
            parsedEvents[property][last] = value[0];
        }
    });
    return parsedEvents;
};

var eventemitter3 = {exports: {}};

(function (module) {

	var has = Object.prototype.hasOwnProperty
	  , prefix = '~';

	/**
	 * Constructor to create a storage for our `EE` objects.
	 * An `Events` instance is a plain object whose properties are event names.
	 *
	 * @constructor
	 * @private
	 */
	function Events() {}

	//
	// We try to not inherit from `Object.prototype`. In some engines creating an
	// instance in this way is faster than calling `Object.create(null)` directly.
	// If `Object.create(null)` is not supported we prefix the event names with a
	// character to make sure that the built-in object properties are not
	// overridden or used as an attack vector.
	//
	if (Object.create) {
	  Events.prototype = Object.create(null);

	  //
	  // This hack is needed because the `__proto__` property is still inherited in
	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
	  //
	  if (!new Events().__proto__) prefix = false;
	}

	/**
	 * Representation of a single event listener.
	 *
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
	 * @constructor
	 * @private
	 */
	function EE(fn, context, once) {
	  this.fn = fn;
	  this.context = context;
	  this.once = once || false;
	}

	/**
	 * Add a listener for a given event.
	 *
	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} once Specify if the listener is a one-time listener.
	 * @returns {EventEmitter}
	 * @private
	 */
	function addListener(emitter, event, fn, context, once) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('The listener must be a function');
	  }

	  var listener = new EE(fn, context || emitter, once)
	    , evt = prefix ? prefix + event : event;

	  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
	  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
	  else emitter._events[evt] = [emitter._events[evt], listener];

	  return emitter;
	}

	/**
	 * Clear event by name.
	 *
	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	 * @param {(String|Symbol)} evt The Event name.
	 * @private
	 */
	function clearEvent(emitter, evt) {
	  if (--emitter._eventsCount === 0) emitter._events = new Events();
	  else delete emitter._events[evt];
	}

	/**
	 * Minimal `EventEmitter` interface that is molded against the Node.js
	 * `EventEmitter` interface.
	 *
	 * @constructor
	 * @public
	 */
	function EventEmitter() {
	  this._events = new Events();
	  this._eventsCount = 0;
	}

	/**
	 * Return an array listing the events for which the emitter has registered
	 * listeners.
	 *
	 * @returns {Array}
	 * @public
	 */
	EventEmitter.prototype.eventNames = function eventNames() {
	  var names = []
	    , events
	    , name;

	  if (this._eventsCount === 0) return names;

	  for (name in (events = this._events)) {
	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
	  }

	  if (Object.getOwnPropertySymbols) {
	    return names.concat(Object.getOwnPropertySymbols(events));
	  }

	  return names;
	};

	/**
	 * Return the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Array} The registered listeners.
	 * @public
	 */
	EventEmitter.prototype.listeners = function listeners(event) {
	  var evt = prefix ? prefix + event : event
	    , handlers = this._events[evt];

	  if (!handlers) return [];
	  if (handlers.fn) return [handlers.fn];

	  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
	    ee[i] = handlers[i].fn;
	  }

	  return ee;
	};

	/**
	 * Return the number of listeners listening to a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Number} The number of listeners.
	 * @public
	 */
	EventEmitter.prototype.listenerCount = function listenerCount(event) {
	  var evt = prefix ? prefix + event : event
	    , listeners = this._events[evt];

	  if (!listeners) return 0;
	  if (listeners.fn) return 1;
	  return listeners.length;
	};

	/**
	 * Calls each of the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Boolean} `true` if the event had listeners, else `false`.
	 * @public
	 */
	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return false;

	  var listeners = this._events[evt]
	    , len = arguments.length
	    , args
	    , i;

	  if (listeners.fn) {
	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

	    switch (len) {
	      case 1: return listeners.fn.call(listeners.context), true;
	      case 2: return listeners.fn.call(listeners.context, a1), true;
	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
	    }

	    for (i = 1, args = new Array(len -1); i < len; i++) {
	      args[i - 1] = arguments[i];
	    }

	    listeners.fn.apply(listeners.context, args);
	  } else {
	    var length = listeners.length
	      , j;

	    for (i = 0; i < length; i++) {
	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

	      switch (len) {
	        case 1: listeners[i].fn.call(listeners[i].context); break;
	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
	        default:
	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
	            args[j - 1] = arguments[j];
	          }

	          listeners[i].fn.apply(listeners[i].context, args);
	      }
	    }
	  }

	  return true;
	};

	/**
	 * Add a listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.on = function on(event, fn, context) {
	  return addListener(this, event, fn, context, false);
	};

	/**
	 * Add a one-time listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.once = function once(event, fn, context) {
	  return addListener(this, event, fn, context, true);
	};

	/**
	 * Remove the listeners of a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn Only remove the listeners that match this function.
	 * @param {*} context Only remove the listeners that have this context.
	 * @param {Boolean} once Only remove one-time listeners.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return this;
	  if (!fn) {
	    clearEvent(this, evt);
	    return this;
	  }

	  var listeners = this._events[evt];

	  if (listeners.fn) {
	    if (
	      listeners.fn === fn &&
	      (!once || listeners.once) &&
	      (!context || listeners.context === context)
	    ) {
	      clearEvent(this, evt);
	    }
	  } else {
	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
	      if (
	        listeners[i].fn !== fn ||
	        (once && !listeners[i].once) ||
	        (context && listeners[i].context !== context)
	      ) {
	        events.push(listeners[i]);
	      }
	    }

	    //
	    // Reset the array, or remove it completely if we have no more listeners.
	    //
	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
	    else clearEvent(this, evt);
	  }

	  return this;
	};

	/**
	 * Remove all listeners, or those of the specified event.
	 *
	 * @param {(String|Symbol)} [event] The event name.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
	  var evt;

	  if (event) {
	    evt = prefix ? prefix + event : event;
	    if (this._events[evt]) clearEvent(this, evt);
	  } else {
	    this._events = new Events();
	    this._eventsCount = 0;
	  }

	  return this;
	};

	//
	// Alias methods names because people roll like that.
	//
	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

	//
	// Expose the prefix.
	//
	EventEmitter.prefixed = prefix;

	//
	// Allow `EventEmitter` to be imported as module namespace.
	//
	EventEmitter.EventEmitter = EventEmitter;

	//
	// Expose the module.
	//
	{
	  module.exports = EventEmitter;
	} 
} (eventemitter3));

var eventemitter3Exports = eventemitter3.exports;
var EventEmitter = /*@__PURE__*/getDefaultExportFromCjs(eventemitter3Exports);

let registryTypes = [
    ...build$b.defaultRegistryTypes,
    ...coreumRegistry,
];
class CoreumClient {
    static connect(node, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const coreDenom = CoreDenoms[(options === null || options === void 0 ? void 0 : options.developer_mode) || "MAINNET"];
            const coreumMode = (options === null || options === void 0 ? void 0 : options.developer_mode) || CoreumModes.MAINNET;
            if (options === null || options === void 0 ? void 0 : options.registry)
                registryTypes = [...registryTypes, ...options.registry];
            const registry = new build$9.Registry(registryTypes);
            const stargateOptions = {
                broadcastPollIntervalMs: options === null || options === void 0 ? void 0 : options.broadcastPollIntervalMs,
                broadcastTimeoutMs: options === null || options === void 0 ? void 0 : options.broadcastTimeoutMs,
                registry,
            };
            const wallet = (options === null || options === void 0 ? void 0 : options.signer)
                ? yield generateWalletFromMnemonic(options.signer)
                : undefined;
            const tmClient = yield build$2.Tendermint34Client.connect(`https://${node}`);
            const client = wallet
                ? yield build$b.SigningStargateClient.createWithSigner(tmClient, wallet, stargateOptions)
                : yield build$b.StargateClient.create(tmClient);
            const wsClient = new build$2.WebsocketClient(`wss://${node}`);
            return new CoreumClient({
                node,
                denom: coreDenom,
                mode: coreumMode,
                gasLimit: options.gasLimit,
                wsClient,
                client,
                tmClient,
                wallet,
            });
        });
    }
    constructor(options) {
        // Properties
        this._gasLimit = Infinity;
        this._eventSequence = 0;
        const queryClient = build$b.QueryClient.withExtensions(options.tmClient, setupFTExtension, setupNFTExtension, setupNFTBetaExtension, build$b.setupStakingExtension);
        const rpcClient = build$b.createProtobufRpcClient(queryClient);
        const feeModel = new QueryClientImpl$3(rpcClient);
        this._node = options.node;
        this._tmClient = options.tmClient;
        this._wsClient = options.wsClient;
        this._client = options.client;
        this._queryClient = queryClient;
        this._rpcClient = rpcClient;
        this._feeModel = feeModel;
        if (options === null || options === void 0 ? void 0 : options.gasLimit)
            this._gasLimit = options.gasLimit;
        if (options === null || options === void 0 ? void 0 : options.wallet)
            this._wallet = options.wallet;
    }
    // Getters and Setters
    setGasLimit(limit) {
        this._gasLimit = limit;
    }
    getGasLimit() {
        return this._gasLimit;
    }
    getQueryClients() {
        return this._queryClient;
    }
    getStargate() {
        return this._client;
    }
    getWsClient() {
        return this._wsClient;
    }
    connectWallet(method, data) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (method) {
                case WalletMethods.MNEMONIC:
                    if (data === null || data === void 0 ? void 0 : data.mnemonic) {
                        return yield this.setMnemonicAccount(data.mnemonic);
                    }
                    throw new Error("Mnemonic method requires a mnemonic phrase");
                case WalletMethods.COSMOSTATION:
                    yield this._connectCosmostation();
                    break;
                case WalletMethods.DCENT:
                    break;
            }
        });
    }
    setMnemonicAccount(mnemonic) {
        return __awaiter(this, void 0, void 0, function* () {
            this._wallet = yield generateWalletFromMnemonic(mnemonic);
            yield this._switchToSigningClient();
        });
    }
    getAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._wallet)
                throw new Error("A wallet has not been connected.");
            const accounts = yield this._wallet.getAccounts();
            return accounts[0].address;
        });
    }
    submit(messages, options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this._wallet)
                    throw { thrower: "wallet", error: new Error("Wallet not connected") };
                let shouldSubmit = true;
                if (options === null || options === void 0 ? void 0 : options.hasOwnProperty("submit"))
                    shouldSubmit = options === null || options === void 0 ? void 0 : options.submit;
                const signingClient = this.getStargate();
                const sender = yield this.getAddress();
                const fee = yield this.getFee(messages);
                if (shouldSubmit) {
                    return yield signingClient.signAndBroadcast(sender, messages, fee, (options === null || options === void 0 ? void 0 : options.memo) || "");
                }
                return yield signingClient.sign(sender, messages, fee, (options === null || options === void 0 ? void 0 : options.memo) || "");
            }
            catch (e) {
                console.log("E_SUBMIT_MESSAGES =>", e);
                throw {
                    thrower: e.thrower || "submit",
                    error: e,
                };
            }
        });
    }
    getFee(msgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const signingClient = this.getStargate();
            const sender = yield this.getAddress();
            const txGas = yield signingClient.simulate(sender, msgs, "");
            const gasPrice = yield this._getGasPrice();
            return build$b.calculateFee(txGas, gasPrice);
        });
    }
    subscribeToEvent(event) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._wsClient === undefined)
                throw {
                    thrower: "subscribeToEvent",
                    error: new Error("No Websocket client initialized"),
                };
            const emitter = new EventEmitter();
            const stream = this._wsClient.listen({
                jsonrpc: "2.0",
                method: "subscribe",
                id: this._eventSequence,
                params: { query: event },
            });
            const subscription = stream.subscribe({
                next(x) {
                    emitter.emit(event, {
                        data: x.data,
                        events: x.events ? parseSubscriptionEvents(x.events) : x,
                    });
                },
                error(err) {
                    subscription.unsubscribe();
                    emitter.emit("subscription-error", err);
                },
                complete() {
                    subscription.unsubscribe();
                    emitter.emit("subscription-complete", {
                        event,
                    });
                },
            });
            this._eventSequence++;
            return {
                events: emitter,
                unsubscribe: subscription.unsubscribe,
            };
        });
    }
    // Private methods
    _getGasPrice() {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            const gasPriceMultiplier = 1.1;
            // the param can be change via governance
            const feemodelParams = yield this._feeModel.Params({});
            const minGasPriceRes = yield this._feeModel.MinGasPrice({});
            const minGasPrice = build$b.decodeCosmosSdkDecFromProto(((_a = minGasPriceRes.minGasPrice) === null || _a === void 0 ? void 0 : _a.amount) || "");
            let gasPrice = minGasPrice.toFloatApproximation() * gasPriceMultiplier;
            const initialGasPrice = build$b.decodeCosmosSdkDecFromProto(((_c = (_b = feemodelParams.params) === null || _b === void 0 ? void 0 : _b.model) === null || _c === void 0 ? void 0 : _c.initialGasPrice) || "").toFloatApproximation();
            if (gasPrice > initialGasPrice) {
                gasPrice = initialGasPrice;
            }
            return build$b.GasPrice.fromString(`${gasPrice}${((_d = minGasPriceRes.minGasPrice) === null || _d === void 0 ? void 0 : _d.denom) || ""}`);
        });
    }
    _switchToSigningClient() {
        return __awaiter(this, void 0, void 0, function* () {
            this._client = yield build$b.SigningStargateClient.createWithSigner(this._tmClient, this._wallet, { registry: new build$9.Registry(registryTypes) });
        });
    }
    _connectCosmostation() {
        return __awaiter(this, void 0, void 0, function* () { });
    }
}

/*
 *      bignumber.js v9.1.1
 *      A JavaScript library for arbitrary-precision arithmetic.
 *      https://github.com/MikeMcl/bignumber.js
 *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
 *      MIT Licensed.
 *
 *      BigNumber.prototype methods     |  BigNumber methods
 *                                      |
 *      absoluteValue            abs    |  clone
 *      comparedTo                      |  config               set
 *      decimalPlaces            dp     |      DECIMAL_PLACES
 *      dividedBy                div    |      ROUNDING_MODE
 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
 *      exponentiatedBy          pow    |      RANGE
 *      integerValue                    |      CRYPTO
 *      isEqualTo                eq     |      MODULO_MODE
 *      isFinite                        |      POW_PRECISION
 *      isGreaterThan            gt     |      FORMAT
 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
 *      isInteger                       |  isBigNumber
 *      isLessThan               lt     |  maximum              max
 *      isLessThanOrEqualTo      lte    |  minimum              min
 *      isNaN                           |  random
 *      isNegative                      |  sum
 *      isPositive                      |
 *      isZero                          |
 *      minus                           |
 *      modulo                   mod    |
 *      multipliedBy             times  |
 *      negated                         |
 *      plus                            |
 *      precision                sd     |
 *      shiftedBy                       |
 *      squareRoot               sqrt   |
 *      toExponential                   |
 *      toFixed                         |
 *      toFormat                        |
 *      toFraction                      |
 *      toJSON                          |
 *      toNumber                        |
 *      toPrecision                     |
 *      toString                        |
 *      valueOf                         |
 *
 */


var
  isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
  mathceil = Math.ceil,
  mathfloor = Math.floor,

  bignumberError = '[BigNumber Error] ',
  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

  BASE = 1e14,
  LOG_BASE = 14,
  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
  SQRT_BASE = 1e7,

  // EDITABLE
  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
  // the arguments to toExponential, toFixed, toFormat, and toPrecision.
  MAX = 1E9;                                   // 0 to MAX_INT32


/*
 * Create and return a BigNumber constructor.
 */
function clone(configObject) {
  var div, convertBase, parseNumeric,
    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
    ONE = new BigNumber(1),


    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


    // The default values below must be integers within the inclusive ranges stated.
    // The values can also be changed at run-time using BigNumber.set.

    // The maximum number of decimal places for operations involving division.
    DECIMAL_PLACES = 20,                     // 0 to MAX

    // The rounding mode used when rounding to the above decimal places, and when using
    // toExponential, toFixed, toFormat and toPrecision, and round (default value).
    // UP         0 Away from zero.
    // DOWN       1 Towards zero.
    // CEIL       2 Towards +Infinity.
    // FLOOR      3 Towards -Infinity.
    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
    ROUNDING_MODE = 4,                       // 0 to 8

    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

    // The exponent value at and beneath which toString returns exponential notation.
    // Number type: -7
    TO_EXP_NEG = -7,                         // 0 to -MAX

    // The exponent value at and above which toString returns exponential notation.
    // Number type: 21
    TO_EXP_POS = 21,                         // 0 to MAX

    // RANGE : [MIN_EXP, MAX_EXP]

    // The minimum exponent value, beneath which underflow to zero occurs.
    // Number type: -324  (5e-324)
    MIN_EXP = -1e7,                          // -1 to -MAX

    // The maximum exponent value, above which overflow to Infinity occurs.
    // Number type:  308  (1.7976931348623157e+308)
    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
    MAX_EXP = 1e7,                           // 1 to MAX

    // Whether to use cryptographically-secure random number generation, if available.
    CRYPTO = false,                          // true or false

    // The modulo mode used when calculating the modulus: a mod n.
    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
    // The remainder (r) is calculated as: r = a - n * q.
    //
    // UP        0 The remainder is positive if the dividend is negative, else is negative.
    // DOWN      1 The remainder has the same sign as the dividend.
    //             This modulo mode is commonly known as 'truncated division' and is
    //             equivalent to (a % n) in JavaScript.
    // FLOOR     3 The remainder has the same sign as the divisor (Python %).
    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
    //             The remainder is always positive.
    //
    // The truncated division, floored division, Euclidian division and IEEE 754 remainder
    // modes are commonly used for the modulus operation.
    // Although the other rounding modes can also be used, they may not give useful results.
    MODULO_MODE = 1,                         // 0 to 9

    // The maximum number of significant digits of the result of the exponentiatedBy operation.
    // If POW_PRECISION is 0, there will be unlimited significant digits.
    POW_PRECISION = 0,                       // 0 to MAX

    // The format specification used by the BigNumber.prototype.toFormat method.
    FORMAT = {
      prefix: '',
      groupSize: 3,
      secondaryGroupSize: 0,
      groupSeparator: ',',
      decimalSeparator: '.',
      fractionGroupSize: 0,
      fractionGroupSeparator: '\xA0',        // non-breaking space
      suffix: ''
    },

    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
    // '-', '.', whitespace, or repeated character.
    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',
    alphabetHasNormalDecimalDigits = true;


  //------------------------------------------------------------------------------------------


  // CONSTRUCTOR


  /*
   * The BigNumber constructor and exported function.
   * Create and return a new instance of a BigNumber object.
   *
   * v {number|string|BigNumber} A numeric value.
   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
   */
  function BigNumber(v, b) {
    var alphabet, c, caseChanged, e, i, isNum, len, str,
      x = this;

    // Enable constructor call without `new`.
    if (!(x instanceof BigNumber)) return new BigNumber(v, b);

    if (b == null) {

      if (v && v._isBigNumber === true) {
        x.s = v.s;

        if (!v.c || v.e > MAX_EXP) {
          x.c = x.e = null;
        } else if (v.e < MIN_EXP) {
          x.c = [x.e = 0];
        } else {
          x.e = v.e;
          x.c = v.c.slice();
        }

        return;
      }

      if ((isNum = typeof v == 'number') && v * 0 == 0) {

        // Use `1 / n` to handle minus zero also.
        x.s = 1 / v < 0 ? (v = -v, -1) : 1;

        // Fast path for integers, where n < 2147483648 (2**31).
        if (v === ~~v) {
          for (e = 0, i = v; i >= 10; i /= 10, e++);

          if (e > MAX_EXP) {
            x.c = x.e = null;
          } else {
            x.e = e;
            x.c = [v];
          }

          return;
        }

        str = String(v);
      } else {

        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);

        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
      }

      // Decimal point?
      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

      // Exponential form?
      if ((i = str.search(/e/i)) > 0) {

        // Determine exponent.
        if (e < 0) e = i;
        e += +str.slice(i + 1);
        str = str.substring(0, i);
      } else if (e < 0) {

        // Integer.
        e = str.length;
      }

    } else {

      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
      intCheck(b, 2, ALPHABET.length, 'Base');

      // Allow exponential notation to be used with base 10 argument, while
      // also rounding to DECIMAL_PLACES as with other bases.
      if (b == 10 && alphabetHasNormalDecimalDigits) {
        x = new BigNumber(v);
        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
      }

      str = String(v);

      if (isNum = typeof v == 'number') {

        // Avoid potential interpretation of Infinity and NaN as base 44+ values.
        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
        if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
          throw Error
           (tooManyDigits + v);
        }
      } else {
        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
      }

      alphabet = ALPHABET.slice(0, b);
      e = i = 0;

      // Check that str is a valid base b number.
      // Don't use RegExp, so alphabet can contain special characters.
      for (len = str.length; i < len; i++) {
        if (alphabet.indexOf(c = str.charAt(i)) < 0) {
          if (c == '.') {

            // If '.' is not the first character and it has not be found before.
            if (i > e) {
              e = len;
              continue;
            }
          } else if (!caseChanged) {

            // Allow e.g. hexadecimal 'FF' as well as 'ff'.
            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
                str == str.toLowerCase() && (str = str.toUpperCase())) {
              caseChanged = true;
              i = -1;
              e = 0;
              continue;
            }
          }

          return parseNumeric(x, String(v), isNum, b);
        }
      }

      // Prevent later check for length on converted number.
      isNum = false;
      str = convertBase(str, b, 10, x.s);

      // Decimal point?
      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
      else e = str.length;
    }

    // Determine leading zeros.
    for (i = 0; str.charCodeAt(i) === 48; i++);

    // Determine trailing zeros.
    for (len = str.length; str.charCodeAt(--len) === 48;);

    if (str = str.slice(i, ++len)) {
      len -= i;

      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
      if (isNum && BigNumber.DEBUG &&
        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
          throw Error
           (tooManyDigits + (x.s * v));
      }

       // Overflow?
      if ((e = e - i - 1) > MAX_EXP) {

        // Infinity.
        x.c = x.e = null;

      // Underflow?
      } else if (e < MIN_EXP) {

        // Zero.
        x.c = [x.e = 0];
      } else {
        x.e = e;
        x.c = [];

        // Transform base

        // e is the base 10 exponent.
        // i is where to slice str to get the first element of the coefficient array.
        i = (e + 1) % LOG_BASE;
        if (e < 0) i += LOG_BASE;  // i < 1

        if (i < len) {
          if (i) x.c.push(+str.slice(0, i));

          for (len -= LOG_BASE; i < len;) {
            x.c.push(+str.slice(i, i += LOG_BASE));
          }

          i = LOG_BASE - (str = str.slice(i)).length;
        } else {
          i -= len;
        }

        for (; i--; str += '0');
        x.c.push(+str);
      }
    } else {

      // Zero.
      x.c = [x.e = 0];
    }
  }


  // CONSTRUCTOR PROPERTIES


  BigNumber.clone = clone;

  BigNumber.ROUND_UP = 0;
  BigNumber.ROUND_DOWN = 1;
  BigNumber.ROUND_CEIL = 2;
  BigNumber.ROUND_FLOOR = 3;
  BigNumber.ROUND_HALF_UP = 4;
  BigNumber.ROUND_HALF_DOWN = 5;
  BigNumber.ROUND_HALF_EVEN = 6;
  BigNumber.ROUND_HALF_CEIL = 7;
  BigNumber.ROUND_HALF_FLOOR = 8;
  BigNumber.EUCLID = 9;


  /*
   * Configure infrequently-changing library-wide settings.
   *
   * Accept an object with the following optional properties (if the value of a property is
   * a number, it must be an integer within the inclusive range stated):
   *
   *   DECIMAL_PLACES   {number}           0 to MAX
   *   ROUNDING_MODE    {number}           0 to 8
   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
   *   CRYPTO           {boolean}          true or false
   *   MODULO_MODE      {number}           0 to 9
   *   POW_PRECISION       {number}           0 to MAX
   *   ALPHABET         {string}           A string of two or more unique characters which does
   *                                       not contain '.'.
   *   FORMAT           {object}           An object with some of the following properties:
   *     prefix                 {string}
   *     groupSize              {number}
   *     secondaryGroupSize     {number}
   *     groupSeparator         {string}
   *     decimalSeparator       {string}
   *     fractionGroupSize      {number}
   *     fractionGroupSeparator {string}
   *     suffix                 {string}
   *
   * (The values assigned to the above FORMAT object properties are not checked for validity.)
   *
   * E.g.
   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
   *
   * Ignore properties/parameters set to null or undefined, except for ALPHABET.
   *
   * Return an object with the properties current values.
   */
  BigNumber.config = BigNumber.set = function (obj) {
    var p, v;

    if (obj != null) {

      if (typeof obj == 'object') {

        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
          v = obj[p];
          intCheck(v, 0, MAX, p);
          DECIMAL_PLACES = v;
        }

        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
          v = obj[p];
          intCheck(v, 0, 8, p);
          ROUNDING_MODE = v;
        }

        // EXPONENTIAL_AT {number|number[]}
        // Integer, -MAX to MAX inclusive or
        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
          v = obj[p];
          if (v && v.pop) {
            intCheck(v[0], -MAX, 0, p);
            intCheck(v[1], 0, MAX, p);
            TO_EXP_NEG = v[0];
            TO_EXP_POS = v[1];
          } else {
            intCheck(v, -MAX, MAX, p);
            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
          }
        }

        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
        if (obj.hasOwnProperty(p = 'RANGE')) {
          v = obj[p];
          if (v && v.pop) {
            intCheck(v[0], -MAX, -1, p);
            intCheck(v[1], 1, MAX, p);
            MIN_EXP = v[0];
            MAX_EXP = v[1];
          } else {
            intCheck(v, -MAX, MAX, p);
            if (v) {
              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
            } else {
              throw Error
               (bignumberError + p + ' cannot be zero: ' + v);
            }
          }
        }

        // CRYPTO {boolean} true or false.
        // '[BigNumber Error] CRYPTO not true or false: {v}'
        // '[BigNumber Error] crypto unavailable'
        if (obj.hasOwnProperty(p = 'CRYPTO')) {
          v = obj[p];
          if (v === !!v) {
            if (v) {
              if (typeof crypto != 'undefined' && crypto &&
               (crypto.getRandomValues || crypto.randomBytes)) {
                CRYPTO = v;
              } else {
                CRYPTO = !v;
                throw Error
                 (bignumberError + 'crypto unavailable');
              }
            } else {
              CRYPTO = v;
            }
          } else {
            throw Error
             (bignumberError + p + ' not true or false: ' + v);
          }
        }

        // MODULO_MODE {number} Integer, 0 to 9 inclusive.
        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
          v = obj[p];
          intCheck(v, 0, 9, p);
          MODULO_MODE = v;
        }

        // POW_PRECISION {number} Integer, 0 to MAX inclusive.
        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
          v = obj[p];
          intCheck(v, 0, MAX, p);
          POW_PRECISION = v;
        }

        // FORMAT {object}
        // '[BigNumber Error] FORMAT not an object: {v}'
        if (obj.hasOwnProperty(p = 'FORMAT')) {
          v = obj[p];
          if (typeof v == 'object') FORMAT = v;
          else throw Error
           (bignumberError + p + ' not an object: ' + v);
        }

        // ALPHABET {string}
        // '[BigNumber Error] ALPHABET invalid: {v}'
        if (obj.hasOwnProperty(p = 'ALPHABET')) {
          v = obj[p];

          // Disallow if less than two characters,
          // or if it contains '+', '-', '.', whitespace, or a repeated character.
          if (typeof v == 'string' && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';
            ALPHABET = v;
          } else {
            throw Error
             (bignumberError + p + ' invalid: ' + v);
          }
        }

      } else {

        // '[BigNumber Error] Object expected: {v}'
        throw Error
         (bignumberError + 'Object expected: ' + obj);
      }
    }

    return {
      DECIMAL_PLACES: DECIMAL_PLACES,
      ROUNDING_MODE: ROUNDING_MODE,
      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
      RANGE: [MIN_EXP, MAX_EXP],
      CRYPTO: CRYPTO,
      MODULO_MODE: MODULO_MODE,
      POW_PRECISION: POW_PRECISION,
      FORMAT: FORMAT,
      ALPHABET: ALPHABET
    };
  };


  /*
   * Return true if v is a BigNumber instance, otherwise return false.
   *
   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
   *
   * v {any}
   *
   * '[BigNumber Error] Invalid BigNumber: {v}'
   */
  BigNumber.isBigNumber = function (v) {
    if (!v || v._isBigNumber !== true) return false;
    if (!BigNumber.DEBUG) return true;

    var i, n,
      c = v.c,
      e = v.e,
      s = v.s;

    out: if ({}.toString.call(c) == '[object Array]') {

      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {

        // If the first element is zero, the BigNumber value must be zero.
        if (c[0] === 0) {
          if (e === 0 && c.length === 1) return true;
          break out;
        }

        // Calculate number of digits that c[0] should have, based on the exponent.
        i = (e + 1) % LOG_BASE;
        if (i < 1) i += LOG_BASE;

        // Calculate number of digits of c[0].
        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
        if (String(c[0]).length == i) {

          for (i = 0; i < c.length; i++) {
            n = c[i];
            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
          }

          // Last element cannot be zero, unless it is the only element.
          if (n !== 0) return true;
        }
      }

    // Infinity/NaN
    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
      return true;
    }

    throw Error
      (bignumberError + 'Invalid BigNumber: ' + v);
  };


  /*
   * Return a new BigNumber whose value is the maximum of the arguments.
   *
   * arguments {number|string|BigNumber}
   */
  BigNumber.maximum = BigNumber.max = function () {
    return maxOrMin(arguments, P.lt);
  };


  /*
   * Return a new BigNumber whose value is the minimum of the arguments.
   *
   * arguments {number|string|BigNumber}
   */
  BigNumber.minimum = BigNumber.min = function () {
    return maxOrMin(arguments, P.gt);
  };


  /*
   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
   * zeros are produced).
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
   * '[BigNumber Error] crypto unavailable'
   */
  BigNumber.random = (function () {
    var pow2_53 = 0x20000000000000;

    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
    // Check if Math.random() produces more than 32 bits of randomness.
    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
     ? function () { return mathfloor(Math.random() * pow2_53); }
     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
       (Math.random() * 0x800000 | 0); };

    return function (dp) {
      var a, b, e, k, v,
        i = 0,
        c = [],
        rand = new BigNumber(ONE);

      if (dp == null) dp = DECIMAL_PLACES;
      else intCheck(dp, 0, MAX);

      k = mathceil(dp / LOG_BASE);

      if (CRYPTO) {

        // Browsers supporting crypto.getRandomValues.
        if (crypto.getRandomValues) {

          a = crypto.getRandomValues(new Uint32Array(k *= 2));

          for (; i < k;) {

            // 53 bits:
            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
            //                                     11111 11111111 11111111
            // 0x20000 is 2^21.
            v = a[i] * 0x20000 + (a[i + 1] >>> 11);

            // Rejection sampling:
            // 0 <= v < 9007199254740992
            // Probability that v >= 9e15, is
            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
            if (v >= 9e15) {
              b = crypto.getRandomValues(new Uint32Array(2));
              a[i] = b[0];
              a[i + 1] = b[1];
            } else {

              // 0 <= v <= 8999999999999999
              // 0 <= (v % 1e14) <= 99999999999999
              c.push(v % 1e14);
              i += 2;
            }
          }
          i = k / 2;

        // Node.js supporting crypto.randomBytes.
        } else if (crypto.randomBytes) {

          // buffer
          a = crypto.randomBytes(k *= 7);

          for (; i < k;) {

            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
            // 0x100000000 is 2^32, 0x1000000 is 2^24
            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
            // 0 <= v < 9007199254740992
            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

            if (v >= 9e15) {
              crypto.randomBytes(7).copy(a, i);
            } else {

              // 0 <= (v % 1e14) <= 99999999999999
              c.push(v % 1e14);
              i += 7;
            }
          }
          i = k / 7;
        } else {
          CRYPTO = false;
          throw Error
           (bignumberError + 'crypto unavailable');
        }
      }

      // Use Math.random.
      if (!CRYPTO) {

        for (; i < k;) {
          v = random53bitInt();
          if (v < 9e15) c[i++] = v % 1e14;
        }
      }

      k = c[--i];
      dp %= LOG_BASE;

      // Convert trailing digits to zeros according to dp.
      if (k && dp) {
        v = POWS_TEN[LOG_BASE - dp];
        c[i] = mathfloor(k / v) * v;
      }

      // Remove trailing elements which are zero.
      for (; c[i] === 0; c.pop(), i--);

      // Zero?
      if (i < 0) {
        c = [e = 0];
      } else {

        // Remove leading elements which are zero and adjust exponent accordingly.
        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

        // Count the digits of the first element of c to determine leading zeros, and...
        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

        // adjust the exponent accordingly.
        if (i < LOG_BASE) e -= LOG_BASE - i;
      }

      rand.e = e;
      rand.c = c;
      return rand;
    };
  })();


   /*
   * Return a BigNumber whose value is the sum of the arguments.
   *
   * arguments {number|string|BigNumber}
   */
  BigNumber.sum = function () {
    var i = 1,
      args = arguments,
      sum = new BigNumber(args[0]);
    for (; i < args.length;) sum = sum.plus(args[i++]);
    return sum;
  };


  // PRIVATE FUNCTIONS


  // Called by BigNumber and BigNumber.prototype.toString.
  convertBase = (function () {
    var decimal = '0123456789';

    /*
     * Convert string of baseIn to an array of numbers of baseOut.
     * Eg. toBaseOut('255', 10, 16) returns [15, 15].
     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
     */
    function toBaseOut(str, baseIn, baseOut, alphabet) {
      var j,
        arr = [0],
        arrL,
        i = 0,
        len = str.length;

      for (; i < len;) {
        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

        arr[0] += alphabet.indexOf(str.charAt(i++));

        for (j = 0; j < arr.length; j++) {

          if (arr[j] > baseOut - 1) {
            if (arr[j + 1] == null) arr[j + 1] = 0;
            arr[j + 1] += arr[j] / baseOut | 0;
            arr[j] %= baseOut;
          }
        }
      }

      return arr.reverse();
    }

    // Convert a numeric string of baseIn to a numeric string of baseOut.
    // If the caller is toString, we are converting from base 10 to baseOut.
    // If the caller is BigNumber, we are converting from baseIn to base 10.
    return function (str, baseIn, baseOut, sign, callerIsToString) {
      var alphabet, d, e, k, r, x, xc, y,
        i = str.indexOf('.'),
        dp = DECIMAL_PLACES,
        rm = ROUNDING_MODE;

      // Non-integer.
      if (i >= 0) {
        k = POW_PRECISION;

        // Unlimited precision.
        POW_PRECISION = 0;
        str = str.replace('.', '');
        y = new BigNumber(baseIn);
        x = y.pow(str.length - i);
        POW_PRECISION = k;

        // Convert str as if an integer, then restore the fraction part by dividing the
        // result by its base raised to a power.

        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
         10, baseOut, decimal);
        y.e = y.c.length;
      }

      // Convert the number as integer.

      xc = toBaseOut(str, baseIn, baseOut, callerIsToString
       ? (alphabet = ALPHABET, decimal)
       : (alphabet = decimal, ALPHABET));

      // xc now represents str as an integer and converted to baseOut. e is the exponent.
      e = k = xc.length;

      // Remove trailing zeros.
      for (; xc[--k] == 0; xc.pop());

      // Zero?
      if (!xc[0]) return alphabet.charAt(0);

      // Does str represent an integer? If so, no need for the division.
      if (i < 0) {
        --e;
      } else {
        x.c = xc;
        x.e = e;

        // The sign is needed for correct rounding.
        x.s = sign;
        x = div(x, y, dp, rm, baseOut);
        xc = x.c;
        r = x.r;
        e = x.e;
      }

      // xc now represents str converted to baseOut.

      // THe index of the rounding digit.
      d = e + dp + 1;

      // The rounding digit: the digit to the right of the digit that may be rounded up.
      i = xc[d];

      // Look at the rounding digits and mode to determine whether to round up.

      k = baseOut / 2;
      r = r || d < 0 || xc[d + 1] != null;

      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
             rm == (x.s < 0 ? 8 : 7));

      // If the index of the rounding digit is not greater than zero, or xc represents
      // zero, then the result of the base conversion is zero or, if rounding up, a value
      // such as 0.00001.
      if (d < 1 || !xc[0]) {

        // 1^-dp or 0
        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
      } else {

        // Truncate xc to the required number of decimal places.
        xc.length = d;

        // Round up?
        if (r) {

          // Rounding up may mean the previous digit has to be rounded up and so on.
          for (--baseOut; ++xc[--d] > baseOut;) {
            xc[d] = 0;

            if (!d) {
              ++e;
              xc = [1].concat(xc);
            }
          }
        }

        // Determine trailing zeros.
        for (k = xc.length; !xc[--k];);

        // E.g. [4, 11, 15] becomes 4bf.
        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

        // Add leading zeros, decimal point and trailing zeros as required.
        str = toFixedPoint(str, e, alphabet.charAt(0));
      }

      // The caller will add the sign.
      return str;
    };
  })();


  // Perform division in the specified base. Called by div and convertBase.
  div = (function () {

    // Assume non-zero x and k.
    function multiply(x, k, base) {
      var m, temp, xlo, xhi,
        carry = 0,
        i = x.length,
        klo = k % SQRT_BASE,
        khi = k / SQRT_BASE | 0;

      for (x = x.slice(); i--;) {
        xlo = x[i] % SQRT_BASE;
        xhi = x[i] / SQRT_BASE | 0;
        m = khi * xlo + xhi * klo;
        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
        x[i] = temp % base;
      }

      if (carry) x = [carry].concat(x);

      return x;
    }

    function compare(a, b, aL, bL) {
      var i, cmp;

      if (aL != bL) {
        cmp = aL > bL ? 1 : -1;
      } else {

        for (i = cmp = 0; i < aL; i++) {

          if (a[i] != b[i]) {
            cmp = a[i] > b[i] ? 1 : -1;
            break;
          }
        }
      }

      return cmp;
    }

    function subtract(a, b, aL, base) {
      var i = 0;

      // Subtract b from a.
      for (; aL--;) {
        a[aL] -= i;
        i = a[aL] < b[aL] ? 1 : 0;
        a[aL] = i * base + a[aL] - b[aL];
      }

      // Remove leading zeros.
      for (; !a[0] && a.length > 1; a.splice(0, 1));
    }

    // x: dividend, y: divisor.
    return function (x, y, dp, rm, base) {
      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
        yL, yz,
        s = x.s == y.s ? 1 : -1,
        xc = x.c,
        yc = y.c;

      // Either NaN, Infinity or 0?
      if (!xc || !xc[0] || !yc || !yc[0]) {

        return new BigNumber(

         // Return NaN if either NaN, or both Infinity or 0.
         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
          xc && xc[0] == 0 || !yc ? s * 0 : s / 0
       );
      }

      q = new BigNumber(s);
      qc = q.c = [];
      e = x.e - y.e;
      s = dp + e + 1;

      if (!base) {
        base = BASE;
        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
        s = s / LOG_BASE | 0;
      }

      // Result exponent may be one less then the current value of e.
      // The coefficients of the BigNumbers from convertBase may have trailing zeros.
      for (i = 0; yc[i] == (xc[i] || 0); i++);

      if (yc[i] > (xc[i] || 0)) e--;

      if (s < 0) {
        qc.push(1);
        more = true;
      } else {
        xL = xc.length;
        yL = yc.length;
        i = 0;
        s += 2;

        // Normalise xc and yc so highest order digit of yc is >= base / 2.

        n = mathfloor(base / (yc[0] + 1));

        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
        if (n > 1) {
          yc = multiply(yc, n, base);
          xc = multiply(xc, n, base);
          yL = yc.length;
          xL = xc.length;
        }

        xi = yL;
        rem = xc.slice(0, yL);
        remL = rem.length;

        // Add zeros to make remainder as long as divisor.
        for (; remL < yL; rem[remL++] = 0);
        yz = yc.slice();
        yz = [0].concat(yz);
        yc0 = yc[0];
        if (yc[1] >= base / 2) yc0++;
        // Not necessary, but to prevent trial digit n > base, when using base 3.
        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

        do {
          n = 0;

          // Compare divisor and remainder.
          cmp = compare(yc, rem, yL, remL);

          // If divisor < remainder.
          if (cmp < 0) {

            // Calculate trial digit, n.

            rem0 = rem[0];
            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

            // n is how many times the divisor goes into the current remainder.
            n = mathfloor(rem0 / yc0);

            //  Algorithm:
            //  product = divisor multiplied by trial digit (n).
            //  Compare product and remainder.
            //  If product is greater than remainder:
            //    Subtract divisor from product, decrement trial digit.
            //  Subtract product from remainder.
            //  If product was less than remainder at the last compare:
            //    Compare new remainder and divisor.
            //    If remainder is greater than divisor:
            //      Subtract divisor from remainder, increment trial digit.

            if (n > 1) {

              // n may be > base only when base is 3.
              if (n >= base) n = base - 1;

              // product = divisor * trial digit.
              prod = multiply(yc, n, base);
              prodL = prod.length;
              remL = rem.length;

              // Compare product and remainder.
              // If product > remainder then trial digit n too high.
              // n is 1 too high about 5% of the time, and is not known to have
              // ever been more than 1 too high.
              while (compare(prod, rem, prodL, remL) == 1) {
                n--;

                // Subtract divisor from product.
                subtract(prod, yL < prodL ? yz : yc, prodL, base);
                prodL = prod.length;
                cmp = 1;
              }
            } else {

              // n is 0 or 1, cmp is -1.
              // If n is 0, there is no need to compare yc and rem again below,
              // so change cmp to 1 to avoid it.
              // If n is 1, leave cmp as -1, so yc and rem are compared again.
              if (n == 0) {

                // divisor < remainder, so n must be at least 1.
                cmp = n = 1;
              }

              // product = divisor
              prod = yc.slice();
              prodL = prod.length;
            }

            if (prodL < remL) prod = [0].concat(prod);

            // Subtract product from remainder.
            subtract(rem, prod, remL, base);
            remL = rem.length;

             // If product was < remainder.
            if (cmp == -1) {

              // Compare divisor and new remainder.
              // If divisor < new remainder, subtract divisor from remainder.
              // Trial digit n too low.
              // n is 1 too low about 5% of the time, and very rarely 2 too low.
              while (compare(yc, rem, yL, remL) < 1) {
                n++;

                // Subtract divisor from remainder.
                subtract(rem, yL < remL ? yz : yc, remL, base);
                remL = rem.length;
              }
            }
          } else if (cmp === 0) {
            n++;
            rem = [0];
          } // else cmp === 1 and n will be 0

          // Add the next digit, n, to the result array.
          qc[i++] = n;

          // Update the remainder.
          if (rem[0]) {
            rem[remL++] = xc[xi] || 0;
          } else {
            rem = [xc[xi]];
            remL = 1;
          }
        } while ((xi++ < xL || rem[0] != null) && s--);

        more = rem[0] != null;

        // Leading zero?
        if (!qc[0]) qc.splice(0, 1);
      }

      if (base == BASE) {

        // To calculate q.e, first get the number of digits of qc[0].
        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

      // Caller is convertBase.
      } else {
        q.e = e;
        q.r = +more;
      }

      return q;
    };
  })();


  /*
   * Return a string representing the value of BigNumber n in fixed-point or exponential
   * notation rounded to the specified decimal places or significant digits.
   *
   * n: a BigNumber.
   * i: the index of the last digit required (i.e. the digit that may be rounded up).
   * rm: the rounding mode.
   * id: 1 (toExponential) or 2 (toPrecision).
   */
  function format(n, i, rm, id) {
    var c0, e, ne, len, str;

    if (rm == null) rm = ROUNDING_MODE;
    else intCheck(rm, 0, 8);

    if (!n.c) return n.toString();

    c0 = n.c[0];
    ne = n.e;

    if (i == null) {
      str = coeffToString(n.c);
      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)
       ? toExponential(str, ne)
       : toFixedPoint(str, ne, '0');
    } else {
      n = round(new BigNumber(n), i, rm);

      // n.e may have changed if the value was rounded up.
      e = n.e;

      str = coeffToString(n.c);
      len = str.length;

      // toPrecision returns exponential notation if the number of significant digits
      // specified is less than the number of digits necessary to represent the integer
      // part of the value in fixed-point notation.

      // Exponential notation.
      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

        // Append zeros?
        for (; len < i; str += '0', len++);
        str = toExponential(str, e);

      // Fixed-point notation.
      } else {
        i -= ne;
        str = toFixedPoint(str, e, '0');

        // Append zeros?
        if (e + 1 > len) {
          if (--i > 0) for (str += '.'; i--; str += '0');
        } else {
          i += e - len;
          if (i > 0) {
            if (e + 1 == len) str += '.';
            for (; i--; str += '0');
          }
        }
      }
    }

    return n.s < 0 && c0 ? '-' + str : str;
  }


  // Handle BigNumber.max and BigNumber.min.
  function maxOrMin(args, method) {
    var n,
      i = 1,
      m = new BigNumber(args[0]);

    for (; i < args.length; i++) {
      n = new BigNumber(args[i]);

      // If any number is NaN, return NaN.
      if (!n.s) {
        m = n;
        break;
      } else if (method.call(m, n)) {
        m = n;
      }
    }

    return m;
  }


  /*
   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
   * Called by minus, plus and times.
   */
  function normalise(n, c, e) {
    var i = 1,
      j = c.length;

     // Remove trailing zeros.
    for (; !c[--j]; c.pop());

    // Calculate the base 10 exponent. First get the number of digits of c[0].
    for (j = c[0]; j >= 10; j /= 10, i++);

    // Overflow?
    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

      // Infinity.
      n.c = n.e = null;

    // Underflow?
    } else if (e < MIN_EXP) {

      // Zero.
      n.c = [n.e = 0];
    } else {
      n.e = e;
      n.c = c;
    }

    return n;
  }


  // Handle values that fail the validity test in BigNumber.
  parseNumeric = (function () {
    var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
      dotAfter = /^([^.]+)\.$/,
      dotBefore = /^\.([^.]+)$/,
      isInfinityOrNaN = /^-?(Infinity|NaN)$/,
      whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

    return function (x, str, isNum, b) {
      var base,
        s = isNum ? str : str.replace(whitespaceOrPlus, '');

      // No exception on ±Infinity or NaN.
      if (isInfinityOrNaN.test(s)) {
        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
      } else {
        if (!isNum) {

          // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
          s = s.replace(basePrefix, function (m, p1, p2) {
            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
            return !b || b == base ? p1 : m;
          });

          if (b) {
            base = b;

            // E.g. '1.' to '1', '.1' to '0.1'
            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
          }

          if (str != s) return new BigNumber(s, base);
        }

        // '[BigNumber Error] Not a number: {n}'
        // '[BigNumber Error] Not a base {b} number: {n}'
        if (BigNumber.DEBUG) {
          throw Error
            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
        }

        // NaN
        x.s = null;
      }

      x.c = x.e = null;
    }
  })();


  /*
   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
   * If r is truthy, it is known that there are more digits after the rounding digit.
   */
  function round(x, sd, rm, r) {
    var d, i, j, k, n, ni, rd,
      xc = x.c,
      pows10 = POWS_TEN;

    // if x is not Infinity or NaN...
    if (xc) {

      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
      // n is a base 1e14 number, the value of the element of array x.c containing rd.
      // ni is the index of n within x.c.
      // d is the number of digits of n.
      // i is the index of rd within n including leading zeros.
      // j is the actual index of rd within n (if < 0, rd is a leading zero).
      out: {

        // Get the number of digits of the first element of xc.
        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
        i = sd - d;

        // If the rounding digit is in the first element of xc...
        if (i < 0) {
          i += LOG_BASE;
          j = sd;
          n = xc[ni = 0];

          // Get the rounding digit at index j of n.
          rd = n / pows10[d - j - 1] % 10 | 0;
        } else {
          ni = mathceil((i + 1) / LOG_BASE);

          if (ni >= xc.length) {

            if (r) {

              // Needed by sqrt.
              for (; xc.length <= ni; xc.push(0));
              n = rd = 0;
              d = 1;
              i %= LOG_BASE;
              j = i - LOG_BASE + 1;
            } else {
              break out;
            }
          } else {
            n = k = xc[ni];

            // Get the number of digits of n.
            for (d = 1; k >= 10; k /= 10, d++);

            // Get the index of rd within n.
            i %= LOG_BASE;

            // Get the index of rd within n, adjusted for leading zeros.
            // The number of leading zeros of n is given by LOG_BASE - d.
            j = i - LOG_BASE + d;

            // Get the rounding digit at index j of n.
            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
          }
        }

        r = r || sd < 0 ||

        // Are there any non-zero digits after the rounding digit?
        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

        r = rm < 4
         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

          // Check whether the digit to the left of the rounding digit is odd.
          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
           rm == (x.s < 0 ? 8 : 7));

        if (sd < 1 || !xc[0]) {
          xc.length = 0;

          if (r) {

            // Convert sd to decimal places.
            sd -= x.e + 1;

            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
            x.e = -sd || 0;
          } else {

            // Zero.
            xc[0] = x.e = 0;
          }

          return x;
        }

        // Remove excess digits.
        if (i == 0) {
          xc.length = ni;
          k = 1;
          ni--;
        } else {
          xc.length = ni + 1;
          k = pows10[LOG_BASE - i];

          // E.g. 56700 becomes 56000 if 7 is the rounding digit.
          // j > 0 means i > number of leading zeros of n.
          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
        }

        // Round up?
        if (r) {

          for (; ;) {

            // If the digit to be rounded up is in the first element of xc...
            if (ni == 0) {

              // i will be the length of xc[0] before k is added.
              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
              j = xc[0] += k;
              for (k = 1; j >= 10; j /= 10, k++);

              // if i != k the length has increased.
              if (i != k) {
                x.e++;
                if (xc[0] == BASE) xc[0] = 1;
              }

              break;
            } else {
              xc[ni] += k;
              if (xc[ni] != BASE) break;
              xc[ni--] = 0;
              k = 1;
            }
          }
        }

        // Remove trailing zeros.
        for (i = xc.length; xc[--i] === 0; xc.pop());
      }

      // Overflow? Infinity.
      if (x.e > MAX_EXP) {
        x.c = x.e = null;

      // Underflow? Zero.
      } else if (x.e < MIN_EXP) {
        x.c = [x.e = 0];
      }
    }

    return x;
  }


  function valueOf(n) {
    var str,
      e = n.e;

    if (e === null) return n.toString();

    str = coeffToString(n.c);

    str = e <= TO_EXP_NEG || e >= TO_EXP_POS
      ? toExponential(str, e)
      : toFixedPoint(str, e, '0');

    return n.s < 0 ? '-' + str : str;
  }


  // PROTOTYPE/INSTANCE METHODS


  /*
   * Return a new BigNumber whose value is the absolute value of this BigNumber.
   */
  P.absoluteValue = P.abs = function () {
    var x = new BigNumber(this);
    if (x.s < 0) x.s = 1;
    return x;
  };


  /*
   * Return
   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
   *   0 if they have the same value,
   *   or null if the value of either is NaN.
   */
  P.comparedTo = function (y, b) {
    return compare(this, new BigNumber(y, b));
  };


  /*
   * If dp is undefined or null or true or false, return the number of decimal places of the
   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
   *
   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
   * ROUNDING_MODE if rm is omitted.
   *
   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
   */
  P.decimalPlaces = P.dp = function (dp, rm) {
    var c, n, v,
      x = this;

    if (dp != null) {
      intCheck(dp, 0, MAX);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);

      return round(new BigNumber(x), dp + x.e + 1, rm);
    }

    if (!(c = x.c)) return null;
    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

    // Subtract the number of trailing zeros of the last number.
    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
    if (n < 0) n = 0;

    return n;
  };


  /*
   *  n / 0 = I
   *  n / N = N
   *  n / I = 0
   *  0 / n = 0
   *  0 / 0 = N
   *  0 / N = N
   *  0 / I = 0
   *  N / n = N
   *  N / 0 = N
   *  N / N = N
   *  N / I = N
   *  I / n = I
   *  I / 0 = I
   *  I / N = N
   *  I / I = N
   *
   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
   */
  P.dividedBy = P.div = function (y, b) {
    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
  };


  /*
   * Return a new BigNumber whose value is the integer part of dividing the value of this
   * BigNumber by the value of BigNumber(y, b).
   */
  P.dividedToIntegerBy = P.idiv = function (y, b) {
    return div(this, new BigNumber(y, b), 0, 1);
  };


  /*
   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
   *
   * If m is present, return the result modulo m.
   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
   *
   * The modular power operation works efficiently when x, n, and m are integers, otherwise it
   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
   *
   * n {number|string|BigNumber} The exponent. An integer.
   * [m] {number|string|BigNumber} The modulus.
   *
   * '[BigNumber Error] Exponent not an integer: {n}'
   */
  P.exponentiatedBy = P.pow = function (n, m) {
    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,
      x = this;

    n = new BigNumber(n);

    // Allow NaN and ±Infinity, but not other non-integers.
    if (n.c && !n.isInteger()) {
      throw Error
        (bignumberError + 'Exponent not an integer: ' + valueOf(n));
    }

    if (m != null) m = new BigNumber(m);

    // Exponent of MAX_SAFE_INTEGER is 15.
    nIsBig = n.e > 14;

    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

      // The sign of the result of pow when x is negative depends on the evenness of n.
      // If +n overflows to ±Infinity, the evenness of n would be not be known.
      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
      return m ? y.mod(m) : y;
    }

    nIsNeg = n.s < 0;

    if (m) {

      // x % m returns NaN if abs(m) is zero, or m is NaN.
      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

      isModExp = !nIsNeg && x.isInteger() && m.isInteger();

      if (isModExp) x = x.mod(m);

    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
      // [1, 240000000]
      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
      // [80000000000000]  [99999750000000]
      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

      // If x is negative and n is odd, k = -0, else k = 0.
      k = x.s < 0 && isOdd(n) ? -0 : 0;

      // If x >= 1, k = ±Infinity.
      if (x.e > -1) k = 1 / k;

      // If n is negative return ±0, else return ±Infinity.
      return new BigNumber(nIsNeg ? 1 / k : k);

    } else if (POW_PRECISION) {

      // Truncating each coefficient array to a length of k after each multiplication
      // equates to truncating significant digits to POW_PRECISION + [28, 41],
      // i.e. there will be a minimum of 28 guard digits retained.
      k = mathceil(POW_PRECISION / LOG_BASE + 2);
    }

    if (nIsBig) {
      half = new BigNumber(0.5);
      if (nIsNeg) n.s = 1;
      nIsOdd = isOdd(n);
    } else {
      i = Math.abs(+valueOf(n));
      nIsOdd = i % 2;
    }

    y = new BigNumber(ONE);

    // Performs 54 loop iterations for n of 9007199254740991.
    for (; ;) {

      if (nIsOdd) {
        y = y.times(x);
        if (!y.c) break;

        if (k) {
          if (y.c.length > k) y.c.length = k;
        } else if (isModExp) {
          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
        }
      }

      if (i) {
        i = mathfloor(i / 2);
        if (i === 0) break;
        nIsOdd = i % 2;
      } else {
        n = n.times(half);
        round(n, n.e + 1, 1);

        if (n.e > 14) {
          nIsOdd = isOdd(n);
        } else {
          i = +valueOf(n);
          if (i === 0) break;
          nIsOdd = i % 2;
        }
      }

      x = x.times(x);

      if (k) {
        if (x.c && x.c.length > k) x.c.length = k;
      } else if (isModExp) {
        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
      }
    }

    if (isModExp) return y;
    if (nIsNeg) y = ONE.div(y);

    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
  };


  /*
   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
   *
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
   */
  P.integerValue = function (rm) {
    var n = new BigNumber(this);
    if (rm == null) rm = ROUNDING_MODE;
    else intCheck(rm, 0, 8);
    return round(n, n.e + 1, rm);
  };


  /*
   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
   * otherwise return false.
   */
  P.isEqualTo = P.eq = function (y, b) {
    return compare(this, new BigNumber(y, b)) === 0;
  };


  /*
   * Return true if the value of this BigNumber is a finite number, otherwise return false.
   */
  P.isFinite = function () {
    return !!this.c;
  };


  /*
   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
   * otherwise return false.
   */
  P.isGreaterThan = P.gt = function (y, b) {
    return compare(this, new BigNumber(y, b)) > 0;
  };


  /*
   * Return true if the value of this BigNumber is greater than or equal to the value of
   * BigNumber(y, b), otherwise return false.
   */
  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

  };


  /*
   * Return true if the value of this BigNumber is an integer, otherwise return false.
   */
  P.isInteger = function () {
    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
  };


  /*
   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
   * otherwise return false.
   */
  P.isLessThan = P.lt = function (y, b) {
    return compare(this, new BigNumber(y, b)) < 0;
  };


  /*
   * Return true if the value of this BigNumber is less than or equal to the value of
   * BigNumber(y, b), otherwise return false.
   */
  P.isLessThanOrEqualTo = P.lte = function (y, b) {
    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
  };


  /*
   * Return true if the value of this BigNumber is NaN, otherwise return false.
   */
  P.isNaN = function () {
    return !this.s;
  };


  /*
   * Return true if the value of this BigNumber is negative, otherwise return false.
   */
  P.isNegative = function () {
    return this.s < 0;
  };


  /*
   * Return true if the value of this BigNumber is positive, otherwise return false.
   */
  P.isPositive = function () {
    return this.s > 0;
  };


  /*
   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
   */
  P.isZero = function () {
    return !!this.c && this.c[0] == 0;
  };


  /*
   *  n - 0 = n
   *  n - N = N
   *  n - I = -I
   *  0 - n = -n
   *  0 - 0 = 0
   *  0 - N = N
   *  0 - I = -I
   *  N - n = N
   *  N - 0 = N
   *  N - N = N
   *  N - I = N
   *  I - n = I
   *  I - 0 = I
   *  I - N = N
   *  I - I = N
   *
   * Return a new BigNumber whose value is the value of this BigNumber minus the value of
   * BigNumber(y, b).
   */
  P.minus = function (y, b) {
    var i, j, t, xLTy,
      x = this,
      a = x.s;

    y = new BigNumber(y, b);
    b = y.s;

    // Either NaN?
    if (!a || !b) return new BigNumber(NaN);

    // Signs differ?
    if (a != b) {
      y.s = -b;
      return x.plus(y);
    }

    var xe = x.e / LOG_BASE,
      ye = y.e / LOG_BASE,
      xc = x.c,
      yc = y.c;

    if (!xe || !ye) {

      // Either Infinity?
      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

      // Either zero?
      if (!xc[0] || !yc[0]) {

        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
         ROUNDING_MODE == 3 ? -0 : 0);
      }
    }

    xe = bitFloor(xe);
    ye = bitFloor(ye);
    xc = xc.slice();

    // Determine which is the bigger number.
    if (a = xe - ye) {

      if (xLTy = a < 0) {
        a = -a;
        t = xc;
      } else {
        ye = xe;
        t = yc;
      }

      t.reverse();

      // Prepend zeros to equalise exponents.
      for (b = a; b--; t.push(0));
      t.reverse();
    } else {

      // Exponents equal. Check digit by digit.
      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

      for (a = b = 0; b < j; b++) {

        if (xc[b] != yc[b]) {
          xLTy = xc[b] < yc[b];
          break;
        }
      }
    }

    // x < y? Point xc to the array of the bigger number.
    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

    b = (j = yc.length) - (i = xc.length);

    // Append zeros to xc if shorter.
    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
    if (b > 0) for (; b--; xc[i++] = 0);
    b = BASE - 1;

    // Subtract yc from xc.
    for (; j > a;) {

      if (xc[--j] < yc[j]) {
        for (i = j; i && !xc[--i]; xc[i] = b);
        --xc[i];
        xc[j] += BASE;
      }

      xc[j] -= yc[j];
    }

    // Remove leading zeros and adjust exponent accordingly.
    for (; xc[0] == 0; xc.splice(0, 1), --ye);

    // Zero?
    if (!xc[0]) {

      // Following IEEE 754 (2008) 6.3,
      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
      y.s = ROUNDING_MODE == 3 ? -1 : 1;
      y.c = [y.e = 0];
      return y;
    }

    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
    // for finite x and y.
    return normalise(y, xc, ye);
  };


  /*
   *   n % 0 =  N
   *   n % N =  N
   *   n % I =  n
   *   0 % n =  0
   *  -0 % n = -0
   *   0 % 0 =  N
   *   0 % N =  N
   *   0 % I =  0
   *   N % n =  N
   *   N % 0 =  N
   *   N % N =  N
   *   N % I =  N
   *   I % n =  N
   *   I % 0 =  N
   *   I % N =  N
   *   I % I =  N
   *
   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
   * BigNumber(y, b). The result depends on the value of MODULO_MODE.
   */
  P.modulo = P.mod = function (y, b) {
    var q, s,
      x = this;

    y = new BigNumber(y, b);

    // Return NaN if x is Infinity or NaN, or y is NaN or zero.
    if (!x.c || !y.s || y.c && !y.c[0]) {
      return new BigNumber(NaN);

    // Return x if y is Infinity or x is zero.
    } else if (!y.c || x.c && !x.c[0]) {
      return new BigNumber(x);
    }

    if (MODULO_MODE == 9) {

      // Euclidian division: q = sign(y) * floor(x / abs(y))
      // r = x - qy    where  0 <= r < abs(y)
      s = y.s;
      y.s = 1;
      q = div(x, y, 0, 3);
      y.s = s;
      q.s *= s;
    } else {
      q = div(x, y, 0, MODULO_MODE);
    }

    y = x.minus(q.times(y));

    // To match JavaScript %, ensure sign of zero is sign of dividend.
    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

    return y;
  };


  /*
   *  n * 0 = 0
   *  n * N = N
   *  n * I = I
   *  0 * n = 0
   *  0 * 0 = 0
   *  0 * N = N
   *  0 * I = N
   *  N * n = N
   *  N * 0 = N
   *  N * N = N
   *  N * I = N
   *  I * n = I
   *  I * 0 = N
   *  I * N = N
   *  I * I = I
   *
   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
   * of BigNumber(y, b).
   */
  P.multipliedBy = P.times = function (y, b) {
    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
      base, sqrtBase,
      x = this,
      xc = x.c,
      yc = (y = new BigNumber(y, b)).c;

    // Either NaN, ±Infinity or ±0?
    if (!xc || !yc || !xc[0] || !yc[0]) {

      // Return NaN if either is NaN, or one is 0 and the other is Infinity.
      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
        y.c = y.e = y.s = null;
      } else {
        y.s *= x.s;

        // Return ±Infinity if either is ±Infinity.
        if (!xc || !yc) {
          y.c = y.e = null;

        // Return ±0 if either is ±0.
        } else {
          y.c = [0];
          y.e = 0;
        }
      }

      return y;
    }

    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
    y.s *= x.s;
    xcL = xc.length;
    ycL = yc.length;

    // Ensure xc points to longer array and xcL to its length.
    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

    // Initialise the result array with zeros.
    for (i = xcL + ycL, zc = []; i--; zc.push(0));

    base = BASE;
    sqrtBase = SQRT_BASE;

    for (i = ycL; --i >= 0;) {
      c = 0;
      ylo = yc[i] % sqrtBase;
      yhi = yc[i] / sqrtBase | 0;

      for (k = xcL, j = i + k; j > i;) {
        xlo = xc[--k] % sqrtBase;
        xhi = xc[k] / sqrtBase | 0;
        m = yhi * xlo + xhi * ylo;
        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
        zc[j--] = xlo % base;
      }

      zc[j] = c;
    }

    if (c) {
      ++e;
    } else {
      zc.splice(0, 1);
    }

    return normalise(y, zc, e);
  };


  /*
   * Return a new BigNumber whose value is the value of this BigNumber negated,
   * i.e. multiplied by -1.
   */
  P.negated = function () {
    var x = new BigNumber(this);
    x.s = -x.s || null;
    return x;
  };


  /*
   *  n + 0 = n
   *  n + N = N
   *  n + I = I
   *  0 + n = n
   *  0 + 0 = 0
   *  0 + N = N
   *  0 + I = I
   *  N + n = N
   *  N + 0 = N
   *  N + N = N
   *  N + I = N
   *  I + n = I
   *  I + 0 = I
   *  I + N = N
   *  I + I = I
   *
   * Return a new BigNumber whose value is the value of this BigNumber plus the value of
   * BigNumber(y, b).
   */
  P.plus = function (y, b) {
    var t,
      x = this,
      a = x.s;

    y = new BigNumber(y, b);
    b = y.s;

    // Either NaN?
    if (!a || !b) return new BigNumber(NaN);

    // Signs differ?
     if (a != b) {
      y.s = -b;
      return x.minus(y);
    }

    var xe = x.e / LOG_BASE,
      ye = y.e / LOG_BASE,
      xc = x.c,
      yc = y.c;

    if (!xe || !ye) {

      // Return ±Infinity if either ±Infinity.
      if (!xc || !yc) return new BigNumber(a / 0);

      // Either zero?
      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
    }

    xe = bitFloor(xe);
    ye = bitFloor(ye);
    xc = xc.slice();

    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
    if (a = xe - ye) {
      if (a > 0) {
        ye = xe;
        t = yc;
      } else {
        a = -a;
        t = xc;
      }

      t.reverse();
      for (; a--; t.push(0));
      t.reverse();
    }

    a = xc.length;
    b = yc.length;

    // Point xc to the longer array, and b to the shorter length.
    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
    for (a = 0; b;) {
      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
    }

    if (a) {
      xc = [a].concat(xc);
      ++ye;
    }

    // No need to check for zero, as +x + +y != 0 && -x + -y != 0
    // ye = MAX_EXP + 1 possible
    return normalise(y, xc, ye);
  };


  /*
   * If sd is undefined or null or true or false, return the number of significant digits of
   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
   * If sd is true include integer-part trailing zeros in the count.
   *
   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
   * ROUNDING_MODE if rm is omitted.
   *
   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
   *                     boolean: whether to count integer-part trailing zeros: true or false.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
   */
  P.precision = P.sd = function (sd, rm) {
    var c, n, v,
      x = this;

    if (sd != null && sd !== !!sd) {
      intCheck(sd, 1, MAX);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);

      return round(new BigNumber(x), sd, rm);
    }

    if (!(c = x.c)) return null;
    v = c.length - 1;
    n = v * LOG_BASE + 1;

    if (v = c[v]) {

      // Subtract the number of trailing zeros of the last element.
      for (; v % 10 == 0; v /= 10, n--);

      // Add the number of digits of the first element.
      for (v = c[0]; v >= 10; v /= 10, n++);
    }

    if (sd && x.e + 1 > n) n = x.e + 1;

    return n;
  };


  /*
   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
   *
   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
   */
  P.shiftedBy = function (k) {
    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    return this.times('1e' + k);
  };


  /*
   *  sqrt(-n) =  N
   *  sqrt(N) =  N
   *  sqrt(-I) =  N
   *  sqrt(I) =  I
   *  sqrt(0) =  0
   *  sqrt(-0) = -0
   *
   * Return a new BigNumber whose value is the square root of the value of this BigNumber,
   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
   */
  P.squareRoot = P.sqrt = function () {
    var m, n, r, rep, t,
      x = this,
      c = x.c,
      s = x.s,
      e = x.e,
      dp = DECIMAL_PLACES + 4,
      half = new BigNumber('0.5');

    // Negative/NaN/Infinity/zero?
    if (s !== 1 || !c || !c[0]) {
      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
    }

    // Initial estimate.
    s = Math.sqrt(+valueOf(x));

    // Math.sqrt underflow/overflow?
    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
    if (s == 0 || s == 1 / 0) {
      n = coeffToString(c);
      if ((n.length + e) % 2 == 0) n += '0';
      s = Math.sqrt(+n);
      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

      if (s == 1 / 0) {
        n = '5e' + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf('e') + 1) + e;
      }

      r = new BigNumber(n);
    } else {
      r = new BigNumber(s + '');
    }

    // Check for zero.
    // r could be zero if MIN_EXP is changed after the this value was created.
    // This would cause a division by zero (x/t) and hence Infinity below, which would cause
    // coeffToString to throw.
    if (r.c[0]) {
      e = r.e;
      s = e + dp;
      if (s < 3) s = 0;

      // Newton-Raphson iteration.
      for (; ;) {
        t = r;
        r = half.times(t.plus(div(x, t, dp, 1)));

        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

          // The exponent of r may here be one less than the final result exponent,
          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
          // are indexed correctly.
          if (r.e < e) --s;
          n = n.slice(s - 3, s + 1);

          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
          // iteration.
          if (n == '9999' || !rep && n == '4999') {

            // On the first iteration only, check to see if rounding up gives the
            // exact result as the nines may infinitely repeat.
            if (!rep) {
              round(t, t.e + DECIMAL_PLACES + 2, 0);

              if (t.times(t).eq(x)) {
                r = t;
                break;
              }
            }

            dp += 4;
            s += 4;
            rep = 1;
          } else {

            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
            // result. If not, then there are further digits and m will be truthy.
            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

              // Truncate to the first rounding digit.
              round(r, r.e + DECIMAL_PLACES + 2, 1);
              m = !r.times(r).eq(x);
            }

            break;
          }
        }
      }
    }

    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
  };


  /*
   * Return a string representing the value of this BigNumber in exponential notation and
   * rounded using ROUNDING_MODE to dp fixed decimal places.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
   */
  P.toExponential = function (dp, rm) {
    if (dp != null) {
      intCheck(dp, 0, MAX);
      dp++;
    }
    return format(this, dp, rm, 1);
  };


  /*
   * Return a string representing the value of this BigNumber in fixed-point notation rounding
   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
   *
   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
   * but e.g. (-0.00001).toFixed(0) is '-0'.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
   */
  P.toFixed = function (dp, rm) {
    if (dp != null) {
      intCheck(dp, 0, MAX);
      dp = dp + this.e + 1;
    }
    return format(this, dp, rm);
  };


  /*
   * Return a string representing the value of this BigNumber in fixed-point notation rounded
   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
   * of the format or FORMAT object (see BigNumber.set).
   *
   * The formatting object may contain some or all of the properties shown below.
   *
   * FORMAT = {
   *   prefix: '',
   *   groupSize: 3,
   *   secondaryGroupSize: 0,
   *   groupSeparator: ',',
   *   decimalSeparator: '.',
   *   fractionGroupSize: 0,
   *   fractionGroupSeparator: '\xA0',      // non-breaking space
   *   suffix: ''
   * };
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   * [format] {object} Formatting options. See FORMAT pbject above.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
   * '[BigNumber Error] Argument not an object: {format}'
   */
  P.toFormat = function (dp, rm, format) {
    var str,
      x = this;

    if (format == null) {
      if (dp != null && rm && typeof rm == 'object') {
        format = rm;
        rm = null;
      } else if (dp && typeof dp == 'object') {
        format = dp;
        dp = rm = null;
      } else {
        format = FORMAT;
      }
    } else if (typeof format != 'object') {
      throw Error
        (bignumberError + 'Argument not an object: ' + format);
    }

    str = x.toFixed(dp, rm);

    if (x.c) {
      var i,
        arr = str.split('.'),
        g1 = +format.groupSize,
        g2 = +format.secondaryGroupSize,
        groupSeparator = format.groupSeparator || '',
        intPart = arr[0],
        fractionPart = arr[1],
        isNeg = x.s < 0,
        intDigits = isNeg ? intPart.slice(1) : intPart,
        len = intDigits.length;

      if (g2) i = g1, g1 = g2, g2 = i, len -= i;

      if (g1 > 0 && len > 0) {
        i = len % g1 || g1;
        intPart = intDigits.substr(0, i);
        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
        if (isNeg) intPart = '-' + intPart;
      }

      str = fractionPart
       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)
        ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
         '$&' + (format.fractionGroupSeparator || ''))
        : fractionPart)
       : intPart;
    }

    return (format.prefix || '') + str + (format.suffix || '');
  };


  /*
   * Return an array of two BigNumbers representing the value of this BigNumber as a simple
   * fraction with an integer numerator and an integer denominator.
   * The denominator will be a positive non-zero value less than or equal to the specified
   * maximum denominator. If a maximum denominator is not specified, the denominator will be
   * the lowest value necessary to represent the number exactly.
   *
   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
   *
   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
   */
  P.toFraction = function (md) {
    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,
      x = this,
      xc = x.c;

    if (md != null) {
      n = new BigNumber(md);

      // Throw if md is less than one or is not an integer, unless it is Infinity.
      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
        throw Error
          (bignumberError + 'Argument ' +
            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
      }
    }

    if (!xc) return new BigNumber(x);

    d = new BigNumber(ONE);
    n1 = d0 = new BigNumber(ONE);
    d1 = n0 = new BigNumber(ONE);
    s = coeffToString(xc);

    // Determine initial denominator.
    // d is a power of 10 and the minimum max denominator that specifies the value exactly.
    e = d.e = s.length - x.e - 1;
    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

    exp = MAX_EXP;
    MAX_EXP = 1 / 0;
    n = new BigNumber(s);

    // n0 = d1 = 0
    n0.c[0] = 0;

    for (; ;)  {
      q = div(n, d, 0, 1);
      d2 = d0.plus(q.times(d1));
      if (d2.comparedTo(md) == 1) break;
      d0 = d1;
      d1 = d2;
      n1 = n0.plus(q.times(d2 = n1));
      n0 = d2;
      d = n.minus(q.times(d2 = d));
      n = d2;
    }

    d2 = div(md.minus(d0), d1, 0, 1);
    n0 = n0.plus(d2.times(n1));
    d0 = d0.plus(d2.times(d1));
    n0.s = n1.s = x.s;
    e = e * 2;

    // Determine which fraction is closer to x, n0/d0 or n1/d1
    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

    MAX_EXP = exp;

    return r;
  };


  /*
   * Return the value of this BigNumber converted to a number primitive.
   */
  P.toNumber = function () {
    return +valueOf(this);
  };


  /*
   * Return a string representing the value of this BigNumber rounded to sd significant digits
   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
   * necessary to represent the integer part of the value in fixed-point notation, then use
   * exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
   */
  P.toPrecision = function (sd, rm) {
    if (sd != null) intCheck(sd, 1, MAX);
    return format(this, sd, rm, 2);
  };


  /*
   * Return a string representing the value of this BigNumber in base b, or base 10 if b is
   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
   * TO_EXP_NEG, return exponential notation.
   *
   * [b] {number} Integer, 2 to ALPHABET.length inclusive.
   *
   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
   */
  P.toString = function (b) {
    var str,
      n = this,
      s = n.s,
      e = n.e;

    // Infinity or NaN?
    if (e === null) {
      if (s) {
        str = 'Infinity';
        if (s < 0) str = '-' + str;
      } else {
        str = 'NaN';
      }
    } else {
      if (b == null) {
        str = e <= TO_EXP_NEG || e >= TO_EXP_POS
         ? toExponential(coeffToString(n.c), e)
         : toFixedPoint(coeffToString(n.c), e, '0');
      } else if (b === 10 && alphabetHasNormalDecimalDigits) {
        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
        str = toFixedPoint(coeffToString(n.c), n.e, '0');
      } else {
        intCheck(b, 2, ALPHABET.length, 'Base');
        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
      }

      if (s < 0 && n.c[0]) str = '-' + str;
    }

    return str;
  };


  /*
   * Return as toString, but do not accept a base argument, and include the minus sign for
   * negative zero.
   */
  P.valueOf = P.toJSON = function () {
    return valueOf(this);
  };


  P._isBigNumber = true;

  P[Symbol.toStringTag] = 'BigNumber';

  // Node.js v10.12.0+
  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;

  if (configObject != null) BigNumber.set(configObject);

  return BigNumber;
}


// PRIVATE HELPER FUNCTIONS

// These functions don't need access to variables,
// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


function bitFloor(n) {
  var i = n | 0;
  return n > 0 || n === i ? i : i - 1;
}


// Return a coefficient array as a string of base 10 digits.
function coeffToString(a) {
  var s, z,
    i = 1,
    j = a.length,
    r = a[0] + '';

  for (; i < j;) {
    s = a[i++] + '';
    z = LOG_BASE - s.length;
    for (; z--; s = '0' + s);
    r += s;
  }

  // Determine trailing zeros.
  for (j = r.length; r.charCodeAt(--j) === 48;);

  return r.slice(0, j + 1 || 1);
}


// Compare the value of BigNumbers x and y.
function compare(x, y) {
  var a, b,
    xc = x.c,
    yc = y.c,
    i = x.s,
    j = y.s,
    k = x.e,
    l = y.e;

  // Either NaN?
  if (!i || !j) return null;

  a = xc && !xc[0];
  b = yc && !yc[0];

  // Either zero?
  if (a || b) return a ? b ? 0 : -j : i;

  // Signs differ?
  if (i != j) return i;

  a = i < 0;
  b = k == l;

  // Either Infinity?
  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

  // Compare exponents.
  if (!b) return k > l ^ a ? 1 : -1;

  j = (k = xc.length) < (l = yc.length) ? k : l;

  // Compare digit by digit.
  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

  // Compare lengths.
  return k == l ? 0 : k > l ^ a ? 1 : -1;
}


/*
 * Check that n is a primitive number, an integer, and in range, otherwise throw.
 */
function intCheck(n, min, max, name) {
  if (n < min || n > max || n !== mathfloor(n)) {
    throw Error
     (bignumberError + (name || 'Argument') + (typeof n == 'number'
       ? n < min || n > max ? ' out of range: ' : ' not an integer: '
       : ' not a primitive number: ') + String(n));
  }
}


// Assumes finite n.
function isOdd(n) {
  var k = n.c.length - 1;
  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
}


function toExponential(str, e) {
  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
   (e < 0 ? 'e' : 'e+') + e;
}


function toFixedPoint(str, e, z) {
  var len, zs;

  // Negative exponent?
  if (e < 0) {

    // Prepend zeros.
    for (zs = z + '.'; ++e; zs += z);
    str = zs + str;

  // Positive exponent
  } else {
    len = str.length;

    // Append zeros.
    if (++e > len) {
      for (zs = z, e -= len; --e; zs += z);
      str += zs;
    } else if (e < len) {
      str = str.slice(0, e) + '.' + str.slice(e);
    }
  }

  return str;
}


// EXPORT


var BigNumber = clone();

const ucoreToCORE = (ucore) => {
    return new BigNumber(ucore).dividedBy(1000000).valueOf();
};
const coreToUCORE = (core) => {
    return new BigNumber(core).multipliedBy(1000000).valueOf();
};
const parseFloatToRoyaltyRate = (royalty) => {
    const float = new BigNumber(royalty);
    return float.dividedBy(100).multipliedBy("1000000000000000000").toString();
};

function parseClassFeatures(features) {
    return features.map((f) => ClassFeature[f]);
}

export { tx$1 as FTMessages, tx as NFTBetaMessages, tx$2 as NFTMessages, coreToUCORE, coreumRegistry, CoreumClient as default, generateKey, generateWalletFromMnemonic, isValidCoreumAddress, parseClassFeatures, parseFloatToRoyaltyRate, ucoreToCORE };
//# sourceMappingURL=index.esm.js.map
