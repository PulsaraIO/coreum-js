// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: coreum-protos/nft/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../../google/protobuf/any";
import { ClassFeature, classFeatureFromJSON, classFeatureToJSON } from "./nft";
import { Params } from "./params";
import { DataDynamicIndexedItem } from "./types";

export const protobufPackage = "coreum.asset.nft.v1";

/** MsgIssueClass defines message for the IssueClass method. */
export interface MsgIssueClass {
  issuer: string;
  symbol: string;
  name: string;
  description: string;
  uri: string;
  uriHash: string;
  data: Any | undefined;
  features: ClassFeature[];
  royaltyRate: string;
}

/** MsgMint defines message for the Mint method. */
export interface MsgMint {
  sender: string;
  classId: string;
  id: string;
  uri: string;
  uriHash: string;
  /** Data can be DataBytes or DataDynamic. */
  data: Any | undefined;
  recipient: string;
}

/** MsgUpdateData defines message to update the dynamic data. */
export interface MsgUpdateData {
  sender: string;
  classId: string;
  id: string;
  items: DataDynamicIndexedItem[];
}

/** MsgBurn defines message for the Burn method. */
export interface MsgBurn {
  sender: string;
  classId: string;
  id: string;
}

export interface MsgFreeze {
  sender: string;
  classId: string;
  id: string;
}

export interface MsgUnfreeze {
  sender: string;
  classId: string;
  id: string;
}

export interface MsgClassFreeze {
  sender: string;
  classId: string;
  account: string;
}

export interface MsgClassUnfreeze {
  sender: string;
  classId: string;
  account: string;
}

export interface MsgAddToWhitelist {
  sender: string;
  classId: string;
  id: string;
  account: string;
}

export interface MsgRemoveFromWhitelist {
  sender: string;
  classId: string;
  id: string;
  account: string;
}

export interface MsgAddToClassWhitelist {
  sender: string;
  classId: string;
  account: string;
}

export interface MsgRemoveFromClassWhitelist {
  sender: string;
  classId: string;
  account: string;
}

export interface MsgUpdateParams {
  authority: string;
  params: Params | undefined;
}

export interface EmptyResponse {}

function createBaseMsgIssueClass(): MsgIssueClass {
  return {
    issuer: "",
    symbol: "",
    name: "",
    description: "",
    uri: "",
    uriHash: "",
    data: undefined,
    features: [],
    royaltyRate: "",
  };
}

export const MsgIssueClass: MessageFns<MsgIssueClass> = {
  encode(
    message: MsgIssueClass,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.issuer !== "") {
      writer.uint32(10).string(message.issuer);
    }
    if (message.symbol !== "") {
      writer.uint32(18).string(message.symbol);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.uri !== "") {
      writer.uint32(42).string(message.uri);
    }
    if (message.uriHash !== "") {
      writer.uint32(50).string(message.uriHash);
    }
    if (message.data !== undefined) {
      Any.encode(message.data, writer.uint32(58).fork()).join();
    }
    writer.uint32(66).fork();
    for (const v of message.features) {
      writer.int32(v);
    }
    writer.join();
    if (message.royaltyRate !== "") {
      writer.uint32(74).string(message.royaltyRate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgIssueClass {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgIssueClass();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.issuer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.symbol = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.uriHash = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.data = Any.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.features.push(reader.int32() as any);

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.features.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.royaltyRate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgIssueClass {
    return {
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      uriHash: isSet(object.uriHash) ? globalThis.String(object.uriHash) : "",
      data: isSet(object.data) ? Any.fromJSON(object.data) : undefined,
      features: globalThis.Array.isArray(object?.features)
        ? object.features.map((e: any) => classFeatureFromJSON(e))
        : [],
      royaltyRate: isSet(object.royaltyRate)
        ? globalThis.String(object.royaltyRate)
        : "",
    };
  },

  toJSON(message: MsgIssueClass): unknown {
    const obj: any = {};
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.uriHash !== "") {
      obj.uriHash = message.uriHash;
    }
    if (message.data !== undefined) {
      obj.data = Any.toJSON(message.data);
    }
    if (message.features?.length) {
      obj.features = message.features.map((e) => classFeatureToJSON(e));
    }
    if (message.royaltyRate !== "") {
      obj.royaltyRate = message.royaltyRate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgIssueClass>, I>>(
    base?: I
  ): MsgIssueClass {
    return MsgIssueClass.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgIssueClass>, I>>(
    object: I
  ): MsgIssueClass {
    const message = createBaseMsgIssueClass();
    message.issuer = object.issuer ?? "";
    message.symbol = object.symbol ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.uri = object.uri ?? "";
    message.uriHash = object.uriHash ?? "";
    message.data =
      object.data !== undefined && object.data !== null
        ? Any.fromPartial(object.data)
        : undefined;
    message.features = object.features?.map((e) => e) || [];
    message.royaltyRate = object.royaltyRate ?? "";
    return message;
  },
};

function createBaseMsgMint(): MsgMint {
  return {
    sender: "",
    classId: "",
    id: "",
    uri: "",
    uriHash: "",
    data: undefined,
    recipient: "",
  };
}

export const MsgMint: MessageFns<MsgMint> = {
  encode(
    message: MsgMint,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.classId !== "") {
      writer.uint32(18).string(message.classId);
    }
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    if (message.uri !== "") {
      writer.uint32(34).string(message.uri);
    }
    if (message.uriHash !== "") {
      writer.uint32(42).string(message.uriHash);
    }
    if (message.data !== undefined) {
      Any.encode(message.data, writer.uint32(50).fork()).join();
    }
    if (message.recipient !== "") {
      writer.uint32(58).string(message.recipient);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgMint {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgMint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.classId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.uriHash = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.data = Any.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.recipient = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgMint {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      uriHash: isSet(object.uriHash) ? globalThis.String(object.uriHash) : "",
      data: isSet(object.data) ? Any.fromJSON(object.data) : undefined,
      recipient: isSet(object.recipient)
        ? globalThis.String(object.recipient)
        : "",
    };
  },

  toJSON(message: MsgMint): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.uriHash !== "") {
      obj.uriHash = message.uriHash;
    }
    if (message.data !== undefined) {
      obj.data = Any.toJSON(message.data);
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgMint>, I>>(base?: I): MsgMint {
    return MsgMint.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgMint>, I>>(object: I): MsgMint {
    const message = createBaseMsgMint();
    message.sender = object.sender ?? "";
    message.classId = object.classId ?? "";
    message.id = object.id ?? "";
    message.uri = object.uri ?? "";
    message.uriHash = object.uriHash ?? "";
    message.data =
      object.data !== undefined && object.data !== null
        ? Any.fromPartial(object.data)
        : undefined;
    message.recipient = object.recipient ?? "";
    return message;
  },
};

function createBaseMsgUpdateData(): MsgUpdateData {
  return { sender: "", classId: "", id: "", items: [] };
}

export const MsgUpdateData: MessageFns<MsgUpdateData> = {
  encode(
    message: MsgUpdateData,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.classId !== "") {
      writer.uint32(18).string(message.classId);
    }
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    for (const v of message.items) {
      DataDynamicIndexedItem.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateData {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.classId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.items.push(
            DataDynamicIndexedItem.decode(reader, reader.uint32())
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateData {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      items: globalThis.Array.isArray(object?.items)
        ? object.items.map((e: any) => DataDynamicIndexedItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MsgUpdateData): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => DataDynamicIndexedItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateData>, I>>(
    base?: I
  ): MsgUpdateData {
    return MsgUpdateData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateData>, I>>(
    object: I
  ): MsgUpdateData {
    const message = createBaseMsgUpdateData();
    message.sender = object.sender ?? "";
    message.classId = object.classId ?? "";
    message.id = object.id ?? "";
    message.items =
      object.items?.map((e) => DataDynamicIndexedItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgBurn(): MsgBurn {
  return { sender: "", classId: "", id: "" };
}

export const MsgBurn: MessageFns<MsgBurn> = {
  encode(
    message: MsgBurn,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.classId !== "") {
      writer.uint32(18).string(message.classId);
    }
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgBurn {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBurn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.classId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgBurn {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: MsgBurn): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBurn>, I>>(base?: I): MsgBurn {
    return MsgBurn.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBurn>, I>>(object: I): MsgBurn {
    const message = createBaseMsgBurn();
    message.sender = object.sender ?? "";
    message.classId = object.classId ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseMsgFreeze(): MsgFreeze {
  return { sender: "", classId: "", id: "" };
}

export const MsgFreeze: MessageFns<MsgFreeze> = {
  encode(
    message: MsgFreeze,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.classId !== "") {
      writer.uint32(18).string(message.classId);
    }
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgFreeze {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgFreeze();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.classId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgFreeze {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: MsgFreeze): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgFreeze>, I>>(base?: I): MsgFreeze {
    return MsgFreeze.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgFreeze>, I>>(
    object: I
  ): MsgFreeze {
    const message = createBaseMsgFreeze();
    message.sender = object.sender ?? "";
    message.classId = object.classId ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseMsgUnfreeze(): MsgUnfreeze {
  return { sender: "", classId: "", id: "" };
}

export const MsgUnfreeze: MessageFns<MsgUnfreeze> = {
  encode(
    message: MsgUnfreeze,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.classId !== "") {
      writer.uint32(18).string(message.classId);
    }
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUnfreeze {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnfreeze();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.classId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUnfreeze {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: MsgUnfreeze): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUnfreeze>, I>>(base?: I): MsgUnfreeze {
    return MsgUnfreeze.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUnfreeze>, I>>(
    object: I
  ): MsgUnfreeze {
    const message = createBaseMsgUnfreeze();
    message.sender = object.sender ?? "";
    message.classId = object.classId ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseMsgClassFreeze(): MsgClassFreeze {
  return { sender: "", classId: "", account: "" };
}

export const MsgClassFreeze: MessageFns<MsgClassFreeze> = {
  encode(
    message: MsgClassFreeze,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.classId !== "") {
      writer.uint32(18).string(message.classId);
    }
    if (message.account !== "") {
      writer.uint32(26).string(message.account);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgClassFreeze {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClassFreeze();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.classId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.account = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgClassFreeze {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
    };
  },

  toJSON(message: MsgClassFreeze): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgClassFreeze>, I>>(
    base?: I
  ): MsgClassFreeze {
    return MsgClassFreeze.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgClassFreeze>, I>>(
    object: I
  ): MsgClassFreeze {
    const message = createBaseMsgClassFreeze();
    message.sender = object.sender ?? "";
    message.classId = object.classId ?? "";
    message.account = object.account ?? "";
    return message;
  },
};

function createBaseMsgClassUnfreeze(): MsgClassUnfreeze {
  return { sender: "", classId: "", account: "" };
}

export const MsgClassUnfreeze: MessageFns<MsgClassUnfreeze> = {
  encode(
    message: MsgClassUnfreeze,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.classId !== "") {
      writer.uint32(18).string(message.classId);
    }
    if (message.account !== "") {
      writer.uint32(26).string(message.account);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgClassUnfreeze {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClassUnfreeze();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.classId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.account = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgClassUnfreeze {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
    };
  },

  toJSON(message: MsgClassUnfreeze): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgClassUnfreeze>, I>>(
    base?: I
  ): MsgClassUnfreeze {
    return MsgClassUnfreeze.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgClassUnfreeze>, I>>(
    object: I
  ): MsgClassUnfreeze {
    const message = createBaseMsgClassUnfreeze();
    message.sender = object.sender ?? "";
    message.classId = object.classId ?? "";
    message.account = object.account ?? "";
    return message;
  },
};

function createBaseMsgAddToWhitelist(): MsgAddToWhitelist {
  return { sender: "", classId: "", id: "", account: "" };
}

export const MsgAddToWhitelist: MessageFns<MsgAddToWhitelist> = {
  encode(
    message: MsgAddToWhitelist,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.classId !== "") {
      writer.uint32(18).string(message.classId);
    }
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    if (message.account !== "") {
      writer.uint32(34).string(message.account);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddToWhitelist {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddToWhitelist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.classId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.account = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddToWhitelist {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
    };
  },

  toJSON(message: MsgAddToWhitelist): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddToWhitelist>, I>>(
    base?: I
  ): MsgAddToWhitelist {
    return MsgAddToWhitelist.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddToWhitelist>, I>>(
    object: I
  ): MsgAddToWhitelist {
    const message = createBaseMsgAddToWhitelist();
    message.sender = object.sender ?? "";
    message.classId = object.classId ?? "";
    message.id = object.id ?? "";
    message.account = object.account ?? "";
    return message;
  },
};

function createBaseMsgRemoveFromWhitelist(): MsgRemoveFromWhitelist {
  return { sender: "", classId: "", id: "", account: "" };
}

export const MsgRemoveFromWhitelist: MessageFns<MsgRemoveFromWhitelist> = {
  encode(
    message: MsgRemoveFromWhitelist,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.classId !== "") {
      writer.uint32(18).string(message.classId);
    }
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    if (message.account !== "") {
      writer.uint32(34).string(message.account);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): MsgRemoveFromWhitelist {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveFromWhitelist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.classId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.account = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRemoveFromWhitelist {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
    };
  },

  toJSON(message: MsgRemoveFromWhitelist): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveFromWhitelist>, I>>(
    base?: I
  ): MsgRemoveFromWhitelist {
    return MsgRemoveFromWhitelist.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveFromWhitelist>, I>>(
    object: I
  ): MsgRemoveFromWhitelist {
    const message = createBaseMsgRemoveFromWhitelist();
    message.sender = object.sender ?? "";
    message.classId = object.classId ?? "";
    message.id = object.id ?? "";
    message.account = object.account ?? "";
    return message;
  },
};

function createBaseMsgAddToClassWhitelist(): MsgAddToClassWhitelist {
  return { sender: "", classId: "", account: "" };
}

export const MsgAddToClassWhitelist: MessageFns<MsgAddToClassWhitelist> = {
  encode(
    message: MsgAddToClassWhitelist,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.classId !== "") {
      writer.uint32(18).string(message.classId);
    }
    if (message.account !== "") {
      writer.uint32(26).string(message.account);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): MsgAddToClassWhitelist {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddToClassWhitelist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.classId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.account = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddToClassWhitelist {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
    };
  },

  toJSON(message: MsgAddToClassWhitelist): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.classId !== "") {
      obj.classId = message.classId;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddToClassWhitelist>, I>>(
    base?: I
  ): MsgAddToClassWhitelist {
    return MsgAddToClassWhitelist.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddToClassWhitelist>, I>>(
    object: I
  ): MsgAddToClassWhitelist {
    const message = createBaseMsgAddToClassWhitelist();
    message.sender = object.sender ?? "";
    message.classId = object.classId ?? "";
    message.account = object.account ?? "";
    return message;
  },
};

function createBaseMsgRemoveFromClassWhitelist(): MsgRemoveFromClassWhitelist {
  return { sender: "", classId: "", account: "" };
}

export const MsgRemoveFromClassWhitelist: MessageFns<MsgRemoveFromClassWhitelist> =
  {
    encode(
      message: MsgRemoveFromClassWhitelist,
      writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
      if (message.sender !== "") {
        writer.uint32(10).string(message.sender);
      }
      if (message.classId !== "") {
        writer.uint32(18).string(message.classId);
      }
      if (message.account !== "") {
        writer.uint32(26).string(message.account);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number
    ): MsgRemoveFromClassWhitelist {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMsgRemoveFromClassWhitelist();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.sender = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.classId = reader.string();
            continue;
          }
          case 3: {
            if (tag !== 26) {
              break;
            }

            message.account = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): MsgRemoveFromClassWhitelist {
      return {
        sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
        classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
        account: isSet(object.account) ? globalThis.String(object.account) : "",
      };
    },

    toJSON(message: MsgRemoveFromClassWhitelist): unknown {
      const obj: any = {};
      if (message.sender !== "") {
        obj.sender = message.sender;
      }
      if (message.classId !== "") {
        obj.classId = message.classId;
      }
      if (message.account !== "") {
        obj.account = message.account;
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<MsgRemoveFromClassWhitelist>, I>>(
      base?: I
    ): MsgRemoveFromClassWhitelist {
      return MsgRemoveFromClassWhitelist.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<MsgRemoveFromClassWhitelist>, I>>(
      object: I
    ): MsgRemoveFromClassWhitelist {
      const message = createBaseMsgRemoveFromClassWhitelist();
      message.sender = object.sender ?? "";
      message.classId = object.classId ?? "";
      message.account = object.account ?? "";
      return message;
    },
  };

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(
    message: MsgUpdateParams,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority)
        ? globalThis.String(object.authority)
        : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(
    base?: I
  ): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(
    object: I
  ): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params =
      object.params !== undefined && object.params !== null
        ? Params.fromPartial(object.params)
        : undefined;
    return message;
  },
};

function createBaseEmptyResponse(): EmptyResponse {
  return {};
}

export const EmptyResponse: MessageFns<EmptyResponse> = {
  encode(
    _: EmptyResponse,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmptyResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmptyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EmptyResponse {
    return {};
  },

  toJSON(_: EmptyResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<EmptyResponse>, I>>(
    base?: I
  ): EmptyResponse {
    return EmptyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EmptyResponse>, I>>(
    _: I
  ): EmptyResponse {
    const message = createBaseEmptyResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /** IssueClass creates new non-fungible token class. */
  IssueClass(request: MsgIssueClass): Promise<EmptyResponse>;
  /** Mint mints new non-fungible token in the class. */
  Mint(request: MsgMint): Promise<EmptyResponse>;
  /** UpdateData updates the existing non-fungible token data in the class. */
  UpdateData(request: MsgUpdateData): Promise<EmptyResponse>;
  /** Burn burns the existing non-fungible token in the class. */
  Burn(request: MsgBurn): Promise<EmptyResponse>;
  /** Freeze freezes an NFT */
  Freeze(request: MsgFreeze): Promise<EmptyResponse>;
  /** Unfreeze removes the freeze effect already put on an NFT */
  Unfreeze(request: MsgUnfreeze): Promise<EmptyResponse>;
  /** AddToWhitelist sets the account as whitelisted to hold the NFT */
  AddToWhitelist(request: MsgAddToWhitelist): Promise<EmptyResponse>;
  /** RemoveFromWhitelist removes an account from whitelisted list of the NFT */
  RemoveFromWhitelist(request: MsgRemoveFromWhitelist): Promise<EmptyResponse>;
  /**
   * AddToClassWhitelist adds account as whitelist for all the NFTs in the class
   * NOTE: class whitelist does not affect the individual nft whitelisting.
   */
  AddToClassWhitelist(request: MsgAddToClassWhitelist): Promise<EmptyResponse>;
  /**
   * RemoveFromClassWhitelist removes account as whitelist for the entire class
   * NOTE:
   * class whitelist does not affect the individual nft whitelisting.
   * ie. if specific whitelist is granted for an NFT, that whitelist will
   * still be valid, ater we add and remove it from the class whitelist.
   */
  RemoveFromClassWhitelist(
    request: MsgRemoveFromClassWhitelist
  ): Promise<EmptyResponse>;
  /** ClassFreeze freezes all NFTs of a class held by an account. */
  ClassFreeze(request: MsgClassFreeze): Promise<EmptyResponse>;
  /**
   * ClassUnfreeze removes class-freeze on an account for an NFT class.
   * NOTE:
   * class unfreeze does not affect the individual nft freeze.
   */
  ClassUnfreeze(request: MsgClassUnfreeze): Promise<EmptyResponse>;
  /**
   * UpdateParams is a governance operation that sets the parameters of the module.
   * NOTE: all parameters must be provided.
   */
  UpdateParams(request: MsgUpdateParams): Promise<EmptyResponse>;
}

export const MsgServiceName = "coreum.asset.nft.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.IssueClass = this.IssueClass.bind(this);
    this.Mint = this.Mint.bind(this);
    this.UpdateData = this.UpdateData.bind(this);
    this.Burn = this.Burn.bind(this);
    this.Freeze = this.Freeze.bind(this);
    this.Unfreeze = this.Unfreeze.bind(this);
    this.AddToWhitelist = this.AddToWhitelist.bind(this);
    this.RemoveFromWhitelist = this.RemoveFromWhitelist.bind(this);
    this.AddToClassWhitelist = this.AddToClassWhitelist.bind(this);
    this.RemoveFromClassWhitelist = this.RemoveFromClassWhitelist.bind(this);
    this.ClassFreeze = this.ClassFreeze.bind(this);
    this.ClassUnfreeze = this.ClassUnfreeze.bind(this);
    this.UpdateParams = this.UpdateParams.bind(this);
  }
  IssueClass(request: MsgIssueClass): Promise<EmptyResponse> {
    const data = MsgIssueClass.encode(request).finish();
    const promise = this.rpc.request(this.service, "IssueClass", data);
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }

  Mint(request: MsgMint): Promise<EmptyResponse> {
    const data = MsgMint.encode(request).finish();
    const promise = this.rpc.request(this.service, "Mint", data);
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }

  UpdateData(request: MsgUpdateData): Promise<EmptyResponse> {
    const data = MsgUpdateData.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateData", data);
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }

  Burn(request: MsgBurn): Promise<EmptyResponse> {
    const data = MsgBurn.encode(request).finish();
    const promise = this.rpc.request(this.service, "Burn", data);
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }

  Freeze(request: MsgFreeze): Promise<EmptyResponse> {
    const data = MsgFreeze.encode(request).finish();
    const promise = this.rpc.request(this.service, "Freeze", data);
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }

  Unfreeze(request: MsgUnfreeze): Promise<EmptyResponse> {
    const data = MsgUnfreeze.encode(request).finish();
    const promise = this.rpc.request(this.service, "Unfreeze", data);
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }

  AddToWhitelist(request: MsgAddToWhitelist): Promise<EmptyResponse> {
    const data = MsgAddToWhitelist.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddToWhitelist", data);
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }

  RemoveFromWhitelist(request: MsgRemoveFromWhitelist): Promise<EmptyResponse> {
    const data = MsgRemoveFromWhitelist.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveFromWhitelist", data);
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }

  AddToClassWhitelist(request: MsgAddToClassWhitelist): Promise<EmptyResponse> {
    const data = MsgAddToClassWhitelist.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddToClassWhitelist", data);
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }

  RemoveFromClassWhitelist(
    request: MsgRemoveFromClassWhitelist
  ): Promise<EmptyResponse> {
    const data = MsgRemoveFromClassWhitelist.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      "RemoveFromClassWhitelist",
      data
    );
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }

  ClassFreeze(request: MsgClassFreeze): Promise<EmptyResponse> {
    const data = MsgClassFreeze.encode(request).finish();
    const promise = this.rpc.request(this.service, "ClassFreeze", data);
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }

  ClassUnfreeze(request: MsgClassUnfreeze): Promise<EmptyResponse> {
    const data = MsgClassUnfreeze.encode(request).finish();
    const promise = this.rpc.request(this.service, "ClassUnfreeze", data);
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }

  UpdateParams(request: MsgUpdateParams): Promise<EmptyResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array
  ): Promise<Uint8Array>;
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
