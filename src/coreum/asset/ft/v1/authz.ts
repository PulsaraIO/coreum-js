// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: coreum-protos/ft/authz.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "cosmjs-types/binary";
import { Coin } from "cosmjs-types/cosmos/base/v1beta1/coin";

export const protobufPackage = "coreum.asset.ft.v1";

/**
 * MintAuthorization allows the grantee to mint up to mint_limit coin from
 * the granter's account.
 */
export interface MintAuthorization {
  mintLimit: Coin[];
}

/**
 * BurnAuthorization allows the grantee to burn up to burn_limit coin from
 * the granter's account.
 */
export interface BurnAuthorization {
  burnLimit: Coin[];
}

function createBaseMintAuthorization(): MintAuthorization {
  return { mintLimit: [] };
}

export const MintAuthorization: MessageFns<MintAuthorization> = {
  encode(
    message: MintAuthorization,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    for (const v of message.mintLimit) {
      Coin.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MintAuthorization {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMintAuthorization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mintLimit.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MintAuthorization {
    return {
      mintLimit: globalThis.Array.isArray(object?.mintLimit)
        ? object.mintLimit.map((e: any) => Coin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MintAuthorization): unknown {
    const obj: any = {};
    if (message.mintLimit?.length) {
      obj.mintLimit = message.mintLimit.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MintAuthorization>, I>>(
    base?: I
  ): MintAuthorization {
    return MintAuthorization.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MintAuthorization>, I>>(
    object: I
  ): MintAuthorization {
    const message = createBaseMintAuthorization();
    message.mintLimit = object.mintLimit?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBurnAuthorization(): BurnAuthorization {
  return { burnLimit: [] };
}

export const BurnAuthorization: MessageFns<BurnAuthorization> = {
  encode(
    message: BurnAuthorization,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    for (const v of message.burnLimit) {
      Coin.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BurnAuthorization {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBurnAuthorization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.burnLimit.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BurnAuthorization {
    return {
      burnLimit: globalThis.Array.isArray(object?.burnLimit)
        ? object.burnLimit.map((e: any) => Coin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BurnAuthorization): unknown {
    const obj: any = {};
    if (message.burnLimit?.length) {
      obj.burnLimit = message.burnLimit.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BurnAuthorization>, I>>(
    base?: I
  ): BurnAuthorization {
    return BurnAuthorization.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BurnAuthorization>, I>>(
    object: I
  ): BurnAuthorization {
    const message = createBaseBurnAuthorization();
    message.burnLimit = object.burnLimit?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
