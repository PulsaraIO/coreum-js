// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: coreum-protos/dex/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Order, OrderBookData } from "./order";
import { Params } from "./params";

export const protobufPackage = "coreum.dex.v1";

/** GenesisState defines the module genesis state. */
export interface GenesisState {
  /** params defines all the parameters of the module. */
  params: Params | undefined;
  orderBooks: OrderBookDataWithID[];
  orders: Order[];
  /** order_sequence is current order sequence; */
  orderSequence: number;
  accountsDenomsOrdersCounts: AccountDenomOrdersCount[];
}

/** OrderBookDataWithID is a order book data with it's corresponding ID. */
export interface OrderBookDataWithID {
  /** id is order book ID. */
  id: number;
  /** data is order book data. */
  data: OrderBookData | undefined;
}

/** AccountDenomOrderCount is a count of orders per account and denom. */
export interface AccountDenomOrdersCount {
  accountNumber: number;
  denom: string;
  ordersCount: number;
}

function createBaseGenesisState(): GenesisState {
  return { params: undefined, orderBooks: [], orders: [], orderSequence: 0, accountsDenomsOrdersCounts: [] };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.orderBooks) {
      OrderBookDataWithID.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.orders) {
      Order.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.orderSequence !== 0) {
      writer.uint32(32).uint64(message.orderSequence);
    }
    for (const v of message.accountsDenomsOrdersCounts) {
      AccountDenomOrdersCount.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.orderBooks.push(OrderBookDataWithID.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.orders.push(Order.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.orderSequence = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.accountsDenomsOrdersCounts.push(AccountDenomOrdersCount.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      orderBooks: globalThis.Array.isArray(object?.orderBooks)
        ? object.orderBooks.map((e: any) => OrderBookDataWithID.fromJSON(e))
        : [],
      orders: globalThis.Array.isArray(object?.orders) ? object.orders.map((e: any) => Order.fromJSON(e)) : [],
      orderSequence: isSet(object.orderSequence) ? globalThis.Number(object.orderSequence) : 0,
      accountsDenomsOrdersCounts: globalThis.Array.isArray(object?.accountsDenomsOrdersCounts)
        ? object.accountsDenomsOrdersCounts.map((e: any) => AccountDenomOrdersCount.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.orderBooks?.length) {
      obj.orderBooks = message.orderBooks.map((e) => OrderBookDataWithID.toJSON(e));
    }
    if (message.orders?.length) {
      obj.orders = message.orders.map((e) => Order.toJSON(e));
    }
    if (message.orderSequence !== 0) {
      obj.orderSequence = Math.round(message.orderSequence);
    }
    if (message.accountsDenomsOrdersCounts?.length) {
      obj.accountsDenomsOrdersCounts = message.accountsDenomsOrdersCounts.map((e) => AccountDenomOrdersCount.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.orderBooks = object.orderBooks?.map((e) => OrderBookDataWithID.fromPartial(e)) || [];
    message.orders = object.orders?.map((e) => Order.fromPartial(e)) || [];
    message.orderSequence = object.orderSequence ?? 0;
    message.accountsDenomsOrdersCounts =
      object.accountsDenomsOrdersCounts?.map((e) => AccountDenomOrdersCount.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOrderBookDataWithID(): OrderBookDataWithID {
  return { id: 0, data: undefined };
}

export const OrderBookDataWithID: MessageFns<OrderBookDataWithID> = {
  encode(message: OrderBookDataWithID, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.data !== undefined) {
      OrderBookData.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderBookDataWithID {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderBookDataWithID();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = OrderBookData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderBookDataWithID {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      data: isSet(object.data) ? OrderBookData.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: OrderBookDataWithID): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.data !== undefined) {
      obj.data = OrderBookData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderBookDataWithID>, I>>(base?: I): OrderBookDataWithID {
    return OrderBookDataWithID.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderBookDataWithID>, I>>(object: I): OrderBookDataWithID {
    const message = createBaseOrderBookDataWithID();
    message.id = object.id ?? 0;
    message.data = (object.data !== undefined && object.data !== null)
      ? OrderBookData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseAccountDenomOrdersCount(): AccountDenomOrdersCount {
  return { accountNumber: 0, denom: "", ordersCount: 0 };
}

export const AccountDenomOrdersCount: MessageFns<AccountDenomOrdersCount> = {
  encode(message: AccountDenomOrdersCount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountNumber !== 0) {
      writer.uint32(8).uint64(message.accountNumber);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.ordersCount !== 0) {
      writer.uint32(24).uint64(message.ordersCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccountDenomOrdersCount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountDenomOrdersCount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.accountNumber = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ordersCount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountDenomOrdersCount {
    return {
      accountNumber: isSet(object.accountNumber) ? globalThis.Number(object.accountNumber) : 0,
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      ordersCount: isSet(object.ordersCount) ? globalThis.Number(object.ordersCount) : 0,
    };
  },

  toJSON(message: AccountDenomOrdersCount): unknown {
    const obj: any = {};
    if (message.accountNumber !== 0) {
      obj.accountNumber = Math.round(message.accountNumber);
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.ordersCount !== 0) {
      obj.ordersCount = Math.round(message.ordersCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccountDenomOrdersCount>, I>>(base?: I): AccountDenomOrdersCount {
    return AccountDenomOrdersCount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccountDenomOrdersCount>, I>>(object: I): AccountDenomOrdersCount {
    const message = createBaseAccountDenomOrdersCount();
    message.accountNumber = object.accountNumber ?? 0;
    message.denom = object.denom ?? "";
    message.ordersCount = object.ordersCount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
