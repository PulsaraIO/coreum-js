"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: coreum-protos/customparams/tx.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgServiceName = exports.EmptyResponse = exports.MsgUpdateStakingParams = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const params_1 = require("./params");
exports.protobufPackage = "coreum.customparams.v1";
function createBaseMsgUpdateStakingParams() {
    return { authority: "", stakingParams: undefined };
}
exports.MsgUpdateStakingParams = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.stakingParams !== undefined) {
            params_1.StakingParams.encode(message.stakingParams, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateStakingParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.stakingParams = params_1.StakingParams.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            stakingParams: isSet(object.stakingParams) ? params_1.StakingParams.fromJSON(object.stakingParams) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.stakingParams !== undefined) {
            obj.stakingParams = params_1.StakingParams.toJSON(message.stakingParams);
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateStakingParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgUpdateStakingParams();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.stakingParams = (object.stakingParams !== undefined && object.stakingParams !== null)
            ? params_1.StakingParams.fromPartial(object.stakingParams)
            : undefined;
        return message;
    },
};
function createBaseEmptyResponse() {
    return {};
}
exports.EmptyResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEmptyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.EmptyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseEmptyResponse();
        return message;
    },
};
exports.MsgServiceName = "coreum.customparams.v1.Msg";
class MsgClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.MsgServiceName;
        this.rpc = rpc;
        this.UpdateStakingParams = this.UpdateStakingParams.bind(this);
    }
    UpdateStakingParams(request) {
        const data = exports.MsgUpdateStakingParams.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateStakingParams", data);
        return promise.then((data) => exports.EmptyResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
