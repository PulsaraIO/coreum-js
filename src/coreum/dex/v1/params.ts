// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: coreum-protos/dex/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "cosmjs-types/binary";
import { Coin } from "cosmjs-types/cosmos/base/v1beta1/coin";

export const protobufPackage = "coreum.dex.v1";

/** Params keeps gov manageable parameters. */
export interface Params {
  /** default_unified_ref_amount is the default approximate amount you need to buy 1USD, used to for tokens without custom value */
  defaultUnifiedRefAmount: string;
  /** price_tick_exponent is the exponent used for the price tick calculation */
  priceTickExponent: number;
  /** max_orders_per_denom is the maximum number of orders per denom the user can have */
  maxOrdersPerDenom: number;
  /** order_reserve is the reserve required to save the order in the order book */
  orderReserve: Coin | undefined;
}

function createBaseParams(): Params {
  return {
    defaultUnifiedRefAmount: "",
    priceTickExponent: 0,
    maxOrdersPerDenom: 0,
    orderReserve: undefined,
  };
}

export const Params: MessageFns<Params> = {
  encode(
    message: Params,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.defaultUnifiedRefAmount !== "") {
      writer.uint32(10).string(message.defaultUnifiedRefAmount);
    }
    if (message.priceTickExponent !== 0) {
      writer.uint32(16).int32(message.priceTickExponent);
    }
    if (message.maxOrdersPerDenom !== 0) {
      writer.uint32(24).uint64(message.maxOrdersPerDenom);
    }
    if (message.orderReserve !== undefined) {
      Coin.encode(message.orderReserve, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.defaultUnifiedRefAmount = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.priceTickExponent = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxOrdersPerDenom = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.orderReserve = Coin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      defaultUnifiedRefAmount: isSet(object.defaultUnifiedRefAmount)
        ? globalThis.String(object.defaultUnifiedRefAmount)
        : "",
      priceTickExponent: isSet(object.priceTickExponent)
        ? globalThis.Number(object.priceTickExponent)
        : 0,
      maxOrdersPerDenom: isSet(object.maxOrdersPerDenom)
        ? globalThis.Number(object.maxOrdersPerDenom)
        : 0,
      orderReserve: isSet(object.orderReserve)
        ? Coin.fromJSON(object.orderReserve)
        : undefined,
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.defaultUnifiedRefAmount !== "") {
      obj.defaultUnifiedRefAmount = message.defaultUnifiedRefAmount;
    }
    if (message.priceTickExponent !== 0) {
      obj.priceTickExponent = Math.round(message.priceTickExponent);
    }
    if (message.maxOrdersPerDenom !== 0) {
      obj.maxOrdersPerDenom = Math.round(message.maxOrdersPerDenom);
    }
    if (message.orderReserve !== undefined) {
      obj.orderReserve = Coin.toJSON(message.orderReserve);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.defaultUnifiedRefAmount = object.defaultUnifiedRefAmount ?? "";
    message.priceTickExponent = object.priceTickExponent ?? 0;
    message.maxOrdersPerDenom = object.maxOrdersPerDenom ?? 0;
    message.orderReserve =
      object.orderReserve !== undefined && object.orderReserve !== null
        ? Coin.fromPartial(object.orderReserve)
        : undefined;
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
