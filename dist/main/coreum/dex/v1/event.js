"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: coreum-protos/dex/event.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventOrderClosed = exports.EventOrderCreated = exports.EventOrderReduced = exports.EventOrderPlaced = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "coreum.dex.v1";
function createBaseEventOrderPlaced() {
    return { creator: "", id: "", sequence: 0 };
}
exports.EventOrderPlaced = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.sequence !== 0) {
            writer.uint32(24).uint64(message.sequence);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventOrderPlaced();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.sequence = longToNumber(reader.uint64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            sequence: isSet(object.sequence) ? globalThis.Number(object.sequence) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.creator !== "") {
            obj.creator = message.creator;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.sequence !== 0) {
            obj.sequence = Math.round(message.sequence);
        }
        return obj;
    },
    create(base) {
        return exports.EventOrderPlaced.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseEventOrderPlaced();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : "";
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : "";
        message.sequence = (_c = object.sequence) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseEventOrderReduced() {
    return { creator: "", id: "", sequence: 0, sentCoin: "", receivedCoin: "" };
}
exports.EventOrderReduced = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.sequence !== 0) {
            writer.uint32(24).uint64(message.sequence);
        }
        if (message.sentCoin !== "") {
            writer.uint32(34).string(message.sentCoin);
        }
        if (message.receivedCoin !== "") {
            writer.uint32(42).string(message.receivedCoin);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventOrderReduced();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.sequence = longToNumber(reader.uint64());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.sentCoin = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.receivedCoin = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            sequence: isSet(object.sequence) ? globalThis.Number(object.sequence) : 0,
            sentCoin: isSet(object.sentCoin) ? globalThis.String(object.sentCoin) : "",
            receivedCoin: isSet(object.receivedCoin) ? globalThis.String(object.receivedCoin) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.creator !== "") {
            obj.creator = message.creator;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.sequence !== 0) {
            obj.sequence = Math.round(message.sequence);
        }
        if (message.sentCoin !== "") {
            obj.sentCoin = message.sentCoin;
        }
        if (message.receivedCoin !== "") {
            obj.receivedCoin = message.receivedCoin;
        }
        return obj;
    },
    create(base) {
        return exports.EventOrderReduced.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseEventOrderReduced();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : "";
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : "";
        message.sequence = (_c = object.sequence) !== null && _c !== void 0 ? _c : 0;
        message.sentCoin = (_d = object.sentCoin) !== null && _d !== void 0 ? _d : "";
        message.receivedCoin = (_e = object.receivedCoin) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseEventOrderCreated() {
    return { creator: "", id: "", sequence: 0, remainingQuantity: "", remainingBalance: "" };
}
exports.EventOrderCreated = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.sequence !== 0) {
            writer.uint32(24).uint64(message.sequence);
        }
        if (message.remainingQuantity !== "") {
            writer.uint32(34).string(message.remainingQuantity);
        }
        if (message.remainingBalance !== "") {
            writer.uint32(42).string(message.remainingBalance);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventOrderCreated();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.sequence = longToNumber(reader.uint64());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.remainingQuantity = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.remainingBalance = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            sequence: isSet(object.sequence) ? globalThis.Number(object.sequence) : 0,
            remainingQuantity: isSet(object.remainingQuantity) ? globalThis.String(object.remainingQuantity) : "",
            remainingBalance: isSet(object.remainingBalance) ? globalThis.String(object.remainingBalance) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.creator !== "") {
            obj.creator = message.creator;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.sequence !== 0) {
            obj.sequence = Math.round(message.sequence);
        }
        if (message.remainingQuantity !== "") {
            obj.remainingQuantity = message.remainingQuantity;
        }
        if (message.remainingBalance !== "") {
            obj.remainingBalance = message.remainingBalance;
        }
        return obj;
    },
    create(base) {
        return exports.EventOrderCreated.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseEventOrderCreated();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : "";
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : "";
        message.sequence = (_c = object.sequence) !== null && _c !== void 0 ? _c : 0;
        message.remainingQuantity = (_d = object.remainingQuantity) !== null && _d !== void 0 ? _d : "";
        message.remainingBalance = (_e = object.remainingBalance) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseEventOrderClosed() {
    return { creator: "", id: "", sequence: 0, remainingQuantity: "", remainingBalance: "" };
}
exports.EventOrderClosed = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.sequence !== 0) {
            writer.uint32(24).uint64(message.sequence);
        }
        if (message.remainingQuantity !== "") {
            writer.uint32(34).string(message.remainingQuantity);
        }
        if (message.remainingBalance !== "") {
            writer.uint32(42).string(message.remainingBalance);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventOrderClosed();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.sequence = longToNumber(reader.uint64());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.remainingQuantity = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.remainingBalance = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            sequence: isSet(object.sequence) ? globalThis.Number(object.sequence) : 0,
            remainingQuantity: isSet(object.remainingQuantity) ? globalThis.String(object.remainingQuantity) : "",
            remainingBalance: isSet(object.remainingBalance) ? globalThis.String(object.remainingBalance) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.creator !== "") {
            obj.creator = message.creator;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.sequence !== 0) {
            obj.sequence = Math.round(message.sequence);
        }
        if (message.remainingQuantity !== "") {
            obj.remainingQuantity = message.remainingQuantity;
        }
        if (message.remainingBalance !== "") {
            obj.remainingBalance = message.remainingBalance;
        }
        return obj;
    },
    create(base) {
        return exports.EventOrderClosed.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseEventOrderClosed();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : "";
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : "";
        message.sequence = (_c = object.sequence) !== null && _c !== void 0 ? _c : 0;
        message.remainingQuantity = (_d = object.remainingQuantity) !== null && _d !== void 0 ? _d : "";
        message.remainingBalance = (_e = object.remainingBalance) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
