// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: coreum-protos/customparams/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "cosmjs-types/binary";

export const protobufPackage = "coreum.customparams.v1";

/** StakingParams defines the set of additional staking params for the staking module wrapper. */
export interface StakingParams {
  /** min_self_delegation is the validators global self declared minimum for delegation. */
  minSelfDelegation: string;
}

function createBaseStakingParams(): StakingParams {
  return { minSelfDelegation: "" };
}

export const StakingParams: MessageFns<StakingParams> = {
  encode(
    message: StakingParams,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.minSelfDelegation !== "") {
      writer.uint32(10).string(message.minSelfDelegation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StakingParams {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStakingParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.minSelfDelegation = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StakingParams {
    return {
      minSelfDelegation: isSet(object.minSelfDelegation)
        ? globalThis.String(object.minSelfDelegation)
        : "",
    };
  },

  toJSON(message: StakingParams): unknown {
    const obj: any = {};
    if (message.minSelfDelegation !== "") {
      obj.minSelfDelegation = message.minSelfDelegation;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StakingParams>, I>>(
    base?: I
  ): StakingParams {
    return StakingParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StakingParams>, I>>(
    object: I
  ): StakingParams {
    const message = createBaseStakingParams();
    message.minSelfDelegation = object.minSelfDelegation ?? "";
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
