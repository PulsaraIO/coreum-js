// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: coreum-protos/nft/types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "cosmjs-types/binary";

export const protobufPackage = "coreum.asset.nft.v1";

/** DataEditor defines possible data editors. */
export enum DataEditor {
  admin = 0,
  owner = 1,
  UNRECOGNIZED = -1,
}

export function dataEditorFromJSON(object: any): DataEditor {
  switch (object) {
    case 0:
    case "admin":
      return DataEditor.admin;
    case 1:
    case "owner":
      return DataEditor.owner;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataEditor.UNRECOGNIZED;
  }
}

export function dataEditorToJSON(object: DataEditor): string {
  switch (object) {
    case DataEditor.admin:
      return "admin";
    case DataEditor.owner:
      return "owner";
    case DataEditor.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** DataBytes represents the immutable data. */
export interface DataBytes {
  Data: Uint8Array;
}

/** DataDynamicItem contains the updatable data and modification types. */
export interface DataDynamicItem {
  /** contains the set of the data editors, if empty no one can update. */
  editors: DataEditor[];
  data: Uint8Array;
}

/** DataDynamicIndexed contains the data and it's index in the DataDynamic. */
export interface DataDynamicIndexedItem {
  index: number;
  data: Uint8Array;
}

/** DataDynamic is dynamic data which contains the list of the items allowed to be modified base on their modification types. */
export interface DataDynamic {
  items: DataDynamicItem[];
}

function createBaseDataBytes(): DataBytes {
  return { Data: new Uint8Array(0) };
}

export const DataBytes: MessageFns<DataBytes> = {
  encode(
    message: DataBytes,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.Data.length !== 0) {
      writer.uint32(10).bytes(message.Data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataBytes {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataBytes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataBytes {
    return {
      Data: isSet(object.Data)
        ? bytesFromBase64(object.Data)
        : new Uint8Array(0),
    };
  },

  toJSON(message: DataBytes): unknown {
    const obj: any = {};
    if (message.Data.length !== 0) {
      obj.Data = base64FromBytes(message.Data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataBytes>, I>>(base?: I): DataBytes {
    return DataBytes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataBytes>, I>>(
    object: I
  ): DataBytes {
    const message = createBaseDataBytes();
    message.Data = object.Data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseDataDynamicItem(): DataDynamicItem {
  return { editors: [], data: new Uint8Array(0) };
}

export const DataDynamicItem: MessageFns<DataDynamicItem> = {
  encode(
    message: DataDynamicItem,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.editors) {
      writer.int32(v);
    }
    writer.ldelim();
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataDynamicItem {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataDynamicItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.editors.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.editors.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataDynamicItem {
    return {
      editors: globalThis.Array.isArray(object?.editors)
        ? object.editors.map((e: any) => dataEditorFromJSON(e))
        : [],
      data: isSet(object.data)
        ? bytesFromBase64(object.data)
        : new Uint8Array(0),
    };
  },

  toJSON(message: DataDynamicItem): unknown {
    const obj: any = {};
    if (message.editors?.length) {
      obj.editors = message.editors.map((e) => dataEditorToJSON(e));
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataDynamicItem>, I>>(
    base?: I
  ): DataDynamicItem {
    return DataDynamicItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataDynamicItem>, I>>(
    object: I
  ): DataDynamicItem {
    const message = createBaseDataDynamicItem();
    message.editors = object.editors?.map((e) => e) || [];
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseDataDynamicIndexedItem(): DataDynamicIndexedItem {
  return { index: 0, data: new Uint8Array(0) };
}

export const DataDynamicIndexedItem: MessageFns<DataDynamicIndexedItem> = {
  encode(
    message: DataDynamicIndexedItem,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.index !== 0) {
      writer.uint32(8).uint32(message.index);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): DataDynamicIndexedItem {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataDynamicIndexedItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.index = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataDynamicIndexedItem {
    return {
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      data: isSet(object.data)
        ? bytesFromBase64(object.data)
        : new Uint8Array(0),
    };
  },

  toJSON(message: DataDynamicIndexedItem): unknown {
    const obj: any = {};
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataDynamicIndexedItem>, I>>(
    base?: I
  ): DataDynamicIndexedItem {
    return DataDynamicIndexedItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataDynamicIndexedItem>, I>>(
    object: I
  ): DataDynamicIndexedItem {
    const message = createBaseDataDynamicIndexedItem();
    message.index = object.index ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseDataDynamic(): DataDynamic {
  return { items: [] };
}

export const DataDynamic: MessageFns<DataDynamic> = {
  encode(
    message: DataDynamic,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    for (const v of message.items) {
      DataDynamicItem.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataDynamic {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataDynamic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(DataDynamicItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataDynamic {
    return {
      items: globalThis.Array.isArray(object?.items)
        ? object.items.map((e: any) => DataDynamicItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DataDynamic): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => DataDynamicItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataDynamic>, I>>(base?: I): DataDynamic {
    return DataDynamic.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataDynamic>, I>>(
    object: I
  ): DataDynamic {
    const message = createBaseDataDynamic();
    message.items =
      object.items?.map((e) => DataDynamicItem.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
